name: HumanEval_110_exchange
language: jl
results:
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst1 = lst1.^2\n    lst2 = lst2.^2\n    lst1\
    \ = lst1 + lst2\n    @show lst1\n    if all(lst1)%2 == 0\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "lst1 = [2, 8, 18, 32]\ntest set: Error During Test at /tmp/tmp36ota729.jl:29\n\
    \  Test threw exception\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) ==\
    \ \"YES\"\n  TypeError: non-boolean (Int64) used in boolean context\n  Stacktrace:\n\
    \   [1] _all\n     @ ./reduce.jl:1161 [inlined]\n   [2] _all\n     @ ./reducedim.jl:903\
    \ [inlined]\n   [3] #all#756\n     @ ./reducedim.jl:901 [inlined]\n   [4] all\n\
    \     @ ./reducedim.jl:901 [inlined]\n   [5] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp36ota729.jl:18\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp36ota729.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp36ota729.jl:28\nlst1 = [2,\
    \ 29, 18, 32]\ntest set: Error During Test at /tmp/tmp36ota729.jl:30\n  Test threw\
    \ exception\n  Expression: candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n \
    \ TypeError: non-boolean (Int64) used in boolean context\n  Stacktrace:\n   [1]\
    \ _all\n     @ ./reduce.jl:1161 [inlined]\n   [2] _all\n     @ ./reducedim.jl:903\
    \ [inlined]\n   [3] #all#756\n     @ ./reducedim.jl:901 [inlined]\n   [4] all\n\
    \     @ ./reducedim.jl:901 [inlined]\n   [5] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp36ota729.jl:18\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp36ota729.jl:30 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp36ota729.jl:28\nlst1 = [5,\
    \ 5, 25, 25]\ntest set: Error During Test at /tmp/tmp36ota729.jl:31\n  Test threw\
    \ exception\n  Expression: candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n\
    \  TypeError: non-boolean (Int64) used in boolean context\n  Stacktrace:\n   [1]\
    \ _all\n     @ ./reduce.jl:1161 [inlined]\n   [2] _all\n     @ ./reducedim.jl:903\
    \ [inlined]\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36ota729.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    odd_indices = findall(x -> x % 2 != 0, lst1)\n\
    \    odd_indices = odd_indices[1] # if there are many odd numbers in the first\
    \ list, take only one\n    if !(odd_indices in 1:length(lst1))\n        return\
    \ \"YES\"\n    end\n    possible_even_indices = findall(x -> x % 2 == 0, lst2)\n\
    \    if !(length(possible_even_indices) > 0)\n        return \"NO\"\n    end\n\
    \    lst1[odd_indices], lst2[possible_even_indices[1]] = lst2[possible_even_indices[1]],\
    \ lst1[odd_indices]\n    \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4zky5tdq.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zky5tdq.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zky5tdq.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4zky5tdq.jl:35\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zky5tdq.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zky5tdq.jl:30\ntest set: Error\
    \ During Test at /tmp/tmp4zky5tdq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([100, 200], [200, 200]) == \"YES\"\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp4zky5tdq.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4zky5tdq.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4zky5tdq.jl:30\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    4     2      1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zky5tdq.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for i in 1:length(lst1)\n        for j in\
    \ 1:length(lst2)\n            if mod(lst1[i], 2) == 1 && mod(lst2[j], 2) == 0\n\
    \                tmp = lst1[i]\n                lst1[i] = lst2[j]\n          \
    \      lst2[j] = tmp\n            end\n        end\n    end\n    for i in 1:length(lst1)\n\
    \        if mod(lst1[i], 2) == 1\n            return \"NO\"\n        end\n   \
    \ end\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even_lst1 = isempty(lst1[lst1 .% 2 .!= 0])\n\
    \    even_lst2 = isempty(lst2[lst2 .% 2 .!= 0])\n    if even_lst1 == false &&\
    \ even_lst2 == false\n        return \"NO\"\n    elseif even_lst1 == true && even_lst2\
    \ == true\n        return \"YES\"\n    else\n        return \"YES\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpczlnb2um.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpczlnb2um.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpczlnb2um.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpczlnb2um.jl:31\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpczlnb2um.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpczlnb2um.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpczlnb2um.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    evens = [i for i in lst1 if i % 2 == 0]\n\
    \    odds = [i for i in lst1 if i % 2 != 0]\n    if length(evens) == length(lst1)\n\
    \        return \"YES\"\n    elseif length(odds) == length(lst1)\n        return\
    \ \"NO\"\n    else\n        return exchange(evens, odds)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1mtb6fbq.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1mtb6fbq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1mtb6fbq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1mtb6fbq.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1mtb6fbq.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1mtb6fbq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp1mtb6fbq.jl:34\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1mtb6fbq.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1mtb6fbq.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1mtb6fbq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    function that takes two lists\
    \ of numbers, and determines whether it is\n    possible to perform an exchange\
    \ of elements between them to make lst1 a\n    list of only even numbers.\n  \
    \  \"\"\"\n    n_odd = count(i -> i % 2 != 0, lst1)\n    n_even = count(i -> i\
    \ % 2 == 0, lst2)\n    return \"YES\" if n_odd <= n_even else \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmplg5y9z7x.jl:13 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplg5y9z7x.jl:21\n\
    in expression starting at /tmp/tmplg5y9z7x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    N = length(lst1)\n    for i in 1:N\n    \
    \    for j in 1:N\n            if (mod(lst1[i], 2) != 0) & (mod(lst2[j], 2) ==\
    \ 0)\n                return \"YES\"\n            end\n        end\n    end\n\
    \    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpl1ksnfui.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ksnfui.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ksnfui.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpl1ksnfui.jl:33\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ksnfui.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ksnfui.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpl1ksnfui.jl:35\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1ksnfui.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1ksnfui.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1ksnfui.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    Given two lists, lst1 and lst2,\
    \ with elements as numbers,\n    determine if there is a way to exchange elements\
    \ of lst1 and lst2\n    so that all the elements of lst1 become even.\n    \"\"\
    \"\n    if lst1[1]%2==0\n        lst1\n    elseif lst2[1]%2==0\n        lst2\n\
    \    else\n        \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0hwj2hg9.jl:32\\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\n   Evaluated: \"NO\" == \"YES\"\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp0hwj2hg9.jl:32 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp0hwj2hg9.jl:31\\ntest set: Error\
    \ During Test at /tmp/tmp0hwj2hg9.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\\
    n     @ Main /tmp/tmp0hwj2hg9.jl:22\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0hwj2hg9.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0hwj2hg9.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp0hwj2hg9.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/ce"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    # The idea is to use XOR (exclusive\
    \ or) to check whether there are odd numbers\n    # If all numbers are odd, we\
    \ XOR them, the result will be 0, \n    # Otherwise, the result is non-zero, so\
    \ the list contains odd numbers.\n    # Since XOR has the property that: A XOR\
    \ A = 0, this means that if we XOR\n    # all odd numbers in list 1 with all odd\
    \ numbers in list 2, the result will be 0.\n    # This means we can make all numbers\
    \ in list 1 to be even\n    lst1_odds = sum(x->(x & 1), lst1)\n    lst2_odds =\
    \ sum(x->(x & 1), lst2)\n    if (lst1_odds == 0) && (lst2_odds == 0)\n       \
    \ return \"YES\"\n    elseif (lst1_odds != 0) && (lst2_odds != 0) && (lst1_odds\
    \ + lst2_odds == 0)\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbq4au69x.jl:36\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbq4au69x.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbq4au69x.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbq4au69x.jl:38\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbq4au69x.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbq4au69x.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbq4au69x.jl:39\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbq4au69x.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbq4au69x.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbq4au69x.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"*** YOUR CODE HERE ***\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpopoxcyo9.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"*** YOUR CODE HERE ***\"\
    \ == \"YES\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopoxcyo9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopoxcyo9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpopoxcyo9.jl:22\n  Expression: candidate([1, 2, 3, 4], [1,\
    \ 5, 3, 4]) == \"NO\"\n   Evaluated: \"*** YOUR CODE HERE ***\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopoxcyo9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopoxcyo9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpopoxcyo9.jl:23\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"*** YOUR CODE HERE ***\" == \"YES\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopoxcyo9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopoxcyo9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpopoxcyo9.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"*** YOUR CODE HERE ***\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopoxcyo9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopoxcyo9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpopoxcyo9.jl:25\n  Expression: candidate("
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpopoxcyo9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even = 0\n    odd = 0\n    length = 0\n \
    \   for i = 1:length(lst1)\n        if mod(lst1[i], 2) == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n    end\n    for i =\
    \ 1:length(lst2)\n        if mod(lst2[i], 2) == 0\n            even += 1\n   \
    \     else\n            odd += 1\n        end\n    end\n    if even == 0\n   \
    \     return \"NO\"\n    end\n    if odd == 0\n        return \"YES\"\n    end\n\
    \    if even > odd\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp31uw36ah.jl:48\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ objects of type Int64 are not callable\n  Maybe you forgot to use an operator\
    \ such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmp31uw36ah.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp31uw36ah.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp31uw36ah.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp31uw36ah.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: objects of type\
    \ Int64 are not callable\n  Maybe you forgot to use an operator such as *, ^,\
    \ %, / etc. ?\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp31uw36ah.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp31uw36ah.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp31uw36ah.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp31uw36ah.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  MethodError: objects of\
    \ type Int64 are not callable\n  Maybe you forgot to use an operator such as *,\
    \ ^, %, / etc. ?\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp31uw36ah.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp31uw36ah.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp31uw36ah.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # initialize a counter\n    counter = 0\n\
    \    # iterate over the first list\n    for i in 1:length(lst1)\n        # if\
    \ the element is odd, and the second list contains even number\n        if lst1[i]\
    \ % 2 != 0 && length(lst2[lst2 .% 2 .== 0]) > 0\n            # remove the first\
    \ even number and replace the odd number by the even number\n            lst1[i]\
    \ = popfirst!(lst2[lst2 .% 2 .== 0])\n            # increase the counter\n   \
    \         counter += 1\n        # if the element is odd, and the second list contains\
    \ no even number\n        elseif lst1[i] % 2 != 0 && length(lst2[lst2 .% 2 .==\
    \ 0]) == 0\n            # break out the loop\n            break\n        end\n\
    \    end\n    # if all numbers in the first list are even\n    if length(lst1[lst1\
    \ .% 2 .== 0]) == length(lst1)\n        # return \"YES\"\n        return \"YES\"\
    \n    # if not\n    else\n        # return \"NO\"\n        return \"NO\"\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpetq18k2q.jl:46\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetq18k2q.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetq18k2q.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpetq18k2q.jl:49\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpetq18k2q.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpetq18k2q.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpetq18k2q.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all([elem % 2 == 0 for elem in lst1])\n\
    \        return \"YES\"\n    elseif lst1[1] % 2 == 0\n        return \"YES\"\n\
    \    elseif lst2[1] % 2 == 0\n        swap!(lst1, 1, 1)\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpss8idyxg.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpss8idyxg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpss8idyxg.jl:29\ntest set: Error\
    \ During Test at /tmp/tmpss8idyxg.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  UndefVarError: swap! not\
    \ defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpss8idyxg.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpss8idyxg.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpss8idyxg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpss8idyxg.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n  UndefVarError: swap! not defined\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmpss8idyxg.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpss8idyxg.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpss8idyxg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpss8idyxg.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 3]) == \"NO\"\n  UndefVarError: swap! not defined\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmpss8idyxg.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpss8idyxg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for i in lst1\n        for j in lst2\n  \
    \          if i % 2 == 0 && j % 2 != 0\n                return \"YES\"\n     \
    \       end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy13ctbbr.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy13ctbbr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy13ctbbr.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpy13ctbbr.jl:31\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy13ctbbr.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy13ctbbr.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpy13ctbbr.jl:33\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy13ctbbr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy13ctbbr.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpy13ctbbr.jl:34\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy13ctbbr.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy13ctbbr.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy13ctbbr.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even1 = iseven.(lst1)\n    even2 = iseven.(lst2)\n\
    \    common = even1 & even2\n    return \"YES\" * (isequal(even1, common) || isequal(even2,\
    \ common)) * 1 + \"NO\" * (isequal(even1, common) || isequal(even2, common)) *\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmps0_ir8sj.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ no method matching &(::BitVector, ::BitVector)\n  Closest candidates are:\n\
    \    &(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmps0_ir8sj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps0_ir8sj.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps0_ir8sj.jl:23\ntest set:\
    \ Error During Test at /tmp/tmps0_ir8sj.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: no method matching\
    \ &(::BitVector, ::BitVector)\n  Closest candidates are:\n    &(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmps0_ir8sj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps0_ir8sj.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps0_ir8sj.jl:23\ntest set:\
    \ Error During Test at /tmp/tmps0_ir8sj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  MethodError: no method matching\
    \ &(::BitVector, ::BitVector)\n  Closest candidates are:\n    &(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmps0_ir8sj.jl:16\n   [2] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps0_ir8sj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Add your code here\nend\n \n \n\"\"\"There\
    \ are n people around a table, counting from 1 to n.\n    Each person i is holding\
    \ in his/her hand a list lst_i of cards.\n    Each card has a number written on\
    \ it.\n    A person might have multiple cards with the same number written on\
    \ them.\n    At any time, a person can exchange one of his/her cards for a card\
    \ of a\n    different person, as long as he/she picks a card that has a different\
    \ number\n    from all the other cards in his/her hand.\n    A person is allowed\
    \ to exchange any number of cards as long as all the\n    above conditions are\
    \ satisfied.\n    A person is not allowed to pick up a card or put down a card.\n\
    \    A person can only exchange cards with his/her neighbor in the counter-clockwise\
    \ direction.\n    The people around the table are arranged in a circle so that\
    \ any person\n    i has two neighbors, one in the counter-clockwise direction,\
    \ called the left\n    neighbor and one in the clockwise direction, called the\
    \ right neighbor.\n    We define the happiness level of a person as the number\
    \ of unique numbers\n    in the list of cards in his/her hand.\n    Our goal is\
    \ to maximize the happiness level of all people.\n    We are allowed to perform\
    \ as many operations as we want.\n    We want to know the maximum possible happiness\
    \ level after performing\n    multiple operations.\n    Your task is to implement\
    \ a function that computes the maximum possible\n    happiness level.\n    For\
    \ example:\n    maximize_happiness([[1,1,1],[1,1,1],[1,1,1]]) => 3\n    maximize_happiness([[1,1,1],[1,1,1],[1,1,2]])\
    \ => 4\n    maximize_happiness([[1,1,1],[1,1,1],[1,1,2],[2,2,2]]) => 4\n    maximize_happiness([[1,1,1],[1,1,1],[1,1,2],[2,2,2],[1,1,1]])\
    \ => 4\n    maximize_happiness([[1,1,1],[1,1,1],[1,1,2],[2,2,2],[1,\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3di0xg2b.jl:18\nin expression starting at\
    \ /tmp/tmp3di0xg2b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if sum(x % 2 for x in lst1) == 0\n      \
    \  return \"YES\"\n    else\n        for i in 1:length(lst1)\n            if lst1[i]\
    \ % 2 != 0\n                for j in 1:length(lst2)\n                    if lst2[j]\
    \ % 2 != 0\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n    \
    \                    return exchange(lst1, lst2)\n                    end\n  \
    \              end\n            end\n        end\n    end\n    return \"NO\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    odd_lst1 = [true for i in lst1 if i % 2 !=\
    \ 0]\n    even_lst2 = [true for i in lst2 if i % 2 == 0]\n    if length(odd_lst1)\
    \ == length(even_lst2)\n        return \"YES\"\n    else\n        return \"NO\"\
    \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpt82jtpuz.jl:33\n  Expression: candidate([100,\
    \ 200], [200, 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt82jtpuz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt82jtpuz.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt82jtpuz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    isodd(i) = (i % 2 == 1)\n    odd1 = count(isodd,\
    \ lst1)\n    odd2 = count(isodd, lst2)\n    return odd1 <= odd2 ? \"YES\" : \"\
    NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzh98gb9x.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzh98gb9x.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzh98gb9x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzh98gb9x.jl:27\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzh98gb9x.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzh98gb9x.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzh98gb9x.jl:29\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzh98gb9x.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzh98gb9x.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzh98gb9x.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even_lst1 = iseven.(lst1)\n    even_lst2\
    \ = iseven.(lst2)\n    if all(even_lst1)\n        return \"YES\"\n    elseif all(even_lst2)\n\
    \        return \"YES\"\n    elseif !all(even_lst1) && !all(even_lst2)\n     \
    \   return \"NO\"\n    elseif count(even_lst1) >= count(even_lst2)\n        for\
    \ (i, n) in enumerate(even_lst1)\n            if n == false\n                for\
    \ (j, m) in enumerate(even_lst2)\n                    if m == true\n         \
    \               lst1[i], lst2[j] = lst2[j], lst1[i]\n                        break\n\
    \                    end\n                end\n            end\n        end\n\
    \        if all(iseven.(lst1))\n            return \"YES\"\n        else\n   \
    \         return \"NO\"\n        end\n    else\n        for (i, n) in enumerate(even_lst2)\n\
    \            if n == false\n                for (j, m) in enumerate(even_lst1)\n\
    \                    if m == true\n                        lst2[i], lst1[j] =\
    \ lst1[j], lst2[i]\n                        break\n                    end\n \
    \               end\n            end\n        end\n        if all(iseven.(lst2))\n\
    \            return \"YES\"\n        else\n            return \"NO\"\n       \
    \ end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t\
    @test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7me31e04.jl:61\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7me31e04.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7me31e04.jl:60\ntest set: Test\
    \ Failed at /tmp/tmp7me31e04.jl:63\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7me31e04.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7me31e04.jl:60\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7me31e04.jl:58\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for i in lst1\n        if !(i % 2 == 0)\n\
    \            for j in lst2\n                if j % 2 == 0\n                  \
    \  return \"YES\"\n                end\n            end\n        end\n    end\n\
    \    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphlhgqqne.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphlhgqqne.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphlhgqqne.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphlhgqqne.jl:34\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphlhgqqne.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphlhgqqne.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphlhgqqne.jl:36\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphlhgqqne.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphlhgqqne.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphlhgqqne.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    o = Set(1:length(lst1))\n    e = Set(1:length(lst1))\n\
    \    o = filter(x -> lst1[x] % 2 == 1, o)\n    e = filter(x -> lst1[x] % 2 ==\
    \ 0, e)\n    for i in o\n        if (lst2[i] % 2 == 0)\n            return \"\
    YES\"\n        end\n    end\n    for i in e\n        if (lst2[i] % 2 == 1)\n \
    \           return \"YES\"\n        end\n    end\n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpli001_u_.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpli001_u_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpli001_u_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpli001_u_.jl:36\n  Expression: candidate([1, 2, 3, 4], [1,\
    \ 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpli001_u_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpli001_u_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpli001_u_.jl:39\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpli001_u_.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpli001_u_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpli001_u_.jl:40\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpli001_u_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpli001_u_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpli001_u_.jl:41\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktra"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpli001_u_.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    x = 0\n    for i in lst1\n        if i %\
    \ 2 != 0\n            x += 1\n        end\n    end\n    y = 0\n    for i in lst2\n\
    \        if i % 2 == 0\n            y += 1\n        end\n    end\n    if x ==\
    \ y\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4tdmfp6o.jl:43\n  Expression: candidate([100,\
    \ 200], [200, 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4tdmfp6o.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4tdmfp6o.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4tdmfp6o.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even_lst1 = filter(x -> x % 2 == 0, lst1)\n\
    \    for i in 1:length(lst1)\n        even_lst1 = push!(even_lst1, lst2[i])\n\
    \        if sum(even_lst1) == 0\n            return \"YES\"\n        end\n   \
    \ end\n    return \"NO\"\nend\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfvrprgf_.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfvrprgf_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfvrprgf_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfvrprgf_.jl:31\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfvrprgf_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfvrprgf_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfvrprgf_.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfvrprgf_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfvrprgf_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfvrprgf_.jl:35\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfvrprgf_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfvrprgf_.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfvrprgf_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\" Takes 2 lists and returns YES if there\
    \ is an exchange of element between the lists that turns lst1 into an even number\n\
    \        \"\"\"\n    s=0\n    if length(lst1) != length(lst2)\n        return\
    \ \"NO\"\n    end\n    for i in lst1\n        if i%2 != 0\n            s+=1\n\
    \        end\n    end\n    if s == length(lst1)\n        return \"NO\"\n    end\n\
    \    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmjslb283.jl:36\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjslb283.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjslb283.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpmjslb283.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjslb283.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjslb283.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpmjslb283.jl:40\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjslb283.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjslb283.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjslb283.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst1_even = count(e -> e % 2 == 0, lst1)\n\
    \    lst2_even = count(e -> e % 2 == 0, lst2)\n    if (lst1_even + lst2_even)\
    \ >= length(lst1)\n        return \"YES\"\n    else\n        return \"NO\"\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    ### Your code here ###\n    \"\
    \"\"\n    return \"YES\"\nend\n \n\"\"\"In this problem, you will implement a\
    \ function that takes a list of numbers and\n    determines whether it is possible\
    \ to remove exactly one element from it\n    to get a list with no duplicates.\n\
    \    If it is possible to remove exactly one element from the input list to get\
    \ a\n    list with no duplicates, return \"YES\".\n    Otherwise, return \"NO\"\
    .\n    For example:\n    duplicate_eliminate([1, 2, 3, 4]) => \"YES\"\n    duplicate_eliminate([1,\
    \ 2, 3, 3]) => \"NO\"\n    It is assumed that the input list will be non-empty.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpixzxng6w.jl:20\nin expression starting at /tmp/tmpixzxng6w.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    num_of_odds = sum(map(x -> mod(x, 2), lst1))\n\
    \    num_of_evens = length(lst1) - num_of_odds\n    num_of_odds_in_lst2 = sum(map(x\
    \ -> mod(x, 2), lst2))\n    num_of_evens_in_lst2 = length(lst2) - num_of_odds_in_lst2\n\
    \    if num_of_odds > num_of_evens_in_lst2 || num_of_evens > num_of_odds_in_lst2\n\
    \        return \"NO\"\n    else\n        return \"YES\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4f_y7nju.jl:35\n  Expression: candidate([100,\
    \ 200], [200, 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4f_y7nju.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4f_y7nju.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4f_y7nju.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    i1 = 1\n    i2 = 1\n    l1 = length(lst1)\n\
    \    l2 = length(lst2)\n    output = \"NO\"\n    \n    # Step 1: Check all elements\
    \ of lst1 are even. If so, return \"YES\"\n    while i1 <= l1\n        if lst1[i1]\
    \ % 2 == 0\n            i1 += 1\n        else \n            break\n        end\n\
    \    end\n    if i1 == l1 + 1\n        return \"YES\"\n    end\n    \n    # Step\
    \ 2: Check if lst2 contains a single even number. If so, swap with lst1\n    #\
    \ odd number. If the new lst1 is all even, return \"YES\"\n    while i2 <= l2\n\
    \        if lst2[i2] % 2 == 0\n            temp = lst1[i1]\n            lst1[i1]\
    \ = lst2[i2]\n            lst2[i2] = temp\n            i1 += 1\n            if\
    \ i1 == l1 + 1\n                return \"YES\"\n            end\n        end\n\
    \        i2 += 1\n    end\n    \n    # Step 3: Check if lst2 contains two even\
    \ numbers. If so, swap with lst1\n    # odd numbers. If the new lst1 is all even,\
    \ return \"YES\"\n    i2 = 1\n    while i2 <= l2 - 1\n        if lst2[i2] % 2\
    \ == 0 && lst2[i2 + 1] % 2 == 0\n            temp = lst1[i1]\n            lst1[i1]\
    \ = lst2[i2]\n            lst2[i2] = temp\n            i1 += 1\n            temp\
    \ = lst1[i1]\n            lst1[i1] = lst2[i2 + 1]\n            lst2[i2 + 1] =\
    \ temp\n            i1 += 1\n            if i1 == l1 + 1\n                return\
    \ \"YES\"\n            end\n        end\n        i2 += 1\n    end\n    \n    return\
    \ output\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvv0d1wq3.jl:75\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvv0d1wq3.jl:75 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvv0d1wq3.jl:74\ntest set: Test\
    \ Failed at /tmp/tmpvv0d1wq3.jl:77\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvv0d1wq3.jl:77 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvv0d1wq3.jl:74\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvv0d1wq3.jl:72\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    odd_lst1 = false\n    for e in lst1\n   \
    \     if e % 2 != 0\n            odd_lst1 = true\n            break\n        end\n\
    \    end\n    even_lst2 = false\n    for e in lst2\n        if e % 2 == 0\n  \
    \          even_lst2 = true\n            break\n        end\n    end\n    if odd_lst1\
    \ && even_lst2\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp16io3d6o.jl:40\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16io3d6o.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16io3d6o.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp16io3d6o.jl:43\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16io3d6o.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16io3d6o.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp16io3d6o.jl:45\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16io3d6o.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16io3d6o.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp16io3d6o.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    len_lst1 = length(lst1)\n    len_lst2 = length(lst2)\n\
    \    if len_lst1 == 0 || len_lst2 == 0\n        return \"NO\"\n    end\n    for\
    \ i in 1:len_lst1\n        for j in 1:len_lst2\n            if lst1[i] % 2 ==\
    \ 1 && lst2[j] % 2 == 0\n                temp = lst1[i]\n                lst1[i]\
    \ = lst2[j]\n                lst2[j] = temp\n            end\n        end\n  \
    \  end\n    if sum(x % 2 == 0 for x in lst1) == len_lst1\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"Exchange the elements between lst1 and\
    \ lst2 to make lst1 contains even numbers\"\n    for i in 1:length(lst1)\n   \
    \     if lst1[i] % 2 == 1\n            for j in 1:length(lst2)\n             \
    \   if lst2[j] % 2 == 0\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    if all(map(isEven, lst1))\n        return \"YES\"\n    else\n  \
    \      return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp9x9z5fe4.jl:36\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  UndefVarError:\
    \ isEven not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp9x9z5fe4.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9x9z5fe4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9x9z5fe4.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9x9z5fe4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  UndefVarError: isEven not\
    \ defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp9x9z5fe4.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9x9z5fe4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9x9z5fe4.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9x9z5fe4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  UndefVarError: isEven not\
    \ defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp9x9z5fe4.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9x9z5fe4.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9x9z5fe4.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9x9z5fe4.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n  UndefVarError: isEven not defined\n\
    \  Stacktr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9x9z5fe4.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if any(x->x%2==1, lst1) && any(x->x%2==0,\
    \ lst2)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3c8oyqts.jl:26\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3c8oyqts.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3c8oyqts.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3c8oyqts.jl:29\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3c8oyqts.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3c8oyqts.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp3c8oyqts.jl:31\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3c8oyqts.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3c8oyqts.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3c8oyqts.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) < length(lst2)\n        return\
    \ exchange(lst2, lst1)\n    end\n    if sum(map(x -> mod(x, 2), lst1)) == 0\n\
    \        return \"YES\"\n    end\n    if sum(map(x -> mod(x, 2), lst2)) == 0\n\
    \        return \"NO\"\n    end\n    for i in 1:length(lst2)\n        val = lst2[i]\n\
    \        for j in 1:length(lst1)\n            if mod(val, 2) != mod(lst1[j], 2)\n\
    \                val, lst1[j] = lst1[j], val\n                if mod(val, 2) ==\
    \ 0\n                    lst2[i] = val\n                    return exchange(lst1,\
    \ lst2)\n                end\n            end\n        end\n    end\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4efuxls2.jl:42\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4efuxls2.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4efuxls2.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp4efuxls2.jl:44\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4efuxls2.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4efuxls2.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp4efuxls2.jl:45\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4efuxls2.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4efuxls2.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4efuxls2.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # \"YES\" or \"NO\"\n    # YOUR CODE HERE\n\
    \    even_indexes = findall(x -> x % 2 == 0, lst1)\n    if size(even_indexes)[1]\
    \ != 0\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n   \
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpohmtcztb.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohmtcztb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohmtcztb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpohmtcztb.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohmtcztb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohmtcztb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpohmtcztb.jl:34\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpohmtcztb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpohmtcztb.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpohmtcztb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    is_even(x) = x % 2 == 0\n    all_even(lst)\
    \ = isempty(findall(is_even, lst))\n    first = lst1[1]\n    second = lst2[1]\n\
    \    if all_even(lst1)\n        return \"YES\"\n    elseif !is_even(first) &&\
    \ is_even(second)\n        return exchange(pop!(lst1), push!(lst2, first))\n \
    \   elseif is_even(first) && !is_even(second)\n        return exchange(push!(lst1,\
    \ second), pop!(lst2))\n    elseif !is_even(first) && !is_even(second)\n     \
    \   return exchange(pop!(lst1), pop!(lst2))\n    else\n        return exchange(push!(lst1,\
    \ second), push!(lst2, first))\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpllfgjj85.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\\\
    n  MethodError: no method matching exchange(::Int64, ::Int64)\\n  Stacktrace:\\\
    n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n     @ Main /tmp/tmpllfgjj85.jl:25\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpllfgjj85.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpllfgjj85.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpllfgjj85.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\\n  MethodError: no method matching\
    \ exchange(::Int64, ::Int64)\\n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\\n     @ Main /tmp/tmpllfgjj85.jl:25\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpllfgjj85.jl:36 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpllfgjj85.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpllfgjj85.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\\n  MethodError: no method\
    \ matching exchange(::Int64, ::Vector{Int64})\\n  Closest candidates are:\\n \
    \   exchange(!Matched::Vector{Int64}, ::Vector{Int64}) at /tmp/tmpllfgjj85.jl:13\\\
    n  Stacktrace:\\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\\n\
    \     @ Main /tmp/tmpllfgjj85.jl:21\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpllfgjj85.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inl"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Create a list that contains the even numbers\
    \ in lst1\n    e1 = [x for x in lst1 if iseven(x)]\n    # Create a list that contains\
    \ the odd numbers in lst1\n    o1 = [x for x in lst1 if !iseven(x)]\n    # Create\
    \ a list that contains the even numbers in lst2\n    e2 = [x for x in lst2 if\
    \ iseven(x)]\n    # Create a list that contains the odd numbers in lst2\n    o2\
    \ = [x for x in lst2 if !iseven(x)]\n    # Check if the number of odd numbers\
    \ in lst1 is equal to the number of even numbers in lst2.\n    if (length(o1)\
    \ == length(e2))\n        return \"YES\"\n    end\n    # Check if the number of\
    \ odd numbers in lst2 is equal to the number of even numbers in lst1.\n    if\
    \ (length(o2) == length(e1))\n        return \"YES\"\n    end\n    # Otherwise,\
    \ return \"NO\"\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsiluhybh.jl:44\n  Expression: candidate([100,\
    \ 200], [200, 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsiluhybh.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsiluhybh.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsiluhybh.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # check if any element in lst1 is even\n\
    \    for i in lst1\n        if i % 2 == 0\n            return \"YES\"\n      \
    \  end\n    end\n    # check if any element in lst2 is even\n    for i in lst2\n\
    \        if i % 2 == 0\n            return \"YES\"\n        end\n    end\n   \
    \ # otherwise\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdmh2vv9r.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmh2vv9r.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmh2vv9r.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdmh2vv9r.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmh2vv9r.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmh2vv9r.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdmh2vv9r.jl:39\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmh2vv9r.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmh2vv9r.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdmh2vv9r.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    lst1_all_even = true\n    for i in\
    \ lst1\n        if i % 2 != 0\n            lst1_all_even = false\n        end\n\
    \    end\n    \n    lst2_all_even = true\n    for i in lst2\n        if i % 2\
    \ != 0\n            lst2_all_even = false\n        end\n    end\n    \n    if\
    \ lst1_all_even && lst2_all_even\n        return \"YES\"\n    elseif lst1_all_even\
    \ && !lst2_all_even\n        return \"NO\"\n    elseif !lst1_all_even && lst2_all_even\n\
    \        return \"NO\"\n    else\n        return \"YES\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpomze_fal.jl:45\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpomze_fal.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpomze_fal.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpomze_fal.jl:47\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpomze_fal.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpomze_fal.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpomze_fal.jl:48\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpomze_fal.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpomze_fal.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpomze_fal.jl:49\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpomze_fal.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpomze_fal.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpomze_fal.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    This function takes as input\
    \ two lists of numbers, lst1 and lst2.\n    It will return \"YES\" if it is possible\
    \ to exchange elements\n    between lst1 and lst2 to make all elements of lst1\
    \ to be even.\n    Otherwise, it will return \"NO\".\n    \"\"\"\n    # YOUR CODE\
    \ HERE\n    yes = true\n    no = false\n    if isempty(lst1) == true\n       \
    \ return \"YES\"\n    elseif isempty(lst2) == true\n        return \"NO\"\n  \
    \  elseif !(iseven(lst1[1])) && lst2[1] != lst1[1]\n        if iseven(lst2[1])\n\
    \            return \"YES\"\n        else\n            return \"NO\"\n       \
    \ end\n    elseif iseven(lst1[1])\n        return exchange(lst1[2:end], lst2[2:end])\n\
    \    else\n        return \"NO\"\n    end\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr681i5wz.jl:45\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr681i5wz.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr681i5wz.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpr681i5wz.jl:49\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr681i5wz.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr681i5wz.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr681i5wz.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    Determine whether exchange of\
    \ elements in lst1 and lst2 can make lst1 all even\n    \"\"\"\n    if(all(x ->\
    \ x % 2 == 0, lst1))\n        return \"YES\"\n    end\n    el1 = Vector{Int64}()\n\
    \    o1 = Vector{Int64}()\n    for (i, x) in enumerate(lst1)\n        if x % 2\
    \ == 0\n            push!(el1, x)\n        else\n            push!(o1, i)\n  \
    \      end\n    end\n    l1 = length(el1)\n    l2 = length(o1)\n    if l1 + l2\
    \ > length(lst2)\n        return \"NO\"\n    end\n    for i in 1:l1\n        for\
    \ j in 1:l2\n            lst1[o1[j]] = lst2[i]\n            lst2[i] = el1[i]\n\
    \        end\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5rgofs_p.jl:48\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5rgofs_p.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5rgofs_p.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp5rgofs_p.jl:51\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5rgofs_p.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5rgofs_p.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp5rgofs_p.jl:52\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5rgofs_p.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5rgofs_p.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5rgofs_p.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    iseven(n) = n % 2 == 0\n    c1 = sum(iseven.(lst1))\n\
    \    c2 = sum(iseven.(lst2))\n    (c1 == length(lst1) || c2 == length(lst2)) &&\
    \ c1 + c2 == length(lst1) + length(lst2) ? \"YES\" : \"NO\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo8iga0ze.jl:24\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8iga0ze.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8iga0ze.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo8iga0ze.jl:26\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8iga0ze.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8iga0ze.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo8iga0ze.jl:27\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8iga0ze.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8iga0ze.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8iga0ze.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    isodd1 = [i%2 for i in lst1]\n    isodd2\
    \ = [i%2 for i in lst2]\n    if sum(isodd1) == 0 return \"YES\" end\n    if sum(isodd2)\
    \ == 0 return \"YES\" end\n    if sum(isodd1) == sum(isodd2) return \"YES\" end\n\
    \    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    # Get the number of even numbers in\
    \ lst1.\n    evens = 0\n    for i = 1:length(lst1)\n        if mod(lst1[i], 2)\
    \ == 0\n            evens += 1\n        end\n    end\n    \n    # Get the number\
    \ of odd numbers in lst2.\n    odds = 0\n    for i = 1:length(lst2)\n        if\
    \ mod(lst2[i], 2) != 0\n            odds += 1\n        end\n    end\n    \n  \
    \  # Check if the difference between the number of evens in lst1 and\n    # the\
    \ number of odds in lst2 is zero.\n    if evens - odds == 0\n        return \"\
    YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnovxr1pp.jl:50\n  Expression: candidate([100,\
    \ 200], [200, 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnovxr1pp.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnovxr1pp.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnovxr1pp.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    Main function.\n    \"\"\"\n\
    \    # If all the elements of lst1 are even numbers.\n    if all(is_even, lst1)\
    \ \n        return \"YES\"\n    end\n    # If any of the elements in lst1 is odd\
    \ number and lst2 has even numbers\n    # Then elements can be exchanged.\n  \
    \  return \"YES\" * (check_lists(lst1, lst2) || check_lists(lst2, lst1)) \nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcdtou_9v.jl:30\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  UndefVarError:\
    \ is_even not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpcdtou_9v.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcdtou_9v.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcdtou_9v.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpcdtou_9v.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpcdtou_9v.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcdtou_9v.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcdtou_9v.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpcdtou_9v.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpcdtou_9v.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcdtou_9v.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcdtou_9v.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpcdtou_9v.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n  UndefVarError: is_even not defined\n\
    \  Sta"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcdtou_9v.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if any(lst1 .% 2 .== 0) || !any(lst2 .% 2\
    \ .== 1) \n        return \"YES\"\n    else \n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpljswwqoc.jl:26\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljswwqoc.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljswwqoc.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpljswwqoc.jl:30\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpljswwqoc.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpljswwqoc.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpljswwqoc.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if sum(lst1 .% 2) == 0\n        return\
    \ \"YES\"\n    end\n    \n    for i in range(1, length(lst1))\n        if lst1[i]\
    \ % 2 == 1\n            for j in range(1, length(lst2))\n                if lst2[j]\
    \ % 2 == 0\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n        \
    \            break\n                end\n            end\n        end\n    end\n\
    \    if sum(lst1 .% 2) == 0\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    count1 = 0\n    count2 = 0\n    for i = 1:length(lst1)\n\
    \        if lst1[i] % 2 == 0\n            count1 += 1\n        end\n    end\n\
    \    for i = 1:length(lst2)\n        if lst2[i] % 2 == 0\n            count2 +=\
    \ 1\n        end\n    end\n    if count1 + count2 == length(lst1) + length(lst2)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_9_g_hjd.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_9_g_hjd.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_9_g_hjd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_9_g_hjd.jl:39\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_9_g_hjd.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_9_g_hjd.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp_9_g_hjd.jl:40\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_9_g_hjd.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_9_g_hjd.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_9_g_hjd.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    odds = Set() #the set that contains all the\
    \ odd integers of lst1\n    evens = Set() #the set that contains all the even\
    \ integers of lst2\n    for i in lst1\n        if i % 2 == 1\n            push!(odds,\
    \ i)\n        end\n    end\n    for i in lst2\n        if i % 2 == 0\n       \
    \     push!(evens, i)\n        end\n    end\n    if odds == evens\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkcwev5d0.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcwev5d0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcwev5d0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpkcwev5d0.jl:39\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcwev5d0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcwev5d0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpkcwev5d0.jl:40\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcwev5d0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcwev5d0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpkcwev5d0.jl:43\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkcwev5d0.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkcwev5d0.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcwev5d0.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Function goes here\nend\n\"\"\"\n    In\
    \ this problem, you will be given two dictionaries, such as:\n    d1 = { \"c\"\
    : 3, \"a\": 1, \"b\": 2 }\n    d2 = { \"a\": 5, \"c\": 2, \"d\": 1 }\n    The\
    \ goal is to determine whether it is possible to rearrange the elements\n    in\
    \ d1 to make the sum of the values in d1 equal to the sum of the values\n    in\
    \ d2, and if so, return the list of elements which would be moved in d1.\n   \
    \ Otherwise, return -1.\n    For example:\n    rearrange({ \"c\": 3, \"a\": 1,\
    \ \"b\": 2 }, { \"a\": 5, \"c\": 2, \"d\": 1 })\n    => [[\"a\", \"c\"], [1, 3]]\n\
    \    rearrange({ \"c\": 3, \"a\": 1, \"b\": 2 }, { \"a\": 5, \"c\": 2, \"d\":\
    \ 1 })\n    => [[\"a\", \"b\"], [1, 2]]\n    Note that in the first example, we\
    \ move the \"a\" and \"c\" to get a sum of 1,\n    and in the second example,\
    \ we move the \"a\" and \"b\" to get a sum of 2.\n    If the rearrangement is\
    \ not possible, return -1.\n    It is assumed that the input dictionaries will\
    \ be non-empty.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpc2txz8my.jl:16\nin expression starting at /tmp/tmpc2txz8my.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    ####################################################################################\n\
    \    \"\"\"\n    Using it to generate a list of pairs (i1,i2)\n    where i1 is\
    \ an index of lst1, and i2 is an index of lst2.\n    Note that if (i1,i2) is in\
    \ the results, we can swap lst1[i1] with lst2[i2].\n    Since you can swap lst1[i1]\
    \ with lst2[i2], you can swap lst1[i1] with lst2[i2] as well.\n    \"\"\"\n  \
    \  function swap_pairs(lst1::Vector{Int64}, lst2::Vector{Int64})::Vector{Tuple{Int64,Int64}}\n\
    \        all_pairs=Tuple[]\n        for i1 in 1:length(lst1)\n            if iseven(lst1[i1])\n\
    \                continue\n            end\n            for i2 in 1:length(lst2)\n\
    \                if iseven(lst2[i2])\n                    continue\n         \
    \       end\n                push!(all_pairs,(i1,i2))\n            end\n     \
    \   end\n        return all_pairs\n    end\n    pairs=swap_pairs(lst1,lst2)\n\
    \    if length(pairs)==0\n        return \"NO\"\n    end\n    ####################################################################################\n\
    \    \"\"\"\n    This is a DFS algorithm to find an exchange of elements between\
    \ lst1 and lst2\n    to make lst1 even.\n    \"\"\"\n    function search(lst1::Vector{Int64},lst2::Vector{Int64},pairs::Vector{Tuple{Int64,Int64}})::Bool\n\
    \        if all(iseven,lst1)\n            return true\n        end\n        #\
    \ to find the first pair that is not used,\n        # and then search in another\
    \ branch\n        for i in 1:length(pairs)\n            # if this pair is already\
    \ used, we skip it\n            if !pairs[i][1]==0\n                continue\n\
    \            end\n            # mark it used\n            pairs[i][1]=1\n    \
    \        i1=pairs[i][2\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr712icbd.jl:1\nin expression starting at /tmp/tmpr712icbd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    l1 = length(lst1)\n    l2 = length(lst2)\n\
    \    # make a list of a 0's and 1's\n    # 1 means that is a even number\n   \
    \ # 0 means that it is a odd number\n    l1_list = zeros(Int64, l1)\n    l2_list\
    \ = zeros(Int64, l2)\n    for i in lst1\n        if i % 2 == 0\n            l1_list[i]\
    \ = 1\n        end\n    end\n    for i in lst2\n        if i % 2 == 0\n      \
    \      l2_list[i] = 1\n        end\n    end\n    if sum(l1_list) == l1\n     \
    \   return \"YES\"\n    end\n    if sum(l2_list) == l2\n        return \"YES\"\
    \n    end\n    if sum(l1_list) == l1 - 1 && sum(l2_list) == l2 - 1\n        return\
    \ \"YES\"\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp81kj8lal.jl:47\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp81kj8lal.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp81kj8lal.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp81kj8lal.jl:49\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp81kj8lal.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp81kj8lal.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp81kj8lal.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp81kj8lal.jl:28\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp81kj8lal.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp81kj8lal.jl:46\ntest set:\
    \ Error During Test at /tmp/tmp81kj8lal.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 3]) == \"NO\"\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp81kj8lal.jl:28\n   [3] macro expansion\n     @ /shared/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp81kj8lal.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n  # your code here\n  evens = 0\n  for i = 1:length(lst1)\n\
    \    if lst1[i] % 2 == 0\n      evens += 1\n    end\n  end\n  odds = length(lst1)\
    \ - evens\n  for i = 1:length(lst2)\n    if lst2[i] % 2 == 0\n      evens += 1\n\
    \    else\n      odds += 1\n    end\n  end\n  if odds == length(lst1) || evens\
    \ == length(lst1)\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnsntyeyr.jl:46\n  Expression: candidate([100,\
    \ 200], [200, 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnsntyeyr.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnsntyeyr.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsntyeyr.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    evens = 0\n    for i = 1:length(lst1)\n \
    \       if lst1[i] % 2 == 0\n            evens += 1\n        end\n    end\n  \
    \  for i = 1:length(lst2)\n        if lst2[i] % 2 == 0\n            evens += 1\n\
    \        end\n    end\n    if evens % 2 == 0\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpp5ybsjjn.jl:39\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp5ybsjjn.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp5ybsjjn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpp5ybsjjn.jl:40\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp5ybsjjn.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp5ybsjjn.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp5ybsjjn.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if lst1[1]%2 == 0\n        return \"YES\"\
    \n    elseif lst2[1]%2 == 0\n        for i in 1:length(lst1)\n            if lst1[i]%2\
    \ == 0\n                return \"YES\"\n            end\n        end\n       \
    \ return \"NO\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpli2lic56.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpli2lic56.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpli2lic56.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpli2lic56.jl:35\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpli2lic56.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpli2lic56.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpli2lic56.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even1 = 0\n    even2 = 0\n    n = 0\n   \
    \ for i in lst1\n        if (i % 2 == 0)\n            even1 += 1\n        end\n\
    \    end\n    for i in lst2\n        if (i % 2 == 0)\n            even2 += 1\n\
    \        end\n    end\n    n = even1 + even2\n    if (n == length(lst1) + length(lst2))\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph4qahehk.jl:39\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4qahehk.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4qahehk.jl:38\ntest set: Test\
    \ Failed at /tmp/tmph4qahehk.jl:41\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4qahehk.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4qahehk.jl:38\ntest set: Test\
    \ Failed at /tmp/tmph4qahehk.jl:42\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph4qahehk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph4qahehk.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph4qahehk.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    num_evens = sum(isodd, lst1)\n    num_odds\
    \ = length(lst1) - num_evens\n    # we can't do anything if there are no evens\
    \ in lst2\n    if sum(iseven, lst2) == 0\n        return \"NO\"\n    end\n   \
    \ # we can do anything if there are no odds in lst1\n    if num_odds == 0\n  \
    \      return \"YES\"\n    end\n    # if we have 2 or less odds then we can always\
    \ put them next to an even\n    if num_odds <= 2\n        return \"YES\"\n   \
    \ end\n    # if we can't make all the odds even then we can't make all the evens\
    \ odd\n    # check that we have enough evens in lst2\n    if sum(iseven, lst2)\
    \ < num_odds\n        return \"NO\"\n    end\n    # we can always make all the\
    \ odd elements in lst1 even\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph72gswga.jl:42\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph72gswga.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph72gswga.jl:40\ntest set: Test\
    \ Failed at /tmp/tmph72gswga.jl:45\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph72gswga.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph72gswga.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph72gswga.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    n1 = length(lst1)\n    n2 = length(lst2)\n\
    \    n = n1 * n2\n    lst = []\n    for i = 1:n1\n        for j = 1:n2\n     \
    \       push!(lst, lst1[i] + lst2[j])\n        end\n    end\n    for i = 1:n\n\
    \        if lst[i] % 2 == 0\n            return \"YES\"\n        end\n    end\n\
    \    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3xqah_vy.jl:36\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xqah_vy.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xqah_vy.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp3xqah_vy.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xqah_vy.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xqah_vy.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp3xqah_vy.jl:39\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xqah_vy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xqah_vy.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp3xqah_vy.jl:40\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xqah_vy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xqah_vy.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3xqah_vy.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even1 = [if iseven(n) n end for n in lst1]\n\
    \    even2 = [if iseven(n) n end for n in lst2]\n    if length(even1) == length(lst1)\n\
    \        return \"YES\"\n    elseif !isempty(even2)\n        push!(lst1, even2[1])\n\
    \        deleteat!(lst2, 1)\n        return exchange(lst1, lst2)\n    else\n \
    \       return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2e7wn7hu.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2e7wn7hu.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2e7wn7hu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2e7wn7hu.jl:35\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2e7wn7hu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2e7wn7hu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2e7wn7hu.jl:36\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2e7wn7hu.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2e7wn7hu.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2e7wn7hu.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    #if lst1 == lst2\n    #    return \"YES\"\
    \n    #end\n    lst12 = sort(vcat(lst1, lst2), rev=true)\n    lst1sort = lst12[1:end\xF7\
    2]\n    lst2sort = lst12[end\xF72+1:end]\n    if prod(lst1sort)%2 == 0 && prod(lst2sort)%2\
    \ == 0\n        return \"YES\"\n    elseif prod(lst1sort)%2 == 0 && sum(lst2sort)%2\
    \ == 0\n        return \"YES\"\n    elseif sum(lst1sort)%2 == 0 && prod(lst2sort)%2\
    \ == 0\n        return \"YES\"\n    elseif sum(lst1sort)%2 == 0 && sum(lst2sort)%2\
    \ == 0\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxwpht679.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwpht679.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwpht679.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxwpht679.jl:41\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwpht679.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwpht679.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxwpht679.jl:42\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxwpht679.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxwpht679.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxwpht679.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n   \"\"\"\n   Returns 'YES' if it is possible\
    \ to exchange elements between the lst1 and lst2 to make all the elements of lst1\
    \ to be even.\n   Otherwise, return 'NO'.\n   \"\"\"\n   \n    evens_1 = []\n\
    \    odds_1 = []\n    evens_2 = []\n    odds_2 = []\n    \n    for i in lst1\n\
    \        if i % 2 == 0\n            push!(evens_1, i)\n        else\n        \
    \    push!(odds_1, i)\n        end\n    end\n    \n    for i in lst2\n       \
    \ if i % 2 == 0\n            push!(evens_2, i)\n        else\n            push!(odds_2,\
    \ i)\n        end\n    end\n    \n    if length(evens_1) >= length(odds_1)\n \
    \       return \"YES\"\n    elseif length(evens_1) < length(odds_1) && length(evens_2)\
    \ > length(odds_2)\n        return \"YES\"\n    else\n        return \"NO\"\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpeb3811xe.jl:54\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeb3811xe.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeb3811xe.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpeb3811xe.jl:57\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeb3811xe.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeb3811xe.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpeb3811xe.jl:58\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeb3811xe.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeb3811xe.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeb3811xe.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    ODD = 1 \n    lst1_odds = Set([lst1[i] for\
    \ i in eachindex(lst1) if lst1[i]%2 == ODD])\n    lst2_odds = Set([lst2[i] for\
    \ i in eachindex(lst2) if lst2[i]%2 == ODD])\n    return \"YES\" if lst1_odds\
    \ \u2229 lst2_odds == Set([]) else \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpf_jmpa2q.jl:13 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf_jmpa2q.jl:17\n\
    in expression starting at /tmp/tmpf_jmpa2q.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    n = length(lst1)\n    for i in 1:n\n    \
    \    if !(lst1[i] % 2 == 0)\n            for j in 1:n\n                if !(lst2[j]\
    \ % 2 == 0)\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n       \
    \             break\n                end\n            end\n        end\n    end\n\
    \    if all(lst1 % 2 == 0)\n        return \"YES\"\n    else\n        return \"\
    NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t\
    @test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpcoerdlue.jl:36\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ no method matching rem(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpcoerdlue.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcoerdlue.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcoerdlue.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpcoerdlue.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: no method matching\
    \ rem(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:ToZero}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /shared/centos7/julia/1.7.3/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpcoerdlue.jl:25\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcoerdlue.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcoerdlue.jl:35\ntest set:\
    \ E"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcoerdlue.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst3 = lst1 - lst2\n    if all(x -> x%2 ==\
    \ 0, lst3)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvk4glzhf.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvk4glzhf.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvk4glzhf.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvk4glzhf.jl:29\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvk4glzhf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvk4glzhf.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvk4glzhf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"*** YOUR CODE HERE ***\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkwqk1tk4.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"*** YOUR CODE HERE ***\"\
    \ == \"YES\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkwqk1tk4.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkwqk1tk4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkwqk1tk4.jl:22\n  Expression: candidate([1, 2, 3, 4], [1,\
    \ 5, 3, 4]) == \"NO\"\n   Evaluated: \"*** YOUR CODE HERE ***\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkwqk1tk4.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkwqk1tk4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkwqk1tk4.jl:23\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"*** YOUR CODE HERE ***\" == \"YES\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkwqk1tk4.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkwqk1tk4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkwqk1tk4.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"*** YOUR CODE HERE ***\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkwqk1tk4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkwqk1tk4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkwqk1tk4.jl:25\n  Expression: candidate("
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkwqk1tk4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if isequal(sum(lst1), 0)\n        return\
    \ \"YES\"\n    elseif isequal(sum(lst2), 0)\n        return \"NO\"\n    else\n\
    \        lst1[1] = 0\n        lst2[1] = 0\n        exchange(lst1, lst2)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if sum(mod.(lst1, 2)) == 0 || sum(mod.(lst2,\
    \ 2)) == 0 \n        return \"YES\"\n    else \n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqyd16yej.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqyd16yej.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyd16yej.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqyd16yej.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqyd16yej.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqyd16yej.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqyd16yej.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    list_diff = lst1 - lst2\n    list_exchange\
    \ = []\n    for i in 1:length(list_diff)\n        if list_diff[i] != 0\n     \
    \       push!(list_exchange, list_diff[i])\n        end\n    end\n    list_exchange\
    \ = sort(list_exchange)\n    for i in 1:length(list_exchange)\n        if list_exchange[i]\
    \ > 0\n            return \"NO\"\n        end\n    end\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkqdax7yh.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqdax7yh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqdax7yh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkqdax7yh.jl:36\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqdax7yh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqdax7yh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkqdax7yh.jl:37\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkqdax7yh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkqdax7yh.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkqdax7yh.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    >>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n    \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"\
    NO\"\n    \"\"\"\n    if length(lst1) == 1 && iseven(lst1[1])\n        \"YES\"\
    \n    elseif length(lst1) == 1 && isodd(lst1[1])\n        \"NO\"\n    elseif length(lst1)\
    \ != length(lst2)\n        \"NO\"\n    else\n        if iseven(lst1[1])\n    \
    \        exchange(lst1[2:end], lst2[2:end])\n        else\n            for i in\
    \ 1:length(lst2)\n                if iseven(lst2[i])\n                    exchange(lst1[2:end],\
    \ replace(lst2, i, lst1[1]))\n                end\n            end\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpj9kud1by.jl:43\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ no method matching replace(::Vector{Int64}, ::Int64, ::Int64)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmpj9kud1by.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj9kud1by.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj9kud1by.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpj9kud1by.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: no method matching\
    \ replace(::Vector{Int64}, ::Int64, ::Int64)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmpj9kud1by.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj9kud1by.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj9kud1by.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpj9kud1by.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  MethodError: no method matching\
    \ replace(::Vector{Int64}, ::Int64, ::Int64)\n  Closes"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj9kud1by.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # implements your function.\n    # hint:\
    \ you can use mod(x, 2) function to determine if a number x is even.\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphynlu23i.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphynlu23i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphynlu23i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphynlu23i.jl:25\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphynlu23i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphynlu23i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphynlu23i.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphynlu23i.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphynlu23i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphynlu23i.jl:29\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphynlu23i.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphynlu23i.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphynlu23i.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n  \n  # the first list must be the one with the\
    \ odd elements\n  if any(x -> x % 2 == 1, lst1)\n    lst2, lst1 = lst1, lst2\n\
    \  end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpst7mro53.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpst7mro53.jl:1\n\
    in expression starting at /tmp/tmpst7mro53.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    s = length(lst1)\n    for i = 1:s\n     \
    \   if lst1[i] % 2 == 1\n            for j = 1:s\n                if lst2[j] %\
    \ 2 == 0\n                    tmp = lst1[i]\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = tmp\n                    break\n              \
    \  end\n            end\n        end\n    end\n    for i = 1:s\n        if lst1[i]\
    \ % 2 == 1\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    evens = collect(filter(i -> i % 2 == 0, lst1))\n\
    \    odds = collect(filter(i -> i % 2 != 0, lst1))\n    if(length(evens) < length(odds))\n\
    \        return \"NO\"\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2nk_yy8.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph2nk_yy8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph2nk_yy8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmph2nk_yy8.jl:29\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph2nk_yy8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph2nk_yy8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmph2nk_yy8.jl:31\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph2nk_yy8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph2nk_yy8.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2nk_yy8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    parity_lst1 = map(x -> iseven(x), lst1) #\
    \ Determine parity of each element\n    parity_lst2 = map(x -> iseven(x), lst2)\n\
    \    n = length(lst1)\n    n_odd = sum(parity_lst1) # Determine the number of\
    \ odd elements\n    if n_odd == 0 # All elements of lst1 are even\n        return\
    \ \"YES\"\n    elseif n_odd == n # All elements of lst1 are odd\n        return\
    \ \"NO\"\n    else\n        for i in 1:n\n            for j in 1:n\n         \
    \       if parity_lst1[i] != parity_lst2[j] # If the two elements have different\
    \ parity\n                    parity_lst1[i] = parity_lst2[j] # Swap their parities\n\
    \                    parity_lst2[j] = parity_lst1[i]\n                    n_odd\
    \ = sum(parity_lst1) # Determine the number of odd elements\n                \
    \    if n_odd == 0 # All elements of lst1 are even\n                        return\
    \ \"YES\"\n                    elseif n_odd == n # All elements of lst1 are odd\n\
    \                        return \"NO\"\n                    end\n            \
    \    end\n            end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwychu0oz.jl:44\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwychu0oz.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwychu0oz.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpwychu0oz.jl:48\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwychu0oz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwychu0oz.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpwychu0oz.jl:49\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwychu0oz.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwychu0oz.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpwychu0oz.jl:50\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwychu0oz.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwychu0oz.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwychu0oz.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) != length(lst2)\n       \
    \ return \"NO\"\n    end\n    odd_lst1 = [lst1[i] % 2 != 0 for i in 1:length(lst1)]\n\
    \    even_lst2 = [lst2[i] % 2 == 0 for i in 1:length(lst2)]\n    for i in 1:length(lst1)\n\
    \        if odd_lst1[i] == 1 && even_lst2[i] == 1\n            return \"YES\"\n\
    \        end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2mchkafu.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mchkafu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mchkafu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2mchkafu.jl:35\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mchkafu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mchkafu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2mchkafu.jl:37\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mchkafu.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mchkafu.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2mchkafu.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for i in 1:length(lst1)\n        if !(lst1[i]\
    \ % 2 == 0)\n            if (lst2[i] % 2 == 0)\n                return \"YES\"\
    \n            end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp99ocoqrs.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99ocoqrs.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99ocoqrs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp99ocoqrs.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99ocoqrs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99ocoqrs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp99ocoqrs.jl:34\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99ocoqrs.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99ocoqrs.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp99ocoqrs.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n \n    for i in lst1\n        if i % 2 != 0\n\
    \            for j in lst2\n                if j % 2 == 0\n                  \
    \  lst1[findall(lst1 .== i)] = j\n                    lst2[findall(lst2 .== j)]\
    \ = i\n                    break\n                end\n            end\n     \
    \   end\n    end\n    \n    if all(i % 2 == 0 for i in lst1)\n        return \"\
    YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpltpa_bkb.jl:38\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmpltpa_bkb.jl:19\n   [6] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpltpa_bkb.jl:38 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpltpa_bkb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpltpa_bkb.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  ArgumentError: indexed assignment\
    \ with a single value to possibly many locations is not supported; perhaps use\
    \ broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmpltpa_bkb.jl:19\n   [6] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpltpa_bkb.jl:39 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltpa_bkb.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\"\"\"\n    # Create a new list. This\
    \ list will contain the elements of lst1 that are not even.\n    # Create two\
    \ new lists. These lists will contain the elements of lst1 and lst2 that are even.\n\
    \    # Copy the elements of lst1 and lst2 into these two lists.\n    # Determine\
    \ if the number of elements of the new list is equal to the number of elements\
    \ of the two new lists.\n    # If the number of elements of the new list is equal\
    \ to the number of elements of the two new lists, return \"YES\".\n    # Otherwise,\
    \ return \"NO\".\n    \"\"\"\"\"\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8gonvovk.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gonvovk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gonvovk.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8gonvovk.jl:29\n  Expression: candidate([1, 2, 3, 4], [1,\
    \ 5, 3, 4]) == \"NO\"\n   Evaluated: \"\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gonvovk.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gonvovk.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8gonvovk.jl:30\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gonvovk.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gonvovk.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8gonvovk.jl:31\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gonvovk.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gonvovk.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8gonvovk.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"\" == \"NO\"\nStacktrace:\n [1] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gonvovk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) <= 1\n        return \"YES\"\
    \n    end\n    # convert to odd/even lists\n    lst1_odd = []\n    lst1_even =\
    \ []\n    for i in lst1\n        if i % 2 == 0\n            push!(lst1_even, i)\n\
    \        else\n            push!(lst1_odd, i)\n        end\n    end\n    lst2_odd\
    \ = []\n    lst2_even = []\n    for i in lst2\n        if i % 2 == 0\n       \
    \     push!(lst2_even, i)\n        else\n            push!(lst2_odd, i)\n    \
    \    end\n    end\n    # if there is at least as many evens in lst2 as in lst1\
    \ and there are no odds in lst1, it's possible\n    if length(lst2_even) >= length(lst1_even)\
    \ && length(lst1_odd) == 0\n        return \"YES\"\n    else\n        return \"\
    NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t\
    @test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpid9q2730.jl:48\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid9q2730.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid9q2730.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpid9q2730.jl:50\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid9q2730.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid9q2730.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpid9q2730.jl:51\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpid9q2730.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpid9q2730.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpid9q2730.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    num_to_odd = 0\n    num_to_even = 0\n   \
    \ if isodd(length(lst1))\n        num_to_odd = 1\n    end\n    if isodd(length(lst2))\n\
    \        num_to_even = 1\n    end\n    if sum(x -> isodd(x), lst1) + num_to_odd\
    \ == sum(x -> isodd(x), lst2) + num_to_even\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmptcgxhtv3.jl:36\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptcgxhtv3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptcgxhtv3.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptcgxhtv3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even1 = (lst1 .% 2 .== 0)\n    even2 = (lst2\
    \ .% 2 .== 0)\n    even_lst1 = lst1[even1]\n    even_lst2 = lst2[even2]\n    odd_lst1\
    \ = lst1[~even1]\n    odd_lst2 = lst2[~even2]\n    if length(even_lst1) + length(even_lst2)\
    \ >= length(lst1)\n        return \"YES\"\n    else\n        return \"NO\"\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp7pxhsvfo.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ no method matching ~(::BitVector)\n  Closest candidates are:\n    ~(!Matched::Union{Int128,\
    \ Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:310\n\
    \    ~(!Matched::Bool) at /shared/centos7/julia/1.7.3/share/julia/base/bool.jl:37\n\
    \    ~(!Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp7pxhsvfo.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7pxhsvfo.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7pxhsvfo.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp7pxhsvfo.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: no method matching\
    \ ~(::BitVector)\n  Closest candidates are:\n    ~(!Matched::Union{Int128, Int16,\
    \ Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:310\n\
    \    ~(!Matched::Bool) at /shared/centos7/julia/1.7.3/share/julia/base/bool.jl:37\n\
    \    ~(!Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp7pxhsvfo.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7pxhsvfo.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7pxhsvfo.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp7pxhsvfo.jl:33\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7pxhsvfo.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even1 = [x for x in lst1 if x % 2 == 0]\n\
    \    odd1 = [x for x in lst1 if x % 2 != 0]\n    even2 = [x for x in lst2 if x\
    \ % 2 == 0]\n    odd2 = [x for x in lst2 if x % 2 != 0]\n    if length(even1)\
    \ + length(even2) >= length(lst1)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    flag = false\n    for (i,x) in enumerate(lst1)\n\
    \        if (x % 2 != 0)\n            for (j,y) in enumerate(lst2)\n         \
    \       if (y % 2 == 0)\n                    lst1[i] = y\n                   \
    \ lst2[j] = x\n                    flag = true\n                    break\n  \
    \              end\n            end\n        end\n        if (flag == false)\n\
    \            return \"NO\"\n        end\n    end\n    return \"YES\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd5c788zp.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd5c788zp.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd5c788zp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpd5c788zp.jl:41\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd5c788zp.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd5c788zp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpd5c788zp.jl:43\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd5c788zp.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd5c788zp.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5c788zp.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # create variables to keep track of the total\
    \ number of even numbers in lst1\n    # and the total number of odd numbers in\
    \ lst2\n    totalEven = 0\n    totalOdd = 0\n    for i in lst1 \n        # if\
    \ current number is even, update variable\n        if iseven(i) \n           \
    \ totalEven += 1\n        end\n    end\n    for i in lst2 \n        # if current\
    \ number is odd, update variable\n        if isodd(i) \n            totalOdd +=\
    \ 1\n        end\n    end\n    # if lst1 contains more even numbers than lst2\
    \ contains odd numbers, \n    # then there are not enough odd numbers in lst2\
    \ to ensure that all numbers\n    # in lst1 are even\n    if totalEven > totalOdd\
    \ \n        return \"NO\"\n    end\n    # if there are not more even numbers in\
    \ lst1 than odd numbers in lst2,\n    # then the numbers in lst1 can be made even\n\
    \    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5r1d9lms.jl:46\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1d9lms.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1d9lms.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp5r1d9lms.jl:49\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1d9lms.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1d9lms.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp5r1d9lms.jl:50\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1d9lms.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1d9lms.jl:44\ntest set: Test\
    \ Failed at /tmp/tmp5r1d9lms.jl:51\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5r1d9lms.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5r1d9lms.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5r1d9lms.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst1_even = 0\n    lst2_even = 0\n    for\
    \ i in lst1\n        if i % 2 == 0\n            lst1_even += 1\n        end\n\
    \    end\n    for i in lst2\n        if i % 2 == 0\n            lst2_even += 1\n\
    \        end\n    end\n    if lst1_even <= lst2_even\n        return \"YES\"\n\
    \    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpubr3kgdr.jl:41\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpubr3kgdr.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpubr3kgdr.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpubr3kgdr.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for i=1:length(lst1)\n        for j=1:length(lst2)\n\
    \            if lst1[i]%2 != 0 && lst2[j]%2 == 0\n                lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            end\n        end\n    end\n    for i=1:length(lst1)\n\
    \        if lst1[i]%2 != 0\n            return \"NO\"\n        end\n    end\n\
    \    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if isempty(lst1)\n        return \"YES\"\n\
    \    end\n    for j in 1:length(lst1)\n        if !isodd(lst1[j])\n          \
    \  # if the jth element of lst1 is even, then we can skip this index\n       \
    \     continue\n        end\n        for k in 1:length(lst2)\n            if isodd(lst2[k])\n\
    \                # if the kth element of lst2 is odd, we can skip this index\n\
    \                continue\n            end\n            # lst1[j] is odd and lst2[k]\
    \ is even\n            # swap the elements and call the exchange function on the\
    \ updated lists\n            # if the exchange function returns \"YES\", then\
    \ we return \"YES\"\n            if exchange(vcat(lst1[1:j-1], lst2[k], lst1[j+1:end]),\n\
    \                        vcat(lst2[1:k-1], lst1[j], lst2[k+1:end])) == \"YES\"\
    \n                return \"YES\"\n            end\n        end\n    end\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp76vm6w6l.jl:43\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp76vm6w6l.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp76vm6w6l.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp76vm6w6l.jl:45\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp76vm6w6l.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp76vm6w6l.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp76vm6w6l.jl:46\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp76vm6w6l.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp76vm6w6l.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp76vm6w6l.jl:49\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp76vm6w6l.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp76vm6w6l.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp76vm6w6l.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # check if it is possible to exchange elements\
    \ in lists 1 and 2 to make all elements in list 1 even\n    res = \"NO\"\n   \
    \ if any([(x%2 == 0) for x in lst1]) # check if any of the elements in lst1 are\
    \ even\n        res = \"YES\"\n    elseif any([(x%2 == 1) for x in lst2]) # check\
    \ if any of the elements in lst2 are odd\n        res = \"YES\"\n    end\n   \
    \ return res\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7bmyrvvi.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7bmyrvvi.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7bmyrvvi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7bmyrvvi.jl:31\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7bmyrvvi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7bmyrvvi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7bmyrvvi.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7bmyrvvi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7bmyrvvi.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7bmyrvvi.jl:33\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7bmyrvvi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7bmyrvvi.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7bmyrvvi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    #check if each element of lst1 is even, if\
    \ not, check if any element of lst2 is even\n    #if so, exchange that element\
    \ and the first non-even element of lst1\n    #if not, output \"NO\"\n    #if\
    \ all of lst1 is even, output \"YES\"\n    for i = 1:length(lst1)\n        if\
    \ mod(lst1[i], 2) != 0\n            for j = 1:length(lst2)\n                if\
    \ mod(lst2[j], 2) == 0\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    #now check if all of lst1 is even, and output \"YES\" or \"NO\"\n\
    \    for i = 1:length(lst1)\n        if mod(lst1[i], 2) != 0\n            return\
    \ \"NO\"\n        end\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    len1 = length(lst1)\n    len2 = length(lst2)\n\
    \    for i = 1:len1\n        #print(i)\n        for j = 1:len2\n            #print(j)\n\
    \            if (lst1[i] % 2 == 1) && (lst2[j] % 2 == 0)\n                #print(\"\
    Yay!\")\n                return \"YES\"\n            end\n        end\n    end\n\
    \    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnoshk_2_.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoshk_2_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoshk_2_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnoshk_2_.jl:37\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoshk_2_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoshk_2_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnoshk_2_.jl:39\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnoshk_2_.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnoshk_2_.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnoshk_2_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    return if convert(Bool, set(lst1) * set(lst2))\
    \ else \"NO\" end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpx2zp9si5.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  UndefVarError:\
    \ set not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpx2zp9si5.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx2zp9si5.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx2zp9si5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpx2zp9si5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  UndefVarError: set not defined\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmpx2zp9si5.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx2zp9si5.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx2zp9si5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpx2zp9si5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  UndefVarError: set not defined\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmpx2zp9si5.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx2zp9si5.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx2zp9si5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpx2zp9si5.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n  UndefVarError: set not defined\n\
    \  Stacktrace:\n   [1] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx2zp9si5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n  #Write your code here\n  if iseven.(lst1) ==\
    \ false\n    idx = findall(iseven.(lst1) .== false)\n    for i in idx\n      if\
    \ iseven(lst2[i])\n        lst1[i], lst2[i] = lst2[i], lst1[i]\n      end\n  \
    \  end\n  end\n  if iseven.(lst1) == true\n    return \"YES\"\n  else\n    return\
    \ \"NO\"\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t\
    @test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmppsody13m.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsody13m.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsody13m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppsody13m.jl:36\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsody13m.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsody13m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppsody13m.jl:37\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsody13m.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsody13m.jl:33\ntest set: Test\
    \ Failed at /tmp/tmppsody13m.jl:40\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppsody13m.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppsody13m.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppsody13m.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    matches = [x for x in lst1 if x % 2 == 0]\n\
    \    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyzsxbwtd.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyzsxbwtd.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyzsxbwtd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyzsxbwtd.jl:26\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyzsxbwtd.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyzsxbwtd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyzsxbwtd.jl:27\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyzsxbwtd.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyzsxbwtd.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyzsxbwtd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"Exchange lst1 and lst2\"\n    #Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxsgvv7md.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"Exchange lst1 and lst2\"\
    \ == \"YES\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxsgvv7md.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxsgvv7md.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxsgvv7md.jl:23\n  Expression: candidate([1, 2, 3, 4], [1,\
    \ 5, 3, 4]) == \"NO\"\n   Evaluated: \"Exchange lst1 and lst2\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxsgvv7md.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxsgvv7md.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxsgvv7md.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"Exchange lst1 and lst2\" == \"YES\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxsgvv7md.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxsgvv7md.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxsgvv7md.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"Exchange lst1 and lst2\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxsgvv7md.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxsgvv7md.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxsgvv7md.jl:26\n  Expression: candidate("
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxsgvv7md.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    ### YOUR CODE HERE ###\n    n1 = length(lst1)\n\
    \    n2 = length(lst2)\n    s1 = 0\n    s2 = 0\n    for i = 1:n1\n        if !(lst1[i]\
    \ % 2 == 0)\n            s1 += 1\n        end\n    end\n    for i = 1:n2\n   \
    \     if (lst2[i] % 2 == 0)\n            s2 += 1\n        end\n    end\n    if\
    \ s1 == 0 || s2 == 0\n        return \"NO\"\n    end\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz4fsa4lr.jl:40\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4fsa4lr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4fsa4lr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpz4fsa4lr.jl:43\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4fsa4lr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4fsa4lr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpz4fsa4lr.jl:45\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4fsa4lr.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4fsa4lr.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz4fsa4lr.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    n = length(lst1)\n    m = length(lst2)\n\
    \    counter = 0\n    for i in 1:n\n        if (lst1[i] % 2 == 0)\n          \
    \  counter += 1\n        end\n    end\n    for i in 1:m\n        if (lst2[i] %\
    \ 2 == 0)\n            counter += 1\n        end\n    end\n    if (counter ==\
    \ n + m)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr30mshsk.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr30mshsk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr30mshsk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpr30mshsk.jl:40\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr30mshsk.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr30mshsk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpr30mshsk.jl:41\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr30mshsk.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr30mshsk.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr30mshsk.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    #if lst1 can be completely even return \"\
    YES\" else return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp5hrywgm9.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp5hrywgm9.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5hrywgm9.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5hrywgm9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp5hrywgm9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp5hrywgm9.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5hrywgm9.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5hrywgm9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(iseven, lst1)\n        return \"YES\"\
    \n    end\n    for i in 1:length(lst1)\n        if !iseven(lst1[i])\n        \
    \    for j in 1:length(lst2)\n                if iseven(lst2[j])\n           \
    \         lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if all(iseven,\
    \ lst1)\n                        return \"YES\"\n                    end\n   \
    \             end\n            end\n        end\n    end\n    return \"NO\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst1_mod, lst2_mod = deepcopy(lst1), deepcopy(lst2)\n\
    \    for i = 1:length(lst1)\n        for j = 1:length(lst2)\n            lst1_mod[i],\
    \ lst2_mod[j] = lst2_mod[j], lst1_mod[i]\n            if all(isodd, lst1_mod)\n\
    \                return \"NO\"\n            end\n            lst1_mod, lst2_mod\
    \ = deepcopy(lst1), deepcopy(lst2)\n        end\n    end\n    return \"YES\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpful3omyf.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpful3omyf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpful3omyf.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpful3omyf.jl:36\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpful3omyf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpful3omyf.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpful3omyf.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    num_of_evens = length(filter(x -> x % 2 ==\
    \ 0, lst1))\n    if num_of_evens == length(lst1)\n        return \"YES\"\n   \
    \ end\n    num_of_odds = length(lst1) - num_of_evens\n    if length(lst2) < num_of_odds\n\
    \        return \"NO\"\n    end\n    if num_of_odds == 0\n        return \"YES\"\
    \n    end\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpl3gmr4t8.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3gmr4t8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3gmr4t8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl3gmr4t8.jl:36\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3gmr4t8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3gmr4t8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl3gmr4t8.jl:37\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl3gmr4t8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl3gmr4t8.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl3gmr4t8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if sum(lst1) % 2 == 0\n        return \"\
    YES\"\n    elseif isodd(sum(lst1)) && isodd(sum(lst2))\n        return \"NO\"\n\
    \    else\n        for i in lst1\n            if !isodd(i)\n                push!(lst2,\
    \ i)\n                pop!(lst1)\n            end\n        end\n        if sum(lst1)\
    \ % 2 == 0\n            return \"YES\"\n        else\n            return \"NO\"\
    \n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4bip7rxk.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4bip7rxk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4bip7rxk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4bip7rxk.jl:40\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4bip7rxk.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4bip7rxk.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4bip7rxk.jl:42\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4bip7rxk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4bip7rxk.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4bip7rxk.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    return \"YES\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsvcdx7fe.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsvcdx7fe.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsvcdx7fe.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsvcdx7fe.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsvcdx7fe.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsvcdx7fe.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsvcdx7fe.jl:26\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsvcdx7fe.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsvcdx7fe.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsvcdx7fe.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    num_evens = count(i -> i % 2 == 0, lst1)\n\
    \    num_odds = length(lst1) - num_evens\n    num_evens = count(i -> i % 2 ==\
    \ 0, lst2)\n    num_odds = length(lst2) - num_evens\n    if num_odds == 0\n  \
    \      return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz50zwsl2.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz50zwsl2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz50zwsl2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpz50zwsl2.jl:31\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz50zwsl2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz50zwsl2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz50zwsl2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for i in 1:length(lst1)\n        if mod(lst1[i],\
    \ 2) == 1\n            for j in 1:length(lst2)\n                if mod(lst2[j],\
    \ 2) == 0\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n         \
    \           break\n                end\n            end\n        end\n    end\n\
    \    for i in 1:length(lst1)\n        if mod(lst1[i], 2) == 1\n            return\
    \ \"NO\"\n        end\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    counter = 0\n    for i in lst1\n        if\
    \ i % 2 != 0\n            counter += 1\n        end\n    end\n    counter2 = 0\n\
    \    for i in lst2\n        if i % 2 == 0\n            counter2 += 1\n       \
    \ end\n    end\n    if counter <= counter2\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\n@assert exchange([1, 2, 3, 4], [1, 2, 3,\
    \ 4]) == \"YES\"\n@assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n@assert\
    \ exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n@assert exchange([2, 3, 4, 6],\
    \ [1, 5, 3, 4]) == \"YES\"\n@assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"\
    YES\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"Function to check if exchange can be\
    \ done to make all elements of lst1 even\"\"\"\n    if length(lst1) != length(lst2)\n\
    \        return \"Both lists should be of equal length\"\n    end\n    lst1_even\
    \ = [i for i in lst1 if i % 2 == 0]\n    lst2_odd = [i for i in lst2 if i % 2\
    \ != 0]\n    if length(lst1_even) == length(lst1)\n        return \"YES\"\n  \
    \  elseif length(lst1_even) + length(lst2_odd) >= length(lst1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4259e7we.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4259e7we.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4259e7we.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4259e7we.jl:36\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4259e7we.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4259e7we.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp4259e7we.jl:38\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4259e7we.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4259e7we.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4259e7we.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    ### BEGIN SOLUTION\n    N = length(lst1)\n\
    \    v = []\n    for i = 1:N\n        if lst1[i] % 2 == 1\n            push!(v,i)\n\
    \        end\n    end\n    for i = 1:N\n        if i in v\n            if lst2[i]\
    \ % 2 == 0\n                return \"YES\"\n            end\n        end\n   \
    \ end\n    return \"NO\"\n    ### END SOLUTION\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy3uk4nl2.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy3uk4nl2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy3uk4nl2.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy3uk4nl2.jl:41\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy3uk4nl2.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy3uk4nl2.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpy3uk4nl2.jl:43\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy3uk4nl2.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy3uk4nl2.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy3uk4nl2.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\n    if any(isodd.(lst1))\n\
    \        return \"NO\"\n    else\n        return \"YES\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkik5ptl8.jl:26\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkik5ptl8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkik5ptl8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkik5ptl8.jl:28\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkik5ptl8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkik5ptl8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkik5ptl8.jl:29\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkik5ptl8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkik5ptl8.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkik5ptl8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # determine if the number of elements that\
    \ are odd in lst1 is\n    # equal to the number of elements that are even in lst2\n\
    \    # if yes, then return \"YES\"\n    # otherwise, return \"NO\"\n    lst1_even\
    \ = sum(x -> iseven(x), lst1)\n    lst2_even = sum(x -> iseven(x), lst2)\n   \
    \ if lst1_even == lst2_even\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpm_mi_yh1.jl:34\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_mi_yh1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_mi_yh1.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm_mi_yh1.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even_or_odd = (lst1 .% 2) + (lst2 .% 2)\n\
    \    if all(even_or_odd .% 2 .== 0)\n        return \"YES\"\n    elseif sum(even_or_odd\
    \ .% 2) == 1\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpklt8lgc3.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpklt8lgc3.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpklt8lgc3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpklt8lgc3.jl:30\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpklt8lgc3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpklt8lgc3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpklt8lgc3.jl:31\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpklt8lgc3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpklt8lgc3.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpklt8lgc3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \"\"\" Return YES if possible to exchange\
    \ elements in lst1 and lst2\n        to make lst1 contain only even numbers.\n\
    \        Otherwise, return NO.\n    \"\"\"\n    for i = 1:length(lst1)\n     \
    \   if isodd(lst1[i])\n            for j = 1:length(lst2)\n                if\
    \ iseven(lst2[j])\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n \
    \                   return \"YES\"\n                end\n            end\n   \
    \         return \"NO\"\n        end\n    end\n    return \"YES\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyse8f07w.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyse8f07w.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyse8f07w.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyse8f07w.jl:41\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyse8f07w.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyse8f07w.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyse8f07w.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even_count = sum(map(x -> iseven(x), lst1))\n\
    \    lst1_even_count = even_count\n    for x in lst2\n        if iseven(x)\n \
    \           even_count += 1\n        else\n            even_count -= 1\n     \
    \   end\n        if even_count == length(lst1)\n            return \"YES\"\n \
    \       end\n    end\n    even_count = lst1_even_count\n    for x in lst2\n  \
    \      if iseven(x)\n            even_count -= 1\n        else\n            even_count\
    \ += 1\n        end\n        if even_count == length(lst1)\n            return\
    \ \"YES\"\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcx0su24v.jl:44\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx0su24v.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx0su24v.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpcx0su24v.jl:45\n  Expression: candidate([1, 2, 3, 4], [1,\
    \ 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx0su24v.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx0su24v.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpcx0su24v.jl:46\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx0su24v.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx0su24v.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpcx0su24v.jl:49\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx0su24v.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx0su24v.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpcx0su24v.jl:50\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nS"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcx0su24v.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    odd_count = 0\n    lst1_sz = length(lst1)\n\
    \    for i in 1:lst1_sz\n        if lst1[i] % 2 != 0\n            odd_count +=\
    \ 1\n        end\n    end\n    for i in 1:length(lst2)\n        if lst2[i] % 2\
    \ != 0\n            odd_count -= 1\n        end\n    end\n    if odd_count ==\
    \ 0\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmlfgg8uu.jl:40\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmlfgg8uu.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmlfgg8uu.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmlfgg8uu.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    \"\"\"\n    @assert size(lst1)\
    \ == size(lst2) \"Lists must be of equal length\"\n    for i in 1:size(lst1)[1]\n\
    \        if(lst1[i] % 2 != 0)\n            for j in 1:size(lst2)[1]\n        \
    \        if(lst2[j] % 2 == 0)\n                    tmp = lst1[i]\n           \
    \         lst1[i] = lst2[j]\n                    lst2[j] = tmp\n             \
    \       break\n                end\n            end\n        end\n    end\n  \
    \  if(all(lst1 .% 2 .== 0))\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if isempty(lst1) && isempty(lst2)\n     \
    \   return \"YES\"\n    end\n    if (lst1[1] % 2) == 0\n        return exchange(lst1[2:end],\
    \ lst2)\n    elseif (lst2[1] % 2) == 0\n        return exchange(lst1, lst2[2:end])\n\
    \    else\n        return \"NO\"\n    end\nend\n\"\"\"In this problem, you will\
    \ write a function that takes a list of strings and\n    returns a list of strings\
    \ in which every element of the list is wrapped\n    with an asterisk (*) on either\
    \ side.\n    For example:\n    wrap_with_asterisk([\"foo\", \"bar\"]) => [\"*foo*\"\
    , \"*bar*\"]\n    It is assumed that the input list will be non-empty.\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpjdmdtq7z.jl:25\nin expression starting at /tmp/tmpjdmdtq7z.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n  #vector de booleanos de numero de elementos\
    \ de lst1; indica si es par o no\n  bool_lst1 = map(x -> x % 2 == 0, lst1)\n \
    \ #vector de booleanos de numero de elementos de lst2; indica si es par o no\n\
    \  bool_lst2 = map(x -> x % 2 == 0, lst2)\n  #contador para ver si la lista no\
    \ es vacia\n  count = 0\n  #si el elemento es par en la primera lista, entonces\
    \ lo buscamos en la segunda lista\n  for i in 1:length(lst1)\n    if bool_lst1[i]\n\
    \      for j in 1:length(lst2)\n        if lst1[i] == lst2[j]\n          #si esta,\
    \ lo quitamos de la segunda lista\n          deleteat!(lst2, j)\n          break\n\
    \        end\n      end\n    else\n      #si el elemento es impar entonces lo\
    \ buscamos en la segunda lista\n      for j in 1:length(lst2)\n        if lst1[i]\
    \ == lst2[j]\n          if !bool_lst2[j]\n            #si esta y es impar tambien,\
    \ lo quitamos de la segunda lista\n            deleteat!(lst2, j)\n          \
    \  break\n          end\n        end\n      end\n    end\n  end\n  #si la segunda\
    \ lista ya esta vacia retornamos \"YES\"\n  if length(lst2) == 0\n    return \"\
    YES\"\n  else\n    #si no buscamos en la segunda lista si algun elemento no es\
    \ par, de ser asi retornamos \"NO\"\n    for i in 1:length(lst2)\n      if !bool_lst2[i]\n\
    \        return \"NO\"\n      end\n    end\n    #si todos los elementos son pares\
    \ retornamos \"YES\"\n    return \"YES\"\n  end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyp5g5u_x.jl:66\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyp5g5u_x.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyp5g5u_x.jl:61\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyp5g5u_x.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) > length(lst2)\n        return\
    \ _exchange(lst1, lst2)\n    else\n        return _exchange(lst2, lst1)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpdjpfesb8.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  UndefVarError:\
    \ _exchange not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpdjpfesb8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjpfesb8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjpfesb8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpdjpfesb8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  UndefVarError: _exchange\
    \ not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpdjpfesb8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjpfesb8.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjpfesb8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpdjpfesb8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  UndefVarError: _exchange\
    \ not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpdjpfesb8.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdjpfesb8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdjpfesb8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpdjpfesb8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n  UndefVarError: _exchange not defin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdjpfesb8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    count = 0\n    for i = 1:length(lst1)\n\
    \        if lst1[i] % 2 == 0\n            count += 1\n        end\n    end\n \
    \   \n    count2 = 0\n    for i = 1:length(lst2)\n        if lst2[i] % 2 == 0\n\
    \            count2 += 1\n        end\n    end\n    \n    if count == length(lst1)\n\
    \        return \"YES\"\n    elseif count + count2 >= length(lst1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if (count(x -> isodd(x), lst1) <= count(x\
    \ -> iseven(x), lst2))\n        return \"YES\"\n    else\n        return \"NO\"\
    \n    end\nend\n@testset \"exchange\" begin\n    @test exchange([1, 2, 3, 4],\
    \ [1, 2, 3, 4]) == \"YES\"\n    @test exchange([1, 2, 3, 4], [1, 5, 3, 4]) ==\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpcur1l6_j.jl:20\nin expression starting at /tmp/tmpcur1l6_j.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    is_odd(x) = x % 2 == 1 \n    if all(is_odd,\
    \ lst1)\n        return \"NO\"\n    end\n    lst1_odd_index = findall(is_odd,\
    \ lst1)\n    lst2_even_index = findall(!is_odd, lst2)\n    if length(lst1_odd_index)\
    \ != length(lst2_even_index)\n        return \"NO\"\n    end\n    for i in 1:length(lst1_odd_index)\n\
    \        lst1[lst1_odd_index[i]] = lst2[lst2_even_index[i]]\n    end\n    return\
    \ \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmps5fibmnp.jl:36\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5fibmnp.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5fibmnp.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps5fibmnp.jl:39\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5fibmnp.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5fibmnp.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5fibmnp.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even1 = sum(mod.(lst1, 2)) == 0\n \
    \   even2 = sum(mod.(lst2, 2)) == 0\n    \n    if even1 && even2\n        return\
    \ \"YES\"\n    elseif even1 || even2\n        return \"YES\"\n    else\n     \
    \   return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpehd50075.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehd50075.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehd50075.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpehd50075.jl:33\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpehd50075.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpehd50075.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpehd50075.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Set up the output\n    output = \"NO\"\n\
    \    # Construct a list of even numbers only in lst1\n    even_lst1 = []\n   \
    \ # Construct a list of odd numbers only in lst1\n    odd_lst1 = []\n    # Iterate\
    \ through the elements in lst1\n    for i = 1:length(lst1)\n        # Check if\
    \ the element is even\n        if lst1[i] % 2 == 0\n            # If so, append\
    \ to even_lst1\n            push!(even_lst1, lst1[i])\n        else\n        \
    \    # Otherwise, append to odd_lst1\n            push!(odd_lst1, lst1[i])\n \
    \       end\n    end\n    # Construct a list of even numbers only in lst2\n  \
    \  even_lst2 = []\n    # Construct a list of odd numbers only in lst2\n    odd_lst2\
    \ = []\n    # Iterate through the elements in lst2\n    for i = 1:length(lst2)\n\
    \        # Check if the element is even\n        if lst2[i] % 2 == 0\n       \
    \     # If so, append to even_lst2\n            push!(even_lst2, lst2[i])\n  \
    \      else\n            # Otherwise, append to odd_lst2\n            push!(odd_lst2,\
    \ lst2[i])\n        end\n    end\n    # Check if the length of even_lst1 is equal\
    \ to the length of even_lst2\n    if length(even_lst1) == length(even_lst2)\n\
    \        # If so, update the output\n        output = \"YES\"\n    else\n    \
    \    # Otherwise, check if the length of odd_lst1 is equal to the length of odd_lst2\n\
    \        if length(odd_lst1) == length(odd_lst2)\n            # If so, update\
    \ the output\n            output = \"YES\"\n        end\n    end\n    # Return\
    \ the output\n    return output\nend\n \n# You can use the following to test your\
    \ code.\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpw7xhyqr9.jl:70\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7xhyqr9.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7xhyqr9.jl:66\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw7xhyqr9.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    i = 1\n    while i <= length(lst1)\n    \
    \    if lst1[i] % 2 == 1\n            j = 1\n            found = false\n     \
    \       while j <= length(lst2)\n                if lst2[j] % 2 == 0\n       \
    \             lst1[i], lst2[j] = lst2[j], lst1[i]\n                    found =\
    \ true\n                    break\n                end\n                j += 1\n\
    \            end\n            if !found\n                return \"NO\"\n     \
    \       end\n        end\n        i += 1\n    end\n    return \"YES\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n  evens = [x for x in lst1 if iseven(x)]\n  if\
    \ length(evens) == length(lst1)\n    return \"YES\"\n  elseif length(evens) ==\
    \ 0\n    return \"NO\"\n  else\n    lst1 = lst1[evens]\n    lst2 = lst2[setdiff(1:length(lst2),\
    \ evens)]\n    exchange(lst1, lst2)\n  end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmcrh2_yc.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmcrh2_yc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmcrh2_yc.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpmcrh2_yc.jl:33\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmcrh2_yc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmcrh2_yc.jl:29\ntest set: Error\
    \ During Test at /tmp/tmpmcrh2_yc.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n  BoundsError:\
    \ attempt to access 6-element Vector{Int64} at index [[2, 6, 8]]\n  Stacktrace:\n\
    \   [1] throw_boundserror(A::Vector{Int64}, I::Tuple{Vector{Int64}})\n     @ Base\
    \ ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n\
    \   [3] _getindex\n     @ ./multidimensional.jl:838 [inlined]\n   [4] getindex\n\
    \     @ ./abstractarray.jl:1218 [inlined]\n   [5] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmpmcrh2_yc.jl:20\n   [6] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpmcrh2_yc.jl:35 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpmcrh2_yc.jl:29\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    4     2      1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmcrh2_yc.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all([x % 2 == 0 for x in lst1])\n    \
    \    return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2r3n64n8.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2r3n64n8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2r3n64n8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp2r3n64n8.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2r3n64n8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2r3n64n8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp2r3n64n8.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2r3n64n8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2r3n64n8.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2r3n64n8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code goes here\n    return \"YES\"\
    \nend\n\"\"\"Consider a list of numbers where the first element is a 2.\n    We\
    \ call this list a 2-list. Write a function that takes a \n    list x and returns\
    \ True if x is a 2-list and False otherwise.\n    For example:\n    is_2_list([2,\
    \ 2, 3, 4]) => True\n    is_2_list([2, 3, 4]) => False\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpru_08a1o.jl:17\nin expression starting at /tmp/tmpru_08a1o.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    p = false\n    for x in lst1\n        for\
    \ i in lst2\n            if x%2 == 0 && i%2 != 0\n                p = true\n \
    \           end\n        end\n    end\n    return p ? \"YES\" : \"NO\"\nend\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzsnp3jxr.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzsnp3jxr.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzsnp3jxr.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzsnp3jxr.jl:33\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzsnp3jxr.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzsnp3jxr.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzsnp3jxr.jl:35\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzsnp3jxr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzsnp3jxr.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzsnp3jxr.jl:36\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzsnp3jxr.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzsnp3jxr.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzsnp3jxr.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even = [x for x in lst1 if x % 2 == 0]\n\
    \    if length(even) == length(lst1)\n        return \"YES\"\n    elseif length(even)\
    \ == 0\n        return \"NO\"\n    else\n        lst1 = lst1[lst1 .% 2 .!= 0]\n\
    \        lst2 = lst2[lst2 .% 2 .!= 0]\n        for i in 1:length(lst1)\n     \
    \       for j in 1:length(lst2)\n                swap = lst1[i]\n            \
    \    lst1[i] = lst2[j]\n                lst2[j] = swap\n                even =\
    \ [x for x in lst1 if x % 2 == 0]\n                if length(even) == length(lst1)\n\
    \                    return \"YES\"\n                end\n            end\n  \
    \      end\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuhxqavmm.jl:41\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhxqavmm.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhxqavmm.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpuhxqavmm.jl:43\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhxqavmm.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhxqavmm.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpuhxqavmm.jl:44\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuhxqavmm.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuhxqavmm.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuhxqavmm.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # The elements of lst1 can be made even if\
    \ either lst1 has no odd numbers,\n    # or lst2 has more odd numbers than lst1\
    \ does.\n    if count(x -> x % 2 == 1, lst1) == 0\n        return \"YES\"\n  \
    \  elseif count(x -> x % 2 == 1, lst1) <= count(x -> x % 2 == 1, lst2)\n     \
    \   return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyjgj97rv.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjgj97rv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjgj97rv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyjgj97rv.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjgj97rv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjgj97rv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyjgj97rv.jl:34\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjgj97rv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjgj97rv.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjgj97rv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    odd_list = []\n    odd_list = [lst1[i] for\
    \ i in 1:length(lst1) if lst1[i] % 2 != 0]\n    odd_list2 = []\n    odd_list2\
    \ = [lst2[i] for i in 1:length(lst2) if lst2[i] % 2 != 0]\n    if odd_list ==\
    \ odd_list2\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp67ftlv9d.jl:32\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67ftlv9d.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67ftlv9d.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp67ftlv9d.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    i1 = []\n    i2 = []\n    for i in 1:length(lst1)\n\
    \        if lst1[i] % 2 != 0\n            push!(i1, i)\n        end\n    end\n\
    \    for i in 1:length(lst2)\n        if lst2[i] % 2 == 0\n            push!(i2,\
    \ i)\n        end\n    end\n    if length(i1) > length(i2)\n        return \"\
    NO\"\n    else\n        return \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    >>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n    \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"\
    NO\"\n    \"\"\"\n    if length(lst1) != length(lst2)\n        error(\"Both lists\
    \ should have the same number of elements.\")\n    end\n    if isodd(sum(lst1))\
    \ || isodd(sum(lst2))\n        return \"NO\"\n    end\n    all_even = true\n \
    \   for elem in lst1\n        if isodd(elem)\n            all_even = false\n \
    \           break\n        end\n    end\n    if all_even\n        return \"YES\"\
    \n    end\n    for i in 1:length(lst1)\n        for j in 1:length(lst2)\n    \
    \        if isodd(lst1[i]) && isodd(lst2[j])\n                lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                break\n            end\n        end\n  \
    \  end\n    all_even = true\n    for elem in lst1\n        if isodd(elem)\n  \
    \          all_even = false\n            break\n        end\n    end\n    if all_even\n\
    \        return \"YES\"\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptgk2g9d6.jl:61\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptgk2g9d6.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptgk2g9d6.jl:60\ntest set: Test\
    \ Failed at /tmp/tmptgk2g9d6.jl:63\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptgk2g9d6.jl:63 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptgk2g9d6.jl:60\ntest set: Test\
    \ Failed at /tmp/tmptgk2g9d6.jl:64\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptgk2g9d6.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptgk2g9d6.jl:60\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptgk2g9d6.jl:58\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu6vv4_az.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpu6vv4_az.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6vv4_az.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6vv4_az.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpu6vv4_az.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpu6vv4_az.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6vv4_az.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu6vv4_az.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    evens = 0\n    odds = 0\n    for num in lst1\n\
    \        if num % 2 == 0\n            evens += 1\n        else\n            odds\
    \ += 1\n        end\n    end\n    for num in lst2\n        if num % 2 == 0\n \
    \           odds += 1\n        else\n            evens += 1\n        end\n   \
    \ end\n    if evens == lst1.length\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpxdsjx9n8.jl:41\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  type Array\
    \ has no field length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n     @\
    \ Main /tmp/tmpxdsjx9n8.jl:30\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxdsjx9n8.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxdsjx9n8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpxdsjx9n8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  type Array has no field length\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmpxdsjx9n8.jl:30\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxdsjx9n8.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxdsjx9n8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpxdsjx9n8.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n     @ Main /tmp/tmpxdsjx9n8.jl:30\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxdsjx9n8.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxdsjx9n8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxdsjx9n8.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if isempty(lst1)\n        return \"NO\"\n\
    \    end\n    if isempty(lst2)\n        return \"NO\"\n    end\n    if count(x\
    \ -> x % 2 == 0, lst1) == length(lst1)\n        return \"YES\"\n    end\n    if\
    \ count(x -> x % 2 == 0, lst2) == length(lst2)\n        return \"YES\"\n    end\n\
    \    for i in 1:length(lst1)\n        if lst1[i] % 2 == 0\n            continue\n\
    \        end\n        for j in 1:length(lst2)\n            if lst2[j] % 2 == 0\n\
    \                lst1[i], lst2[j] = lst2[j], lst1[i]\n                if exchange(lst1,\
    \ lst2) == \"YES\"\n                    return \"YES\"\n                end\n\
    \                lst1[i], lst2[j] = lst2[j], lst1[i]\n            end\n      \
    \  end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for x in lst1\n        if isodd(x)\n    \
    \        for y in lst2\n                if iseven(y)\n                    return\
    \ \"YES\"\n                end\n            end\n            return \"NO\"\n \
    \       end\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp783q1vrl.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp783q1vrl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp783q1vrl.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp783q1vrl.jl:35\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp783q1vrl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp783q1vrl.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp783q1vrl.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if any(mod.(lst1, 2) .== 0) || any(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbrmcs17n.jl:26\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrmcs17n.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrmcs17n.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbrmcs17n.jl:29\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrmcs17n.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrmcs17n.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbrmcs17n.jl:30\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrmcs17n.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrmcs17n.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbrmcs17n.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Complete the code\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp19ilv2hm.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp19ilv2hm.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp19ilv2hm.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp19ilv2hm.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp19ilv2hm.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp19ilv2hm.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp19ilv2hm.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19ilv2hm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    >>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n    \"YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"\
    NO\"\n    \"\"\"\n    if length(lst1) == length(lst2)\n        c1 = 0\n      \
    \  c2 = 0\n        for i = 1:length(lst1)\n            if lst1[i] % 2 == 0\n \
    \               c1 += 1\n            end\n            if lst2[i] % 2 == 0\n  \
    \              c2 += 1\n            end\n        end\n        if c1 + c2 >= length(lst1)\n\
    \            return \"YES\"\n        else\n            return \"NO\"\n       \
    \ end\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if (mod.(lst1, 2) .== 1) & (mod.(lst2, 2)\
    \ .== 0)\n        return \"YES\"\n    elseif (mod.(lst1, 2) .== 0) & (mod.(lst2,\
    \ 2) .== 1)\n        return \"YES\"\n    elseif (mod.(lst1, 2) .== 0) & (mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp3o1dset1.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ no method matching &(::BitVector, ::BitVector)\n  Closest candidates are:\n\
    \    &(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmp3o1dset1.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3o1dset1.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3o1dset1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp3o1dset1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: no method matching\
    \ &(::BitVector, ::BitVector)\n  Closest candidates are:\n    &(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmp3o1dset1.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3o1dset1.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3o1dset1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp3o1dset1.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  MethodError: no method matching\
    \ &(::BitVector, ::BitVector)\n  Closest candidates are:\n    &(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmp3o1dset1.jl:14\n   [2] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3o1dset1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"\n    This function takes two lists\
    \ of integers and returns a string.\n    \"\"\"\n    # your code here...\n   \
    \ return\nend\n \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpl9sl539t.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpl9sl539t.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl9sl539t.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl9sl539t.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpl9sl539t.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpl9sl539t.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl9sl539t.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl9sl539t.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe457_7hy.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe457_7hy.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe457_7hy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe457_7hy.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe457_7hy.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe457_7hy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe457_7hy.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe457_7hy.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe457_7hy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe457_7hy.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe457_7hy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe457_7hy.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe457_7hy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # type declarations are used to assert a\
    \ function argument's\n    # type, return type\n    if iseven(lst1) == true\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2v4zn_cp.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ no method matching iseven(::Vector{Int64})\n  Closest candidates are:\n    iseven(!Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/float.jl:831\n    iseven(!Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n    iseven(!Matched::BigInt)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n     @ Main /tmp/tmp2v4zn_cp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2v4zn_cp.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2v4zn_cp.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2v4zn_cp.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: no method matching\
    \ iseven(::Vector{Int64})\n  Closest candidates are:\n    iseven(!Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/float.jl:831\n    iseven(!Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n    iseven(!Matched::BigInt)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n     @ Main /tmp/tmp2v4zn_cp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2v4zn_cp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2v4zn_cp.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2v4zn_cp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2v4zn_cp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even_num_in_lst1 = all(is_even, lst1)\n \
    \   even_num_in_lst2 = all(is_even, lst2)\n    if even_num_in_lst1 || even_num_in_lst2\n\
    \        return \"YES\"\n    elseif all(is_odd, lst1) && all(is_odd, lst2)\n \
    \       return \"NO\"\n    else\n        # if one of lst contains both even and\
    \ odd number, check all combination\n        for i = 1:length(lst1)\n        \
    \    for j = 1:length(lst2)\n                lst1_copy = copy(lst1)\n        \
    \        lst2_copy = copy(lst2)\n                lst1_copy[i] = lst2_copy[j]\n\
    \                lst2_copy[j] = lst1[i]\n                # check if new lists\
    \ contain only even numbers\n                if all(is_even, lst1_copy) && all(is_even,\
    \ lst2_copy)\n                    return \"YES\"\n                end\n      \
    \      end\n        end\n        return \"NO\"\n    end\nend\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: is_even not defined\nStacktrace:\n [1]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n   @ Main /tmp/tmpi53ma965.jl:14\n\
    \ [2] top-level scope\n   @ /tmp/tmpi53ma965.jl:37\nin expression starting at\
    \ /tmp/tmpi53ma965.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    m = length(lst1)\n    n = length(lst2)\n\
    \    for i = 1:m\n        for j = 1:n\n            if (lst1[i] + lst2[j]) % 2\
    \ == 0\n                if i == 1\n                    lst1 = [lst1[2:end] lst2[j]]\n\
    \                    lst2 = [lst2[1:j-1] lst2[j+1:end]]\n                    n\
    \ -= 1\n                    break\n                elseif i == m\n           \
    \         lst1 = [lst1[1:i-1] lst2[j]]\n                    lst2 = [lst2[1:j-1]\
    \ lst2[j+1:end]]\n                    n -= 1\n                    break\n    \
    \            else\n                    lst1 = [lst1[1:i-1] lst2[j] lst1[i+1:end]]\n\
    \                    lst2 = [lst2[1:j-1] lst2[j+1:end]]\n                    n\
    \ -= 1\n                    break\n                end\n            end\n    \
    \    end\n    end\n    for i = 1:m\n        if lst1[i] % 2 != 0\n            return\
    \ \"NO\"\n        end\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplu7eug97.jl:50\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  DimensionMismatch(\"\
    mismatch in dimension 1 (expected 3 got 1)\")\n  Stacktrace:\n    [1] _cs\n  \
    \    @ ./abstractarray.jl:1688 [inlined]\n    [2] _cshp\n      @ ./abstractarray.jl:1684\
    \ [inlined]\n    [3] _cat_size_shape(::Tuple{Bool, Bool}, ::Tuple{Int64, Int64},\
    \ ::Int64)\n      @ Base ./abstractarray.jl:1664\n    [4] cat_size_shape(::Tuple{Bool,\
    \ Bool}, ::Vector{Int64}, ::Int64, ::Vararg{Any})\n      @ Base ./abstractarray.jl:1662\n\
    \    [5] _cat_t(::Val{2}, ::Type{Int64}, ::Vector{Int64}, ::Vararg{Any})\n   \
    \   @ Base ./abstractarray.jl:1708\n    [6] cat_t(::Type{Int64}, ::Vector{Int64},\
    \ ::Vararg{Any}; dims::Val{2})\n      @ Base ./abstractarray.jl:1705\n    [7]\
    \ _cat\n      @ ./abstractarray.jl:1703 [inlined]\n    [8] #cat#141\n      @ ./abstractarray.jl:1861\
    \ [inlined]\n    [9] hcat\n      @ ./abstractarray.jl:1823 [inlined]\n   [10]\
    \ exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n      @ Main /tmp/tmplu7eug97.jl:20\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmplu7eug97.jl:50 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmplu7eug97.jl:49\ntest set:\
    \ Error During Test at /tmp/tmplu7eug97.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  DimensionMismatch(\"mismatch\
    \ in dimension 1 (expected 3 got 1)\")\n  Stacktrace:\n    [1] _cs\n      @ ./abstractarray.jl:1688\
    \ [inlined]\n    [2] _cshp\n      @ ./abstractarray.jl:1684 [inlined]\n    [3]\
    \ _cat_size_shape(::Tuple{Bool, Bool}, ::Tuple{Int64, Int64}, ::Int64)\n     \
    \ @ Base ./abstractarray.jl:1664\n    [4] cat_size_shape(::Tuple{Bool, Bool},\
    \ ::Vector{Int64}, ::Int64, ::Vararg{Any})\n      @ Base ./abstractarray.jl:1662\n\
    \    [5] _cat_t(::Val{2}, ::Type{Int64}, ::Vector{Int64}, ::Vararg{Any})\n   \
    \   @ Base "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplu7eug97.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    _lst1=lst1\n    for i in 1:length(lst1)\n\
    \        _lst1[i]=mod(lst1[i],2)\n    end\n    for i in 1:length(lst2)\n     \
    \   if lst2[i]%2==0\n            _lst1[i]=0\n        end\n    end\n    if sum(_lst1)>0\n\
    \        return \"NO\"\n    else\n        return \"YES\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0gtepqr6.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0gtepqr6.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0gtepqr6.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0gtepqr6.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even_lst1_ind = findall(isodd, lst1)\n  \
    \  even_lst2_ind = findall(iseven, lst2)\n    for ind in even_lst1_ind\n     \
    \   if ind in even_lst2_ind\n            return \"YES\"\n        end\n    end\n\
    \    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwezbc6wo.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwezbc6wo.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwezbc6wo.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpwezbc6wo.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwezbc6wo.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwezbc6wo.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpwezbc6wo.jl:34\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwezbc6wo.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwezbc6wo.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwezbc6wo.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    odd_lst = [x for x in lst1 if x % 2 != 0]\n\
    \    odd_lst2 = [x for x in lst2 if x % 2 != 0]\n    if length(odd_lst) == length(odd_lst2)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxbeax095.jl:30\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxbeax095.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxbeax095.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxbeax095.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"This function implements the exchange\
    \ of elements between two lists.\n    \"\"\"\n    evens = x -> (x % 2 == 0) \n\
    \    \"\"\"evens is a function that determines whether a number is even.\n   \
    \ \"\"\"\n    odds = x -> (x % 2 != 0) \n    \"\"\"odds is a function that determines\
    \ whether a number is odd.\n    \"\"\"\n    all_even = all(evens, lst1)\n    \"\
    \"\"all_even is True if all the elements of lst1 are even and false otherwise.\n\
    \    \"\"\"\n    all_odd = all(odds, lst1)\n    \"\"\"all_odd is True if all the\
    \ elements of lst1 are odd and false otherwise.\n    \"\"\"\n    if all_even ==\
    \ true\n        return \"YES\"\n    elseif all_odd == true\n        return \"\
    NO\"\n    else\n        for i in lst1\n            if evens(i) == false\n    \
    \            for j in lst2\n                    if evens(j) == true\n        \
    \                return \"YES\"\n                    end\n                end\n\
    \            end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnjwys643.jl:51\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnjwys643.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnjwys643.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpnjwys643.jl:53\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnjwys643.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnjwys643.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnjwys643.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if all(x->x%2==0, lst1) \n        return\
    \ \"YES\"\n    elseif any(x->x%2==0, lst2)\n        return \"YES\"\n    else \n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_itsm8kq.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_itsm8kq.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_itsm8kq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_itsm8kq.jl:31\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_itsm8kq.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_itsm8kq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_itsm8kq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if !(all(isodd, lst1))\n        return \"\
    YES\"\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmps8p064z7.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8p064z7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8p064z7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8p064z7.jl:27\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8p064z7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8p064z7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8p064z7.jl:29\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8p064z7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8p064z7.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps8p064z7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    N = length(lst1)\n    M = length(lst2)\n\
    \    lst3 = lst1\n    lst4 = lst2\n    n = 0\n    ans = \"NO\"\n    while n <\
    \ N\n        if lst3[n] % 2 == 0\n            n += 1\n        else\n         \
    \   if n > M\n                ans = \"NO\"\n                break\n          \
    \  else\n                lst3[n] = lst4[n]\n                n += 1\n         \
    \   end\n        end\n    end\n    if ans == \"NO\"\n        return ans\n    else\n\
    \        return \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp_ds1sp9y.jl:44\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  BoundsError:\
    \ attempt to access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmp_ds1sp9y.jl:21\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_ds1sp9y.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_ds1sp9y.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp_ds1sp9y.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp_ds1sp9y.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_ds1sp9y.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_ds1sp9y.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp_ds1sp9y.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  BoundsError: attempt to\
    \ access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp_ds1sp9y.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_ds1sp9y.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ds1sp9y.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if isempty(lst1) return \"NO\" end\n    if\
    \ isempty(lst2) return \"NO\" end\n    if all(x -> iseven(x), lst1) return \"\
    YES\" end\n    for x in lst1\n        for y in lst2\n            if iseven(x)\
    \ & !iseven(y)\n                if exchange(deleteat!(lst1, findall(lst1 .== x)[1]),\
    \ deleteat!(lst2, findall(lst2 .== y)[1])) == \"YES\"\n                    return\
    \ \"YES\"\n                end\n            end\n        end\n    end\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpt_zzunz8.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt_zzunz8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt_zzunz8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt_zzunz8.jl:35\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt_zzunz8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt_zzunz8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpt_zzunz8.jl:36\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt_zzunz8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt_zzunz8.jl:32\ntest set: Error\
    \ During Test at /tmp/tmpt_zzunz8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64}) (repeats 3 times)\n     @ Main /tmp/tmpt_zzunz8.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt_zzunz8.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt_zzunz8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"This function determines whether it is\
    \ possible to make list lst1 even by exchanging elements with lst2\"\n    to_exchange\
    \ = Set()\n    for i in lst1\n        if i % 2 != 0\n            push!(to_exchange,\
    \ i)\n        end\n    end\n    for j in lst2\n        if j % 2 != 0\n       \
    \     if j in to_exchange\n                pop!(to_exchange)\n            end\n\
    \        end\n    end\n    if isempty(to_exchange)\n        return \"YES\"\n \
    \   else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8fpnrtes.jl:39\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8fpnrtes.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8fpnrtes.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8fpnrtes.jl:41\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8fpnrtes.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8fpnrtes.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8fpnrtes.jl:42\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8fpnrtes.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8fpnrtes.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp8fpnrtes.jl:44\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8fpnrtes.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8fpnrtes.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8fpnrtes.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if any(x->x%2==1, lst1)\n        return \"\
    NO\"\n    else\n        return \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaqc22_87.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaqc22_87.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaqc22_87.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpaqc22_87.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaqc22_87.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaqc22_87.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpaqc22_87.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaqc22_87.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaqc22_87.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaqc22_87.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst1_even = all(mod.(lst1, 2) .== 0)\n  \
    \  lst2_even = all(mod.(lst2, 2) .== 0)\n    if lst1_even == true\n        return\
    \ \"YES\"\n    elseif lst2_even == true\n        return \"YES\"\n    else\n  \
    \      return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbtnvoira.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbtnvoira.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbtnvoira.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbtnvoira.jl:31\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbtnvoira.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbtnvoira.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbtnvoira.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if ((isempty(lst1) == false) && (isempty(lst2)\
    \ == false))\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprz_q1kdv.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz_q1kdv.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz_q1kdv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprz_q1kdv.jl:30\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz_q1kdv.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz_q1kdv.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprz_q1kdv.jl:31\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprz_q1kdv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprz_q1kdv.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprz_q1kdv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"Your solution goes here\"\"\"\n   \
    \ mod_vec = Vector{Int64}()\n    for i in lst1\n        push!(mod_vec, i % 2)\n\
    \    end\n    vec_sum = sum(mod_vec)\n    if vec_sum == 0\n        return \"YES\"\
    \n    else\n        if isodd(vec_sum)\n            return \"NO\"\n        else\n\
    \            ctr = 0\n            if vec_sum > 0\n                while ctr <\
    \ vec_sum/2\n                    for i in 1:length(mod_vec)\n                \
    \        if mod_vec[i] == 1\n                            for j in 1:length(lst2)\n\
    \                                if lst2[j] % 2 == 0\n                       \
    \             mod_vec[i] = 0\n                                    lst2[j] += 1\n\
    \                                    ctr += 1\n                              \
    \      break\n                                end\n                          \
    \  end\n                        end\n                    end\n               \
    \ end\n            else\n                while ctr > vec_sum/2\n             \
    \       for i in 1:length(mod_vec)\n                        if mod_vec[i] == -1\n\
    \                            for j in 1:length(lst2)\n                       \
    \         if lst2[j] % 2 == 1\n                                    mod_vec[i]\
    \ = 0\n                                    lst2[j] -= 1\n                    \
    \                ctr -= 1\n                                    break\n       \
    \                         end\n                            end\n             \
    \           end\n                    end\n                end\n            end\n\
    \            return \"YES\"\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4aespmy.jl:68\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4aespmy.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4aespmy.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpw4aespmy.jl:70\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4aespmy.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4aespmy.jl:66\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4aespmy.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst1_is_odd = isodd.(lst1)\n    lst2_is_odd\
    \ = isodd.(lst2)\n    if sum(lst1_is_odd) > sum(lst2_is_odd)\n        return \"\
    NO\"\n    else\n        return \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqpo5lrui.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpo5lrui.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpo5lrui.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqpo5lrui.jl:30\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpo5lrui.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpo5lrui.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqpo5lrui.jl:32\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpo5lrui.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpo5lrui.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqpo5lrui.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for i in 1:length(lst1)\n        if lst1[i]\
    \ % 2 != 0 \n            if lst2[i] % 2 == 0 \n                return \"YES\"\n\
    \            end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ubn0jia.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ubn0jia.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ubn0jia.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4ubn0jia.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ubn0jia.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ubn0jia.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4ubn0jia.jl:34\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ubn0jia.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ubn0jia.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ubn0jia.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    num_exchanges = 0\n    for i in 1:length(lst1)\n\
    \        if lst1[i] % 2 != 0\n            for j in 1:length(lst2)\n          \
    \      if lst2[j] % 2 != 0\n                    num_exchanges += 1\n         \
    \           break\n                end\n            end\n        end\n    end\n\
    \    num_exchanges == 0 ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptpbv8r76.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptpbv8r76.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptpbv8r76.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptpbv8r76.jl:34\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptpbv8r76.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptpbv8r76.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptpbv8r76.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    n = length(lst1)\n    result = \"NO\"\n \
    \   if(all(!isodd, lst1))\n        return \"YES\"\n    end\n    for i = 1:n\n\
    \        if(isodd(lst1[i]))\n            for j = 1:n\n                if(!isodd(lst2[j]))\n\
    \                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                   \
    \ if(all(!isodd, lst1))\n                        result = \"YES\"\n          \
    \              break\n                    end\n                    lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                end\n            end\n        end\n    end\n\
    \    return result\nend\n@test exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    \n@test exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n@test exchange([1, 2,\
    \ 3, 4], [6, 1, 3, 4]) == \"YES\"\n@test exchange([1, 2, 3, 4], [1, 3, 5, 4])\
    \ == \"NO\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmp91qa0av0.jl:35\nin expression starting at /tmp/tmp91qa0av0.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    len_lst1 = length(lst1)\n    len_lst2 = length(lst2)\n\
    \    if len_lst1 != len_lst2\n        return \"NO\"\n    end\n    is_odd_lst1\
    \ = false\n    for num in lst1\n        if num % 2 != 0\n            is_odd_lst1\
    \ = true\n            break\n        end\n    end\n    if is_odd_lst1 == false\n\
    \        return \"YES\"\n    end\n    is_even_lst2 = false\n    for num in lst2\n\
    \        if num % 2 == 0\n            is_even_lst2 = true\n            break\n\
    \        end\n    end\n    if is_even_lst2 == false\n        return \"NO\"\n \
    \   end\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpomz7rg39.jl:47\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpomz7rg39.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpomz7rg39.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpomz7rg39.jl:50\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpomz7rg39.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpomz7rg39.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpomz7rg39.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if any(x -> (x%2==0), lst1) # if there is\
    \ an even number in lst1, that's enough\n        return \"YES\"\n    elseif any(x\
    \ -> (x%2==1), lst2) # if there is an odd number in lst2, it's impossible\n  \
    \      return \"NO\"\n    else # if there is no even number in lst1 and no odd\
    \ number in lst2\n        for i in 1:length(lst1) # iterate through all items\
    \ in lst1\n            if lst1[i]%2==1 # if an item in lst1 is odd\n         \
    \       for j in 1:length(lst2) # iterate through all items in lst2\n        \
    \            if lst2[j]%2==0 # if an item in lst2 is even\n                  \
    \      lst1[i], lst2[j] = lst2[j], lst1[i] # swap the odd/even numbers\n     \
    \                   return exchange(lst1, lst2) # call recursively\n         \
    \           end\n                end\n            end\n        end\n    end\n\
    \    return \"NO\" # if not returned above, it's impossible\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo8em12bg.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8em12bg.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8em12bg.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpo8em12bg.jl:42\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8em12bg.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8em12bg.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8em12bg.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    odd1 = 0 \n    odd2 = 0 \n    for i = 1:length(lst1)\n\
    \        if lst1[i] % 2 != 0\n            odd1 += 1\n        end\n    end\n  \
    \  for i = 1:length(lst2)\n        if lst2[i] % 2 != 0\n            odd2 += 1\n\
    \        end\n    end\n    if odd1 == odd2 || odd1 == odd2 - 1 || odd1 == odd2\
    \ + 1\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpstbrhxjj.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpstbrhxjj.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpstbrhxjj.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpstbrhxjj.jl:40\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpstbrhxjj.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpstbrhxjj.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpstbrhxjj.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \"\"\"This function takes two lists and returns\
    \ \"YES\" if the \n    two lists can be exchanged to make all the elements of\
    \ \n    the first list even, and \"NO\" otherwise.\"\"\"\n    \n    evens = [x\
    \ for x in lst1 if x % 2 == 0]\n    odds = [x for x in lst1 if x % 2 != 0]\n \
    \   total_evens = length(evens)\n    total_odds = length(odds)\n    n_evens =\
    \ 0\n    n_odds = 0\n    \n    for x in lst2\n        if x % 2 == 0\n        \
    \    n_evens += 1\n        else\n            n_odds += 1\n        end\n    end\n\
    \    \n    if total_evens == 0\n        if total_odds > n_evens\n            return\
    \ \"NO\"\n        else\n            return \"YES\"\n        end\n    else\n  \
    \      if total_odds > n_evens\n            return \"NO\"\n        else\n    \
    \        return \"YES\"\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if (length(lst1) != length(lst2))\n     \
    \   return \"NO\"\n    end\n    even_lst1 = count(i -> i % 2 == 0, lst1)\n   \
    \ odd_lst2 = count(i -> i % 2 != 0, lst2)\n    if (even_lst1 >= odd_lst2)\n  \
    \      return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # we use the Julia function iseven()\n  \
    \  # to check if all elements of lst1 are even numbers\n    # for that we can\
    \ use the Julia function all()\n    # to apply iseven() to every element of lst1\n\
    \    if all(iseven, lst1) == true\n        return \"YES\"\n    else\n        #\
    \ if all() returns false, we have to check the possibilities to exchange elements\n\
    \        # between the lists\n        # if some element of lst1 is even then we\
    \ can exchange elements between lst1 and lst2\n        # so we use the function\
    \ any()\n        # to find if any element of lst1 is even\n        if any(iseven,\
    \ lst1) == true\n            # if any element of lst1 is even\n            # then\
    \ we check if the remaining elements of lst1 are even\n            # but using\
    \ the Julia function isodd() to see if any element is odd\n            # and the\
    \ function none() to see if the result of any() is false\n            if none(isodd,\
    \ lst1) == true\n                return \"YES\"\n            end\n        end\n\
    \    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmprn33p62g.jl:43\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  UndefVarError:\
    \ none not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmprn33p62g.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprn33p62g.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprn33p62g.jl:42\ntest set:\
    \ Error During Test at /tmp/tmprn33p62g.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  UndefVarError: none not defined\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmprn33p62g.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprn33p62g.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprn33p62g.jl:42\ntest set:\
    \ Error During Test at /tmp/tmprn33p62g.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  UndefVarError: none not\
    \ defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmprn33p62g.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprn33p62g.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprn33p62g.jl:42\ntest set:\
    \ Test Failed at /tmp/tmprn33p62g.jl:46\n  Expression: candidate([5, 7, 3], [2,\
    \ 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprn33p62g.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if length(lst1) != length(lst2)\n       \
    \ return \"NO\"\n    end\n    sum_lst1 = sum(lst1)\n    sum_lst2 = sum(lst2)\n\
    \    remainder = sum_lst1 % 2\n    if remainder == 0\n        return \"YES\"\n\
    \    else\n        sum_lst2 = sum_lst2 - remainder\n        remainder = sum_lst2\
    \ % 2\n        if remainder == 0\n            return \"YES\"\n        else\n \
    \           return \"NO\"\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeu2ht9s2.jl:38\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeu2ht9s2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeu2ht9s2.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpeu2ht9s2.jl:40\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeu2ht9s2.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeu2ht9s2.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpeu2ht9s2.jl:41\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeu2ht9s2.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeu2ht9s2.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeu2ht9s2.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # check if exchange of elements between lists\
    \ is possible\n    for i in 1:length(lst1)\n        if mod(lst1[i], 2) != 0 &&\
    \ mod(lst2[i], 2) == 0\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    \
    \    end\n    end\n    # check if any even number exists in lst1\n    for j in\
    \ 1:length(lst1)\n        if mod(lst1[j], 2) == 0\n            return \"YES\"\n\
    \        end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk7_6fln0.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk7_6fln0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk7_6fln0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpk7_6fln0.jl:37\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk7_6fln0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk7_6fln0.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpk7_6fln0.jl:38\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk7_6fln0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk7_6fln0.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7_6fln0.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for i in 1:length(lst1)\n        for j in\
    \ 1:length(lst2)\n            if iseven(lst1[i]) == false && iseven(lst2[j]) ==\
    \ true\n                temp = lst1[i]\n                lst1[i] = lst2[j]\n  \
    \              lst2[j] = temp\n            end\n        end\n    end\n    if all(iseven,\
    \ lst1) == true\n        return \"YES\"\n    else\n        return \"NO\"\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst1_odds = count(x -> !iseven(x), lst1)\n\
    \    lst2_evens = count(x -> iseven(x), lst2)\n    lst1_odds <= lst2_evens ? \"\
    YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t\
    @test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # lst1 and lst2 are assumed to be non-empty\n\
    \    odd_idx_lst1 = Int[]\n    for i in 1:length(lst1)\n        if lst1[i] % 2\
    \ != 0\n            push!(odd_idx_lst1, i)\n        end\n    end\n    if length(odd_idx_lst1)\
    \ == 0\n        return \"YES\"\n    end\n    odd_idx_lst2 = Int[]\n    for i in\
    \ 1:length(lst2)\n        if lst2[i] % 2 != 0\n            push!(odd_idx_lst2,\
    \ i)\n        end\n    end\n    if length(odd_idx_lst2) < length(odd_idx_lst1)\n\
    \        return \"NO\"\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpemp1l3iw.jl:41\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemp1l3iw.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemp1l3iw.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpemp1l3iw.jl:43\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemp1l3iw.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemp1l3iw.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpemp1l3iw.jl:45\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpemp1l3iw.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpemp1l3iw.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpemp1l3iw.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    even,odd = 0,0\n    for i in lst1\n     \
    \   if i%2==0\n            even += 1\n        else\n            odd += 1\n   \
    \     end\n    end\n    if even >= odd\n        return \"YES\"\n    else\n   \
    \     return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp53aev0t8.jl:34\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp53aev0t8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp53aev0t8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp53aev0t8.jl:36\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp53aev0t8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp53aev0t8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp53aev0t8.jl:38\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp53aev0t8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp53aev0t8.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp53aev0t8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    N, M = length(lst1), length(lst2)\n    evens\
    \ = filter(iseven, lst1)\n    odds = filter(isodd, lst1)\n    i = 0\n    while\
    \ i < M\n        odd = lst2[i]\n        if isodd(odd)\n            lst2[i] = pop!(evens)\n\
    \            push!(odds, odd)\n        end\n        i += 1\n    end\n    isempty(odds)\
    \ ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpkr7qtf0_.jl:33\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  BoundsError:\
    \ attempt to access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmpkr7qtf0_.jl:19\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkr7qtf0_.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkr7qtf0_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkr7qtf0_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpkr7qtf0_.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkr7qtf0_.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkr7qtf0_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpkr7qtf0_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  BoundsError: attempt to\
    \ access 4-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpkr7qtf0_.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkr7qtf0_.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkr7qtf0_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    n1, n2 = length(lst1), length(lst2)\n   \
    \ nextOne = true\n    while nextOne && n1 > 0 && n2 > 0\n        current = lst1[1]\n\
    \        if current % 2 == 0\n            popfirst!(lst1)\n            n1 -= 1\n\
    \        else\n            nextOne = false\n        end\n    end\n    while n1\
    \ > 0 && n2 > 0\n        current = lst1[1]\n        if current % 2 == 0\n    \
    \        popfirst!(lst1)\n            n1 -= 1\n        else\n            i = 1\n\
    \            while i <= n2\n                if lst2[i] % 2 == 0\n            \
    \        lst1[1] = lst2[i]\n                    popfirst!(lst2)\n            \
    \        n2 -= 1\n                    break\n                end\n           \
    \     i += 1\n            end\n            if i > n2\n                nextOne\
    \ = false\n                break\n            end\n        end\n    end\n    if\
    \ n1 == 0\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdn_iaqye.jl:61\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdn_iaqye.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdn_iaqye.jl:57\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdn_iaqye.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if any(x -> isodd(x), lst1)\n        if any(x\
    \ -> iseven(x), lst2)\n            \"YES\"\n        else\n            \"NO\"\n\
    \        end\n    else\n        \"YES\"\n    end\nend\nexchange([1, 2, 3, 4],\
    \ [1, 2, 3, 4])\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\nexchange([3, 2, 3, 4],\
    \ [1, 5, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpswv_dzdh.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpswv_dzdh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpswv_dzdh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpswv_dzdh.jl:36\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpswv_dzdh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpswv_dzdh.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpswv_dzdh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    # Check if the lists are empty\n  \
    \  if isempty(lst1) || isempty(lst2)\n        error(\"The lists need to be non-empty\"\
    )\n    end\n    \n    # Check if the lists have the same length\n    if length(lst1)\
    \ != length(lst2)\n        error(\"The lists need to have the same length\")\n\
    \    end\n    \n    # Check if lst1 contains only odd numbers\n    if all(odd,\
    \ lst1) == true\n        return \"NO\"\n    end\n    \n    # Check if lst2 contains\
    \ only even numbers\n    if all(even, lst2) == true\n        return \"NO\"\n \
    \   end\n    \n    # Check if an exchange is possible\n    for i in 1:length(lst1)\n\
    \        if odd(lst1[i]) == true && even(lst2[i]) == true\n            return\
    \ \"YES\"\n        end\n    end\n    \n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpabu79206.jl:49\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  UndefVarError:\
    \ odd not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpabu79206.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabu79206.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabu79206.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpabu79206.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  UndefVarError: odd not defined\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmpabu79206.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabu79206.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabu79206.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpabu79206.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  UndefVarError: odd not defined\n\
    \  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n  \
    \   @ Main /tmp/tmpabu79206.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabu79206.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabu79206.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpabu79206.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n  UndefVarError: odd not defined\n\
    \  Stacktrace:\n   [1] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpabu79206.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst = vcat(lst1, lst2)\n    for i in lst\n\
    \        if i % 2 != 0\n            return \"NO\"\n        end\n    end\n    return\
    \ \"YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpn4gihx94.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn4gihx94.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn4gihx94.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpn4gihx94.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn4gihx94.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn4gihx94.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpn4gihx94.jl:30\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn4gihx94.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn4gihx94.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4gihx94.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst = lst1\n    val = 0\n    for i in lst1\n\
    \        if i % 2 != 0\n            push!(lst,i)\n            val += 1\n     \
    \   end\n    end\n    for i in lst2\n        if i % 2 != 0\n            push!(lst,i)\n\
    \            val += 1\n        end\n    end\n    if val % 2 == 0\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst2_to_be_checked = Set(lst2)\n    lst1_even_flags\
    \ = [is_even(x) for x in lst1]\n    lst1_even_flags_false_count = sum(lst1_even_flags)\n\
    \    if lst1_even_flags_false_count == 0\n        return \"YES\"\n    end\n  \
    \  lst1_not_even_indices = findall(lst1_even_flags, false)\n    for i in lst1_not_even_indices\n\
    \        if lst1[i] in lst2_to_be_checked\n            continue\n        end\n\
    \        if is_even(lst1[i])\n            continue\n        end\n        lst1_even_flags_false_count\
    \ -= 1\n        if lst1_even_flags_false_count == 0\n            return \"YES\"\
    \n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpke_8rca7.jl:40\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  UndefVarError:\
    \ is_even not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @\
    \ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmpke_8rca7.jl:15\n   [5] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpke_8rca7.jl:40 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpke_8rca7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpke_8rca7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmpke_8rca7.jl:15\n   [5] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpke_8rca7.jl:41 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpke_8rca7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpke_8rca7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] exchange(lst1::Vector{Int64}, "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpke_8rca7.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n  flag = true\n  while (flag)\n    if any(lst1\
    \ .% 2 == 1)\n      # get the first odd number\n      n = findall(lst1 .% 2 ==\
    \ 1)[1]\n      if any(lst2 .% 2 == 0)\n        # get the first even number\n \
    \       m = findall(lst2 .% 2 == 0)[1]\n        # exchange\n        tmp = lst1[n]\n\
    \        lst1[n] = lst2[m]\n        lst2[m] = tmp\n      else\n        return\
    \ \"NO\"\n      end\n    else\n      flag = false\n    end\n  end\n  return \"\
    YES\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpejz01l7n.jl:41\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejz01l7n.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejz01l7n.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpejz01l7n.jl:44\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejz01l7n.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejz01l7n.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpejz01l7n.jl:45\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejz01l7n.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejz01l7n.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejz01l7n.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if isempty(lst1) || isempty(lst2)\n     \
    \   throw(ArgumentError(\"List must not be empty\"))\n    end\n    odds_counter1\
    \ = 0\n    odds_counter2 = 0\n    for i in lst1\n        if i % 2 != 0\n     \
    \       odds_counter1 += 1\n        end\n    end\n    for i in lst2\n        if\
    \ i % 2 != 0\n            odds_counter2 += 1\n        end\n    end\n    if odds_counter1\
    \ > odds_counter2\n        return \"NO\"\n    else\n        return \"YES\"\n \
    \   end\nend\nprintln(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprintln(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]))\nprintln(exchange([1, 2, 3, 4], [1, 5, 3, 4, 5, 6,\
    \ 7, 8]))\nprintln(exchange([1, 2, 3, 4], [1, 5, 3, 4, 5, 6, 7, 8, 5, 9, 10, 11,\
    \ 12]))\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "YES\nYES\nYES\nYES\ntest set: Test Failed at /tmp/tmpv135qmcj.jl:45\n \
    \ Expression: candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"\
    YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv135qmcj.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv135qmcj.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpv135qmcj.jl:47\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv135qmcj.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv135qmcj.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpv135qmcj.jl:49\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv135qmcj.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv135qmcj.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv135qmcj.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    count1, count2 = 0, 0\n    for i in lst1\
    \ \n        if i % 2 == 0 \n            count1 += 1\n        end\n    end\n  \
    \  for i in lst2 \n        if i % 2 == 0 \n            count2 += 1\n        end\n\
    \    end\n    if count1 == length(lst1) || count2 == length(lst2) \n        return\
    \ \"YES\"\n    else \n        return \"NO\"\n    end\nend\n \n@assert exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n@assert exchange([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: AssertionError: exchange([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6gr125we.jl:32\n\
    in expression starting at /tmp/tmp6gr125we.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    isEven = map(x -> iseven(x), lst1)\n    isOdd\
    \ = map(x -> !iseven(x), lst1)\n    odd_idx = findall(isOdd)\n    even_idx = findall(isEven)\n\
    \    for i in odd_idx\n        for j in even_idx\n            if iseven(lst2[i])\n\
    \                return \"YES\"\n            end\n        end\n    end\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpkp0t_jzl.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkp0t_jzl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkp0t_jzl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkp0t_jzl.jl:35\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkp0t_jzl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkp0t_jzl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkp0t_jzl.jl:38\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkp0t_jzl.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkp0t_jzl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkp0t_jzl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    ODD_ELEMENT = 1\n    if all([e % 2 == 0 for\
    \ e in lst1])\n        return \"YES\"\n    end\n    if all([e % 2 == ODD_ELEMENT\
    \ for e in lst1])\n        return \"NO\"\n    end\n    exchange_elements_lst1\
    \ = exchange_elements(lst1, lst2)\n    exchange_elements_lst2 = exchange_elements(lst2,\
    \ lst1)\n    if (all([e % 2 == 0 for e in exchange_elements_lst1]) || \n     \
    \   all([e % 2 == 0 for e in exchange_elements_lst2]))\n        return \"YES\"\
    \n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpabksd28n.jl:34\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  UndefVarError:\
    \ exchange_elements not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmpabksd28n.jl:21\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabksd28n.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabksd28n.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpabksd28n.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  UndefVarError: exchange_elements\
    \ not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpabksd28n.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabksd28n.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabksd28n.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpabksd28n.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  UndefVarError: exchange_elements\
    \ not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpabksd28n.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabksd28n.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabksd28n.jl:33\ntest set:\
    \ Test Failed at /tmp/tmpabksd28n.jl:37\n  Expression: candidate([5, 7, 3], [2,\
    \ 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpabksd28n.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    n = length(lst1)\n    m = length(lst2)\n\
    \    for i in 1:n\n        if lst1[i] % 2 == 1\n            for j in 1:m\n   \
    \             if lst2[j] % 2 == 0\n                    lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n                    return \"YES\"\n                end\n         \
    \   end\n            return \"NO\"\n        end\n    end\n    return \"YES\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0cbzhp6j.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0cbzhp6j.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0cbzhp6j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0cbzhp6j.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0cbzhp6j.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0cbzhp6j.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0cbzhp6j.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    n = length(lst1)\n    even_index = findall(i\
    \ -> i % 2 == 0, lst1)\n    odd_index = findall(i -> i % 2 != 0, lst1)\n    for\
    \ i in odd_index\n        for j in even_index\n            if iseven(lst2[i])\
    \ && isodd(lst2[j])\n                lst1[i], lst1[j] = lst1[j], lst1[i]\n   \
    \             break\n            end\n        end\n    end\n    if all(iseven,\
    \ lst1)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbm20zhwl.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbm20zhwl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbm20zhwl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpbm20zhwl.jl:39\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbm20zhwl.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbm20zhwl.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpbm20zhwl.jl:40\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbm20zhwl.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbm20zhwl.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbm20zhwl.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    for (i, x) in enumerate(lst1)\n        if\
    \ x % 2 != 0\n            for (j, y) in enumerate(lst2)\n                if y\
    \ % 2 == 0\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n        \
    \            break\n                end\n            end\n        end\n    end\n\
    \    all(x -> x % 2 == 0, lst1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # first we will check if the odd numbers\
    \ of lst1 is smaller than the odd numbers of lst2\n    # if yes, then the exchange\
    \ could be possible, otherwise the exchange is impossible\n    if length(filter(x\
    \ -> isodd(x), lst1)) <= length(filter(x -> isodd(x), lst2))\n        return \"\
    YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxi09ax30.jl:28\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxi09ax30.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxi09ax30.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxi09ax30.jl:30\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxi09ax30.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxi09ax30.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxi09ax30.jl:32\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxi09ax30.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxi09ax30.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxi09ax30.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    #checks if the arrays are of equal length\n\
    \    if length(lst1) != length(lst2)\n        return \"NO\"\n    end\n    #checks\
    \ if the first array is even\n    if all(isodd.(lst1))\n        return \"NO\"\n\
    \    end\n    #iterates to check if the second array is even\n    if any(isodd.(lst2))\n\
    \        return \"NO\"\n    end\n    return \"YES\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp_nhiqut.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_nhiqut.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_nhiqut.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp_nhiqut.jl:35\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_nhiqut.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_nhiqut.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpp_nhiqut.jl:36\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_nhiqut.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_nhiqut.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp_nhiqut.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    odd1 = []\n    even1 = []\n    odd2 = []\n\
    \    even2 = []\n    for x in lst1\n        if x % 2 == 0\n            push!(even1,\
    \ x)\n        else\n            push!(odd1, x)\n        end\n    end\n    for\
    \ x in lst2\n        if x % 2 == 0\n            push!(even2, x)\n        else\n\
    \            push!(odd2, x)\n        end\n    end\n    if length(even1) == length(lst1)\n\
    \        return \"YES\"\n    elseif length(even1) == 0\n        return \"NO\"\n\
    \    elseif length(even2) == 0\n        return \"NO\"\n    elseif length(even1)\
    \ < length(lst1) && length(even2) > 0\n        return \"YES\"\n    else\n    \
    \    return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpddrz6ovi.jl:50\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpddrz6ovi.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpddrz6ovi.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpddrz6ovi.jl:52\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpddrz6ovi.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpddrz6ovi.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpddrz6ovi.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    i = 1\n    j = 1\n    while i <= length(lst1)\
    \ && j <= length(lst2)\n        if !is_even(lst1[i]) && is_even(lst2[j])\n   \
    \         lst1[i], lst2[j] = lst2[j], lst1[i]\n            i += 1\n          \
    \  j += 1\n        elseif is_even(lst1[i]) && !is_even(lst2[j])\n            j\
    \ += 1\n        else\n            i += 1\n            j += 1\n        end\n  \
    \  end\n    if all(is_even, lst1)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpyk8nl7_7.jl:39\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  UndefVarError:\
    \ is_even not defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpyk8nl7_7.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyk8nl7_7.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyk8nl7_7.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpyk8nl7_7.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpyk8nl7_7.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyk8nl7_7.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyk8nl7_7.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpyk8nl7_7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\n  UndefVarError: is_even not\
    \ defined\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpyk8nl7_7.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyk8nl7_7.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyk8nl7_7.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpyk8nl7_7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n  UndefVarError: is_even not defined\n\
    \  Sta"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyk8nl7_7.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    evens = map(i -> iseven(i), lst1)\n    odds\
    \ = map(i -> isodd(i), lst1)\n    if any(evens) == true && any(odds) == true\n\
    \        return \"YES\"\n    else \n        return \"NO\"\n    end\nend\n\"\"\"\
    In this problem, you will implement a function that takes two lists of numbers,\n\
    \    and determines whether it is possible to perform an exchange of elements\n\
    \    between them to make lst1 a list of only even numbers.\n    There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n    If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n    all the elements\
    \ of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For\
    \ example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp2znrvca2.jl:22\nin expression starting at /tmp/tmp2znrvca2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code here\n    # Note that you can\
    \ use the any() and iseven() functions as follows:\n    if (any(iseven, lst1))\n\
    \        return \"YES\"\n    elseif (any(iseven, lst2))\n        return \"YES\"\
    \n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0iq4nh3j.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0iq4nh3j.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0iq4nh3j.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0iq4nh3j.jl:33\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0iq4nh3j.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0iq4nh3j.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0iq4nh3j.jl:34\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0iq4nh3j.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0iq4nh3j.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0iq4nh3j.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    lst2_evens = map(x -> x % 2 == 0, lst2)\n\
    \    lst1_evens = map(x -> x % 2 == 0, lst1)\n    # check if the two lists have\
    \ the same number of evens and odds\n    if sum(lst1_evens) == sum(lst2_evens)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxl8htl5d.jl:31\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxl8htl5d.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxl8htl5d.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxl8htl5d.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if any(isodd, lst1)\n        return \"NO\"\
    \n    else\n        return \"YES\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphmj2w1vl.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphmj2w1vl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphmj2w1vl.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphmj2w1vl.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphmj2w1vl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphmj2w1vl.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphmj2w1vl.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphmj2w1vl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphmj2w1vl.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphmj2w1vl.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    if lst1[end] % 2 == 0\n        return \"\
    YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpow1_l4tt.jl:26\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow1_l4tt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow1_l4tt.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpow1_l4tt.jl:28\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpow1_l4tt.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpow1_l4tt.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpow1_l4tt.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # If all elements of lst1 are even return\
    \ \"YES\"\n    if all(x -> (mod(x, 2) == 0), lst1)\n        return \"YES\"\n \
    \   end\n    # Loop over all elements in lst1\n    for i = 1:length(lst1)\n  \
    \      # If lst1[i] is odd\n        if mod(lst1[i], 2) == 1\n            # Loop\
    \ over all elements in lst2\n            for j = 1:length(lst2)\n            \
    \    # If lst2[j] is even\n                if mod(lst2[j], 2) == 0\n         \
    \           # Swap lst1[i] and lst2[j]\n                    temp = lst1[i]\n \
    \                   lst1[i] = lst2[j]\n                    lst2[j] = temp\n  \
    \                  # Check if all the elements of lst1 are even\n            \
    \        if all(x -> (mod(x, 2) == 0), lst1)\n                        return \"\
    YES\"\n                    end\n                end\n            end\n       \
    \ end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    # Your code goes here\n    return \"NO\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpou2prrel.jl:22\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpou2prrel.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpou2prrel.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpou2prrel.jl:24\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpou2prrel.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpou2prrel.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpou2prrel.jl:25\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpou2prrel.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpou2prrel.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpou2prrel.jl:28\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpou2prrel.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpou2prrel.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpou2prrel.jl:19\n"
  exit_code: 1
  status: SyntaxError
