name: HumanEval_25_factorize
language: jl
prompt: "\"\"\" Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    Input number should be equal\
  \ to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
  \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
  \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
  \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
  @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3,\
  \ 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
completions: ["    output = Int64[] #we should start with empty list\n    i = 2 #we\
    \ can start with 2 becuase all factors of 1 is 1 and we don't need to consider\
    \ it\n    while n != 1 #loop until n = 1\n        while n % i == 0 #check if i\
    \ is a factor of n\n            push!(output, i) #if yes, push it in the list\n\
    \            n = n / i #also, we should divide n by i so we can find other factors\
    \ of it\n        end\n        i += 1 #we should increase i and try another factor\n\
    \    end\n    return output\nend", "    factors = []\n    while n != 1\n     \
    \   i = 2\n        while n % i != 0\n            i += 1\n        end\n       \
    \ push!(factors, i)\n        n /= i\n    end\n    return factors\nend", "    if\
    \ n < 2 # base case\n        return Int64[]\n    end\n    for i = 2:n\n      \
    \  if n % i == 0\n            return [i; factorize(n/i)]\n        end\n    end\n\
    end", "    factors = Int64[]\n    while(n != 1)\n        # find the smallest prime\
    \ factor\n        factor = smallest_prime_factor(n)\n        push!(factors, factor)\n\
    \        n = n // factor\n    end\n    return factors\nend", "    if n == 0\n\
    \        return [0]\n    end\n    factors = []\n    #if n < 0\n    #    n = -n\n\
    \    #    push!(factors, -1)\n    #end\n    #while n % 2 == 0\n    #    push!(factors,\
    \ 2)\n    #    n = n // 2\n    #end\n    while n % 2 == 0\n        push!(factors,\
    \ 2)\n        n = n // 2\n    end\n    while n % 3 == 0\n        push!(factors,\
    \ 3)\n        n = n // 3\n    end\n    f = 5\n    while f * f <= n\n        while\
    \ n % f == 0\n            push!(factors, f)\n            n = n // f\n        end\n\
    \        f += 2\n        while n % f == 0\n            push!(factors, f)\n   \
    \         n = n // f\n        end\n        f += 4\n    end\n    if n > 1\n   \
    \     push!(factors, n)\n    end\n    return factors\nend", "    if n==1\n   \
    \     return [1]\n    end\n    p=2\n    factors=[]\n    while n>1\n        if\
    \ n%p==0\n            push!(factors,p)\n            n=n/p\n        else\n    \
    \        p+=1\n        end\n    end\n    return factors\nend", "    factors =\
    \ []\n    divisor = 2\n    n = n\n    while n > 1\n        if n % divisor == 0\n\
    \            n = n / divisor\n            push!(factors, divisor)\n        else\n\
    \            divisor += 1\n        end\n    end\n    return factors\nend", " \
    \   if n<=1\n        return 0\n    end\n    factors = Vector{Int64}()\n    if\
    \ (n%2)==0\n        push!(factors,2)\n        n = n/2\n    end\n    for i=3:n\n\
    \        if (n%i)==0\n            push!(factors,i)\n            n = n/i\n    \
    \    end\n    end\n    return factors\nend", "    if n == 1\n        return [1]\n\
    \    end\n    factors = []\n    d = 2\n    while d*d <= n\n        while (n %\
    \ d) == 0\n            factors = push!(factors, d)\n            n /= d\n     \
    \   end\n        d += 1\n    end\n    if n > 1\n        push!(factors, n)\n  \
    \  end\n    factors\nend", "    factors = []\n    while n % 2 == 0\n        push!(factors,\
    \ 2)\n        n /= 2\n    end\n    i = 3\n    while i <= sqrt(n)\n        while\
    \ n % i == 0\n            push!(factors, i)\n            n /= i\n        end\n\
    \        i += 2\n    end\n    if n > 2\n        push!(factors, n)\n    end\n \
    \   return factors\nend", "    factors = []\n    d = 2\n    while n > 1\n    \
    \    while n % d == 0\n            push!(factors, d)\n            n /= d\n   \
    \     end\n        d += 1\n    end\n    return factors\nend\nprintln(factorize(8))\n\
    println(factorize(25))\nprintln(factorize(70))", "    # your code goes here\n\
    end", "    factors = []\n    while (n > 1)\n        factor = 2\n        while(n\
    \ % factor != 0)\n            factor += 1\n        end\n        push!(factors,\
    \ factor)\n        n = n \xF7 factor\n    end\n    return factors\nend", "   \
    \ if n <= 1\n        return [n]\n    end\n    i = 2\n    while i <= floor(sqrt(n))\n\
    \        if n % i == 0\n            return sort([i; factorize(n / i)])\n     \
    \   end\n        i += 1\n    end\n    return [n]\nend", "    # replace this function\
    \ definition with your code\n    return [n]\nend\nfactorize(8)\n \nfactorize(25)\n\
    \ \nfactorize(70)\n \nfactorize(20)\n \nfactorize(2)\n \nfactorize(11)\n \nfactorize(1)",
  "    factors=[]\n    d=2\n    while n>1\n        while n%d==0\n            push!(factors,d)\n\
    \            n/=d\n        end\n        d+=1\n    end\n    return factors\nend",
  "    factors = []\n    while n > 1\n        for divisor in primes(n)\n         \
    \   while n % divisor == 0\n                push!(factors, divisor)\n        \
    \        n /= divisor\n            end\n        end\n    end\n    return factors\n\
    end", "    if n == 1\n        return Int64[]\n    end\n    for i in 2:n-1\n  \
    \      if n % i == 0\n            return factorize(i) .* factorize(n/i)\n    \
    \    end\n    end\n    return [n]\nend", "    factors = Vector{Int64}()\n    i\
    \ = 2\n    while i*i <= n\n        if n % i == 0\n            push!(factors, i)\n\
    \            n = n \xF7 i\n        else\n            i += 1\n        end\n   \
    \ end\n    if n > 1\n        push!(factors, n)\n    end\n    return factors\n\
    end", "    result = []\n    if n < 2\n        return result\n    end\n    divisor\
    \ = 2\n    while n > 1\n        while n % divisor == 0\n            push!(result,\
    \ divisor)\n            n /= divisor\n        end\n        divisor += 1\n    end\n\
    \    return result\nend", "    factors = []\n    # todo\n    return factors\n\
    end", " \n    \n    _factors = []\n    original_n = n\n    i = 2\n    while i*i\
    \ <= n\n        if n % i == 0\n            while n % i == 0\n                push!(_factors,\
    \ i)\n                n = n/i\n            end\n        end\n        i += 1\n\
    \    end\n    if n > 1\n        push!(_factors, n)\n    end\n    \n    prod =\
    \ prod(_factors)\n    if prod != original_n\n        return [original_n]\n   \
    \ end\n    \n    return _factors\nend", "    pfactors = []\n    for i in 2:n\n\
    \        count = 0\n        while rem(n,i) == 0\n            count = count + 1\n\
    \            n = div(n,i)\n        end\n        append!(pfactors, fill(i,count))\n\
    \    end\n    return pfactors\nend", "    result = Int64[]\n    for i in 2:n\n\
    \        if n % i == 0\n            push!(result,i)\n            @show result\n\
    \            n = n / i\n            i = i - 1\n        end\n    end\n    return\
    \ result\nend", "    if n == 0\n        return []\n    end\n    factors = []\n\
    \    factor = 2\n    while n != 1 && factor <= n\n        if n % factor == 0\n\
    \            push!(factors, factor)\n            n = n / factor\n        else\n\
    \            factor += 1\n        end\n    end\n    return factors\nend", "  \
    \  res = []\n    x = 2\n    while n > 1\n        while n % x == 0\n          \
    \  push!(res, x)\n            n /= x\n        end\n        x += 1\n    end\n \
    \   return res\nend", "    factors = []\n    factor = 2\n    while n > 1\n   \
    \     while n % factor == 0\n            push!(factors, factor)\n            n\
    \ /= factor\n        end\n        factor += 1\n    end\n    return factors\nend",
  "    f = Array{Int64}(1) # create array to store prime factors \n    i = 2 # initialise\
    \ counter\n    while i <= floor(Int64, sqrt(n)) # go through all numbers up to\
    \ square root of n\n        if n % i == 0 # if i is a prime factor of n\n    \
    \        j = 0 # initialise counter\n            while n % i == 0 # while n is\
    \ divisible by i\n                n = n//i # update n\n                j += 1\
    \ # count number of times i appears in factorization\n            end\n      \
    \      append!(f, repeat([i], j)) # add i to array and repeat j times\n      \
    \  end\n        i += 1 # increase counter\n    end\n    if n > 1 # if n still\
    \ is not 1, then n itself is prime\n        push!(f, n) # add n to array\n   \
    \ end\n    return f # return array with prime factors\nend", "    if n < 2\n \
    \       return []\n    end\n    primes = [2]\n    primeFactors = []\n    num =\
    \ n\n    for i in 3:Int64(sqrt(n))\n        if n % i == 0\n            if is_prime(i)\n\
    \                push!(primes, i)\n            end\n        end\n    end\n   \
    \ for i in primes\n        while num % i == 0\n            push!(primeFactors,\
    \ i)\n            num = num/i\n        end\n    end\n    primeFactors\nend", " \
    \   prime_factors = []\n    while n > 1\n        i = 2\n        while n % i !=\
    \ 0\n            i += 1\n        end\n        push!(prime_factors, i)\n      \
    \  n /= i\n    end\n    return prime_factors\nend", "    # add your code here\n\
    end", "    # write your code here\nend", "    factors = []\n    for i = 2:n-1\n\
    \        if n % i == 0\n            push!(factors, i)\n            return vcat(factorize(i),\
    \ factorize(n/i))\n        end\n    end\n    return [n]\nend\n    \n    \n    ",
  "    factors = Int64[]\n    for d in primes(n)\n        if n == 1\n            break\n\
    \        end\n        while n % d == 0\n            push!(factors, d)\n      \
    \      n /= d\n        end\n    end\n    return factors\nend", "    if n < 2\n\
    \        return []\n    end\n    p = 2\n    while p <= n\n        if n % p ==\
    \ 0\n            return [p, factorize(n/p)...];\n        end\n        p += 1\n\
    \    end\nend", "    factors = []\n    divisor = 2\n    while n != 1\n       \
    \ while n % divisor == 0\n            push!(factors, divisor)\n            n /=\
    \ divisor\n        end\n        divisor += 1\n    end\n    return factors\nend",
  "    \n    factor_list = []\n    # TODO: return prime factors of n\n    push!(factor_list,1)\n\
    \    push!(factor_list,2)\n    return factor_list\nend", "    factors = []\n \
    \   i = 2\n    while n > 1\n        while rem(n, i) == 0\n            push!(factors,\
    \ i)\n            n = div(n, i)\n        end\n        i += 1\n    end\n    return\
    \ factors\nend", "    factors = []\n    for i in primes(n)\n        while(n %\
    \ i == 0)\n            push!(factors, i)\n            n /= i\n        end\n  \
    \  end\n    return factors\nend", "    \n    factors = factor(n)\n    factors_unique\
    \ = unique(factors)\n    prime_factorization = []\n    \n    for factor in factors_unique\n\
    \        if isprime(factor)\n            num_appear = count(factors, factor)\n\
    \            for i in 1:num_appear\n                push!(prime_factorization,\
    \ factor)\n            end\n        end\n    end\n    prime_factorization\nend",
  "    assert(n>0, \"Input number must be greater than zero\")\n    factors = Int64[]\n\
    \    while n%2 == 0\n        push!(factors, 2)\n        n = n / 2\n    end\n \
    \   i = 3\n    while i*i <= n\n        while n%i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        end\n        i = i + 2\n    end\n    if n>2\n\
    \        push!(factors, n)\n    end\n    return factors\nend", "    factorList\
    \ = Int64[]\n    # your code\n    return factorList\nend", "    factors = []\n\
    \    x = 2\n    while n > 1\n        while (n % x == 0)\n            push!(factors,\
    \ x)\n            n = n / x\n        end\n        x += 1\n    end\n    return\
    \ factors\nend", "    lst=Int64[]\n    norig=n\n    for i in 2:norig\n       \
    \ if n%i==0\n            lst=append!(lst,i)\n            n=n/i\n            i=i-1\n\
    \        end\n    end\n    return lst\nend", "    \n    prime = 1\n    prime_factors\
    \ = []\n    while n >= 1 && prime <= n^0.5\n        prime += 1\n        while\
    \ rem(n, prime) == 0\n            push!(prime_factors, prime)\n            n /=\
    \ prime\n        end\n    end\n    if n > 1\n        push!(prime_factors, n)\n\
    \    end\n    return prime_factors\nend", "    f = []\n    i = 2\n    while n\
    \ > 1\n        while n % i == 0\n            push!(f, i)\n            n /= i\n\
    \        end\n        i += 1\n    end\n    return f\nend", "    factors = Int64[]\n\
    \    for i in 2:n\n        if n % i == 0\n            append!(factors, i)\n  \
    \          div = div(n, i)\n            return [factors; factorize(div)]\n   \
    \     end\n    end\n    return factors\nend", "    fac = Array(Int64, 0)\n   \
    \ while n % 2 == 0\n        push!(fac, 2)\n        n /= 2\n    end\n    i = 3\n\
    \    while i <= sqrt(n)\n        while n % i == 0\n            push!(fac, i)\n\
    \            n /= i\n        end\n        i += 2\n    end\n    if n > 2\n    \
    \    push!(fac, n)\n    end\n    return fac\nend", "    # Do your work here\n\
    end\n\"\"\" Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    Input number should be\
    \ equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n \
    \   >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\
    \"\"", "    \n    factors = Int64[]\n    current = n\n    for i in 2:Int64(floor(sqrt(n)))\
    \ \n        while current % i == 0 \n            push!(factors, i)\n         \
    \   current = current / i\n        end\n    end\n    if current > 1\n        push!(factors,\
    \ current)\n    end\n    return factors\nend", "    # YOUR CODE HERE\nend\n ",
  "    # your code here\n    return [2, 2, 2]\nend", "    factors = zeros(Int64, 0)\n\
    \    p = 1\n    while n != 1\n        if n % p == 0\n            n = n/p\n   \
    \         push!(factors, p)\n        else\n            p += 1\n        end\n \
    \   end\n    return factors\nend", "    num=n\n    v=Int64[]\n    if n==1\n  \
    \      v=push!(v,1)\n        return v\n    end\n    if n<1\n        println(\"\
    Invalid input\")\n        return v\n    end\n    while num%2==0\n        v=push!(v,2)\n\
    \        num=num/2\n    end\n    if num!=1\n        for i in 3:2:Int64(sqrt(num))\n\
    \            while num%i==0\n                v=push!(v,i)\n                num=num/i\n\
    \            end\n        end\n    end\n    if num!=1\n        v=push!(v,num)\n\
    \    end\n    return v\nend", "    factors = []\n    while n % 2 == 0\n      \
    \  push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i * i <= n\n\
    \        while n % i == 0\n            push!(factors, i)\n            n /= i\n\
    \        end\n        i += 2\n    end\n    if n > 2\n        push!(factors, n)\n\
    \    end\n    return factors\nend", "    factors = []\n    push!(factors, 2)\n\
    \    for i in 3:2:n\n        println(i)\n        if n % i == 0\n            push!(factors,\
    \ i)\n            println(factors)\n        end\n    end\n    return factors\n\
    end", "    l = []\n    if isprime(n) == true\n        append!(l, n)\n        return\
    \ l\n    end\n    i = 2\n    while i<=n\n        if isprime(i) == true\n     \
    \       if n%i == 0\n                append!(l, i)\n                n = n/i\n\
    \                i = 2\n            else\n                i = i+1\n          \
    \  end\n        else\n            i = i+1\n        end\n    end\n    return l\n\
    end", "    if isprime(n)\n        return [n]\n    end\n    prime_factors = []\n\
    \    while n % 2 == 0\n        push!(prime_factors, 2)\n        n = n / 2\n  \
    \  end\n    while n % 3 == 0\n        push!(prime_factors, 3)\n        n = n /\
    \ 3\n    end\n    i = 5\n    while i <= sqrt(n)\n        while n % i == 0\n  \
    \          push!(prime_factors, i)\n            n = n / i\n        end\n     \
    \   i += 2\n    end\n    push!(prime_factors, n)\n    return prime_factors\nend",
  "    factors = []\n    for candidate in 2:n \n        while n % candidate == 0 \n\
    \            push!(factors, candidate)\n            n /= candidate\n        end\n\
    \    end\n    return factors\nend", "    factors = []\n    i = 2\n    while n\
    \ > 1\n        while n % i == 0\n            push!(factors, i)\n            n\
    \ /= i\n        end\n        i += 1\n    end\n    return factors\nend", "    ##\
    \ See e.g. https://en.wikipedia.org/wiki/Prime_factor#Computation\n    f = Int64[]\n\
    \    while n % 2 == 0\n        push!(f, 2)\n        n = n \xF7 2\n    end\n  \
    \  # from this point on, all remaining factors are odd\n    d = 3\n    while n\
    \ > 1\n        while n % d == 0\n            push!(f, d)\n            n = n \xF7\
    \ d\n        end\n        d = d + 2\n    end\n    return f\nend", "    factors\
    \ = zeros(Int64, 0)\n    i = 2\n    while n != 1\n        if n % i == 0\n    \
    \        push!(factors, i)\n            n = n / i\n        else\n            i\
    \ += 1\n        end\n    end\n    return factors\nend", "    divisors = []\n \
    \   res = n\n    while res > 1\n        divisor = smallest_divisor(res)\n    \
    \    push!(divisors, divisor)\n        res = res \xF7 divisor\n    end\n    return\
    \ divisors\nend", "    factors = []\n    i = 2\n    # continue to take the smallest\
    \ factor out\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nfactorize(8)", "    if n == 1\n        return []\n    end\n    for i in 2:n\n\
    \        if n % i == 0\n            return [i] * factorize(n/i)\n        end\n\
    \    end\nend", "    # assuming input n is positive\n    factors = Int64[]\n \
    \   @inbounds i = 2\n    @inbounds while n > 1\n        if n % i == 0\n      \
    \      push!(factors, i)\n            n /= i\n        else\n            i += 1\n\
    \        end\n    end\n    return factors\nend", "    # Iterate over the numbers\n\
    \    prime_factors = []\n    i = 2\n    while n > 1\n        while n % i == 0\n\
    \            push!(prime_factors, i)\n            n /= i\n        end\n      \
    \  i += 1\n    end\n    prime_factors\nend", "    factors = []\n    for i in 2:n\n\
    \        if n%i == 0\n            n = n/i\n            push!(factors, i)\n   \
    \     end\n    end\n    return factors\nend", "    # your code here\nend\n@testset\
    \ \"factorize_test\" begin\n    @test factorize(8) == [2, 2, 2]\n    @test factorize(25)\
    \ == [5, 5]\n    @test factorize(70) == [2, 5, 7]\nend\n ", "    factors = factor(n)\n\
    \    res = []\n    for f in factors\n        push!(res, f)\n    end\n    return\
    \ res\nend", "    factors=[]\n    n_int=n\n    i=2\n    while n_int>1\n      \
    \  if n_int%i==0\n            push!(factors,i)\n            n_int=n_int/i\n  \
    \      else\n            i+=1\n        end\n    end\n    return factors\nend\n\
    \        ", "    if n == 1\n        return [1]\n    end\n    factors = []\n  \
    \  i = 2\n    while n > 1\n        if n % i == 0\n            factors = append!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend", "    factors = Vector{Int64}()\n    for i in\
    \ primes(n)\n        for j in 1:n\n            if n % i == 0\n               \
    \ push!(factors, i)\n                n = n / i\n            end\n        end\n\
    \    end\n    return factors\nend", "    divisible::Bool = true\n    divisor::Int64\
    \ = 2\n    factors::Vector{Int64} = []\n    while n > 1\n        if isprime(divisor)\n\
    \            while divisible\n                if n % divisor == 0\n          \
    \          push!(factors, divisor)\n                    n = div(n, divisor)\n\
    \                else\n                    divisible = false\n               \
    \ end\n            end\n        end\n        divisible = true\n        divisor\
    \ += 1\n    end\n    return factors\nend", "    factors = []\n    d = 2\n    while\
    \ d <= n\n        if mod(n, d) == 0\n            push!(factors, d)\n         \
    \   n = div(n, d)\n        else\n            d += 1\n        end\n    end\n  \
    \  return factors\nend", "    prime_factors = []\n    while n%2 == 0\n       \
    \ push!(prime_factors, 2)\n        n /= 2\n    end\n    for i in 3:Int64(sqrt(n))\n\
    \        while n%i == 0\n            push!(prime_factors, i)\n            n /=\
    \ i\n        end\n    end\n    if n > 2\n        push!(prime_factors, n)\n   \
    \ end\n    return prime_factors\nend\nfactorize(70)", "    # final list of factors\n\
    \    factors = Int64[]\n    # current number\n    cn = n\n    while true\n   \
    \     # find smallest factor of the current number\n        sf = smallest_factor(cn)\n\
    \        # if no factor found, break\n        if sf == 0\n            break\n\
    \        end\n        # append found factor to the list\n        push!(factors,\
    \ sf)\n        # continue with the quotient\n        cn = cn / sf\n    end\n \
    \   return factors\nend", "    factor_list = []\n    # find prime factors of n\
    \ in the loop below\n    i = 2\n    while n > 1 \n        while n % i == 0\n \
    \           n = n / i\n            push!(factor_list, i)\n        end\n      \
    \  i += 1\n    end\n    return factor_list\nend", "    if n == 1\n        return\
    \ Int64[]\n    end\n    if n < 2\n        error(\"Input n is not positive integer\"\
    )\n    end\n    factors = Int64[]\n    current = n\n    # if current is not 1\n\
    \    while current != 1\n        for d in 2:current\n            # check if d\
    \ divides current\n            if d * d > current \n                push!(factors,\
    \ current)\n                current = 1\n                break\n            end\n\
    \            if current % d == 0\n                push!(factors, d)\n        \
    \        current = current / d\n                break\n            end\n     \
    \   end\n    end\n    return factors\nend", "    factors = Int64[]\n    for i\
    \ in primes(n)\n        if n % i == 0\n            push!(factors, i)\n       \
    \     n = n / i\n        end\n    end\n    return factors\nend", "    factors\
    \ = Int64[]\n    while n % 2 == 0\n        push!(factors, 2)\n        n /= 2\n\
    \    end\n    i = 3\n    while i <= sqrt(n)\n        while n % i == 0\n      \
    \      push!(factors, i)\n            n /= i\n        end\n        i += 2\n  \
    \  end\n    if n > 2\n        push!(factors, n)\n    end\n    return factors\n\
    end", "    # n is a number to factorize\n    # Write your code here\n    factors\
    \ = Int64[]\n    for i = 2:n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend", "  \
    \  \n    factors = []", "    primes = sieve(n)\n    prime_factors = Int64[]\n\
    \    for prime in primes\n        while n % prime == 0\n            push!(prime_factors,\
    \ prime)\n            n /= prime\n        end\n    end\n    prime_factors\nend",
  "    # PUT YOUR CODE HERE\n    # We factorize n with trial division\n    factors\
    \ = [i for i in 2:round(Int64,sqrt(n)) if isprime(i) && mod(n,i)==0]\n    # Now,\
    \ we consider the case when n is a prime number\n    if isempty(factors)\n   \
    \     return [n]\n    else\n        return map(x->Int64(div(n,x)), factors)\n\
    \    end\nend", "    factors = Vector{Int64}()\n    remainder = n\n    while remainder\
    \ > 1\n        factor = factor(remainder)\n        push!(factors, factor)\n  \
    \      remainder = remainder / factor\n    end\n    return factors\nend", "  \
    \  factors = Int64[]\n    i = 2\n    while n > 1\n        while n % i == 0\n \
    \           push!(factors, i)\n            n /= i\n        end\n        i += 1\n\
    \    end\n    return factors\nend", "    factors = []\n    counter = 2\n    while\
    \ counter*counter <= n\n        while n % counter == 0\n            push!(factors,\
    \ counter)\n            n /= counter\n        end\n        counter += 1\n    end\n\
    \    if n > 1\n        push!(factors, n)\n    end\n    return factors\nend", " \
    \   factors = []\n    f = 2\n    while n > 1\n        if n % f == 0\n        \
    \    push!(factors, f)\n            n = n/f\n        else\n            f += 1\n\
    \        end\n    end\n    return factors\nend", "    prime_factors = []\n   \
    \ root_n = sqrt(n)\n    while n%2 == 0\n        push!(prime_factors, 2)\n    \
    \    n = n/2\n    end\n    i = 3\n    while i < root_n + 1\n        while n%i\
    \ == 0\n            push!(prime_factors, i)\n            n = n/i\n        end\n\
    \        i += 2\n    end\n    if n > 2\n        push!(prime_factors, n)\n    end\n\
    \    return prime_factors\nend", "    # YOUR CODE HERE\n    prime_factors = []\n\
    \    for i = 2:n\n        if isprime(i) && n % i == 0\n            push!(prime_factors,\
    \ i)\n            n = n/i\n            i = i - 1\n        end\n    end\n    return\
    \ prime_factors\nend", "    isprime(x) = !haskey(primes, x) && isprime(x)\n  \
    \  if !isprime(n)\n        return vcat(factorize(primes[n]), factorize(div(n,\
    \ primes[n])))\n    else\n        return [n]\n    end\nend", "    factors = []\n\
    \    factor = 2\n    while n > 1\n        while n % factor == 0\n            push!(factors,\
    \ factor)\n            n /= factor\n        end\n        factor += 1\n    end\n\
    \    return factors\nend", "    if n == 1\n        return Vector{Int64}([])\n\
    \    end\n    factors = Vector{Int64}([])\n    for i in 2:n\n        if isprime(i)\
    \ && n % i == 0\n            count = 0\n            while n % i == 0\n       \
    \         n = div(n, i)\n                count += 1\n            end\n       \
    \     push!(factors, i * count)\n        end\n    end\n    return factors\nend",
  "    result = Vector{Int64}()\n    prime_factors = primes(n)\n    while n != 1\n\
    \        for p in prime_factors\n            if n % p == 0\n                result\
    \ = push!(result, p)\n                n = n / p\n                continue\n  \
    \          end\n        end\n    end\n    return result\nend", "    result = Int64[]\n\
    \    while n % 2 == 0\n        push!(result, 2)\n        n /= 2\n    end\n   \
    \ i = 3\n    while i * i <= n\n        while n % i == 0\n            push!(result,\
    \ i)\n            n /= i\n        end\n        i += 2\n    end\n    if n > 2\n\
    \        push!(result, n)\n    end\n    return result\nend", "    array = []\n\
    \    for i in 2:n\n        while n % i == 0\n            push!(array, i)\n   \
    \         n = n/i\n        end\n    end\n    return array\nend", "    p = Int64[]\
    \ # list of prime factors\n    c = n # current value that is being factorized\n\
    \    for i in 2:n # for each integer\n        if c%i == 0 # if c is divisible\
    \ by i\n            push!(p, i) # add i to list\n            c = c/i # divide\
    \ c by i\n        end\n    end\n    return p\nend", "    fac = Int64[]\n    while\
    \ n>1\n        for i in 2:n\n            if n%i==0\n                push!(fac,i)\n\
    \                n = n/i\n                break\n            end\n        end\n\
    \    end\n    return fac\nend", "    res = Int64[]\n    i = 2\n    while n !=\
    \ 1\n        while n % i == 0\n            push!(res, i)\n            n /= i\n\
    \        end\n        i += 1\n    end\n    return res\nend", "    factors=[]\n\
    \    i=2\n    while n>1\n        while n%i==0\n            push!(factors,i)\n\
    \            n=n/i\n        end\n        i+=1\n    end\n    return factors\nend",
  "    if n == 1\n        return []\n    end\n    for div in primes(n)\n        if\
    \ n % div == 0\n            return [div] * divisor_power(n, div) * factorize(n\
    \ \xF7 div^divisor_power(n, div))\n        end\n    end\nend\n ", "    # Initialize\
    \ empty vector to hold factors.\n    factors = Int64[]", "    factors = Vector{Int64}()\n\
    \    #factors = []\n    while n % 2 == 0\n        n = n/2\n        push!(factors,\
    \ 2)\n    end\n    while n % 3 == 0\n        n = n/3\n        push!(factors, 3)\n\
    \    end\n    i = 5\n    while i <= n\n        while n % i == 0\n            n\
    \ = n/i\n            push!(factors, i)\n        end\n        i += 2\n    end\n\
    \    return factors\nend\nfactorize(70)", "    # your code here\nend", "    \n\
    end", "    factors = []\n    while n % 2 == 0\n        push!(factors, 2)\n   \
    \     n /= 2\n    end\n    p = 3\n    while n != 1\n        while n % p == 0\n\
    \            push!(factors, p)\n            n /= p\n        end\n        p +=\
    \ 2\n    end\n    return factors\nend", "    result = Int64[]\n    while n % 2\
    \ == 0\n        push!(result, 2)\n        n /= 2\n    end\n    while n % 3 ==\
    \ 0\n        push!(result, 3)\n        n /= 3\n    end\n    while n % 5 == 0\n\
    \        push!(result, 5)\n        n /= 5\n    end\n    # At this point, n > 3\
    \ and not divisible by 2, 3, 5\n    # We can start with the next \"stop\" number\
    \ 7\n    # (7, 11, 13, 17, ...), since the loop only \"traps\" for numbers that\
    \ are\n    # divisible by 2, 3, 5, we are sure that at some point we will find\
    \ out\n    # that number is equal to 1 and we can stop the algorithm\n    stop\
    \ = 7\n    while n > 1\n        while n % stop == 0\n            push!(result,\
    \ stop)\n            n /= stop\n        end\n        stop += 4\n        while\
    \ n % stop == 0\n            push!(result, stop)\n            n /= stop\n    \
    \    end\n        stop += 2\n        while n % stop == 0\n            push!(result,\
    \ stop)\n            n /= stop\n        end\n        stop += 4\n    end\n    return\
    \ result\nend\n```", "    factors = factorize(n, primes(n))\n    return factors[findall(factors\
    \ .!= 0)]\nend", "    # your code\nend\n\"\"\" Return list of prime factors of\
    \ given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \"\"\"", "    primes = primesbelow(sqrt(n))\n\
    \    factors = []\n    for i in primes\n        while n % i == 0\n           \
    \ push!(factors, i)\n            n = n / i\n        end\n    end\n    return factors\n\
    end", "    factors = []\n    while n > 1\n        prime = primes[1]\n        while\
    \ n % prime != 0\n            prime = nextprime(prime)\n        end\n        push!(factors,\
    \ prime)\n        n = n // prime\n    end\n    return factors\nend", "    primes\
    \ = factor(n)\n    r = zeros(Int64, length(primes))\n    for i = 1:length(primes)\n\
    \        r[i] = count(primes .== primes[i])\n    end\n    return r\nend", "  \
    \  facs = []\n    divisor = 2\n    while n > 1\n        if n % divisor == 0\n\
    \            push!(facs, divisor)\n            n = n / divisor\n        else\n\
    \            divisor += 1\n        end\n    end\n    return facs\nend", "    #\
    \ if n is prime, n itself is the only prime factor\n    if isprime(n)\n      \
    \  return [n]\n    end\n    # find the smallest factor:\n    factor = 2\n    while\
    \ !isprime(n)\n        if n % factor == 0\n            return [factor] + factorize(n\
    \ \xF7 factor)\n        end\n        factor += 1\n    end\nend", "    f = []\n\
    \    for i = 2:n\n        if n % i == 0\n            push!(f, i)\n           \
    \ n = n / i\n            i = i - 1\n        end\n    end\n    return f\nend",
  "    factors = []\n    i = 2\n    while n > 1\n        while n % i == 0\n      \
    \      push!(factors, i)\n            n /= i\n        end\n        i += 1\n  \
    \  end\n    return factors\nend", "    # for n=p1^a1*p2^a2*...*pn^an output is\
    \ vector [p1,p1,...,p1,p2,p2,...,p2,...,pn,pn,...,pn]\n    # with a1,a2,...,an\
    \ copies of prime factors\n    primes = primes_list(n)\n    res = Int64[]\n  \
    \  for p in primes\n        while mod(n,p)==0\n            push!(res,p)\n    \
    \        n = div(n,p)\n        end\n    end\n    return res\nend", "    # your\
    \ code here\nend", "    prime_factors = Int64[] # \u043A\u0430\u043A \u043E\u0431\
    \u044A\u044F\u0432\u0438\u0442\u044C \u043F\u0443\u0441\u0442\u043E\u0439 \u043C\
    \u0430\u0441\u0441\u0438\u0432, \u0438\u0437\u043D\u0430\u0447\u0430\u043B\u044C\
    \u043D\u043E \u0438\u0437\u0432\u0435\u0441\u0442\u043D\u043E\u0439 \u0434\u043B\
    \u0438\u043D\u044B? \n    i = 2\n    while n > 1\n        if n % i == 0\n    \
    \        push!(prime_factors, i)\n            n = n / i\n        else\n      \
    \      i += 1\n        end\n    end\n    return prime_factors\nend", "    if n\
    \ < 0\n        n = -n\n    end\n    P = primes(n)\n    @assert n > 1 \"The number\
    \ must be greater than 1.\"\n    @assert n == 1 || !(n % 2 == 0) \"The number\
    \ must be odd.\"\n    F = []\n    while n != 1\n        for p in P\n         \
    \   if n % p == 0\n                push!(F, p)\n                n = n / p\n  \
    \              break\n            end\n        end\n    end\n    return F\nend\n\
    factorize(70)", "    factors = []\n    factor = 2\n    while n > 1\n        if\
    \ n % factor == 0\n            push!(factors, factor)\n            n = n / factor\n\
    \        else\n            factor += 1\n        end\n    end\n    return factors\n\
    end", "    factors = Int64[]\n    i = 2\n    while n != 1\n        while n % i\
    \ == 0\n            push!(factors, i)\n            n = n / i\n        end\n  \
    \      i += 1\n    end\n    return factors\nend", "    factors = []\n    p = 2\n\
    \    while n != 1\n        if n % p == 0\n            push!(factors, p)\n    \
    \        n = n / p\n        else\n            p += 1\n        end\n    end\n \
    \   return factors\nend", "    sq = Int64(sqrt(n))\n    a = collect(2:sq)\n  \
    \  b = collect(sq+1:n)\n    res = filter(x -> isdiv(n,x), a)\n    for i in b\n\
    \        if isdiv(n,i)\n            push!(res,i)\n        end\n    end\n    res\n\
    end", "    if n < 2\n        return [n]\n    end\n    prime_factors = []\n   \
    \ for i in 2:n\n        if isprime(i)\n            for j in 1:floor(log(n)/log(i))\n\
    \                if isprime(n)\n                    push!(prime_factors, n)\n\
    \                    return prime_factors\n                end\n             \
    \   if isdiv(n, i)\n                    push!(prime_factors, i)\n            \
    \        n = n/i\n                end\n            end\n        end\n    end\n\
    end", "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997]\n    factorized = Vector{Int64}()\n    for\
    \ p in primes\n        while n % p == 0\n            push!(factorized, p)\n  \
    \          n = n / p\n        end\n    end\n    return factorized\nend", "   \
    \ factors = []\n    curr = 2\n    while n > 1\n        if n % curr == 0\n    \
    \        push!(factors, curr)\n            n = n / curr\n        else\n      \
    \      curr += 1\n        end\n    end\n    return factors\nend\n \n@testset \"\
    Example cases from instructions\" begin\n    @test factorize(8) == [2, 2, 2]\n\
    \    @test factorize(25) == [5, 5]\n    @test factorize(70) == [2, 5, 7]\nend",
  "    # <your code here>\nend;\n@testset \"factorize tests\" begin\n    @test factorize(8)\
    \ == [2, 2, 2]\n    @test factorize(25) == [5, 5]\n    @test factorize(70) ==\
    \ [2, 5, 7]\nend;\n ", "    is_prime(x) = x > 1 && all(rem(x, i) != 0 for i =\
    \ 2:floor(Int, sqrt(x)))\n    if is_prime(n)\n        return [n]\n    else\n \
    \       factorize(n/primefactors(n)[1])\n    end\nend", "    factors = []\n  \
    \  divisor = 2\n    while n>1\n        while n%divisor == 0\n            push!(factors,\
    \ divisor)\n            n = n/divisor\n        end\n        divisor = divisor\
    \ + 1\n    end\n    return factors\nend\nfactorize(8)", "   prime_factors = []\n\
    \   for i in primes(Int64(n))\n       while n % i == 0\n           push!(prime_factors,\
    \ i)\n           n = n / i\n       end\n   end\n   return prime_factors\nend",
  "    # Your code here\n    # To get random answer: return rand(1:n, rand(1:10))\n\
    \    # Remember that every factor should appear number of times corresponding\
    \ to how many times it appears in factorization\n    return rand(1:n, rand(1:10))\n\
    end", "    \"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\n    prime_factors = []\n    # iterate over each numbers from\
    \ 2 to sqrt(n)\n    for i in 2:sqrt(n)\n        # if the current number divides\
    \ n\n        while n % i == 0\n            # store the number\n            push!(prime_factors,\
    \ i)\n            # divide n by the number\n            n = n / i\n        end\n\
    \    end\n    # if n is greater than 1\n    if n > 1\n        # then it is also\
    \ a prime factor\n        push!(prime_factors, n)\n    end\n    # return all prime\
    \ factors\n    return prime_factors\nend", "    counter = 0\n    result = [1]\n\
    \    for i in 2:n\n        if n % i == 0\n            counter += 1\n         \
    \   push!(result, i)\n        end\n    end\n    return sort(result)\nend\nfactorize(70)",
  "    if n == 0\n        return []\n    end\n    factors = Array{Int64}(0)\n    divisor\
    \ = 2\n    while divisor <= n\n        if n % divisor == 0\n            push!(factors,\
    \ divisor)\n            n = n / divisor\n        else\n            divisor +=\
    \ 1\n        end\n    end\n    return factors\nend", "    factors = []\n    for\
    \ i in 2:n\n        counter = 0\n        while n % i == 0\n            n = n/i\n\
    \            counter += 1\n        end\n        if counter != 0\n            push!(factors,\
    \ [i for j in 1:counter])\n        end\n    end\n    return factors\nend", " \
    \   factors = []\n    while n > 1\n        for i = 2:n\n            if n % i ==\
    \ 0\n                push!(factors, i)\n                n = n/i\n            \
    \    break\n            end\n        end\n    end\n    return factors\nend", " \
    \   factors=[]\n    p=2\n    while p*p<=n\n        while n%p==0\n            push!(factors,p)\n\
    \            n/=p\n        end\n        p+=1\n    end\n    if n>1\n        push!(factors,n)\n\
    \    end\n    return factors\nend", "    factors = []\n    # iterate over all\
    \ potential prime factors\n    while n > 1\n        factor = nextprime(n)\n  \
    \      while n % factor == 0\n            n /= factor\n            push!(factors,\
    \ factor)\n        end\n    end\n    return factors\nend", "    primefactors =\
    \ []\n    i = 2\n    while n > 1\n        while n % i == 0\n            push!(primefactors,\
    \ i)\n            n = n / i\n        end\n        i += 1\n    end\n    return\
    \ primefactors\nend", "    number = n\n    divider = 2\n    factors = []\n   \
    \ # While loop will end when n is 1\n    while n != 1 \n        # if n is divisible\
    \ by divider then n is divided by divider and the value is pushed to factors vector.\n\
    \        # The loop restarts with new n value, which is equal to the old n divided\
    \ by divider.\n        if n % divider == 0\n            push!(factors, divider)\n\
    \            n = divider(n)\n        # Else the value of divider is increased\
    \ by 1\n        else\n            divider += 1\n        end\n    end\n    return\
    \ factors\nend", "    factors = []\n    current = 2\n    while n > 1\n       \
    \ if rem(n, current) == 0\n            push!(factors, current)\n            n\
    \ = div(n, current)\n        else\n            current += 1\n        end\n   \
    \ end\n    return factors\nend", "    factors = Int64[]\n    i = 2\n    while\
    \ n != 1 && i*i <= n\n        if mod(n, i) == 0\n            push!(factors, i)\n\
    \            n = div(n, i)\n        else\n            i += 1\n        end\n  \
    \  end\n    push!(factors, n)\n    return factors\nend", "    factors = []\n \
    \   # TODO\n    return factors\nend", "    factors = Int64[]\n    n_orig = n\n\
    \    if n == 1\n        return [1]\n    end\n    for i in 2:floor(sqrt(n))\n \
    \       num_factors = 0\n        while n % i == 0\n            n = n/i\n     \
    \       push!(factors, i)\n        end\n    end\n    if n > 1\n        push!(factors,\
    \ n)\n    end\n    prod = prod(factors)\n    if prod != n_orig\n        println(\"\
    Factorization failed: \", n, \" = \", factors)\n    end\n    return factors\n\
    end", "    prime_factors = []\n    for divisor = 2:n\xF72\n        if isprime(divisor)\n\
    \            if n % divisor == 0\n                push!(prime_factors, divisor)\n\
    \                n = n \xF7 divisor\n            end\n        end\n    end\n \
    \   prime_factors\nend", "    factors = []\n    for i = 2:n-1\n        if n %\
    \ i == 0\n            factorize(n / i)\n            push!(factors, i)\n      \
    \  end\n    end\n    sort(factors)\nend", "    # your code here\nend\n ", "  \
    \  i = 2\n    res = Vector{Int64}()\n    while n>1\n        if n%i == 0\n    \
    \        push!(res, i)\n            n /= i\n        else\n            i += 1\n\
    \        end\n    end\n    return res\nend", "    prime_factors = Int64[]\n  \
    \  for i in primes(n)\n        if n % i == 0\n            push!(prime_factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return prime_factors\n\
    end", "  factors = []\n  k = 2\n  while n > 1\n      while n % k == 0\n      \
    \    push!(factors, k)\n          n /= k\n      end\n      k += 1\n  end\n  return\
    \ factors\nend", "    # implement your code here\n    # don't forget to remove\
    \ `pass`\n    pass\nend\nfactorize(70)", "    factors = []\n    if n != 1\n  \
    \      for i in 2:n #\u0437\u0430\u043F\u043E\u043B\u043D\u044F\u0435\u043C \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0444\u0430\u043A\u0442\u043E\u0440\u0430\u043C\
    \u0438\n            while n % i == 0\n                push!(factors, i)\n    \
    \            n /= i\n            end\n        end\n    end\n    return factors\n\
    end", "    result = []\n    while n > 1\n        k = 2\n        while true\n \
    \           if n % k == 0\n                push!(result, k)\n                n\
    \ = n/k\n                break\n            end\n            k += 1\n        end\n\
    \    end\n    return result\nend", "    prime_factors = []\n    while n > 1\n\
    \        i = 2\n        while n % i != 0\n            i += 1\n        end\n  \
    \      push!(prime_factors, i)\n        n /= i\n    end\n    prime_factors\nend\n\
    # TEST\n@testset \"testing factorize\" begin\n    @test factorize(8) == [2, 2,\
    \ 2]\n    @test factorize(25) == [5, 5]\n    @test factorize(70) == [2, 5, 7]\n\
    end", "    \n    factors = []\n    i = 2\n    while n > 1\n        while n % i\
    \ == 0\n            push!(factors, i)\n            n /= i\n        end\n     \
    \   i += 1\n    end\n    return factors\nend", "    prime_factors = []\n    for\
    \ i in 2:n\n        while n % i == 0\n            n /= i\n            push!(prime_factors,\
    \ i)\n        end\n    end\n    return prime_factors\nend", "    primeFactors\
    \ = []\n    d = 2\n    while n > 1\n        while n % d == 0\n            push!(primeFactors,\
    \ d)\n            n /= d\n        end\n        d += 1\n    end\n    return primeFactors\n\
    end", "    #print(n)\n    for i in 2:n-1\n        if mod(n,i) == 0\n         \
    \   return [i]*(n \xF7 i)\n        end\n    end\nend", "  \n  factor_list = Int64[]\n\
    \  while n % 2 == 0\n        push!(factor_list, 2)\n        n = n / 2\n    end\n\
    \    for i in 3:sqrt(n)\n        while n % i == 0\n            push!(factor_list,\
    \ i)\n            n = n / i\n        end\n    end\n    if n > 2\n        push!(factor_list,\
    \ n)\n    end\n  \n  return factor_list\nend", "    factors = []\n    counter\
    \ = 2\n    while n != 1\n        while n % counter == 0\n            push!(factors,\
    \ counter)\n            n = n / counter\n        end\n        counter += 1\n \
    \   end\n    return factors\nend", "    f = Vector{Int64}()\n    if n == 1\n \
    \       return f\n    end\n    for i in primes(2, n)\n        if rem(n, i) ==\
    \ 0\n            push!(f, i)\n            return vcat(f, factorize(div(n, i)))\n\
    \        end\n    end\nend", "  num = n\n  factors = []\n  while num > 1\n   \
    \ factor = find_factor(num)\n    push!(factors, factor)\n    num = num / factor\n\
    \  end\n  return factors\nend", "    factors = []\n    if n == 1 \n        factors\
    \ = 1\n    else \n        prime = 2\n        while n > 1\n            if n % prime\
    \ == 0\n                push!(factors, prime)\n                n = n / prime\n\
    \            else \n                prime += 1\n            end\n        end\n\
    \    end\n    return factors\nend", "    factor_list = []\n    prime_factors =\
    \ primes(n)\n    while n != 1\n        for i in prime_factors\n            if\
    \ n % i == 0\n                factor_list = push!(factor_list, i)\n          \
    \      n = div(n, i)\n            end\n        end\n    end\n    return factor_list\n\
    end", "   if n == 1\n        return [1]\n    end\n    factors = Int64[]\n    for\
    \ i = 2:n \n        if n % i == 0\n            push!(factors,i)\n            return\
    \ vcat(factorize(i),factorize(div(n,i)))\n        end\n    end\nend", "    list\
    \ = Int64[]\n    factor = 2\n    while n > 1\n        while n % factor == 0\n\
    \            push!(list, factor)\n            n /= factor\n        end\n     \
    \   factor += 1\n    end\n    return list\nend", "    factors = zeros(1,10)\n\
    \    k = 1\n    while n % 2 == 0\n        factors[k] = 2\n        k = k + 1\n\
    \        n = n / 2\n    end\n    # n is odd at this point\n    # so we can skip\
    \ one element (i = i + 2)\n    for i = 3:2:sqrt(n)\n        if n % i == 0\n  \
    \          factors[k] = i\n            k = k + 1\n            n = n / i\n    \
    \    end\n    end\n    # special case if n is a prime number greater than 2\n\
    \    if n > 2\n        factors[k] = n\n        k = k + 1\n    end\n    return\
    \ factors[1:k-1]\nend", "    factors = []\n    for d in prime_divisors(n)\n  \
    \      for m in 1:mult_of_factor(n, d)\n            push!(factors, d)\n      \
    \  end\n    end\n    return factors\nend", "    prime_factors = []\n    counter\
    \ = 2\n    while counter <= n\n        while n % counter == 0\n            push!(prime_factors,\
    \ counter)\n            n /= counter\n        end\n        counter += 1\n    end\n\
    \    return prime_factors\nend", "    factors = Int64[]\n    while n > 1\n   \
    \     if isprime(n)\n            push!(factors, n)\n            break\n      \
    \  end\n        push!(factors, nextprime(n))\n        n = div(n, factors[end])\n\
    \    end\n    return factors\nend", "    ...\nend\n \n    \n\"\"\"Given a list\
    \ of numbers, return a new list with first prime factor of each number.\n    >>>\
    \ findFirstPrimes([8, 25, 70])\n    [2, 5, 7]\n    \"\"\"", "    r = []\n    divisor\
    \ = 2\n    while divisor <= n\n        k = 0\n        while n % divisor == 0\n\
    \            n = n/divisor\n            k += 1\n        end\n        push!(r,\
    \ divisor^k)\n        divisor += 1\n    end\n    return r\nend", "    factors\
    \ = Int64[]\n    i = 2\n    while n > 1\n        while n % i == 0\n          \
    \  push!(factors, i)\n            n /= i\n        end\n        i += 1\n    end\n\
    \    return factors\nend", "    x = n \n    A = Array{Int64}(0)\n    for i in\
    \ 2:floor(Int64, sqrt(x))\n        while (x % i == 0) \n            push!(A, i)\n\
    \            x = x \xF7 i\n        end\n    end\n    push!(A, x)\n    A\nend",
  "  factors = []\n  divisor = 2\n  while n > 1\n    if n % divisor == 0\n      push!(factors,\
    \ divisor)\n      n = n / divisor\n    else\n      divisor += 1\n    end\n  end\n\
    \  return factors\nend\nprintln(factorize(8))\nprintln(factorize(25))\nprintln(factorize(70))",
  "    if n == 1\n        return [1]\n    end\n    i = 2\n    res = Int64[]\n    while\
    \ i <= n\n        if n % i == 0\n            push!(res, i)\n            n = n\
    \ / i\n        else\n            i += 1\n        end\n    end\n    return res\n\
    end", "    res = Vector{Int64}()\n    a = 1\n    while a <= n \n        if n %\
    \ a == 0\n            push!(res, a)\n            n = n / a\n        else\n   \
    \         a += 1\n        end\n    end\n    return res\nend", "    factors = []\n\
    \    while n > 1\n        factor = get_next_prime_factor(n)\n        factors =\
    \ append!(factors, factor)\n        n = n / factor\n    end\n    return factors\n\
    end", "    prime_factors = []\n    prime_factors_index = []\n    for f in factor(n)\n\
    \        for i = 1:length(prime_factors)\n            if f == prime_factors[i]\n\
    \                prime_factors_index[i] += 1\n                break\n        \
    \    end\n        end\n        push!(prime_factors, f)\n        push!(prime_factors_index,\
    \ 1)\n    end\n    prime_factors = reduce(*, map(p -> p^prime_factors_index[i],\
    \ prime_factors))\n    return prime_factors\nend\nfactorize(1)", "    if n < 2\n\
    \        return Int64[]\n    end\n    current_factor = 2\n    factors = []\n \
    \   while n > 1\n        while n % current_factor == 0\n            push!(factors,\
    \ current_factor)\n            n /= current_factor\n        end\n        current_factor\
    \ += 1\n    end\n    return factors\nend", "    result = []\n    factor = 2\n\
    \    while n > 1\n        power = 0\n        while n % factor == 0\n         \
    \   power += 1\n            n /= factor\n        end\n        if power > 0\n \
    \           push!(result, factor)\n        end\n        factor += 1\n    end\n\
    \    return result\nend", "    result = []\n    i = 2\n    while n > 1\n     \
    \   count = 0\n        while isprime(i) && n % i == 0\n            count += 1\n\
    \            n /= i\n        end\n        push!(result, fill(i, count))\n    \
    \    i += 1\n    end\n    return result\nend", "    if n<=1\n        return([])\n\
    \    end\n    fact=[]\n    i=2\n    while i<=n\n        while n%i==0\n       \
    \     push!(fact,i)\n            n/=i\n        end\n        i+=1\n    end\n  \
    \  return(fact)\nend", "    # Calculate exponent for 2\n    n, exp2 = divrem(n,\
    \ 2)\n    # Calculate exponent for 5\n    n, exp5 = divrem(n, 5)\n    # Check\
    \ if we're done\n    if n == 1\n        return vcat(repeat([2], exp2), repeat([5],\
    \ exp5))\n    end\n    # Calculate exponent for 3\n    n, exp3 = divrem(n, 3)\n\
    \    # Check if we're done\n    if n == 1\n        return vcat(repeat([2], exp2),\
    \ repeat([3], exp3), repeat([5], exp5))\n    end\n    # Check if we're done\n\
    \    if n == 2 || n == 3 || n == 5\n        return vcat(repeat([2], exp2), repeat([3],\
    \ exp3), repeat([5], exp5), [n])\n    end\n    # We are not done\n    divisor\
    \ = 6\n    while true\n        if is_prime(n)\n            return vcat(repeat([2],\
    \ exp2), repeat([3], exp3), repeat([5], exp5), [n])\n        end\n        next_divisor\
    \ = next_prime(divisor)\n        n, is_factor = divrem(n, divisor)\n        if\
    \ is_factor == 0\n            divisor = next_divisor\n        else\n         \
    \   return vcat(repeat([2], exp2), repeat([3], exp3), repeat([5], exp5), repeat([divisor],\
    \ is_factor), factorize(n))\n        end\n    end\nend", "  n_copy = n\n  factors\
    \ = Int64[]\n  while n_copy > 1\n    # find the first factor \n    factor = first_factor(n_copy)\n\
    \    push!(factors, factor)\n    n_copy = n_copy / factor\n  end\n  return factors\n\
    end", "    factors = []\n    divisor = 2\n    while divisor <= sqrt(n)\n     \
    \   if n % divisor == 0\n            push!(factors, divisor)\n            n =\
    \ n/divisor\n        else\n            divisor += 1\n        end\n    end\n  \
    \  return vcat(factors, n)\nend", "    factors=Int64[]\n    while n>1\n      \
    \  for i=2:n\n            if n%i==0\n                push!(factors,i)\n      \
    \          n/=i\n                break\n            end\n        end\n    end\n\
    \    return factors\nend\nfactorize(8)\nfactorize(25)\nfactorize(70)", "    factors\
    \ = Int64[]\n    i = 2\n    while n != 1\n        #keep dividing by i until it\
    \ doesn't go evenly\n        while n % i == 0\n            push!(factors, i)\n\
    \            n = n / i\n        end\n        i += 1\n    end\n    return factors\n\
    end", "    factors = []\n    i = 2\n    while n != 1\n        if n % i == 0\n\
    \            append!(factors, i)\n            n = n/i\n        else\n        \
    \    i += 1\n        end\n    end\n    return factors\nend\nfactors = factorize(num)\n\
    \"\"\"\n    Multiply all factors from the list and return the product\n    >>>\
    \ mul([1, 2, 3])\n    6\n    >>> mul([4, 4, 4])\n    64\n    >>> mul([2, 2, 4])\n\
    \    16\n    \"\"\"", "    factors = []\n    i = 2\n    while i <= n\n       \
    \ if n % i == 0\n            factors = [factors..., i]\n            n = n / i\n\
    \        else\n            i += 1\n        end\n    end\n    return factors\n\
    end\n \n \n \n \n\"\"\" Compute the number of distinct ways to change amount of\
    \ coins with given denominations.\n    >>> knapsack(5, [1, 2, 3])\n    5\n   \
    \ >>> knapsack(100, [1, 2, 5, 10, 20, 50, 100])\n    73682\n    \"\"\"", "   \
    \ x = 2\n    result = Int64[]\n    while x <= n\n        # if x divides n, use\
    \ divmod \n        # to divide n by x & find remainder\n        # and if remainder\
    \ is zero, append x to the result list\n        # and set n = q, the quotient\n\
    \        if rem(n, x) == 0\n            result = append!(result, x)\n        \
    \    n = div(n, x)\n        else\n            x += 1\n        end\n    end\n \
    \   return result\nend", "    output = []\n    for i in 2:n\n        if n%i ==\
    \ 0\n            push!(output, i)\n            n = n/i\n            i = 1\n  \
    \      end\n    end\n    return output\nend", "    k=0\n    i=2\n    while n>1\n\
    \        if n%i==0\n            k=k+1\n            n=n/i\n        else\n     \
    \       i=i+1\n        end\n    end\n    return k\nend", "    factors = Int64[]\n\
    \    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end", "    # your code goes here\n    if n < 2\n        return []\n    end\n \
    \   factors = []\n    while n != 1\n        for prime in primes\n            if\
    \ n % prime == 0\n                push!(factors, prime)\n                n = n\
    \ / prime\n                break\n            end\n        end\n    end\n    return\
    \ factors\nend", "    result = []\n    while n % 2 == 0\n        n = n / 2\n \
    \       push!(result, 2)\n    end\n    for i in collect(3:2:floor(Int64, sqrt(n)))\n\
    \        while n % i == 0\n            n = n / i\n            push!(result, i)\n\
    \        end\n    end\n    if n > 2\n        push!(result, n)\n    end\n    return\
    \ result\nend", "    # If n <= 1, return nothing\n    # Else, if n is prime, return\
    \ it\n    # Else, recursively factorize the result of dividing n by primes until\
    \ n is prime\n    if n <= 1\n        return []\n    elseif isprime(n)\n      \
    \  return [n]\n    else\n        for p in primes(n)\n            return factorize(n\
    \ \xF7 p)\n        end\n    end\nend", "     factors = []\n    while n > 1\n \
    \       factor = smallest_factor(n)\n        push!(factors, factor)\n        n\
    \ = div(n, factor)\n    end\n    return factors\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
