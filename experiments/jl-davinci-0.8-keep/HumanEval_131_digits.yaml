name: HumanEval_131_digits
language: jl
prompt: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
  \    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n \
  \   digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\nfunction digits(n::Int64)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
  \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
  \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
  \t@test(candidate(2468) == 0)\nend\n"
completions: ["    a = 0\n    for i in 1:length(string(n))\n        if parse(Int64,\
    \ string(n)[i]) % 2 != 0\n            a *= parse(Int64, string(n)[i])\n      \
    \  end\n    end\n    a\nend", "    digits = 1\n    if n >= 10\n        while n\
    \ != 0\n            rem = n % 10\n            if rem % 2 != 0\n              \
    \  digits *= rem\n            end\n            n = n \xF7 10\n        end\n  \
    \  else\n        if n % 2 != 0\n            digits = n\n        end\n    end\n\
    \    return digits\nend", "    int_to_string = string(n)\n    count = 0\n    for\
    \ d in int_to_string\n        if (d % 2) != 0\n            count += 1\n      \
    \  end\n    end\n    return count\nend", "    digits = []\n    for i in collect(digits(n))\n\
    \        i == parse(Int64, i) ? push!(digits, i) : continue\n    end\n    sum(digits)\n\
    end", "   num_string = string(n)\n   product = 1\n   for digit in num_string\n\
    \       num = parse(Int64, digit)\n       if num % 2 != 0\n           product\
    \ *= num\n       end\n   end\n   return product\nend", "    n = abs(n) #absolute\
    \ value of n\n    prod = 1 #prod is the product of digits\n    while n > 0 #while\
    \ n is greater than 0\n        r = rem(n,10) #r is the remainder of n when divided\
    \ by 10\n        if rem(r,2) != 0 #if r is not divisible by 2, it is odd and gets\
    \ multiplied to prod\n            prod *= r\n        end\n        n = div(n,10)\
    \ #n gets divided by 10\n    end\n    return prod\nend", "    n_digits = map(x->x-48,\
    \ int2digits(n))\n    return prod(filter(x->x%2!=0, n_digits))\nend", "    arr\
    \ = [parse(Int64,i) for i in string(n)]\n    odd_arr = [arr[i] for i in 1:length(arr)\
    \ if isodd(arr[i])]\n    return prod(odd_arr)\nend", "    n == 0 && return 0\n\
    \    n%2 == 0 && return digits(n/10)\n    return n%10 * digits(n/10)\nend", " \
    \   if n < 10 && isodd(n)\n        return n\n    elseif n < 10 && !isodd(n)\n\
    \        return 0\n    else\n        d = floor(Int64, n/10)\n        return (n\
    \ % 10)*digits(d)\n    end\nend", "    if n <= 0\n        return 0\n    end\n\
    \    prod = 1\n    for d in digits(n)\n        if isodd(d)\n            prod *=\
    \ d\n        end\n    end\n    return prod\nend", "    if n == 0 return 0 end\n\
    \    s = n % 10\n    if s % 2 == 0 return digits(div(n, 10)) end\n    return s\
    \ * digits(div(n, 10))\nend\n ", "    r = 1\n    while n > 0\n        d = n %\
    \ 10\n        if d % 2 == 1\n            r *= d\n        end\n        n = n \xF7\
    \ 10\n    end\n    return r\nend", "    n * n * n\nend", "    return prod(n %\
    \ 10 % 2 == 1 ? n % 10 : 1 for n = div(n, 10))\nend", "    odd_prod = 1\n    while\
    \ n > 0\n        if (n % 10) % 2 != 0\n            odd_prod *= (n % 10)\n    \
    \    end\n        n = n \xF7 10\n    end\n    return odd_prod\nend", "    m =\
    \ 0\n    r = 1\n    while n > 0\n        m = n % 10\n        if m % 2 != 0\n \
    \           r = r * m\n        end\n        n = n / 10\n    end\n    return r\n\
    end", "    # your code\nend\n\"\"\"\n\"\"\"\n\"\"\"Given an array of non-negative\
    \ integers and a value sum, determine whether there is a subset of the array that\
    \ adds up to sum. Example:\n    For numbers = [1, 4, 45, 6, 10, 8] and sum = 22,\
    \ the output should be hasPairWithSum(numbers, sum) = true.\n    For numbers =\
    \ [1, -2, 3, 8] and sum = 6, the output should be hasPairWithSum(numbers, sum)\
    \ = false.\n    \"\"\"", "    prod = 1\n    while n != 0\n        r = n % 10\n\
    \        if r % 2 != 0\n            prod *= r\n        end\n        n = div(n,\
    \ 10)\n    end\n    return prod\nend", "    if n == 0\n        return 0\n    end\n\
    \    product = 1\n    while n != 0\n        r = rem(n, 10)\n        if r % 2 !=\
    \ 0\n            product *= r\n        end\n        n = div(n, 10)\n    end\n\
    \    return product\nend", "    pass\n    s = string(n)\n    total = 1\n    for\
    \ i in s\n        if parse(Int64, i) % 2 != 0\n            total *= parse(Int64,\
    \ i)\n        end\n    end\n    if total == 1\n        total = 0\n    end\n  \
    \  return total\nend", "    if n < 10\n        return n\n    end\n    if (n %\
    \ 10) % 2 == 0\n        return digits(n // 10)\n    else\n        return digits(n\
    \ // 10) * (n % 10)\n    end\nend", "    n = abs(n)\n    result = 1\n    for digit\
    \ in digits(n)\n        if digit % 2 != 0\n            result *= digit\n     \
    \   end\n    end\n    return result\nend", "    return n < 10 ? (n % 2 == 1 ?\
    \ n : 0) : digits(n % 10) * digits(n \xF7 10)\nend\ndigits(1) \ndigits(4)  \n\
    digits(235) ", "    prod = 1\n    while n > 0\n        if n % 2 == 1\n       \
    \     prod *= n % 10\n        end\n        n = floor(Int64, n / 10)\n    end\n\
    \    return prod\nend", "    if n < 10 && n > 0\n        return n\n    end\n \
    \   if n < 0\n        return digits(-n)\n    end\n    if n % 2 == 0\n        return\
    \ digits(n // 10)\n    end\n    return (n % 10) * digits(n // 10)\nend", "   \
    \ return 0\nend", "    # your code\nend\n\"\"\"Given a string s, return a string\
    \ of the same length with each character\n    duplicated 3 times.\n    For example:\n\
    \    string3(\"Hello\")  == \"HHHeeellllllooo\"\n    string3(\"hello\")  == \"\
    hhheeellllllooo\"\n    string3(\"World\")  == \"WWWooorrrrlllldddd\"\n    \"\"\
    \"", "    # you write this function!\n    return 0\nend", "    x = 1\n    for\
    \ i = 1:length(string(n))\n        if  parse(Int64, string(n)[i]) % 2 != 0 \n\
    \            x *= parse(Int64, string(n)[i])\n        end\n    end\n    return\
    \ x\nend", "    if n < 10\n        return n\n    else\n        digit = mod(n,\
    \ 10)\n        if digit % 2 == 1\n            return digit * digits(div(n, 10))\n\
    \        else\n            return digits(div(n, 10))\n        end\n    end\nend",
  "    if n < 10\n        return n\n    else\n        d, r = divrem(n, 10)\n     \
    \   if r % 2 == 0\n            return digits(d)\n        else\n            return\
    \ r * digits(d)\n        end\n    end\nend", "    digits = 0\n    while n > 0\n\
    \        if n % 2 == 1\n            digits += 1\n        end\n        n = div(n,\
    \ 10)\n    end\n    return digits\nend", "    # loop through all the digits of\
    \ n\n    # if the digit is odd, multiply it with the product (initialized to 1)\n\
    \    # return the product\nend\ndigits(1)\ndigits(4)\ndigits(235)\ndigits(23523525)\n\
    digits(235262537)\n \n \n \n\"\"\"Given a positive integer n, return the largest\
    \ integer that is\n    the product of two digits in n.\n    Return 0 if no two\
    \ digit product exists.\n    For example:\n    two_digits(1)  == 0\n    two_digits(4)\
    \  == 0\n    two_digits(235) == 15\n    two_digits(23523525) == 25\n    two_digits(235262537)\
    \ == 25\n    \"\"\"", "    n%2 == 0 ? n == 0 ? 0 : n*digits(n/10) : digits(n/10)\
    \ \nend\n \ndigits(235)", "    # YOUR CODE HERE\n    return 0\nend", "    product\
    \ = 1\n    while n > 0\n        temp = mod(n, 10)\n        if mod(temp, 2) !=\
    \ 0\n            product *= temp\n        end\n        n = div(n, 10)\n    end\n\
    \    return product\nend", "    if n == 0\n        return 0\n    end\n    if n%2\
    \ != 0\n        return n%10 * digits(div(n,10))\n    else\n        return digits(div(n,10))\n\
    \    end\nend", "    total = 1\n    while n != 0\n        digit = n % 10\n   \
    \     if digit % 2 != 0\n            total *= digit\n        end\n        n =\
    \ div(n, 10)\n    end\n    return total\nend", "    digits = []\n    while n >=\
    \ 10\n        push!(digits, n % 10)\n        n = div(n, 10)\n    end\n    push!(digits,\
    \ n)\n    @show digits\n    product = 1\n    for d in digits\n        if d % 2\
    \ == 1\n            product *= d\n        end\n    end\n    product\nend", " \
    \   num::Int64 = 1\n    while n != 0\n        if mod(n, 10) % 2 != 0\n       \
    \     num *= mod(n, 10)\n        end\n        n = div(n, 10)\n    end\n    return\
    \ num\nend", "    n_string = n |> tostring()\n    n_ints = n_string |> Int.(collect(n_string))\n\
    \    odd_ints = filter(x -> isodd(x), n_ints)\n    prod(odd_ints)\nend", "  \n\
    \    n = num_to_string(n)\n    product = 1\n    for i = 1:length(n)\n        if\
    \ isodd(parse(Int64, n[i]))\n            product *= parse(Int64, n[i])\n     \
    \   end\n    end\n    return product\nend", "    # your code here\n    val, sum\
    \ = 0, 0\n    while n > 0\n        if n % 2 != 0\n            sum += n % 10\n\
    \        end\n        n = n / 10\n    end\n    return sum\nend", "    res = 1\n\
    \    for i in 1:ceil(log10(n))\n        d = div(n, 10^(i-1)) % 10\n        if\
    \ d % 2 != 0\n            res *= d\n        end\n    end\n    return res\nend",
  "    product = 1\n    for c in string(n)\n        c == '0' && continue\n       \
    \ d = parse(Int64, c)\n        if d % 2 == 1\n            product *= d\n     \
    \   end\n    end\n    product\nend\n    \nprintln(digits(1))\nprintln(digits(4))\n\
    println(digits(235))\nprintln(digits(8))\nprintln(digits(0))\nprintln(digits(9))\n\
    println(digits(100))\nprintln(digits(10019))", "    total = 1\n    while n > 0\n\
    \        if n % 2 != 0\n            total *= n % 10\n        end\n        n =\
    \ div(n, 10)\n    end\n    return total\nend", "    # todo: please fill in your\
    \ code here\nend", "    n_string = string(n)\n    result = 1\n    for i in n_string\n\
    \        if parse(Int64, i) % 2 != 0\n            result *= parse(Int64, i)\n\
    \        end\n    end\n    return result\nend\ndigits(235)", "    if n < 10 return\
    \ n % 2 == 1 ? n : 0 end\n    if n % 2 == 0 return digits(n \xF7 10) end\n   \
    \ return n % 10 * digits(n \xF7 10)\nend", "    n .&gt;= 1 || error(\"n must be\
    \ positive\")\n    n &lt; 100000 || error(\"n is too large\")\n    digs = map(Int64,\
    \ digits(n))\n    isodd(digs) &amp;&amp; return prod(digs[isodd(digs)])\n    return\
    \ 0\nend\n</code>\nCan anyone help me with this?", "    \nend", "    return prod(odddigits(n))\n\
    end", "  total = 1\n  while n > 0\n    n,r = divrem(n,10)\n    total *= r*(r%2\
    \ == 1)\n  end\n  return total\nend", "    if n < 0\n        return 0\n    end\n\
    \    prod = 1\n    while n > 0\n        digit = n % 10\n        if digit % 2 ==\
    \ 1\n            prod *= digit\n        end\n        n = div(n, 10)\n    end\n\
    \    return prod\nend", "    odd_digits = filter(isodd, [Int(d) for d in digits(n)])\n\
    \    return prod(odd_digits) == 0 ? 0 : prod(odd_digits)\nend\n \n ", "    if\
    \ n < 10\n        return n%2 == 1 ? n : 0\n    elseif n%2 == 1\n        return\
    \ digits(div(n,10))*(n%10)\n    else\n        return digits(div(n,10))\n    end\n\
    end", "    total = 1\n    for digit in string(n)\n        if parse(Int64, digit)\
    \ % 2 != 0\n            total *= parse(Int64, digit)\n        end\n    end\n \
    \   return total\nend", "    # Base case, we have only one digit\n    if n < 10\n\
    \        return n % 2 == 1 ? n : 0\n    end\n    # If n is even, then it will\
    \ have no contribution to the total\n    if n % 2 == 0\n        return digits(n\
    \ / 10)\n    end\n    return n % 10 * digits(n / 10)\nend", "  x = abs(n)\n  p\
    \ = 1\n  while x != 0\n    if x % 2 != 0\n      p *= x % 10\n    end\n    x =\
    \ div(x, 10)\n  end\n  return p\nend", "    # Convert integer to string (string\
    \ is an array of characters)\n    string_digits = string(n)\n    # Convert string\
    \ to array of numbers\n    # A = collect(parse.(Int64, string_digits))\n    #\
    \ Check if number is even and exclude if so\n    # sum(A[A .% 2 .!= 0])\n    total\
    \ = 1\n    for d in string_digits\n        if parse(Int64, d) % 2 != 0\n     \
    \       total *= parse(Int64, d)\n        end\n    end\n    return total\nend",
  "    total = 1\n    while n > 0\n        r = rem(n, 10)\n        if r % 2 != 0\n\
    \            total *= r\n        end\n        n = div(n, 10)\n    end\n    return\
    \ total\nend", "    \nend\n ", "    if n < 10\n        return 0\n    end\n   \
    \ ones = mod(n, 10)\n    if ones == 0\n        return 0\n    end\n    return ones*digits(n\
    \ \xF7 10)\nend", "    n  |> digits2\nend", "    res = 1\n    while n > 0\n  \
    \      d = n % 10\n        if d % 2 != 0\n            res *= d\n        end\n\
    \        n = n \xF7 10\n    end\n    return res\nend\n    ", "    product = 1\n\
    \    for x in digits(n)\n        if x % 2 != 0\n            product *= x\n   \
    \     end\n    end\n    return product\nend", "    return( 0 )\nend", "    if\
    \ n < 10\n        return n\n    else\n        return digits(n % 10) * digits(n\
    \ \xF7 10)\n    end\nend\ndigits(1)\ndigits(4)\ndigits(235)\ndigits(10)\ndigits(11)\n\
    digits(12)\ndigits(13)\ndigits(14)\ndigits(15)\ndigits(16)\ndigits(17)\ndigits(18)\n\
    digits(19)\ndigits(20)\ndigits(21)\ndigits(22)\ndigits(23)\ndigits(24)\ndigits(25)\n\
    digits(26)\ndigits(27)\ndigits(28)\ndigits(29)\ndigits(30)\ndigits(31)\ndigits(32)\n\
    digits(33)\ndigits(34)\ndigits(35)\ndigits(36)\ndigits(37)\ndigits(38)\ndigits(39)\n\
    digits(40)\ndigits(41)\ndigits(42)\ndigits(43)\ndigits(44)\ndigits(45)\ndigits(46)\n\
    digits(47)\ndigits(48)\ndigits(49)\ndigits(50)\ndigits(51)\ndigits(52)\ndigits(53)\n\
    digits(54)\ndigits(55)\ndigits(56)\ndigits(57)\ndigits(58)\ndigits(59)\ndigits(60)\n\
    digits(61)\ndigits(62)\ndigits(63)\ndigits(64)\ndigits(65)\ndigits(66)\ndigits(67)\n\
    digits(68)\ndigits(69)\ndigits(70)\ndigits(71)\ndigits(72)\ndigits(73)\ndigits(74)\n\
    digits(75)\ndigits(76)\ndigits(77)\ndigits(78)\ndigits(79)\ndigits(80)\ndigits(81)\n\
    digits(82)\ndigits(83)\ndigits(84)\ndigits(85)\ndigits", "    ans = 1\n    for\
    \ x in string(n)\n        if x isa Int64 && x % 2 != 0\n            ans *= x\n\
    \        end\n    end\n    return ans\nend", "    # Check if n is positive\n \
    \   if n < 0\n        return \"Error, insert positive integer\"\n    end\n   \
    \ # Initialize empty list of odd digits\n    odd_digits = []\n    # Loop over\
    \ every digit\n    while n > 0\n        # Get digit in loop\n        digit = n\
    \ % 10\n        # if odd append to list\n        if digit % 2 != 0\n         \
    \   push!(odd_digits, digit)\n        end\n        # reduce n by 10^2 since we\
    \ have extracted the last digit in loop\n        n = n \xF7 10\n    end\n    #\
    \ Initialize product of odd digits\n    product = 1\n    # Loop over list of odd\
    \ digits\n    for i in odd_digits\n        # Multiply i with product\n       \
    \ product *= i\n    end\n    # Return product\n    return product\nend", "   \
    \ if n < 10\n        return n\n    else\n        nn = div(n, 10)\n        if nn\
    \ == 0\n            nn = 10\n        end\n        if rem(n, 10) != 0\n       \
    \     return rem(n, 10) * digits(nn)\n        else\n            return digits(nn)\n\
    \        end\n    end\nend\nprintln(digits(1))\nprintln(digits(4))\nprintln(digits(235))\n\
    println(digits(13))", "    return 0 \nend", "    s = string(n)\n    l = length(s)\n\
    \    k = 1\n    for i in 1:l\n        if parse(Int64,s[i])%2==1\n            k\
    \ *= parse(Int64,s[i])\n        end\n    end\n    return k\nend", "    sum = 1\n\
    \    while n > 0\n        r = n % 10\n        if r % 2 != 0\n            sum *=\
    \ r\n        end\n        n = div(n, 10)\n    end\n    return sum\nend", "   \
    \ if n == 0\n        return 0\n    end\n    if mod(n, 2) == 1\n        return\
    \ mod(n, 10) * digits(div(n, 10))\n    else\n        return digits(div(n, 10))\n\
    \    end\nend", "    return 0\nend", "    a = count_digits(n)\n    b = 0\n   \
    \ while a >= 1\n        b = b + last_digit(n)\n        a = a - 1\n        n =\
    \ strip_last_digit(n)\n    end\n    return b\nend\n ", "    s = 0\n    for d in\
    \ digits(n)\n        s = d % 2 == 1 ? s * d : s\n    end\n    return s\nend",
  "    return n == 0 ? 0 : (n % 2 == 0 ? digits(n/10) : n % 10 * digits(n/10))\nend",
  "    #your code here\n    return 0\nend", "    n == 0 && return 0\n    n % 2 ==\
    \ 0 && return digits(n/10)\n    n % 2 == 1 && return n % 10 * digits(n/10)\nend\n\
    digits(1)\ndigits(4)\ndigits(235)\ndigits(13579)", "    total = 1\n    while n\
    \ != 0\n        digit = mod(n, 10)\n        if isodd(digit)\n            total\
    \ *= digit\n        end\n        n = div(n, 10)\n    end\n    return total\nend",
  "    a = 1\n    while n>0\n        if rem(n,2)==1\n            a = a*(n%10)\n  \
    \      end\n        n = div(n,10)\n    end\n    return a\nend", "    n\n    |>\
    \ collect(digits(10,:))\n    |> filter(x -> x % 2 != 0)\n    |> prod\nend", " \
    \   product = 1\n    while n != 0\n        num = n % 10\n        if num % 2 !=\
    \ 0\n            product *= num\n        end\n        n = div(n, 10)\n    end\n\
    \    return product\nend", "    if n < 10\n        if isodd(n)\n            return\
    \ n\n        else\n            return 0\n        end\n    else\n        if isodd(n\
    \ % 10)\n            return n % 10 * digits(n \xF7 10)\n        else\n       \
    \     return digits(n \xF7 10)\n        end\n    end\nend", "    if n < 10\n \
    \       return n\n    else\n        last, rest = divrem(n, 10)\n        if last%2\
    \ == 0\n            return digits(rest)\n        else\n            return last*digits(rest)\n\
    \        end\n    end\nend", "    # convert n to string\n    num_str = string(n)\n\
    \    # create an empty product\n    product = 1\n    # loop over every digit in\
    \ string using enumerate\n    for (i, digit) in enumerate(num_str)\n        #\
    \ convert digit to number\n        digit = parse(Int64, digit)\n        # check\
    \ if digit is odd or even\n        if mod(digit, 2) == 1\n            # multiply\
    \ by product if odd\n            product *= digit\n        end\n    end\n    #\
    \ return the product\n    return product\nend", "    n = abs(n)\n    product =\
    \ 1\n    while n > 0\n        if n % 2 != 0\n            product *= n % 10\n \
    \       end\n        n = div(n, 10)\n    end\n    if product == 1\n        product\
    \ = 0\n    end\n    return product\nend\ndigits(1)", "    n_str = n |> string\n\
    \    n_product = 1", "    if n < 0\n        return -digits(-n)\n    end\n    if\
    \ n < 10\n        return n%2 == 1 ? n : 0\n    end\n    return digits(n \xF7 10)\
    \ * (n%10%2 == 1 ? n%10 : 1)\nend\n@assert digits(1)  == 1\n@assert digits(4)\
    \  == 0\n@assert digits(235) == 15", "    n_digits = length(digits(n))\n    n_prod\
    \ = 1\n    while n > 0\n        n_mod = n % 10\n        if n_mod % 2 != 0\n  \
    \          n_prod *= n_mod\n        end\n        n = trunc(Int64, n / 10)\n  \
    \  end\n    return n_prod\nend", "    return prod(filter(x -> x % 2 != 0, digits(n)))\n\
    end\ndigits(235)", "    # Base case\n    if n < 10 \n        return (n%2 == 1)\
    \ ? n : 0\n    end\n    # Recursion\n    return (n%10 % 2 == 1) ? (n%10)*digits(floor(Int64,\
    \ n/10)) : digits(floor(Int64, n/10))\nend", "    n = abs(n)\n    new_n = n\n\
    \    output = 1\n    while new_n > 0\n        if new_n % 2 != 0\n            output\
    \ *= new_n % 10\n        end\n        new_n = new_n \xF7 10\n    end\n    return\
    \ output\nend", "    product = 1\n    while n > 0\n        if n % 2 != 0\n   \
    \         product *= n % 10\n        end\n        n = div(n, 10)\n    end\n  \
    \  if product == 1\n        return 0\n    else\n        return product\n    end\n\
    end\ndigits(235)\ndigits(4)\ndigits(1)\ndigits(254)\ndigits(2546437)", "    if\
    \ n < 10\n        return n\n    else\n        return mod(n, 10) * digits(div(n,\
    \ 10))\n    end\nend", "    if n==0 \n        return 0\n    else \n        return\
    \ digits(floor(n/10)) + rem(n,2)*10^floor(log10(abs(n))) \n    end\nend", "  \
    \  \n    # Split the digit into individual numbers\n    digit = split(string(n))\n\
    \    \n    # Create an array to store the odd numbers\n    odd_digit = Int64[]\n\
    \    \n    # Iterate through the numbers to find odd numbers\n    for i in digit\n\
    \        if parse(Int64, i) % 2 != 0\n            push!(odd_digit, parse(Int64,\
    \ i))\n        end\n    end\n    \n    # Check if odd_digit is empty\n    if isempty(odd_digit)\n\
    \        return 0\n    else\n        # If not empty, calculate the product\n \
    \       prod = 1\n        for i in odd_digit\n            prod *= i\n        end\n\
    \        return prod\n    end\nend\ndigits(235)", "    if n < 10\n        return\
    \ n\n    else\n        odd_digit = digits(n % 10)\n        if odd_digit > 0\n\
    \            return odd_digit * digits(n div 10)\n        else\n            return\
    \ digits(n div 10)\n        end\n    end\nend", "    for digit in digits(n)\n\
    \        if digit%2 != 0\n            sum += digit\n        end\n    end\nend",
  "    res = 1\n    while n > 0\n        if mod(n, 2) == 1\n            res *= n %\
    \ 10\n        end\n        n = div(n, 10)\n    end\n    return res\nend", "  \
    \  prod = 1\n    while n != 0\n        if n % 2 != 0\n            prod *= n %\
    \ 10\n        end\n        n = div(n, 10)\n    end\n    return prod\nend", " \
    \   function odd(n::Int64)::Bool\n        if n%2 == 0\n            return false\n\
    \        else\n            return true\n        end\n    end\n    f(n) = odd(n)\
    \ ? n : 0\n    #print(n, f(n))\n    map(f, digits(n)) |> prod \nend\ndigits(4)\n\
    digits(235)\ndigits(235) == 15\ndigits(1)\ndigits(1) == 1\ndigits(4)\ndigits(4)\
    \ == 0\ndigits(23)\ndigits(23) == 0\ndigits(235)\ndigits(235) == 15\ndigits(0)\n\
    digits(0) == 0\ndigits(555)\ndigits(555) == 0\ndigits
  "    n_copy = n\n    product = 1\n    while n_copy > 0\n        digit = n_copy %\
    \ 10\n        if digit % 2 != 0\n            product *= digit\n        end\n \
    \       n_copy = n_copy / 10\n    end\n    return product\nend", "    n::String=string(n)\n\
    \    product::Int64=1\n    for i::Int64 in n\n        i::Int64=parse(Int64,i)\n\
    \        if i%2!=0\n            product*=i\n        end\n    end\n    return product\n\
    end", "    n = abs(n)\n    product = 1\n    while n > 0\n        d = n % 10\n\
    \        if d % 2 != 0\n            product *= d\n        end\n        n = div(n,\
    \ 10)\n    end\n    return product\nend", "    n::Int64 == 0 && return 0\n   \
    \ n::Int64 < 0 && return digits(-n)\n    res::Int64 = 0\n    while n::Int64 >\
    \ 0\n        r::Int64 = n::Int64 % 10\n        if (r::Int64 % 2 == 1)\n      \
    \      res::Int64 = res::Int64 == 0 ? r::Int64 : res::Int64 * r::Int64\n     \
    \   end\n        n::Int64 = n::Int64 \xF7 10\n    end\n    return res::Int64\n\
    end", "    x = num_digits(n)\n    total = 1\n    while x >= 1\n        if mod(n,10)\
    \ != 0\n            total *= mod(n,10)\n        end\n        n = div(n,10)\n \
    \       x -= 1\n    end\n    return total\nend", "    number = n\n    product\
    \ = 1\n    while number > 0\n        digit = number % 10\n        if digit % 2\
    \ != 0\n            product *= digit\n        end\n        number = floor(Int64,\
    \ number / 10)\n    end\n    return product\nend", "    n=abs(n)\n    ans=1\n\
    \    while n>0\n        r=n%10\n        if r%2!=0\n            ans=ans*r\n   \
    \     end\n        n=div(n,10)\n    end\n    return ans\nend", "    sum = 1\n\
    \    while n > 0\n        digit = n % 10\n        if digit % 2 != 0\n        \
    \    sum *= digit\n        end\n        n = div(n, 10)\n    end\n    return sum\n\
    end", "    # your code here\nend\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235)\
    \ == 15\ndigits(1234) == 4\ndigits(81238) == 8\n ", "    n = abs(n)\n    if n\
    \ == 0 return 0 end\n    newInt = 1\n    while n > 0\n        if n % 2 != 0\n\
    \            newInt *= n % 10\n        end\n        n = div(n, 10)\n    end\n\
    \    newInt\nend\n    \n    ", "    return reduce(*, [d for d in digits(n) if\
    \ isodd(d)])\nend", "    s = string(n)\n    res = 1\n    for i = 1:length(s)\n\
    \        c = s[i]\n        if c == '0'\n            res = 0\n            break\n\
    \        elseif c == '1' || c == '3' || c == '5' || c == '7' || c == '9'\n   \
    \         res *= parse(Int64, c)\n        end\n    end\n    return res\nend",
  "    n = abs(n)\n    product = 1\n    while n > 0\n        if n % 2 != 0\n     \
    \       product *= n % 10\n        end\n        n = div(n, 10)\n    end\n    if\
    \ product == 1\n        return 0\n    else\n        return product\n    end\n\
    end\ndigits(312)", "    number = digits(n)\n    prod = 1\n    for i = 1:length(number)\n\
    \        if mod(number[i],2) != 0\n            prod *= number[i]\n        end\n\
    \    end\n    prod\nend", "    if n < 10\n        return n\n    else\n       \
    \ n_tail = n % 10\n        n_head = div(n, 10)\n        if n_tail % 2 == 0\n \
    \           return digits(n_head)\n        else\n            return n_tail * digits(n_head)\n\
    \        end\n    end\nend", "    return prod(digits(n))\nend\ndigits(235)", " \
    \   n < 0 && return digits(-n)\n    n < 10 && return n % 2 == 1 ? n : 0\n    return\
    \ (n % 10 % 2 == 1 ? n % 10 : 1) * digits(n \xF7 10)\nend", "  t = 0\n  r = 1\n\
    \  if (n < 0)\n    n = -n\n  end\n  if (n == 0)\n    return 0\n  end\n  while\
    \ (n != 0)\n    t = n % 10\n    if (t % 2 != 0)\n      r = r * t\n    end\n  \
    \  n = n / 10\n  end\n  return r\nend", "    n == 0 && return 0\n    remainder\
    \ = n % 10\n    quotient = n / 10\n    remainder % 2 == 0 && return digits(quotient)\n\
    \    return remainder * digits(quotient)\nend", "    if n == 0\n        return\
    \ 0\n    end\n    if n%2 != 0\n        a = n%10\n        return a*digits(n//10)\n\
    \    else\n        return digits(n//10)\n    end\nend", "    if n < 10\n     \
    \   if isodd(n)\n            return n\n        else\n            return 0\n  \
    \      end\n    else\n        if isodd(mod(n,10))\n            return mod(n,10)*digits(div(n,10))\n\
    \        else\n            return digits(div(n,10))\n        end\n    end\nend",
  "    \"\"\"\n    function using recursion\n    \"\"\"\n    if n < 10 && n%2 != 0\n\
    \        return n\n    elseif n < 10\n        return 0\n    else\n        return\
    \ digits(n%10) * digits(n//10)\n    end\nend", "    product = 1\n    for digit\
    \ in digits(n)\n        if (rem(digit, 2) != 0) \n            product *= digit\n\
    \        end\n    end\n    product\nend", "    n < 0 && return 0\n    ds = digits(n)\n\
    \    ds = [d for d in ds if isodd(d)]\n    reduce(*, ds, 1)\nend", "    n < 0\
    \ && return digits(-n)\n    n < 10 && return isodd(n) ? n : 0\n    return isodd(n\
    \ % 10) ? (n % 10) * digits(n \xF7 10) : digits(n \xF7 10)\nend", "    \"your\
    \ code here\"\nend\n@assert digits(1)  == 1\n@assert digits(4)  == 0\n@assert\
    \ digits(235) == 15\n@assert digits(0) == 0\n@assert digits(100000) == 0\n@assert\
    \ digits(1111111) == 1\n@assert digits(123456789) == 15\n ", "    if n == 0\n\
    \        return 0\n    end\n    last_digit = mod(n, 10)\n    product = if last_digit\
    \ % 2 == 1\n        last_digit\n    else\n        1\n    end\n    digits(div(n,\
    \ 10)) * product\nend", "    if n < 0\n        return digits(-n)\n    end\n  \
    \  if n < 10\n        return 0\n    end\n    return (n % 10 == 0 ? 0 : n % 10)\
    \ * digits(n \xF7 10)\nend\n@test digits(1) == 1\n@test digits(4) == 0\n@test\
    \ digits(235) == 15", "    return 0\nend", "   n0=n\n   p=1\n   while n>0\n  \
    \  if n%2==1\n     p=p*(n%10)\n    end\n    n=n/10\n   end\n   if p==1\n    p=0\n\
    \   end\n   return p\nend", "    if n < 10\n        return n\n    else\n     \
    \   return @a(n)\n    end\nend", "    sum = 1\n    while n>=1\n        digit =\
    \ n%10\n        if digit%2 != 0\n            sum *= digit\n        end\n     \
    \   n = n/10\n    end\n    return sum\nend", "    if n == 0\n        return 0\n\
    \    end\n    digit = n % 10\n    if digit % 2 == 0\n        return digits(n //\
    \ 10)\n    else\n        return digit * digits(n // 10)\n    end\nend", "    odd(x)\
    \ = x % 2 != 0 ? x : 0\n    n < 10 ? odd(n) : odd(n % 10) * digits(trunc(Int64,\
    \ n / 10))\nend", "    accumulator = 1\n    while n > 0\n        digit = n % 10\n\
    \        if digit % 2 != 0\n            accumulator *= digit\n        end\n  \
    \      n = div(n, 10)\n    end\n    return accumulator\nend\n \nprint(digits(235))",
  "    if n == 0\n        return 0\n    end\n    prod = 1\n    while n > 0\n     \
    \   if n % 2 == 1\n            prod *= n % 10\n        end\n        n = n \xF7\
    \ 10\n    end\n    return prod\nend", "    if n == 0 \n        return 0\n    else\n\
    \        if mod(n,2) != 0\n            return n * digits(div(n,10))\n        else\n\
    \            return digits(div(n,10))\n        end\n    end\nend", "    # Special\
    \ case\n    if n < 0\n        return digits(-n)\n    end\n    \n    # Find the\
    \ number of digits\n    count = 0\n    temp = n\n    while temp > 0\n        count\
    \ += 1\n        temp = temp \xF7 10\n    end\n    \n    # Multiply all digits\n\
    \    temp = n\n    result = 1\n    for i = 1:count\n        digit = temp \xF7\
    \ 10^(count-i)\n        if digit % 2 == 1\n            result *= digit\n     \
    \   end\n        temp = temp % 10^(count-i)\n    end\n    \n    return result\n\
    end\n# test\nprintln(digits(5) == 5)\nprintln(digits(12) == 0)\nprintln(digits(245)\
    \ == 15)\nprintln(digits(1405) == 20)\nprintln(digits(7154) == 120)\nprintln(digits(5500)\
    \ == 0)\nprintln(digits(79999) == 598)\nprintln(digits(394530) == 945)\nprintln(digits(0)\
    \ == 0)\nprintln(digits(-123) == 15)\nprintln(digits(-1094) == 0)\nprintln(digits(-4)\
    \ == 0)\nprintln(digits(-2965) == 5)\nprintln(digits(-1159) == 15)\nprintln(digits(-7154)\
    \ == 120)\nprintln(digits(-394530) == 945)", "    \n    #initialize a counter\
    \ and a product var\n    count = 0\n    prod = 1\n    \n    #loop through each\
    \ digit of n\n    for i in digits(n)\n        count = count + 1\n        \n  \
    \      #if the digit is odd add it to prod\n        if i % 2 != 0\n          \
    \  prod = prod * i\n        end\n        \n    end\n    \n    #return prod if\
    \ count is greater than 0\n    if count > 0\n        return prod\n    else\n \
    \       return 0\n    end\nend", "    \n    # Make sure n is nonnegative\n   \
    \ n = abs(n)\n    \n    # Initialize the return value\n    total = 1\n    \n \
    \   # While n is greater than 0,\n    while n > 0\n        \n        # Get the\
    \ last digit in n\n        digit = n % 10\n        \n        # If the digit is\
    \ not even,\n        if digit % 2 != 0\n            \n            # multiply the\
    \ return value by the digit\n            total *= digit\n        end\n       \
    \ \n        # Drop the last digit from n\n        n = n \xF7 10\n    end\n   \
    \ \n    # Return the return value\n    return total\nend", "    if n < 10\n  \
    \      return n % 2 == 1 ? n : 0\n    else\n        return (n % 10 % 2 == 1 ?\
    \ n % 10 : 0) * digits(div(n, 10))\n    end\nend\n    \n    ", "    if n < 0\n\
    \        n = -n\n    end\n    if n < 10\n        if n % 2 == 1\n            return\
    \ n\n        else\n            return 0\n        end\n    end\n    d = digits(div(n,\
    \ 10))\n    m = n % 10\n    if m % 2 == 1\n        return m * d\n    else\n  \
    \      return d\n    end\nend", "    odd_prod = 1\n    while n > 0\n        d\
    \ = n % 10\n        if isodd(d)\n            odd_prod *= d\n        end\n    \
    \    n = n \xF7 10\n    end\n    return odd_prod\nend", "    odd_digits = [i for\
    \ i in string(n) if parse(Int64,i)%2 != 0]\n    if length(odd_digits) == 0\n \
    \       return 0\n    else\n        return prod(parse.(Int64,odd_digits))\n  \
    \  end\nend", "    n = abs(n)\n    product = 1\n    if n == 0\n        return\
    \ 0\n    end\n    while n != 0\n        digit = n % 10\n        if digit % 2 !=\
    \ 0\n            product *= digit\n        end\n        n = div(n, 10)\n    end\n\
    \    return product\nend", "    return 0 if sum(isodd, digits(n)) == 0 else prod(digits(n)[isodd(digits(n))])\n\
    end", "    return n == 0 ? 0 : n % 10 % 2 == 1 ? n % 10 * digits(n \xF7 10) :\
    \ digits(n \xF7 10)\nend", "    prod = 1\n    for d in string(n)\n        if parse(Int64,\
    \ d) % 2 != 0\n            prod *= parse(Int64, d)\n        end\n    end\n   \
    \ return prod\nend", "    x=0\n    if n%2 == 0\n        return 0\n    else\n \
    \       return n\n    end\nend", "    prod = 1\n    for digit in digits(n)\n \
    \       prod *= digit % 2 == 1 ? digit : 1\n    end\n    return prod\nend", " \
    \   n < 10 ? n % 2 != 0 ? n : 0 : n % 2 != 0 ? n % 10 * digits(n \xF7 10) : digits(n\
    \ \xF7 10)\nend", "    n1 = abs(n)\n    prod = 1\n    n0 = 0\n    #We can also\
    \ use:\n    #while n1 > 0\n    #   n0 = mod(n1,10)\n    #   n1 = div(n1,10)\n\
    \    #   if mod(n0,2) == 1\n    #       prod *= n0\n    #   end\n    #end\n  \
    \  for k in 1:floor(log10(n1))+1\n        n0 = mod(n1,10)\n        n1 = div(n1,10)\n\
    \        if mod(n0,2) == 1\n            prod *= n0\n        end\n    end\n   \
    \ return prod\nend", "    \nend", "    sum = 1\n    while n > 0\n        if (n\
    \ % 10) % 2 != 0\n            sum *= (n % 10)\n        end\n        n = div(n,\
    \ 10)\n    end\n    return sum\nend", "    result = 1\n    while n > 0\n     \
    \   # print(n)\n        x = n % 10\n        if x % 2 != 0\n            result\
    \ *= x\n        end\n        n = div(n, 10)\n    end\n    return result\nend",
  "    if n < 10\n        return n % 2 == 1 ? n : 0\n    else\n        return digits(n\xF7\
    10) * (n % 2 == 1 ? n % 10 : 1)\n    end\nend", "    res = 1\n    for i in digits(n)\n\
    \        if i % 2 != 0\n            res *= i\n        end\n    end\n    res\n\
    end", "    if n < 10\n        return n % 2 == 1 ? n : 0\n    else\n        digit\
    \ = n % 10\n        return (digit % 2 == 1 ? digit : 0) * digits(n \xF7 10)\n\
    \    end\nend", "    n_str = string(n)\n    product = 1\n    for i = 1:length(n_str)\n\
    \        num = parse(Int64, n_str[i])\n        if num % 2 != 0\n            product\
    \ *= num\n        end\n    end\n    if product != 1\n        return product\n\
    \    else\n        return 0\n    end\nend\ndigits(235)", "    #A = []\n    A =\
    \ 1\n    while n > 0\n        a = n % 10\n        if a % 2 != 0\n            #push!(A,a)\n\
    \            A = A * a\n        end\n        n = div(n,10)\n    end\n    return\
    \ A\nend", "    product = 1\n    while n > 0\n        r = rem(n, 10)\n       \
    \ if isodd(r)\n            product *= r\n        end\n        n = div(n, 10)\n\
    \    end\n    return product\nend", "    p::Int64 = 1\n    if n < 0\n        n\
    \ = -n\n    end\n    while n > 0\n        d = n % 10\n        if d % 2 == 1\n\
    \            p = p * d\n        end\n        n = n / 10\n    end\n    return p\n\
    end", "    s = string(n)\n    res = 1\n    for i in s\n        if i in '24680'\n\
    \            res *= parse(Int64, i)\n        end\n    end\n    return res\nend",
  "    if n == 0 return 0 end\n    acc = 1\n    for i in 0:int(floor(log10(n)))\n\
    \        d = mod(div(n, 10^i), 10)\n        if d % 2 == 1\n            acc *=\
    \ d\n        end\n    end\n    return acc\nend", "    s = string(n)\n    product\
    \ = 1\n    for x in s\n        product *= x - '0'\n    end\n    return product\n\
    end", "    \n    # initialise the product, starting from 1\n    product = 1\n\
    \    \n    # until n becomes 0\n    while n != 0\n        \n        # append the\
    \ last digit of n to the array\n        last_digit = n % 10\n        \n      \
    \  # if the last digit is odd\n        if last_digit % 2 != 0\n            # multiply\
    \ with product\n            product *= last_digit\n        end\n        \n   \
    \     # remove the last digit of n\n        n = div(n, 10)\n    end\n    \n  \
    \  # return the product\n    return product\nend", "    n = abs(n)\n    p = 1\n\
    \    while n > 0\n        d = n % 10\n        if d % 2 == 1\n            p *=\
    \ d\n        end\n        n = (n - d) / 10\n    end\n    return p\nend", "   \
    \ n_str = string(n)\n    n_list = [parse(Int64, n_str[i]) for i in 1:length(n_str)]\n\
    \    odd_nums = filter(x -> x % 2 != 0, n_list)\n    prod = prod(odd_nums)\n \
    \   return prod\nend", "    if n == 0\n        return 0\n    end\n    return (n\
    \ % 10) % 2 == 1 ? (n % 10) * digits(n \xF7 10) : digits(n \xF7 10)\nend\ndigits(235)\n\
    digits(1)\ndigits(4)\ndigits(1000)\ndigits(0)\ndigits(9999)\ndigits(10)\ndigits(423)",
  "    s = string(n)\n    prod = 1\n    for i = 1:length(s)\n        c = parse(Int64,\
    \ s[i])\n        if c % 2 == 1\n            prod *= c\n        end\n    end\n\
    \    return prod\nend", "    output = 1\n    for i in n \n        if i%2 != 0\n\
    \            output = output * i\n        end\n    end\n    return output\nend\n\
    @test digits(1234) == 0\n@test digits(234) == 0\n@test digits(235) == 15\n@test\
    \ digits(1357) == 35\n@test digits(135794) == 4\n@test digits(0) == 0\n@test digits(1)\
    \ == 1", "    res = 1\n    while n != 0\n        if mod(n,2) == 1\n          \
    \  res *= div(n,10)\n        end\n        n = div(n,10)\n    end\n    res\nend",
  "    total = 1\n    for i in n\n        if i % 2 != 0\n            total *= i\n\
    \        end\n    end\n    return total\nend", "    prod = 1\n    for x in digits(n)\n\
    \        if x % 2 != 0\n            prod *= x\n        end\n    end\n    prod\n\
    end", "    n == 0 && return 0\n    n % 2 == 0 && return digits(n div 10)\n   \
    \ return (n mod 10) * digits(n div 10)\nend\ndigits(235)", "    product = 1\n\
    \    while n>0\n        last_digit = n%10\n        if last_digit%2 != 0 \n   \
    \         product *= last_digit\n        end\n        n = n//10\n    end\n   \
    \ return product\nend", "    b = 1\n    while n > 0\n        c = n % 10\n    \
    \    if c % 2 != 0\n            b *= c\n        end\n        n = n / 10\n    end\n\
    \    return b\nend", "    res = 1\n    while n > 0\n        d = n % 10\n     \
    \   if (d % 2 != 0)\n            res *= d\n        end\n        n = floor(Int64,\
    \ n / 10)\n    end\n    return res\nend\ndigits(1)", "    a = 1\n    while n >\
    \ 0\n        b = n % 10\n        if b % 2 != 0\n            a *= b\n        end\n\
    \        n = floor(Int64, n / 10)\n    end\n    return a\nend", "   digits = 0\n\
    \   while n != 0\n       if mod(n, 2) != 0\n           digits *= div(n, 10)\n\
    \       end\n       n = div(n, 10)\n   end\n   return digits\nend", "    n_string\
    \ = string(n)\n    n_array = split(n_string, \"\")\n    n_array = [parse(Int64,\
    \ n_array[i]) for i in 1:length(n_array)]\n    products = 1\n    for i in 1:length(n_array)\n\
    \        if n_array[i] % 2 != 0\n            products *= n_array[i]\n        end\n\
    \    end\n    return products\nend", "    if n<0\n        println(\"n must be\
    \ positive\")\n        return -1\n    end\n    sum = 1\n    while n>0\n      \
    \  d = mod(n,10)\n        if d%2 != 0\n            sum *= d\n        end\n   \
    \     n = div(n,10)\n    end\n    return sum\nend", "    output = 1\n    while\
    \ n != 0\n        if mod(n,2) != 0\n            output *= div(n,10)\n        end\n\
    \        n = div(n,10)\n    end\n    return output\nend", "    result = 1\n  \
    \  for d in digits(n)\n        if d % 2 == 1\n            result *= d\n      \
    \  end\n    end\n    return result\nend", "    odd_digits = 1\n    for d in digits(n)\n\
    \        if (d % 2) != 0\n            odd_digits *= d\n        end\n    end\n\
    \    return odd_digits\nend", "    s = string(n)\n    v = 0\n    for i in 1:length(s)\n\
    \        a = parse(Int64, s[i])\n        if a%2 != 0\n            v = v*a\n  \
    \      end\n    end\n    v\nend\ndigits(235)", "    product = 1\n    while n >\
    \ 0\n        if n % 2 != 0\n            product *= n % 10\n        end\n     \
    \   n = div(n, 10)\n    end\n    if product == 1\n        return 0\n    else\n\
    \        return product\n    end\nend", "    i = 0\n    while n > 0\n        if\
    \ n % 2 == 1\n            i += 1\n        end\n        n = n / 10\n    end\n \
    \   return i\nend", "    s = digits(n)\n    product = 1\n    for d in s\n    \
    \    if isodd(d)\n            product *= d\n        end\n    end\n    return product\n\
    end", "    result::Int64 = 1\n    while n != 0\n        if n % 2 != 0\n      \
    \      result *= n % 10\n        end\n        n /= 10\n    end\n    result ==\
    \ 1 ? 0 : result\nend", "    odd = 1\n    for x in string(n)\n        if !isdigit(x)\n\
    \            continue\n        end\n        x = parse(Int64, x)\n        if x\
    \ % 2 == 1\n            odd *= x\n        end\n    end\n    return odd\nend",
  "    if n < 0\n        return 0\n    end\n    if n < 10\n        return n\n    end\n\
    \    return (n % 10) * digits(n \xF7 10)\nend", "    total = 1\n    while n >\
    \ 0\n        d = n % 10\n        if isodd(d)\n            total *= d\n       \
    \ end\n        n = n \xF7 10\n    end\n    return total\nend", "    if n == 0\n\
    \        return 0\n    end\n    return (n % 10) * digits(floor(Int64, n / 10))\n\
    end", "    i = 0\n    res = 1\n    while n > 0\n        i = mod(n, 10)\n     \
    \   if mod(i, 2) != 0\n            res = res * i\n        end\n        n = div(n,\
    \ 10)\n    end\n    return res\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
