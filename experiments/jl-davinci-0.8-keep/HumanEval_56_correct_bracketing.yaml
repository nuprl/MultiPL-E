name: HumanEval_56_correct_bracketing
language: jl
prompt: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
  \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
  <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
  <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\
  \nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
  ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
  <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
  <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\")\
  \ == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
  ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
completions: ["    l = length(brackets)\n    c = 0\n    for i in range(1,l)\n    \
    \    if brackets[i] == '<'\n            c += 1\n        else\n            c -=\
    \ 1\n        end\n        if c < 0\n            return false\n        end\n  \
    \  end\n    return c == 0\nend", "    # keep track of the number of \"<\"\n  \
    \  count = 0\n    for i = 1:length(brackets)\n        if brackets[i] == '<'\n\
    \            count += 1\n        elseif brackets[i] == '>'\n            if count\
    \ == 0\n                return false\n            else\n                count\
    \ -= 1\n            end\n        end\n    end\n    return count == 0\nend", " \
    \   num_open_brackets = 0\n    num_close_brackets = 0\n    for char in brackets\n\
    \        if char == \"<\"\n            num_open_brackets += 1\n        elseif\
    \ char == \">\"\n            num_close_brackets += 1\n        end\n    end\n \
    \   return num_open_brackets == num_close_brackets\nend", "    num_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            num_brackets\
    \ += 1\n        elseif bracket == '>'\n            num_brackets -= 1\n       \
    \ end\n        if num_brackets < 0\n            return false\n        end\n  \
    \  end\n    if num_brackets == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<><>>\"\
    )\ncorrect_bracketing(\"><<>\")", "    level = 0\n    for bracket in brackets\
    \ \n        if bracket == \"<\" \n            level += 1\n        elseif bracket\
    \ == \">\" \n            level -= 1\n        end\n    end\n    return level ==\
    \ 0\nend", "    num_opening = 0\n    num_closing = 0\n    for ch in brackets\n\
    \        if ch == '<'\n            num_opening += 1\n        elseif ch == '>'\n\
    \            num_closing += 1\n        end\n    end\n    num_opening == num_closing\n\
    end", "    num_open = 0\n    for i in brackets \n        if i == \"<\" \n    \
    \        num_open += 1\n        elseif i == \">\" \n            num_open -= 1\n\
    \        end\n        if num_open < 0 \n            return false\n        end\n\
    \    end\n    if num_open != 0 \n        return false\n    end\n    return true\n\
    end", "    \n    bracket_counter = 0\n    \n    for i in brackets\n        if\
    \ i == '<'\n            bracket_counter += 1\n        elseif i == '>'\n      \
    \      bracket_counter -= 1\n        end\n        if bracket_counter < 0\n   \
    \         return false\n        end\n    end\n    \n    return bracket_counter\
    \ == 0\nend", "    open_brackets_counter = 0\n    for character in brackets\n\
    \        if character == \"<\"\n            open_brackets_counter += 1\n     \
    \   else\n            open_brackets_counter -= 1\n        end\n        if open_brackets_counter\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets_counter\
    \ == 0\nend", "    if length(brackets)%2 != 0 return false end\n    open = 0\n\
    \    for i in brackets\n        if i == \"<\" open += 1 end\n        if i == \"\
    >\" open -= 1 end\n        if open < 0 return false end\n    end\n    return open\
    \ == 0\nend\n ", "    stack = Array{Char,1}()\n    for c \u2208 brackets\n   \
    \     if c == '<'\n            push!(stack,c)\n        else\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ nbrackets = length(brackets)\n    if nbrackets == 0 \n        return true\n\
    \    end\n    if nbrackets % 2 != 0 \n        return false\n    end\n    opens\
    \ = brackets[1:2:nbrackets]\n    closings = brackets[2:2:nbrackets]\n    if length(opens)\
    \ != length(closings)\n        return false\n    end\n    return all(opens .==\
    \ closings)\nend", "    # checks if string is empty or only \"<\"\n    if brackets\
    \ == \"\" || brackets == \"<\"\n        return false\n    end\n    # checks for\
    \ correct bracketing \n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == \"<\"\n            for j in i+1:length(brackets)\n                if brackets[j]\
    \ == \">\"\n                    brackets[i] = \"1\"\n                    brackets[j]\
    \ = \"2\"\n                    break\n                end\n            end\n \
    \       end\n    end\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == \"<\" || brackets[i] == \">\"\n            return false\n        end\n  \
    \  end\n    return true\nend", "    num_open = 0\n    for character in brackets\n\
    \        if character == \"<\"\n            num_open += 1\n        elseif character\
    \ == \">\"\n            num_open -= 1\n        end\n    end\n    num_open == 0\n\
    end", "    n = length(brackets)\n    if n == 0\n        return true\n    end\n\
    \    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    idx = 2\n    while idx <= n-1\n \
    \       if brackets[idx] == '<'\n            if idx == n-1\n                return\
    \ false\n            end\n            if brackets[idx+1] == '<'\n            \
    \    return false\n            end\n        end\n        idx += 1\n    end\n \
    \   return true\nend", "  for i in 1:length(brackets)\n    if (brackets[i] ==\
    \ '<') \n      stack.push(brackets[i])\n    elseif (brackets[i] == '>') \n   \
    \   if (stack.length() == 0) \n        return false\n      else \n        stack.pop()\n\
    \      end\n    end\n  end\n  if (stack.length() == 0) \n    return true\n  else\
    \ \n    return false\n  end\nend\n    ", "    i::Int = 1\n    ret::Bool = false\n\
    \    for a in brackets\n        if a == \"<\"\n            i += 1\n        elseif\
    \ a == \">\"\n            i -= 1\n        end\n        if i < 0\n            ret\
    \ = false\n            break\n        else\n            ret = true\n        end\n\
    \    end\n    return ret\nend", "    while !isempty(brackets)\n        brackets\
    \ = replace(brackets, \"><\", \"\")\n    end\n    return isempty(brackets)\nend",
  "    \"\"\"\n    Correct bracketing, even nested\n    \"\"\";\n    if length(brackets)\
    \ % 2 != 0\n        return false\n    end\n    lower_brackets = 0\n    for i in\
    \ 1:length(brackets)\n        if brackets[i] == \"<\"\n            lower_brackets\
    \ += 1\n        elseif brackets[i] == \">\"\n            lower_brackets -= 1\n\
    \        end\n        if lower_brackets < 0\n            return false\n      \
    \  end\n    end\n    return lower_brackets == 0\nend", "    # YOUR CODE HERE\n\
    \    leftbrack = 0\n    rightbrack = 0\n    for i in 1:length(brackets)\n    \
    \    if brackets[i] == '<'\n            leftbrack += 1\n        elseif brackets[i]\
    \ == '>'\n            rightbrack += 1\n        end\n    end\n    if leftbrack\
    \ == rightbrack\n        return true\n    else\n        return false\n    end\n\
    \    \nend", "    count = 0\n    for char in brackets\n        if char == '<'\n\
    \            count = count + 1\n        elseif char == '>'\n            count\
    \ = count - 1\n        end\n        if count < 0\n            return false\n \
    \       end\n    end\n    return count == 0\nend\n    \nend", "    stack::Array{Int,1}\
    \ = []\n    for (i, char) in enumerate(brackets)\n        if char == '<'\n   \
    \         push!(stack, i)\n        elseif char == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ if brackets == \"\"\n        return true\n    elseif brackets[1] == '<'\n  \
    \      return correct_bracketing(split(brackets, \"<\")[2])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend\n        ", "    if length(brackets)\
    \ == 0 || (length(brackets) == 1 && brackets[1] == '>')\n        return false\n\
    \    end\n    count = 0\n    for i in brackets\n        if i == '<'\n        \
    \    count += 1\n        elseif i == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend", "    n::Int = 0\n    for c in brackets\n        if c == '<'\n\
    \            n += 1\n        else\n            n -= 1\n        end\n        if\
    \ n < 0\n            return false\n        end\n    end\n    return n == 0\nend\n\
    \ \n \n \n ", "    stack = Array{Char,1}[]\n    for b in brackets\n        if\
    \ b == '<'\n            push!(stack, b)\n        else\n            if isempty(stack)\
    \ || pop!(stack) != '<'\n                return false\n            end\n     \
    \   end\n    end\n    return isempty(stack)\nend", "  open_brackets = 0\n  for\
    \ b in brackets\n    if b == '<'\n      open_brackets += 1\n    elseif b == '>'\n\
    \      open_brackets -= 1\n    end\n    if open_brackets < 0\n      return false\n\
    \    end\n  end\n  return open_brackets == 0\nend\ncorrect_bracketing(\"<><>\"\
    )", "    counter = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            counter += 1\n        else\n            counter -= 1\n \
    \       end\n        if counter < 0\n            return false\n        end\n \
    \   end\n    return counter == 0\nend", "    n = count(brackets, '<') - count(brackets,\
    \ '>')\n    return n == 0\nend", "    return brackets == reverse(brackets) # this\
    \ is not the right way to do it\nend", "    bracket_stack = []\n    for bracket\
    \ in brackets\n        if bracket == \"<\"\n            push!(bracket_stack, bracket)\n\
    \        elseif bracket == \">\" && length(bracket_stack) == 0\n            return\
    \ false\n        elseif bracket == \">\" && length(bracket_stack) > 0\n      \
    \      pop!(bracket_stack)\n        end\n    end\n    if length(bracket_stack)\
    \ == 0\n        return true\n    else\n        return false\n    end\nend", " \
    \ b=0\n  for i=1:length(brackets)\n    if brackets[i]==\"<\"\n      b+=1\n   \
    \ elseif brackets[i]==\">\"\n      b-=1\n    end\n    if b<0 \n      return false\n\
    \    end\n  end\n  return b==0\nend", "    if brackets[1] == \">\"\n        return\
    \ false\n    end\n    current = 0\n    for i = 1:length(brackets)\n        if\
    \ brackets[i] == \"<\"\n            current += 1\n        else\n            current\
    \ -= 1\n        end\n        if current < 0\n            return false\n      \
    \  end\n    end\n    return current == 0\nend", "    n = length(brackets)\n  \
    \  if n % 2 != 0\n        return false\n    end", "    L = length(brackets)\n\
    \    # Count the number of open and close brackets\n    open_counter = 0\n   \
    \ close_counter = 0\n    for char in brackets\n        if char == '<'\n      \
    \      open_counter += 1\n        elseif char == '>'\n            close_counter\
    \ += 1\n        end\n    end\n    # Return True if there are no more opening brackets\
    \ than closing brackets, and vice versa.\n    return open_counter <= close_counter\
    \ && close_counter <= open_counter\nend", "    # Count the number of opening brackets.\n\
    \    open_brackets::Int = 0\n    for b in brackets\n        if b == '<'\n    \
    \        open_brackets += 1\n        elseif b == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    # If all are closed, then there should be no open brackets\
    \ left.\n    return open_brackets == 0\nend", "    open = 0\n    close = 0\n \
    \   for i in brackets\n        if i == '<'\n            open += 1\n        elseif\
    \ i == '>'\n            close += 1\n        end\n    end\n    if open == close\n\
    \        return true\n    else\n        return false\n    end\nend", "    push!(mybrackets,\
    \ brackets)\n    if(length(mybrackets)==0)\n        return False\n    end\n  \
    \  for i=1:length(mybrackets)\n        if(mybrackets[i] == '>')\n            pop!(mybrackets)\n\
    \        end\n    end\n    return isempty(mybrackets)\nend", "    for i in range(1,\
    \ size(brackets, 1))\n        if brackets[i] == '<'\n            for j in range(i+1,\
    \ size(brackets, 1))\n                if brackets[j] == '>'\n                \
    \    return true\n                end\n            end\n            return false\n\
    \        end\n    end\n    return true\nend", "    if brackets == \"\"\n     \
    \   return true\n    elseif brackets[1] == \"<\"\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == \">\"\n        if correct_bracketing(brackets[2:end])\
    \ == false\n            return false\n        elseif brackets[2] == \">\" || islast(brackets)\n\
    \            return false\n        else\n            return true\n        end\n\
    \    end\nend", "    \n    if brackets == \"<>\"\n        return true\n    elseif\
    \ isempty(brackets)\n        return true\n    elseif brackets[1] == \"<\"\n  \
    \      return correct_bracketing(brackets[2:end])\n    else\n        for c in\
    \ brackets\n            if c == \">\"\n                brackets = replace(brackets,\
    \ c, \"\")\n                return correct_bracketing(brackets)\n            end\n\
    \        end\n        return false\n    end\nend\nend", "    if isempty(brackets)\n\
    \        return true\n    elseif brackets[1] == '<'\n        return search(brackets,1)\n\
    \    else\n        return false\n    end\nend", "    opening_count = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            opening_count +=\
    \ 1\n        elseif bracket == '>'\n            opening_count -= 1\n        end\n\
    \        if opening_count < 0\n            return false\n        end\n    end\n\
    \    if opening_count == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "   open::Int=0\n   close::Int=0\n   for i in brackets\n     \
    \ if i=='<'\n         open=open+1\n      elseif i=='>'\n         close=close+1\n\
    \      end\n      if close>open\n         return false\n      end\n   end\n  \
    \ return open==close\nend", "    open_brackets = 0\n    for b in brackets\n  \
    \      if b == '<'\n            open_brackets += 1\n        else\n           \
    \ open_brackets -= 1\n        end\n        if open_brackets < 0\n            return\
    \ false\n        end\n    end\n    return open_brackets == 0\nend", "    stack\
    \ = []\n    for i = 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      push!(stack, brackets[i])\n        elseif brackets[i] == '>'\n        \
    \    if isempty(stack)\n                return false\n            else\n     \
    \           pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    count = 0\n    for i = 1:length(brackets)\n        if brackets[i] ==\
    \ '<'\n            count += 1\n        elseif brackets[i] == '>'\n           \
    \ count -= 1\n        end\n        if count < 0\n            return false\n  \
    \      end\n    end\n    return count == 0\nend", "    count = 0\n    for b in\
    \ brackets\n        if b == '<'\n            count += 1\n        else\n      \
    \      count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    if brackets == \"\"\n\
    \        return true\n    elseif brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end", "    queue = Array{Char,1}()\n    for (i,bracket) in enumerate(brackets)\n\
    \        if bracket == '<'\n            push!(queue, bracket)\n        elseif\
    \ bracket == '>'\n            if length(queue) == 0\n                return false\n\
    \            else\n                popfirst!(queue)\n            end\n       \
    \ end\n    end\n    if length(queue) == 0\n        return true\n    else\n   \
    \     return false\n    end\nend", "    \nend\ncorrect_bracketing(\"<<><>>\")",
  "    \n    open_brackets = 0\n    for c in brackets\n        if c == '<'\n     \
    \       open_brackets += 1\n        else\n            open_brackets -= 1\n   \
    \         if open_brackets < 0\n                return false\n            end\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    tmp = 0\n   \
    \ for b in brackets\n        if b == '<'\n            tmp += 1\n        else\n\
    \            tmp -= 1\n        end\n        if tmp < 0\n            return false\n\
    \        end\n    end\n    if tmp == 0\n        return true\n    else\n      \
    \  return false\n    end\nend", "    # Initialize counter\n    counter = 0\n \
    \   # Loop through every char in string\n    for char in brackets\n        # Increment\
    \ counter if char is open bracket\n        if char == \"<\"\n            counter\
    \ += 1\n        elseif char == \">\"\n            # Decrement counter if char\
    \ is closed bracket\n            counter -= 1\n            # Return false if counter\
    \ less than 0\n            if counter < 0\n                return false\n    \
    \        end\n        end\n    end\n    # Return false if counter greater than\
    \ 0\n    if counter > 0\n        return false\n    end\n    # Return true if counter\
    \ equal to 0\n    return true\nend", "    i = 0\n    for character in brackets\n\
    \        if character == \"<\"\n            i = i + 1\n        elseif character\
    \ == \">\"\n            i = i - 1\n        end\n        if i < 0\n           \
    \ return false\n        end\n    end\n    return i == 0\nend", "    # variables\n\
    \    var bracket_stack = []\n    # loop through brackets\n    for bracket in brackets\n\
    \        # if open bracket push on to stack\n        if bracket == '<'\n     \
    \       push!(bracket_stack, bracket)\n        # if close bracket, pop\n     \
    \   elseif bracket == '>'\n            pop!(bracket_stack)\n        end\n    end\n\
    \    # check if stack is empty\n    length(bracket_stack) == 0 ? true : false\n\
    end", "    bracket_count = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            bracket_count += 1\n        elseif bracket == '>'\n    \
    \        bracket_count -= 1\n        end\n        if bracket_count < 0\n     \
    \       return false\n        end\n    end\n    if bracket_count == 0\n      \
    \  return true\n    else\n        return false\n    end\nend", "    if brackets\
    \ == \"\" || brackets == \"><\"\n        return false\n    end\n    a, b = split(brackets,\
    \ '><')\n    if length(a) == 0 && length(b) == 0\n        return true\n    elseif\
    \ length(a) == length(b)\n        return true\n    else\n        return false\n\
    \    end\nend", "    count = 0\n    for b in brackets\n        if b == \"<\"\n\
    \            count += 1\n        else\n            count -= 1\n        end\n \
    \       if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend", "    return count_opens(brackets) == count_closes(brackets)\
    \ \nend", "    counter=0\n    #if brackets[1]==\">\" || brackets[end]==\"<\"\n\
    \    #    return false\n    #end\n    for b in brackets\n        if b==\"<\"\n\
    \            counter+=1\n        elseif b==\">\"\n            counter-=1\n   \
    \     end\n    end\n    return counter==0\nend", "    L = 0\n    for i in eachindex(brackets)\n\
    \        if brackets[i] == '<'\n            L += 1\n        elseif brackets[i]\
    \ == '>'\n            L -= 1\n        end\n        if L < 0\n            return\
    \ false\n        end\n    end\n    return L == 0\nend", "    l = 0\n    r = 0\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '<'\n            l\
    \ += 1\n        elseif brackets[i] == '>'\n            r += 1\n        end\n \
    \   end\n    if l == r\n        return true\n    else\n        return false\n\
    \    end\nend", "    #= alternative way to initialize \n    i = 0\n    for b in\
    \ brackets\n        if b == '<'\n            i = i + 1\n        elseif b == '>'\n\
    \            i = i - 1\n        end\n        if i < 0\n            return false\n\
    \        end\n    end\n    return i == 0\n    =#", "    open_brackets = [c for\
    \ c in brackets if c == '<']\n    open_count = length(open_brackets)\n    closed_count\
    \ = length([c for c in brackets if c == '>'])\n    if open_count == closed_count\n\
    \        return true\n    else\n        return false\n    end\nend", "    stack\
    \ = []\n    for (i, bracket) in enumerate(brackets)\n        if bracket == \"\
    <\"\n            push!(stack, bracket)\n        elseif bracket == \">\"\n    \
    \        if isempty(stack)\n                return false\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return true\n    else\n        return false\n    end\nend", "    counter\
    \ = 0\n    for b in brackets\n        if b == '<'\n            counter += 1\n\
    \        elseif b == '>'\n            counter -= 1\n        end\n        if counter\
    \ < 0\n            return false\n        end\n    end\n    return counter == 0\n\
    end\n\"\"\"\n    Exercise 7.4\n    ------------\n    Use a loop to write a function\
    \ called digits_to_number that takes a list of\n    digits, beginning with the\
    \ first digit and ending with the last digit. It should\n    return an integer\
    \ containing those digits in the correct order.\n\"\"\"", "    bracket_left =\
    \ 0 \n    bracket_right = 0 \n    for i in range(1, length(brackets))\n      \
    \  if brackets[i] == \"<\"\n            bracket_left += 1\n        elseif brackets[i]\
    \ == \">\"\n            bracket_right += 1\n        end\n    end\n    if bracket_left\
    \ == bracket_right\n        return true\n    else\n        return false\n    end\n\
    end", "    \n    stack = Stack()\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            push!(stack, bracket)\n        elseif bracket == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "        count = 0\n        for ch in brackets\n     \
    \       if ch == '<'\n                count += 1\n            else\n         \
    \       count -= 1\n            end\n            if count < 0\n              \
    \  return false\n            end\n        end\n        if count == 0\n       \
    \     return true\n        else\n            return false\n        end\n    end\n\
    \ \ncorrect_bracketing(\"<>\")", "    stack = []\n    for character in brackets\n\
    \        if character == \"<\"\n            push!(stack, \"<\")\n        elseif\
    \ character == \">\"\n            if length(stack) > 0\n                pop!(stack)\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    return length(stack) == 0\nend\ncorrect_bracketing(\"<>\")\n \n ",
  "    i = 0\n    for bracket in brackets\n        if bracket == \"<\"\n         \
    \   i = i + 1\n        elseif bracket == \">\"\n            i = i - 1\n      \
    \  end\n    end\n    return i == 0\nend", "    bracket_counter = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            bracket_counter += 1\n \
    \       elseif bracket == '>'\n            bracket_counter -= 1\n        end\n\
    \        if bracket_counter < 0\n            return false\n        end\n    end\n\
    \    if bracket_counter == 0\n        return true\n    else\n        return false\n\
    \    end\nend\nend", "    L = length(brackets)\n    if L == 0\n        return\
    \ true\n    end\n    count = 0\n    for i = 1:L\n        if brackets[i] == '<'\n\
    \            count += 1\n        elseif brackets[i] == '>'\n            count\
    \ -= 1\n        end\n        if count < 0\n            return false\n        end\n\
    \    end\n    if count == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    opener_count = 0\n    for i = 1:length(brackets)\n      \
    \  if brackets[i] == \"<\"\n            opener_count += 1\n        else\n    \
    \        opener_count -= 1\n        end\n        if opener_count < 0\n       \
    \     return false\n        end\n    end\n    return opener_count == 0\nend",
  "    openings = 0\n    closings = 0\n    for i = 1:length(brackets)\n        if\
    \ brackets[i] == '<'\n            openings += 1\n        elseif brackets[i] ==\
    \ '>'\n            closings += 1\n        end\n    end\n    return openings ==\
    \ closings\nend", "        n::Int = 0\n        for c in brackets\n           \
    \     if c == '<'\n                        n += 1\n                elseif c ==\
    \ '>'\n                        n -= 1\n                end\n                if\
    \ n < 0\n                        return false\n                end\n        end\n\
    \        return n == 0\nend", "    count = 0\n    for b in brackets\n        if\
    \ b == '<'\n            count += 1\n        elseif b == '>'\n            count\
    \ -= 1\n        end\n    end\n    return count == 0\nend\ncorrect_bracketing(\"\
    <>\")", "    open = 0\n    close = 0\n    for i in 1:length(brackets)\n      \
    \  if brackets[i] == '<'\n            open += 1\n        else\n            close\
    \ += 1\n        end\n    end\n    return open == close\nend", "    o_count = 0\n\
    \    for c in brackets\n        if c == '<'\n            o_count += 1\n      \
    \  else\n            o_count -= 1\n        end\n        if o_count < 0\n     \
    \       return false\n        end\n    end\n    return o_count == 0\nend\nend",
  "    n = 0\n    for bracket in brackets\n        if bracket == '<'\n           \
    \ n += 1\n        elseif bracket == '>'\n            n -= 1\n        end\n   \
    \     if n < 0\n            return false\n        end\n    end\n    return n ==\
    \ 0\nend", "    left = count(x -> x == '<', brackets)\n    right = count(x ->\
    \ x == '>', brackets)\n    if left == right \n        return true\n    else\n\
    \        return false\n    end\nend", "    if length(brackets) == 0\n        return\
    \ true\n    elseif !(brackets[1] in \"<>\")\n        return false\n    elseif\
    \ brackets[1] == \"<\"\n        if length(brackets) == 1\n            return false\n\
    \        elseif brackets[2] == \">\"\n            return correct_bracketing(brackets[3:end])\n\
    \        else\n            return correct_bracketing(brackets[2:end])\n      \
    \  end\n    else\n        return false\n    end\nend\ncorrect_bracketing(\"<<><>>\"\
    )", "    stack = []\n    flag = true\n    for char in brackets \n        if char\
    \ == '<' \n            push!(stack, char)\n        elseif char == '>' \n     \
    \       if isempty(stack)\n                flag = false\n                break\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    if !isempty(stack) \n        flag = false\n    end\n    return flag\n\
    end", "    counter = 0\n    for c in brackets \n        if c == '<'\n        \
    \    counter += 1\n        else\n            counter -= 1\n        end\n     \
    \   if counter < 0\n            return false\n        end\n    end\n    return\
    \ counter == 0\nend\n# correct_bracketing(\"<>\")", "    N = length(brackets)\n\
    \    stack = Array{Char,1}(undef,N)\n    top = 0 # because we have no elements\n\
    \    for b in brackets\n        if b == '<'\n            top += 1\n          \
    \  stack[top] = b\n        elseif b == '>'\n            if top == 0\n        \
    \        return false\n            elseif stack[top] == '<'\n                top\
    \ -= 1\n            else\n                return false\n            end\n    \
    \    end\n    end\n    if top == 0\n        return true\n    else\n        return\
    \ false\n    end\nend", "    if length(brackets) == 0\n        return true\n \
    \   elseif brackets[1] == '<'\n        return search_string(brackets[2:end], '>')\
    \ && correct_bracketing(brackets[2:end])\n    elseif brackets[1] == '>'\n    \
    \    return false\n    end\nend", "    bracket_stack = Stack{Char}()\n    for\
    \ b in brackets\n        if b == '<'\n            push!(bracket_stack, b)\n  \
    \      elseif b == '>'\n            if length(bracket_stack) == 0\n          \
    \      return false\n            else\n                pop!(bracket_stack)\n \
    \           end\n        end\n    end\n    return length(bracket_stack) == 0\n\
    end", "    open_brackets = 0\n    for character in brackets\n        if character\
    \ == \"<\"\n            open_brackets += 1\n        elseif character == \">\"\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end\nprintln(correct_bracketing(\"<\"))\nprintln(correct_bracketing(\"<>\"))\n\
    println(correct_bracketing(\"<<><>>\"))\nprintln(correct_bracketing(\"><<>\"))",
  "    opening_brackets = []\n    for bracket in brackets\n        if bracket == \"\
    <\"\n            push!(opening_brackets, bracket)\n        elseif bracket == \"\
    >\"\n            if isempty(opening_brackets)\n                return false\n\
    \            else\n                pop!(opening_brackets)\n            end\n \
    \       end\n    end\n    return isempty(opening_brackets)\nend", "    c = 0\n\
    \    for i in brackets\n        if i == \"<\"\n            c += 1\n        elseif\
    \ i == \">\"\n            c -= 1\n        end\n        if c < 0\n            return\
    \ false\n        end\n    end\n    return c == 0\nend\nend", "    return count(x\
    \ -> x == '<', brackets) == count(x -> x == '>', brackets)\nend\ncorrect_bracketing(\"\
    <\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"\
    ><<>\")", "    if length(brackets) == 0\n        return True\n    elseif brackets[1]\
    \ == '<'\n        if length(brackets) == 1\n            return False\n       \
    \ elseif correct_bracketing(brackets[2:end]) == false\n            return false\n\
    \        else\n            return true\n        end\n    elseif brackets[1] ==\
    \ '>'\n        if length(brackets) == 1\n            return False\n        elseif\
    \ correct_bracketing(brackets[2:end]) == false\n            return false\n   \
    \     else\n            return true\n        end\n    end\nend\n ", "    left_count\
    \ = 0\n    right_count = 0\n    for bracket in brackets\n        if bracket ==\
    \ \"<\"\n            left_count += 1\n        elseif bracket == \">\"\n      \
    \      right_count += 1\n        end\n    end\n    left_count == right_count\n\
    end", "    bracket_stack = []\n    for bracket in brackets\n        push!(bracket_stack,\
    \ bracket)\n    end\n    for i in bracket_stack\n        if i == \"<\"\n     \
    \       continue\n        else\n            if pop!(bracket_stack) == \"<\"\n\
    \                continue\n            else\n                return false\n  \
    \          end\n        end\n    end\n    isempty(bracket_stack)\nend", "    if\
    \ length(brackets)%2 != 0 \n        return false\n    end\n    left_count = 0\n\
    \    right_count = 0\n    for i = 1:length(brackets)\n        if brackets[i] ==\
    \ '<'\n            left_count += 1\n        elseif brackets[i] == '>'\n      \
    \      right_count += 1\n        end\n        if right_count > left_count\n  \
    \          return false\n        end\n    end\n    if left_count == right_count\n\
    \        return true\n    else\n        return false\n    end\nend", "    n_left\
    \ = 0\n    n_right = 0\n    for char in brackets\n        if char == \"<\"\n \
    \           n_left += 1\n        else\n            n_right += 1\n        end\n\
    \    end\n    return n_left == n_right\nend", "  count_less = 0\n  count_more\
    \ = 0\n  # traverse the string\n  for i in 1:length(brackets)\n    if brackets[i]\
    \ == '<'\n      count_less += 1\n    else\n      count_more += 1\n    end\n  end\n\
    \  if count_less == count_more\n    return true\n  else\n    return false\n  end\n\
    end", "    count = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            count += 1\n        else\n            count -= 1\n     \
    \   end\n        if count < 0\n            return false\n        end\n    end\n\
    \    if count == 0\n        return true\n    else\n        return false\n    end\n\
    end", "    depth = 0\n    for char in brackets\n        if char == '<'\n     \
    \       depth += 1\n        elseif char == '>'\n            depth -= 1\n     \
    \   end\n        if depth < 0\n            return false\n        end\n    end\n\
    \    return depth == 0\nend\nend", "  return bracket_depth(brackets) == 0\nend",
  "    count = 0\n    for i in 1:length(brackets)\n        if brackets[i] == \"<\"\
    \n            count += 1\n        elseif brackets[i] == \">\"\n            count\
    \ -= 1\n        end\n    end\n    return count == 0\nend", "    count = 0\n  \
    \  for i in range(1,length(brackets))\n        if brackets[i] == '<'\n       \
    \     count += 1\n        elseif brackets[i] == '>'\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    if count == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    if brackets == \"\"\n        return true\n    else\n    \
    \    @assert brackets[1] == '<' || brackets[1] == '>'\n        return count(eachmatch('<',\
    \ brackets)) == count(eachmatch('>', brackets)) && \n            correct_bracketing(brackets[2:end])\n\
    \    end\nend", "    \"\"\"Simple check if all brackets have a closing bracket.\"\
    \"\"\n    open_count::Int64 = 0\n    for bracket::Char in brackets\n        if\
    \ bracket == '<'\n            open_count += 1\n        elseif bracket == '>'\n\
    \            open_count -= 1\n        end\n        if open_count < 0\n       \
    \     return false\n        end\n    end\n    if open_count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend", "    n, counter = length(brackets),\
    \ 0\n    for i in 1:n\n        if brackets[i] == '<'\n            counter += 1\n\
    \        elseif brackets[i] == '>'\n            counter -= 1\n        end\n  \
    \      if counter < 0\n            return false\n        end\n    end\n    return\
    \ counter == 0\nend", "    l = length(brackets)\n    sum = 0\n    for i = 1:l\n\
    \        if brackets[i] == '<'\n            sum += 1\n        elseif brackets[i]\
    \ == '>'\n            sum -= 1\n        end\n        if sum < 0\n            return\
    \ false\n        end\n    end\n    if sum == 0\n        return true\n    else\n\
    \        return false\n    end\nend", "    n = count(brackets,\"<\")\n    m =\
    \ count(brackets,\">\")\n    if n!=m \n        return false\n    else\n      \
    \  start = firstindex(brackets,\"<\")\n        end = lastindex(brackets,\">\"\
    )\n        if start>end\n            return false\n        else\n            return\
    \ true\n        end\n    end\nend", "    \"\"\" brackets is a string of \"<\"\
    \ and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.", "    x=0\n    for i in brackets\n        if i=='<'\n            x=x+1\n\
    \        elseif i=='>'\n            x=x-1\n        end\n        if x<0\n     \
    \       return false\n        end\n    end\n    if x==0\n        return true\n\
    \    else\n        return false\n    end\nend", "    depth = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            depth += 1\n        elseif\
    \ bracket == '>'\n            depth -= 1\n        end\n        if depth < 0\n\
    \            return false\n        end\n    end\n    return depth == 0\nend",
  "    depth = 0\n    for x in brackets\n        if x == '<'\n            depth +=\
    \ 1\n        elseif x == '>'\n            depth -= 1\n        end\n        if\
    \ depth < 0\n            return false\n        end\n    end\n    return depth\
    \ == 0\nend", "    # Base case: If brackets is empty, then return True.\n    if\
    \ brackets == \"\"\n        return true\n    end\n    \n    # Base case: If the\
    \ first character is \">\", then return False.\n    if brackets[1] == '>'\n  \
    \      return false\n    end\n    \n    # Recursive case: If the first character\
    \ is \"<\", then we need to know if\n    # the rest of the string has correct\
    \ bracketing.\n    if brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    end\n    \n    # Recursive case: If the first character is not \"<\", then\
    \ we need to know\n    # if the first character is the closing bracket for a substring\
    \ at the\n    # beginning of the string that has correct bracketing.\n    matching_bracket_index\
    \ = findfirst(brackets, '>')\n    return correct_bracketing(brackets[matching_bracket_index+1:end])\n\
    end", "    # Replace the ??? below with an expression that produces\n    # the\
    \ correct Boolean result.\n    open, close = 0, 0\n    for b in brackets\n   \
    \     if b == '<'\n            open += 1\n        elseif b == '>'\n          \
    \  close += 1\n        end\n    end\n    close <= open\nend", "    if brackets\
    \ == \"\" \n        return true\n    elseif brackets[1] == '<' \n        if findfirst('>',\
    \ brackets) == nothing \n            return false\n        else\n            correct_bracketing(brackets[findfirst('>',\
    \ brackets):end])\n        end\n    else\n        return false\n    end\nend",
  "    if length(brackets) == 0\n        return true\n    elseif length(brackets)\
    \ == 1\n        return false\n    elseif brackets[1] == '>'\n        return false\n\
    \    elseif brackets[1] == '<'\n        if brackets[2] == '>'\n            return\
    \ correct_bracketing(brackets[3:end])\n        elseif brackets[2] == '<'\n   \
    \         return correct_bracketing(brackets[2:end])\n        end\n    end\nend",
  "    # Your code here\n    left = count(x -> x == '<', brackets)\n    right = count(x\
    \ -> x == '>', brackets)\n    if left == right\n        return true\n    else\n\
    \        return false\n    end\nend\n \n \n \n ", "    n = length(brackets)\n\
    \    counter = 0\n    for i in 1:n\n        if brackets[i] == '<'\n          \
    \  counter += 1\n        elseif brackets[i] == '>'\n            counter -= 1\n\
    \        end\n        if counter < 0\n            return false\n        end\n\
    \    end\n    if counter == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    count = 0\n    for b in brackets\n        if b == \"<\"\n\
    \            count += 1\n        elseif b == \">\"\n            count -= 1\n \
    \       end\n        if count < 0\n            return false\n        end\n   \
    \ end\n    if count == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    # YOUR CODE HERE\n    sum = 0\n    for i in brackets\n  \
    \      if i == '<'\n            sum = sum + 1\n        elseif i == '>'\n     \
    \       sum = sum - 1\n        end\n        if sum < 0\n            return false\n\
    \        end\n    end\n    return sum == 0\nend", "    opening = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            opening += 1\n        elseif\
    \ bracket == '>'\n            opening -= 1\n        end\n    end\n    return opening\
    \ == 0\nend", "    n = 0\n    for c in brackets\n        if c == '<'\n       \
    \     n += 1\n        elseif c == '>'\n            n -= 1\n        end\n     \
    \   if n < 0\n            return false\n        end\n    end\n    return n ==\
    \ 0\nend", "    \n    count = 0\n    for i in brackets\n        if i == '<'\n\
    \            count += 1\n        elseif i == '>'\n            count -= 1\n   \
    \     end\n        if count < 0\n            return false\n        end\n    end\n\
    \    if count != 0\n        return false\n    end\n    return true\nend", "  \
    \  l = length(brackets)\n    i = 1\n    counter = 0\n    while i <= l\n      \
    \  if brackets[i] == \"<\"\n            counter += 1\n        elseif brackets[i]\
    \ == \">\"\n            counter -= 1\n        end\n        if counter < 0\n  \
    \          return false\n        end\n        i += 1\n    end\n    return counter\
    \ == 0\nend", "    left_counter = 0\n    right_counter = 0\n    for item in brackets\n\
    \        if item == \"<\"\n            left_counter += 1\n        elseif item\
    \ == \">\"\n            right_counter += 1\n        end\n    end\n    if left_counter\
    \ == right_counter\n        return true\n    else\n        return false\n    end\n\
    end", "    brackets_stack = Stack(length(brackets))\n    for i in brackets\n \
    \       push!(brackets_stack, i)\n    end\n    opening_brackets = []\n    while\
    \ !isempty(brackets_stack)\n        i = pop!(brackets_stack)\n        if i ==\
    \ '<'\n            push!(opening_brackets, i)\n        else\n            if isempty(opening_brackets)\n\
    \                return false\n            else\n                pop!(opening_brackets)\n\
    \            end\n        end\n    end\n    if isempty(opening_brackets)\n   \
    \     return true\n    else\n        return false\n    end\nend", "    open_count\
    \ = 0\n    closed_count = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == \"<\"\n            open_count += 1\n        elseif brackets[i] == \">\"\n\
    \            closed_count += 1\n        end\n    end\n    return open_count ==\
    \ closed_count\nend\n\"\"\" brackets is a string of \"<\" and \">\".\n    return\
    \ True if every opening bracket has a corresponding closing bracket and\n    all\
    \ closing brackets have a corresponding opening bracket.", "    opened_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      opened_brackets += 1\n        elseif brackets[i] == '>'\n            opened_brackets\
    \ -= 1\n        end\n        if opened_brackets < 0\n            return false\n\
    \        end\n    end\n    return opened_brackets == 0\nend", "  open::Int = 0\n\
    \  closed::Int = 0\n  for b in brackets\n    if b == '<'\n      open += 1\n  \
    \  elseif b == '>'\n      closed += 1\n    end\n  end\n  return open == closed\n\
    end", "    left_count::Int = 0\n    for char in brackets\n        if char == '<'\n\
    \            left_count += 1\n        elseif char == '>'\n            left_count\
    \ -= 1\n        end\n        if left_count < 0\n            return false\n   \
    \     end\n    end\n    return left_count == 0\nend", "    total_op=count(x->x=='<',brackets)\n\
    \    total_close=count(x->x=='>',brackets)\n    if total_op==total_close\n   \
    \     return true\n    else\n        return false\n    end\nend", "    count_open\
    \ = 0 \n    count_close = 0 \n    for x in brackets \n        if x == \"<\" \n\
    \            count_open += 1 \n        elseif x == \">\" \n            count_close\
    \ += 1 \n        end \n    end \n    return count_open == count_close \nend \n\
    \    \n ", "    amount = 0\n    for bracket in brackets\n        if bracket ==\
    \ '<'\n            amount += 1\n        elseif bracket == '>'\n            amount\
    \ -= 1\n        end\n        if amount < 0\n            return false\n       \
    \ end\n    end\n    return amount == 0\nend", "    result = 0\n    for a in brackets\
    \ \n        if a == \"<\"\n            result += 1\n        elseif a == \">\"\n\
    \            result -= 1\n        end\n    end\n    return result == 0\nend",
  "    #use assert to check input type\n    assert(isstring(brackets),\"input should\
    \ be string!\")\n    #use sum to check if the number of < is equal to the number\
    \ of >\n    return sum(x=='<' for x in brackets) == sum(x=='>' for x in brackets)\
    \ \nend\n \n ", "    count_l_brackets = 0\n    count_r_brackets = 0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i] == '<'\n            count_l_brackets\
    \ += 1\n        else\n            count_r_brackets += 1\n        end\n    end\n\
    \    if count_l_brackets == count_r_brackets\n        return true\n    else\n\
    \        return false\n    end\nend", "    n = 0\n    for i in brackets\n    \
    \    if i == \"<\"\n            n = n + 1\n        elseif i == \">\"\n       \
    \     n = n - 1\n        end\n        if n < 0\n            return false\n   \
    \     end\n    end\n    if n == 0\n        return true\n    else\n        return\
    \ false\n    end\nend", "    left_brackets = 0\n    right_brackets = 0\n    for\
    \ c in brackets\n        if c == '<'\n            left_brackets += 1\n       \
    \ elseif c == '>'\n            right_brackets += 1\n        end\n    end\n   \
    \ return left_brackets == right_brackets\nend", "    open_count = 0\n    close_count\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      open_count += 1\n        elseif brackets[i] == '>'\n            close_count\
    \ += 1\n        end\n    end\n    if open_count == close_count\n        return\
    \ true\n    else\n        return false\n    end\nend", "    num_opening = count(x\
    \ -> x == '<', brackets)\n    num_closing = count(x -> x == '>', brackets)\n \
    \   return num_opening == num_closing\nend", "    n=0\n    for c in brackets\n\
    \        if c=='<'\n            n+=1\n        elseif c=='>'\n            n-=1\n\
    \        end\n        if n<0\n            return false\n        end\n    end\n\
    \    if n==0\n        return true\n    else\n        return false\n    end\nend",
  "    count = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n\
    \            count += 1\n        elseif brackets[i] == '>'\n            count\
    \ -= 1\n        end\n        if count < 0\n            return false\n        end\n\
    \    end\n    if count == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    stack = Deque([])\n    for c in brackets \n        if c ==\
    \ '<'\n            push!(stack, c)\n        elseif c == '>'\n            if isempty(stack)\n\
    \                return false\n            else \n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ stack = []\n    for b in brackets\n        if b == '<'\n            push!(stack,\
    \ b)\n        else\n            if empty!(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return empty!(stack)\nend", "    openbrackets = 0\n    for b in\
    \ brackets\n        if b == '<'\n            openbrackets += 1\n        elseif\
    \ b == '>'\n            openbrackets -= 1\n        end\n        if openbrackets\
    \ < 0\n            return false\n        end\n    end\n    if openbrackets ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend", "   \
    \ b = 0\n    for i in brackets \n        if i == '<' \n            b += 1\n  \
    \      elseif i == '>'\n            b -= 1\n        end\n        if b < 0 \n \
    \           return false\n        end\n    end\n    if b != 0 \n        return\
    \ false\n    end\n    return true\nend", "    stack = [] \n    for bracket in\
    \ brackets \n        if bracket == \"<\"\n            push!(stack, bracket)\n\
    \        else\n            if isempty(stack) \n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    br = 0\n    for i = 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            br += 1\n        elseif brackets[i]\
    \ == '>'\n            br -= 1\n        end\n        if br < 0\n            return\
    \ false\n        end\n    end\n    if br == 0\n        return true\n    else\n\
    \        return false\n    end\nend\n# test\nprintln(correct_bracketing(\"<\"\
    ))\nprintln(correct_bracketing(\"<>\"))\nprintln(correct_bracketing(\"<<><>>\"\
    ))\nprintln(correct_bracketing(\"><<>\"))", "    if isempty(brackets)\n      \
    \  return true\n    elseif isequal(first(brackets),'>')\n        return false\n\
    \    elseif isequal(last(brackets),'<')\n        return false\n    else\n    \
    \    return correct_bracketing(join(dropfirst(split(brackets, '>')),'>'))\n  \
    \  end\nend", "  if brackets == \"\"\n    return true\n  elseif (brackets[1] ==\
    \ '<') && (brackets[end] == '>')\n    return correct_bracketing(brackets[2:end-1])\n\
    \  else\n    return false\n  end\nend", "    if length(brackets) % 2 != 0\n  \
    \      return false\n    end\n    i = 0\n    j = 0\n    for k in 1:length(brackets)\n\
    \        if brackets[k] == '<'\n            i += 1\n        else\n           \
    \ j += 1\n        end\n    end\n    return i == j\nend", "    stack = []\n   \
    \ for i = 1:length(brackets)\n        bracket = brackets[i]\n        if bracket\
    \ == '<'\n            push!(stack, '<')\n        elseif bracket == '>'\n     \
    \       if isempty(stack)\n                return false\n            else\n  \
    \              pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    return brackets == \"\" || isopen(brackets[1]) &&\
    \ correct_bracketing(brackets[2:end]) || isclose(brackets[1]) && correct_bracketing(brackets[2:end])\n\
    end", "  if brackets == \"<\"\n    return false\n  end\n  if brackets == \"\"\n\
    \    return true\n  end\n  if brackets[1] == \">\"\n    return false\n  end\n\
    \  if brackets[end] == \"<\"\n    return false\n  end\n  return correct_bracketing(replace(brackets,\
    \ \"<>\", \"\"))\nend", "    i = 0\n    for j = 1:length(brackets)\n        if\
    \ brackets[j] == '<'\n            i += 1\n        else\n            i -= 1\n \
    \       end\n        if i < 0\n            return false\n        end\n    end\n\
    \    return i == 0\nend", "    opens = 0\n    for bracket in brackets\n      \
    \  if bracket == '<'\n            opens += 1\n        elseif bracket == '>'\n\
    \            opens -= 1\n        end\n        if opens < 0\n            return\
    \ false\n        end\n    end\n    if opens == 0\n        return true\n    else\n\
    \        return false\n    end\nend", "    match_count = 0\n    for letter in\
    \ brackets \n        if letter == \"<\" \n            match_count += 1\n     \
    \   elseif letter == \">\" \n            match_count -= 1\n        end\n     \
    \   if match_count < 0\n            return false\n        end\n    end\n    return\
    \ match_count == 0\nend\n\"\"\"\n    >>> brackets_to_len(\"<<><>>\")\n    6\n\
    \    >>> brackets_to_len(\"<>\")\n    2\n    >>> brackets_to_len(\"<>>\")\n  \
    \  2\n    >>> brackets_to_len(\"<<><>>><\")\n    6\n    >>> brackets_to_len(\"\
    <><><>><><>\")\n    8\n    \"\"\"", "   stack = []\n   for b in brackets\n   \
    \    if b == '<'\n           push!(stack, b)\n       elseif b == '>'\n       \
    \    if length(stack) == 0\n               return false\n           else\n   \
    \            pop!(stack)\n           end\n       end\n   end\n   return length(stack)\
    \ == 0\nend", "    \n    # If the length of the string is odd, the string cannot\
    \ possibly have a \n    # matching opening and closing bracket. Therefore, return\
    \ false.\n    if mod(length(brackets), 2) == 1\n        return false\n    end\n\
    \    \n    # Create a new empty stack to store open brackets.\n    open_brackets\
    \ = Stack{Char}()\n    \n    # Loop through the characters in the string.\n  \
    \  for c in brackets\n        \n        # If the character is an opening bracket,\
    \ add it to the stack.\n        if c == '<'\n            push!(open_brackets,\
    \ c)\n            \n        # If the character is a closing bracket, pop the most\
    \ recent open bracket from the stack.\n        elseif c == '>'\n            if\
    \ isempty(open_brackets)\n                return false\n            else\n   \
    \             pop!(open_brackets)\n            end\n        end\n    end\n   \
    \ \n    # If the stack is empty, return true. Otherwise, return false.\n    if\
    \ isempty(open_brackets)\n        return true\n    else\n        return false\n\
    \    end\nend", "    open::Int64 = 0\n    for b in brackets\n        if b == '<'\n\
    \            open += 1\n        else\n            open -= 1\n        end\n   \
    \     if open < 0\n            return false\n        end\n    end\n    return\
    \ open == 0\nend", "    if brackets[1] == \">\"\n        return false\n    end\n\
    \    i = 1\n    j = 1\n    while i < length(brackets) && j < length(brackets)\n\
    \        if brackets[i] == \"<\"\n            i += 1\n        elseif brackets[j]\
    \ == \">\"\n            j += 1\n        elseif brackets[i] == \">\" && brackets[j]\
    \ == \"<\"\n            return false\n        end\n    end\n    if i == j\n  \
    \      return true\n    else\n        return false\n    end\nend", "    n = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            n += 1\n\
    \        elseif bracket == '>'\n            n -= 1\n        end\n        if n\
    \ < 0\n            return false\n        end\n    end\n    return n == 0\nend",
  "    if brackets == \"<\"\n        return false\n    end\n    left_brackets = 0\n\
    \    right_brackets = 0\n    for x in brackets\n        if x == \"<\"\n      \
    \      left_brackets += 1\n        elseif x == \">\"\n            right_brackets\
    \ += 1\n        end\n    end\n    if left_brackets != right_brackets\n       \
    \ return false\n    end\n    last_left = false\n    for x in brackets\n      \
    \  if x == \"<\"\n            last_left = true\n        elseif x == \">\"\n  \
    \          if last_left == false\n                return false\n            end\n\
    \            last_left = false\n        end\n    end\n    return true\nend", " \
    \   open_count = 0 \n    for bracket in brackets \n        if bracket == \"<\"\
    \ \n            open_count += 1 \n        elseif bracket == \">\" \n         \
    \   open_count -= 1 \n        else \n            error(\"Not a bracket\") \n \
    \       end \n        if open_count < 0 \n            return false \n        end\
    \ \n    end \n    return open_count == 0 \nend \n \n ", "    opening_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            opening_brackets\
    \ += 1\n        else\n            opening_brackets -= 1\n        end\n       \
    \ if opening_brackets < 0\n            return false\n        end\n    end\n  \
    \  return opening_brackets == 0\nend", "    count = 0\n    for i in brackets \n\
    \        if i == '<'\n            count += 1\n        elseif i == '>'\n      \
    \      count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    bracket_count::Int =\
    \ 0\n    for i::Int in 1:length(brackets)\n        if brackets[i] == \"<\"\n \
    \           bracket_count += 1\n        elseif brackets[i] == \">\"\n        \
    \    bracket_count -= 1\n        end\n        if bracket_count < 0\n         \
    \   return false\n        end\n    end\n    return bracket_count == 0\nend", " \
    \   open_brackets = count(x -> x == \"<\", brackets)\n    close_brackets = count(x\
    \ -> x == \">\", brackets)\n    return open_brackets == close_brackets\nend",
  "    left_count = 0\n    right_count = 0\n    for s in brackets\n        if s ==\
    \ '<'\n            left_count += 1\n        elseif s == '>'\n            right_count\
    \ += 1\n        end\n    end\n    if left_count == right_count\n        return\
    \ true\n    else\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0 \n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == \"<\" && brackets[end] == \">\"\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    else\n        return false\n    end\n\
    end\nend", "    num_opening_brackets = 0\n    for bracket in brackets\n      \
    \  if bracket == \"<\"\n            num_opening_brackets += 1\n        else\n\
    \            num_opening_brackets -= 1\n        end\n        if num_opening_brackets\
    \ < 0\n            return false\n        end\n    end\n    return num_opening_brackets\
    \ == 0\nend", "    stack = []\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            push!(stack, bracket)\n        else\n            if stack\
    \ == []\n                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return stack == []\nend", "    t1\
    \ = String[]\n    t2 = String[]\n    for i in brackets\n        if i == '<'\n\
    \            push!(t1,i)\n        else\n            push!(t2,i)\n        end\n\
    \    end\n    return length(t1) == length(t2) \nend", "    for i in 1:length(brackets)\n\
    \        j = 1\n        if brackets[i] == '<'\n            j += 1\n        elseif\
    \ brackets[i] == '>'\n            j -= 1\n        end\n        if j == 0\n   \
    \         return false\n        end\n    end\n    return true\nend", "    if length(brackets)==0\
    \ return true end\n    n=0\n    for i in 1:length(brackets)\n        if brackets[i]=='<'\
    \ n+=1\n        elseif brackets[i]=='>' n-=1 end\n        if n<0 return false\
    \ end\n    end\n    if n==0 return true else return false end\nend", "  string_stack\
    \ = Stack{Char}()\n  for c in brackets\n    if c == '<'\n      push!(string_stack,\
    \ c)\n    elseif c == '>'\n      if isempty(string_stack)\n        return false\n\
    \      else\n        pop!(string_stack)\n      end\n    end\n  end\n  if isempty(string_stack)\n\
    \    return true\n  else\n    return false\n  end\nend", "    n = 0\n    for i\
    \ in brackets\n        if i == \"<\"\n            n += 1\n        elseif i ==\
    \ \">\"\n            n -= 1\n        end\n        if n < 0\n            return\
    \ false\n        end\n    end\n    return n == 0\nend", "    balance::Int = 0\n\
    \    for c::Char in brackets\n        if c == '<'\n            balance += 1\n\
    \        elseif c == '>'\n            balance -= 1\n        end\n        if balance\
    \ < 0\n            return false\n        end\n    end\n    return balance == 0\n\
    end", "    num_open::Int = 0\n    num_close::Int = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            num_open += 1\n        elseif bracket\
    \ == '>'\n            num_close += 1\n        end\n    end\n    return num_open\
    \ == num_close\nend", "    stack = []\n    for bracket in brackets\n        push!(stack,\
    \ bracket)\n    end\n    while size(stack) > 0\n        if stack[end] == '<'\n\
    \            stack.pop()\n        else\n            return false\n        end\n\
    \    end\n    return true\nend", "    open_count = 0 \n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_count += 1\n        elseif bracket\
    \ == '>'\n            open_count -= 1\n        end\n        if open_count < 0\n\
    \            return false\n        end\n    end\n    return open_count == 0\n\
    end\nend", "    if brackets == \"\" return true end\n    opening_brackets = Array{Int}(undef,\
    \ 0)\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n       \
    \     push!(opening_brackets, i)\n        else\n            if length(opening_brackets)\
    \ == 0\n                return false\n            else\n                pop!(opening_brackets)\n\
    \            end\n        end\n    end\n    return length(opening_brackets) ==\
    \ 0\nend", "    bracket_stack = [] # create an empty stack to keep track of remaining\
    \ brackets\n    for c in brackets # iterate through the string\n        if c ==\
    \ \"<\"\n            push!(bracket_stack, c) # push opening brackets to the stack\n\
    \        elseif c == \">\"\n            if length(bracket_stack) == 0 # if there\
    \ are no opening brackets left\n                return false # then there's an\
    \ extra closing bracket\n            else\n                pop!(bracket_stack)\
    \ # otherwise pop the most recent opening bracket\n            end\n        end\n\
    \    end\n    return length(bracket_stack) == 0 # once we've iterated through\
    \ the string, we should have an empty stack\nend", "    num::Int = 0\n    for\
    \ b in brackets\n        if b == \"<\"\n            num = num + 1\n        elseif\
    \ b == \">\"\n            num = num - 1\n        end\n        if num < 0\n   \
    \         return false\n        end\n    end\n    if num == 0\n        return\
    \ true\n    else\n        return false\n    end\nend", "    stack = []\n    if\
    \ length(brackets)==0\n        return true\n    end\n    for i in 1:length(brackets)\n\
    \        if brackets[i]=='>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    else\n            push!(stack,'<')\n        end\n    end\n    return isempty(stack)\n\
    end\n# Try it!\ncorrect_bracketing(\"<>\")", "    l = 0\n    r = 0\n    for c\
    \ in brackets\n        if c == '<'\n            l = l + 1\n        elseif c ==\
    \ '>'\n            r = r + 1\n        end\n    end\n    return l == r\nend", " \
    \   if length(brackets)==1 \n        return false\n    end\n    bracket=0\n  \
    \  for i=1:length(brackets)\n        if brackets[i]==\"<\"\n            bracket+=1\n\
    \        else\n            bracket-=1\n        end\n        if bracket<0\n   \
    \         return false\n        end\n    end\n    if bracket==0\n        return\
    \ true\n    else\n        return false\n    end\nend", "    num_open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            num_open_brackets\
    \ += 1\n        elseif b == '>'\n            num_open_brackets -= 1\n        end\n\
    \        if num_open_brackets < 0\n            return false\n        end\n   \
    \ end\n    return num_open_brackets == 0\nend", "    cnt=0\n    for i in 1:length(brackets)\n\
    \        if brackets[i]=='<'\n            cnt+=1\n        elseif brackets[i]=='>'\n\
    \            cnt-=1\n        end\n        if cnt<0\n            return false\n\
    \        end\n    end\n    if cnt==0\n        return true\n    else\n        return\
    \ false\n    end\nend", "    stack = []\n    for bracket in brackets\n       \
    \ if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if !isempty(stack) && pop!(stack) == '<'\n             \
    \   continue\n            else\n                return false\n            end\n\
    \        end\n    end\n    isempty(stack)\nend", "    open_bracket_count = 0\n\
    \    close_bracket_count = 0\n    for c in brackets\n        if c == '<'\n   \
    \         open_bracket_count += 1\n        elseif c == '>'\n            close_bracket_count\
    \ += 1\n        end\n    end\n    return open_bracket_count == close_bracket_count\n\
    end", "    n = 0\n    for bracket in brackets\n        if bracket == '<'\n   \
    \         n += 1\n        elseif bracket == '>'\n            n -= 1\n        end\n\
    \        if n < 0\n            return false\n        end\n    end\n    return\
    \ n == 0\nend", "    # YOUR CODE HERE\nend", "    max_so_far = 0\n    min_so_far\
    \ = 0\n    for s in brackets\n        if s == '<'\n            max_so_far += 1\n\
    \        elseif s == '>'\n            max_so_far -= 1\n            min_so_far\
    \ -= 1\n        end\n        if max_so_far < 0 || min_so_far < 0\n           \
    \ return false\n        end\n    end\n    return max_so_far == 0\nend\n\"\"\"\
    \ \n    flip_letters is a string. Return a string with all the letters reversed,\
    \ except for the vowels.", "    if search(r\"<<|>>\", brackets) != nothing \n\
    \        return false \n    else \n        return count(\">\", brackets) == count(\"\
    <\", brackets) \n    end \nend ", "    count = 0\n    for b in brackets \n   \
    \     if b == '<' \n            count += 1\n        elseif b == '>'\n        \
    \    count -= 1\n        end \n        if count < 0 \n            return false\n\
    \        end \n    end \n    return count == 0\nend ", "    number_of_opening_brackets\
    \ = count(x -> x == '<', brackets)\n    number_of_closing_brackets = count(x ->\
    \ x == '>', brackets)\n    if number_of_opening_brackets == number_of_closing_brackets\n\
    \        return true\n    else\n        return false\n    end\nend", "    leftcount\
    \ = 0\n    for i = 1:length(brackets)\n        if brackets[i] == '<'\n       \
    \     leftcount = leftcount + 1\n        elseif brackets[i] == '>'\n         \
    \   leftcount = leftcount - 1\n        end\n        if leftcount < 0\n       \
    \     return false\n        end\n    end\n    return leftcount == 0\nend", " \
    \   open_bracket = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            open_bracket += 1\n        else\n            open_bracket\
    \ -= 1\n        end\n    end\n    return open_bracket == 0 ? true : false\nend",
  "    count = 0 \n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n\
    \            count += 1\n        elseif brackets[i] == '>'\n            count\
    \ -= 1\n        end\n        if count < 0\n            return false\n        end\n\
    \    end\n    return count == 0\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
