name: HumanEval_35_max_element
language: jl
prompt: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n\
  \    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
  \    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
  \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\n\
  end\n"
completions: ["    n = length(l)\n    m = l[1]\n    for i in 2:n\n        if l[i]\
    \ > m\n            m = l[i]\n        end\n    end\n    return m\nend", "    max_element\
    \ = l[1]\n    for element in l\n        if element > max_element\n           \
    \ max_element = element\n        end\n    end\n    return max_element\nend", " \
    \   mx = l[1]\n    for i in l\n        if mx < i\n            mx = i\n       \
    \ end\n    end\n    return mx\nend", "    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    mx = 0\n    for i in l\n        if mx < i\n            mx =\
    \ i\n        end\n    end\n    return mx\nend", "    m = -2147483647\n    for\
    \ i in l\n        if i > m\n            m = i\n        end\n    end\n    return\
    \ m\nend", "    return maximum(l)\nend", "    max_el = l[1]\n    for i in l\n\
    \        if max_el < i\n            max_el = i\n        end\n    end\n    return\
    \ max_el\nend\n ", "    max = 0\n    for i in 1:length(l)\n        if l[i] > max\n\
    \            max = l[i]\n        end\n    end\n    return max\nend", "    m::Int64\
    \ = l[1]\n    for i::Int64 in l\n        if i > m\n            m = i\n       \
    \ end\n    end\n    return m\nend", "    max = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    temp = l[1]\n    for i = 2:length(l)\n        if l[i] > temp\n\
    \            temp = l[i]\n        end\n    end\n    return temp\nend", "    m\
    \ = l[1]\n    for i = 2:length(l)\n        if m < l[i]\n            m = l[i]\n\
    \        end\n    end\n    return m\nend", "    maximum = l[1]\n    for x = 2:length(l)\n\
    \        if l[x] > maximum\n            maximum = l[x]\n        end\n    end\n\
    \    return maximum\nend", "    if length(l) == 0\n        return 0\n    end\n\
    \    if length(l) == 1\n        return l[1]\n    end\n    if l[1] > l[2]\n   \
    \     l[2] = l[1]\n    end\n    return max_element(l[2:end])\nend", "    l[end]\n\
    end", "    mx = 0\n    for el in l\n        if el > mx\n            mx = el\n\
    \        end\n    end\n    return mx\nend", "  n::Int64 = 0\n  for i in 1:length(l)\n\
    \    if l[i] > n\n      n = l[i]\n    end\n  end\n  return n\nend", "  maximo\
    \ = l[1]\n  for i in l\n    if i > maximo\n      maximo = i\n    end\n  end\n\
    \  return maximo\nend", "    # define `max` as a local function to avoid name\
    \ clashes with the built-in function `max`\n    function max(x::Int64, y::Int64)::Int64\n\
    \        if x < y\n            return y\n        else\n            return x\n\
    \        end\n    end\n    # find maximum element by inspecting each element of\
    \ the list\n    max_value = l[1]\n    for i = 2:length(l)\n        max_value =\
    \ max(max_value, l[i])\n    end\n    return max_value\nend\n \n# execute the doctests\
    \ in this cell\n# to run all doctests, execute:\n#   include(\"arithmetic_functions.jl\"\
    ); Pkg.test(\"JuliaTutorial\")\n# to run a specific doctest, execute:\n#   @doctest\
    \ arithmetic_functions.jl \"max_element\"\n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "    i = 1\n    max_i = 1\n    while\
    \ i <= length(l)\n        if l[i] > l[max_i]\n            max_i = i\n        end\n\
    \        i += 1\n    end\n    return l[max_i]\nend", "    el = l[1]\n    for i\
    \ in l[2:end]\n        if i > el\n            el = i\n        end\n    end\n \
    \   return el\nend", "    max = l[1]\n    for i in l[2:end]\n        if max <\
    \ i\n            max = i\n        end\n    end\n    return max\nend", "    l_max\
    \ = l[1]\n    for i in l\n        if i > l_max\n            l_max = i\n      \
    \  end\n    end\n    return l_max\nend", "    max = 0\n    for el in l\n     \
    \   if el > max\n            max = el\n        end\n    end\n    return max\n\
    end", "    l = sort(l)\n    l[end]\nend", "    return maximum(l)\nend", "    m\
    \ = l[1]\n    for i = 2:length(l)\n        if m < l[i]\n            m = l[i]\n\
    \        end\n    end\n    return m\nend", "    max_element = l[1] \n    for j\
    \ in 2:length(l)\n        if l[j] > max_element\n            max_element = l[j]\n\
    \        end\n    end\n    return max_element\nend", "    max = l[1]\n    for\
    \ el in l[2:end]\n        if el > max\n            max = el\n        end\n   \
    \ end\n    return max\nend", "    max = l[1]\n    for i in l\n        if i > max\n\
    \            max = i\n        end\n    end\n    return max\nend", "    m = l[1]\
    \ \n    for i = 2:length(l) \n        if l[i] > m\n            m = l[i]\n    \
    \    end\n    end\n    return m\nend", "    max_el = l[1]\n    for i in l[2:end]\n\
    \        if max_el < i\n            max_el = i\n        end\n    end\n    return\
    \ max_el\nend", "    out = 0\n    for i in l\n        if i > out\n           \
    \ out = i\n        end\n    end\n    return out\nend", "    lMax = l[1]\n    for\
    \ i = 2:length(l)\n        if l[i] > lMax\n            lMax = l[i]\n        end\n\
    \    end\n    return lMax\nend", "    return maximum(l)\nend", "    if length(l)==1\
    \ \n        return l[1]\n    else \n        return max(l[1], max_element(l[2:end]))\n\
    \    end\nend", "    max::Int64 = l[1] \n    for x in l \n        if x > max \n\
    \            max = x \n        end \n    end \n    return max \nend ", "    return\
    \ maximum(l)\nend", "    m = l[1]\n    for x in l\n        if x > m\n        \
    \    m = x\n        end\n    end\n    return m\nend", "    M = l[1]\n    for i\
    \ in 2:length(l)\n        if l[i] > M\n            M = l[i]\n        end\n   \
    \ end\n    return M\nend", "    max_value = l[1]\n    for i = 2:length(l)\n  \
    \      if l[i] > max_value\n            max_value = l[i]\n        end\n    end\n\
    \    return max_value\nend", "    m = l[1]\n    for i in l[2:end]\n        if\
    \ i > m\n            m = i\n        end\n    end\n    return m\nend", "    m::Int64\
    \ = l[1]\n    for i in 2:size(l)[1]\n        if l[i] > m\n            m = l[i]\n\
    \        end\n    end\n    return m\nend\n \nprint(max_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10]))", "  max = l[1]\n  for i in l\n    if i > max\n    \
    \  max = i\n    end\n  end\n  return max\nend", "    maximum(l)\nend", "    max\
    \ = l[1]\n    for i in l\n        if i > max\n            max = i\n        end\n\
    \    end\n    return max\nend", "    n = length(l)\n    if n == 1\n        return\
    \ l[1]\n    else\n        return max(l[n], max_element(l[1:n-1]))\n    end\nend",
  "    max = 0\n    for i in l\n        if i > max\n            max = i\n        end\n\
    \    end\n    return max\nend", "    a = 0\n    for i in 1:length(l)\n       \
    \ if a < l[i]\n            a = l[i]\n        end\n    end\n    return a\nend",
  "    max = l[1]\n    for i in l\n        if i > max\n            max = i\n     \
    \   end\n    end\n    return max\nend", "    max = l[1]\n    for i in l\n    \
    \    if i > max\n            max = i\n        end\n    end\n    return max\nend",
  "    max = l[1]\n    for i = 2:length(l)\n        if l[i] > max\n            max\
    \ = l[i]\n        end\n    end\n    return max\nend", "    x = 0\n    for i =\
    \ 1:length(l)\n        if l[i] > x\n            x = l[i]\n        end\n    end\n\
    \    return x\nend", "    m = l[1]\n    for element in l\n        if element >\
    \ m\n            m = element\n        end\n    end\n    return m\nend", "    out\
    \ = 0\n    for i in l\n        if i > out\n            out = i\n        end\n\
    \    end\n    return out\nend\n@assert max_element([1, 2, 3]) == 3\n@assert max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123", "    if length(l) == 0\n     \
    \   return nothing\n    end\n    if length(l) == 1\n        return l[1]\n    end\n\
    \    if length(l) == 2\n        if l[1] < l[2]\n            return l[2]\n    \
    \    else\n            return l[1]\n        end\n    end\n    l1 = l[1:2:end]\n\
    \    l2 = l[2:2:end]\n    m1 = max_element(l1)\n    m2 = max_element(l2)\n   \
    \ if m1 < m2\n        return m2\n    else\n        return m1\n    end\nend", " \
    \   max = l[1]\n    for i = 2:length(l)\n        if l[i] > max\n            max\
    \ = l[i]\n        end\n    end\n    return max\nend", "    if length(l) == 0\n\
    \        error(\"Empty list\")\n    end\n    max = l[1]\n    for x in l\n    \
    \    if x > max\n            max = x\n        end\n    end\n    return max\nend",
  "    \n    if length(l) == 1\n        return l[1]\n    else\n        maximum(l[1],\
    \ max_element(l[2:end]))\n    end\nend", "    return maximum(l)\nend;\nmax_element([1,\
    \ 2, 3])", "    max = l[1]\n    for i in l\n        if i > max\n            max\
    \ = i\n        end\n    end\n    return max\nend", "    max = l[1]\n    for i\
    \ in 1:length(l)\n        if l[i] > max\n            max = l[i]\n        end\n\
    \    end\n    return max\nend\n \n \n\"\"\"Return maximum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    max = 0\n    for i in l\n\
    \        if i > max\n            max = i\n        end\n    end\n    return max\n\
    end", "    length = size(l)[1]\n    max = l[1]\n    for i = 2:length\n       \
    \ if l[i] > max\n            max = l[i]\n        end\n    end\n    return max\n\
    end", "  max = l[1]\n  for i in l[2:end]\n    if i > max\n      max = i\n    end\n\
    \  end\n  return max\nend", "    ret = l[1]\n    for i in l\n        if i > ret\n\
    \            ret = i\n        end\n    end\n    return ret\nend", "    return\
    \ reduce(max, l)\nend", "    return maximum(l)\nend\n ", "    max = l[1]\n   \
    \ for i in l\n        if i > max\n            max = i\n        end\n    end\n\
    \    return max\nend\n# TODO: Write a function that returns the mean of elements\
    \ in a list.\n\"\"\"Return mean of elements in the list.\n    >>> mean([1, 2,\
    \ 3])\n    2.0\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    10.909090909090908\n\
    \    \"\"\"", "    max_value = l[1]\n    for i in 2:length(l)\n        if l[i]\
    \ > max_value\n            max_value = l[i]\n        end\n    end\n    return\
    \ max_value\nend", "    \"\"\"Return maximum element in the list.\n    >>> max_element([1,\
    \ 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"\n    m = l[1]\n    for i in l\n        if i > m\n       \
    \     m = i\n        end\n    end\n    return m\nend", "    \"\"\"Return maximum\
    \ element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max = l[1]\n\
    \    for i in l\n        if i > max\n            max = i\n        end\n    end\n\
    \    return max\nend", "    return reduce(max, l)\nend", "    if length(l) ==\
    \ 0\n        error(\"Empty list is not acceptable!\")\n    end\n    i = 1\n  \
    \  max = l[1]\n    while i <= length(l)\n        if l[i] > max\n            max\
    \ = l[i]\n        end\n        i += 1\n    end\n    return max\nend", "    max\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > max\n            max = l[i]\n\
    \        end\n    end\n    return max\nend", "    max=0\n    n=length(l)\n   \
    \ for i=1:n\n        if l[i]>max\n            max=l[i]\n        end\n    end\n\
    \    return max\nend", "    res = l[1]\n    for x in l[2:end]\n        if x >\
    \ res\n            res = x\n        end\n    end\n    return res\nend", "    maximum\
    \ = l[1]\n    for i in l\n        if i > maximum\n            maximum = i\n  \
    \      end\n    end\n    return maximum\nend", "    max::Int64 = l[1]\n    for\
    \ i in l\n        if i > max\n            max = i\n        end\n    end\n    return\
    \ max\nend", "    m = -Inf\n    for i = 1:length(l)\n        if l[i] > m\n   \
    \         m = l[i]\n        end\n    end\n    return m\nend", "    maximum(l)\n\
    end", "    max = 0\n    for i in l\n        if i > max\n            max = i\n\
    \        end\n    end\n    return max\nend", "    max = l[1]\n    for i in l\n\
    \        if i > max\n            max = i\n        end\n    end\n    return max\n\
    end", "    max_val = l[1]\n    for i in l\n        if max_val < i\n          \
    \  max_val = i\n        end\n    end\n    return max_val\nend", "    max = l[1]\n\
    \    for i = 2:length(l)\n        if max < l[i]\n            max = l[i]\n    \
    \    end\n    end\n    return max\nend\nprintln(max_element([1, 2, 3]))\nprintln(max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "    if length(l) == 0\n        error(\"\
    Vector is empty\")\n    end\n    m = l[1]\n    for i = 2:length(l)\n        if\
    \ l[i] > m\n            m = l[i]\n        end\n    end\n    return m\nend", " \
    \   max = 0 \n    for i = 1:length(l)\n        if l[i] > max\n            max\
    \ = l[i]\n        end\n    end\n    return max\nend", "    max_value = l[1]\n\
    \    for i in l[2:end]\n        if i > max_value\n            max_value = i\n\
    \        end\n    end\n    return max_value\nend", "    m = 0\n    for i in l\n\
    \        if m < i\n            m = i\n        end\n    end\n    return m\nend",
  "    max = 0\n    for i in l\n        if i > max\n            max = i\n        end\n\
    \    end\n    return max\nend", "    max = l[1]\n    for i in 1:length(l)\n  \
    \      if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    #type T <: Number \n    #function max_element(l::Vector{T})::T\
    \ \n    m = l[1]\n    for i in 2:size(l)[1]\n        if l[i] > m\n           \
    \ m = l[i]\n        end\n    end\n    return m\nend", "    max = 0\n    for i\
    \ in 1:length(l)\n        if l[i] > max\n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "    \n    max = l[1]\n    for element in l\n\
    \        if element > max\n            max = element\n        end\n    end\n \
    \   return max\nend", "    if length(l) == 0\n        return 0\n    end\n    if\
    \ length(l) == 1\n        return l[1]\n    end\n    n = length(l)\n    i = 1\n\
    \    max = l[1]\n    while i < n\n        if l[i] > max\n            max = l[i]\n\
    \        end\n        i += 1\n    end\n    return max\nend\n        ", "    max\
    \ = 0\n    for elem in l\n        if elem > max\n            max = elem\n    \
    \    end\n    end\n    return max\nend", "    return reduce(max, l)\nend", " \
    \   max = 0 \n    for i in l \n        if i > max \n            max = i \n   \
    \     end \n    end \n    return max \nend", "    i = 1\n    j = 2\n    max =\
    \ l[1]\n    while j <= length(l)\n        if l[j] > max\n            max = l[j]\n\
    \        end\n        j = j + 1\n    end\n    return max\nend", "    n = length(l)\n\
    \    if n==1\n        return l[1]\n    else\n        return max(l[n], max_element(l[1:n-1]))\n\
    \    end\nend", "    max = l[1]\n    for e in l\n        if e > max\n        \
    \    max = e\n        end\n    end\n    return max\nend", "    max = l[1]\n  \
    \  for i in l[2:end]\n        if i > max\n            max = i\n        end\n \
    \   end\n    return max\nend", "  mx = l[1]\n  for x in l\n    if x > mx\n   \
    \   mx = x\n    end\n  end\n  return mx\nend", "    max = l[1]\n    for i in l[2:end]\n\
    \        if i > max\n            max = i\n        end\n    end\n    return max\n\
    end", "    res = l[1]\n    for i in 2:length(l)\n        if l[i] > res\n     \
    \       res = l[i]\n        end\n    end\n    return res\nend", "    m = l[1]\n\
    \    for elem in l\n        if elem > m\n            m = elem\n        end\n \
    \   end\n    return m\nend", "    m::Int64 = 0\n    for i::Int64 in l\n      \
    \  if i > m\n            m = i\n        end\n    end\n    return m\nend", "  \
    \  max = l[1]\n    for num in l[2:end]\n        if num > max\n            max\
    \ = num\n        end\n    end\n    return max\nend", "    x=l[1]\n    for i in\
    \ 2:length(l)\n        if x<l[i]\n            x=l[i]\n        end\n    end\n \
    \   return x\nend", "    m = l[1]\n    for e in l\n        if e > m\n        \
    \    m = e\n        end\n    end\n    return m\nend", "    #maximum(l)\n    m\
    \ = -(typemax(Int64))\n    for a in l\n        if a > m\n            m = a\n \
    \       end\n    end\n    return m\nend", "    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    # Initialize maximum element \n    max = l[1] \n    for i in\
    \ l[2:end] \n        # Compare every element with max \n        if i > max \n\
    \            max = i \n        end\n    end\n    return max\nend", "    \"\"\"\
    Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n \
    \   >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\
    \"\n    return maximum(l)\nend", "    return maximum(l)\nend\nmax_element([1,\
    \ 2, 3])", "    return maximum(l)\nend", "    maximum(l)\nend", "    maximum =\
    \ 0\n    i = 1\n    while (i <= length(l))\n        if (l[i] > maximum)\n    \
    \        maximum = l[i]\n        end\n        i = i + 1\n    end\n    return maximum\n\
    end", "    return 0\nend\n ", "    max_elem = l[1]\n    for i in l[2:end]\n  \
    \      if i > max_elem\n            max_elem = i\n        end\n    end\n    return\
    \ max_elem\nend", "    max=l[1]\n    for i=2:length(l)\n        if l[i]>max\n\
    \            max=l[i]\n        end\n    end\n    return max\nend", "    maximum\
    \ = l[1]\n    for i in l\n        if maximum < i\n            maximum = i\n  \
    \      end\n    end\n    return maximum\nend", "    return maximum(l)\nend", " \
    \   max = l[1]\n    for i in l\n        if max < i\n            max = i\n    \
    \    end\n    end\n    return max\nend", "    max = l[1]\n    for i in 2:length(l)\n\
    \        if max < l[i]\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    maximum = l[1]\n    for i in l\n        if i > maximum\n   \
    \         maximum = i\n        end\n    end\n    return maximum\nend", "    max_element(l,\
    \ 1)\nend", "    if length(l) == 0\n        return nothing\n    end\n    if length(l)\
    \ == 1\n        return l[1]\n    end\n    if l[1] > l[2]\n        return max_element([l[1],\
    \ *l[3:end]])\n    else\n        return max_element(l[2:end])\n    end\nend",
  "    m = l[1]\n    for x in l\n        if x > m\n            m = x\n        end\n\
    \    end\n    return m\nend", "    for i in 2:length(l)\n        if l[i] > l[i-1]\n\
    \            l[i-1] = l[i]\n        end\n    end\n    return l[1]\nend", "   \
    \ \n    max = l[1]\n    for i in l\n        if i > max\n            max = i\n\
    \        end\n    end\n    return max\nend\nprintln(max_element([1, 2, 3]))\n\
    println(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "   if length(l)\
    \ == 1 return l[1] end\n   \n   mid_ind = div(length(l), 2)\n   a = max_element(l[1:mid_ind])\n\
    \   b = max_element(l[mid_ind+1:end])\n   \n   if a >= b return a else return\
    \ b end\nend", "    m = l[1]\n    for x in l\n        if x > m\n            m\
    \ = x\n        end\n    end\n    return m\nend", "    res = l[1]\n    for i in\
    \ 2:length(l)\n        if l[i] > res\n            res = l[i]\n        end\n  \
    \  end\n    return res\nend", "    Max = l[1]\n    for i in 2:length(l)\n    \
    \    if l[i] > Max\n            Max = l[i]\n        end\n    end\n    return Max\n\
    end", "    result = l[1]\n    for element in l\n        if element > result\n\
    \            result = element\n        end\n    end\n    return result\nend",
  "    for i in l\n        if i > l[i+1]\n            l[i+1] = i\n        end\n  \
    \  end\n    return l[length(l)]\nend", "    max = l[1]\n    for i in 2:length(l)\n\
    \        if max < l[i]\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    \n    #Initialize variables\n    max = 0\n    i = 1\n    \n\
    \    #Check for element of the list greater than the current max\n    for i in\
    \ 1:length(l)\n        if l[i] > max\n            max = l[i]\n        end\n  \
    \  end\n    return max\nend", "    j = -10000000\n    for i in l\n        if i\
    \ > j\n            j = i\n        end\n    end\n    return j\nend", "    max =\
    \ l[1]\n    for x in l[2:end]\n        if x > max\n            max = x\n     \
    \   end\n    end\n    return max\nend", "    max = l[1] \n    for v in l \n  \
    \      if v > max \n            max = v \n        end \n    end \n    return max\
    \ \nend ", "    max = l[1]\n    for i in l\n        if i > max\n            max\
    \ = i\n        end\n    end\n    return max\nend", "    if length(l) == 0\n  \
    \      error(\"error: maximum of empty vector\")\n    end\n    if length(l) ==\
    \ 1\n        return l[1]\n    end\n    return max_element([max(l[1], l[2]), l[3:end]])\n\
    end", "    maximum_element = l[1]\n    for e in l\n        if e > maximum_element\n\
    \            maximum_element = e\n        end\n    end\n    return maximum_element\n\
    end", "    a=l[1]\n    for i in l[2:end]\n        if a<i\n            a=i\n  \
    \      end\n    end\n    return a\nend", "    max = l[1]\n    for x in l[2:end]\n\
    \        if x > max\n            max = x\n        end\n    end\n    return max\n\
    end", "    max = l[1]\n    for i in l\n        if i > max\n            max = i\n\
    \        end\n    end\n    return max\nend", "    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    max_el = l[1]\n    for i in l\n        if i > max_el\n     \
    \       max_el = i\n        end\n    end\n    return max_el\nend", "    maxval\
    \ = -1\n    for x in l\n        if maxval < x\n            maxval = x\n      \
    \  end\n    end\n    return maxval\nend", "    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend", "    max = l[1]\n    for i in 2:length(l)\n       \
    \ if max < l[i]\n            max = l[i]\n        end\n    end\n    return max\n\
    end", "    max_element = -1000\n    for i in l\n        if i > max_element\n \
    \           max_element = i\n        end\n    end\n    return max_element\nend",
  "    max = l[1]\n    for x in l\n        if x > max\n            max = x\n     \
    \   end\n    end\n    return max\nend", "    r = l[1]\n    for i = 2:length(l)\n\
    \        if r < l[i]\n            r = l[i]\n        end\n    end\n    return r\n\
    end", "    # YOUR CODE HERE\n    m = l[1]\n    for i in l\n        if m < i\n\
    \            m = i\n        end\n    end\n    return m\nend", "    m = l[1]\n\
    \    for i in l[2:end]\n        if i > m\n            m = i\n        end\n   \
    \ end\n    return m\nend", "    n=size(l)[1]\n    max_el=l[1]\n    for i=2:n\n\
    \        if l[i]>max_el\n            max_el=l[i]\n        end\n    end\n    return\
    \ max_el\nend", "    max = l[1]\n    for i = 2:length(l)\n        if l[i] > max\n\
    \            max = l[i]\n        end\n    end\n    return max\nend", "    max\
    \ = 0 \n    for i = 1:length(l)\n        if l[i] > max\n            max = l[i]\n\
    \        end\n    end\n    return max\nend\nprint(max_element([1, 2, 3]))\nprint(max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "    max_num = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max_num\n            max_num = l[i]\n        end\n    end\n\
    \    return max_num\nend", "    cur_max = l[1]\n    for el in l\n        if el\
    \ > cur_max\n            cur_max = el\n        end\n    end\n    return cur_max\n\
    end", "    max = l[1]\n    for i in 2:size(l)[1]\n        if l[i] > max\n    \
    \        max = l[i]\n        end\n    end\n    return max\nend", "    max = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > max\n            max = l[i]\n   \
    \     end\n    end\n    return max\nend", "    if length(l) == 0\n        return\
    \ 0\n    end\n    else \n        max = l[1]\n        for i = 2:length(l)\n   \
    \         if l[i] > max\n                max = l[i]\n            end\n       \
    \ end\n        return max\n    end\nend", "    m::Int64 = l[1]\n    for i in l[2:end]\n\
    \        if i > m\n            m = i\n        end\n    end\n    return m\nend",
  "    res = l[1]\n    for i in l\n        if i > res\n            res = i\n     \
    \   end\n    end\n    return res\nend", "    max = l[1]\n    for item in l\n \
    \       if item > max\n            max = item\n        end\n    end\n    return\
    \ max\nend", "    \n    max = l[1]\n    for i in l\n        if (i > max)\n   \
    \         max = i\n        end\n    end\n    return max\nend", "    max_val =\
    \ 0\n    for i in l\n        if i > max_val\n            max_val = i\n       \
    \ end\n    end\n    return max_val\nend", "    max_number = 0\n    for element\
    \ in l\n        if element > max_number\n            max_number = element\n  \
    \      end\n    end\n    return max_number\nend", "    \"\"\"Return the maximum\
    \ element in l.\"\"\"\n    m = l[1]\n    for i = 2:length(l)\n        if l[i]\
    \ > m\n            m = l[i]\n        end\n    end\n    return m\nend", "    max\
    \ = l[1]\n    for i in 1:length(l)\n        if l[i] > max\n            max = l[i]\n\
    \        end\n    end\n    return max\nend", "    max = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    max = 0\n    for i in l\n        if i > max\n            max\
    \ = i\n        end\n    end\n    return max\nend", "    maximum(l)\nend", "  \
    \  max = 0\n    for i in l\n        if i > max\n            max = i\n        end\n\
    \    end\n    return max\nend", "    return maximum(l)\nend", "    max = l[1]\n\
    \    for x in l\n        if x > max\n            max = x\n        end\n    end\n\
    \    return max\nend", "    x = -1000000000\n    for i = 1:length(l)\n       \
    \ if l[i] > x\n            x = l[i]\n        end\n    end\n    return x\nend",
  "    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n\
    \    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
    \    \"\"\"\n    max_value = l[1]\n    for i = 2:length(l)\n        if max_value\
    \ < l[i]\n            max_value = l[i]\n        end\n    end\n    return max_value\n\
    end", "    # initialize max as first element\n    max = l[1]\n    for i = 2:length(l)\n\
    \        if l[i] > max\n            max = l[i]\n        end\n    end\n    return\
    \ max\nend", "    return maximum(l)\nend", "    idx = 1\n    mx = l[1]\n    for\
    \ i in 2:length(l)\n        if l[i] > mx\n            mx = l[i]\n            idx\
    \ = i\n        end\n    end\n    return mx\nend", "    max = l[1]\n    for i in\
    \ 2:length(l)\n        if l[i] > max\n            max = l[i]\n        end\n  \
    \  end\n    return max\nend", "    \"\"\"Return maximum element in the list.\n\
    \    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    new_l = copy(l)\n    m = new_l[1]\n\
    \    while length(new_l) > 1\n        m = max(m, new_l[2])\n        new_l = new_l[2:end]\n\
    \    end\n    return m\nend", "    max = l[1]\n    for i = 2:length(l)\n     \
    \   if l[i] > max\n            max = l[i]\n        end\n    end\n    return max\n\
    end", "    \n    m = 0\n    for i = 1:length(l)\n        if l[i] > m\n       \
    \     m = l[i]\n        end\n    end\n    return m\nend", "    max = l[1] \n \
    \   for i in 1:length(l)\n        if l[i] > max\n            max = l[i]\n    \
    \    end\n    end\n    return max\nend", "    if length(l) == 0\n        return\
    \ nothing\n    end\n    m = l[1]\n    for i in 2:length(l)\n        if l[i] >\
    \ m\n            m = l[i]\n        end\n    end\n    return m\nend", "    # your\
    \ code\n    m = first(l)\n    for x in l\n        if x > m\n            m = x\n\
    \        end\n    end\n    return m\nend", "    maximum = 0\n    for i in 1:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend", "    max=0\n    n=length(l)\n    if n==0\n        error(\"\
    Empty list\")\n    end\n    if n==1\n        return l[1]\n    end\n    if n>1\n\
    \        max=l[1]\n        for i in 1:n\n            if l[i]>max\n           \
    \     max=l[i]\n            end\n        end\n    end\n    return max\nend", " \
    \   max = l[1]\n    for i in l\n        if i > max\n            max = i\n    \
    \    end\n    end\n    return max\nend", "  max = l[1]\n  for i in l\n    if i\
    \ > max\n      max = i\n    end\n  end\n  return max\nend", "    m = 0\n    for\
    \ i in l\n        if m < i\n            m = i\n        end\n    end\n    return\
    \ m\nend\n# ============================================================\n\"\"\
    \"Return odd elements of the list.\n    >>> odd_elements([1, 2, 3])\n    [1, 3]\n\
    \    >>> odd_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, -5,\
    \ -3, 3, 9, 123, 1, -10]\n    \"\"\"", "    m = l[1]\n    for x in l\n       \
    \ if x > m\n            m = x\n        end\n    end\n    return m\nend", "   \
    \ max = l[1]\n    for i in l\n        if max < i\n            max = i\n      \
    \  end\n    end\n    return max\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
