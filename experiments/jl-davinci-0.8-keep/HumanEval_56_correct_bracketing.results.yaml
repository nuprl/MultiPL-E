name: HumanEval_56_correct_bracketing
language: jl
results:
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    l = length(brackets)\n\
    \    c = 0\n    for i in range(1,l)\n        if brackets[i] == '<'\n         \
    \   c += 1\n        else\n            c -= 1\n        end\n        if c < 0\n\
    \            return false\n        end\n    end\n    return c == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # keep track of\
    \ the number of \"<\"\n    count = 0\n    for i = 1:length(brackets)\n       \
    \ if brackets[i] == '<'\n            count += 1\n        elseif brackets[i] ==\
    \ '>'\n            if count == 0\n                return false\n            else\n\
    \                count -= 1\n            end\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_open_brackets\
    \ = 0\n    num_close_brackets = 0\n    for char in brackets\n        if char ==\
    \ \"<\"\n            num_open_brackets += 1\n        elseif char == \">\"\n  \
    \          num_close_brackets += 1\n        end\n    end\n    return num_open_brackets\
    \ == num_close_brackets\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxyk3c7gx.jl:34\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyk3c7gx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyk3c7gx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxyk3c7gx.jl:35\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyk3c7gx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyk3c7gx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxyk3c7gx.jl:36\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyk3c7gx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyk3c7gx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxyk3c7gx.jl:37\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyk3c7gx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyk3c7gx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxyk3c7gx.jl:38\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxyk3c7gx.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_brackets = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            num_brackets\
    \ += 1\n        elseif bracket == '>'\n            num_brackets -= 1\n       \
    \ end\n        if num_brackets < 0\n            return false\n        end\n  \
    \  end\n    if num_brackets == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<><>>\"\
    )\ncorrect_bracketing(\"><<>\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    level = 0\n    for\
    \ bracket in brackets \n        if bracket == \"<\" \n            level += 1\n\
    \        elseif bracket == \">\" \n            level -= 1\n        end\n    end\n\
    \    return level == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9bn2yui0.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bn2yui0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bn2yui0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9bn2yui0.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bn2yui0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bn2yui0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9bn2yui0.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bn2yui0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bn2yui0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9bn2yui0.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bn2yui0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bn2yui0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9bn2yui0.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9bn2yui0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_opening = 0\n\
    \    num_closing = 0\n    for ch in brackets\n        if ch == '<'\n         \
    \   num_opening += 1\n        elseif ch == '>'\n            num_closing += 1\n\
    \        end\n    end\n    num_opening == num_closing\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0e1sagqz.jl:35\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0e1sagqz.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0e1sagqz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp0e1sagqz.jl:40\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0e1sagqz.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0e1sagqz.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0e1sagqz.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_open = 0\n \
    \   for i in brackets \n        if i == \"<\" \n            num_open += 1\n  \
    \      elseif i == \">\" \n            num_open -= 1\n        end\n        if\
    \ num_open < 0 \n            return false\n        end\n    end\n    if num_open\
    \ != 0 \n        return false\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpah5inq2b.jl:39\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpah5inq2b.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpah5inq2b.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpah5inq2b.jl:40\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpah5inq2b.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpah5inq2b.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpah5inq2b.jl:41\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpah5inq2b.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpah5inq2b.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpah5inq2b.jl:42\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpah5inq2b.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpah5inq2b.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpah5inq2b.jl:43\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpah5inq2b.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    bracket_counter\
    \ = 0\n    \n    for i in brackets\n        if i == '<'\n            bracket_counter\
    \ += 1\n        elseif i == '>'\n            bracket_counter -= 1\n        end\n\
    \        if bracket_counter < 0\n            return false\n        end\n    end\n\
    \    \n    return bracket_counter == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets_counter\
    \ = 0\n    for character in brackets\n        if character == \"<\"\n        \
    \    open_brackets_counter += 1\n        else\n            open_brackets_counter\
    \ -= 1\n        end\n        if open_brackets_counter < 0\n            return\
    \ false\n        end\n    end\n    return open_brackets_counter == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgijxlreb.jl:32\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgijxlreb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgijxlreb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgijxlreb.jl:33\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgijxlreb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgijxlreb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgijxlreb.jl:34\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgijxlreb.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgijxlreb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgijxlreb.jl:35\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgijxlreb.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgijxlreb.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgijxlreb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)%2\
    \ != 0 return false end\n    open = 0\n    for i in brackets\n        if i ==\
    \ \"<\" open += 1 end\n        if i == \">\" open -= 1 end\n        if open <\
    \ 0 return false end\n    end\n    return open == 0\nend\n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfwkkdwo4.jl:34\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwkkdwo4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwkkdwo4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfwkkdwo4.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwkkdwo4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwkkdwo4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfwkkdwo4.jl:39\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwkkdwo4.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwkkdwo4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfwkkdwo4.jl:40\n  Expression: candidate(\"<><><<><>><>>><>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfwkkdwo4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfwkkdwo4.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwkkdwo4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = Array{Char,1}()\n\
    \    for c \u2208 brackets\n        if c == '<'\n            push!(stack,c)\n\
    \        else\n            if isempty(stack)\n                return false\n \
    \           else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    nbrackets = length(brackets)\n\
    \    if nbrackets == 0 \n        return true\n    end\n    if nbrackets % 2 !=\
    \ 0 \n        return false\n    end\n    opens = brackets[1:2:nbrackets]\n   \
    \ closings = brackets[2:2:nbrackets]\n    if length(opens) != length(closings)\n\
    \        return false\n    end\n    return all(opens .== closings)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwfcgtzj1.jl:33\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfcgtzj1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfcgtzj1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwfcgtzj1.jl:34\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfcgtzj1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfcgtzj1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwfcgtzj1.jl:35\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwfcgtzj1.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfcgtzj1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwfcgtzj1.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwfcgtzj1.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfcgtzj1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwfcgtzj1.jl:40\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwfcgtzj1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # checks if string\
    \ is empty or only \"<\"\n    if brackets == \"\" || brackets == \"<\"\n     \
    \   return false\n    end\n    # checks for correct bracketing \n    for i in\
    \ 1:length(brackets)\n        if brackets[i] == \"<\"\n            for j in i+1:length(brackets)\n\
    \                if brackets[j] == \">\"\n                    brackets[i] = \"\
    1\"\n                    brackets[j] = \"2\"\n                    break\n    \
    \            end\n            end\n        end\n    end\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == \"<\" || brackets[i] == \">\"\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3mn5xuss.jl:46\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mn5xuss.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mn5xuss.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp3mn5xuss.jl:47\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mn5xuss.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mn5xuss.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp3mn5xuss.jl:49\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mn5xuss.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mn5xuss.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp3mn5xuss.jl:50\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mn5xuss.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mn5xuss.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp3mn5xuss.jl:51\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3mn5xuss.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_open = 0\n \
    \   for character in brackets\n        if character == \"<\"\n            num_open\
    \ += 1\n        elseif character == \">\"\n            num_open -= 1\n       \
    \ end\n    end\n    num_open == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplrt45ghs.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrt45ghs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrt45ghs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplrt45ghs.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrt45ghs.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrt45ghs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplrt45ghs.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrt45ghs.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrt45ghs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplrt45ghs.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrt45ghs.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrt45ghs.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplrt45ghs.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplrt45ghs.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == '>'\n    \
    \    return false\n    end\n    if brackets[n] == '<'\n        return false\n\
    \    end\n    idx = 2\n    while idx <= n-1\n        if brackets[idx] == '<'\n\
    \            if idx == n-1\n                return false\n            end\n  \
    \          if brackets[idx+1] == '<'\n                return false\n         \
    \   end\n        end\n        idx += 1\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsc54m_1e.jl:45\n  Expression: candidate(\"\
    <><><<><>><>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsc54m_1e.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsc54m_1e.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpsc54m_1e.jl:46\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsc54m_1e.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsc54m_1e.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsc54m_1e.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  for i in 1:length(brackets)\n\
    \    if (brackets[i] == '<') \n      stack.push(brackets[i])\n    elseif (brackets[i]\
    \ == '>') \n      if (stack.length() == 0) \n        return false\n      else\
    \ \n        stack.pop()\n      end\n    end\n  end\n  if (stack.length() == 0)\
    \ \n    return true\n  else \n    return false\n  end\nend\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjfysf_g6.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjfysf_g6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjfysf_g6.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjfysf_g6.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpjfysf_g6.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjfysf_g6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjfysf_g6.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjfysf_g6.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpjfysf_g6.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjfysf_g6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjfysf_g6.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjfysf_g6.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpjfysf_g6.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpjfysf_g6.jl:16\n   [2] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjfysf_g6.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    i::Int = 1\n   \
    \ ret::Bool = false\n    for a in brackets\n        if a == \"<\"\n          \
    \  i += 1\n        elseif a == \">\"\n            i -= 1\n        end\n      \
    \  if i < 0\n            ret = false\n            break\n        else\n      \
    \      ret = true\n        end\n    end\n    return ret\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr653jpua.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr653jpua.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr653jpua.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpr653jpua.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr653jpua.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr653jpua.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpr653jpua.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr653jpua.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr653jpua.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpr653jpua.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr653jpua.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr653jpua.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpr653jpua.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr653jpua.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    while !isempty(brackets)\n\
    \        brackets = replace(brackets, \"><\", \"\")\n    end\n    return isempty(brackets)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpng2sxdj8.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpng2sxdj8.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpng2sxdj8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpng2sxdj8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpng2sxdj8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpng2sxdj8.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpng2sxdj8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpng2sxdj8.jl:2"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpng2sxdj8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Correct\
    \ bracketing, even nested\n    \"\"\";\n    if length(brackets) % 2 != 0\n   \
    \     return false\n    end\n    lower_brackets = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == \"<\"\n            lower_brackets += 1\n        elseif\
    \ brackets[i] == \">\"\n            lower_brackets -= 1\n        end\n       \
    \ if lower_brackets < 0\n            return false\n        end\n    end\n    return\
    \ lower_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprv0gc0at.jl:43\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprv0gc0at.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprv0gc0at.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprv0gc0at.jl:45\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprv0gc0at.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprv0gc0at.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprv0gc0at.jl:48\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprv0gc0at.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprv0gc0at.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprv0gc0at.jl:49\n  Expression: candidate(\"<><><<><>><>>><>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprv0gc0at.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprv0gc0at.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprv0gc0at.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    leftbrack = 0\n    rightbrack = 0\n    for i in 1:length(brackets)\n    \
    \    if brackets[i] == '<'\n            leftbrack += 1\n        elseif brackets[i]\
    \ == '>'\n            rightbrack += 1\n        end\n    end\n    if leftbrack\
    \ == rightbrack\n        return true\n    else\n        return false\n    end\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2hrezydl.jl:41\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2hrezydl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2hrezydl.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp2hrezydl.jl:46\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2hrezydl.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2hrezydl.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2hrezydl.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ char in brackets\n        if char == '<'\n            count = count + 1\n  \
    \      elseif char == '>'\n            count = count - 1\n        end\n      \
    \  if count < 0\n            return false\n        end\n    end\n    return count\
    \ == 0\nend\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyu6phpt1.jl:28\nin expression starting at /tmp/tmpyu6phpt1.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack::Array{Int,1}\
    \ = []\n    for (i, char) in enumerate(brackets)\n        if char == '<'\n   \
    \         push!(stack, i)\n        elseif char == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(split(brackets,\
    \ \"<\")[2])\n    elseif brackets[1] == '>'\n        return false\n    end\nend\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyt2w3ok2.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: no method matching correct_bracketing(::SubString{String})\n\
    \  Closest candidates are:\n    correct_bracketing(!Matched::String) at /tmp/tmpyt2w3ok2.jl:13\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpyt2w3ok2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyt2w3ok2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyt2w3ok2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyt2w3ok2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: no method matching correct_bracketing(::SubString{String})\n\
    \  Closest candidates are:\n    correct_bracketing(!Matched::String) at /tmp/tmpyt2w3ok2.jl:13\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpyt2w3ok2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyt2w3ok2.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyt2w3ok2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyt2w3ok2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  MethodError: no method matching correct_bracketing(::SubString{String})\n\
    \  Closest candidates are:\n    correct_bracketing(!Matched::String) at /tmp/tmpyt2w3ok2.jl:13\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpyt2w3ok2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyt2w3ok2.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/j"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyt2w3ok2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0 || (length(brackets) == 1 && brackets[1] == '>')\n        return false\n\
    \    end\n    count = 0\n    for i in brackets\n        if i == '<'\n        \
    \    count += 1\n        elseif i == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n::Int = 0\n   \
    \ for c in brackets\n        if c == '<'\n            n += 1\n        else\n \
    \           n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\n \n \n \n \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = Array{Char,1}[]\n\
    \    for b in brackets\n        if b == '<'\n            push!(stack, b)\n   \
    \     else\n            if isempty(stack) || pop!(stack) != '<'\n            \
    \    return false\n            end\n        end\n    end\n    return isempty(stack)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp767x9l4d.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type Vector{Char}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Vector{Char}}, item::Char)\n \
    \    @ Base ./array.jl:994\n   [2] correct_bracketing(brackets::String)\n    \
    \ @ Main /tmp/tmp767x9l4d.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp767x9l4d.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp767x9l4d.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp767x9l4d.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Char to an object of type Vector{Char}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{Vector{Char}}, item::Char)\n \
    \    @ Base ./array.jl:994\n   [2] correct_bracketing(brackets::String)\n    \
    \ @ Main /tmp/tmp767x9l4d.jl:17\n   [3] macro expansion\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp767x9l4d.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  open_brackets = 0\n\
    \  for b in brackets\n    if b == '<'\n      open_brackets += 1\n    elseif b\
    \ == '>'\n      open_brackets -= 1\n    end\n    if open_brackets < 0\n      return\
    \ false\n    end\n  end\n  return open_brackets == 0\nend\ncorrect_bracketing(\"\
    <><>\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    counter = 0\n  \
    \  for i in 1:length(brackets)\n        if brackets[i] == '<'\n            counter\
    \ += 1\n        else\n            counter -= 1\n        end\n        if counter\
    \ < 0\n            return false\n        end\n    end\n    return counter == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = count(brackets,\
    \ '<') - count(brackets, '>')\n    return n == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxmau8efp.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: objects of type String\
    \ are not callable\n  Stacktrace:\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\n     @ Base ./reduce.jl:1206\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\n     @ Base ./reduce.jl:1201\n   [3] count(f::String, itr::Char)\n\
    \     @ Base ./reduce.jl:1201\n   [4] correct_bracketing(brackets::String)\n \
    \    @ Main /tmp/tmpxmau8efp.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxmau8efp.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxmau8efp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxmau8efp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: objects of type String are not\
    \ callable\n  Stacktrace:\n   [1] _simple_count(pred::String, itr::Char, init::Int64)\n\
    \     @ Base ./reduce.jl:1206\n   [2] count(f::String, itr::Char; init::Int64)\n\
    \     @ Base ./reduce.jl:1201\n   [3] count(f::String, itr::Char)\n     @ Base\
    \ ./reduce.jl:1201\n   [4] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpxmau8efp.jl:14\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxmau8efp.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxmau8efp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxmau8efp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  MethodError: objects of type String are\
    \ not callable\n  Stacktrace:\n   [1] _simple_count(pred::String, itr::Char, init::Int64)\n\
    \     @ Base ./reduce.jl:1206\n   [2] count(f::String, itr::Char; init::Int64)\n\
    \     @ Base ./reduce.jl:1201\n   [3] count(f:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxmau8efp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    return brackets\
    \ == reverse(brackets) # this is not the right way to do it\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7scxqhen.jl:21\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7scxqhen.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7scxqhen.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7scxqhen.jl:22\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7scxqhen.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7scxqhen.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7scxqhen.jl:23\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7scxqhen.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7scxqhen.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7scxqhen.jl:24\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7scxqhen.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7scxqhen.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7scxqhen.jl:26\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7scxqhen.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ []\n    for bracket in brackets\n        if bracket == \"<\"\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == \">\" && length(bracket_stack) == 0\n  \
    \          return false\n        elseif bracket == \">\" && length(bracket_stack)\
    \ > 0\n            pop!(bracket_stack)\n        end\n    end\n    if length(bracket_stack)\
    \ == 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr706d3z_.jl:39\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr706d3z_.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr706d3z_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpr706d3z_.jl:40\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr706d3z_.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr706d3z_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpr706d3z_.jl:41\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr706d3z_.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr706d3z_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpr706d3z_.jl:42\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr706d3z_.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr706d3z_.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpr706d3z_.jl:43\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr706d3z_.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  b=0\n  for i=1:length(brackets)\n\
    \    if brackets[i]==\"<\"\n      b+=1\n    elseif brackets[i]==\">\"\n      b-=1\n\
    \    end\n    if b<0 \n      return false\n    end\n  end\n  return b==0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_87xr9tk.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_87xr9tk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_87xr9tk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_87xr9tk.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_87xr9tk.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_87xr9tk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_87xr9tk.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_87xr9tk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_87xr9tk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_87xr9tk.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_87xr9tk.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_87xr9tk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_87xr9tk.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_87xr9tk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets[1] ==\
    \ \">\"\n        return false\n    end\n    current = 0\n    for i = 1:length(brackets)\n\
    \        if brackets[i] == \"<\"\n            current += 1\n        else\n   \
    \         current -= 1\n        end\n        if current < 0\n            return\
    \ false\n        end\n    end\n    return current == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgr5qbm0f.jl:35\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgr5qbm0f.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr5qbm0f.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgr5qbm0f.jl:36\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgr5qbm0f.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr5qbm0f.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgr5qbm0f.jl:37\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgr5qbm0f.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr5qbm0f.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpgr5qbm0f.jl:38\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgr5qbm0f.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr5qbm0f.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgr5qbm0f.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n % 2 != 0\n        return false\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9n_n8hv8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9n_n8hv8.jl:1\n\
    in expression starting at /tmp/tmp9n_n8hv8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    L = length(brackets)\n\
    \    # Count the number of open and close brackets\n    open_counter = 0\n   \
    \ close_counter = 0\n    for char in brackets\n        if char == '<'\n      \
    \      open_counter += 1\n        elseif char == '>'\n            close_counter\
    \ += 1\n        end\n    end\n    # Return True if there are no more opening brackets\
    \ than closing brackets, and vice versa.\n    return open_counter <= close_counter\
    \ && close_counter <= open_counter\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpefpgeyek.jl:38\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefpgeyek.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefpgeyek.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpefpgeyek.jl:43\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpefpgeyek.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpefpgeyek.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpefpgeyek.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Count the number\
    \ of opening brackets.\n    open_brackets::Int = 0\n    for b in brackets\n  \
    \      if b == '<'\n            open_brackets += 1\n        elseif b == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    # If all are closed, then\
    \ there should be no open brackets left.\n    return open_brackets == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in brackets\n        if i == '<'\n            open += 1\n   \
    \     elseif i == '>'\n            close += 1\n        end\n    end\n    if open\
    \ == close\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvlcc96ut.jl:39\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlcc96ut.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlcc96ut.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpvlcc96ut.jl:44\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvlcc96ut.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvlcc96ut.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvlcc96ut.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    push!(mybrackets,\
    \ brackets)\n    if(length(mybrackets)==0)\n        return False\n    end\n  \
    \  for i=1:length(mybrackets)\n        if(mybrackets[i] == '>')\n            pop!(mybrackets)\n\
    \        end\n    end\n    return isempty(mybrackets)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1psyltjn.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: mybrackets not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp1psyltjn.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1psyltjn.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1psyltjn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1psyltjn.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: mybrackets not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp1psyltjn.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1psyltjn.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1psyltjn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1psyltjn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: mybrackets not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp1psyltjn.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1psyltjn.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1psyltjn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1psyltjn.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: mybrackets\
    \ not defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n  \
    \   @ Main /tmp/tmp1psy"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1psyltjn.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    for i in range(1,\
    \ size(brackets, 1))\n        if brackets[i] == '<'\n            for j in range(i+1,\
    \ size(brackets, 1))\n                if brackets[j] == '>'\n                \
    \    return true\n                end\n            end\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6pcwzwc7.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"<>\") == true\\n  MethodError: no method\
    \ matching size(::String, ::Int64)\\n  Closest candidates are:\\n    size(!Matched::Union{LinearAlgebra.QR,\
    \ LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\\\
    n    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\\\
    n    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] correct_bracketing(brackets::String)\\n    \
    \ @ Main /tmp/tmp6pcwzwc7.jl:14\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp6pcwzwc7.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6pcwzwc7.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp6pcwzwc7.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<<><>>\") == true\\n  MethodError: no method matching size(::String,\
    \ ::Int64)\\n  Closest candidates are:\\n    size(!Matched::Union{LinearAlgebra.QR,\
    \ LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\\\
    n    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\\\
    n    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] cor"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == \"<\"\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == \">\"\n        if correct_bracketing(brackets[2:end])\
    \ == false\n            return false\n        elseif brackets[2] == \">\" || islast(brackets)\n\
    \            return false\n        else\n            return true\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm_pxyfhp.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpm_pxyfhp.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm_pxyfhp.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm_pxyfhp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpm_pxyfhp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpm_pxyfhp.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm_pxyfhp.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm_pxyfhp.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    if brackets\
    \ == \"<>\"\n        return true\n    elseif isempty(brackets)\n        return\
    \ true\n    elseif brackets[1] == \"<\"\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        for c in brackets\n            if c == \">\"\n            \
    \    brackets = replace(brackets, c, \"\")\n                return correct_bracketing(brackets)\n\
    \            end\n        end\n        return false\n    end\nend\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcatlm33b.jl:31\nin expression starting at /tmp/tmpcatlm33b.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if isempty(brackets)\n\
    \        return true\n    elseif brackets[1] == '<'\n        return search(brackets,1)\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppz5ajsw0.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: search not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmppz5ajsw0.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppz5ajsw0.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppz5ajsw0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppz5ajsw0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: search not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmppz5ajsw0.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppz5ajsw0.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppz5ajsw0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppz5ajsw0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: search not defined\n \
    \ Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmppz5ajsw0.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppz5ajsw0.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppz5ajsw0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppz5ajsw0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: search not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmppz5ajsw0.jl:17\n   [2"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppz5ajsw0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    opening_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            opening_count\
    \ += 1\n        elseif bracket == '>'\n            opening_count -= 1\n      \
    \  end\n        if opening_count < 0\n            return false\n        end\n\
    \    end\n    if opening_count == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n   open::Int=0\n   close::Int=0\n\
    \   for i in brackets\n      if i=='<'\n         open=open+1\n      elseif i=='>'\n\
    \         close=close+1\n      end\n      if close>open\n         return false\n\
    \      end\n   end\n   return open==close\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        else\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i = 1:length(brackets)\n        if brackets[i] == '<'\n            push!(stack,\
    \ brackets[i])\n        elseif brackets[i] == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i = 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ b in brackets\n        if b == '<'\n            count += 1\n        else\n \
    \           count -= 1\n        end\n        if count < 0\n            return\
    \ false\n        end\n    end\n    return count == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpya308nlu.jl:32\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpya308nlu.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya308nlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpya308nlu.jl:33\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpya308nlu.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya308nlu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpya308nlu.jl:34\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpya308nlu.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya308nlu.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpya308nlu.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    queue = Array{Char,1}()\n\
    \    for (i,bracket) in enumerate(brackets)\n        if bracket == '<'\n     \
    \       push!(queue, bracket)\n        elseif bracket == '>'\n            if length(queue)\
    \ == 0\n                return false\n            else\n                popfirst!(queue)\n\
    \            end\n        end\n    end\n    if length(queue) == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \nend\ncorrect_bracketing(\"\
    <<><>>\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\nClosest candidates are:\n  convert(::Type{T}, !Matched::T)\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \  convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \  ...\nStacktrace:\n [1] correct_bracketing(brackets::String)\n   @ Main /tmp/tmpenq9wd0y.jl:15\n\
    \ [2] top-level scope\n   @ /tmp/tmpenq9wd0y.jl:16\nin expression starting at\
    \ /tmp/tmpenq9wd0y.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        else\n            open_brackets -= 1\n            if open_brackets\
    \ < 0\n                return false\n            end\n        end\n    end\n \
    \   return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    tmp = 0\n    for\
    \ b in brackets\n        if b == '<'\n            tmp += 1\n        else\n   \
    \         tmp -= 1\n        end\n        if tmp < 0\n            return false\n\
    \        end\n    end\n    if tmp == 0\n        return true\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Initialize counter\n\
    \    counter = 0\n    # Loop through every char in string\n    for char in brackets\n\
    \        # Increment counter if char is open bracket\n        if char == \"<\"\
    \n            counter += 1\n        elseif char == \">\"\n            # Decrement\
    \ counter if char is closed bracket\n            counter -= 1\n            # Return\
    \ false if counter less than 0\n            if counter < 0\n                return\
    \ false\n            end\n        end\n    end\n    # Return false if counter\
    \ greater than 0\n    if counter > 0\n        return false\n    end\n    # Return\
    \ true if counter equal to 0\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1o0bn8zx.jl:46\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1o0bn8zx.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o0bn8zx.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp1o0bn8zx.jl:47\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1o0bn8zx.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o0bn8zx.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp1o0bn8zx.jl:48\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1o0bn8zx.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o0bn8zx.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp1o0bn8zx.jl:49\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1o0bn8zx.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o0bn8zx.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp1o0bn8zx.jl:50\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1o0bn8zx.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    i = 0\n    for character\
    \ in brackets\n        if character == \"<\"\n            i = i + 1\n        elseif\
    \ character == \">\"\n            i = i - 1\n        end\n        if i < 0\n \
    \           return false\n        end\n    end\n    return i == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5y2o2y2w.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5y2o2y2w.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5y2o2y2w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5y2o2y2w.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5y2o2y2w.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5y2o2y2w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5y2o2y2w.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5y2o2y2w.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5y2o2y2w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5y2o2y2w.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5y2o2y2w.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5y2o2y2w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5y2o2y2w.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5y2o2y2w.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # variables\n  \
    \  var bracket_stack = []\n    # loop through brackets\n    for bracket in brackets\n\
    \        # if open bracket push on to stack\n        if bracket == '<'\n     \
    \       push!(bracket_stack, bracket)\n        # if close bracket, pop\n     \
    \   elseif bracket == '>'\n            pop!(bracket_stack)\n        end\n    end\n\
    \    # check if stack is empty\n    length(bracket_stack) == 0 ? true : false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpbx9rj_nl.jl:13 expected\
    \ \"end\", got \"bracket_stack\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbx9rj_nl.jl:15\n\
    in expression starting at /tmp/tmpbx9rj_nl.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            bracket_count\
    \ += 1\n        elseif bracket == '>'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    if bracket_count == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" || brackets == \"><\"\n        return false\n    end\n    a, b = split(brackets,\
    \ '><')\n    if length(a) == 0 && length(b) == 0\n        return true\n    elseif\
    \ length(a) == length(b)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp8agywa43.jl:17\nin expression\
    \ starting at /tmp/tmp8agywa43.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ b in brackets\n        if b == \"<\"\n            count += 1\n        else\n\
    \            count -= 1\n        end\n        if count < 0\n            return\
    \ false\n        end\n    end\n    return count == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo4bfrvtb.jl:32\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4bfrvtb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4bfrvtb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo4bfrvtb.jl:33\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4bfrvtb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4bfrvtb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo4bfrvtb.jl:34\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo4bfrvtb.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4bfrvtb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo4bfrvtb.jl:35\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo4bfrvtb.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4bfrvtb.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo4bfrvtb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    return count_opens(brackets)\
    \ == count_closes(brackets) \nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7qfy55q3.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: count_opens not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp7qfy55q3.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7qfy55q3.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qfy55q3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7qfy55q3.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: count_opens not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp7qfy55q3.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7qfy55q3.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qfy55q3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7qfy55q3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: count_opens not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp7qfy55q3.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7qfy55q3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qfy55q3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7qfy55q3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: count_opens\
    \ not defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n  \
    \   @ Main /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7qfy55q3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    counter=0\n    #if\
    \ brackets[1]==\">\" || brackets[end]==\"<\"\n    #    return false\n    #end\n\
    \    for b in brackets\n        if b==\"<\"\n            counter+=1\n        elseif\
    \ b==\">\"\n            counter-=1\n        end\n    end\n    return counter==0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe7fmb5ei.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7fmb5ei.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7fmb5ei.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe7fmb5ei.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7fmb5ei.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7fmb5ei.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe7fmb5ei.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7fmb5ei.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7fmb5ei.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe7fmb5ei.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7fmb5ei.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7fmb5ei.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe7fmb5ei.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe7fmb5ei.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    L = 0\n    for i\
    \ in eachindex(brackets)\n        if brackets[i] == '<'\n            L += 1\n\
    \        elseif brackets[i] == '>'\n            L -= 1\n        end\n        if\
    \ L < 0\n            return false\n        end\n    end\n    return L == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    l = 0\n    r = 0\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '<'\n            l\
    \ += 1\n        elseif brackets[i] == '>'\n            r += 1\n        end\n \
    \   end\n    if l == r\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph99ir0lt.jl:39\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph99ir0lt.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph99ir0lt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmph99ir0lt.jl:44\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph99ir0lt.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph99ir0lt.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph99ir0lt.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    #= alternative way\
    \ to initialize \n    i = 0\n    for b in brackets\n        if b == '<'\n    \
    \        i = i + 1\n        elseif b == '>'\n            i = i - 1\n        end\n\
    \        if i < 0\n            return false\n        end\n    end\n    return\
    \ i == 0\n    =#\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3uc3ckhy.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3uc3ckhy.jl:1\n\
    in expression starting at /tmp/tmp3uc3ckhy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ [c for c in brackets if c == '<']\n    open_count = length(open_brackets)\n\
    \    closed_count = length([c for c in brackets if c == '>'])\n    if open_count\
    \ == closed_count\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmnfy1kug.jl:33\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmnfy1kug.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmnfy1kug.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmnfy1kug.jl:38\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmnfy1kug.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmnfy1kug.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmnfy1kug.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for (i, bracket) in enumerate(brackets)\n        if bracket == \"<\"\n     \
    \       push!(stack, bracket)\n        elseif bracket == \">\"\n            if\
    \ isempty(stack)\n                return false\n            else\n           \
    \     pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn_2d8ank.jl:41\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_2d8ank.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_2d8ank.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpn_2d8ank.jl:42\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_2d8ank.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_2d8ank.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpn_2d8ank.jl:43\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_2d8ank.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_2d8ank.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpn_2d8ank.jl:44\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn_2d8ank.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn_2d8ank.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpn_2d8ank.jl:45\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn_2d8ank.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    counter = 0\n  \
    \  for b in brackets\n        if b == '<'\n            counter += 1\n        elseif\
    \ b == '>'\n            counter -= 1\n        end\n        if counter < 0\n  \
    \          return false\n        end\n    end\n    return counter == 0\nend\n\"\
    \"\"\n    Exercise 7.4\n    ------------\n    Use a loop to write a function called\
    \ digits_to_number that takes a list of\n    digits, beginning with the first\
    \ digit and ending with the last digit. It should\n    return an integer containing\
    \ those digits in the correct order.\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpuqj91h3z.jl:27\nin expression starting at /tmp/tmpuqj91h3z.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_left = 0\
    \ \n    bracket_right = 0 \n    for i in range(1, length(brackets))\n        if\
    \ brackets[i] == \"<\"\n            bracket_left += 1\n        elseif brackets[i]\
    \ == \">\"\n            bracket_right += 1\n        end\n    end\n    if bracket_left\
    \ == bracket_right\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfcz3nf5f.jl:38\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcz3nf5f.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcz3nf5f.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfcz3nf5f.jl:39\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcz3nf5f.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcz3nf5f.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfcz3nf5f.jl:40\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcz3nf5f.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcz3nf5f.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfcz3nf5f.jl:41\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcz3nf5f.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcz3nf5f.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfcz3nf5f.jl:42\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfcz3nf5f.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    stack = Stack()\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4zzq1ksw.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp4zzq1ksw.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4zzq1ksw.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4zzq1ksw.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4zzq1ksw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp4zzq1ksw.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4zzq1ksw.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4zzq1ksw.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4zzq1ksw.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp4zzq1ksw.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4zzq1ksw.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4zzq1ksw.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4zzq1ksw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmp4zzq1ksw.jl:15\n   [2] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zzq1ksw.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n        count = 0\n\
    \        for ch in brackets\n            if ch == '<'\n                count +=\
    \ 1\n            else\n                count -= 1\n            end\n         \
    \   if count < 0\n                return false\n            end\n        end\n\
    \        if count == 0\n            return true\n        else\n            return\
    \ false\n        end\n    end\n \ncorrect_bracketing(\"<>\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for character in brackets\n        if character == \"<\"\n            push!(stack,\
    \ \"<\")\n        elseif character == \">\"\n            if length(stack) > 0\n\
    \                pop!(stack)\n            else\n                return false\n\
    \            end\n        end\n    end\n    return length(stack) == 0\nend\ncorrect_bracketing(\"\
    <>\")\n \n \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7scnhyks.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7scnhyks.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7scnhyks.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp7scnhyks.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7scnhyks.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7scnhyks.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp7scnhyks.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7scnhyks.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7scnhyks.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp7scnhyks.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7scnhyks.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7scnhyks.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp7scnhyks.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7scnhyks.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    i = 0\n    for bracket\
    \ in brackets\n        if bracket == \"<\"\n            i = i + 1\n        elseif\
    \ bracket == \">\"\n            i = i - 1\n        end\n    end\n    return i\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_r3da8pp.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_r3da8pp.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_r3da8pp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_r3da8pp.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_r3da8pp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_r3da8pp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_r3da8pp.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_r3da8pp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_r3da8pp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_r3da8pp.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_r3da8pp.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_r3da8pp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_r3da8pp.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_r3da8pp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_counter\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            bracket_counter\
    \ += 1\n        elseif bracket == '>'\n            bracket_counter -= 1\n    \
    \    end\n        if bracket_counter < 0\n            return false\n        end\n\
    \    end\n    if bracket_counter == 0\n        return true\n    else\n       \
    \ return false\n    end\nend\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdwac3sd2.jl:31\nin expression starting at /tmp/tmpdwac3sd2.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    L = length(brackets)\n\
    \    if L == 0\n        return true\n    end\n    count = 0\n    for i = 1:L\n\
    \        if brackets[i] == '<'\n            count += 1\n        elseif brackets[i]\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    opener_count = 0\n\
    \    for i = 1:length(brackets)\n        if brackets[i] == \"<\"\n           \
    \ opener_count += 1\n        else\n            opener_count -= 1\n        end\n\
    \        if opener_count < 0\n            return false\n        end\n    end\n\
    \    return opener_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_owb2vk.jl:32\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_owb2vk.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_owb2vk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi_owb2vk.jl:33\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_owb2vk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_owb2vk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi_owb2vk.jl:34\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi_owb2vk.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_owb2vk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpi_owb2vk.jl:35\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi_owb2vk.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_owb2vk.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_owb2vk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    openings = 0\n \
    \   closings = 0\n    for i = 1:length(brackets)\n        if brackets[i] == '<'\n\
    \            openings += 1\n        elseif brackets[i] == '>'\n            closings\
    \ += 1\n        end\n    end\n    return openings == closings\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp26qzqgk9.jl:35\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26qzqgk9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26qzqgk9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp26qzqgk9.jl:40\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp26qzqgk9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp26qzqgk9.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp26qzqgk9.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n        n::Int = 0\n\
    \        for c in brackets\n                if c == '<'\n                    \
    \    n += 1\n                elseif c == '>'\n                        n -= 1\n\
    \                end\n                if n < 0\n                        return\
    \ false\n                end\n        end\n        return n == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ b in brackets\n        if b == '<'\n            count += 1\n        elseif b\
    \ == '>'\n            count -= 1\n        end\n    end\n    return count == 0\n\
    end\ncorrect_bracketing(\"<>\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3xry20ov.jl:35\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xry20ov.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xry20ov.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3xry20ov.jl:40\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3xry20ov.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3xry20ov.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3xry20ov.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open = 0\n    close\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      open += 1\n        else\n            close += 1\n        end\n    end\n\
    \    return open == close\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiluxrzmm.jl:35\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiluxrzmm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiluxrzmm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpiluxrzmm.jl:40\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiluxrzmm.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiluxrzmm.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiluxrzmm.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    o_count = 0\n  \
    \  for c in brackets\n        if c == '<'\n            o_count += 1\n        else\n\
    \            o_count -= 1\n        end\n        if o_count < 0\n            return\
    \ false\n        end\n    end\n    return o_count == 0\nend\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptb9ij_u4.jl:27\nin expression starting at /tmp/tmptb9ij_u4.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            n += 1\n        elseif bracket\
    \ == '>'\n            n -= 1\n        end\n        if n < 0\n            return\
    \ false\n        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    left = count(x ->\
    \ x == '<', brackets)\n    right = count(x -> x == '>', brackets)\n    if left\
    \ == right \n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9f2r_whb.jl:32\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9f2r_whb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9f2r_whb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9f2r_whb.jl:37\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9f2r_whb.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9f2r_whb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9f2r_whb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif !(brackets[1] in \"<>\")\n        return\
    \ false\n    elseif brackets[1] == \"<\"\n        if length(brackets) == 1\n \
    \           return false\n        elseif brackets[2] == \">\"\n            return\
    \ correct_bracketing(brackets[3:end])\n        else\n            return correct_bracketing(brackets[2:end])\n\
    \        end\n    else\n        return false\n    end\nend\ncorrect_bracketing(\"\
    <<><>>\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpou0intmc.jl:36\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpou0intmc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpou0intmc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpou0intmc.jl:37\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpou0intmc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpou0intmc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpou0intmc.jl:38\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpou0intmc.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpou0intmc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpou0intmc.jl:39\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpou0intmc.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpou0intmc.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpou0intmc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ flag = true\n    for char in brackets \n        if char == '<' \n          \
    \  push!(stack, char)\n        elseif char == '>' \n            if isempty(stack)\n\
    \                flag = false\n                break\n            else\n     \
    \           pop!(stack)\n            end\n        end\n    end\n    if !isempty(stack)\
    \ \n        flag = false\n    end\n    return flag\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    counter = 0\n  \
    \  for c in brackets \n        if c == '<'\n            counter += 1\n       \
    \ else\n            counter -= 1\n        end\n        if counter < 0\n      \
    \      return false\n        end\n    end\n    return counter == 0\nend\n# correct_bracketing(\"\
    <>\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    N = length(brackets)\n\
    \    stack = Array{Char,1}(undef,N)\n    top = 0 # because we have no elements\n\
    \    for b in brackets\n        if b == '<'\n            top += 1\n          \
    \  stack[top] = b\n        elseif b == '>'\n            if top == 0\n        \
    \        return false\n            elseif stack[top] == '<'\n                top\
    \ -= 1\n            else\n                return false\n            end\n    \
    \    end\n    end\n    if top == 0\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return search_string(brackets[2:end],\
    \ '>') && correct_bracketing(brackets[2:end])\n    elseif brackets[1] == '>'\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppuz8mmuv.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: search_string not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmppuz8mmuv.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppuz8mmuv.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuz8mmuv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppuz8mmuv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: search_string not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmppuz8mmuv.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppuz8mmuv.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuz8mmuv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppuz8mmuv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: search_string not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmppuz8mmuv.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppuz8mmuv.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuz8mmuv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppuz8mmuv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: search_string\
    \ not defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n  \
    \   @ Main "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppuz8mmuv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ Stack{Char}()\n    for b in brackets\n        if b == '<'\n            push!(bracket_stack,\
    \ b)\n        elseif b == '>'\n            if length(bracket_stack) == 0\n   \
    \             return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    return length(bracket_stack) == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgkrcw5wi.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpgkrcw5wi.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgkrcw5wi.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgkrcw5wi.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpgkrcw5wi.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpgkrcw5wi.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgkrcw5wi.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgkrcw5wi.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpgkrcw5wi.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpgkrcw5wi.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgkrcw5wi.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgkrcw5wi.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpgkrcw5wi.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpgkrcw5wi.jl:14\n   [2] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgkrcw5wi.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for character in brackets\n        if character == \"<\"\n          \
    \  open_brackets += 1\n        elseif character == \">\"\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nprintln(correct_bracketing(\"\
    <\"))\nprintln(correct_bracketing(\"<>\"))\nprintln(correct_bracketing(\"<<><>>\"\
    ))\nprintln(correct_bracketing(\"><<>\"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "true\ntrue\ntrue\ntrue\ntest set: Test Failed at /tmp/tmpp4vu9nd3.jl:40\n\
    \  Expression: candidate(\"<<<><>>>>\") == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4vu9nd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4vu9nd3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpp4vu9nd3.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4vu9nd3.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4vu9nd3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpp4vu9nd3.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4vu9nd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4vu9nd3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpp4vu9nd3.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp4vu9nd3.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp4vu9nd3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpp4vu9nd3.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1."
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp4vu9nd3.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    opening_brackets\
    \ = []\n    for bracket in brackets\n        if bracket == \"<\"\n           \
    \ push!(opening_brackets, bracket)\n        elseif bracket == \">\"\n        \
    \    if isempty(opening_brackets)\n                return false\n            else\n\
    \                pop!(opening_brackets)\n            end\n        end\n    end\n\
    \    return isempty(opening_brackets)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2z0gttt.jl:37\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph2z0gttt.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph2z0gttt.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph2z0gttt.jl:38\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph2z0gttt.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph2z0gttt.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph2z0gttt.jl:39\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph2z0gttt.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph2z0gttt.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph2z0gttt.jl:40\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph2z0gttt.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph2z0gttt.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph2z0gttt.jl:41\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2z0gttt.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    c = 0\n    for i\
    \ in brackets\n        if i == \"<\"\n            c += 1\n        elseif i ==\
    \ \">\"\n            c -= 1\n        end\n        if c < 0\n            return\
    \ false\n        end\n    end\n    return c == 0\nend\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu7s01wrj.jl:27\nin expression starting at /tmp/tmpu7s01wrj.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    return count(x ->\
    \ x == '<', brackets) == count(x -> x == '>', brackets)\nend\ncorrect_bracketing(\"\
    <\")\ncorrect_bracketing(\"<>\")\ncorrect_bracketing(\"<<><>>\")\ncorrect_bracketing(\"\
    ><<>\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiym0072c.jl:30\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiym0072c.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiym0072c.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpiym0072c.jl:35\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiym0072c.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiym0072c.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiym0072c.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return True\n    elseif brackets[1] == '<'\n        if length(brackets)\
    \ == 1\n            return False\n        elseif correct_bracketing(brackets[2:end])\
    \ == false\n            return false\n        else\n            return true\n\
    \        end\n    elseif brackets[1] == '>'\n        if length(brackets) == 1\n\
    \            return False\n        elseif correct_bracketing(brackets[2:end])\
    \ == false\n            return false\n        else\n            return true\n\
    \        end\n    end\nend\n \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph1p7o35x.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: False not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmph1p7o35x.jl:26\n\
    \   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmph1p7o35x.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph1p7o35x.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph1p7o35x.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph1p7o35x.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: False not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmph1p7o35x.jl:26\n\
    \   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmph1p7o35x.jl:27\n\
    \   [3] correct_bracketing(brackets::String)\n     @ Main /tmp/tmph1p7o35x.jl:19\n\
    \   [4] correct_bracketing(brackets::String)\n     @ Main /tmp/tmph1p7o35x.jl:27\n\
    \   [5] correct_bracketing(brackets::String) (repeats 2 times)\n     @ Main /tmp/tmph1p7o35x.jl:19\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmph1p7o35x.jl:41 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmph1p7o35x.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph1p7o35x.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: False not defined\n  Stacktrace:\n\
    \    [1] correct_bracketing(brackets::String)\n      @ Main /tmp/tmph1p7o35x.jl:26\n\
    \    [2] correct_bracketing(brackets::String)\n      @ Main /tmp/tmph1p7o35x.jl:19\n\
    \    [3] correct_bracketing(brackets::String) (repeats 2 times)\n      @ Main\
    \ /tmp/tmph1p7o35x.jl:27\n    [4] correct_bracketi"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph1p7o35x.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    left_count = 0\n\
    \    right_count = 0\n    for bracket in brackets\n        if bracket == \"<\"\
    \n            left_count += 1\n        elseif bracket == \">\"\n            right_count\
    \ += 1\n        end\n    end\n    left_count == right_count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb8jge3j3.jl:34\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8jge3j3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8jge3j3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb8jge3j3.jl:35\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8jge3j3.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8jge3j3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb8jge3j3.jl:36\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8jge3j3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8jge3j3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb8jge3j3.jl:37\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8jge3j3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8jge3j3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpb8jge3j3.jl:38\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8jge3j3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ []\n    for bracket in brackets\n        push!(bracket_stack, bracket)\n   \
    \ end\n    for i in bracket_stack\n        if i == \"<\"\n            continue\n\
    \        else\n            if pop!(bracket_stack) == \"<\"\n                continue\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    isempty(bracket_stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpewpo5mzm.jl:36\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewpo5mzm.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewpo5mzm.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpewpo5mzm.jl:37\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewpo5mzm.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewpo5mzm.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpewpo5mzm.jl:38\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpewpo5mzm.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewpo5mzm.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpewpo5mzm.jl:39\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpewpo5mzm.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewpo5mzm.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewpo5mzm.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)%2\
    \ != 0 \n        return false\n    end\n    left_count = 0\n    right_count =\
    \ 0\n    for i = 1:length(brackets)\n        if brackets[i] == '<'\n         \
    \   left_count += 1\n        elseif brackets[i] == '>'\n            right_count\
    \ += 1\n        end\n        if right_count > left_count\n            return false\n\
    \        end\n    end\n    if left_count == right_count\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n_left = 0\n   \
    \ n_right = 0\n    for char in brackets\n        if char == \"<\"\n          \
    \  n_left += 1\n        else\n            n_right += 1\n        end\n    end\n\
    \    return n_left == n_right\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp98ds45b3.jl:30\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98ds45b3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98ds45b3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp98ds45b3.jl:31\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98ds45b3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98ds45b3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp98ds45b3.jl:32\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp98ds45b3.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98ds45b3.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp98ds45b3.jl:33\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp98ds45b3.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98ds45b3.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp98ds45b3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  count_less = 0\n \
    \ count_more = 0\n  # traverse the string\n  for i in 1:length(brackets)\n   \
    \ if brackets[i] == '<'\n      count_less += 1\n    else\n      count_more +=\
    \ 1\n    end\n  end\n  if count_less == count_more\n    return true\n  else\n\
    \    return false\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4e1b5w6.jl:40\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4e1b5w6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4e1b5w6.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpw4e1b5w6.jl:45\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw4e1b5w6.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw4e1b5w6.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4e1b5w6.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        else\n            count -= 1\n        end\n        if count < 0\n\
    \            return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    depth = 0\n    for\
    \ char in brackets\n        if char == '<'\n            depth += 1\n        elseif\
    \ char == '>'\n            depth -= 1\n        end\n        if depth < 0\n   \
    \         return false\n        end\n    end\n    return depth == 0\nend\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp74tigdv1.jl:27\nin expression starting at /tmp/tmp74tigdv1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  return bracket_depth(brackets)\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpek40l3wg.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: bracket_depth not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpek40l3wg.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpek40l3wg.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpek40l3wg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpek40l3wg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: bracket_depth not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpek40l3wg.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpek40l3wg.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpek40l3wg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpek40l3wg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: bracket_depth not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpek40l3wg.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpek40l3wg.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpek40l3wg.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpek40l3wg.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: bracket_depth\
    \ not defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n  \
    \   @ Main "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpek40l3wg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == \"<\"\n            count\
    \ += 1\n        elseif brackets[i] == \">\"\n            count -= 1\n        end\n\
    \    end\n    return count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplumxtkkt.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplumxtkkt.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplumxtkkt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplumxtkkt.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplumxtkkt.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplumxtkkt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplumxtkkt.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplumxtkkt.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplumxtkkt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplumxtkkt.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplumxtkkt.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplumxtkkt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplumxtkkt.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplumxtkkt.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in range(1,length(brackets))\n        if brackets[i] == '<'\n            count\
    \ += 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    else\n        @assert brackets[1] == '<' || brackets[1]\
    \ == '>'\n        return count(eachmatch('<', brackets)) == count(eachmatch('>',\
    \ brackets)) && \n            correct_bracketing(brackets[2:end])\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe7vjg0vd.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: no method matching eachmatch(::Char,\
    \ ::String)\n  Closest candidates are:\n    eachmatch(!Matched::Regex, ::AbstractString;\
    \ overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:741\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpe7vjg0vd.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe7vjg0vd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe7vjg0vd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpe7vjg0vd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: no method matching eachmatch(::Char,\
    \ ::String)\n  Closest candidates are:\n    eachmatch(!Matched::Regex, ::AbstractString;\
    \ overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:741\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpe7vjg0vd.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe7vjg0vd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe7vjg0vd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpe7vjg0vd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  MethodError: no method matching eachmatch(::Char,\
    \ ::String)\n  Closest candidates are:\n    eachmatch(!Matched::Regex, ::AbstractString;\
    \ overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:741\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpe7vjg0vd.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe7vjg0vd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"Simple check\
    \ if all brackets have a closing bracket.\"\"\"\n    open_count::Int64 = 0\n \
    \   for bracket::Char in brackets\n        if bracket == '<'\n            open_count\
    \ += 1\n        elseif bracket == '>'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   if open_count == 0\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n, counter = length(brackets),\
    \ 0\n    for i in 1:n\n        if brackets[i] == '<'\n            counter += 1\n\
    \        elseif brackets[i] == '>'\n            counter -= 1\n        end\n  \
    \      if counter < 0\n            return false\n        end\n    end\n    return\
    \ counter == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    l = length(brackets)\n\
    \    sum = 0\n    for i = 1:l\n        if brackets[i] == '<'\n            sum\
    \ += 1\n        elseif brackets[i] == '>'\n            sum -= 1\n        end\n\
    \        if sum < 0\n            return false\n        end\n    end\n    if sum\
    \ == 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = count(brackets,\"\
    <\")\n    m = count(brackets,\">\")\n    if n!=m \n        return false\n    else\n\
    \        start = firstindex(brackets,\"<\")\n        end = lastindex(brackets,\"\
    >\")\n        if start>end\n            return false\n        else\n         \
    \   return true\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpypg3p4mj.jl:21\nin expression starting at /tmp/tmpypg3p4mj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\" brackets\
    \ is a string of \"<\" and \">\".\n    return True if every opening bracket has\
    \ a corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjoccer1.jl:1\nin expression starting at /tmp/tmptjoccer1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    x=0\n    for i in\
    \ brackets\n        if i=='<'\n            x=x+1\n        elseif i=='>'\n    \
    \        x=x-1\n        end\n        if x<0\n            return false\n      \
    \  end\n    end\n    if x==0\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    depth = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            depth += 1\n   \
    \     elseif bracket == '>'\n            depth -= 1\n        end\n        if depth\
    \ < 0\n            return false\n        end\n    end\n    return depth == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    depth = 0\n    for\
    \ x in brackets\n        if x == '<'\n            depth += 1\n        elseif x\
    \ == '>'\n            depth -= 1\n        end\n        if depth < 0\n        \
    \    return false\n        end\n    end\n    return depth == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Base case: If\
    \ brackets is empty, then return True.\n    if brackets == \"\"\n        return\
    \ true\n    end\n    \n    # Base case: If the first character is \">\", then\
    \ return False.\n    if brackets[1] == '>'\n        return false\n    end\n  \
    \  \n    # Recursive case: If the first character is \"<\", then we need to know\
    \ if\n    # the rest of the string has correct bracketing.\n    if brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    end\n    \n\
    \    # Recursive case: If the first character is not \"<\", then we need to know\n\
    \    # if the first character is the closing bracket for a substring at the\n\
    \    # beginning of the string that has correct bracketing.\n    matching_bracket_index\
    \ = findfirst(brackets, '>')\n    return correct_bracketing(brackets[matching_bracket_index+1:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptsmimua1.jl:41\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptsmimua1.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptsmimua1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmptsmimua1.jl:42\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptsmimua1.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptsmimua1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmptsmimua1.jl:43\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptsmimua1.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptsmimua1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmptsmimua1.jl:44\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptsmimua1.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptsmimua1.jl:40\ntest set: Test\
    \ Failed at /tmp/tmptsmimua1.jl:47\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptsmimua1.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Replace the ???\
    \ below with an expression that produces\n    # the correct Boolean result.\n\
    \    open, close = 0, 0\n    for b in brackets\n        if b == '<'\n        \
    \    open += 1\n        elseif b == '>'\n            close += 1\n        end\n\
    \    end\n    close <= open\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3v2c7ljh.jl:36\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v2c7ljh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v2c7ljh.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3v2c7ljh.jl:37\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v2c7ljh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v2c7ljh.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3v2c7ljh.jl:38\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v2c7ljh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v2c7ljh.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3v2c7ljh.jl:40\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v2c7ljh.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v2c7ljh.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3v2c7ljh.jl:41\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3v2c7ljh.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" \n        return true\n    elseif brackets[1] == '<' \n        if findfirst('>',\
    \ brackets) == nothing \n            return false\n        else\n            correct_bracketing(brackets[findfirst('>',\
    \ brackets):end])\n        end\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4dmecsvn.jl:31\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4dmecsvn.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4dmecsvn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4dmecsvn.jl:32\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4dmecsvn.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4dmecsvn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4dmecsvn.jl:33\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4dmecsvn.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4dmecsvn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4dmecsvn.jl:34\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4dmecsvn.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4dmecsvn.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4dmecsvn.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<'\n        if brackets[2] == '>'\n            return correct_bracketing(brackets[3:end])\n\
    \        elseif brackets[2] == '<'\n            return correct_bracketing(brackets[2:end])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpty9tpa23.jl:34\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9tpa23.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9tpa23.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpty9tpa23.jl:35\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpty9tpa23.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9tpa23.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpty9tpa23.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpty9tpa23.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9tpa23.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpty9tpa23.jl:42\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpty9tpa23.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpty9tpa23.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpty9tpa23.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Your code here\n\
    \    left = count(x -> x == '<', brackets)\n    right = count(x -> x == '>', brackets)\n\
    \    if left == right\n        return true\n    else\n        return false\n \
    \   end\nend\n \n \n \n \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdeojutz_.jl:37\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdeojutz_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdeojutz_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdeojutz_.jl:42\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdeojutz_.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdeojutz_.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdeojutz_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    counter = 0\n    for i in 1:n\n        if brackets[i] == '<'\n          \
    \  counter += 1\n        elseif brackets[i] == '>'\n            counter -= 1\n\
    \        end\n        if counter < 0\n            return false\n        end\n\
    \    end\n    if counter == 0\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ b in brackets\n        if b == \"<\"\n            count += 1\n        elseif\
    \ b == \">\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpld16bh1w.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpld16bh1w.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpld16bh1w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpld16bh1w.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpld16bh1w.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpld16bh1w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpld16bh1w.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpld16bh1w.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpld16bh1w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpld16bh1w.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpld16bh1w.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpld16bh1w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpld16bh1w.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpld16bh1w.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    sum = 0\n    for i in brackets\n        if i == '<'\n            sum = sum\
    \ + 1\n        elseif i == '>'\n            sum = sum - 1\n        end\n     \
    \   if sum < 0\n            return false\n        end\n    end\n    return sum\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    opening = 0\n  \
    \  for bracket in brackets\n        if bracket == '<'\n            opening +=\
    \ 1\n        elseif bracket == '>'\n            opening -= 1\n        end\n  \
    \  end\n    return opening == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5_zzm9h9.jl:34\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_zzm9h9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_zzm9h9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5_zzm9h9.jl:39\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_zzm9h9.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_zzm9h9.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_zzm9h9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for c\
    \ in brackets\n        if c == '<'\n            n += 1\n        elseif c == '>'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    count = 0\n\
    \    for i in brackets\n        if i == '<'\n            count += 1\n        elseif\
    \ i == '>'\n            count -= 1\n        end\n        if count < 0\n      \
    \      return false\n        end\n    end\n    if count != 0\n        return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    l = length(brackets)\n\
    \    i = 1\n    counter = 0\n    while i <= l\n        if brackets[i] == \"<\"\
    \n            counter += 1\n        elseif brackets[i] == \">\"\n            counter\
    \ -= 1\n        end\n        if counter < 0\n            return false\n      \
    \  end\n        i += 1\n    end\n    return counter == 0\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp87c6_1tb.jl:39\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp87c6_1tb.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp87c6_1tb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp87c6_1tb.jl:40\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp87c6_1tb.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp87c6_1tb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp87c6_1tb.jl:41\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp87c6_1tb.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp87c6_1tb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp87c6_1tb.jl:42\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp87c6_1tb.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp87c6_1tb.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp87c6_1tb.jl:43\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp87c6_1tb.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    left_counter = 0\n\
    \    right_counter = 0\n    for item in brackets\n        if item == \"<\"\n \
    \           left_counter += 1\n        elseif item == \">\"\n            right_counter\
    \ += 1\n        end\n    end\n    if left_counter == right_counter\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqtn3q1gi.jl:38\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtn3q1gi.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtn3q1gi.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqtn3q1gi.jl:39\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtn3q1gi.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtn3q1gi.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqtn3q1gi.jl:40\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtn3q1gi.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtn3q1gi.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqtn3q1gi.jl:41\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqtn3q1gi.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqtn3q1gi.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqtn3q1gi.jl:42\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqtn3q1gi.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets_stack =\
    \ Stack(length(brackets))\n    for i in brackets\n        push!(brackets_stack,\
    \ i)\n    end\n    opening_brackets = []\n    while !isempty(brackets_stack)\n\
    \        i = pop!(brackets_stack)\n        if i == '<'\n            push!(opening_brackets,\
    \ i)\n        else\n            if isempty(opening_brackets)\n               \
    \ return false\n            else\n                pop!(opening_brackets)\n   \
    \         end\n        end\n    end\n    if isempty(opening_brackets)\n      \
    \  return true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt2my3_yk.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpt2my3_yk.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt2my3_yk.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt2my3_yk.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpt2my3_yk.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpt2my3_yk.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt2my3_yk.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt2my3_yk.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpt2my3_yk.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpt2my3_yk.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt2my3_yk.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt2my3_yk.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpt2my3_yk.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpt2my3_yk.jl:14\n   [2] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt2my3_yk.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    closed_count = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == \"<\"\n            open_count += 1\n        elseif brackets[i] == \">\"\n\
    \            closed_count += 1\n        end\n    end\n    return open_count ==\
    \ closed_count\nend\n\"\"\" brackets is a string of \"<\" and \">\".\n    return\
    \ True if every opening bracket has a corresponding closing bracket and\n    all\
    \ closing brackets have a corresponding opening bracket.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpby5j6mm9.jl:25\nin expression starting at\
    \ /tmp/tmpby5j6mm9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    opened_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      opened_brackets += 1\n        elseif brackets[i] == '>'\n            opened_brackets\
    \ -= 1\n        end\n        if opened_brackets < 0\n            return false\n\
    \        end\n    end\n    return opened_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  open::Int = 0\n  closed::Int\
    \ = 0\n  for b in brackets\n    if b == '<'\n      open += 1\n    elseif b ==\
    \ '>'\n      closed += 1\n    end\n  end\n  return open == closed\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2fvurhxp.jl:35\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2fvurhxp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2fvurhxp.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2fvurhxp.jl:40\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2fvurhxp.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2fvurhxp.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2fvurhxp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    left_count::Int\
    \ = 0\n    for char in brackets\n        if char == '<'\n            left_count\
    \ += 1\n        elseif char == '>'\n            left_count -= 1\n        end\n\
    \        if left_count < 0\n            return false\n        end\n    end\n \
    \   return left_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    total_op=count(x->x=='<',brackets)\n\
    \    total_close=count(x->x=='>',brackets)\n    if total_op==total_close\n   \
    \     return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw_qxm3fx.jl:32\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw_qxm3fx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw_qxm3fx.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpw_qxm3fx.jl:37\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw_qxm3fx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw_qxm3fx.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw_qxm3fx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count_open = 0 \n\
    \    count_close = 0 \n    for x in brackets \n        if x == \"<\" \n      \
    \      count_open += 1 \n        elseif x == \">\" \n            count_close +=\
    \ 1 \n        end \n    end \n    return count_open == count_close \nend \n  \
    \  \n \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphnm01sm6.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphnm01sm6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphnm01sm6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphnm01sm6.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphnm01sm6.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphnm01sm6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphnm01sm6.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphnm01sm6.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphnm01sm6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphnm01sm6.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphnm01sm6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphnm01sm6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphnm01sm6.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphnm01sm6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    amount = 0\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            amount += 1\n\
    \        elseif bracket == '>'\n            amount -= 1\n        end\n       \
    \ if amount < 0\n            return false\n        end\n    end\n    return amount\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    result = 0\n   \
    \ for a in brackets \n        if a == \"<\"\n            result += 1\n       \
    \ elseif a == \">\"\n            result -= 1\n        end\n    end\n    return\
    \ result == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcsb7gl02.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsb7gl02.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsb7gl02.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcsb7gl02.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsb7gl02.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsb7gl02.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcsb7gl02.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsb7gl02.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsb7gl02.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcsb7gl02.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsb7gl02.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcsb7gl02.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcsb7gl02.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcsb7gl02.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    #use assert to check\
    \ input type\n    assert(isstring(brackets),\"input should be string!\")\n   \
    \ #use sum to check if the number of < is equal to the number of >\n    return\
    \ sum(x=='<' for x in brackets) == sum(x=='>' for x in brackets) \nend\n \n \n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzf92rgms.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: isstring not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpzf92rgms.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzf92rgms.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzf92rgms.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzf92rgms.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: isstring not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpzf92rgms.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzf92rgms.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzf92rgms.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzf92rgms.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: isstring not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpzf92rgms.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzf92rgms.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzf92rgms.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzf92rgms.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: isstring\
    \ not defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n  \
    \   @ Main /tmp/tmpzf92rgms.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzf92rgms.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count_l_brackets\
    \ = 0\n    count_r_brackets = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            count_l_brackets += 1\n        else\n            count_r_brackets\
    \ += 1\n        end\n    end\n    if count_l_brackets == count_r_brackets\n  \
    \      return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz73h6dvf.jl:39\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz73h6dvf.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz73h6dvf.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpz73h6dvf.jl:44\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz73h6dvf.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz73h6dvf.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz73h6dvf.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in brackets\n        if i == \"<\"\n            n = n + 1\n        elseif i\
    \ == \">\"\n            n = n - 1\n        end\n        if n < 0\n           \
    \ return false\n        end\n    end\n    if n == 0\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9qstln7s.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qstln7s.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qstln7s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9qstln7s.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qstln7s.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qstln7s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9qstln7s.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qstln7s.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qstln7s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9qstln7s.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9qstln7s.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9qstln7s.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp9qstln7s.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qstln7s.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    left_brackets =\
    \ 0\n    right_brackets = 0\n    for c in brackets\n        if c == '<'\n    \
    \        left_brackets += 1\n        elseif c == '>'\n            right_brackets\
    \ += 1\n        end\n    end\n    return left_brackets == right_brackets\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzbyamkzg.jl:35\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzbyamkzg.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzbyamkzg.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzbyamkzg.jl:40\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzbyamkzg.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzbyamkzg.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzbyamkzg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    close_count = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            open_count += 1\n        elseif brackets[i] == '>'\n   \
    \         close_count += 1\n        end\n    end\n    if open_count == close_count\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpred7e4mh.jl:39\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpred7e4mh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpred7e4mh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpred7e4mh.jl:44\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpred7e4mh.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpred7e4mh.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpred7e4mh.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_opening = count(x\
    \ -> x == '<', brackets)\n    num_closing = count(x -> x == '>', brackets)\n \
    \   return num_opening == num_closing\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbuh70ma_.jl:28\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbuh70ma_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbuh70ma_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbuh70ma_.jl:33\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbuh70ma_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbuh70ma_.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbuh70ma_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n=0\n    for c in\
    \ brackets\n        if c=='<'\n            n+=1\n        elseif c=='>'\n     \
    \       n-=1\n        end\n        if n<0\n            return false\n        end\n\
    \    end\n    if n==0\n        return true\n    else\n        return false\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '<'\n            count +=\
    \ 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    if\
    \ count == 0\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = Deque([])\n\
    \    for c in brackets \n        if c == '<'\n            push!(stack, c)\n  \
    \      elseif c == '>'\n            if isempty(stack)\n                return\
    \ false\n            else \n                pop!(stack)\n            end\n   \
    \     end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsjcs2hnt.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Deque not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpsjcs2hnt.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjcs2hnt.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjcs2hnt.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpsjcs2hnt.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Deque not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpsjcs2hnt.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjcs2hnt.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjcs2hnt.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpsjcs2hnt.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Deque not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpsjcs2hnt.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjcs2hnt.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjcs2hnt.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpsjcs2hnt.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Deque not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpsjcs2hnt.jl:14\n   [2] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjcs2hnt.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for b in brackets\n        if b == '<'\n            push!(stack, b)\n      \
    \  else\n            if empty!(stack)\n                return false\n        \
    \    else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return empty!(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3vrymhje.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"<>\") == true\\n  TypeError: non-boolean\
    \ (Vector{Any}) used in boolean context\\n  Stacktrace:\\n   [1] correct_bracketing(brackets::String)\\\
    n     @ Main /tmp/tmp3vrymhje.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3vrymhje.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3vrymhje.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp3vrymhje.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<<><>>\") == true\\n  TypeError: non-boolean (Vector{Any}) used\
    \ in boolean context\\n  Stacktrace:\\n   [1] correct_bracketing(brackets::String)\\\
    n     @ Main /tmp/tmp3vrymhje.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3vrymhje.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3vrymhje.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp3vrymhje.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\\n  TypeError: non-boolean (Vector{Any})\
    \ used in boolean context\\n  Stacktrace:\\n   [1] correct_bracketing(brackets::String)\\\
    n     @ Main /tmp/tmp3vrymhje.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3vrymhje.jl:35 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3vrymhje.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp3vrymhje.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\\n  T"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    openbrackets = 0\n\
    \    for b in brackets\n        if b == '<'\n            openbrackets += 1\n \
    \       elseif b == '>'\n            openbrackets -= 1\n        end\n        if\
    \ openbrackets < 0\n            return false\n        end\n    end\n    if openbrackets\
    \ == 0\n        return true\n    else\n        return false\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    b = 0\n    for i\
    \ in brackets \n        if i == '<' \n            b += 1\n        elseif i ==\
    \ '>'\n            b -= 1\n        end\n        if b < 0 \n            return\
    \ false\n        end\n    end\n    if b != 0 \n        return false\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = [] \n  \
    \  for bracket in brackets \n        if bracket == \"<\"\n            push!(stack,\
    \ bracket)\n        else\n            if isempty(stack) \n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprmallyjx.jl:33\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprmallyjx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprmallyjx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprmallyjx.jl:34\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprmallyjx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprmallyjx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprmallyjx.jl:35\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprmallyjx.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprmallyjx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmprmallyjx.jl:36\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprmallyjx.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprmallyjx.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprmallyjx.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    br = 0\n    for\
    \ i = 1:length(brackets)\n        if brackets[i] == '<'\n            br += 1\n\
    \        elseif brackets[i] == '>'\n            br -= 1\n        end\n       \
    \ if br < 0\n            return false\n        end\n    end\n    if br == 0\n\
    \        return true\n    else\n        return false\n    end\nend\n# test\nprintln(correct_bracketing(\"\
    <\"))\nprintln(correct_bracketing(\"<>\"))\nprintln(correct_bracketing(\"<<><>>\"\
    ))\nprintln(correct_bracketing(\"><<>\"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "false\ntrue\ntrue\nfalse\nTest Summary: | Pass  Total\ntest set      |\
    \   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if isempty(brackets)\n\
    \        return true\n    elseif isequal(first(brackets),'>')\n        return\
    \ false\n    elseif isequal(last(brackets),'<')\n        return false\n    else\n\
    \        return correct_bracketing(join(dropfirst(split(brackets, '>')),'>'))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp36ygo9p0.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: dropfirst not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp36ygo9p0.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp36ygo9p0.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36ygo9p0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp36ygo9p0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: dropfirst not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp36ygo9p0.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp36ygo9p0.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36ygo9p0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp36ygo9p0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: dropfirst not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp36ygo9p0.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp36ygo9p0.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36ygo9p0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp36ygo9p0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: dropfirst\
    \ not defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n  \
    \   @ Main /tmp/tmp36ygo9p0"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36ygo9p0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  if brackets == \"\"\
    \n    return true\n  elseif (brackets[1] == '<') && (brackets[end] == '>')\n \
    \   return correct_bracketing(brackets[2:end-1])\n  else\n    return false\n \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjc041t_z.jl:28\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjc041t_z.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjc041t_z.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjc041t_z.jl:29\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjc041t_z.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjc041t_z.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjc041t_z.jl:30\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjc041t_z.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjc041t_z.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjc041t_z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ % 2 != 0\n        return false\n    end\n    i = 0\n    j = 0\n    for k in\
    \ 1:length(brackets)\n        if brackets[k] == '<'\n            i += 1\n    \
    \    else\n            j += 1\n        end\n    end\n    return i == j\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp41hnn584.jl:38\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp41hnn584.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp41hnn584.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp41hnn584.jl:43\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp41hnn584.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp41hnn584.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp41hnn584.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i = 1:length(brackets)\n        bracket = brackets[i]\n        if bracket\
    \ == '<'\n            push!(stack, '<')\n        elseif bracket == '>'\n     \
    \       if isempty(stack)\n                return false\n            else\n  \
    \              pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    return brackets\
    \ == \"\" || isopen(brackets[1]) && correct_bracketing(brackets[2:end]) || isclose(brackets[1])\
    \ && correct_bracketing(brackets[2:end])\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgpg04amo.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: no method matching isopen(::Char)\n\
    \  Closest candidates are:\n    isopen(!Matched::Union{Base.DevNull, Core.CoreSTDERR,\
    \ Core.CoreSTDOUT}) at /shared/centos7/julia/1.7.3/share/julia/base/coreio.jl:23\n\
    \    isopen(!Matched::Base.AbstractPipe) at /shared/centos7/julia/1.7.3/share/julia/base/io.jl:386\n\
    \    isopen(!Matched::Base.GenericIOBuffer) at /shared/centos7/julia/1.7.3/share/julia/base/iobuffer.jl:351\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpgpg04amo.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgpg04amo.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgpg04amo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgpg04amo.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: no method matching isopen(::Char)\n\
    \  Closest candidates are:\n    isopen(!Matched::Union{Base.DevNull, Core.CoreSTDERR,\
    \ Core.CoreSTDOUT}) at /shared/centos7/julia/1.7.3/share/julia/base/coreio.jl:23\n\
    \    isopen(!Matched::Base.AbstractPipe) at /shared/centos7/julia/1.7.3/share/julia/base/io.jl:386\n\
    \    isopen(!Matched::Base.GenericIOBuffer) at /shared/centos7/julia/1.7.3/share/julia/base/iobuffer.jl:351\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpgpg04amo.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgpg04amo.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgpg04amo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgpg04amo.jl:23\n  Test threw exception\n  Expression:\
    \ c"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgpg04amo.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  if brackets == \"\
    <\"\n    return false\n  end\n  if brackets == \"\"\n    return true\n  end\n\
    \  if brackets[1] == \">\"\n    return false\n  end\n  if brackets[end] == \"\
    <\"\n    return false\n  end\n  return correct_bracketing(replace(brackets, \"\
    <>\", \"\"))\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy_06ulji.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpy_06ulji.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy_06ulji.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy_06ulji.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpy_06ulji.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpy_06ulji.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy_06ulji.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy_06ulji.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy_06ulji.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    i = 0\n    for j\
    \ = 1:length(brackets)\n        if brackets[j] == '<'\n            i += 1\n  \
    \      else\n            i -= 1\n        end\n        if i < 0\n            return\
    \ false\n        end\n    end\n    return i == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    opens = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            opens += 1\n   \
    \     elseif bracket == '>'\n            opens -= 1\n        end\n        if opens\
    \ < 0\n            return false\n        end\n    end\n    if opens == 0\n   \
    \     return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    match_count = 0\n\
    \    for letter in brackets \n        if letter == \"<\" \n            match_count\
    \ += 1\n        elseif letter == \">\" \n            match_count -= 1\n      \
    \  end\n        if match_count < 0\n            return false\n        end\n  \
    \  end\n    return match_count == 0\nend\n\"\"\"\n    >>> brackets_to_len(\"<<><>>\"\
    )\n    6\n    >>> brackets_to_len(\"<>\")\n    2\n    >>> brackets_to_len(\"<>>\"\
    )\n    2\n    >>> brackets_to_len(\"<<><>>><\")\n    6\n    >>> brackets_to_len(\"\
    <><><>><><>\")\n    8\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpq16szbf5.jl:27\nin expression starting at /tmp/tmpq16szbf5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n   stack = []\n   for\
    \ b in brackets\n       if b == '<'\n           push!(stack, b)\n       elseif\
    \ b == '>'\n           if length(stack) == 0\n               return false\n  \
    \         else\n               pop!(stack)\n           end\n       end\n   end\n\
    \   return length(stack) == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    # If the length\
    \ of the string is odd, the string cannot possibly have a \n    # matching opening\
    \ and closing bracket. Therefore, return false.\n    if mod(length(brackets),\
    \ 2) == 1\n        return false\n    end\n    \n    # Create a new empty stack\
    \ to store open brackets.\n    open_brackets = Stack{Char}()\n    \n    # Loop\
    \ through the characters in the string.\n    for c in brackets\n        \n   \
    \     # If the character is an opening bracket, add it to the stack.\n       \
    \ if c == '<'\n            push!(open_brackets, c)\n            \n        # If\
    \ the character is a closing bracket, pop the most recent open bracket from the\
    \ stack.\n        elseif c == '>'\n            if isempty(open_brackets)\n   \
    \             return false\n            else\n                pop!(open_brackets)\n\
    \            end\n        end\n    end\n    \n    # If the stack is empty, return\
    \ true. Otherwise, return false.\n    if isempty(open_brackets)\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo_9wat19.jl:53\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpo_9wat19.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_9wat19.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_9wat19.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpo_9wat19.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpo_9wat19.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_9wat19.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_9wat19.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpo_9wat19.jl:55\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpo_9wat19.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo_9wat19.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo_9wat19.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpo_9wat19.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpo_9wat19.jl:22\n   [2] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_9wat19.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open::Int64 = 0\n\
    \    for b in brackets\n        if b == '<'\n            open += 1\n        else\n\
    \            open -= 1\n        end\n        if open < 0\n            return false\n\
    \        end\n    end\n    return open == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets[1] ==\
    \ \">\"\n        return false\n    end\n    i = 1\n    j = 1\n    while i < length(brackets)\
    \ && j < length(brackets)\n        if brackets[i] == \"<\"\n            i += 1\n\
    \        elseif brackets[j] == \">\"\n            j += 1\n        elseif brackets[i]\
    \ == \">\" && brackets[j] == \"<\"\n            return false\n        end\n  \
    \  end\n    if i == j\n        return true\n    else\n        return false\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            n += 1\n        elseif bracket\
    \ == '>'\n            n -= 1\n        end\n        if n < 0\n            return\
    \ false\n        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    <\"\n        return false\n    end\n    left_brackets = 0\n    right_brackets\
    \ = 0\n    for x in brackets\n        if x == \"<\"\n            left_brackets\
    \ += 1\n        elseif x == \">\"\n            right_brackets += 1\n        end\n\
    \    end\n    if left_brackets != right_brackets\n        return false\n    end\n\
    \    last_left = false\n    for x in brackets\n        if x == \"<\"\n       \
    \     last_left = true\n        elseif x == \">\"\n            if last_left ==\
    \ false\n                return false\n            end\n            last_left\
    \ = false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ceiiir6.jl:51\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ceiiir6.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ceiiir6.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp_ceiiir6.jl:52\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ceiiir6.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ceiiir6.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp_ceiiir6.jl:54\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ceiiir6.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ceiiir6.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp_ceiiir6.jl:55\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ceiiir6.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ceiiir6.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp_ceiiir6.jl:56\n  Expression: candidate(\"<<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ceiiir6.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0 \n\
    \    for bracket in brackets \n        if bracket == \"<\" \n            open_count\
    \ += 1 \n        elseif bracket == \">\" \n            open_count -= 1 \n    \
    \    else \n            error(\"Not a bracket\") \n        end \n        if open_count\
    \ < 0 \n            return false \n        end \n    end \n    return open_count\
    \ == 0 \nend \n \n \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpofiyk1hl.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  Not a bracket\n  Stacktrace:\n   [1]\
    \ error(s::String)\n     @ Base ./error.jl:33\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpofiyk1hl.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpofiyk1hl.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpofiyk1hl.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpofiyk1hl.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  Not a bracket\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] correct_bracketing(brackets::String)\n    \
    \ @ Main /tmp/tmpofiyk1hl.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpofiyk1hl.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpofiyk1hl.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpofiyk1hl.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  Not a bracket\n  Stacktrace:\n   [1]\
    \ error(s::String)\n     @ Base ./error.jl:33\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpofiyk1hl.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpofiyk1hl.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpofiyk1hl.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpofiyk1hl.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  Not a bracket\n  Stacktrace:\n\
    \   [1] error(s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpofiyk1hl.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    opening_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            opening_brackets\
    \ += 1\n        else\n            opening_brackets -= 1\n        end\n       \
    \ if opening_brackets < 0\n            return false\n        end\n    end\n  \
    \  return opening_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets \n        if i == '<'\n            count += 1\n        elseif\
    \ i == '>'\n            count -= 1\n        end\n        if count < 0\n      \
    \      return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count::Int\
    \ = 0\n    for i::Int in 1:length(brackets)\n        if brackets[i] == \"<\"\n\
    \            bracket_count += 1\n        elseif brackets[i] == \">\"\n       \
    \     bracket_count -= 1\n        end\n        if bracket_count < 0\n        \
    \    return false\n        end\n    end\n    return bracket_count == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpydrjmhb8.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydrjmhb8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydrjmhb8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpydrjmhb8.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydrjmhb8.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydrjmhb8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpydrjmhb8.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydrjmhb8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydrjmhb8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpydrjmhb8.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydrjmhb8.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydrjmhb8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpydrjmhb8.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydrjmhb8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ count(x -> x == \"<\", brackets)\n    close_brackets = count(x -> x == \">\"\
    , brackets)\n    return open_brackets == close_brackets\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpybj0pniz.jl:27\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybj0pniz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybj0pniz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpybj0pniz.jl:28\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybj0pniz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybj0pniz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpybj0pniz.jl:29\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybj0pniz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybj0pniz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpybj0pniz.jl:30\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybj0pniz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybj0pniz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpybj0pniz.jl:31\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpybj0pniz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    left_count = 0\n\
    \    right_count = 0\n    for s in brackets\n        if s == '<'\n           \
    \ left_count += 1\n        elseif s == '>'\n            right_count += 1\n   \
    \     end\n    end\n    if left_count == right_count\n        return true\n  \
    \  else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphfzwsqcs.jl:39\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphfzwsqcs.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphfzwsqcs.jl:33\ntest set: Test\
    \ Failed at /tmp/tmphfzwsqcs.jl:44\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphfzwsqcs.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphfzwsqcs.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphfzwsqcs.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0 \n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == \"<\" && brackets[end] == \">\"\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    else\n        return false\n    end\n\
    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbky7j8gv.jl:24\nin expression starting at /tmp/tmpbky7j8gv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_opening_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == \"<\"\n            num_opening_brackets\
    \ += 1\n        else\n            num_opening_brackets -= 1\n        end\n   \
    \     if num_opening_brackets < 0\n            return false\n        end\n   \
    \ end\n    return num_opening_brackets == 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6j3svji4.jl:32\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6j3svji4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6j3svji4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6j3svji4.jl:33\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6j3svji4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6j3svji4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6j3svji4.jl:34\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6j3svji4.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6j3svji4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6j3svji4.jl:35\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6j3svji4.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6j3svji4.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6j3svji4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        else\n            if stack == []\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return stack == []\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    t1 = String[]\n\
    \    t2 = String[]\n    for i in brackets\n        if i == '<'\n            push!(t1,i)\n\
    \        else\n            push!(t2,i)\n        end\n    end\n    return length(t1)\
    \ == length(t2) \nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjbkbtu3h.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjbkbtu3h.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjbkbtu3h.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjbkbtu3h.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpjbkbtu3h.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpjbkbtu3h.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbkbtu3h.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    for i in 1:length(brackets)\n\
    \        j = 1\n        if brackets[i] == '<'\n            j += 1\n        elseif\
    \ brackets[i] == '>'\n            j -= 1\n        end\n        if j == 0\n   \
    \         return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp19diggzs.jl:32\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19diggzs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19diggzs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp19diggzs.jl:33\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp19diggzs.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19diggzs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp19diggzs.jl:34\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp19diggzs.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19diggzs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp19diggzs.jl:35\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp19diggzs.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp19diggzs.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp19diggzs.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19diggzs.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)==0\
    \ return true end\n    n=0\n    for i in 1:length(brackets)\n        if brackets[i]=='<'\
    \ n+=1\n        elseif brackets[i]=='>' n-=1 end\n        if n<0 return false\
    \ end\n    end\n    if n==0 return true else return false end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  string_stack = Stack{Char}()\n\
    \  for c in brackets\n    if c == '<'\n      push!(string_stack, c)\n    elseif\
    \ c == '>'\n      if isempty(string_stack)\n        return false\n      else\n\
    \        pop!(string_stack)\n      end\n    end\n  end\n  if isempty(string_stack)\n\
    \    return true\n  else\n    return false\n  end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyi_5x3i9.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpyi_5x3i9.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyi_5x3i9.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyi_5x3i9.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpyi_5x3i9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpyi_5x3i9.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyi_5x3i9.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyi_5x3i9.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpyi_5x3i9.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpyi_5x3i9.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyi_5x3i9.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyi_5x3i9.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpyi_5x3i9.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpyi_5x3i9.jl:14\n   [2] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyi_5x3i9.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in brackets\n        if i == \"<\"\n            n += 1\n        elseif i ==\
    \ \">\"\n            n -= 1\n        end\n        if n < 0\n            return\
    \ false\n        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwq04w5n5.jl:36\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwq04w5n5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwq04w5n5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwq04w5n5.jl:37\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwq04w5n5.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwq04w5n5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwq04w5n5.jl:38\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwq04w5n5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwq04w5n5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwq04w5n5.jl:39\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwq04w5n5.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwq04w5n5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwq04w5n5.jl:40\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwq04w5n5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    balance::Int = 0\n\
    \    for c::Char in brackets\n        if c == '<'\n            balance += 1\n\
    \        elseif c == '>'\n            balance -= 1\n        end\n        if balance\
    \ < 0\n            return false\n        end\n    end\n    return balance == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_open::Int =\
    \ 0\n    num_close::Int = 0\n    for bracket in brackets\n        if bracket ==\
    \ '<'\n            num_open += 1\n        elseif bracket == '>'\n            num_close\
    \ += 1\n        end\n    end\n    return num_open == num_close\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpprk758ny.jl:35\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprk758ny.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprk758ny.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpprk758ny.jl:40\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpprk758ny.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpprk758ny.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpprk758ny.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for bracket in brackets\n        push!(stack, bracket)\n    end\n    while size(stack)\
    \ > 0\n        if stack[end] == '<'\n            stack.pop()\n        else\n \
    \           return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjr7m0unk.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: no method matching isless(::Int64,\
    \ ::Tuple{Int64})\n  Closest candidates are:\n    isless(::Real, !Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n    isless(::Real,\
    \ !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Tuple{Int64})\n     @ Base ./operators.jl:352\n\
    \   [2] >(x::Tuple{Int64}, y::Int64)\n     @ Base ./operators.jl:378\n   [3] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpjr7m0unk.jl:18\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpjr7m0unk.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpjr7m0unk.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjr7m0unk.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: no method matching isless(::Int64,\
    \ ::Tuple{Int64})\n  Closest candidates are:\n    isless(::Real, !Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n    isless(::Real,\
    \ !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Tuple{Int64})\n     @ Base ./operators.jl:352\n\
    \   [2] >(x::Tuple{Int64}, y::Int64)\n     @ Base ./operators.jl:378\n   [3] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpjr7m0unk.jl:18\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpjr7m0unk.jl:33 [inlined]\n\
    \   [6] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjr7m0unk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0 \n\
    \    for bracket in brackets\n        if bracket == '<'\n            open_count\
    \ += 1\n        elseif bracket == '>'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvgny19pk.jl:27\nin expression starting at /tmp/tmpvgny19pk.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" return true end\n    opening_brackets = Array{Int}(undef, 0)\n    for i in\
    \ 1:length(brackets)\n        if brackets[i] == '<'\n            push!(opening_brackets,\
    \ i)\n        else\n            if length(opening_brackets) == 0\n           \
    \     return false\n            else\n                pop!(opening_brackets)\n\
    \            end\n        end\n    end\n    return length(opening_brackets) ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ [] # create an empty stack to keep track of remaining brackets\n    for c in\
    \ brackets # iterate through the string\n        if c == \"<\"\n            push!(bracket_stack,\
    \ c) # push opening brackets to the stack\n        elseif c == \">\"\n       \
    \     if length(bracket_stack) == 0 # if there are no opening brackets left\n\
    \                return false # then there's an extra closing bracket\n      \
    \      else\n                pop!(bracket_stack) # otherwise pop the most recent\
    \ opening bracket\n            end\n        end\n    end\n    return length(bracket_stack)\
    \ == 0 # once we've iterated through the string, we should have an empty stack\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa2vpaikb.jl:37\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2vpaikb.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2vpaikb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa2vpaikb.jl:38\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2vpaikb.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2vpaikb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa2vpaikb.jl:39\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2vpaikb.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2vpaikb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa2vpaikb.jl:40\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2vpaikb.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2vpaikb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpa2vpaikb.jl:41\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2vpaikb.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num::Int = 0\n \
    \   for b in brackets\n        if b == \"<\"\n            num = num + 1\n    \
    \    elseif b == \">\"\n            num = num - 1\n        end\n        if num\
    \ < 0\n            return false\n        end\n    end\n    if num == 0\n     \
    \   return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp127qrs4z.jl:40\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp127qrs4z.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp127qrs4z.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp127qrs4z.jl:41\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp127qrs4z.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp127qrs4z.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp127qrs4z.jl:42\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp127qrs4z.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp127qrs4z.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp127qrs4z.jl:43\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp127qrs4z.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp127qrs4z.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp127qrs4z.jl:44\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp127qrs4z.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ if length(brackets)==0\n        return true\n    end\n    for i in 1:length(brackets)\n\
    \        if brackets[i]=='>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    else\n            push!(stack,'<')\n        end\n    end\n    return isempty(stack)\n\
    end\n# Try it!\ncorrect_bracketing(\"<>\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    l = 0\n    r = 0\n\
    \    for c in brackets\n        if c == '<'\n            l = l + 1\n        elseif\
    \ c == '>'\n            r = r + 1\n        end\n    end\n    return l == r\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnc9rg1sh.jl:35\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc9rg1sh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc9rg1sh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpnc9rg1sh.jl:40\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc9rg1sh.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc9rg1sh.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnc9rg1sh.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)==1\
    \ \n        return false\n    end\n    bracket=0\n    for i=1:length(brackets)\n\
    \        if brackets[i]==\"<\"\n            bracket+=1\n        else\n       \
    \     bracket-=1\n        end\n        if bracket<0\n            return false\n\
    \        end\n    end\n    if bracket==0\n        return true\n    else\n    \
    \    return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdyy7_07q.jl:39\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyy7_07q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyy7_07q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpdyy7_07q.jl:40\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyy7_07q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyy7_07q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpdyy7_07q.jl:41\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdyy7_07q.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyy7_07q.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpdyy7_07q.jl:42\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdyy7_07q.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyy7_07q.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdyy7_07q.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    num_open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            num_open_brackets\
    \ += 1\n        elseif b == '>'\n            num_open_brackets -= 1\n        end\n\
    \        if num_open_brackets < 0\n            return false\n        end\n   \
    \ end\n    return num_open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    cnt=0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i]=='<'\n            cnt+=1\n   \
    \     elseif brackets[i]=='>'\n            cnt-=1\n        end\n        if cnt<0\n\
    \            return false\n        end\n    end\n    if cnt==0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if !isempty(stack) && pop!(stack)\
    \ == '<'\n                continue\n            else\n                return false\n\
    \            end\n        end\n    end\n    isempty(stack)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_bracket_count\
    \ = 0\n    close_bracket_count = 0\n    for c in brackets\n        if c == '<'\n\
    \            open_bracket_count += 1\n        elseif c == '>'\n            close_bracket_count\
    \ += 1\n        end\n    end\n    return open_bracket_count == close_bracket_count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt6y7z1dm.jl:35\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt6y7z1dm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt6y7z1dm.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpt6y7z1dm.jl:40\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt6y7z1dm.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt6y7z1dm.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt6y7z1dm.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            n += 1\n        elseif bracket\
    \ == '>'\n            n -= 1\n        end\n        if n < 0\n            return\
    \ false\n        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_y9o481t.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmp_y9o481t.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_y9o481t.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_y9o481t.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_y9o481t.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmp_y9o481t.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_y9o481t.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_y9o481t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    max_so_far = 0\n\
    \    min_so_far = 0\n    for s in brackets\n        if s == '<'\n            max_so_far\
    \ += 1\n        elseif s == '>'\n            max_so_far -= 1\n            min_so_far\
    \ -= 1\n        end\n        if max_so_far < 0 || min_so_far < 0\n           \
    \ return false\n        end\n    end\n    return max_so_far == 0\nend\n\"\"\"\
    \ \n    flip_letters is a string. Return a string with all the letters reversed,\
    \ except for the vowels.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmsa99_n3.jl:29\nin expression starting at\
    \ /tmp/tmpmsa99_n3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if search(r\"<<|>>\"\
    , brackets) != nothing \n        return false \n    else \n        return count(\"\
    >\", brackets) == count(\"<\", brackets) \n    end \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb5ssl_2v.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: search not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpb5ssl_2v.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5ssl_2v.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb5ssl_2v.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpb5ssl_2v.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: search not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpb5ssl_2v.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5ssl_2v.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb5ssl_2v.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpb5ssl_2v.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: search not defined\n \
    \ Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpb5ssl_2v.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5ssl_2v.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb5ssl_2v.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpb5ssl_2v.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: search not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpb5ssl_2v.jl:14\n   [2"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb5ssl_2v.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ b in brackets \n        if b == '<' \n            count += 1\n        elseif\
    \ b == '>'\n            count -= 1\n        end \n        if count < 0 \n    \
    \        return false\n        end \n    end \n    return count == 0\nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    number_of_opening_brackets\
    \ = count(x -> x == '<', brackets)\n    number_of_closing_brackets = count(x ->\
    \ x == '>', brackets)\n    if number_of_opening_brackets == number_of_closing_brackets\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd0w7rf2f.jl:32\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd0w7rf2f.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd0w7rf2f.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpd0w7rf2f.jl:37\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd0w7rf2f.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd0w7rf2f.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd0w7rf2f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    leftcount = 0\n\
    \    for i = 1:length(brackets)\n        if brackets[i] == '<'\n            leftcount\
    \ = leftcount + 1\n        elseif brackets[i] == '>'\n            leftcount =\
    \ leftcount - 1\n        end\n        if leftcount < 0\n            return false\n\
    \        end\n    end\n    return leftcount == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_bracket = 0\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '<'\n            open_bracket\
    \ += 1\n        else\n            open_bracket -= 1\n        end\n    end\n  \
    \  return open_bracket == 0 ? true : false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6gx2845i.jl:34\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gx2845i.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gx2845i.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6gx2845i.jl:39\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6gx2845i.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6gx2845i.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6gx2845i.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
    <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0 \n   \
    \ for i in 1:length(brackets)\n        if brackets[i] == '<'\n            count\
    \ += 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
