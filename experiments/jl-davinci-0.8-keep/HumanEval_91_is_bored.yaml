name: HumanEval_91_is_bored
language: jl
prompt: "\"\"\"\n    You'll be given a string of words, and your task is to count\
  \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
  \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The\
  \ sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
  Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
  I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
  \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
  You and I are going for a walk\") == 0)\nend\n"
completions: ["    s = split(S, \".\")\n    count = 0\n    for i in s\n        s =\
    \ split(i, \"?\")\n        for j in s\n            s = split(j, \"!\")\n     \
    \       for k in s\n                if s[1] == \"I\"\n                    count\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend", "    # Enter your code here\n    d = split(S,\".\")\n    boredoms\
    \ = 0\n    for i in d\n        if split(i,\" \")[1] == \"I\"\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend", "    split_s = split(S,\
    \ r\"[.?!]\")\n    is_bored = 0\n    for s in split_s\n        if startswith(s,\
    \ \"I\")\n            is_bored += 1\n        end\n    end\n    return is_bored\n\
    end", "    # replace all characters except .! and ? with a space \n    S = replace(S,\
    \ r\"[^.!?]\", \" \") \n    # split using .!? and check for the presence of \"\
    I\" in each sub string \n    I = map(x -> (startswith(split(x, \"\")[1], \"I\"\
    ), x), split(S, r\"[.!?]\")) \n    # return the count of I's \n    return sum(map(x\
    \ -> x[1], I)) \nend ", "    num_boredoms = 0\n    sentence_start = 1\n    for\
    \ i = 1:length(S)\n        if (S[i] == '.') || (S[i] == '?') || (S[i] == '!')\n\
    \            if (1 < i) && (S[sentence_start] == 'I')\n                num_boredoms\
    \ += 1\n            end\n            sentence_start = i + 2\n        end\n   \
    \ end\n    return num_boredoms\nend", "    words = split(S, r\"[!\\.]+\")\n  \
    \  boredoms = 0\n    for i in words\n        if startswith(i, \"I\")\n       \
    \     boredoms += 1\n        end\n    end\n    return boredoms\nend", "    return\
    \ count(ismatch.(split(S, [\".\",\"?\",\"!\"]), r\"^\\s*I\\s\"))\nend", "    sentences\
    \ = split(S, r\"[!.?]\")\n    boredoms = [1 for sentence in sentences if startswith(sentence,\
    \ \"I\")]\n    return sum(boredoms)\nend\nprintln(is_bored(\"Hello world\"))\n\
    println(is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    ))", "    \n    # Counter\n    boredoms = 0\n    \n    # Split by sentences\n\
    \    sentences = split(S, [\".\",\"?\",\"!\"])\n    \n    # For each sentence...\n\
    \    for sentence in sentences\n        # Split by spaces\n        words = split(sentence)\n\
    \        \n        # If the first word is \"I\", then we're bored\n        if\
    \ words[1] == \"I\"\n            boredoms += 1\n        end\n    end\n    \n \
    \   # Return the number of boredoms\n    return boredoms\nend", "   \n    # Number\
    \ of boredoms\n    n = 0\n   \n    # Break the string into sentences\n    sentences\
    \ = split(S, ['.', '?', '!'])\n   \n    # Check if the sentence starts with \"\
    I\"\n    for s in sentences\n        if startswith(strip(s), \"I\")\n        \
    \    n += 1\n        end\n    end\n   \n    return n\nend", "    S = replace(S,\
    \ \"?\" => \".\")\n    S = replace(S, \"!\" => \".\")\n    if startswith(S, \"\
    I\") return 1\n    if \".\" in S \n        S = split(S, '.')\n        n = 0\n\
    \        for x in S\n            if startswith(x, \"I\") n += 1\n        end\n\
    \        return n\n    end\n    return 0\nend", "    count = 0\n    strs = split(S,'.|!|?')\n\
    \    for s in strs\n        if startswith(s,\"I\")\n            count += 1\n \
    \       end\n    end\n    return count\nend", "    N = 0\n    quote = false\n\
    \    for s in split(S, r\"[\\.\\?\\!]\")\n        if quote == true\n         \
    \   N += 1\n        end\n        if s == \"I\"\n            quote = true\n   \
    \     else\n            quote = false\n        end\n    end\n    return N\nend",
  "    # (1) Split string by \".\" or \"?\" or \"!\"\n    splitted_strings = split(S,\
    \ r\"[.?!]\")", "    count = 0\n    for i = 1:length(S)\n        if i+1 < length(S)\
    \ && S[i] == 'I' && S[i+1] == ' '\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    count = 0\n    s = split(S,\".!?\")\n    for i in\
    \ s\n        if startswith(i,\"I\") \n            count += 1\n        end\n  \
    \  end\n    return count\nend", "    boredoms = 0\n    s_vec = split(S, \".!?\"\
    )\n    for s in s_vec\n        temp = split(s)\n        if(temp[1] == \"I\")\n\
    \            boredoms += 1\n        end\n    end\n    return boredoms\nend\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")", "    if S == \"\"\
    \n        return 0\n    end\n    k=0\n    for i in 1:length(S)\n        if(S[i]=='.'\
    \ || S[i]=='?' || S[i]=='!')\n            k+=1\n        end\n    end\n    for\
    \ i in 1:k\n        S=split(S,\".\")[1]\n        S=split(S,\"?\")[1]\n       \
    \ S=split(S,\"!\")[1]\n    end\n    if startswith(S,\"I\")\n        return 1\n\
    \    else\n        return 0\n    end\nend", "  count = 0 \n  index = 0\n  while\
    \ index != length(S)\n    index = findnext(S, \"I\", index)\n    if index == nothing\n\
    \      break\n    end\n    count += 1\n    index += 1\n  end\n  return count\n\
    end", "    strs = split(S, \".!?\")\n    boredoms = 0\n    for s in strs\n   \
    \     if s[1] == 'I'\n            boredoms += 1\n        end\n    end\n    return\
    \ boredoms\nend", "    if starts(S, \"I\")\n        return 1\n    else\n     \
    \   return 0\n    end\nend", "    boredoms = 0\n    for s in split(S, ['.', '?',\
    \ '!'])\n        if startswith(s, \"I\")\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend", "    sentences = split(S, \".\")\n    boredoms\
    \ = 0 \n    for sentence in sentences\n        if contains(sentence, \"I\")\n\
    \            boredoms += 1\n        end\n    end\n    return boredoms\nend\nis_bored(\"\
    I am bored!\")", "    return sum(1 for s in split(S, \"!\") if length(filter(x\
    \ -> x[1] == 'I', split(s, \" \"))) > 0)\nend", "    I = 'I'\n    i = 0\n    cnt\
    \ = 0\n    for i in 0:length(S)-1\n        if S[i] == I\n            cnt += 1\n\
    \        end\n    end\n    return cnt\nend\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")", "    if string(S[1]) == \"I\"\n       \
    \ return 1\n    else\n        return 0\n    end\nend ", "    n = length(S)\n \
    \   cnt = 0\n    i = 1\n    while i < n\n        if S[i] == 'I'\n            cnt\
    \ += 1\n        end\n        if S[i] == '.' || S[i] == '?' || S[i] == '!'\n  \
    \          i += 1\n            continue\n        end\n        i += 1\n    end\n\
    \    return cnt\nend", "    sentences = split(S, [ '.', '?', '!' ])\n    return\
    \ sum(map(is_bored_sentence, sentences))\nend", "    s_s = split(S, [\".\",\"\
    !\"])\n    c = 0\n    for s in s_s\n        if s[1] == 'I'\n            c += 1\n\
    \        end\n    end\n    return c\nend", "    count = 0\n    st = split(S,r\"\
    [!?.]\")\n    for i in st\n        if(startswith(i,\"I\"))\n            count\
    \ += 1\n        end\n    end\n    return count\nend", "    n = split(S, [\";\"\
    , \".\", \"!\", \"?\"])\n    n = n[1]\n    n = length(n)\n    return n\nend",
  "    \"\"\"\n    Counts boredoms in the string S\n    \"\"\"\n    nb_boredoms =\
    \ 0\n    nb_sentences = 0\n    i = 1\n    while i < length(S)\n        if S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!'\n            nb_sentences += 1\n      \
    \      nb_boredoms += is_boredom(S[i-1])\n        end\n        i += 1\n    end\n\
    \    return nb_boredoms\nend", "    count = 0\n    words = split(S)\n    for word\
    \ in words\n        if word == \"I\"\n            count += 1\n        end\n  \
    \  end\n    return count\nend", "    boredoms = 0\n    for sent in split(S, [\"\
    .\", \"?\", \"!\"])\n        for word in split(sent)\n            if word == \"\
    I\"\n                boredoms += 1\n            end\n        end\n    end\n  \
    \  return boredoms\nend", "    sentences = split(S,\"[.!?]\")\n    boredom_count\
    \ = 0\n    for i in sentences\n        if length(i) != 0\n            first_word\
    \ = split(i,\" \")[1]\n            if first_word == \"I\"\n                boredom_count\
    \ += 1\n            end\n        end\n    end\n    return boredom_count\nend",
  "    \n    str_list = split(S,'.')\n    boredoms = 0\n    for str_i in str_list\n\
    \        str_split = split(str_i)\n        if str_split[1] == \"I\"\n        \
    \    boredoms += 1\n        end\n    end\n    return boredoms\nend", "    return\
    \ length(S[S.=='I'])\nend", "    sentences = split(S, ['.', '?', '!'])\n    boredoms\
    \ = 0\n    for s in sentences\n        firstword = split(s)[1]\n        if firstword\
    \ == \"I\"\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end", "    n = 0\n    s = split(S, [\".\",\"?\",\"!\"])\n    for ss in s\n   \
    \     #println(ss)\n        if ss[1] == 'I'\n            n += 1\n        end\n\
    \    end\n    return n\nend", "    \n    boredoms = 0\n    words = []\n    word\
    \ = \"\"\n    for i = 1:length(S)\n        if S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!'\n            push!(words, word)\n            word = \"\"\n        elseif\
    \ S[i] == ' '\n            push!(words, word)\n            word = \"\"\n     \
    \   else\n            word = string(word, S[i])\n        end\n    end\n    for\
    \ i = 1:length(words)\n        if words[i] == \"I\"\n            boredoms += 1\n\
    \        end\n    end\n    return boredoms\nend", "    sentences = split(S, \"\
    ?|!|\\\\.\")\n    boredoms = 0\n    for sentence in sentences\n        if occursin(\"\
    I\", sentence)\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end", "    boredoms = split(S, ['.', '?', '!'])\n    return sum( map( s -> is_bored_one(s),\
    \ boredoms ) )\nend", "    count=0\n    a = split(S,\".!?\")\n    for i in a\n\
    \        if i[1]=='I'\n            count=count+1\n        end\n    end\n    return\
    \ count\nend", "    s = split(S, [\".\", \"!\", \"?\"])\n    count = 0\n    for\
    \ x in s\n        if split(strip(x), \" \")[1] == \"I\"\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    c = 0\n    for word in\
    \ split(S, r\"\\s+|\\.|\\?|!\")\n        if word == \"I\"\n            c += 1\n\
    \        end\n    end\n    return c\nend\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")", "    s = split(S, \",.!? \")\n    boreds\
    \ = 0\n    i = 1\n    while i <= length(s)\n        if s[i] == \"I\"\n       \
    \     boreds += 1\n        end\n        i += 1\n    end\n    return boreds\nend",
  "    return length(collect(s for s in split(S, r\"[\\.\\?\\!]\") if !isempty(s)\
    \ && startswith(s, \"I\")))\nend", "    return sum(1 for sentence in split(S,[\"\
    .\",\"?\",\"!\"]) if startswith(sentence,\"I\"))\nend", "    output = 0\n    sentences\
    \ = split(S, \"!\")\n    sentences = append!(sentences, split(sentences[end],\
    \ \"?\"))\n    sentences = append!(sentences, split(sentences[end], \".\"))\n\
    \    for sentence in sentences\n        words = split(sentence)\n        if words[1]\
    \ == \"I\"\n            output += 1\n        end\n    end\n    return output\n\
    end", "    C = split(S, ['.', '?', '!'])\n    C1 = []\n    #@show(C)\n    for\
    \ i = 1:length(C)\n        if (startswith(strip(C[i]), \"I\")==true)\n       \
    \     push!(C1, strip(C[i]))\n        end\n    end\n    return length(C1)\nend",
  "    sentences = split(S, \"?.\")\n    count = 0\n    for s in sentences\n     \
    \   if occursin(\"I\", s)\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    # Write your code here\n    n = 0\n    S.split(\".\")\n  \
    \  for s in S.split(\".\")\n        if s.split(\" \")[1] == \"I\" || s.split(\"\
    \ \")[1] == \"i\"\n            n = n + 1\n        end\n    end\n    return n\n\
    end", "    result = 0\n    sentences = split(S, [\".\",\"?\",\"!\"])\n    for\
    \ sentence in sentences\n        if sentence == \"\" continue end\n        split_sentence\
    \ = split(sentence)\n        if split_sentence[1] == \"I\"\n            result\
    \ += 1\n        end\n    end\n    return result\nend", "    count = 0\n    for\
    \ s in split(S, ['.', '?', '!'])\n        if first(split(s)) == \"I\"\n      \
    \      count += 1\n        end\n    end\n    return count\nend", "    \n    return\
    \ length(split(S,[\".\";\"?\";\"!\"]))\nend", "    sentence_boredoms = 0\n   \
    \ word_boredoms = 0\n    for s in split(S, \".\")\n        for w in split(s, \"\
    \ \")\n            if w == \"I\"\n                word_boredoms += 1\n       \
    \     end\n        end\n        if word_boredoms > 0\n            sentence_boredoms\
    \ += 1\n        end\n        word_boredoms = 0\n    end\n    return sentence_boredoms\n\
    end", "    count = 0\n    for sentence in split(S, ['.', '?', '!'])\n        if\
    \ sentences[1] == \"I\"\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "    # Split the string into sentences.\n    sentences = split(S,\
    \ \"!?.\")\n    # Count the number of sentences that start with \"I\".\n    return\
    \ count(s -> startswith(s, \"I\"), sentences)\nend", "    sentences = split(S,\
    \ [\".\", \"?\", \"!\"])\n    boredoms = 0\n    for sentence in sentences\n  \
    \      boredoms += (sentence[1] == 'I')\n    end\n    return boredoms\nend", " \
    \   \n    # First, split the string at each punctuation.\n    A = split(S, \"\
    .\"; keep = false)\n    B = split(S, \"?\"; keep = false)\n    C = split(S, \"\
    !\"; keep = false)\n    \n    # Find the minimum length for the arrays.\n    M\
    \ = minimum([length(A), length(B), length(C)])\n    \n    # Create a new array\
    \ that represents a split string\n    # and start counting at 0.\n    V = Array{String}(M)\n\
    \    boredoms = 0\n    \n    # Fill the array with the first three elements of\
    \ each.\n    for i in 1:M\n        V[i] = \".\"*A[i]*\"?\"*B[i]*\"!\"*C[i]\n \
    \   end\n    \n    # Split each element of the array at each space.\n    for i\
    \ in 1:M\n        D = split(V[i], \" \"; keep = false)\n        \n        # If\
    \ it starts with an I, increment the number of boredoms.\n        if D[1] == \"\
    I\"\n            boredoms += 1\n        end\n    end\n    \n    return boredoms\n\
    end", "    s_arr = split(S, ['.', '?', '!'])\n    n = 0\n    for s in s_arr\n\
    \        if startswith(s, \"I\")\n            n += 1\n        end\n    end\n \
    \   return n\nend", "    c = count(x -> x == 'I', split(S, (.'!.?')))\n    if\
    \ c == 0\n        c = 0\n    else\n        c = 1\n    end\n    return c\nend",
  "  sen, num= split(S, \".\") #split the sentence by '.'\n  bored=0\n  for s in sen\n\
    \    if findfirst(r\"I\", s)==1 # find the first index of 'I'\n      bored+=1\n\
    \    end\n  end\n  return bored\nend", "    #TODO: Write code here\n    return\
    \ 0\nend", "    S = lowercase(S)\n    S = split(S, [\".\"; \"?\"; \"!\"])\n  \
    \  c = 0\n    for i = 1:length(S)\n        if split(S[i])[1] == \"i\"\n      \
    \      c += 1\n        end\n    end\n    return c\nend", "    sentences = split(S,\
    \ '.')\n    bored = 0\n    for sentence in sentences\n        bored += is_bored(sentence)\n\
    \    end\n    return bored\nend", "    exclamations = findall(r\"!\", S)\n   \
    \ periods = findall(r\"\\.\", S)\n    questions = findall(r\"\\?\", S)\n    end_indicies\
    \ = [exclamations; periods; questions]\n    start_indicies = [1; end_indicies+1]\n\
    \    sentences = [S[end_indicies[i]+1:start_indicies[i+1]-1] for i=1:length(end_indicies)]\n\
    \    boredoms = [1 for i=1:length(sentences) if sentences[i][1] == 'I']\n    return\
    \ sum(boredoms)\nend", "    counter = 0\n    list_of_words = split(S, [\" \",\
    \ \".\", \"?\", \"!\"])\n    for word in list_of_words\n        if word == \"\
    I\"\n            counter += 1\n        end\n    end\n    return counter\nend",
  "    punctuation_marks = ['.', '?', '!']\n    sentences = []\n    boredoms = 0\n\
    \    word = \"\"\n    for character in S\n        if character in punctuation_marks\n\
    \            push!(sentences, word)\n            word = \"\"\n        else\n \
    \           word = word * character\n        end\n    end\n    for sentence in\
    \ sentences\n        if sentence[1] == 'I'\n            boredoms += 1\n      \
    \  end\n    end\n    return boredoms\nend", "    boredoms = 0\n    index = 0\n\
    \    L = length(S)\n    while index < L\n        if S[index] == 'I'\n        \
    \    boredoms += 1\n        end\n        index += 1\n    end\n    return boredoms\n\
    end", "    n = count(S, \"I\")\n    #sentences = split(S, r\"(?<=[.?!])\\s*\"\
    );\n    sentences = split(S, r\"\\.(?!\\d)\");\n    for i in 1:length(sentences)\n\
    \        n = n + count(sentences[i], \"I\")\n    end\n    return n\nend", "  \
    \  if findfirst(S, \"I\") == nothing\n        return 0\n    else\n        a =\
    \ findfirst(S, \"I\")\n        if a > 1\n            for i in [1:a-1]\n      \
    \          if S[i] == '.' || S[i] == '?' || S[i] == '!'\n                    return\
    \ 0\n                end\n            end\n        end\n        return 1\n   \
    \ end\nend", "    # your code goes here \n    return sum(S[i] == 'I' && (S[i-1]=='.'\
    \ || S[i-1]=='?' || S[i-1]=='!') && (S[i+1]!='.' || S[i+1]!='?' || S[i+1]!='!')\
    \ ? 1 : 0 for i=2:length(S))\nend", "    count = 0\n    splitted = split(S, \"\
    .\")\n    for i in splitted\n        if first(split(i)) == \"I\"\n           \
    \ count += 1\n        end\n    end\n    return count\nend", "    N = 0\n    for\
    \ i in split(S,\".\")\n        if ismatch(r\"^I*\",i) \n            N += 1\n \
    \       end\n    end\n    return N\nend", "    if S == \"\"\n        return 0\n\
    \    end\n    sentences = split(S, '!.?')\n    bored = 0\n    for sentence in\
    \ sentences\n        if beginswith(strip(sentence), \"I\") || beginswith(strip(sentence),\
    \ \"i\")\n            bored += 1\n        end\n    end\n    return bored\nend",
  "    count = 0\n    return 0\nend", "    boredoms = 0\n    for s in split(S, \"\
    ! \")\n        for ss in split(s, \". \")\n            for sss in split(ss, \"\
    ? \")\n                if sss[1] == 'I'\n                    boredoms += 1\n \
    \               end\n            end\n        end\n    end\n    return boredoms\n\
    end", "    # return number of boredoms\n    return length(match.(r\"I\", split(S,\
    \ r\"\\.\\!?\\s\")))\nend", "    b = 0\n    for s in split(S, ['.', '?', '!'])\n\
    \        if startswith(s, \"I\")\n            b += 1\n        end\n    end\n \
    \   return b\nend\n\"\"\"\n    You'll be given a string of numbers. Count the\
    \ number of integer numbers\n    in the given string.\n   \n    For example:\n\
    \    >>> count_int(\"Hello 12 Hi 89\")\n    2\n    >>> count_int(\"This is a random\
    \ string\")\n    0\n    \"\"\"", "    return count(s->s[1]=='I', split(S, r\"\\\
    .|\\!|\\?\"))\nend\n ", "    # Your code here\n    i=0\n    boredoms=0\n    while\
    \ i<length(S)\n        if S[i]=='I'\n            boredoms+=1\n        end\n  \
    \      i+=1\n    end\n    return boredoms\nend", "    return count(s -> s[1] ==\
    \ 'I', split(S, \" .!?\"))\nend", "    return length(split(S, r\"\\.|\\?|\\!\"\
    )) - 1\nend", "    \"\"\"\n    This function will take a string and return the\
    \ number of boredoms\n    \"\"\"\n    # define delimiters\n    delimiters = '!.?;'\n\
    \    # split the sentence at the delimiters\n    sentence_split = [split(x, delimiters)\
    \ for x in split(S, delimiters)]\n    # empty array to hold boredoms\n    boredoms\
    \ = []\n    # loop through the sentence_split\n    for sentence in sentence_split\n\
    \        # take the first word and split it\n        first_word = split(sentence[1],\
    \ ' ')\n        # if the first word is \"I\" append it to boredoms\n        if\
    \ first_word[1] == \"I\"\n            push!(boredoms, first_word[1])\n       \
    \ end\n    end\n    # return the number of boredoms\n    return length(boredoms)\n\
    end", "    count = 0\n    s = split(S,\".!?\")\n    for i in s\n        i = strip(i)\n\
    \        if i[1] == 'I'\n            count += 1\n        end\n    end\n    return\
    \ count\nend", "  count = 0 \n  for i in split(S, \".\")\n    for j in split(i,\
    \ \"?\")\n      for k in split(j, \"!\")\n        if first(k) == \"I\"\n     \
    \     count += 1\n        end\n      end\n    end\n  end\n  return count\nend",
  "    # YOUR CODE HERE\n    return 0\nend", "    x = split(S, ['.', '?', '!'])\n\
    \    bored = 0\n    for i in x\n        y = split(i, [' '])\n        if y[1] ==\
    \ \"I\"\n            bored += 1\n        end\n    end\n    return bored\nend",
  "    # Split sentences\n    sentences = split(S, \".\")\n    boredoms = 0\n    for\
    \ sentence in sentences\n        # Split words\n        words = split(sentence,\
    \ \" \")\n        if words[1] == \"I\"\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\n ", "    return length(split(S, \"!\")) +\
    \ length(split(S, \"?\")) + length(split(S, \".\")) - 2*length(split(S, \"I\"\
    ))\nend", "    boredoms = 0\n    words = split(S)\n    for i in 1:length(words)\n\
    \        if words[i] == \"I\"\n            boredoms += 1\n        end\n    end\n\
    \    return boredoms\nend", "    bored = 0\n    for (i, letter) in enumerate(S)\n\
    \        if letter == 'I'\n            bored += 1\n        end\n    end\n    return\
    \ bored\nend", "    tmp = split(S,\".\")\n    ans = 0\n    for i in tmp\n    \
    \    if is_bored(i) == 1\n            ans += 1\n        end\n    end\n    return\
    \ ans\nend", "    \n    boredoms = 0\n    sentences = split(S, [\";\", \"?\",\
    \ \"!\"])\n    \n    for sentence in sentences\n        if(startswith(sentence,\
    \ \"I\"))\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end", "    b = 0\n    s = S.split(\".\")\n    for i in s\n        if i[1] == 'I'\n\
    \            b += 1\n        end\n    end\n    return b\nend", "    words = split(S,\
    \ r\"[.?!]\")\n    return sum(starts_with(lowercase(w), \"i\") for w in words)\n\
    end", "  count = 0\n  S = split(S, \".?!\")\n  for i in S\n    z = split(i, \"\
    \ \")\n    if z[1] == \"I\"\n      count += 1\n    end\n  end\n  return count\n\
    end", "    n = length(S)\n    if n == 0\n        return 0\n    end\n    i = 1\n\
    \    num = 0\n    while i <= n\n        if S[i] == 'I'\n            while i <=\
    \ n && S[i] != '!' && S[i] != '.' && S[i] != '?'\n                i += 1\n   \
    \         end\n            num += 1\n        end\n        i += 1\n    end\n  \
    \  return num\nend", "    boredoms = 0 \n    if beginswith(S, \"I\") \n      \
    \  boredoms += 1 \n    end \n    return boredoms \nend ", "    if S == \"\" \n\
    \        return 0\n    end\n    boredom_count = 0\n    words = split(S, [' ',\
    \ '.', '?', '!'])\n    for word in words\n        if word == \"I\"\n         \
    \   boredom_count += 1\n        end\n    end\n    return boredom_count\nend",
  "    bored = 0\n    for s in split(S, r\"[?!.]\")\n        if split(s, \" \")[1]\
    \ == \"I\"\n            bored += 1\n        end\n    end\n    return bored\nend",
  "    _counter = 0\n    for i in split(S, r\"[.?!]\")\n        if startswith(lowercase(i),\
    \ \"i\")\n            _counter += 1\n        end\n    end\n    return _counter\n\
    end", "    return count(s -> s == \"I\", split(S,\".!?\"))\nend", "    c = split(S,\
    \ r\"[.!?]\")\n    sum = 0\n    for i in c\n        a = split(i)\n        if a[1]\
    \ == \"I\"\n            sum += 1\n        end\n    end\n    return sum\nend",
  "    Sentences = split(S, [\".\", \"?\", \"!\"]) \n    num_of_boredoms = 0 \n  \
    \  for sentence in Sentences \n        if sentence[1] == \"I\"\n            num_of_boredoms\
    \ += 1 \n        end \n    end \n    return num_of_boredoms \nend \nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")", "    boredoms =\
    \ 0\n    sentence = false\n    for word in split(S, \" \")\n        if word[1]\
    \ == 'I'\n            boredoms += 1\n        end\n        if word[end] == '.'\
    \ || word[end] == '?' || word[end] == '!'\n            sentence = false\n    \
    \    end\n    end\n    return boredoms\nend", "    # splits the string by the\
    \ delimiters '.', '?', '!'\n    words = split(S, r\"[.!?]\") \n    cnt = 0", " \
    \   return length(filter(x->startswith(x,\"I\"), split(replace(S, '.' => ''),\
    \ ['.','!','?'])))\nend", "    b = 0\n    for s in split(S, ['.', '?', '!'])\n\
    \        if split(s, [' ', '\\t'])[1] == \"I\"\n            b += 1\n        end\n\
    \    end\n    return b\nend", "    sentences = split(S, r\"(?<=[.?!])\") # Split\
    \ on punctuation\n    return sum(startswith(s, \"I\") for s in sentences)\nend",
  "    i = 0\n    words = split(S, r\"[.?!]\")\n    for word in words\n        if\
    \ word == \"I\"\n            i = i + 1\n        end\n    end\n    return i\nend",
  "    # Split the input string into sentences by punctuation\n    sentences = split(S,\
    \ [\".\", \"?\", \"!\"])\n    count = 0\n    for sentence in sentences\n     \
    \   # Check if the sentence starts with \"I\"\n        if(startswith(sentence,\
    \ \"I\"))\n            count += 1\n        end\n    end\n    return count\nend\n\
    @assert is_bored(\"Hello world\") == 0\n@assert is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\") == 1\n@assert is_bored(\"I need to reach\
    \ the top of the mountain\") == 1\n@assert is_bored(\"The last man standing\"\
    ) == 0\n@assert is_bored(\"I don't think you understand how it works. I can't\
    \ do this alone.\") == 2\n@assert is_bored(\"I just wanted to say that I'm sorry.\
    \ That's all.\") == 2\n \n \n@timeit", "  count = 0 \n  for i in 1:length(S)\n\
    \    if S[i] == ' '\n      if S[i+1] == 'I'\n        count += 1\n      end\n \
    \   end\n  end\n  return count\nend", "    p = split(S, \"\\\\.\")\n    c = 0\n\
    \    for s in p\n        if startswith(s, \"I\")\n            c += 1\n       \
    \ end\n    end\n    return c\nend", "    len = length(S)\n    boredoms = 0\n \
    \   for i = 1:len\n        if S[i] == 'I' && i == 1\n            boredoms += 1\n\
    \        elseif S[i] == 'I' && S[i-1] == '.'\n            boredoms += 1\n    \
    \    elseif S[i] == 'I' && S[i-1] == '?'\n            boredoms += 1\n        elseif\
    \ S[i] == 'I' && S[i-1] == '!'\n            boredoms += 1\n        end\n    end\n\
    \    return boredoms\nend", "    sentences = split(S, \"?|!\")\n    boredoms =\
    \ 0\n    for sentence in sentences\n        if startswith(sentence, \"I\")\n \
    \           boredoms += 1\n        end\n    end\n    return boredoms\nend", " \
    \   count_boredom = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n    \
    \        count_boredom += 1\n        end\n    end\n    return count_boredom\n\
    end", "    boredoms = 0\n    for word in S.split(' ')\n        boredoms += 1 if\
    \ word==\"I\" else 0\n    end\n    return boredoms\nend", "    count = 0\n   \
    \ for w in split(S, r\"\\.|\\?|\\!\")\n        if w[1] == 'I'\n            count\
    \ += 1\n        end\n    end\n    return count\nend\n@show is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")", "  sentences = split(S,\"\
    [.!?]\")\n  boredoms = 0\n  for s in sentences\n    boredoms += 1 if (split(s)[1]\
    \ == \"I\") else 0\n  end\n  return boredoms\nend", "    temp = split(S, \".!?\"\
    )\n    count = 0\n    for sub_str in temp\n        if startswith(sub_str, \"I\"\
    )\n            count += 1\n        end\n    end\n    return count\nend", "   \
    \ # Count the number of times you find a sentence beginning with I\n    num_bored\
    \ = 0\n    return num_bored\nend", "    \n    #create vector of string in S, split\
    \ by '.' '?' '!'\n    s_vec = split(S, ['.', '?', '!'])\n    \n    #initialize\
    \ num_boredoms\n    num_boredoms = 0\n    \n    #loop through vector of strings\n\
    \    for i in 1:length(s_vec)\n        \n        #check if each starts with \"\
    I\"\n        if startswith(strip(s_vec[i]), \"I\")\n            \n           \
    \ #add 1 to num_boredoms\n            num_boredoms += 1\n        end\n    end\n\
    \    \n    #return number of bordoms\n    return num_boredoms\nend", "  count\
    \ = 0\n  for word in split(S, \".\")\n    for w in split(word, \"?\")\n      for\
    \ m in split(w, \"!\")\n        for i in split(m, \" \")\n          if lowercase(i)\
    \ == \"i\"\n            count += 1\n          end\n        end\n      end\n  \
    \  end\n  end\n  return count\nend\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")", "    exclamation, dot, question_mark = \"!\", \".\"\
    , \"?\"\n    sentences = split(S, [exclamation, dot, question_mark])\n    boredoms\
    \ = 0\n    for sentence in sentences\n        if first(split(sentence)) == \"\
    I\"\n            boredoms += 1\n        end\n    end\n    return boredoms\nend",
  "    cnt = 0\n    pos_dot = search(S, '.')\n    pos_que = search(S, '?')\n    pos_exc\
    \ = search(S, '!')\n    pos_all = sort([pos_dot, pos_que, pos_exc])\n    pos_all\
    \ = filter(x -> x != nothing, pos_all)\n    for pos in pos_all\n        if(pos\
    \ - 1 > 0)\n            if(S[pos - 1] == 'I')\n                cnt += 1\n    \
    \        end\n        end\n    end\n    return cnt\nend", "    \n    boredoms\
    \ = 0\n    sentences = split(S, [';', '.', '?' , '!'])\n    for sentence in sentences\n\
    \        words = split(sentence)\n        if words[1] == \"I\"\n            boredoms\
    \ += 1\n        end\n    end\n    return boredoms\nend", "    sentences = split(S,\
    \ r\"\\.|\\?|!\")\n    is_bored = 0\n    for s in sentences\n        if s[1] ==\
    \ 'I'\n            is_bored += 1\n        end\n    end\n    return is_bored\n\
    end", "    sentences = split(S, \"|.|!|?\")\n    boredoms = 0\n    for sentence\
    \ in sentences\n        words = split(sentence)\n        boredoms += words[1]\
    \ == \"I\" ? 1 : 0\n    end\n    return boredoms\nend", "    bored_count = 0\n\
    \    pattern = r\"^I\\w+\"\n    return length(findall(pattern, split(S, \".!?\"\
    )))\nend", "    n = length(S)\n    count = 0\n    start_with_I = false\n    for\
    \ i in 1:n\n        if (S[i] == 'I') \n            start_with_I = true\n     \
    \   end\n        if (S[i] == '!' || S[i] == '?' || S[i] == '.')\n            if\
    \ (start_with_I)\n                count += 1\n            end\n            start_with_I\
    \ = false\n        end\n    end\n    return count\nend", "    boredoms = 0 \n\
    \    for sentence in split(S, [\".\", \"!\", \"?\"])\n        boredoms += startswith(sentence,\
    \ \"I\")\n    end\n    return boredoms\nend", "    return S |> split(\".\") |>\
    \ filter(x -> x |> split(\" \") |> first == \"I\") |> length\nend", "    # Your\
    \ code here. \nend", "    count = 0\n    number_of_characters = size(S, 1)\n \
    \   for character_index in 1:number_of_characters\n        if S[character_index]\
    \ == 'I'\n            count += 1\n        end\n    end\n    return count\nend",
  "    l_s = lowercase(S)\n    numboreds = 0\n    sentences = split(l_s, \".\")\n\
    \    for sen in sentences\n        if contains(sen, \"i\")\n            words\
    \ = split(sen, \" \")\n            firstword = words[1]\n            if firstword\
    \ == \"i\"\n                numboreds += 1\n            end\n        end\n   \
    \ end\n    return numboreds\nend", "    return length(matchall(r\"I \\w*\", S))\n\
    end", "    boredoms = 0 \n    for sentence in split(S, \"!.?\") \n        words\
    \ = split(sentence) \n        if length(words) > 0 && words[1] == \"I\" \n   \
    \         boredoms += 1 \n        end \n    end \n    return boredoms \nend ",
  "    return length(occursin.([\"I\"] .* \" \" .* \".\" * \"|\" * \"?\" * \"|\" *\
    \ \"!\" * \"|\" * \".\", S))\nend", "    n = 0\n    words = split(S)\n    for\
    \ word in words\n        if word == \"I\"\n            n += 1\n        end\n \
    \   end\n    return n\nend", "    #S = replace(S, \"?\" => \".\")\n    #S = replace(S,\
    \ \"!\" => \".\")\n    s = split(S, \".\")\n    boredoms = 0\n    for i in s\n\
    \        word = split(i)\n        if length(word)>0\n            if word[1] ==\
    \ \"I\"\n                boredoms += 1\n            end\n        end\n    end\n\
    \    return boredoms\nend", "    boredoms = 0\n    for word in split(S, [' ',\
    \ '.', '?', '!'])\n        if word == \"I\"\n            boredoms += 1\n     \
    \   end\n    end\n    return boredoms\nend", "    # YOUR CODE HERE\n    count\
    \ = 0\n    skip = 0\n    for letter in S\n        if letter == '.' || letter ==\
    \ '?' || letter == '!'\n            skip = 0\n        elseif skip == 0\n     \
    \       if letter == 'I'\n                count += 1\n            end\n      \
    \      skip = 1\n        end\n    end\n    return count\nend", "    bored = 0\n\
    \    # \\s* - matches any white space character (equal to [\\r\\n\\t\\f\\v ])\n\
    \    # S*? - lazily matches the preceding token as few times as possible\n   \
    \ # (?=...) - positive lookahead assertion\n    # \\w - matches any alphanumeric\
    \ character (equal to [a-zA-Z0-9_])\n    for s in split(S, r\"\\s*(?=I\\w*)\"\
    )\n        if contains(s, \"I\")\n            bored += 1\n        end\n    end\n\
    \    return bored\nend", "    str_list = split(S, \".!?\")\n    count = 0\n  \
    \  for i in str_list\n        if starts_with(i, \"I\")\n            count += 1\n\
    \        end\n    end\n    return count\nend\n@test is_bored(\"Hello world\")\
    \ == 0\n@test is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    ) == 1\n@test is_bored(\"I hate my life\") == 1", "    count = 0\n    sentence\
    \ = split(S, ['.', '?', '!'])\n    for i in sentence\n        words = split(i)\n\
    \        if words[1] == \"I\"\n            count += 1\n        end\n    end\n\
    \    return count\nend", "    S2 = split(S, [\".\", \"?\", \"!\"])\n    i = 0\n\
    \    n = 0\n    while i < length(S2)\n        s = split(S2[i])\n        if s[1]\
    \ == \"I\"\n            n = n + 1\n        end\n        i = i + 1\n    end\n \
    \   return n\nend", "    # Hint: use split and ismatch\n    # Hint: what about\
    \ case?\n    return \nend", "    s = split(S, \".\")\n    count = 0\n    for i\
    \ in s\n        if  i[1] == 'I'\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    return length(collect(x in split(S, r\"\
    [!.?]\") for x in r\"I\")) - 1\nend", "    count = 0\n    let aux = split(S,'.')\n\
    \    for s in aux\n        let a = split(s,'!')\n        for a1 in a\n       \
    \     let aux2 = split(a1,'?')\n            for aux3 in aux2\n               \
    \ if strip(aux3)[1] == 'I'\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    boredoms\
    \ = 0\n    sentences = split(S, ['.', '?', '!'])\n    for sentence in sentences\n\
    \        split_sentence = split(sentence)\n        if split_sentence[1] == \"\
    I\"\n            boredoms += 1\n        end\n    end\n    return boredoms\nend",
  "    n = length(findall(r\"\\.|\\?|!\", S))\n    idx = findall(r\"\\.|\\?|!\", S)\n\
    \    for i = 1:n\n        if S[idx[i]+1] == 'I'\n            return 1\n      \
    \  end\n    end\n    return 0\nend", "    count = 0\n    for i = 1:length(S)\n\
    \        if S[i] == 'I'\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    sentence_splitted = split(S, r\"[.?!]\")\n    n\
    \ = 0\n    for sentence in sentence_splitted\n        sentence_splitted_words\
    \ = split(sentence)\n        if sentence_splitted_words[1] == \"I\"\n        \
    \    n += 1\n        end\n    end\n    return n\nend", "    return length(filter(x->x==\"\
    I\",split(S,', |;|\\\\.|\\\\?|\\\\!')))\nend\n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to reverse the word\n    order. That is, the last\
    \ word becomes the first and vice versa.", "    x = split(S, ['.', '?', '!'])\n\
    \    y = 0\n    for i in x\n        if split(i)[1] == \"I\"\n            y = y\
    \ + 1\n        end\n    end\n    return y\nend", "    boredoms = []\n    for (idx,\
    \ word) in enumerate(split(S))\n        if word == \"I\"\n            push!(boredoms,\
    \ idx)\n        end\n    end\n    length(boredoms)\nend", "    \n    # sanitize\
    \ S\n    S = replace(S, \"?\", \".\")\n    S = replace(S, \"!\", \".\")\n    \n\
    \    # get sentences\n    sentences = split(S, \".\")\n    \n    # count boredoms\n\
    \    boredoms = 0\n    for sentence in sentences\n        if(startswith(sentence,\
    \ \"I\"))\n            boredoms += 1\n        end\n    end\n    \n    # return\
    \ boredoms\n    return boredoms\nend", "    return length(split(S, \"I\")) - 1\n\
    end", "    count = 0\n    sentences = split(S, ['.', '?', '!'])\n    for sentence\
    \ in sentences\n        words = split(sentence)\n        if words[1] == \"I\"\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    return\
    \ length(matchall(r\"^I\", split(S, \"\\\\.|\\\\?|\\\\!\")))\nend", "    count\
    \ = 0\n    for word in split(S)\n        if word == \"I\"\n            count +=\
    \ 1\n        end\n    end\n    return count\nend", "    words = split(S, [\".\"\
    ; \"?\"; \"!\"])\n    boredoms = 0\n    for i in 1:length(words)\n        if words[i][1]\
    \ == 'I'\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end", "    # check if sentence starts with \"I\"\n    # count number of senteces\
    \ starting with \"I\"\n    # return count\nend", "    C = count(s -> (s == 'I'),\
    \ split(S, ['.', '?', '!'])) \n    return C\nend", "    if S[1] == 'I'\n     \
    \   return 1\n    else\n        return 0\n    end\nend", "    if S == \"\" return\
    \ 0 end\n    n = 0\n    i = 1\n    while i <= length(S)\n        if S[i] == 'I'\n\
    \            n += 1\n            while S[i] != '.' && S[i] != '?' && S[i] != '!'\n\
    \                i += 1\n            end\n        end\n        i += 1\n    end\n\
    \    return n\nend", "    # You need to write this function\nend", "    s = split(S,\
    \ ['!', '.', '?'])\n    ctr = 0\n    for t in s\n        if t[1] == 'I'\n    \
    \        ctr += 1\n        end\n    end\n    return ctr\nend\n    \nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")", "    n = length(S)\n\
    \    res = 0\n    i = 1\n    while i < n\n        while i < n && S[i] == ' '\n\
    \            i += 1\n        end\n        if i >= n\n            break\n     \
    \   end\n        if S[i] == 'I'\n            res += 1\n        end\n        while\
    \ i < n && !(S[i] == '.' || S[i] == '?' || S[i] == '!')\n            i += 1\n\
    \        end\n        i += 1\n    end\n    return res\nend", "    return length(split(S,\
    \ \".!\"))\nend", "    return length(split(S,\"I\"))-1\nend", "  bored = 0\n \
    \ sentences = split(S, \".!?\")\n  for sentence in sentences\n    if startswith(sentence,\
    \ \"I\") || startswith(sentence, \"i\")\n      bored += 1\n    end\n  end\n  return\
    \ bored\nend", "    count = 0\n    for s in split(S,'.!'):\n        if s[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend", " \
    \   words = split(S, r\"\\s*[.?!]\\s*\") \n    boredoms = 0\n    for word in words\n\
    \        if(startswith(word, \"I\"))\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend", "    counter = 0\n    for w in split(S)\n\
    \        if w == \"I\"\n            counter += 1\n        end\n    end\n    return\
    \ counter\nend", "    s = split(S, \".\")\n    return length(filter(is_bored_tuple,\
    \ enumerate(s)))\nend", "    x = split(S,'.')\n    y = split(S,'?')\n    z = split(S,'!')\n\
    \    x = append!(x,y)\n    x = append!(x,z)\n    ctr = 0\n    for i in x\n   \
    \     ctr = ctr + 1\n        if i[1] == 'I'\n            break\n        end\n\
    \    end\n    return ctr-1\nend", "    num_boredoms = 0\n    if occursin(\"I \"\
    , S)\n        num_boredoms += 1\n    end\n    return num_boredoms\nend", "   \
    \ sentences = split(S, ['.', '?', '!'])\n    return sum(map(x -> x[1] == 'I' ?\
    \ 1 : 0, sentences))\nend\n    \n    \n    \n    \n    ", "    \n    CountBoredoms\
    \ = 0\n    Sentences = split(S, (',', '.', '!'))", "    arr = split(S,\".?!\"\
    )\n    boredoms = 0\n    for x in arr\n        if length(x) > 0\n            if\
    \ x[1] == 'I'\n                boredoms += 1\n            end\n        end\n \
    \   end\n    return boredoms\nend\nend\n\"\"\"\n    You are given a string, and\
    \ two words.\n    Find the count of the two words that appear together in the\
    \ string.\n    The words will not overlap, and order does not matter.\n    Example:\n\
    \    >>> count_pair(\"banana\", \"ban\", \"ana\")\n    2\n    >>> count_pair(\"\
    I am the good boy\", \"am\", \"good\")\n    1\n    >>> count_pair(\"banana\",\
    \ \"ana\", \"ban\")\n    2\n    \"\"\"", "    boredoms = 0\n    for s in split(S,\"\
    .!?\")\n        if occursin(\"I\",s)\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\n\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of verbs. Verbs are strings of words\
    \ that start with a vowel, and\n    consist only of lower case characters.\n \
    \  \n    For example:\n    >>> get_verbs(\"Hello, world\")\n    0\n    >>> get_verbs(\"\
    A is for apple. Z is for zebra. Are you a verb?\")\n    3\n    \"\"\"", "    s\
    \ = split(S, r\"[.!?]\")\n    count = 0\n    for s1 in s\n        s2 = split(s1)\n\
    \        if length(s2) > 0 && s2[1] == \"I\"\n            count += 1\n       \
    \ end\n    end\n    return count\nend", "  \n  if S==\" \" \n    return 0\n  end\n\
    \  \n  boredoms=0\n  i=1\n  for i in 1:length(S)\n    \n    \n    \n    \n   \
    \ \n    \n  end\nend", "    return count(split(S,'.')) do s \n        try\n  \
    \          startswith(split(s)[1],\"I\")\n        catch\n            false\n \
    \       end\n    end\nend\n \nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")", "    r=0\n    s = split(S,\".\")\n    for l in s\n\
    \        w = split(l,\" \")\n        if w[1] == \"I\"\n            r += 1\n  \
    \      end\n    end\n    return r\nend", "    x = split(S,[\".\",\"!\",\"?\"])\n\
    \    c=0\n    for i in x\n        if string(split(i,[\" \"])[1]) == \"I\"\n  \
    \          c=c+1\n        end\n    end\n    return c\nend", "    # Your code here\n\
    \    # n = 0\n    # for s in split(S,\".\")\n    #     if strip(split(s,\"!\"\
    )[1])[1] == 'I'\n    #         n += 1\n    #     end\n    # end\n    # return\
    \ n\n    return sum(strip(i)[1] == 'I' for i in split(S,\".\"))\nend", "    sentences\
    \ = split(S, r\"[?.!]+\")\n    return length( [s for s in sentences if strip(s)[1]\
    \ == 'I'] )\nend", "    return length(split(lowercase(S), r\"\\. |\\? |\\! |\\\
    .|\\?|\\!\")) - 1\nend", "    count = 0\n    for i = 1:length(S)\n        if S[i]\
    \ == 'I'\n            count += 1\n        end\n    end\n    return count\nend",
  "    is_bored = 0\n    for i in 1:length(S)\n        if i != 1\n            if S[i]\
    \ == 'I' && S[i-1] == ' '\n                is_bored += 1\n            end\n  \
    \      end\n    end\n    return is_bored\nend", "    s = split(S, ' ')\n    count\
    \ = 0\n    for i in s\n        if i[1] == 'I'\n            count += 1\n      \
    \  end\n    end\n    return count\nend\nS = \"The sky is blue. The sun is shining.\
    \ I love this weather\"\nis_bored(S)", "    count = 0\n    for s in split(S, ['.',\
    \ '?', '!'])\n        if s[1] == 'I'\n            count += 1\n        end\n  \
    \  end\n    return count\nend", "    n = 0 \n    for i in split(S,'.') \n    \
    \    if i[1] == 'I' \n            n += 1 \n        end \n    end \n    return\
    \ n \nend ", "    return length(collect(eachmatch(r\"I\", S)))\nend", "    x =\
    \ contains(S, \"I\")\n    if x == true\n        return 1\n    else\n        return\
    \ 0\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
