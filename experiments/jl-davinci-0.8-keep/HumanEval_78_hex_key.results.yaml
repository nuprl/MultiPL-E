name: HumanEval_78_hex_key
language: jl
results:
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_primes= [2, 3, 5, 7, 11, 13]\n \
    \   c=0\n    for i in 1:length(num)\n        if num[i] == '0' || num[i] == '1'\
    \ || num[i] == '2' || num[i] == '3' || num[i] == '4' || num[i] == '5' || num[i]\
    \ == '6' || num[i] == '7' || num[i] == '8' || num[i] == '9'\n            if hex_primes[parse(Int,num[i])+1]\
    \ == 1\n                c += 1\n            end\n        elseif num[i] == 'A'\
    \ || num[i] == 'B' || num[i] == 'C' || num[i] == 'D' || num[i] == 'E' || num[i]\
    \ == 'F'\n            if hex_primes[parse(Int,num[i], base=16)+1] == 1\n     \
    \           c += 1\n            end\n        end\n    end\n    return c\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj0nh2xwb.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [11]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] hex_key(num::String)\n     @ Main /tmp/tmpj0nh2xwb.jl:28\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj0nh2xwb.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj0nh2xwb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpj0nh2xwb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  BoundsError: attempt to access 6-element Vector{Int64}\
    \ at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpj0nh2xwb.jl:24\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj0nh2xwb.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj0nh2xwb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpj0nh2xwb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  BoundsError: attempt to access 6-element Vector{Int64}\
    \ at index [11]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpj0nh2xwb.jl:28\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj0nh2xwb.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj0nh2xwb.jl:39\ntest set:\
    \ Test Failed at /tmp/tmpj0nh2xwb.jl:43\n  Expression: candidate(\"2020\") ==\
    \ 2\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj0nh2xwb.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # initialising the accumulator variable prime_nums\
    \ with 0.\n    prime_nums = 0 \n    # looping over the hexadecimal string.\n \
    \   for hex in num\n        # switch-case condition.\n        case hex\n     \
    \   # checking if the hexadecimal is a prime number.\n        when '2' '3' '5'\
    \ '7' 'B' 'D'\n            # increase the value of prime_nums by 1.\n        \
    \    prime_nums += 1\n        end\n    end\n    # return prime_nums.\n    return\
    \ prime_nums\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp19zdu7r7.jl:22 expected \"\
    end\", got \"hex\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp19zdu7r7.jl:24\n\
    in expression starting at /tmp/tmp19zdu7r7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if isempty(num) \n        return 0\n    end\
    \ \n    return find(!('0' .<= num .<= '9') & !('A' .<= num .<= 'F'))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsjvcwm_p.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching isless(::Char,\
    \ ::String)\n  Closest candidates are:\n    isless(!Matched::AbstractString, ::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n    isless(::Char,\
    \ !Matched::Char) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:214\n\
    \    isless(::AbstractChar, !Matched::AbstractChar) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:221\n\
    \    ...\n  Stacktrace:\n    [1] <(x::Char, y::String)\n      @ Base ./operators.jl:352\n\
    \    [2] <=(x::Char, y::String)\n      @ Base ./operators.jl:401\n    [3] _broadcast_getindex_evalf\n\
    \      @ ./broadcast.jl:670 [inlined]\n    [4] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [5] _getindex\n      @ ./broadcast.jl:666 [inlined]\n    [6]\
    \ _broadcast_getindex\n      @ ./broadcast.jl:642 [inlined]\n    [7] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [8] copy\n      @ ./broadcast.jl:875\
    \ [inlined]\n    [9] materialize\n      @ ./broadcast.jl:860 [inlined]\n   [10]\
    \ hex_key(num::String)\n      @ Main /tmp/tmpsjvcwm_p.jl:22\n   [11] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpsjvcwm_p.jl:29 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpsjvcwm_p.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpsjvcwm_p.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching isless(::Char,\
    \ ::String)\n  Closest candidates are:\n    isless(!Matched::AbstractString, ::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n    isless(::Char,\
    \ !Matched::Char) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:214\n\
    \    isless(::AbstractChar, !Matched::AbstractChar) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:221\n\
    \    ...\n  S"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjvcwm_p.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nprintln(hex_key(\"AB\"))\nprintln(hex_key(\"\
    1077E\"))\nprintln(hex_key(\"ABED1A33\"))\nprintln(hex_key(\"123456789ABCDEF0\"\
    ))\nprintln(hex_key(\"2020\"))\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "0\n0\n0\n0\n0\ntest set: Test Failed at /tmp/tmpwkxzncmh.jl:37\n  Expression:\
    \ candidate(\"AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwkxzncmh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwkxzncmh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwkxzncmh.jl:38\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwkxzncmh.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwkxzncmh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwkxzncmh.jl:39\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwkxzncmh.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwkxzncmh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwkxzncmh.jl:40\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwkxzncmh.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwkxzncmh.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpwkxzncmh.jl:41\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expan"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwkxzncmh.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return \"0AB23456789CD1EF\"[parse(Int64,num)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprenv4mtd.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A' in \"AB\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:137\n   [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \     @ Base ./parse.jl:241\n   [3] parse\n     @ ./parse.jl:241 [inlined]\n \
    \  [4] hex_key(num::String)\n     @ Main /tmp/tmprenv4mtd.jl:19\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprenv4mtd.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprenv4mtd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprenv4mtd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  ArgumentError: invalid base 10 digit 'E' in \"\
    1077E\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64}, s::String,\
    \ startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n     @ Base ./parse.jl:137\n\
    \   [2] parse(::Type{Int64}, s::String; base::Nothing)\n     @ Base ./parse.jl:241\n\
    \   [3] parse\n     @ ./parse.jl:241 [inlined]\n   [4] hex_key(num::String)\n\
    \     @ Main /tmp/tmprenv4mtd.jl:19\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprenv4mtd.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprenv4mtd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmprenv4mtd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  ArgumentError: invalid base 10 digit 'A' in\
    \ \"ABED1A33\"\n  Stacktrace:\n   [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \ @ Base ./parse.jl:137\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprenv4mtd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key=0\n    for i=1:length(num)\n        try\
    \ \n            key += Int64(parse(Int,num[i]))\n        catch \n            if\
    \ num[i]=='A'\n                key += 10\n            elseif num[i]=='B'\n   \
    \             key += 11\n            elseif num[i]=='C'\n                key +=\
    \ 12\n            elseif num[i]=='D'\n                key += 13\n            elseif\
    \ num[i]=='E'\n                key += 14\n            else\n                key\
    \ += 15\n            end\n        end\n    end\n    return key\nend\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm_x87zvm.jl:229\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 21 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_x87zvm.jl:229 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_x87zvm.jl:228\ntest set: Test\
    \ Failed at /tmp/tmpm_x87zvm.jl:230\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 29 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_x87zvm.jl:230 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_x87zvm.jl:228\ntest set: Test\
    \ Failed at /tmp/tmpm_x87zvm.jl:231\n  Expression: candidate(\"ABED1A33\") ==\
    \ 4\n   Evaluated: 65 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_x87zvm.jl:231 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_x87zvm.jl:228\ntest set: Test\
    \ Failed at /tmp/tmpm_x87zvm.jl:232\n  Expression: candidate(\"2020\") == 2\n\
    \   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm_x87zvm.jl:232 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm_x87zvm.jl:228\ntest set: Test\
    \ Failed at /tmp/tmpm_x87zvm.jl:233\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 120 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm_x87zvm.jl:226\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key_table = [\"2\",\"3\",\"5\",\"7\",\"B\"\
    ,\"D\"]\n    count = 0\n    for x in num\n        if x in key_table\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsi0r4s9y.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi0r4s9y.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi0r4s9y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsi0r4s9y.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi0r4s9y.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi0r4s9y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsi0r4s9y.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi0r4s9y.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi0r4s9y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsi0r4s9y.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsi0r4s9y.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsi0r4s9y.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpsi0r4s9y.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsi0r4s9y.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = collect(num)\n    n = n[n.!= 'A'].|n[n.!=\
    \ 'B'].|n[n.!= 'C'].|n[n.!= 'D'].|n[n.!= 'E'].|n[n.!= 'F']\n    return length(n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvxnxgac7.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"AB\") == 1\\n  MethodError: no method\
    \ matching |(::Char, ::Char)\\n  Closest candidates are:\\n    |(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n  Stacktrace:\\n    [1] _broadcast_getindex_evalf\\n      @ ./broadcast.jl:670\
    \ [inlined]\\n    [2] _broadcast_getindex\\n      @ ./broadcast.jl:643 [inlined]\\\
    n    [3] _getindex\\n      @ ./broadcast.jl:666 [inlined]\\n    [4] _broadcast_getindex\\\
    n      @ ./broadcast.jl:642 [inlined]\\n    [5] _getindex\\n      @ ./broadcast.jl:666\
    \ [inlined]\\n    [6] _broadcast_getindex\\n      @ ./broadcast.jl:642 [inlined]\\\
    n    [7] _getindex\\n      @ ./broadcast.jl:666 [inlined]\\n    [8] _broadcast_getindex\\\
    n      @ ./broadcast.jl:642 [inlined]\\n    [9] _getindex\\n      @ ./broadcast.jl:666\
    \ [inlined]\\n   [10] _broadcast_getindex\\n      @ ./broadcast.jl:642 [inlined]\\\
    n   [11] getindex\\n      @ ./broadcast.jl:597 [inlined]\\n   [12] copy\\n   \
    \   @ ./broadcast.jl:899 [inlined]\\n   [13] materialize\\n      @ ./broadcast.jl:860\
    \ [inlined]\\n   [14] hex_key(num::String)\\n      @ Main /tmp/tmpvxnxgac7.jl:20\\\
    n   [15] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [16] macro expansion\\n      @ /tmp/tmpvxnxgac7.jl:28 [inlined]\\\
    n   [17] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [18] top-level scope\\n      @ /tmp/tmpvxnxgac7.jl:27\\ntest\
    \ set: Error During Test at /tmp/tmpvxnxgac7.jl:29\\n  Test threw exception\\\
    n  Expression: candidate(\"1077E\") == 2\\n  DimensionMismatch(\"arrays could\
    \ not be broadcast to a common size; got a dimension with lengths 5 and 4\")\\\
    n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:516 [inlined]\\n    [2]\
    \ _bcs\\n      @ ./broadcast.jl:510 [inlined]\\n    [3] broadcast_shape\\n   \
    \   @ ./broadcast.jl:504 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:499\
    \ [inlined]\\n    [5] _axes\\n   "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = 0\n    for i in num\n        if i in [\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            n += 1\n        end\n    end\n\
    \    return n\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmjdkvn1c.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjdkvn1c.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjdkvn1c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmjdkvn1c.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjdkvn1c.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjdkvn1c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmjdkvn1c.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjdkvn1c.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjdkvn1c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmjdkvn1c.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjdkvn1c.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjdkvn1c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmjdkvn1c.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjdkvn1c.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    cnt = 0\n    for (i,v) in enumerate(num)\n\
    \        #println(v)\n        if v in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n\
    \            cnt += 1\n        end\n    end\n    return cnt\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph3og09wu.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph3og09wu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph3og09wu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph3og09wu.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph3og09wu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph3og09wu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph3og09wu.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph3og09wu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph3og09wu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph3og09wu.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph3og09wu.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph3og09wu.jl:32\ntest set: Test\
    \ Failed at /tmp/tmph3og09wu.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3og09wu.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = Dict(\n        \"0\" => false,\
    \ \"1\" => false, \"2\" => true, \n        \"3\" => true, \"4\" => false, \"5\"\
    \ => true, \n        \"6\" => false, \"7\" => true, \"8\" => false, \n       \
    \ \"9\" => false, \"A\" => false, \"B\" => true, \n        \"C\" => false, \"\
    D\" => true, \"E\" => false, \n        \"F\" => false\n    )\n    hex = collect(num)\n\
    \    count = 0\n    for i in hex\n        count += hex_primes[i]\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcl3hz5f2.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Bool}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpcl3hz5f2.jl:30\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcl3hz5f2.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcl3hz5f2.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpcl3hz5f2.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Bool}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpcl3hz5f2.jl:30\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcl3hz5f2.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcl3hz5f2.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpcl3hz5f2.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Bool}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpcl3hz5f2.jl:30\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcl3hz5f2.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcl3hz5f2.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpcl3hz5f2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyError:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcl3hz5f2.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    num = uppercase(num)\n    return sum(replace(num, \"0123456789ABCDEF\", \"\
    000011111000000\").=='1')\nend\nprintln(hex_key(\"AB\"))\nprintln(hex_key(\"1077E\"\
    ))\nprintln(hex_key(\"ABED1A33\"))\nprintln(hex_key(\"123456789ABCDEF0\"))\nprintln(hex_key(\"\
    2020\"))\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching replace(::String, ::String,\
    \ ::String)\\nClosest candidates are:\\n  replace(!Matched::Union{Function, Type},\
    \ ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\\n\
    \  replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\\\
    n  replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\\\
    n  ...\\nStacktrace:\\n [1] hex_key(num::String)\\n   @ Main /tmp/'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_value_array = (\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\")\n    count_prime = 0\n    #Convert to ASCII code\n    ASCII_array\
    \ = map(x->x |> string |> bytes |> UInt64 |> Char, hex_value_array)\n    for i\
    \ in ASCII_array\n        if isprime(i)\n            count_prime += 1\n      \
    \  end\n    end\n    return count_prime\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9d82y6cg.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: bytes not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::String)\n     @ Main /tmp/tmp9d82y6cg.jl:22\n   [2]\
    \ map\n     @ ./tuple.jl:224 [inlined]\n   [3] hex_key(num::String)\n     @ Main\
    \ /tmp/tmp9d82y6cg.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9d82y6cg.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9d82y6cg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9d82y6cg.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: bytes not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::String)\n     @ Main /tmp/tmp9d82y6cg.jl:22\n   [2]\
    \ map\n     @ ./tuple.jl:224 [inlined]\n   [3] hex_key(num::String)\n     @ Main\
    \ /tmp/tmp9d82y6cg.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9d82y6cg.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9d82y6cg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9d82y6cg.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: bytes not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::String)\n     @ Main /tmp/tmp9d82y6cg.jl:22\n   [2]\
    \ map\n     @ ./tuple.jl:224 [inlined]\n   [3] hex_key(num::String)\n     @ Main\
    \ /tmp/tmp9d82y6cg.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9d82y6cg.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9d82y6cg.jl:34\ntest set"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9d82y6cg.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = [0x2, 0x3, 0x5, 0x7, 0xb, 0xd]\n\
    \    return count(c-> isin(parse(Int64, c, 16), hex_primes), num)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa4t1k3ku.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::Char, ::Int64)\n  Closest candidates are:\n    parse(::Type{T}, ::AbstractChar;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n\
    \    parse(::Type{T}, !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    parse(::Type{T}, !Matched::AbstractString; kwargs...) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:379\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{Vector{UInt8}})(c::Char)\n     @ Main /tmp/tmpa4t1k3ku.jl:20\n\
    \   [2] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [3] #count#271\n\
    \     @ ./reduce.jl:1201 [inlined]\n   [4] count\n     @ ./reduce.jl:1201 [inlined]\n\
    \   [5] hex_key(num::String)\n     @ Main /tmp/tmpa4t1k3ku.jl:20\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpa4t1k3ku.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpa4t1k3ku.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpa4t1k3ku.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::Char, ::Int64)\n  Closest candidates are:\n    parse(::Type{T}, ::AbstractChar;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n\
    \    parse(::Type{T}, !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    parse(::Type{T}, !Matched::AbstractString; kwargs...) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:379\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{Vector{UInt8}})(c::Char)\n     @ Main /tmp/tmpa4t1k3ku.jl:20\n\
    \   [2] _simple_count\n     @ ./reduce.jl:1206 [inlined]\n   [3] #count#271\n\
    \     @ ./reduce.jl:1201 [inlined]\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa4t1k3ku.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_primes = ['2','3','5','7','B','D']\n \
    \   rp = 0\n    for i in 1:length(num)\n        if num[i] in hex_primes\n    \
    \        rp += 1\n        end\n    end\n    return rp\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    cnt = 0\n    primes = [2,3,5,7,11,13]\n  \
    \  for i = 1:length(num)\n        if haskey(Dict(('0'=>0,'1'=>1,'2'=>2,'3'=>3,'4'=>4,'5'=>5,'6'=>6,'7'=>7,'8'=>8,'9'=>9,'A'=>10,'B'=>11,'C'=>12,'D'=>13,'E'=>14,'F'=>15)),num[i])\
    \ && (findin(primes, Dict(('0'=>0,'1'=>1,'2'=>2,'3'=>3,'4'=>4,'5'=>5,'6'=>6,'7'=>7,'8'=>8,'9'=>9,'A'=>10,'B'=>11,'C'=>12,'D'=>13,'E'=>14,'F'=>15))[num[i]])\
    \ != 0)\n            cnt += 1\n        end\n    end\n    return cnt\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqfze2_e5.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: findin not defined\n \
    \ Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpqfze2_e5.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqfze2_e5.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqfze2_e5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqfze2_e5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: findin not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpqfze2_e5.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqfze2_e5.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqfze2_e5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqfze2_e5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: findin not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpqfze2_e5.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqfze2_e5.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqfze2_e5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqfze2_e5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: findin not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpqfze2_e5.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqfze2_e5.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]\n    count = 0\n    for i = 1:length(num)\n        if in(num[i],primes)\n\
    \            count += 1\n        end\n    end\n    return count\nend\n \n@test\
    \ hex_key(\"AB\") == 1\n@test hex_key(\"1077E\") == 2\n@test hex_key(\"ABED1A33\"\
    ) == 4\n@test hex_key(\"123456789ABCDEF0\") == 6\n@test hex_key(\"2020\") == 2\n\
    \ \n\"\"\"Write a function that takes an Array of numbers and returns an \n  \
    \  Array of indices of matching pairs of values (e.g. for \n    [1,2,2,4,4,4]\
    \ it should return [2,3,4,5,6]).\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpobcbm5u0.jl:29\nin expression starting at /tmp/tmpobcbm5u0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = length(num)\n    c = 0\n    for i = 1:n\n\
    \        s = parse(UInt64,num[i])\n        if (s == 2 || s == 3 || s == 5 || s\
    \ == 7 || s == 11 || s == 13)\n            c += 1\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp74w1n22p.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n   [1] parse(::Type{UInt64}, c::Char; base::Int64)\n   \
    \  @ Base ./parse.jl:46\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3]\
    \ hex_key(num::String)\n     @ Main /tmp/tmp74w1n22p.jl:22\n   [4] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp74w1n22p.jl:34 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp74w1n22p.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp74w1n22p.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  ArgumentError: invalid base 10 digit 'E'\n  Stacktrace:\n\
    \   [1] parse(::Type{UInt64}, c::Char; base::Int64)\n     @ Base ./parse.jl:46\n\
    \   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n \
    \    @ Main /tmp/tmp74w1n22p.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp74w1n22p.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp74w1n22p.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp74w1n22p.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  ArgumentError: invalid base 10 digit 'A'\n \
    \ Stacktrace:\n   [1] parse(::Type{UInt64}, c::Char; base::Int64)\n     @ Base\
    \ ./parse.jl:46\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmp74w1n22p.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp74w1n22p.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   ["
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp74w1n22p.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes=[\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"\
    ]\n    count=0\n    for i=1:length(num)\n        if num[i] in primes\n       \
    \     count=count+1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxhp89k6l.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhp89k6l.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhp89k6l.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxhp89k6l.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhp89k6l.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhp89k6l.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxhp89k6l.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhp89k6l.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhp89k6l.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxhp89k6l.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxhp89k6l.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxhp89k6l.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxhp89k6l.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxhp89k6l.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hexKey = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"\
    3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"=>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"\
    C\"=>12,\"D\"=>13,\"E\"=>14,\"F\"=>15)\n    counter = 0\n    num = split(num,\
    \ \"\")\n    for i in num\n        if isprime(hexKey[i])\n            counter\
    \ += 1\n        end\n    end\n    return counter\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7l8lt4cm.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp7l8lt4cm.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7l8lt4cm.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7l8lt4cm.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7l8lt4cm.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp7l8lt4cm.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7l8lt4cm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7l8lt4cm.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7l8lt4cm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp7l8lt4cm.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7l8lt4cm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7l8lt4cm.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7l8lt4cm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp7l8lt4cm.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7l8lt4cm.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(Dict(n => 1 for n in [\"2\"\
    ,\"3\",\"5\",\"7\",\"B\",\"D\"])[num])\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxedvt0fy.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key \"AB\" not found\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpxedvt0fy.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxedvt0fy.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxedvt0fy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpxedvt0fy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key \"1077E\" not found\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpxedvt0fy.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxedvt0fy.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxedvt0fy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpxedvt0fy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key \"ABED1A33\" not found\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpxedvt0fy.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxedvt0fy.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxedvt0fy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpxedvt0fy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyError: key \"2020\" not found\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./dict.jl:481 [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxedvt0fy.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num_arr = split(num, \"\")\n    primes = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num_arr\n\
    \        if in(i, primes)\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_nums = [2, 3, 5, 7, 11, 13]\n    hex_map\
    \ = Dict(\"A\" => 10, \"B\" => 11, \"C\" => 12, \"D\" => 13, \"E\" => 14, \"F\"\
    \ => 15)\n    primes = 0 \n    for char in num \n        if isdigit(char) == true\n\
    \            if isprime(parse(Int64, char)) == true \n                primes +=\
    \ 1\n            end\n        else\n            if isprime(hex_map[char]) == true\
    \ \n                primes += 1\n            end\n        end\n    end\n    return\
    \ primes\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgyiqh9i4.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpgyiqh9i4.jl:28\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgyiqh9i4.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgyiqh9i4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgyiqh9i4.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpgyiqh9i4.jl:24\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgyiqh9i4.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgyiqh9i4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgyiqh9i4.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpgyiqh9i4.jl:28\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgyiqh9i4.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgyiqh9i4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgyiqh9i4.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgyiqh9i4.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    digits = [\"A\",\"B\",\"C\",\"D\",\"E\",\"\
    F\"]\n    for i = 1:length(num)\n        if num[i] in digits\n            num[i]\
    \ = parse(Int64,num[i],16)\n        end\n    end\n    return sum(isprime.(parse.(Int64,num)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmperegfsf2.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmperegfsf2.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmperegfsf2.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmperegfsf2.jl:31\ntest set:\
    \ Error During Test at /tmp/tmperegfsf2.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmperegfsf2.jl:25\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmperegfsf2.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmperegfsf2.jl:31\ntest set:\
    \ Error During Test at /tmp/tmperegfsf2.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmperegfsf2.jl:25\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmperegfsf2.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmperegfsf2.jl:31\ntest set:\
    \ Error During Test at /tmp/tmperegfsf2.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmperegfsf2.jl:25\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmperegfsf2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    hex_key = collect(1:16)\n   \
    \ hex_num = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\"\
    ,\"B\",\"C\",\"D\",\"E\",\"F\"]\n    for i in 1:length(num)\n        key += hex_key[findfirst(x->x==num[i],hex_num)]\n\
    \    end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmax26hsf.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid index: nothing\
    \ of type Nothing\n  Stacktrace:\n    [1] to_index(i::Nothing)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{Int64}, i::Nothing)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] hex_key(num::String)\n      @ Main /tmp/tmpmax26hsf.jl:23\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpmax26hsf.jl:32 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpmax26hsf.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpmax26hsf.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  ArgumentError: invalid index: nothing of type Nothing\n\
    \  Stacktrace:\n    [1] to_index(i::Nothing)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{Int64}, i::Nothing)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] hex_key(num::String)\n      @ Main /tmp/tmpmax26hsf.jl:23\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpmax26hsf.jl:33 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpmax26hsf.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpmax26hsf.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  ArgumentError: invalid index: nothing of type\
    \ Nothing\n  Stacktrace:\n    [1] to_index(i::Nothing)\n      @ Base ./indices.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmax26hsf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_dict = Dict(\"2\"=>2,\"3\"=>3,\"5\"=>5,\"\
    7\"=>7,\"B\"=>11,\"D\"=>13)\n    answer = 0\n    for i in num\n        if i in\
    \ keys(hex_dict)\n            answer += 1\n        end\n    end\n    return answer\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplp6znl5n.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp6znl5n.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplp6znl5n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplp6znl5n.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp6znl5n.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplp6znl5n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplp6znl5n.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp6znl5n.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplp6znl5n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplp6znl5n.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplp6znl5n.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplp6znl5n.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplp6znl5n.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplp6znl5n.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = 0\n    for i in num\n        if i in \"\
    2357BDF\"\n            n += 1\n        end\n    end\n    return n\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa40lnuln.jl:36\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa40lnuln.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa40lnuln.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa40lnuln.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa40lnuln.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa40lnuln.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa40lnuln.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,13\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6nk4mvm.jl:20\nin expression starting at\
    \ /tmp/tmpk6nk4mvm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    counter = 0\n    return count(i->i in ['2','3','5','7','B','D'],\
    \ num)\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n  primes = Int64[0x02, 0x03, 0x05, 0x07, 0x0B,\
    \ 0x0D]\n  i = 1\n  count = 0\n  for c in num\n    if c in primes\n      count\
    \ += 1\n    end\n  end\n  return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplm5kgw5p.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplm5kgw5p.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplm5kgw5p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplm5kgw5p.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplm5kgw5p.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplm5kgw5p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplm5kgw5p.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplm5kgw5p.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplm5kgw5p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplm5kgw5p.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplm5kgw5p.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplm5kgw5p.jl:33\ntest set: Test\
    \ Failed at /tmp/tmplm5kgw5p.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplm5kgw5p.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    mydict = Dict(\"2\"=>2,\"3\"=>3,\"5\"\
    =>5,\"7\"=>7,\"B\"=>11,\"D\"=>13)\n    count::Int64 = 0\n    for n in num\n  \
    \      (haskey(mydict,n)) ? (count += 1) : (continue) \n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdwcj_ihu.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwcj_ihu.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwcj_ihu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdwcj_ihu.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwcj_ihu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwcj_ihu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdwcj_ihu.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwcj_ihu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwcj_ihu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdwcj_ihu.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdwcj_ihu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdwcj_ihu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdwcj_ihu.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdwcj_ihu.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    hex_digits = \"0123456789ABCDEF\"\
    \n    hex_primes = \"2357BDF\"\n    if num != \"\"\n        for i = 1:length(num)\n\
    \            char = num[i]\n            j = search(hex_digits, char)\n       \
    \     if j != -1\n                if search(hex_primes, char) != -1\n        \
    \            key += 1\n                end\n            end\n        end\n   \
    \ end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyfcb0a5a.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: search not defined\n \
    \ Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpyfcb0a5a.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyfcb0a5a.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyfcb0a5a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpyfcb0a5a.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: search not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpyfcb0a5a.jl:25\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyfcb0a5a.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyfcb0a5a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpyfcb0a5a.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: search not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpyfcb0a5a.jl:25\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyfcb0a5a.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyfcb0a5a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpyfcb0a5a.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: search not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpyfcb0a5a.jl:25\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyfcb0a5a.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for x in num\n        if x ==\
    \ '2'\n            key += 1\n        elseif x == '3'\n            key += 1\n \
    \       elseif x == '5'\n            key += 1\n        elseif x == '7'\n     \
    \       key += 1\n        elseif x == 'B'\n            key += 1\n        elseif\
    \ x == 'D'\n            key += 1\n        end\n    end\n    return key\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    hex = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"=>6,\"\
    7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"C\"=>12,\"D\"=>13,\"E\"=>14,\"\
    F\"=>15)\n    primes = [2,3,5,7,11,13]\n    sum = 0\n    for i in num\n      \
    \  if hex[i] in primes\n            sum += 1\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5i_pmlrs.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmp5i_pmlrs.jl:26\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5i_pmlrs.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5i_pmlrs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp5i_pmlrs.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmp5i_pmlrs.jl:26\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5i_pmlrs.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5i_pmlrs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp5i_pmlrs.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmp5i_pmlrs.jl:26\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5i_pmlrs.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5i_pmlrs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp5i_pmlrs.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5i_pmlrs.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if any([ch in num for ch in [\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\"]])\n        return 1\n    else \n        return 0\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpub295fi0.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n    [2]\
    \ in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(ch::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./generator.jl:47 [inlined]\n    [5] collect\n      @ ./array.jl:724\
    \ [inlined]\n    [6] hex_key(num::String)\n      @ Main /tmp/tmpub295fi0.jl:19\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpub295fi0.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpub295fi0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpub295fi0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \    [1] error(s::String)\n      @ Base ./error.jl:33\n    [2] in(#unused#::String,\
    \ #unused#::String)\n      @ Base ./strings/search.jl:638\n    [3] (::var\"#1#2\"\
    {String})(ch::String)\n      @ Main ./none:0\n    [4] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [5] collect\n      @ ./array.jl:724 [inlined]\n    [6] hex_key(num::String)\n\
    \      @ Main /tmp/tmpub295fi0.jl:19\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpub295fi0.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpub295fi0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpub295fi0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n    [2]\
    \ in(#unused#::String, #unused#::Stri"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpub295fi0.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i in\
    \ ['2','3','5','7','B','D']\n            key = key + 1\n        end\n    end\n\
    \    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i = 1:length(num)\n   \
    \     if num[i] in \"2357BDF\"\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpei8azj8l.jl:36\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpei8azj8l.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpei8azj8l.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpei8azj8l.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpei8azj8l.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpei8azj8l.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpei8azj8l.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    cnt = 0\n    for i in num\n        if i in\
    \ \"2357BDF\"\n            cnt += 1\n        end\n    end\n    return cnt\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg2pck_b4.jl:36\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2pck_b4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2pck_b4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg2pck_b4.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2pck_b4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2pck_b4.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg2pck_b4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    candidates = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    count = 0\n    for c in candidates\n        count += count(num,\
    \ c)\n    end\n    return count\nend\n@testset \"basic tests\" begin\n    @test\
    \ hex_key(\"AB\") == 1\n    @test hex_key(\"1077E\") == 2\n    @test hex_key(\"\
    ABED1A33\") == 4\n    @test hex_key(\"123456789ABCDEF0\") == 6\n    @test hex_key(\"\
    2020\") == 2\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp5fpuu3m6.jl:26\nin expression starting at /tmp/tmp5fpuu3m6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for x = 1:length(num)\n   \
    \     if num[x] == \"2\" || num[x] == \"3\" || num[x] == \"5\" || num[x] == \"\
    7\" || num[x] == \"B\" || num[x] == \"D\"\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsk3w2scx.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk3w2scx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk3w2scx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpsk3w2scx.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk3w2scx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk3w2scx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpsk3w2scx.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk3w2scx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk3w2scx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpsk3w2scx.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsk3w2scx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsk3w2scx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpsk3w2scx.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsk3w2scx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    digits = \"0123456789ABCDEF\"\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    hexadecimal = collect(digits)\n    primes = collect(primes)\n\
    \    count = 0\n    for i in num\n        if i in primes\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp934p1uk4.jl:36\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp934p1uk4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp934p1uk4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp934p1uk4.jl:37\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp934p1uk4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp934p1uk4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp934p1uk4.jl:38\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp934p1uk4.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp934p1uk4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp934p1uk4.jl:39\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp934p1uk4.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp934p1uk4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp934p1uk4.jl:40\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp934p1uk4.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_values = Dict('0'=>0,'1'=>1,'2'=>2,'3'=>3,'4'=>4,'5'=>5,'6'=>6,'7'=>7,'8'=>8,'9'=>9,'A'=>10,'B'=>11,'C'=>12,'D'=>13,'E'=>14,'F'=>15)\n\
    \    numbers = map(x->hex_values[x],collect(num))\n    prime_numbers = [2,3,5,7,11,13]\n\
    \    return(sum(1 for x in numbers if x in prime_numbers))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    total = 0\n    primes = [2,3,5,7,11,13]\n\
    \    nums = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\"\
    ,\"B\",\"C\",\"D\",\"E\",\"F\"]\n    for i in num\n        for j in 1:6\n    \
    \        if(i == nums[primes[j]])\n                total += 1\n            end\n\
    \        end\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5xcmgzr0.jl:36\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5xcmgzr0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5xcmgzr0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5xcmgzr0.jl:37\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5xcmgzr0.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5xcmgzr0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5xcmgzr0.jl:38\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5xcmgzr0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5xcmgzr0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5xcmgzr0.jl:39\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5xcmgzr0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5xcmgzr0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp5xcmgzr0.jl:40\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5xcmgzr0.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num = uppercase(num)\n    primes = [\"2\"\
    ,\"3\",\"5\",\"7\",\"B\",\"D\"]\n    key = 0\n    for n in num\n        if n in\
    \ primes\n            key += 1\n        end\n    end\n    return key\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgdwa6z7n.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgdwa6z7n.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgdwa6z7n.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgdwa6z7n.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgdwa6z7n.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgdwa6z7n.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgdwa6z7n.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgdwa6z7n.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgdwa6z7n.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgdwa6z7n.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgdwa6z7n.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgdwa6z7n.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgdwa6z7n.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgdwa6z7n.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    count = 0\n    digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    prime_digits = [\"2\",\"\
    3\",\"5\",\"7\",\"B\",\"D\"]\n    for i in digits\n        if i in num\n     \
    \       if i in prime_digits\n                count += 1\n            end\n  \
    \      end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsybtt7b1.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmpsybtt7b1.jl:26\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsybtt7b1.jl:39 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsybtt7b1.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpsybtt7b1.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmpsybtt7b1.jl:26\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsybtt7b1.jl:40 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsybtt7b1.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpsybtt7b1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmpsybtt7b1.jl:26\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsybtt7b1.jl:41 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsybtt7b1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num = toupper(num)\n    primes = [\"2\",\"\
    3\",\"5\",\"7\",\"B\",\"D\"]\n    key = 0\n    for i in primes\n        if (i\
    \ in num)\n            key += count(num,i)\n        end\n    end\n    return key\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmnaj3qik.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: toupper not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpmnaj3qik.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmnaj3qik.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmnaj3qik.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmnaj3qik.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: toupper not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpmnaj3qik.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmnaj3qik.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmnaj3qik.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmnaj3qik.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: toupper not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpmnaj3qik.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmnaj3qik.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmnaj3qik.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmnaj3qik.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: toupper not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpmnaj3qik.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmnaj3qik.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = [\"A\",\"B\",\"C\",\"D\",\"E\",\"\
    F\"]\n    count = 0\n    for i in num\n        if i in hex_key\n            count\
    \ += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiowl3xo8.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiowl3xo8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiowl3xo8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiowl3xo8.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiowl3xo8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiowl3xo8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiowl3xo8.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiowl3xo8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiowl3xo8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiowl3xo8.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiowl3xo8.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiowl3xo8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiowl3xo8.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiowl3xo8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    keys = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"\
    ,\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    primes = [\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for hex in num\n      \
    \  if hex in primes\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8a68h8ix.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8a68h8ix.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8a68h8ix.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8a68h8ix.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8a68h8ix.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8a68h8ix.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8a68h8ix.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8a68h8ix.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8a68h8ix.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8a68h8ix.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8a68h8ix.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8a68h8ix.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8a68h8ix.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8a68h8ix.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    for i in num\n        if i == 2 || i == 3\
    \ || i == 5 || i == 7 || i == \"B\" || i == \"D\"\n            println(i)\n  \
    \      end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8upr96y7.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp8upr96y7.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8upr96y7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8upr96y7.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp8upr96y7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp8upr96y7.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8upr96y7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8upr96y7.jl:29\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8upr96y7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # Convert String to Array of String of each\
    \ character\n    # And then change character to decimal number\n    # count how\
    \ many number of in prime_arr\n    # Sum all of that number\n    prime_arr = [2,\
    \ 3, 5, 7, 11, 13]\n    Hexadecimal = Array(\"0123456789ABCDEF\")\n    return\
    \ length(filter(x -> x in prime_arr, map(x -> findfirst(y -> y == x, Hexadecimal),\
    \ [x for x in num])))\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx3ulv97v.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching Array(::String)\n\
    \  Closest candidates are:\n    Array(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:442\n\
    \    Array(!Matched::Union{LinearAlgebra.Hermitian, LinearAlgebra.Symmetric})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:271\n\
    \    Array(!Matched::LinearAlgebra.Hessenberg) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:550\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpx3ulv97v.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx3ulv97v.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx3ulv97v.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpx3ulv97v.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching Array(::String)\n\
    \  Closest candidates are:\n    Array(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:442\n\
    \    Array(!Matched::Union{LinearAlgebra.Hermitian, LinearAlgebra.Symmetric})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:271\n\
    \    Array(!Matched::LinearAlgebra.Hessenberg) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:550\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpx3ulv97v.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx3ulv97v.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx3ulv97v.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in 1:length(num)\n  \
    \      if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D'\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    count = 0\n    hex_list = [\"2\",\"\
    3\",\"5\",\"7\",\"B\",\"D\"]\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpou4z8apy.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpou4z8apy.jl:1\n\
    in expression starting at /tmp/tmpou4z8apy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    digits\
    \ = parse.(Int64, num[num .\u2208 (\"0123456789ABCDEF\")])\n    return length(digits[digits\
    \ .\u2208 primes])\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr4p9p7_5.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n    [2]\
    \ in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [4] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [5] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [6] copy\n      @ ./broadcast.jl:875\
    \ [inlined]\n    [7] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [8]\
    \ hex_key(num::String)\n      @ Main /tmp/tmpr4p9p7_5.jl:20\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpr4p9p7_5.jl:28 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpr4p9p7_5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpr4p9p7_5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \    [1] error(s::String)\n      @ Base ./error.jl:33\n    [2] in(#unused#::String,\
    \ #unused#::String)\n      @ Base ./strings/search.jl:638\n    [3] _broadcast_getindex_evalf\n\
    \      @ ./broadcast.jl:670 [inlined]\n    [4] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [5] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [6] copy\n\
    \      @ ./broadcast.jl:875 [inlined]\n    [7] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [8] hex_key(num::String)\n      @ Main /tmp/tmpr4p9p7_5.jl:20\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpr4p9p7_5.jl:29 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpr4p9p7_5.jl:27\ntest se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr4p9p7_5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n_prime = 0\n    for i in num\n        if\
    \ i in (\"2\",\"3\",\"5\",\"7\",\"B\",\"D\")\n            n_prime += 1\n     \
    \   end\n    end\n    return n_prime\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpurjv1jhp.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurjv1jhp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurjv1jhp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpurjv1jhp.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurjv1jhp.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurjv1jhp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpurjv1jhp.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurjv1jhp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurjv1jhp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpurjv1jhp.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpurjv1jhp.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpurjv1jhp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpurjv1jhp.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpurjv1jhp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hexa_primes = Set(\"2357BDF\")\n    return\
    \ length(setintersect(Set(collect(num)),hexa_primes))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf34s3z_w.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: setintersect not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpf34s3z_w.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf34s3z_w.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf34s3z_w.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf34s3z_w.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: setintersect not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpf34s3z_w.jl:20\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf34s3z_w.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf34s3z_w.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf34s3z_w.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: setintersect not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpf34s3z_w.jl:20\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf34s3z_w.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf34s3z_w.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf34s3z_w.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: setintersect not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpf34s3z_w.jl:20\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf34s3z_w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for letter in num\n       \
    \ if (letter in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"])\n            count += 1\n\
    \        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt35k934f.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt35k934f.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt35k934f.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt35k934f.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt35k934f.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt35k934f.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt35k934f.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt35k934f.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt35k934f.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt35k934f.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt35k934f.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt35k934f.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt35k934f.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt35k934f.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num_list = collect(num)\n    num_list = [parse(Int64,x)\
    \ for x in num_list]\n    num_list = [x in [0,1,2,3,4,5,6,7,8,9,11,13] for x in\
    \ num_list]\n    println(num_list)\n    return sum(num_list)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpntzfebfp.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n    [1] parse(::Type{Int64}, c::Char; base::Int64)\n   \
    \   @ Base ./parse.jl:46\n    [2] parse\n      @ ./parse.jl:41 [inlined]\n   \
    \ [3] #1\n      @ ./none:0 [inlined]\n    [4] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [5] collect(itr::Base.Generator{Vector{Char}, var\"#1#3\"})\n\
    \      @ Base ./array.jl:724\n    [6] hex_key(num::String)\n      @ Main /tmp/tmpntzfebfp.jl:20\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpntzfebfp.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpntzfebfp.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpntzfebfp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  ArgumentError: invalid base 10 digit 'E'\n  Stacktrace:\n\
    \    [1] parse(::Type{Int64}, c::Char; base::Int64)\n      @ Base ./parse.jl:46\n\
    \    [2] parse\n      @ ./parse.jl:41 [inlined]\n    [3] #1\n      @ ./none:0\
    \ [inlined]\n    [4] iterate\n      @ ./generator.jl:47 [inlined]\n    [5] collect_to!\n\
    \      @ ./array.jl:782 [inlined]\n    [6] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [7] collect(itr::Base.Generator{Vector{Char}, var\"#1#3\"})\n\
    \      @ Base ./array.jl:734\n    [8] hex_key(num::String)\n      @ Main /tmp/tmpntzfebfp.jl:20\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpntzfebfp.jl:31 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpntzfebfp.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpntzfebfp.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  ArgumentError: invalid base 10"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpntzfebfp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"3\"\
    =>3,\"4\"=>4,\"5\"=>5,\"6\"=>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"\
    C\"=>12,\"D\"=>13,\"E\"=>14,\"F\"=>15)\n    total = 0\n    for i in 1:length(num)\n\
    \        if key[num[i]] % 2 != 0\n            total += 1\n        end\n    end\n\
    \    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaizxp3fb.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpaizxp3fb.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaizxp3fb.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaizxp3fb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpaizxp3fb.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpaizxp3fb.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaizxp3fb.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaizxp3fb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpaizxp3fb.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpaizxp3fb.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaizxp3fb.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaizxp3fb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpaizxp3fb.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaizxp3fb.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits\
    \ = \"0123456789ABCDEF\"\n    hex_digits = [parse(Int64, hex_digits[i+1]) for\
    \ i in 1:length(hex_digits)]\n    primes_dict = Dict(hex_digits[i] => true for\
    \ i in primes)\n    result = 0\n    for i in num\n        key = parse(Int64, i)\n\
    \        if key in keys(primes_dict)\n            result += 1\n        end\n \
    \   end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu8kxy1pv.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n    [1] parse(::Type{Int64}, c::Char; base::Int64)\n   \
    \   @ Base ./parse.jl:46\n    [2] parse(::Type{Int64}, c::Char)\n      @ Base\
    \ ./parse.jl:41\n    [3] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n  \
    \  [4] iterate\n      @ ./generator.jl:47 [inlined]\n    [5] collect_to!\n   \
    \   @ ./array.jl:782 [inlined]\n    [6] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [7] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#3\"\
    })\n      @ Base ./array.jl:734\n    [8] hex_key(num::String)\n      @ Main /tmp/tmpu8kxy1pv.jl:21\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpu8kxy1pv.jl:37 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpu8kxy1pv.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpu8kxy1pv.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  ArgumentError: invalid base 10 digit 'A'\n  Stacktrace:\n\
    \    [1] parse(::Type{Int64}, c::Char; base::Int64)\n      @ Base ./parse.jl:46\n\
    \    [2] parse(::Type{Int64}, c::Char)\n      @ Base ./parse.jl:41\n    [3] (::var\"\
    #1#3\")(i::Int64)\n      @ Main ./none:0\n    [4] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [5] collect_to!\n      @ ./array.jl:782 [inlined]\n    [6] collect_to_with_first!\n\
    \      @ ./array.jl:760 [inlined]\n    [7] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#3\"})\n      @ Base ./array.jl:734\n    [8] hex_key(num::String)\n \
    \     @ Main /tmp/tmpu8kxy1pv.jl:21\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpu8kxy1pv.jl:38 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8kxy1pv.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    digits\
    \ = \"0123456789ABCDEF\"\n    hex_dec_digits = [1:16;]\n    for i in eachindex(num)\n\
    \        for j in eachindex(digits)\n            if num[i] == digits[j]\n    \
    \            if hex_dec_digits[j] in primes\n                    println(hex_dec_digits[j])\n\
    \                end\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "11\ntest set: Error During Test at /tmp/tmpvflms40o.jl:37\n  Test threw\
    \ exception\n  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpvflms40o.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvflms40o.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvflms40o.jl:36\n2\ntest set:\
    \ Error During Test at /tmp/tmpvflms40o.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpvflms40o.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvflms40o.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvflms40o.jl:36\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvflms40o.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    function\
    \ is_prime(x::Int64)::Bool\n        s = Int64(floor(sqrt(x)))\n        for i in\
    \ 2:s\n            if(x % i == 0) return false\n        end\n        return true\n\
    \    end\n    key = Dict('0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5'\
    \ => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11, 'C' => 12,\
    \ 'D' => 13, 'E' => 14, 'F' => 15)\n    count = 0\n    for d in num\n        x\
    \ = key[d]\n        if x in primes\n            count += 1\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyuwqrzvu.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyuwqrzvu.jl:1\n\
    in expression starting at /tmp/tmpyuwqrzvu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    c = collect(num)\n    c = filter(x -> isprime(\
    \ parse(Int64, x, base=16) ), c)\n    return length(c)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplwk1pi4w.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmplwk1pi4w.jl:20\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Char})\n     @ Base ./array.jl:2484\n\
    \   [3] hex_key(num::String)\n     @ Main /tmp/tmplwk1pi4w.jl:20\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmplwk1pi4w.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmplwk1pi4w.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplwk1pi4w.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmplwk1pi4w.jl:20\n   [2] filter(f::var\"\
    #1#2\", a::Vector{Char})\n     @ Base ./array.jl:2484\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmplwk1pi4w.jl:20\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmplwk1pi4w.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmplwk1pi4w.jl:27\ntest set:\
    \ Error During Test at /tmp/tmplwk1pi4w.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::Char)\n     @ Main /tmp/tmplwk1pi4w.jl:20\n   [2] filter(f::var\"\
    #1#2\", a::Vector{Char})\n     @ Base ./array.jl:2484\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmplwk1pi4w.jl:20\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmplwk1pi4w.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwk1pi4w.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    digits\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    num_prime = 0\n    for i in num\n\
    \        if i in digits[10:16]\n            if digits.index(i) in primes\n   \
    \             num_prime += 1\n            end\n        elseif digits.index(i)\
    \ in primes\n            num_prime += 1\n        end\n    end\n    return num_prime\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq28rn393.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  type Array has no field index\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpq28rn393.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq28rn393.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq28rn393.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpq28rn393.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  type Array has no field index\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpq28rn393.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq28rn393.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq28rn393.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpq28rn393.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  type Array has no field index\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpq28rn393.jl:27\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq28rn393.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq28rn393.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpq28rn393.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  type Array has no field index\n  Stacktrace:\n \
    \  [1] getproperty\n     @ ./Base.jl:42 ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq28rn393.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    q = 0\n    for x in num\n        if x in [\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            q += 1\n        end\n    end\n\
    \    return q\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5acoy4b2.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5acoy4b2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5acoy4b2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5acoy4b2.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5acoy4b2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5acoy4b2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5acoy4b2.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5acoy4b2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5acoy4b2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5acoy4b2.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5acoy4b2.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5acoy4b2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5acoy4b2.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5acoy4b2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for i in num\n        if i ==\
    \ '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n          \
    \  key += 1\n        end\n    end\n    return key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    i=count(num, r\"[2-79B-DF]\")\n    return\
    \ i\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwx474nts.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching iterate(::Regex)\n\
    \  Closest candidates are:\n    iterate(!Matched::Union{LinRange, StepRangeLen})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\n    ...\n  Stacktrace:\n\
    \   [1] _simple_count(pred::String, itr::Regex, init::Int64)\n     @ Base ./reduce.jl:1205\n\
    \   [2] count(f::String, itr::Regex; init::Int64)\n     @ Base ./reduce.jl:1201\n\
    \   [3] count(f::String, itr::Regex)\n     @ Base ./reduce.jl:1201\n   [4] hex_key(num::String)\n\
    \     @ Main /tmp/tmpwx474nts.jl:19\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwx474nts.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwx474nts.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwx474nts.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching iterate(::Regex)\n\
    \  Closest candidates are:\n    iterate(!Matched::Union{LinRange, StepRangeLen})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\n    ...\n  Stacktrace:\n\
    \   [1] _simple_count(pred::String, itr::Regex, init::Int64)\n     @ Base ./reduce.jl:1205\n\
    \   [2] count(f::String, itr::Regex; init::Int64)\n     @ Base ./reduce.jl:1201\n\
    \   [3] count"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwx474nts.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return count(i->(i in '2357BD')==true,num)\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpaams525u.jl:19\nin expression\
    \ starting at /tmp/tmpaams525u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    COUNT = 0\n    for i in num\n        if i\
    \ in \"2357BD\"\n            COUNT += 1\n        end\n    end\n    return COUNT\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hexdigits = [48, 49, 50, 51, 52, 53, 54, 55,\
    \ 56, 57, 65, 66, 67, 68, 69, 70]\n    primes = [2, 3, 5, 7, 11, 13]\n    count\
    \ = 0\n    for i in 1:length(num)\n        if hexdigits[findall(x->x==num[i],\
    \ hexdigits)] in primes\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxos7ebxv.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxos7ebxv.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxos7ebxv.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxos7ebxv.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxos7ebxv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxos7ebxv.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxos7ebxv.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxos7ebxv.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxos7ebxv.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxos7ebxv.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxos7ebxv.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxos7ebxv.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpxos7ebxv.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxos7ebxv.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    keys = 0\n    for n in num\n        x = hex2dec(n)\n\
    \        if isprime(x)\n            keys += 1\n        end\n    end\n    return\
    \ keys\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg6ir8etz.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: hex2dec not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpg6ir8etz.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg6ir8etz.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg6ir8etz.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpg6ir8etz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: hex2dec not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpg6ir8etz.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg6ir8etz.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg6ir8etz.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpg6ir8etz.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: hex2dec not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpg6ir8etz.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg6ir8etz.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg6ir8etz.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpg6ir8etz.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: hex2dec not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpg6ir8etz.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6ir8etz.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = [2, 3, 5, 7, 11, 13]\n    sum\
    \ = 0\n    for i = 1:length(num)\n        isprime = 0\n        for j = 1:length(primes)\n\
    \            if Int64(num[i], 16) == primes[j]\n                isprime = 1\n\
    \            end\n        end\n        sum += isprime\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpguvg_71h.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching Int64(::Char,\
    \ ::Int64)\n  Closest candidates are:\n    (::Type{T})(::AbstractChar) where T<:Union{Int32,\
    \ Int64} at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:51\n    (::Type{T})(::AbstractChar)\
    \ where T<:Union{AbstractChar, Number} at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:50\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpguvg_71h.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpguvg_71h.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpguvg_71h.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpguvg_71h.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching Int64(::Char, ::Int64)\n\
    \  Closest candidates are:\n    (::Type{T})(::AbstractChar) where T<:Union{Int32,\
    \ Int64} at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:51\n    (::Type{T})(::AbstractChar)\
    \ where T<:Union{AbstractChar, Number} at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:50\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpguvg_71h.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpguvg_71h.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpguvg_71h.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpguvg_71h.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  MethodError: no method matching Int64(::Char,\
    \ ::Int64)\n  Closest candidates are:\n    (::Type{T})(::AbstractChar) where T<:Union{Int32,\
    \ Int64} at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:5"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpguvg_71h.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num_primes = 0\n    for i in 1:length(num)\n\
    \        if num[i] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            num_primes\
    \ += 1\n        end\n    end\n    return num_primes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5c58bg01.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5c58bg01.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5c58bg01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5c58bg01.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5c58bg01.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5c58bg01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5c58bg01.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5c58bg01.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5c58bg01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5c58bg01.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5c58bg01.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5c58bg01.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5c58bg01.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5c58bg01.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    cnt = 0\n    nums = [2, 3, 5, 7, 11, 13]\n\
    \    for n in num\n        if n in \"2 3 5 7 B D\".split()\n            cnt +=\
    \ 1\n        end\n    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplc7oidd4.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmplc7oidd4.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplc7oidd4.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplc7oidd4.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplc7oidd4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmplc7oidd4.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplc7oidd4.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplc7oidd4.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplc7oidd4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmplc7oidd4.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplc7oidd4.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplc7oidd4.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplc7oidd4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplc7oidd4.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    c = 0\n    for i in num\n        if in(\"\
    2357BD\", i) c += 1\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjr8l4r46.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjr8l4r46.jl:1\n\
    in expression starting at /tmp/tmpjr8l4r46.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key::Int64 = 0\n    list_prime = [\"2\",\"\
    3\",\"5\",\"7\",\"B\",\"D\"]\n    for x in num\n        if x in list_prime\n \
    \           key += 1\n        end\n    end\n    return key\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1zw35bna.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1zw35bna.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1zw35bna.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1zw35bna.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1zw35bna.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1zw35bna.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1zw35bna.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1zw35bna.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1zw35bna.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1zw35bna.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1zw35bna.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1zw35bna.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp1zw35bna.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1zw35bna.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hexnum = 0x10\n    count = 0\n    prime =\
    \ [2,3,5,7,11,13]\n    for j in 1:length(num)\n        if num[j] == 'A'\n    \
    \        num[j] = '10'\n        elseif num[j] == 'B'\n            num[j] = '11'\n\
    \        elseif num[j] == 'C'\n            num[j] = '12'\n        elseif num[j]\
    \ == 'D'\n            num[j] = '13'\n        elseif num[j] == 'E'\n          \
    \  num[j] = '14'\n        elseif num[j] == 'F'\n            num[j] = '15'\n  \
    \      end\n    end\n    for i in 1:length(num)\n        hexnum = parse(Int64,num[i])\n\
    \        for k in 1:length(prime)\n            if hexnum == prime[k]\n       \
    \         count += 1\n            end\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzxjgg3eu.jl:24\nin expression\
    \ starting at /tmp/tmpzxjgg3eu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    HexDigits = 0\n    c = 0\n    for i=1:length(num)\n\
    \        if in(num[i],[\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]) == true\n       \
    \     c += 1\n        end\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwzzvjvq4.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwzzvjvq4.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwzzvjvq4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwzzvjvq4.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwzzvjvq4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwzzvjvq4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwzzvjvq4.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwzzvjvq4.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwzzvjvq4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwzzvjvq4.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwzzvjvq4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwzzvjvq4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwzzvjvq4.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwzzvjvq4.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if length(num) == 0\n        return 0\n  \
    \  end\n    hex_nums = [0,1,2,3,4,5,6,7,8,9,\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"\
    ]\n    prime_hex_nums = [2,3,5,7,\"B\",\"D\"]\n    counter = 0\n    for i in eachindex(num)\n\
    \        if num[i] in prime_hex_nums\n            counter += 1\n        end\n\
    \    end\n    return counter\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\
    \t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"\
    123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk89mpoio.jl:37\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk89mpoio.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk89mpoio.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpk89mpoio.jl:38\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk89mpoio.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk89mpoio.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpk89mpoio.jl:39\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk89mpoio.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk89mpoio.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpk89mpoio.jl:40\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk89mpoio.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk89mpoio.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpk89mpoio.jl:41\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk89mpoio.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"\
    ]\n    cnt = 0\n    for i in 1:length(num)\n        for j in 1:length(key)\n \
    \           if num[i] == key[j]\n                cnt += 1\n            end\n \
    \       end\n    end\n    return cnt\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg6z0gibm.jl:35\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6z0gibm.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6z0gibm.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpg6z0gibm.jl:36\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6z0gibm.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6z0gibm.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpg6z0gibm.jl:37\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6z0gibm.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6z0gibm.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpg6z0gibm.jl:38\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6z0gibm.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6z0gibm.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpg6z0gibm.jl:39\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6z0gibm.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    arr = split(num,\
    \ \"\")\n    count = 0\n    hex = \"0123456789ABCDEF\"\n    for i = 1:length(arr)\n\
    \        if string(arr[i]) in hex\n            if parse(Int64, arr[i]) in primes\n\
    \                count += 1\n            end\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp989uvolu.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmp989uvolu.jl:24\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp989uvolu.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp989uvolu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp989uvolu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  use occursin(x, y) for string containment\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmp989uvolu.jl:24\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp989uvolu.jl:38 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp989uvolu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp989uvolu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(#unused#::String,\
    \ #unused#::String)\n     @ Base ./strings/search.jl:638\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmp989uvolu.jl:24\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp989uvolu.jl:39 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp989uvolu.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    c = 0\n    for i = 1:length(num)\n       \
    \ if num[i] == '2'\n            c += 1\n        elseif num[i] == '3'\n       \
    \     c += 1\n        elseif num[i] == '5'\n            c += 1\n        elseif\
    \ num[i] == '7'\n            c += 1\n        elseif num[i] == 'B'\n          \
    \  c += 1\n        elseif num[i] == 'D'\n            c += 1\n        end\n   \
    \ end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # String -> Int\n    # your_func(\"AB\") should\
    \ be 1\n    # your_func(\"1077E\") should be 2\n    # your_func(\"ABED1A33\")\
    \ should be 4\n    # your_func(\"123456789ABCDEF0\") should be 6\n    # your_func(\"\
    2020\") should be 2\n    # your_func(\"\") should be 0\n    \n    # place your\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2f5of2wh.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2f5of2wh.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2f5of2wh.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2f5of2wh.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp2f5of2wh.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2f5of2wh.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2f5of2wh.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2f5of2wh.jl:33\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2f5of2wh.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = count(x->in(x,[\"2\",\"3\",\"5\",\"7\"\
    ,\"B\",\"D\"]),num)\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqo0osntl.jl:27\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqo0osntl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqo0osntl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqo0osntl.jl:28\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqo0osntl.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqo0osntl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqo0osntl.jl:29\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqo0osntl.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqo0osntl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqo0osntl.jl:30\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqo0osntl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqo0osntl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqo0osntl.jl:31\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqo0osntl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,13\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpioqam4jd.jl:20\nin expression starting at\
    \ /tmp/tmpioqam4jd.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = 0\n    for i = 1:length(num)\n       \
    \ n += isprime(parse(Int64,num[i],base=16))\n    end\n    return n\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3atyypce.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp3atyypce.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3atyypce.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3atyypce.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3atyypce.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp3atyypce.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3atyypce.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3atyypce.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3atyypce.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp3atyypce.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3atyypce.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3atyypce.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3atyypce.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp3atyypce.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3atyypce.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in num\n        if i\
    \ == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n       \
    \     count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hexx = Dict(\"A\"=>10,\"B\"=>11,\"C\"=>12,\"\
    D\"=>13,\"E\"=>14,\"F\"=>15)\n    if length(num) == 0\n        return 0\n    end\n\
    \    if iskey(hexx,num[1])\n        return 1 + hex_key(num[2:end])\n    else\n\
    \        return hex_key(num[2:end])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9kqw0c3w.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: iskey not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp9kqw0c3w.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9kqw0c3w.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9kqw0c3w.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp9kqw0c3w.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: iskey not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp9kqw0c3w.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9kqw0c3w.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9kqw0c3w.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp9kqw0c3w.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: iskey not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp9kqw0c3w.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9kqw0c3w.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9kqw0c3w.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp9kqw0c3w.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: iskey not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp9kqw0c3w.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9kqw0c3w.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    m = 0\n    for i in num\n        if i in ['2','3','5','7','B','D']\n\
    \            m += 1\n        end\n    end\n    return m\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    return\
    \ length(filter(x -> contains(primes, parse(Int64, x)), num))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpskr6elyq.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n   [1] parse(::Type{Int64}, c::Char; base::Int64)\n    \
    \ @ Base ./parse.jl:46\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] (::var\"\
    #1#2\"{Vector{Int64}})(x::Char)\n     @ Main /tmp/tmpskr6elyq.jl:20\n   [4] filter(f::var\"\
    #1#2\"{Vector{Int64}}, s::String)\n     @ Base ./strings/substring.jl:246\n  \
    \ [5] hex_key(num::String)\n     @ Main /tmp/tmpskr6elyq.jl:20\n   [6] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpskr6elyq.jl:27 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpskr6elyq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpskr6elyq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching contains(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{Vector{Int64}})(x::Char)\n     @ Main /tmp/tmpskr6elyq.jl:20\n\
    \   [2] filter(f::var\"#1#2\"{Vector{Int64}}, s::String)\n     @ Base ./strings/substring.jl:246\n\
    \   [3] hex_key(num::String)\n     @ Main /tmp/tmpskr6elyq.jl:20\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpskr6elyq.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpskr6elyq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpskr6elyq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  ArgumentError: invalid base 10 digit 'A'\n \
    \ Stacktrace:\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpskr6elyq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    number = parse(Int64, num, radix=16)\n   \
    \ primes = [2, 3, 5, 7, 11, 13]\n    return sum(i -> (number % i == 0) * 1, primes)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp508s08qi.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::String; radix=16)\n  Closest candidates are:\n    parse(::Type{T}, ::AbstractString;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\
    \ got unsupported keyword argument \"radix\"\n    parse(::Type{T}, ::AbstractString;\
    \ kwargs...) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:379\n\
    \    parse(!Matched::Type{T}, ::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\
    \ got unsupported keyword argument \"radix\"\n    ...\n  Stacktrace:\n   [1] kwerr(::NamedTuple{(:radix,),\
    \ Tuple{Int64}}, ::Function, ::Type, ::String)\n     @ Base ./error.jl:163\n \
    \  [2] hex_key(num::String)\n     @ Main /tmp/tmp508s08qi.jl:19\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp508s08qi.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp508s08qi.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp508s08qi.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::String; radix=16)\n  Closest candidates are:\n    parse(::Type{T}, ::AbstractString;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\
    \ got unsupported keyword argument \"radix\"\n    parse(::Type{T}, ::AbstractString;\
    \ kwargs...) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:379\n\
    \    parse(!Matched::Type{T}, ::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\
    \ got unsupported keyword argument \"radix\"\n    ...\n  Stacktrace:\n   [1] kwerr(::NamedTuple{(:radix,),\
    \ Tuple{Int64}}, ::Function, ::Type, ::String)\n     @ Base ./error.jl:163\n \
    \  [2] hex_key(num::String)\n     @ Main /"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp508s08qi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    c = 0\n    for i = 1:length(num)\n       \
    \ if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || \n  \
    \          num[i] == 'B' || num[i] == 'D'\n            c += 1\n        end\n \
    \   end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_prime_count = 0\n    for c in num\n  \
    \      c_hex = parse(Int64,c,radix=16)\n        if c_hex % 2 != 0 && c_hex % 3\
    \ != 0 && c_hex % 5 != 0 && c_hex % 7 != 0 && c_hex % 11 != 0 && c_hex % 13 !=\
    \ 0\n            hex_prime_count += 1\n        end\n    end\n    return hex_prime_count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp04yvbzfd.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::Char; radix=16)\n  Closest candidates are:\n    parse(::Type{T}, ::AbstractChar;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\
    \ got unsupported keyword argument \"radix\"\n    parse(::Type{T}, !Matched::AbstractString;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\
    \ got unsupported keyword argument \"radix\"\n    parse(::Type{T}, !Matched::AbstractString;\
    \ kwargs...) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:379\n\
    \  Stacktrace:\n   [1] kwerr(::NamedTuple{(:radix,), Tuple{Int64}}, ::Function,\
    \ ::Type, ::Char)\n     @ Base ./error.jl:163\n   [2] hex_key(num::String)\n \
    \    @ Main /tmp/tmp04yvbzfd.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp04yvbzfd.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp04yvbzfd.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp04yvbzfd.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::Char; radix=16)\n  Closest candidates are:\n    parse(::Type{T}, ::AbstractChar;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\
    \ got unsupported keyword argument \"radix\"\n    parse(::Type{T}, !Matched::AbstractString;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\
    \ got unsupported keyword argument \"radix\"\n    parse(::Type{T}, !Matched::AbstractString;\
    \ kwargs...) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:379\n\
    \  Stacktrace:\n   [1] kwerr(::NamedTuple{(:radix,), Tuple{Int64}}, ::Function,\
    \ ::Type, ::Char)\n     @ Base ./error.jl:163\n   [2] hex_key(num::String)\n \
    \    @ Main /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp04yvbzfd.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i = 1:length(num)\n   \
    \     ch = num[i]\n        if ch == '2' || ch == '3' || ch == '5' || ch == '7'\n\
    \            count += 1\n        elseif ch == 'B' || ch == 'D'\n            count\
    \ += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n  count=0\n  for i in num\n    if i == '2' ||\
    \ i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D'\n      count += 1\n\
    \    end\n  end\n  return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    #   primes = [2, 3, 5, 7, 11, 13]\n    # \
    \  prime_num = 0 \n    #   for i in primes \n    #       for j in 1:length(num)\n\
    \    #           num_arr = char.(num)\n    #           if (num_arr[j] == i) \n\
    \    #               prime_num = prime_num + 1\n    #           end\n    #   \
    \    end\n    #   end\n    #   prime_num\n    # end\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeq3lylw0.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeq3lylw0.jl:1\n\
    in expression starting at /tmp/tmpeq3lylw0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num in [\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]\n        return 1\n    else\n        return 0\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvvqnv7jl.jl:30\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvvqnv7jl.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvvqnv7jl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvvqnv7jl.jl:31\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvvqnv7jl.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvvqnv7jl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvvqnv7jl.jl:32\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvvqnv7jl.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvvqnv7jl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvvqnv7jl.jl:33\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvvqnv7jl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvvqnv7jl.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvvqnv7jl.jl:34\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvvqnv7jl.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    res = 0 \n    for i in num\n        if i ==\
    \ '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D' \n         \
    \   res = res + 1\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    number = [i for i in num]\n    prime = \"\
    0, 1, 2, 3, 5, 7, B, D\"\n    primes = [i for i in prime]\n    count = 0\n   \
    \ for i in number\n        if i in primes\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpenaxzs1n.jl:36\n  Expression: candidate(\"\
    1077E\") == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpenaxzs1n.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpenaxzs1n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpenaxzs1n.jl:37\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpenaxzs1n.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpenaxzs1n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpenaxzs1n.jl:38\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpenaxzs1n.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpenaxzs1n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpenaxzs1n.jl:39\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpenaxzs1n.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpenaxzs1n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpenaxzs1n.jl:40\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 16 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpenaxzs1n.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    ##for i \u2208 1:length(num)\n    primes =\
    \ 0 \n    for i in num \n        if i in \"2357BDF\"\n            primes += 1\n\
    \        end\n    end\n    return primes\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplo0a_zs2.jl:37\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplo0a_zs2.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplo0a_zs2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmplo0a_zs2.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplo0a_zs2.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplo0a_zs2.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplo0a_zs2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = 0\n    for i in 1:length(num)\n      \
    \  if num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i]\
    \ == 'B' || num[i] == 'D'\n            n += 1\n        end\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    digits\
    \ = Dict(\"0\"=> 0, \"1\"=> 1, \"2\"=> 2, \"3\"=> 3, \"4\"=> 4, \"5\"=> 5, \"\
    6\"=> 6, \n        \"7\"=> 7, \"8\"=> 8, \"9\"=> 9, \"A\"=> 10, \"B\"=> 11, \"\
    C\"=> 12, \"D\"=> 13, \n        \"E\"=> 14, \"F\"=> 15)\n    matches = 0\n   \
    \ for c in num\n        if digits[c] in primes\n            matches += 1\n   \
    \     end\n    end\n    return matches\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkbbxajwx.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpkbbxajwx.jl:25\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkbbxajwx.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkbbxajwx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpkbbxajwx.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpkbbxajwx.jl:25\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkbbxajwx.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkbbxajwx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpkbbxajwx.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpkbbxajwx.jl:25\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkbbxajwx.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkbbxajwx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpkbbxajwx.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkbbxajwx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return sum(c in [\"2\",\"3\",\"5\",\"7\",\"\
    B\",\"D\"] for c in num)\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt009v7j7.jl:26\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt009v7j7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt009v7j7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt009v7j7.jl:27\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt009v7j7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt009v7j7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt009v7j7.jl:28\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt009v7j7.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt009v7j7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt009v7j7.jl:29\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt009v7j7.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt009v7j7.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt009v7j7.jl:30\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt009v7j7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    return length(intersect(primes,\
    \ num))\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9by_m9oa.jl:30\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9by_m9oa.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9by_m9oa.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9by_m9oa.jl:31\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9by_m9oa.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9by_m9oa.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9by_m9oa.jl:32\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9by_m9oa.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9by_m9oa.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9by_m9oa.jl:33\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9by_m9oa.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9by_m9oa.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp9by_m9oa.jl:34\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9by_m9oa.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # create hex keys from 0 to 15\n    hex_values\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    # create a range of 10 to 15\n  \
    \  first_ten = 10:15\n    # create a vector of hex digits that represent prime\
    \ numbers\n    prime_hex = []\n    # loop over the first ten elements of the hex\
    \ keys\n    for i = 10:length(hex_values)\n        # if the elements are prime\n\
    \        if isprime(i) == true\n            # push that element onto the prime_hex\
    \ array\n            push!(prime_hex, hex_values[i])\n        end\n    end\n \
    \   # create a counter for the prime hex digits\n    counter = 0\n    # loop over\
    \ the string num\n    for i = 1:length(num)\n        # if the ith character is\
    \ in the prime_hex array\n        if num[i] in prime_hex\n            # increment\
    \ the counter\n            counter += 1\n        end\n    end\n    # return the\
    \ counter\n    return counter\nend\n\"\"\"You are given a decimal number, a string\
    \ of digits. \n    The program must return a string of numbers representing the\
    \ binary \n    equivalent of the decimal number. This can be achieved by using\
    \ the \n    built-in function bin() i.e bin(int(n)).\n    Examples:\n    For inputString\
    \ = \"2\" outputString = \"10\"\n    For inputString = \"3\" outputString = \"\
    11\"\n    For inputString = \"4\" outputString = \"100\"\n    For inputString\
    \ = \"5\" outputString = \"101\"\n    For inputString = \"6\" outputString = \"\
    110\"\n    For inputString = \"7\" outputString = \"111\"\n    For inputString\
    \ = \"8\" outputString = \"1000\"\n    For inputString = \"9\" outputString =\
    \ \"1001\"\n    For inputString = \"10\" outputString = \"1010\"\n    For inputString\
    \ = \"11\" outputString = \"1011\"\n    For inputString = \"12\" outputString\
    \ = \"1100\"\n    For inputString = \"13\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_ed7vpa.jl:46\nin expression starting at\
    \ /tmp/tmpc_ed7vpa.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num in [\"A\",\"B\",\"C\",\"D\",\"E\",\"\
    F\"]\n        return 2\n    elseif num in [\"2\",\"3\",\"5\",\"7\"]\n        return\
    \ 3\n    else\n        return 0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfis2bkk8.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfis2bkk8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfis2bkk8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfis2bkk8.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfis2bkk8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfis2bkk8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfis2bkk8.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfis2bkk8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfis2bkk8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfis2bkk8.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfis2bkk8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfis2bkk8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfis2bkk8.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfis2bkk8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    total_digits = sum(is_prime(parse(Int64,digit))\
    \ for digit in digits(num))\n    return total_digits\nend\nprintln(hex_key(\"\
    1B\"))\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching digits(::String)\nClosest\
    \ candidates are:\n  digits(!Matched::Integer; base, pad) at /shared/centos7/julia/1.7.3/share/julia/base/intfuncs.jl:854\n\
    \  digits(!Matched::Type{<:Integer}, !Matched::Integer; base, pad) at /shared/centos7/julia/1.7.3/share/julia/base/intfuncs.jl:857\n\
    Stacktrace:\n [1] hex_key(num::String)\n   @ Main /tmp/tmpzlvo0495.jl:19\n [2]\
    \ top-level scope\n   @ /tmp/tmpzlvo0495.jl:22\nin expression starting at /tmp/tmpzlvo0495.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_list = [ 2  3  5  7  11 13]\n    prime_counter\
    \ = 0\n    for letter in num\n        if letter in \"0123456789ABCDEF\"\n    \
    \        if parse(Int, letter) in hex_list\n                prime_counter += 1\n\
    \            end\n        end\n    end\n    return prime_counter\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcjmwmcul.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n   [1] parse(::Type{Int64}, c::Char; base::Int64)\n    \
    \ @ Base ./parse.jl:46\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmpcjmwmcul.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpcjmwmcul.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpcjmwmcul.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcjmwmcul.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  ArgumentError: invalid base 10 digit 'E'\n  Stacktrace:\n\
    \   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base ./parse.jl:46\n\
    \   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n \
    \    @ Main /tmp/tmpcjmwmcul.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpcjmwmcul.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpcjmwmcul.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpcjmwmcul.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  ArgumentError: invalid base 10 digit 'A'\n \
    \ Stacktrace:\n   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base\
    \ ./parse.jl:46\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmpcjmwmcul.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpcjmwmcul.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcjmwmcul.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    #your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpynrt36jh.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpynrt36jh.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpynrt36jh.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpynrt36jh.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpynrt36jh.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpynrt36jh.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpynrt36jh.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpynrt36jh.jl:25\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpynrt36jh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n  const hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n  const primes\
    \ = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n  count = 0\n  for i in 1:length(num)\n\
    \    for j in 1:length(primes)\n      if num[i] == primes[j]\n        count +=\
    \ 1\n      end\n    end\n  end\n  return count\nend\n \n \n \n\"\"\"You have been\
    \ tasked to write a function that receives a list of strings, \n    and returns\
    \ a list of lists of strings with anagrams joined.\n    The input list consists\
    \ of unique strings sorted lexicographically.\n    For example:\n    For words\
    \ = [\"code\", \"doce\", \"ecod\", \"framer\", \"frame\"] the output should be\n\
    \    [[\"code\", \"doce\", \"ecod\"], [\"frame\", \"framer\"]]\n    For words\
    \ = [\"apple\", \"banana\", \"cucumber\", \"date\", \"eggplant\", \"fig\"] \n\
    \    the output should be\n    [[\"apple\"], [\"banana\"], [\"cucumber\"], [\"\
    date\"], [\"eggplant\"], [\"fig\"]]\n    For words = [\"potato\", \"tomato\",\
    \ \"banana\", \"cucumber\", \"apple\", \"eggplant\", \n    \"fig\", \"frame\"\
    , \"framer\", \"date\", \"ecod\", \"doce\", \"code\"] \n    the output should\
    \ be\n    [[\"apple\"], [\"banana\"], [\"cucumber\"], [\"date\"], [\"eggplant\"\
    ], [\"fig\"], \n    [\"frame\", \"framer\"], [\"code\", \"doce\", \"ecod\"], [\"\
    potato\"], [\"tomato\"]]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unsupported `const` declaration on local variable\
    \ around /tmp/tmpvszomf1o.jl:19\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvszomf1o.jl:1\n\
    in expression starting at /tmp/tmpvszomf1o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    return\
    \ sum( is_prime(digit) for digit in num if digit in hex_digits )\nend\n    \n\
    \    \n    \"\"\"You are given 2 strings s and r of equal length consisting of\
    \ \n    letters \"x\" and \"o\". Your task is to find the minimum number of \n\
    \    operations needed to transform s to r. The operation is as follows:\n   \
    \ Pick any 2 adjacent \"x\" in s and replace them with \"o\". Note that you \n\
    \    can only pick \"x\"s that are adjacent to each other.\n    Example\n    For\
    \ s = \"xoxxoxo\" and r = \"oooxooo\", the output should be\n    transform(s,\
    \ r) = 3.\n    You can get r by applying the following 3 transformations:\n  \
    \  \"xoxxoxo\" -> \"xoxoxoo\" -> \"xoxoooo\" -> \"oooxooo\".\n    Input/Output\n\
    \    [input] string s\n    The first string.\n    Guaranteed constraints:\n  \
    \  1 \u2264 s.length \u2264 10.\n    [input] string r\n    The second string.\n\
    \    Guaranteed constraints:\n    r.length = s.length.\n    [output] integer\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpt39mfq8c.jl:24\nin expression starting at /tmp/tmpt39mfq8c.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    c = 0\n    for i in num\n        if(i in [\"\
    2\",\"3\",\"5\",\"7\",\"B\",\"D\"])\n            c += 1\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl70mz_uk.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl70mz_uk.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl70mz_uk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl70mz_uk.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl70mz_uk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl70mz_uk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl70mz_uk.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl70mz_uk.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl70mz_uk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl70mz_uk.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl70mz_uk.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl70mz_uk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpl70mz_uk.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl70mz_uk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    total = 0\n    count = 0\n    for i in num\n\
    \        if i in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n\
    \        end\n    end\n    total += count\n    return total\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgoreqnsh.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgoreqnsh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgoreqnsh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgoreqnsh.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgoreqnsh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgoreqnsh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgoreqnsh.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgoreqnsh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgoreqnsh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgoreqnsh.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgoreqnsh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgoreqnsh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpgoreqnsh.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgoreqnsh.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    number = 0\n    for i in num\n        number\
    \ += findfirst(primes, i) != nothing ? 1 : 0\n    end\n    return number\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc6c8a7v_.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: primes not defined\n \
    \ Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpc6c8a7v_.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc6c8a7v_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc6c8a7v_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpc6c8a7v_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpc6c8a7v_.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc6c8a7v_.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc6c8a7v_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpc6c8a7v_.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpc6c8a7v_.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc6c8a7v_.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc6c8a7v_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpc6c8a7v_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: primes not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpc6c8a7v_.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc6c8a7v_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    total = 0\n    key = Set(\"2357BD\")\n   \
    \ for i in 1:length(num)\n        if num[i] in key\n            total += 1\n \
    \       end\n    end\n    return total\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = length(num)\n    hex_primes = [2, 3, 5,\
    \ 7, 11, 13]\n    c = 0\n    for i in 1:n\n        val = string(num[i])\n    \
    \    if val in hex_primes\n            c += 1\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0pf_29wo.jl:35\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0pf_29wo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0pf_29wo.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0pf_29wo.jl:36\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0pf_29wo.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0pf_29wo.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0pf_29wo.jl:37\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0pf_29wo.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0pf_29wo.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0pf_29wo.jl:38\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0pf_29wo.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0pf_29wo.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0pf_29wo.jl:39\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0pf_29wo.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    digits\
    \ = [0:9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    n = map(x -> findfirst(digits\
    \ .== x), collect(num))\n    sum(map(x -> findfirst(primes .== x), n))\nend\n\
    num = \"AB\"\nprintln(hex_key(num))\nnum = \"1077E\"\nprintln(hex_key(num))\n\
    num = \"ABED1A33\"\nprintln(hex_key(num))\nnum = \"123456789ABCDEF0\"\nprintln(hex_key(num))\n\
    num = \"2020\"\nprintln(hex_key(num))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: None
  stderr: "b'ERROR: LoadError: MethodError: no method matching +(::Nothing, ::Nothing)'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = 0\n    for i = 1:length(num)\n       \
    \ if num[i] in '2357BD'\n            n += 1\n        end\n    end\n    return\
    \ n\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpqezja8ea.jl:21\nin expression\
    \ starting at /tmp/tmpqezja8ea.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    \    hex_list = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    hex_prime = [\"2\",\"3\",\"5\",\"7\",\"\
    B\",\"D\"]\n    count = 0\n    for key in hex_list\n        for prime in hex_prime\n\
    \            if prime == key\n                count += 1\n            end\n  \
    \      end\n    end\n    return count\nend\n\"\"\"Another version\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpkuiyqmn8.jl:34\nin expression starting at /tmp/tmpkuiyqmn8.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    total = Int64(0)\n    prime = [\"2\",\"3\"\
    ,\"5\",\"7\",\"B\",\"D\"]\n    for i in num\n        if i in prime\n         \
    \   total += 1\n        end\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwy7mb8bi.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwy7mb8bi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwy7mb8bi.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwy7mb8bi.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwy7mb8bi.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwy7mb8bi.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwy7mb8bi.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwy7mb8bi.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwy7mb8bi.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwy7mb8bi.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwy7mb8bi.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwy7mb8bi.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwy7mb8bi.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwy7mb8bi.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    set = Set([2,3,5,7,11,13])\n    return length(setintersect(Set(parse.(Int64,\
    \ num)), set))\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm0jjzl8g.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A' in \"AB\"\n  Stacktrace:\n    [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::String, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n    \
    \  @ Base ./parse.jl:137\n    [2] parse(::Type{Int64}, s::String; base::Nothing)\n\
    \      @ Base ./parse.jl:241\n    [3] parse\n      @ ./parse.jl:241 [inlined]\n\
    \    [4] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [5] _broadcast_getindex\n      @ ./broadcast.jl:653 [inlined]\n    [6] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [7] copy\n      @ ./broadcast.jl:875\
    \ [inlined]\n    [8] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [9]\
    \ hex_key(num::String)\n      @ Main /tmp/tmpm0jjzl8g.jl:20\n   [10] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpm0jjzl8g.jl:27 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpm0jjzl8g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm0jjzl8g.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  ArgumentError: invalid base 10 digit 'E' in \"\
    1077E\"\n  Stacktrace:\n    [1] tryparse_internal(#unused#::Type{Int64}, s::String,\
    \ startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n      @ Base ./parse.jl:137\n\
    \    [2] parse(::Type{Int64}, s::String; base::Nothing)\n      @ Base ./parse.jl:241\n\
    \    [3] parse\n      @ ./parse.jl:241 [inlined]\n    [4] _broadcast_getindex_evalf\n\
    \      @ ./broadcast.jl:670 [inlined]\n    [5] _broadcast_getindex\n      @ ./broadcast.jl:653\
    \ [inlined]\n    [6] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [7] copy\n\
    \      @ ./broadcast.jl:875 [inlined]\n    [8] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [9] hex_key(num::String)\n      @ Main /tmp/tmpm0jjzl8g.jl:20\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm0jjzl8g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    p = [\"2\", \"3\", \"5\", \"7\", \"B\", \"\
    D\"]\n    n = length(num)\n    m = 0\n    for i = 1:n\n        if num[i] in p\n\
    \            m += 1\n        end\n    end\n    return m\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmggn06fc.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmggn06fc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmggn06fc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmggn06fc.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmggn06fc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmggn06fc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmggn06fc.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmggn06fc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmggn06fc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmggn06fc.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmggn06fc.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmggn06fc.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpmggn06fc.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmggn06fc.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    x = Int64(num, 16)\n    return number_of_primes(x)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk2r_jese.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching Int64(::String,\
    \ ::Int64)\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpk2r_jese.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2r_jese.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk2r_jese.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk2r_jese.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching Int64(::String,\
    \ ::Int64)\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpk2r_jese.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2r_jese.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk2r_jese.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk2r_jese.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  MethodError: no method matching Int64(::String,\
    \ ::Int64)\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpk2r_jese.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2r_jese.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk2r_jese.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk2r_jese.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  MethodError: no method matching Int64(::String,\
    \ ::Int64)\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpk2r_jese.jl:19\n\
    \   [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk2r_jese.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    digits = [\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"]\n    m = length(num)\n    count = 0\n    for i = 1:m\n        if any(num[i]\
    \ == k for k in digits)\n            count += 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0bb81vlh.jl:34\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0bb81vlh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0bb81vlh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0bb81vlh.jl:35\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0bb81vlh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0bb81vlh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0bb81vlh.jl:36\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0bb81vlh.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0bb81vlh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0bb81vlh.jl:37\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0bb81vlh.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0bb81vlh.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0bb81vlh.jl:38\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0bb81vlh.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hexa_digits = Set([\"0\",\"1\",\"2\",\"3\"\
    ,\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"])\n \
    \   to_count = Set([\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"])\n    sum = 0\n    for\
    \ i in num\n        if i in hexa_digits\n            if i in to_count\n      \
    \          sum += 1\n            end\n        end\n    end\n    return sum\nend\n\
    num = \"123456789ABCDEF0\"\nhex_key(num)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqq7uh_cb.jl:38\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq7uh_cb.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq7uh_cb.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqq7uh_cb.jl:39\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq7uh_cb.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq7uh_cb.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqq7uh_cb.jl:40\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq7uh_cb.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq7uh_cb.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqq7uh_cb.jl:41\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqq7uh_cb.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqq7uh_cb.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqq7uh_cb.jl:42\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqq7uh_cb.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key_table = Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"\
    3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"=>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"\
    C\"=>12,\"D\"=>13,\"E\"=>14,\"F\"=>15)\n    count = 0\n    for ch in num\n   \
    \     if key_table[ch] == 2 || key_table[ch] == 3 || key_table[ch] == 5 || key_table[ch]\
    \ == 7 || key_table[ch] == 11 || key_table[ch] == 13\n            count += 1\n\
    \        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr38tf7vp.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpr38tf7vp.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr38tf7vp.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr38tf7vp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpr38tf7vp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpr38tf7vp.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr38tf7vp.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr38tf7vp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpr38tf7vp.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpr38tf7vp.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr38tf7vp.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr38tf7vp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpr38tf7vp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr38tf7vp.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = length(num) \n    result = 0\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptod68kd0.jl:28\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptod68kd0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptod68kd0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptod68kd0.jl:29\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptod68kd0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptod68kd0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptod68kd0.jl:30\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptod68kd0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptod68kd0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptod68kd0.jl:31\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptod68kd0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptod68kd0.jl:27\ntest set: Test\
    \ Failed at /tmp/tmptod68kd0.jl:32\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptod68kd0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp__w_evwp.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp__w_evwp.jl:1\n\
    in expression starting at /tmp/tmp__w_evwp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = length(num)\n    res = 0\n    for i in\
    \ 1:n\n        for j in 1:n\n            for k in 1:n\n                for l in\
    \ 1:n\n                    for m in 1:n\n                        for o in 1:n\n\
    \                            str = num[i]*num[j]*num[k]*num[l]*num[m]*num[o]\n\
    \                            if str in [\"B\",\"D\",\"2\",\"3\",\"5\",\"7\"]\n\
    \                                res += 1\n                            end\n \
    \                       end\n                    end\n                end\n  \
    \          end\n        end\n    end\n    return res\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpq46zbsmy.jl:44\\n  Expression: candidate(\"\
    AB\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\\\
    n [2] macro expansion\\n   @ /tmp/tmpq46zbsmy.jl:44 [inlined]\\n [3] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpq46zbsmy.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpq46zbsmy.jl:45\\n  Expression: candidate(\"1077E\") == 2\\\
    n   Evaluated: 0 == 2\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpq46zbsmy.jl:45 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpq46zbsmy.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpq46zbsmy.jl:46\\n  Expression: candidate(\"ABED1A33\") ==\
    \ 4\\n   Evaluated: 0 == 4\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpq46zbsmy.jl:46 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpq46zbsmy.jl:43\\ntest set: Test\
    \ Failed at /tmp/tmpq46zbsmy.jl:47\\n  Expression: candidate(\"2020\") == 2\\\
    n   Evaluated: 0 == 2\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpq46zbsmy.jl:47 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpq46zbsmy.jl:43\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    arr = [('0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')]\n    arr2 = [2, 3, 5, 7, 11, 13]\n\
    \    count = 0\n    for n in 1:length(num)\n        a = (num[n])\n        for\
    \ i in 1:length(arr)\n            if a == arr[i]\n                if (i % 2 ==\
    \ 0)\n                    count += 1\n                end\n            end\n \
    \       end\n    end\n    return count\nend\nhex_key(\"AB\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpylx2q6jj.jl:40\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylx2q6jj.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylx2q6jj.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpylx2q6jj.jl:41\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylx2q6jj.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylx2q6jj.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpylx2q6jj.jl:42\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylx2q6jj.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylx2q6jj.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpylx2q6jj.jl:43\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylx2q6jj.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylx2q6jj.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpylx2q6jj.jl:44\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpylx2q6jj.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    res = 0\n    for i in num \n        if i in\
    \ [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"] \n            res += 1\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqzk6s9d8.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzk6s9d8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzk6s9d8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzk6s9d8.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzk6s9d8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzk6s9d8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzk6s9d8.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzk6s9d8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzk6s9d8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzk6s9d8.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqzk6s9d8.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqzk6s9d8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzk6s9d8.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqzk6s9d8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for c in num\n        if c\
    \ in \"2357BD\"\n            count += 1\n        end\n    end\n    return count\n\
    end\nprintln(hex_key(\"1077E\"))\nusing Test\n\n@testset begin\n\ncandidate =\
    \ hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\
    \t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"\
    123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "2\nTest Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    #using Sets\n    #symbols = Set('ABCDEF')\n\
    \    #primes = Set('2357BD')\n    #key = symbols \u2229 primes\n    #return length(intersect(key,Set(num)))\n\
    \    \n    #Using Regex\n    rx = r\"[2357BD]\"\n    matches = matchall(rx, num)\n\
    \    return length(matches)\nend\n \n#Function returns a string with numbers that\
    \ are the keys to an alphabet\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpayfea7zh.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: matchall not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpayfea7zh.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpayfea7zh.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpayfea7zh.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpayfea7zh.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: matchall not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpayfea7zh.jl:28\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpayfea7zh.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpayfea7zh.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpayfea7zh.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: matchall not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpayfea7zh.jl:28\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpayfea7zh.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpayfea7zh.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpayfea7zh.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: matchall not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpayfea7zh.jl:28\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpayfea7zh.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    digits = \"0123456789ABCDEF\"\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    return length([d for d in num if d in digits[primes]])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp50ndu54p.jl:29\n  Expression: candidate(\"\
    1077E\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50ndu54p.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50ndu54p.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp50ndu54p.jl:30\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp50ndu54p.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp50ndu54p.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp50ndu54p.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    prime_key = 0\n    for s in num\n        if\
    \ s == '0' || s == '1' || s == '7' || s == 'B' || s == 'D' || s == 'F'\n     \
    \       prime_key += 1\n        end\n    end\n    return prime_key\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6l3ths_b.jl:33\n  Expression: candidate(\"\
    1077E\") == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6l3ths_b.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6l3ths_b.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6l3ths_b.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 3 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6l3ths_b.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6l3ths_b.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6l3ths_b.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    prime_letters\
    \ = [\"B\", \"D\"]\n    primes_string = string(primes)\n    i = 1\n    #To have\
    \ it run under the range of the length of the string\n    while i < length(num)\n\
    \        for digit in num\n            for prime in primes\n                #To\
    \ have it run under the range of the length of the primes\n                for\
    \ j in range(1,length(primes))\n                    if prime == digit\n      \
    \                  i += 1\n                    end\n                end\n    \
    \        end\n            for letter in prime_letters\n                if letter\
    \ == digit\n                    i += 1\n                end\n            end\n\
    \        end\n    end\n    return i\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_number=Dict(\"0\"=>0,\"1\"=>1,\"2\"=>2,\"\
    3\"=>3,\"4\"=>4,\"5\"=>5,\"6\"=>6,\"7\"=>7,\"8\"=>8,\"9\"=>9,\"A\"=>10,\"B\"=>11,\"\
    C\"=>12,\"D\"=>13,\"E\"=>14,\"F\"=>15)\n    num=collect(num)\n    key=0\n    for\
    \ i in num\n        if (hex_number[i]==2 || hex_number[i]==3 || hex_number[i]==5\
    \ || hex_number[i]==7 || hex_number[i]==11 || hex_number[i]==13)\n           \
    \ key+=1\n        end\n    end\n    return key\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuov6ay1d.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpuov6ay1d.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuov6ay1d.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuov6ay1d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpuov6ay1d.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpuov6ay1d.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuov6ay1d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuov6ay1d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpuov6ay1d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex(h::Dict{String, Int64}, key::Char)\n     @ Base ./dict.jl:481\n\
    \   [2] hex_key(num::String)\n     @ Main /tmp/tmpuov6ay1d.jl:23\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuov6ay1d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuov6ay1d.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpuov6ay1d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuov6ay1d.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return '2' in num || '3' in num || '5' in\
    \ num || '7' in num || 'B' in num || 'D' in num\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpun0l8065.jl:27\n  Expression: candidate(\"\
    1077E\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun0l8065.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun0l8065.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpun0l8065.jl:28\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun0l8065.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun0l8065.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpun0l8065.jl:29\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun0l8065.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun0l8065.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpun0l8065.jl:30\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 1 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun0l8065.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun0l8065.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpun0l8065.jl:31\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inl"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpun0l8065.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for c in num\n        if c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'\n          \
    \  key += 1\n        end\n    end\n    return key\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    a = [\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"]\n    arr = Array{Any}(undef, length(num))\n \
    \   n = length(num)\n    for i in 1:n\n        arr[i] = num[i]\n    end\n    count\
    \ = 0\n    for i in 1:length(arr)\n        if isempty(intersect(arr[i], a))\n\
    \            error(\"Enter valid number\")\n        end\n        if arr[i] in\
    \ primes\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfn3e6mdv.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  Enter valid number\n  Stacktrace:\n \
    \  [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpfn3e6mdv.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfn3e6mdv.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfn3e6mdv.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpfn3e6mdv.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  Enter valid number\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] hex_key(num::String)\n     @ Main /tmp/tmpfn3e6mdv.jl:29\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfn3e6mdv.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfn3e6mdv.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpfn3e6mdv.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  Enter valid number\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] hex_key(num::String)\n     @ Main /tmp/tmpfn3e6mdv.jl:29\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfn3e6mdv.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfn3e6mdv.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpfn3e6mdv.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  Enter valid number\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] hex_key(num::String)\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfn3e6mdv.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for x in num \n        if x in\
    \ ['2','3','5','7','B','D']\n            key += 1\n        end\n    end\n    return\
    \ key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    cnt = 0\n    for digit in num\n        if\
    \ digit in \"02357BDF\"\n            cnt += 1\n        end\n    end\n    return\
    \ cnt\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmux6hz_1.jl:33\n  Expression: candidate(\"\
    1077E\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmux6hz_1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmux6hz_1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmux6hz_1.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmux6hz_1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmux6hz_1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmux6hz_1.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmux6hz_1.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmux6hz_1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmux6hz_1.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 16 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmux6hz_1.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmux6hz_1.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmux6hz_1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    total = 0\n    for i = 1:length(num)\n   \
    \     if elem(num[i], [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"\
    9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"])\n            total += 1\n        end\n\
    \    end\n    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcngkkorr.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: elem not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpcngkkorr.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcngkkorr.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcngkkorr.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcngkkorr.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: elem not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpcngkkorr.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcngkkorr.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcngkkorr.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcngkkorr.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: elem not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpcngkkorr.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcngkkorr.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcngkkorr.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcngkkorr.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: elem not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpcngkkorr.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcngkkorr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = 0\n    i = [0,1,2,3,4,5,6,7,8,9,\"A\"\
    ,\"B\",\"C\",\"D\",\"E\",\"F\"]\n    for j in num\n        if j in i\n       \
    \     n += 1\n        end\n    end\n    return n\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnyeb_2tx.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnyeb_2tx.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnyeb_2tx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnyeb_2tx.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnyeb_2tx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnyeb_2tx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnyeb_2tx.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnyeb_2tx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnyeb_2tx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnyeb_2tx.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnyeb_2tx.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnyeb_2tx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpnyeb_2tx.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnyeb_2tx.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    for h in num\n        key +=\
    \ h == '2' || h == '3' || h == '5' || h == '7' || h == 'B' || h == 'D' ? 1 : 0\n\
    \    end\n    return key\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_list=[\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    if num ==\
    \ \"\"\n        return 0\n    end\n    count=0\n    for i in 1:length(num)\n \
    \       if num[i] in hex_list[10:15]\n            count+=1\n        elseif num[i]\
    \ in hex_list[2:9]\n            if Int(num[i]) % 2 == 1 && Int(num[i]) % 3 !=\
    \ 0 && Int(num[i]) % 5 != 0\n                count+=1\n            end\n     \
    \   end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_6w5pvi9.jl:40\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_6w5pvi9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_6w5pvi9.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_6w5pvi9.jl:41\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_6w5pvi9.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_6w5pvi9.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_6w5pvi9.jl:42\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_6w5pvi9.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_6w5pvi9.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_6w5pvi9.jl:43\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_6w5pvi9.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_6w5pvi9.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_6w5pvi9.jl:44\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_6w5pvi9.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    numbers = [2, 3, 5, 7, 11,\
    \ 13]\n    for i in num\n        if i in numbers\n            count += 1\n   \
    \     end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyrdqef4h.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrdqef4h.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrdqef4h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpyrdqef4h.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrdqef4h.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrdqef4h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpyrdqef4h.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrdqef4h.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrdqef4h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpyrdqef4h.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyrdqef4h.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyrdqef4h.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpyrdqef4h.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyrdqef4h.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = Int[]\n    for n in num\n      \
    \  push!(hex_key, n)\n    end\n    return count_primes(hex_key)\nend\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcy0d8bl3.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: count_primes not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpcy0d8bl3.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy0d8bl3.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy0d8bl3.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpcy0d8bl3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: count_primes not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpcy0d8bl3.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy0d8bl3.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy0d8bl3.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpcy0d8bl3.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: count_primes not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpcy0d8bl3.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy0d8bl3.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy0d8bl3.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpcy0d8bl3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: count_primes not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpcy0d8bl3.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcy0d8bl3.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    keys = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"\
    ]\n    key_count = 0\n    for key in keys\n        key_count += count(num, key)\n\
    \    end\n    return key_count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfd2eddpf.jl:31\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd2eddpf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd2eddpf.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfd2eddpf.jl:32\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd2eddpf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd2eddpf.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfd2eddpf.jl:33\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd2eddpf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd2eddpf.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfd2eddpf.jl:34\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfd2eddpf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfd2eddpf.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfd2eddpf.jl:35\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfd2eddpf.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    x = string(num)\n    res = 0\n    for\
    \ i in x\n        y = string(i)\n        y = parse(Int64, y, 16)\n        if y\
    \ == 2 || y == 3 || y == 5 || y == 7 || y == 11 || y == 13\n            res +=\
    \ 1\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplesc24wt.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::String, ::Int64)\n  Closest candidates are:\n    parse(::Type{T}, ::AbstractString;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    parse(::Type{T}, ::AbstractString; kwargs...) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:379\n\
    \    parse(!Matched::Type{T}, ::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmplesc24wt.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplesc24wt.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplesc24wt.jl:35\ntest set:\
    \ Error During Test at /tmp/tmplesc24wt.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::String, ::Int64)\n  Closest candidates are:\n    parse(::Type{T}, ::AbstractString;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    parse(::Type{T}, ::AbstractString; kwargs...) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:379\n\
    \    parse(!Matched::Type{T}, ::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmplesc24wt.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplesc24wt.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplesc24wt.jl:35\ntest set:\
    \ Error Dur"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplesc24wt.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # your code goes here\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiq_su4s0.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpiq_su4s0.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiq_su4s0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiq_su4s0.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpiq_su4s0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpiq_su4s0.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiq_su4s0.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiq_su4s0.jl:25\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiq_su4s0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = Int(num, 16)\n    count = 0\n    for i\
    \ in 1:10 \n        if i in [2, 3, 5, 7] && isprime(i)\n            count += 1\n\
    \        end\n    end\n    for i in \"ABCDEF\"\n        if i in [:B, :D] && isprime(Int(i))\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpddmiwkad.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching Int64(::String,\
    \ ::Int64)\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpddmiwkad.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpddmiwkad.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpddmiwkad.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpddmiwkad.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching Int64(::String,\
    \ ::Int64)\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpddmiwkad.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpddmiwkad.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpddmiwkad.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpddmiwkad.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  MethodError: no method matching Int64(::String,\
    \ ::Int64)\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpddmiwkad.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpddmiwkad.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpddmiwkad.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpddmiwkad.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  MethodError: no method matching Int64(::String,\
    \ ::Int64)\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpddmiwkad.jl:19\n\
    \   [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpddmiwkad.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    prime_key(parse(Int64, num, base=16)) \nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph2gkg3af.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: prime_key not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmph2gkg3af.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph2gkg3af.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph2gkg3af.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph2gkg3af.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: prime_key not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmph2gkg3af.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph2gkg3af.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph2gkg3af.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph2gkg3af.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: prime_key not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmph2gkg3af.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph2gkg3af.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph2gkg3af.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph2gkg3af.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: prime_key not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmph2gkg3af.jl:19\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2gkg3af.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    i = 0\n    while i < length(num)\n\
    \        n = parse(Int64,num[i])\n        if n == 2 || n == 3 || n == 5 || n ==\
    \ 7 || n == 11 || n == 13\n            count += 1\n        end\n        i += 1\n\
    \    end\n    return count\nend\nprintln(hex_key(\"AB\"))\nprintln(hex_key(\"\
    1077E\"))\nprintln(hex_key(\"ABED1A33\"))\nprintln(hex_key(\"123456789ABCDEF0\"\
    ))\nprintln(hex_key(\"2020\"))\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: BoundsError: attempt to access 2-codeunit String at index\
    \ [0]\nStacktrace:\n [1] checkbounds\n   @ ./strings/basic.jl:216 [inlined]\n\
    \ [2] codeunit\n   @ ./strings/string.jl:102 [inlined]\n [3] getindex\n   @ ./strings/string.jl:223\
    \ [inlined]\n [4] hex_key(num::String)\n   @ Main /tmp/tmpapaoqpke.jl:22\n [5]\
    \ top-level scope\n   @ /tmp/tmpapaoqpke.jl:30\nin expression starting at /tmp/tmpapaoqpke.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num = uppercase(num) # Convert to uppercase\
    \ and assign to num\n    c = 0 # Initialized the counter\n    hexadecimal = [\"\
    0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"\
    D\",\"E\",\"F\"]\n    prime_hexadecimal = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"\
    ] # Prime numbers\n    for i in num\n        # Count the number of prime hexadecimal\
    \ digits\n        if i in prime_hexadecimal\n            c += 1\n        end\n\
    \    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt5wnvq96.jl:36\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5wnvq96.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5wnvq96.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt5wnvq96.jl:37\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5wnvq96.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5wnvq96.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt5wnvq96.jl:38\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5wnvq96.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5wnvq96.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt5wnvq96.jl:39\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5wnvq96.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5wnvq96.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpt5wnvq96.jl:40\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt5wnvq96.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    r = collect(num)\n    ans = 0\n    for i in\
    \ r\n        if i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i\
    \ == 'D'\n            ans += 1\n        end\n    end\n    return ans\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    const hexDigits = [\"0\",\"1\",\"2\",\"3\"\
    ,\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n  \
    \  const primes = [2,3,5,7,11,13]\n    counter::Int64 = 0\n    for digit in num\n\
    \        if digit in hexDigits[10:end]\n            counter += 1\n        else\n\
    \            if digit in hexDigits[1:9]\n                if parse(Int64, digit)\
    \ in primes\n                    counter += 1\n                end\n         \
    \   end\n        end\n    end\n    return counter\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unsupported `const` declaration on local variable\
    \ around /tmp/tmp0ryd9wow.jl:19\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0ryd9wow.jl:1\n\
    in expression starting at /tmp/tmp0ryd9wow.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n  n = 0\n  if num == \"\" \n    return 0\n  end\n\
    \  for i =1:length(num)\n    if num[i] in '2357BD'\n      n += 1\n    end\n  end\n\
    \  return n\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpkwjvltc4.jl:24\nin expression\
    \ starting at /tmp/tmpkwjvltc4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # First convert to biguint\n    n = big(parse(BigInt,\
    \ num, base=16))\n    # Write your code here\n    # ...\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5f8u_uun.jl:29\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 171 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f8u_uun.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f8u_uun.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5f8u_uun.jl:30\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 67454 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f8u_uun.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f8u_uun.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5f8u_uun.jl:31\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 2884442675 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f8u_uun.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f8u_uun.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5f8u_uun.jl:32\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 8224 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5f8u_uun.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5f8u_uun.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5f8u_uun.jl:33\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 1311768467463790320 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5f8u_uun.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hash = Dict{Char, Int64}('0' => 0, '1' =>\
    \ 1, '2' => 2, '3' => 3, '4' => 4, \n                                '5' => 5,\
    \ '6' => 6, '7' => 7, '8' => 8, '9' => 9, \n                                'A'\
    \ => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15)\n    primes =\
    \ [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num\n        for j in primes\n\
    \            if (hash[i] == j)\n                count += 1\n            end\n\
    \        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    let\n        \u03B1 = length(num)\n      \
    \  hex_digits = \"0123456789ABCDEF\"\n        hex_prime_digits = \"02357BDF\"\n\
    \        i = 1\n        t = 0\n        while i \u2264 \u03B1\n            if occursin(num[i],\
    \ hex_prime_digits)\n                t += 1\n            end\n            i +=\
    \ 1\n        end\n        return t\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqsfpsx57.jl:40\n  Expression: candidate(\"\
    1077E\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqsfpsx57.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqsfpsx57.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqsfpsx57.jl:42\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqsfpsx57.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqsfpsx57.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqsfpsx57.jl:43\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqsfpsx57.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqsfpsx57.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpqsfpsx57.jl:44\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 16 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqsfpsx57.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqsfpsx57.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqsfpsx57.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num_hex_prime = 0 \n    for i in 1:length(num)\n\
    \        if num[i] in ['2','3','5','7','B','D']\n            num_hex_prime +=\
    \ 1\n        end\n    end\n    return num_hex_prime\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    p = [2, 3, 5, 7, 11, 13]\n    num = uppercase(num)\n\
    \    f = countin(p) do i\n        for s in num\n            if s == string(i)\n\
    \                f = true\n                break\n            end\n        end\n\
    \        f\n    end\n    return f\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2i632shu.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: countin not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmp2i632shu.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2i632shu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2i632shu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp2i632shu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: countin not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp2i632shu.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2i632shu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2i632shu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp2i632shu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: countin not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp2i632shu.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2i632shu.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2i632shu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp2i632shu.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: countin not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmp2i632shu.jl:21\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2i632shu.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(filter(x->(x in [\"2\",\"3\"\
    ,\"5\",\"7\",\"B\",\"D\"]),collect(string(num))))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe2tj73ow.jl:26\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe2tj73ow.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2tj73ow.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpe2tj73ow.jl:27\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe2tj73ow.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2tj73ow.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpe2tj73ow.jl:28\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe2tj73ow.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2tj73ow.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpe2tj73ow.jl:29\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe2tj73ow.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2tj73ow.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpe2tj73ow.jl:30\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe2tj73ow.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_dict = Dict('0'=>0,'1'=>1,'2'=>2,'3'=>3,'4'=>4,'5'=>5,'6'=>6,'7'=>7,'8'=>8,'9'=>9,'A'=>10,'B'=>11,'C'=>12,'D'=>13,'E'=>14,'F'=>15)\n\
    \    hex_primes = [2,3,5,7,11,13]\n    is_prime(n::Int64) = all(n % i != 0 for\
    \ i in 2:sqrt(n))\n    res = 0\n    for i in 1:length(num)\n        if hex_dict[num[i]]\
    \ in hex_primes && is_prime(hex_dict[num[i]])\n            res += 1\n        end\n\
    \    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    return length(filter(a->a in ['2','3','5','7','B','D'],collect(num)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for ch in num\n        if ch\
    \ in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2k79tge1.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k79tge1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k79tge1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2k79tge1.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k79tge1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k79tge1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2k79tge1.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k79tge1.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k79tge1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2k79tge1.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2k79tge1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2k79tge1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2k79tge1.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2k79tge1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    l = length(num)\n    count = 0\n    for i\
    \ in 1:l\n        if num[i] in [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n       \
    \     count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgfpq88xy.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfpq88xy.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfpq88xy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgfpq88xy.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfpq88xy.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfpq88xy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgfpq88xy.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfpq88xy.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfpq88xy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgfpq88xy.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfpq88xy.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfpq88xy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgfpq88xy.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgfpq88xy.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    idx_to_digit = Dict(\"A\"=>10, \"B\"=>11,\
    \ \"C\"=>12, \"D\"=>13, \"E\"=>14, \"F\"=>15)\n    isprime(x) = (2:trunc(Int,sqrt(x))).all(y->x%y!=0)\n\
    \    return sum(map(i-> isprime(Int(i[1]=='0'?i[2]:i[1])), num)) + sum(map(i->\
    \ isprime(idx_to_digit[i]), num))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyi3gftyr.jl:21\nin expression starting at\
    \ /tmp/tmpyi3gftyr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    s = 0\n    for i in num \n        @inbounds\
    \ if i == '2' || i == '3' || i == '5' || i == '7' || i == 'B' || i == 'D' || i\
    \ == 'F' \n            s += 1\n        end\n    end\n    return s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpog8ktayl.jl:36\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpog8ktayl.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpog8ktayl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpog8ktayl.jl:37\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpog8ktayl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpog8ktayl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpog8ktayl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    #turn \"\
    str\" to \"vector\" of chars\n    num_v = [char for char in num]\n    #turn every\
    \ char from str to \"int\"\n    #if int > 9, change it to 10...15 accordingly\n\
    \    #make all chars numbers\n    num_v = [parse(Int64, char) for char in num_v]\n\
    \    #replace letters with numbers\n    num_v = [if i > 9 char = i - 7 end for\
    \ i in num_v]\n    #sort all the primes\n    num_v = sort(num_v)\n    #count how\
    \ many primes are there\n    count = length(num_v[num_v .>= primes[1]])\n    println(count)\n\
    end\nhex_key(\"AB\")\n \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: invalid base 10 digit 'A'\nStacktrace:\n\
    \ [1] parse(::Type{Int64}, c::Char; base::Int64)\n   @ Base ./parse.jl:46\n [2]\
    \ parse\n   @ ./parse.jl:41 [inlined]\n [3] #1\n   @ ./none:0 [inlined]\n [4]\
    \ iterate\n   @ ./generator.jl:47 [inlined]\n [5] collect(itr::Base.Generator{Vector{Char},\
    \ var\"#1#3\"})\n   @ Base ./array.jl:724\n [6] hex_key(num::String)\n   @ Main\
    \ /tmp/tmp1itdxss_.jl:25\n [7] top-level scope\n   @ /tmp/tmp1itdxss_.jl:34\n\
    in expression starting at /tmp/tmp1itdxss_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\" \n        return 0\n    end\n\
    \    hex_digits = [2, 3, 5, 7, 11, 13]\n    count = 0\n    if parse(Int64, num,\
    \ radix=16) in hex_digits\n        count += 1\n    end\n    return count + hex_key(string(num[1:end]))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_jqptvkb.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::String; radix=16)\n  Closest candidates are:\n    parse(::Type{T}, ::AbstractString;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\
    \ got unsupported keyword argument \"radix\"\n    parse(::Type{T}, ::AbstractString;\
    \ kwargs...) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:379\n\
    \    parse(!Matched::Type{T}, ::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\
    \ got unsupported keyword argument \"radix\"\n    ...\n  Stacktrace:\n   [1] kwerr(::NamedTuple{(:radix,),\
    \ Tuple{Int64}}, ::Function, ::Type, ::String)\n     @ Base ./error.jl:163\n \
    \  [2] hex_key(num::String)\n     @ Main /tmp/tmp_jqptvkb.jl:24\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_jqptvkb.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_jqptvkb.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_jqptvkb.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching parse(::Type{Int64},\
    \ ::String; radix=16)\n  Closest candidates are:\n    parse(::Type{T}, ::AbstractString;\
    \ base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\
    \ got unsupported keyword argument \"radix\"\n    parse(::Type{T}, ::AbstractString;\
    \ kwargs...) where T<:Real at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:379\n\
    \    parse(!Matched::Type{T}, ::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\
    \ got unsupported keyword argument \"radix\"\n    ...\n  Stacktrace:\n   [1] kwerr(::NamedTuple{(:radix,),\
    \ Tuple{Int64}}, ::Function, ::Type, ::String)\n     @ Base ./error.jl:163\n \
    \  [2] hex_key(num::String)\n     @ Main /"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_jqptvkb.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num=replace(num, r\"[A-F]\", r\"\")\n    num=replace(num,\
    \ r\"[0-7]\", r\"\")\n    hex_key=length(num)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcrtp_g2v.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching replace(::String,\
    \ ::Regex, ::Regex)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpcrtp_g2v.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcrtp_g2v.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcrtp_g2v.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcrtp_g2v.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching replace(::String,\
    \ ::Regex, ::Regex)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpcrtp_g2v.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcrtp_g2v.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcrtp_g2v.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcrtp_g2v.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_num_list = [ '0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' ]\n    primes = [ 2, 3,\
    \ 5, 7, 11, 13 ]\n    primes_hex = [ 2, 3, 5, 7, 11, 13 ]\n    result = 0\n  \
    \  for j in primes\n        push!(primes_hex, hex(j))\n    end\n    for i in 1:length(num)\n\
    \        if num[i] in primes_hex\n            result += 1\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpawfa7pub.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: hex not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpawfa7pub.jl:24\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpawfa7pub.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpawfa7pub.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpawfa7pub.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: hex not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpawfa7pub.jl:24\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpawfa7pub.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpawfa7pub.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpawfa7pub.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: hex not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpawfa7pub.jl:24\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpawfa7pub.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpawfa7pub.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpawfa7pub.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: hex not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpawfa7pub.jl:24\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpawfa7pub.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count_of_primes = 0\n    for ch in num\n \
    \       if ch in (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n            count_of_primes\
    \ += 1\n        end\n    end\n    return count_of_primes\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8qsaj6db.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qsaj6db.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qsaj6db.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qsaj6db.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qsaj6db.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qsaj6db.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qsaj6db.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qsaj6db.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qsaj6db.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qsaj6db.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qsaj6db.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qsaj6db.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qsaj6db.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8qsaj6db.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key = 0\n    primes = [false, false, true,\
    \ true, false, true, false, true, false, false, false, true, false, true, false,\
    \ false]\n    for c in num\n        key += primes[parse(Int, c, radix=16)]\n \
    \   end\n    return key\nend\nnum = \"BBA7\"\n# num = \"AB\"\n@test hex_key(num)\
    \ == 3\n\"\"\"Write a function that receives a number n and returns a closed range\
    \ of \n    unique numbers from 1 to n in a random order.\n    Example:\n    Input:\
    \ 3\n    Output: [2, 3, 1]\n    Input: 5\n    Output: [1, 5, 4, 2, 3]\n    Input:\
    \ 7\n    Output: [5, 7, 6, 3, 1, 2, 4]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpuve0imt7.jl:28\nin expression starting at /tmp/tmpuve0imt7.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \"\"\"\n    Returns the amount of prime hexadecimal\
    \ numbers in a given string.\n    \"\"\"\n    prime_numbers = [2, 3, 5, 7, 11,\
    \ 13]\n    count = 0\n    for c in num\n        if !(c in [\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\"])\n            return 0\n        end\n        #convert to integer\
    \ and check if it is a prime number\n        if c in [\"A\", \"B\", \"C\", \"\
    D\", \"E\", \"F\"]\n            for p in prime_numbers\n                if p ==\
    \ parse(Int64, c, base=16)\n                    count += 1\n                end\n\
    \            end\n        else\n            if parse(Int64, c) in prime_numbers\n\
    \                count += 1\n            end\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvx6t07t4.jl:48\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx6t07t4.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx6t07t4.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpvx6t07t4.jl:49\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx6t07t4.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx6t07t4.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpvx6t07t4.jl:50\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx6t07t4.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx6t07t4.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpvx6t07t4.jl:51\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvx6t07t4.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvx6t07t4.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpvx6t07t4.jl:52\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvx6t07t4.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    for i in 1:length(num)\n  \
    \      if (findfirst(x->x==num[i],[\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]) != nothing)\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr0b9n998.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0b9n998.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0b9n998.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr0b9n998.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0b9n998.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0b9n998.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr0b9n998.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0b9n998.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0b9n998.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr0b9n998.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr0b9n998.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr0b9n998.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr0b9n998.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0b9n998.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    c = 0\n    for ch in [i for i in \"0123456789ABCDEF\"\
    ]\n        c += count(num, ch)\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcw_xlh_6.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: objects of type String are\
    \ not callable\n  Stacktrace:\n   [1] _simple_count(pred::String, itr::Char, init::Int64)\n\
    \     @ Base ./reduce.jl:1206\n   [2] count(f::String, itr::Char; init::Int64)\n\
    \     @ Base ./reduce.jl:1201\n   [3] count(f::String, itr::Char)\n     @ Base\
    \ ./reduce.jl:1201\n   [4] hex_key(num::String)\n     @ Main /tmp/tmpcw_xlh_6.jl:21\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpcw_xlh_6.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpcw_xlh_6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpcw_xlh_6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: objects of type String are not callable\n\
    \  Stacktrace:\n   [1] _simple_count(pred::String, itr::Char, init::Int64)\n \
    \    @ Base ./reduce.jl:1206\n   [2] count(f::String, itr::Char; init::Int64)\n\
    \     @ Base ./reduce.jl:1201\n   [3] count(f::String, itr::Char)\n     @ Base\
    \ ./reduce.jl:1201\n   [4] hex_key(num::String)\n     @ Main /tmp/tmpcw_xlh_6.jl:21\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpcw_xlh_6.jl:31 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpcw_xlh_6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpcw_xlh_6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  MethodError: objects of type String are not\
    \ callable\n  Stacktrace:\n   [1] _simple_count(pred::String, itr::Char, init::Int64)\n\
    \     @ Base ./reduce.jl:1206\n   [2] count(f::String, itr::Char; init::Int64)\n\
    \     @ Base ./reduce.jl:1201\n   [3] count(f::String, itr::Char)\n     @ Base\
    \ ./reduce.jl:12"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcw_xlh_6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n_hex = 0;\n    for i in num \n        if\
    \ i in \"2357BD\"\n            n_hex += 1\n        end\n    end\n    return n_hex\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_number = 0\n    key = 0\n    is_prime\
    \ = true\n    s = \"\"\n    for i in num\n        if i == 'A'\n            hex_number\
    \ = 10\n        elseif i == 'B'\n            hex_number = 11\n        elseif i\
    \ == 'C'\n            hex_number = 12\n        elseif i == 'D'\n            hex_number\
    \ = 13\n        elseif i == 'E'\n            hex_number = 14\n        elseif i\
    \ == 'F'\n            hex_number = 15\n        else\n            hex_number =\
    \ parse(Int64, i)\n        end\n        for j in 2:hex_number-1\n            if\
    \ hex_number % j == 0\n                is_prime = false\n                break\n\
    \            end\n        end\n        if is_prime == true\n            key +=\
    \ 1\n        end\n        is_prime = true\n    end\n    return key\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ttwhklb.jl:58\n  Expression: candidate(\"\
    1077E\") == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ttwhklb.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ttwhklb.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp0ttwhklb.jl:59\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ttwhklb.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ttwhklb.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp0ttwhklb.jl:60\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ttwhklb.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ttwhklb.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp0ttwhklb.jl:61\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ttwhklb.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ttwhklb.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp0ttwhklb.jl:62\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 16 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ttwhklb.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    # number of hex digits \n    num_digits =\
    \ length(num) \n    ans = 0\n    for i in 1:num_digits\n        if !('0' <= num[i]\
    \ <= '9') && !('A' <= num[i] <= 'F')\n            error(\"Not a hexadecimal\"\
    )\n        end\n        switch num[i]\n            when '2', '3', '5', '7', 'B',\
    \ 'D'\n                ans += 1\n        end\n    end\n    return ans\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpgjveujuf.jl:22 expected \"\
    end\", got \"num\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgjveujuf.jl:26\n\
    in expression starting at /tmp/tmpgjveujuf.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num in [\"2\",\"3\",\"5\",\"7\",\"B\",\"\
    D\"]\n        return 1\n    else\n        return 0\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd2x2f4j9.jl:30\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2x2f4j9.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2x2f4j9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpd2x2f4j9.jl:31\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2x2f4j9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2x2f4j9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpd2x2f4j9.jl:32\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2x2f4j9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2x2f4j9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpd2x2f4j9.jl:33\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd2x2f4j9.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd2x2f4j9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpd2x2f4j9.jl:34\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd2x2f4j9.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    count =\
    \ 0\n    for n in num\n        if n in \"2357BDE\"\n            count += 1\n \
    \       end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgvnedy11.jl:34\n  Expression: candidate(\"\
    1077E\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvnedy11.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvnedy11.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgvnedy11.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvnedy11.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvnedy11.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgvnedy11.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 7 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvnedy11.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvnedy11.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgvnedy11.jl:38\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12\n   Evaluated: 14 == 12\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgvnedy11.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgvnedy11.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgvnedy11.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for k in num\n        if\
    \ k == 'A'\n            hex_key += 11\n        elseif k == 'B'\n            hex_key\
    \ += 12\n        elseif k == 'C'\n            hex_key += 13\n        elseif k\
    \ == 'D'\n            hex_key += 14\n        elseif k == 'E'\n            hex_key\
    \ += 15\n        elseif k == 'F'\n            hex_key += 16\n        else \n \
    \           hex_key += parse(Int64, k)\n        end\n    end\n    return hex_key\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_w0y88cg.jl:44\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 23 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_w0y88cg.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_w0y88cg.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_w0y88cg.jl:45\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 30 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_w0y88cg.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_w0y88cg.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_w0y88cg.jl:46\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 70 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_w0y88cg.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_w0y88cg.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_w0y88cg.jl:47\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_w0y88cg.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_w0y88cg.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp_w0y88cg.jl:48\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 126 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_w0y88cg.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_prime_array = [\"2\",\"3\",\"5\"\
    ,\"7\",\"B\",\"D\"]\n    count = 0\n    \n    for i in num\n        if i in hex_prime_array\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3epzqj4x.jl:35\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3epzqj4x.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3epzqj4x.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp3epzqj4x.jl:36\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3epzqj4x.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3epzqj4x.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp3epzqj4x.jl:37\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3epzqj4x.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3epzqj4x.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp3epzqj4x.jl:38\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3epzqj4x.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3epzqj4x.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp3epzqj4x.jl:39\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3epzqj4x.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    l = length(num)\n    count = 0\n    for i\
    \ = 1:l\n        if ((num[i] == '2') || (num[i] == '3') || (num[i] == '5') ||\
    \ \n            (num[i] == '7') || (num[i] == 'B') || (num[i] == 'D'))\n     \
    \       count += 1\n        end\n    end\n    return count\nend\nnum = \"1077E\"\
    \nhex_key(num)\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_dict\
    \ = Dict()\n    for c in \"0123456789ABCDEF\"\n        hex_dict[c] = c\n    end\n\
    \    for c in hex_dict\n        if parse(Int64, c[1]) in primes\n            num\
    \ += c[1]\n        end\n    end\n    return num\nend\nhex_key(\"AB\")\n \n \n\"\
    \"\"\n    You are given a string of digits. Your task is to split the given string\
    \ \n    into chunks of two digits. If the string contains an odd number of digits,\
    \ \n    then the missing second digit of the final chunk should be replaced by\
    \ 0.\n    Examples:\n    For inputString = \"2gf3\" the output should be: [2,0,3]\n\
    \    For inputString = \"2fg3\" the output should be: [2,3]\n    For inputString\
    \ = \"2f3\" the output should be: [2,0,3]\n    For inputString = \"2\" the output\
    \ should be: [2,0]\n    \"\"\"\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\
    \t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"\
    123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: invalid base 10 digit 'E'\nStacktrace:\n\
    \ [1] parse(::Type{Int64}, c::Char; base::Int64)\n   @ Base ./parse.jl:46\n [2]\
    \ parse(::Type{Int64}, c::Char)\n   @ Base ./parse.jl:41\n [3] hex_key(num::String)\n\
    \   @ Main /tmp/tmp6n86__lu.jl:25\n [4] top-level scope\n   @ /tmp/tmp6n86__lu.jl:31\n\
    in expression starting at /tmp/tmp6n86__lu.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    hex_primes\
    \ = 0\n    for i in 1:length(num)\n        if num[i] >= \"A\" \n            num[i]\
    \ = string(string(num[i]).upper()) \n        end\n        if num[i] in [\"2\"\
    , \"3\", \"5\", \"7\", \"B\", \"D\"] \n            hex_primes += 1\n        end\n\
    \    end\n    return hex_primes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6hir68xx.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: no method matching isless(::String,\
    \ ::Char)\n  Closest candidates are:\n    isless(::AbstractString, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n    isless(!Matched::Char,\
    \ ::Char) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:214\n    isless(!Matched::AbstractChar,\
    \ ::AbstractChar) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:221\n\
    \    ...\n  Stacktrace:\n   [1] <(x::String, y::Char)\n     @ Base ./operators.jl:352\n\
    \   [2] <=(x::String, y::Char)\n     @ Base ./operators.jl:401\n   [3] >=(x::Char,\
    \ y::String)\n     @ Base ./operators.jl:425\n   [4] hex_key(num::String)\n  \
    \   @ Main /tmp/tmp6hir68xx.jl:22\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6hir68xx.jl:36 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6hir68xx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6hir68xx.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: no method matching isless(::String,\
    \ ::Char)\n  Closest candidates are:\n    isless(::AbstractString, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n    isless(!Matched::Char,\
    \ ::Char) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:214\n    isless(!Matched::AbstractChar,\
    \ ::AbstractChar) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:221\n\
    \    ...\n  Stacktrace:\n   [1] <(x::String, y::Char)\n     @ Base ./operators.jl:352\n\
    \   [2] <=(x::String, y::Char)\n     @ Base ./operators.jl:401\n   [3] >=(x::Char,\
    \ y::String)\n     @ Base ./operators.jl:425\n   [4] hex_key(num::String)\n  \
    \   @ Main /tmp/tmp6hir68xx.jl:22\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6hir68xx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    counts = 0\n    for i in [2,3,5,7,11,13]\n\
    \        counts += num.count(string(i, base=16))\n    end\n    return counts\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeig0b758.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpeig0b758.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeig0b758.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeig0b758.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeig0b758.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpeig0b758.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeig0b758.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeig0b758.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeig0b758.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpeig0b758.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeig0b758.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeig0b758.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeig0b758.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  type String has no field count\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeig0b758.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex = Array{Int64}([\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"])\n    primes = Set([\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"])\n \
    \   count = 0\n    for x in num\n        if x in primes\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\nnum = \"ABED1A33\"\nhex_key(num)\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type String\
    \ to an object of type Int64\nClosest candidates are:\n  convert(::Type{T}, !Matched::T)\
    \ where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \  convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \  ...\nStacktrace:\n  [1] setindex!(A::Vector{Int64}, x::String, i1::Int64)\n\
    \    @ Base ./array.jl:903\n  [2] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64,\
    \ src::Vector{String}, soffs::Int64, n::Int64)\n    @ Base ./array.jl:253\n  [3]\
    \ unsafe_copyto!\n    @ ./array.jl:307 [inlined]\n  [4] _copyto_impl!\n    @ ./array.jl:331\
    \ [inlined]\n  [5] copyto!\n    @ ./array.jl:317 [inlined]\n  [6] copyto!\n  \
    \  @ ./array.jl:343 [inlined]\n  [7] copyto_axcheck!\n    @ ./abstractarray.jl:1104\
    \ [inlined]\n  [8] Vector{Int64}(x::Vector{String})\n    @ Base ./array.jl:563\n\
    \  [9] Array\n    @ ./boot.jl:482 [inlined]\n [10] hex_key(num::String)\n    @\
    \ Main /tmp/tmpfpg5gfx5.jl:19\n [11] top-level scope\n    @ /tmp/tmpfpg5gfx5.jl:30\n\
    in expression starting at /tmp/tmpfpg5gfx5.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = 0\n    key_points = [\"2\",\"3\",\"5\"\
    ,\"7\",\"B\",\"D\"]\n    for i in num\n        if i in key_points\n          \
    \  n += 1\n        end\n    end\n    return n\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr1dntfny.jl:33\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr1dntfny.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr1dntfny.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr1dntfny.jl:34\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr1dntfny.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr1dntfny.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr1dntfny.jl:35\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr1dntfny.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr1dntfny.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr1dntfny.jl:36\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr1dntfny.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr1dntfny.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr1dntfny.jl:37\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr1dntfny.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    key_values = Dict('2'=>2, '3'=>3, '5'=>5,\
    \ '7'=>7, 'B'=>11, 'D'=>13)\n    count = 0\n    for i in num\n        if key_values[i]\
    \ != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxuqgi_sp.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpxuqgi_sp.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxuqgi_sp.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxuqgi_sp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxuqgi_sp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  KeyError: key '1' not found\n  Stacktrace:\n  \
    \ [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpxuqgi_sp.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxuqgi_sp.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxuqgi_sp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxuqgi_sp.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  KeyError: key 'A' not found\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./dict.jl:481 [inlined]\n   [2] hex_key(num::String)\n\
    \     @ Main /tmp/tmpxuqgi_sp.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxuqgi_sp.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxuqgi_sp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpxuqgi_sp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  KeyError: key '0' not found\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./dict.jl:481 [inlined]\n   [2] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxuqgi_sp.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    prime_hex_digits = [2, 3, 5, 7, 11, 13]\n\
    \    count = 0\n    for c in num\n        if isupper(c) && c \u2208 ('A':'F')\n\
    \            if c == 'A' || c == 'B' || c == 'D' || c == 'E'\n               \
    \ count += 1\n            end\n        else\n            if parse(Int64,c) \u2208\
    \ prime_hex_digits\n                count += 1\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprrfn970s.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmprrfn970s.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprrfn970s.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprrfn970s.jl:38\ntest set:\
    \ Error During Test at /tmp/tmprrfn970s.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmprrfn970s.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprrfn970s.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprrfn970s.jl:38\ntest set:\
    \ Error During Test at /tmp/tmprrfn970s.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmprrfn970s.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprrfn970s.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprrfn970s.jl:38\ntest set:\
    \ Error During Test at /tmp/tmprrfn970s.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmprrfn970s.jl:22\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprrfn970s.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    #Hexa prime numbers\n    prime_hex = [2, 3,\
    \ 5, 7, 11, 13]\n    count = 0\n    #Iterate through the numbers string\n    for\
    \ n in num\n        #Iterate through all hexa prime numbers\n        for p in\
    \ prime_hex\n            #Convert the number to hexa and compare with the p\n\
    \            if parse(Int64, n, base=16) == p\n                count += 1\n  \
    \          end\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    check = 0\n    for i in range(1, length(num)+1)\n\
    \        if num[i] in ('2','3','5','7','B','D')\n            check = check + 1\n\
    \        end\n    end\n    return check\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe71r5bs0.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  BoundsError: attempt to access 2-codeunit\
    \ String at index [3]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] hex_key(num::String)\n\
    \     @ Main /tmp/tmpe71r5bs0.jl:21\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpe71r5bs0.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpe71r5bs0.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpe71r5bs0.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  BoundsError: attempt to access 5-codeunit String\
    \ at index [6]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] hex_key(num::String)\n\
    \     @ Main /tmp/tmpe71r5bs0.jl:21\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpe71r5bs0.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpe71r5bs0.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpe71r5bs0.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  BoundsError: attempt to access 8-codeunit String\
    \ at index [9]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] hex_key(num::String)\n\
    \     @ Main /tmp/tmpe71r5bs0.jl:21\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe71r5bs0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    n = 0\n    p = [2,3,5,7,11,13]\n    for i\
    \ in num\n        if isa(parse(Int64,i),Int64) == true\n            if parse(Int64,i)\
    \ in p\n                n += 1\n            end\n        else\n            if\
    \ i == \"A\"\n                n += 1\n            elseif i == \"B\"\n        \
    \        n += 1\n            elseif i == \"D\"\n                n += 1\n     \
    \       elseif i == \"E\"\n                n += 1\n            end\n        end\n\
    \    end\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9s7lixbq.jl:45\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n   [1] parse(::Type{Int64}, c::Char; base::Int64)\n    \
    \ @ Base ./parse.jl:46\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmp9s7lixbq.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9s7lixbq.jl:45 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9s7lixbq.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp9s7lixbq.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  ArgumentError: invalid base 10 digit 'E'\n  Stacktrace:\n\
    \   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base ./parse.jl:46\n\
    \   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n \
    \    @ Main /tmp/tmp9s7lixbq.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9s7lixbq.jl:46 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp9s7lixbq.jl:44\ntest set:\
    \ Error During Test at /tmp/tmp9s7lixbq.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  ArgumentError: invalid base 10 digit 'A'\n \
    \ Stacktrace:\n   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base\
    \ ./parse.jl:46\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmp9s7lixbq.jl:22\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp9s7lixbq.jl:47 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9s7lixbq.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    count = 0\n    primes = [2,3,5,7,11,13]\n\
    \    string_primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    for i in num\n\
    \        if isprime(Int64(i))\n            count += 1\n        end\n    end\n\
    \    for i in num\n        if i in string_primes\n            count += 1\n   \
    \     end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd8yqx_ge.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpd8yqx_ge.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd8yqx_ge.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd8yqx_ge.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpd8yqx_ge.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpd8yqx_ge.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd8yqx_ge.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd8yqx_ge.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpd8yqx_ge.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpd8yqx_ge.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd8yqx_ge.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd8yqx_ge.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpd8yqx_ge.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"2020\") == 2\n  UndefVarError: isprime not defined\n  Stacktrace:\n\
    \   [1] hex_key(num::String)\n     @ Main /tmp/tmpd8yqx_ge.jl:23\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd8yqx_ge.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmg7w_5ll.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpmg7w_5ll.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg7w_5ll.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg7w_5ll.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmg7w_5ll.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] hex_key(num::String)\n     @ Main /tmp/tmpmg7w_5ll.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg7w_5ll.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg7w_5ll.jl:24\ntest "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmg7w_5ll.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    hex_key = 0\n    for i in num\n        if\
    \ i in (\"A\", \"B\", \"D\", \"F\")\n            hex_key += 1\n        end\n \
    \   end\n    return hex_key\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\
    \t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"\
    123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfcptqp3c.jl:32\n  Expression: candidate(\"\
    AB\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcptqp3c.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcptqp3c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfcptqp3c.jl:33\n  Expression: candidate(\"1077E\") == 2\n\
    \   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcptqp3c.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcptqp3c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfcptqp3c.jl:34\n  Expression: candidate(\"ABED1A33\") == 4\n\
    \   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcptqp3c.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcptqp3c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfcptqp3c.jl:35\n  Expression: candidate(\"2020\") == 2\n \
    \  Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcptqp3c.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcptqp3c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfcptqp3c.jl:36\n  Expression: candidate(\"123456789ABCDEF0\"\
    ) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfcptqp3c.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    primes = [2, 3, 5, 7, 11, 13]\n    count =\
    \ 0\n    for i in collect(num)\n        for j in primes\n            if parse(Int,\
    \ i) == j\n                count += 1\n            end\n        end\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd60y4cai.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  ArgumentError: invalid base 10 digit\
    \ 'A'\n  Stacktrace:\n   [1] parse(::Type{Int64}, c::Char; base::Int64)\n    \
    \ @ Base ./parse.jl:46\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmpd60y4cai.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd60y4cai.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpd60y4cai.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpd60y4cai.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"1077E\") == 2\n  ArgumentError: invalid base 10 digit 'E'\n  Stacktrace:\n\
    \   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base ./parse.jl:46\n\
    \   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n \
    \    @ Main /tmp/tmpd60y4cai.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd60y4cai.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpd60y4cai.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpd60y4cai.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"ABED1A33\") == 4\n  ArgumentError: invalid base 10 digit 'A'\n \
    \ Stacktrace:\n   [1] parse(::Type{Int64}, c::Char; base::Int64)\n     @ Base\
    \ ./parse.jl:46\n   [2] parse\n     @ ./parse.jl:41 [inlined]\n   [3] hex_key(num::String)\n\
    \     @ Main /tmp/tmpd60y4cai.jl:23\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd60y4cai.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd60y4cai.jl:32\n"
  exit_code: 1
  status: SyntaxError
