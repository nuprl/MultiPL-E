name: HumanEval_10_make_palindrome
language: jl
results:
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # returns the longest palindromic suffix of a string\n    function get_palindromic_suffix(string::String)::String\n\
    \        rev_string = string[end:-1:1]\n        for i = length(string):-1:1\n\
    \            if string[i] == rev_string[i] && string[i] == rev_string[1]\n   \
    \             return string[i:end]\n            end\n        end\n        return\
    \ \"\"\n    end\n    palindromic_suffix = get_palindromic_suffix(string)\n   \
    \ if string == palindromic_suffix\n        return string\n    else\n        return\
    \ string * string[1:findfirst(palindromic_suffix, string)-1]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgft0hno2.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  MethodError: no method matching\
    \ -(::UnitRange{Int64}, ::Int64)\n  For element-wise subtraction, use broadcasting\
    \ with dot syntax: array .- scalar\n  Closest candidates are:\n    -(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\n \
    \   -(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:227\n\
    \    -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpgft0hno2.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgft0hno2.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgft0hno2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgft0hno2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  MethodError: no method matching -(::UnitRange{Int64},\
    \ ::Int64)\n  For element-wise subtraction, use broadcasting with dot syntax:\
    \ array .- scalar\n  Closest candidates are:\n    -(!Matched::T, ::T) where T<:Union{Int128,\
    \ Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\n\
    \    -(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:227\n\
    \    -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpgft0hno2.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/sha"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgft0hno2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    s = string\n    t = reverse(string)\n    # add a sentinel \"#\" to remove\
    \ special cases in the KMP algorithm\n    s = s * \"#\" * t\n    p = [0]\n   \
    \ for i in 2:length(s)\n        j = p[i-1]\n        while j > 0 && s[j+1] != s[i]\n\
    \            j = p[j]\n        end\n        if s[j+1] == s[i]\n            j +=\
    \ 1\n        end\n        push!(p, j)\n    end\n    # Longest palindromic suffix\
    \ of string is the end of the string minus its prefix ending at position p[length(s)]\n\
    \    return string * reverse(string[1:end-p[length(s)]])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    s = string\n    i = length(s)\n    for j in 1:i\n        a = s[1:j]\n   \
    \     b = s[j:i]\n        if is_palindrome(a) && b != \"\"\n            if !is_palindrome(b)\n\
    \                s = b * reverse(a)\n            end\n            break\n    \
    \    end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjj4i456s.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjj4i456s.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjj4i456s.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjj4i456s.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjj4i456s.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjj4i456s.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjj4i456s.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjj4i456s.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjj4i456s.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjj4i456s.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjj4i456s.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjj4i456s.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjj4i456s.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjj4i456s.jl:18\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjj4i456s.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if isempty(string)\n        return string\n    end\n    longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    new_prefix = reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    \    return string * new_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphh32yuoj.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphh32yuoj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh32yuoj.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh32yuoj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmphh32yuoj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphh32yuoj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh32yuoj.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh32yuoj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmphh32yuoj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphh32yuoj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh32yuoj.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh32yuoj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmphh32yuoj.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(stri"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphh32yuoj.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    length = length(string)\n    suffix = string\n    while length > 0\n    \
    \    if is_palindrome(suffix)\n            return string * reverse(string[1:length])\n\
    \        end\n        length -= 1\n        suffix = suffix[2:end]\n    end\n \
    \   return string * reverse(string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7zg1_vhn.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7zg1_vhn.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7zg1_vhn.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7zg1_vhn.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp7zg1_vhn.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7zg1_vhn.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7zg1_vhn.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7zg1_vhn.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp7zg1_vhn.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7zg1_vhn.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7zg1_vhn.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7zg1_vhn.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp7zg1_vhn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7zg1_vhn.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7zg1_vhn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    longest_palindrome_postfix_end_index = find_longest_palindrome_suffix_in_string(string)\n\
    \    is_already_palindrome = longest_palindrome_postfix_end_index == length(string)\n\
    \    if is_already_palindrome\n        return string\n    end\n    suffix_to_reverse\
    \ = string[1:longest_palindrome_postfix_end_index]\n    return string * reverse(suffix_to_reverse)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp123p3x8w.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix_in_string\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp123p3x8w.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp123p3x8w.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp123p3x8w.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp123p3x8w.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix_in_string\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp123p3x8w.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp123p3x8w.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp123p3x8w.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp123p3x8w.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix_in_string\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp123p3x8w.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp123p3x8w.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp123p3x8w.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp123p3x8w.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix_in_string\
    \ not defined\n  Stacktrace:\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp123p3x8w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    \n    # find the longest palindromic postfix\n    function longest_palindromic_suffix(string::String)::String\n\
    \        l = length(string)\n        j = 1\n        while j <= l \xF7 2\n    \
    \        if string[j] == string[l - j + 1]\n                j += 1\n         \
    \   else\n                break\n            end\n        end\n        return\
    \ string[j:l]\n    end\n    \n    string_suffix = longest_palindromic_suffix(string)\n\
    \    string_prefix = reverse(string[1:length(string) - length(string_suffix)])\n\
    \    return string * string_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp23j92n9q.jl:39\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp23j92n9q.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp23j92n9q.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp23j92n9q.jl:40\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp23j92n9q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp23j92n9q.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp23j92n9q.jl:41\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp23j92n9q.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp23j92n9q.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp23j92n9q.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    if n == 0 \n        return \"\"\n    end\n    reversed_string\
    \ = reverse(string)\n    z_function = get_z_function(string * \"#\" * reversed_string)\n\
    \    l = findmax(z_function[1:n+1])[2]\n    if l == n \n        return string\n\
    \    end\n    return string * reverse(string[1:n-l])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg5e5pqok.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: get_z_function not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpg5e5pqok.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5e5pqok.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5e5pqok.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpg5e5pqok.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: get_z_function not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpg5e5pqok.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5e5pqok.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5e5pqok.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpg5e5pqok.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: get_z_function not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpg5e5pqok.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5e5pqok.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5e5pqok.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpg5e5pqok.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: get_z_function not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpg5e5pqok.jl:18\n\
    \   [2] macro expa"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg5e5pqok.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    s_len = length(string)\n    for i in s_len:-1:1\n        if is_palindrome(string[i:s_len])\
    \ \n            return string * reverse(string[1:i])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg5u7h7w5.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg5u7h7w5.jl:1\n\
    in expression starting at /tmp/tmpg5u7h7w5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    l = length(string)\n    for i in 0:l-1\n        if string[i+1:end] == reverse(string[1:i+1])\n\
    \            return string * string[i+1:end]\n        end\n    end\n    return\
    \ string * reverse(string[1:end])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdhpogclt.jl:27\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdhpogclt.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdhpogclt.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdhpogclt.jl:28\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzzyx\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdhpogclt.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdhpogclt.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdhpogclt.jl:29\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdhpogclt.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdhpogclt.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdhpogclt.jl:30\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdhpogclt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdhpogclt.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdhpogclt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    postfix_palindrome_length = longest_palindrome_suffix_length(string)\n  \
    \  postfix_palindrome = string[end-postfix_palindrome_length+1:end]\n    string_prefix\
    \ = string[1:end-postfix_palindrome_length]\n    string_prefix_reverse = reverse(string_prefix)\n\
    \    return string*string_prefix_reverse\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpre877xfh.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpre877xfh.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpre877xfh.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpre877xfh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpre877xfh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpre877xfh.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpre877xfh.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpre877xfh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpre877xfh.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpre877xfh.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpre877xfh.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpre877xfh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpre877xfh.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::St"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpre877xfh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    l = String[]\n    str = string[end:-1:1]\n    for i in 1:length(string)\n\
    \        push!(l,string[1:i])\n    end\n    for a in l\n        if(a == str[1:length(a)])\n\
    \            return string*str[length(a)+1:end]\n        end\n    end\n    return\
    \ string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppr9z0t5w.jl:32\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppr9z0t5w.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppr9z0t5w.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppr9z0t5w.jl:33\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppr9z0t5w.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppr9z0t5w.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppr9z0t5w.jl:34\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppr9z0t5w.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppr9z0t5w.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppr9z0t5w.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    is_palindrome(string) && return string\n    string = reverse(string)\n  \
    \  for i in 1:length(string)\n        if is_palindrome(string[1:i])\n        \
    \    return string[i+1:end] * string\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpivczj76u.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpivczj76u.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivczj76u.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivczj76u.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpivczj76u.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpivczj76u.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivczj76u.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivczj76u.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpivczj76u.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpivczj76u.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivczj76u.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivczj76u.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpivczj76u.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpivczj76u.jl:13\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivczj76u.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    postfix_len = longest_palindrome_suffix_len(string)\n    reverse_prefix =\
    \ reverse(string[1:end-postfix_len])\n    return string * reverse_prefix\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4w3g8hks.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4w3g8hks.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4w3g8hks.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4w3g8hks.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp4w3g8hks.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix_len not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4w3g8hks.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4w3g8hks.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4w3g8hks.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp4w3g8hks.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4w3g8hks.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4w3g8hks.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4w3g8hks.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp4w3g8hks.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4w3g8hks.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    \n    longest_suffix = Longest_palindromic_suffix(string)\n    longest_suffix_length\
    \ = length(longest_suffix)\n    string_length = length(string)\n    palindrome\
    \ = string\n    \n    if string_length == longest_suffix_length\n        return\
    \ palindrome\n    else\n        for i = string_length - longest_suffix_length\
    \ - 1:-1:1\n            palindrome = string[i] * palindrome\n        end\n   \
    \ end\n    \n    return palindrome\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp69onj_ct.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: Longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp69onj_ct.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp69onj_ct.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp69onj_ct.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp69onj_ct.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: Longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp69onj_ct.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp69onj_ct.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp69onj_ct.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp69onj_ct.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: Longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp69onj_ct.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp69onj_ct.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp69onj_ct.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp69onj_ct.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: Longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp69onj_ct.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_suffix = longest_palindromic_suffix(string)\n\
    \    prefix = string[1:end-length(longest_suffix)]\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4mr27wf1.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4mr27wf1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4mr27wf1.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4mr27wf1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4mr27wf1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4mr27wf1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4mr27wf1.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4mr27wf1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4mr27wf1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp4mr27wf1.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4mr27wf1.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4mr27wf1.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4mr27wf1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4mr27wf1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    longest_palindrome_suffix_len = find_longest_palindrome_suffix_len(string)\n\
    \    rev_of_prefix = reverse(string[1:end - longest_palindrome_suffix_len])\n\
    \    return string * rev_of_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg_okqec3.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpg_okqec3.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_okqec3.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_okqec3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpg_okqec3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpg_okqec3.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_okqec3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_okqec3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpg_okqec3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpg_okqec3.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg_okqec3.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg_okqec3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpg_okqec3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(st"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_okqec3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if is_palindrome(string)\n        return string\n    end\n    longest_palindrome_length\
    \ = -1\n    longest_palindrome_idx = -1\n    for i in 1:length(string)\n     \
    \   prefix = string[1:i]\n        if is_palindrome(prefix)\n            if length(prefix)\
    \ > longest_palindrome_length\n                longest_palindrome_length = length(prefix)\n\
    \                longest_palindrome_idx = i\n            end\n        end\n  \
    \  end\n    return string * reverse(string[1:longest_palindrome_idx])\nend\nmake_palindrome(\"\
    cat\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: is_palindrome not defined\nStacktrace:\n\
    \ [1] make_palindrome(string::String)\n   @ Main /tmp/tmpu5qnoazy.jl:13\n [2]\
    \ top-level scope\n   @ /tmp/tmpu5qnoazy.jl:29\nin expression starting at /tmp/tmpu5qnoazy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # find longest palindromic suffix in linear time\n    prefix_length = 0\n\
    \    for i = 1:length(string)\n        if string[i] == string[length(string) -\
    \ i + 1]\n            prefix_length += 1\n        else\n            break\n  \
    \      end\n    end\n    prefix = string[1:length(string) - prefix_length]\n \
    \   return string * reverse(prefix)\nend\n \n \nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppo0xcn6k.jl:34\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzyx\" == \"xyzyx\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppo0xcn6k.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppo0xcn6k.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppo0xcn6k.jl:36\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppo0xcn6k.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppo0xcn6k.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppo0xcn6k.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix which is a palindrome.\n    # We use find_best_palindrome_len,\
    \ which is roughly 2 times faster than find_best_palindrome.\n    best_palindrome_len\
    \ = find_best_palindrome_len(string)\n    if best_palindrome_len == length(string)\n\
    \        return string\n    end\n    return string * reverse(string[1:best_palindrome_len])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt3gr9q13.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_best_palindrome_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt3gr9q13.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt3gr9q13.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt3gr9q13.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpt3gr9q13.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_best_palindrome_len not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpt3gr9q13.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt3gr9q13.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt3gr9q13.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpt3gr9q13.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_best_palindrome_len not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt3gr9q13.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt3gr9q13.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt3gr9q13.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpt3gr9q13.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_best_palindrome_len not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt3gr9q"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3gr9q13.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    for i in length(string):-1:1\
    \ \n        if is_palindrome(string[1:i]) \n            return string * reverse(string[1:i])\n\
    \        end\n    end\n    return string * reverse(string[1:length(string)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkxdhw4k9.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpkxdhw4k9.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkxdhw4k9.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkxdhw4k9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkxdhw4k9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpkxdhw4k9.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkxdhw4k9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkxdhw4k9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkxdhw4k9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpkxdhw4k9.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkxdhw4k9.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkxdhw4k9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkxdhw4k9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpkxdhw4k9.jl:17\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkxdhw4k9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    result = string\n    for i in 1:length(string)\n        sfx = string[i:end]\n\
    \        if is_palindrome(sfx)\n            rev_pref = reverse(string[1:i-1])\n\
    \            result = string * rev_pref\n            break\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptsj2u4xu.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmptsj2u4xu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptsj2u4xu.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptsj2u4xu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptsj2u4xu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmptsj2u4xu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptsj2u4xu.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptsj2u4xu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptsj2u4xu.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmptsj2u4xu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptsj2u4xu.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptsj2u4xu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptsj2u4xu.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmptsj2u4xu.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptsj2u4xu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    let \n        len::Int = length(string)\n        if len == 0\n          \
    \  return string\n        end\n        for i in 1:len\n            if is_palindrome(string[i:len])\n\
    \                return string * string[1:i-1]\n            end\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeyvikjmj.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpeyvikjmj.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeyvikjmj.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeyvikjmj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeyvikjmj.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpeyvikjmj.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeyvikjmj.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeyvikjmj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeyvikjmj.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpeyvikjmj.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeyvikjmj.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeyvikjmj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeyvikjmj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpeyvikjmj.jl:19\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeyvikjmj.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix\n    longest_suffix_length = longest_palindromic_suffix_length(string)\n\
    \    # If there is no such suffix, we have to append reverse of string to the\
    \ end of it.\n    if longest_suffix_length == 0\n        return string * string[end:-1:end]\n\
    \    else\n        # Otherwise, we have to append reverse of the substring that\
    \ precedes the palindromic suffix.\n        # For example, if string is \"cab\"\
    , then we have palindromic suffix \"b\" and we have to append \"a\" to the end\
    \ of the string.\n        prefix_length = length(string) - longest_suffix_length\n\
    \        return string * string[prefix_length:-1:end]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeshmp4da.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeshmp4da.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeshmp4da.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeshmp4da.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeshmp4da.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeshmp4da.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeshmp4da.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeshmp4da.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeshmp4da.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeshmp4da.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeshmp4da.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeshmp4da.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeshmp4da.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeshmp4da.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    lps = longest_palindromic_suffix(string)\n    prefix = string[:end-lps]\n\
    \    return string * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2z0sybow.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2z0sybow.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2z0sybow.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2z0sybow.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2z0sybow.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2z0sybow.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2z0sybow.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2z0sybow.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2z0sybow.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2z0sybow.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2z0sybow.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2z0sybow.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2z0sybow.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2z0sybow.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    is_palindrome = make_is_palindrome(string)\n\
    \    longest_palindrome_length = 0\n    for i in 1:length(string)\n        if\
    \ is_palindrome(string[i:end])\n            longest_palindrome_length = i\n  \
    \      end\n    end\n    return string * reverse(string[1:length(string) - longest_palindrome_length])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw1alag0h.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: make_is_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpw1alag0h.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw1alag0h.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1alag0h.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpw1alag0h.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: make_is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpw1alag0h.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw1alag0h.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1alag0h.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpw1alag0h.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: make_is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpw1alag0h.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw1alag0h.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1alag0h.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpw1alag0h.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: make_is_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpw1alag0h.jl:16\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw1alag0h.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    length = length(string)\n    for i in 1:length\n        if string[i] == string[length]\n\
    \            if is_palindrome(string[i:length])\n                return string\
    \ * reverse(string[1:i])\n        end\n    end\n    return string * reverse(string[1:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7e0xp76n.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7e0xp76n.jl:1\n\
    in expression starting at /tmp/tmp7e0xp76n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    postfix_length\
    \ = longest_palindromic_suffix_length(string)\n    prefix = string[1:end-postfix_length]\n\
    \    return string * prefix[end:-1:1]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqzhvpu83.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqzhvpu83.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqzhvpu83.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqzhvpu83.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpqzhvpu83.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqzhvpu83.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqzhvpu83.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqzhvpu83.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpqzhvpu83.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqzhvpu83.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqzhvpu83.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqzhvpu83.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpqzhvpu83.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_pal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqzhvpu83.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string === \"\"\n        return \"\"\n    end\n    suffix = longest_palindrome_suffix(string)\n\
    \    prefix = reverse(string[1:end-length(suffix)])\n    return string * prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7uw0wtlo.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp7uw0wtlo.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7uw0wtlo.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7uw0wtlo.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7uw0wtlo.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp7uw0wtlo.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7uw0wtlo.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7uw0wtlo.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7uw0wtlo.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp7uw0wtlo.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7uw0wtlo.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7uw0wtlo.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7uw0wtlo.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ M"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7uw0wtlo.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix_length = longest_palindromic_suffix(string)\n    return string * string[1:suffix_length]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpako0fy3l.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpako0fy3l.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpako0fy3l.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpako0fy3l.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpako0fy3l.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpako0fy3l.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpako0fy3l.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpako0fy3l.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpako0fy3l.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpako0fy3l.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpako0fy3l.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpako0fy3l.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpako0fy3l.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpako0fy3l.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    max_length = 0\n   \
    \ i = string[1:end]\n    while i != \"\"\n        if is_palindrome(i)\n      \
    \      max_length = length(i)\n            break\n        end\n        i = i[1:end]\n\
    \    end\n    postfix = string[length(string)-max_length+1:end]\n    prefix =\
    \ string[1:length(string)-max_length]\n    return string * reverse(prefix)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb8lneojf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb8lneojf.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb8lneojf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb8lneojf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpb8lneojf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb8lneojf.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb8lneojf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb8lneojf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpb8lneojf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb8lneojf.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb8lneojf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb8lneojf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpb8lneojf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpb8lneojf.jl:19\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8lneojf.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_match = \"\"\
    \n    for n in length(string)::Int \n        # Do we have a palindrome?\n    \
    \    if string[1:n] == string[n:-1:-1]\n            longest_match = string[1:n]\n\
    \        end\n    end\n    return string * string[n:-1:-1]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1el_itsw.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit\
    \ String at index [0]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::Base.var\"\
    #345#346\"{String, StepRange{Int64, Int64}})(io::IOBuffer)\n      @ Base ./strings/basic.jl:193\n\
    \    [5] sprint(::Function; context::Nothing, sizehint::Int64)\n      @ Base ./strings/io.jl:114\n\
    \    [6] getindex\n      @ ./strings/basic.jl:192 [inlined]\n    [7] make_palindrome(string::String)\n\
    \      @ Main /tmp/tmp1el_itsw.jl:19\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp1el_itsw.jl:31 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1el_itsw.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1el_itsw.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [0]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::Base.var\"\
    #345#346\"{String, StepRange{Int64, Int64}})(io::IOBuffer)\n      @ Base ./strings/basic.jl:193\n\
    \    [5] sprint(::Function; context::Nothing, sizehint::Int64)\n      @ Base ./strings/io.jl:114\n\
    \    [6] getindex\n      @ ./strings/basic.jl:192 [inlined]\n    [7] make_palindrome(string::String)\n\
    \      @ Main /tmp/tmp1el_itsw.jl:19\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp1el_itsw.jl:32 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1el_itsw.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    if n == 0\n        return \"\"\n    end\n    palindrome_suffix\
    \ = LongestPalindromeSuffix(string)\n    for suffix in palindrome_suffix\n   \
    \     if suffix == string\n            return string\n        end\n        prefix\
    \ = (string[1:n]...string[suffix+1:n])\n        return string * reverse(prefix)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6liem_yf.jl:22\nin expression starting at\
    \ /tmp/tmp6liem_yf.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    P = string\n    n = length(string)\n    revP = reverse(string)\n    revP_plus_P\
    \ = revP * \" \" * P\n    lps = lps_array(revP_plus_P)\n    p = last(lps)\n  \
    \  if p == n\n        return P\n    else\n        return P * reverse(P[1:n-p])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwwvi3t2c.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: lps_array not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwwvi3t2c.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwwvi3t2c.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwwvi3t2c.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpwwvi3t2c.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: lps_array not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwwvi3t2c.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwwvi3t2c.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwwvi3t2c.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpwwvi3t2c.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: lps_array not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwwvi3t2c.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwwvi3t2c.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwwvi3t2c.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpwwvi3t2c.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: lps_array not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpwwvi3t2c.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwwvi3t2c.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    lps = longest_palindromic_suffix(string)\n    reverse_prefix = reverse(string[1:length(lps)])\n\
    \    return string * reverse_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps9faikvf.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmps9faikvf.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9faikvf.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9faikvf.jl:21\ntest set:\
    \ Error During Test at /tmp/tmps9faikvf.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmps9faikvf.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9faikvf.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9faikvf.jl:21\ntest set:\
    \ Error During Test at /tmp/tmps9faikvf.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmps9faikvf.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9faikvf.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9faikvf.jl:21\ntest set:\
    \ Error During Test at /tmp/tmps9faikvf.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps9faikvf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest postfix of the string that is a palindrome.\n    # This\
    \ is used as a starting point for our result.\n    # We will extend this result\
    \ with a prefix which is a reverse of a string postfix.\n    is_palindrome(string)\
    \ && return string\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpunzu5vsb.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpunzu5vsb.jl:1\n\
    in expression starting at /tmp/tmpunzu5vsb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix::String = find_palindrome_postfix(string)\n    prefix::String = string[1:end-length(suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd4_p7ksh.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd4_p7ksh.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4_p7ksh.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4_p7ksh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpd4_p7ksh.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindrome_postfix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpd4_p7ksh.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4_p7ksh.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4_p7ksh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpd4_p7ksh.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd4_p7ksh.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4_p7ksh.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4_p7ksh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpd4_p7ksh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd4_p7ksh.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd4_p7ksh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    return string + reverse(prefix(string))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphyifn247.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: prefix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphyifn247.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphyifn247.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphyifn247.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphyifn247.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: prefix not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphyifn247.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphyifn247.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphyifn247.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphyifn247.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: prefix not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphyifn247.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphyifn247.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphyifn247.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphyifn247.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: prefix not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphyifn247.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphyifn247.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix_len = find_longest_palindrome_suffix(string)\n    return string *\
    \ string[1:suffix_len]\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwowuq314.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpwowuq314.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwowuq314.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwowuq314.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpwowuq314.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpwowuq314.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwowuq314.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwowuq314.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpwowuq314.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpwowuq314.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwowuq314.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwowuq314.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpwowuq314.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwowuq314.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix::String = longest_suffix_palindrome(string)\n    prefix::String =\
    \ reverse(string[1:end])\n    return string * prefix\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpypmyj6vt.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_suffix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpypmyj6vt.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpypmyj6vt.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpypmyj6vt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpypmyj6vt.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpypmyj6vt.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpypmyj6vt.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpypmyj6vt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpypmyj6vt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_suffix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpypmyj6vt.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpypmyj6vt.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpypmyj6vt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpypmyj6vt.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_suffix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpypmyj6vt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # find the position of a longest palindromic suffix\n    pos::Int = longest_palindromic_suffix(string)\n\
    \    # append a string prefix that comes before the palindromic suffix\n    #\
    \ since the length of prefix and suffix are the same, we need to append only the\
    \ 'pos' characters of prefix\n    return string * string[1:pos]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd3vr0u03.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd3vr0u03.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd3vr0u03.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd3vr0u03.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd3vr0u03.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpd3vr0u03.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd3vr0u03.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd3vr0u03.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd3vr0u03.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpd3vr0u03.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd3vr0u03.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd3vr0u03.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd3vr0u03.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd3vr0u03.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    str::Vector{Char} = collect(string)\n    n::Int = length(str)\n    if n ==\
    \ 0\n        return string\n    end\n    # Find a longest palindromic suffix\n\
    \    suffix_range = find_palindrome_suffix(str)\n    # Append reverse of str[1:(n-suffix_range[1])]\n\
    \    str = append!(str, reverse(str[1:(n-suffix_range[1])]))\n    return string(str)\n\
    end\n \n@testset \"simple\" begin\n    @test make_palindrome(\"\") == \"\"\n \
    \   @test make_palindrome(\"cat\") == \"catac\"\n    @test make_palindrome(\"\
    cata\") == \"catac\"\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpo6rmkimx.jl:25\nin expression starting at /tmp/tmpo6rmkimx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) <= 1\n        return string\n    end\n    i = 1\n    while\
    \ i <= length(string)\n        if string[1:i] == reverse(string[end - i + 1:end])\n\
    \            # We know that the prefix is not a palindrome, as otherwise\n   \
    \         # we would have returned the string earlier\n            return string\
    \ * reverse(string[1:end - i + 1])\n        end\n        i += 1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjk2pou8j.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjk2pou8j.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjk2pou8j.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjk2pou8j.jl:30\ntest set:\
    \ Test Failed at /tmp/tmpjk2pou8j.jl:34\n  Expression: candidate(\"xyx\") == \"\
    xyx\"\n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjk2pou8j.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjk2pou8j.jl:30\ntest set: Error\
    \ During Test at /tmp/tmpjk2pou8j.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjk2pou8j.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    return string * \"ac\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvr216696.jl:20\n  Expression: candidate(\"\
    \") == \"\"\n   Evaluated: \"ac\" == \"\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvr216696.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvr216696.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvr216696.jl:21\n  Expression: candidate(\"x\") == \"x\"\n\
    \   Evaluated: \"xac\" == \"x\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvr216696.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvr216696.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvr216696.jl:22\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzac\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvr216696.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvr216696.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvr216696.jl:23\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxac\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvr216696.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvr216696.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvr216696.jl:24\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryac\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/sr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvr216696.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    # Pad string\
    \ with special character.\n    # This helps us to find an identical postfix.\n\
    \    string = string * \"#\" * reverse(string)\n    # Preprocess string to find\
    \ the longest proper suffix that is also a prefix.\n    # Indices correspond to\
    \ the suffix, values - to the length of the proper suffix that is a prefix.\n\
    \    pi = z_algorithm(string)\n    # Get length of the longest proper suffix that\
    \ is also a prefix\n    prefix_length = pi[end]\n    # Get length of the proper\
    \ suffix that is a prefix\n    suffix_length = prefix_length + 1\n    # Return\
    \ string with a prefix appended to it.\n    return string[1:suffix_length] * reverse(string[suffix_length:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfeueetdm.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: z_algorithm not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpfeueetdm.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfeueetdm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfeueetdm.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfeueetdm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: z_algorithm not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpfeueetdm.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfeueetdm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfeueetdm.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfeueetdm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: z_algorithm not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpfeueetdm.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfeueetdm.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfeueetdm.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpfeueetdm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: z_algorithm not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpfeueetdm.jl:21\n\
    \   [2] macro expansion\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfeueetdm.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix.\n    palindrome_suffix = \"\"\n  \
    \  for i in 1:length(string)\n        candidate = string[i:end]\n        if is_palindrome(candidate)\n\
    \            palindrome_suffix = candidate\n            break\n        end\n \
    \   end\n    # Palindrome prefix is the reverse of whatever comes before the palindromic\
    \ suffix.\n    prefix = string[1:end-length(palindrome_suffix)]\n    return string\
    \ * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp626zm3u4.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp626zm3u4.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp626zm3u4.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp626zm3u4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp626zm3u4.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp626zm3u4.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp626zm3u4.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp626zm3u4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp626zm3u4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp626zm3u4.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp626zm3u4.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp626zm3u4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp626zm3u4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp626zm3u4.jl:17\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp626zm3u4.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    string_length = length(string)\n    match_length = 0\n    # find the longest\
    \ postfix that is a palindrome\n    for i = 1:string_length\n        if string[1:i]\
    \ == string[string_length-i+1:string_length]\n            match_length = i\n \
    \       end\n    end\n    # append reverse of string prefix that comes before\
    \ palindromic suffix\n    return string * string[string_length-match_length+1:1:-1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpel7yy9i6.jl:31\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpel7yy9i6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpel7yy9i6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpel7yy9i6.jl:33\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpel7yy9i6.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpel7yy9i6.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpel7yy9i6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    len = length(string)\n    if len == 0\n        return \"\"\n    end\n   \
    \ maxi = 0\n    maxj = 0\n    k = 1\n    while k <= len\n        i = 1\n     \
    \   j = len - k + 1\n        while i <= j && string[i] == string[j]\n        \
    \    i += 1\n            j -= 1\n        end\n        if j < i\n            maxi\
    \ = i\n            maxj = j\n        end\n        k += 1\n    end\n    return\
    \ string[1:maxi] * reverse(string[maxj+1:len]) * string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5dupmmbb.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit\
    \ String at index [1:2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmp5dupmmbb.jl:33\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp5dupmmbb.jl:41 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp5dupmmbb.jl:39\ntest set:\
    \ Test Failed at /tmp/tmp5dupmmbb.jl:42\n  Expression: candidate(\"xyz\") == \"\
    xyzyx\"\n   Evaluated: \"xyzyxxyz\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5dupmmbb.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5dupmmbb.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp5dupmmbb.jl:43\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5dupmmbb.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5dupmmbb.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp5dupmmbb.jl:44\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jeyrrejjerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5dupmmbb.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1."
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5dupmmbb.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    for i in reverse(1:length(string))\n\
    \        @assert i >= 1\n        if is_palindrome(string[i:end])\n           \
    \ return string * reverse(string[1:i])\n        end\n    end\n    # Because we\
    \ already checked \"\" suffix, \n    # when we get here it means the whole string\
    \ is a palindrome.\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1amtgwwr.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1amtgwwr.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1amtgwwr.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1amtgwwr.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp1amtgwwr.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1amtgwwr.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1amtgwwr.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1amtgwwr.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp1amtgwwr.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1amtgwwr.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1amtgwwr.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1amtgwwr.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp1amtgwwr.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp1amtgwwr.jl:18\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1amtgwwr.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    longest_suffix = get_longest_palindromic_suffix(string)\n    return string\
    \ * string[1:end-length(longest_suffix)]\nend\n```\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_dq1xjnh.jl:16\nin expression starting at\
    \ /tmp/tmp_dq1xjnh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    l = length(string)\n    pal = longest_palindrome(string)\n    return string\
    \ * reverse(string[1:l-length(pal)])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7i6_wxqh.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp7i6_wxqh.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7i6_wxqh.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7i6_wxqh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp7i6_wxqh.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7i6_wxqh.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7i6_wxqh.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7i6_wxqh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp7i6_wxqh.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7i6_wxqh.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7i6_wxqh.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7i6_wxqh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp7i6_wxqh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7i6_wxqh.jl:14\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7i6_wxqh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    dp = zeros(Int64, n, n)\n    for i in 1:n\n     \
    \   dp[i, i] = 1\n    end\n    for l in 2:n\n        for i in 1:(n-l+1)\n    \
    \        j = i + l - 1\n            if (string[i] == string[j]) && (l == 2)\n\
    \                dp[i, j] = 2\n            elseif (string[i] == string[j]) &&\
    \ (dp[i+1, j-1] > 0)\n                dp[i, j] = dp[i+1, j-1] + 2\n          \
    \  end\n        end\n    end\n    # find the most palindromic postfix\n    max_len\
    \ = 0\n    max_i = 0\n    for i in 1:n\n        if dp[i, n] > max_len\n      \
    \      max_len = dp[i, n]\n            max_i = i\n        end\n    end\n    #\
    \ compute the prefix of the string (to reverse it)\n    # and the suffix of the\
    \ string that is not part of the palindrome\n    string_prefix = string[1:(max_i-1)]\n\
    \    string_postfix = string[(max_i+max_len):n]\n    return string * reverse(string_prefix)\
    \ * string_postfix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn3rylmce.jl:48\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [0:0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmpn3rylmce.jl:40\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpn3rylmce.jl:48 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpn3rylmce.jl:47\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn3rylmce.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    palindrome_length = longest_palindrome_substring_postfix(string).length\n\
    \    return string * string[1:end-palindrome_length]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnwq2xnti.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_substring_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnwq2xnti.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnwq2xnti.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnwq2xnti.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnwq2xnti.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_substring_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnwq2xnti.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnwq2xnti.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnwq2xnti.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnwq2xnti.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_substring_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpnwq2xnti.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnwq2xnti.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnwq2xnti.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnwq2xnti.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_substring_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palin"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwq2xnti.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    l = length(string)\n\
    \    for i = l - 1:-1:0\n        if string[1:i] == reverse(string[i+1:l])\n  \
    \          return string * reverse(string[1:i])\n        end\n    end\n    return\
    \ string * reverse(string[1:l])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp24hlb1cg.jl:30\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24hlb1cg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24hlb1cg.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp24hlb1cg.jl:31\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzzyx\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24hlb1cg.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24hlb1cg.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp24hlb1cg.jl:32\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp24hlb1cg.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24hlb1cg.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp24hlb1cg.jl:33\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp24hlb1cg.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp24hlb1cg.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp24hlb1cg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    if length(string)\
    \ == 1\n        return string * 2\n    end\n    palindrome = get_longest_palindrome(string)\n\
    \    if length(palindrome) == length(string)\n        return string\n    end\n\
    \    prefix = string[1:end-length(palindrome)]\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr5z_o8dp.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"x\") == \"x\"\\n  MethodError: no method\
    \ matching *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n     @ Main /tmp/tmpr5z_o8dp.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpr5z_o8dp.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpr5z_o8dp.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpr5z_o8dp.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\\n  UndefVarError: get_longest_palindrome not\
    \ defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n     @ Main\
    \ /tmp/tmpr5z_o8dp.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpr5z_o8dp.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpr5z_o8dp.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpr5z_o8dp.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\\n  UndefVarError: get_longest_palindrome not\
    \ defined\\n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n     @ Main\
    \ /tmp/tmpr5z_o8dp.jl:19\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Get string length\n    length = length(string)\n    # It's a palindrome\
    \ itself\n    if length == 0 || length == 1\n        return string\n    end\n\
    \    # Allocate the longest palindrome suffix array\n    # and initialize it with\
    \ zeros\n    longest_palindrome_suffix = zeros(Int32, length)\n    # Set the longest\
    \ palindrome suffix for the first letter\n    longest_palindrome_suffix[1] = 0\n\
    \    # Find the longest palindrome suffix for every letter\n    for i in 2:length\n\
    \        # j is the length of the longest palindrome suffix\n        # at the\
    \ previous letter\n        j = longest_palindrome_suffix[i-1]\n        # If the\
    \ length of the suffix is 0\n        # or if the next character of the suffix\
    \ is the same\n        # as the next character of the string, increase the length\n\
    \        # of the suffix by 1.\n        while j > 0 && string[j+1] != string[i]\n\
    \            j = longest_palindrome_suffix[j]\n        end\n        if string[j+1]\
    \ == string[i]\n            j += 1\n        end\n        longest_palindrome_suffix[i]\
    \ = j\n    end\n    # Get the length of the longest palindrome suffix\n    longest_palindrome_suffix_length\
    \ = longest_palindrome_suffix[length]\n    # Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    # The prefix\
    \ begins at the very beginning of the string.\n    # The prefix ends at the beginning\
    \ of the palindromic suffix.\n    return string * string[1:longest_palindrome_suffix_length]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmavfw2ef.jl:53\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmavfw2ef.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmavfw2ef.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmavfw2ef.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpmavfw2ef.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmavfw2ef.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmavfw2ef.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmavfw2ef.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpmavfw2ef.jl:55\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmavfw2ef.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmavfw2ef.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmavfw2ef.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpmavfw2ef.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmavfw2ef.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmavfw2ef.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    length = length(string)\n    for i in 1:length\n        suffix = string[length-i+1:length]\n\
    \        if is_palindrome(suffix)\n            prefix = string[1:length-i]\n \
    \           return string * reverse(prefix)\n        end\n    end\n    throw(DomainError())\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsqp7fpfs.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsqp7fpfs.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsqp7fpfs.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsqp7fpfs.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpsqp7fpfs.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsqp7fpfs.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsqp7fpfs.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsqp7fpfs.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpsqp7fpfs.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsqp7fpfs.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsqp7fpfs.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsqp7fpfs.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpsqp7fpfs.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpsqp7fpfs.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsqp7fpfs.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    # Extract the longest\
    \ palindromic suffix\n    a, b = find_longest_palindrome_suffix(string)\n    #\
    \ Reverse the prefix and append to the end of the string\n    return string *\
    \ reverse(string[1:a])\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpabiakhnt.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpabiakhnt.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabiakhnt.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabiakhnt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpabiakhnt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpabiakhnt.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabiakhnt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabiakhnt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpabiakhnt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpabiakhnt.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabiakhnt.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabiakhnt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpabiakhnt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(stri"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpabiakhnt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix = \"\"\n    for i in 1:length(string)\n        s = string[end-i+1:end]\n\
    \        if is_palindrome(s)\n            suffix = s\n            break\n    \
    \    end\n    end\n    return string * reverse(string[1:end-length(suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr3h5au_g.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr3h5au_g.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr3h5au_g.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr3h5au_g.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpr3h5au_g.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr3h5au_g.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr3h5au_g.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr3h5au_g.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpr3h5au_g.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr3h5au_g.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr3h5au_g.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr3h5au_g.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpr3h5au_g.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr3h5au_g.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr3h5au_g.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the postfix of string that is palindrome\n    str_arr = String[]\n\
    \    for i in range(1,length(string))\n        str_arr = string[i:end]\n     \
    \   if is_palindrome(str_arr)\n            break\n    end\n    # Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    return string * reverse(string[1:i])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvdti9xmx.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvdti9xmx.jl:1\n\
    in expression starting at /tmp/tmpvdti9xmx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if isempty(string)\n        return string\n    end\n    if ispalindrome(string)\n\
    \        return string\n    end\n    string_length = length(string)\n    for i\
    \ in 1:string_length\n        string_prefix = string[1:i]\n        string_suffix\
    \ = string[i:string_length]\n        if ispalindrome(string_suffix)\n        \
    \    return string*reverse(string_prefix)\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_20q9vpm.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_20q9vpm.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_20q9vpm.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_20q9vpm.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_20q9vpm.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_20q9vpm.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_20q9vpm.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_20q9vpm.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_20q9vpm.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_20q9vpm.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_20q9vpm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_20q9vpm.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp_20q9vpm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp_20q9vpm.jl:16\n\
    \   [2] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_20q9vpm.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    string_size = length(string)\n\
    \    for i in string_size:-1:0\n        if is_palindrome(string[1:i])\n      \
    \      return string * reverse(string[1:i])\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw7m5taqy.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpw7m5taqy.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw7m5taqy.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw7m5taqy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw7m5taqy.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpw7m5taqy.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw7m5taqy.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw7m5taqy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw7m5taqy.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpw7m5taqy.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw7m5taqy.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw7m5taqy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw7m5taqy.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpw7m5taqy.jl:18\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw7m5taqy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    string = string\n    palindrome_postfix = longest_palindrome_postfix(string)\n\
    \    rest_string = string[1:end]\n    return \"$(string)$(reverse(rest_string)[1:end-length(palindrome_postfix)])\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphemnj_cf.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphemnj_cf.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphemnj_cf.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphemnj_cf.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphemnj_cf.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_postfix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphemnj_cf.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphemnj_cf.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphemnj_cf.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphemnj_cf.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphemnj_cf.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphemnj_cf.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphemnj_cf.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphemnj_cf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphemnj_cf.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if is_palindrome(string)\n        return string\n    end\n    let n = length(string)\n\
    \    let pal_suffix = find_longest_palindrome_suffix(string)\n    let prefix =\
    \ reverse(string[1:n-pal_suffix])\n    return string * prefix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"let\" at /tmp/tmpcgdcsycz.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcgdcsycz.jl:1\n\
    in expression starting at /tmp/tmpcgdcsycz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    for i in 0:n\n        p = is_palindrome(string[1:n-i])\n\
    \        if p\n            return string * reverse(string[1:n-i])\n        end\n\
    \    end\n    return string * reverse(string[1:n])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5h12ktt2.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5h12ktt2.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5h12ktt2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5h12ktt2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5h12ktt2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5h12ktt2.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5h12ktt2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5h12ktt2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5h12ktt2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5h12ktt2.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5h12ktt2.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5h12ktt2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5h12ktt2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5h12ktt2.jl:15\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5h12ktt2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return \"\"\n    end\n    if is_palindrome(string)\n\
    \        return string\n    end\n    for i in 1:length(string)\n        if is_palindrome(string[1:end-i+1])\n\
    \            return string * reverse(string[1:end-i+1])\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyoktwdrj.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyoktwdrj.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyoktwdrj.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyoktwdrj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyoktwdrj.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyoktwdrj.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyoktwdrj.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyoktwdrj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyoktwdrj.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyoktwdrj.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyoktwdrj.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyoktwdrj.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyoktwdrj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpyoktwdrj.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyoktwdrj.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    #Longest palindromic suffix\n    longest = 0\n  \
    \  for i in 1:n\n        substr = string[i:n]\n        if is_palindrome(substr)\n\
    \            longest = n - i\n            break\n        end\n    end\n    #Append\
    \ reverse of a string that comes before the palindromic suffix\n    string_to_append\
    \ = string[1:n-longest]\n    string = string * string_to_append\n    return string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphh_jo837.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphh_jo837.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh_jo837.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh_jo837.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphh_jo837.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphh_jo837.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh_jo837.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh_jo837.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphh_jo837.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphh_jo837.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphh_jo837.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphh_jo837.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphh_jo837.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmphh_jo837.jl:18\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphh_jo837.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    palindrome = longest_palindrome_suffix(string)\n    prefix = string[1:end]\n\
    \    palindrome = prefix . reverse(prefix) . palindrome\n    return palindrome\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"prefix .\"\
    \ at /tmp/tmphfq7hfi0.jl:15\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphfq7hfi0.jl:15\n\
    in expression starting at /tmp/tmphfq7hfi0.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    if n == 0 \n        return \"\"\n    end\n    i =\
    \ n\n    while i > 0 \n        i -= 1\n        if is_palindrome(string[1:i])\n\
    \            return string * string[i:n:-1]\n        end\n    end\n    return\
    \ string * string[n:-1:-1]\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4cbzhhwo.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4cbzhhwo.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4cbzhhwo.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4cbzhhwo.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp4cbzhhwo.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4cbzhhwo.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4cbzhhwo.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4cbzhhwo.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp4cbzhhwo.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4cbzhhwo.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4cbzhhwo.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4cbzhhwo.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp4cbzhhwo.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4cbzhhwo.jl:20\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4cbzhhwo.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    N = length(string)\n    longest_palindrome_suffix_length = longest_palindrome_suffix_length(string)\n\
    \    prefix = string[1:N - longest_palindrome_suffix_length]\n    suffix = string[N\
    \ - longest_palindrome_suffix_length + 1:end]\n    return string * suffix * prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplyhmp8os.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplyhmp8os.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplyhmp8os.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplyhmp8os.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplyhmp8os.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplyhmp8os.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplyhmp8os.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplyhmp8os.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplyhmp8os.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplyhmp8os.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplyhmp8os.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplyhmp8os.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplyhmp8os.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::St"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyhmp8os.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    max_postfix_palindrome = find_max_postfix_palindrome(string)\n    prefix\
    \ = substr(string, 0, length(string) - length(max_postfix_palindrome))\n    return\
    \ string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptzntz_ss.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_max_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptzntz_ss.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptzntz_ss.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptzntz_ss.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptzntz_ss.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_max_postfix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptzntz_ss.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptzntz_ss.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptzntz_ss.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptzntz_ss.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_max_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptzntz_ss.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptzntz_ss.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptzntz_ss.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptzntz_ss.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_max_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptzntz_ss.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    string_length = length(string)\n\
    \    suffix_length = find_longest_palindrome_length(string)\n    return string\
    \ * string[1:string_length - suffix_length + 1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzc8mghmy.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzc8mghmy.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzc8mghmy.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzc8mghmy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzc8mghmy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzc8mghmy.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzc8mghmy.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzc8mghmy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzc8mghmy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpzc8mghmy.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzc8mghmy.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzc8mghmy.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzc8mghmy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(stri"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzc8mghmy.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    palindrome = is_palindrome(string)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbgyqogk.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbgyqogk.jl:1\n\
    in expression starting at /tmp/tmpqbgyqogk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    max_pali_len = find_longest_palindrome_suffix(string)\n    return string\
    \ * string[1:max_pali_len]\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp61a0r6oo.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp61a0r6oo.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61a0r6oo.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61a0r6oo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp61a0r6oo.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp61a0r6oo.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61a0r6oo.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61a0r6oo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp61a0r6oo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp61a0r6oo.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61a0r6oo.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61a0r6oo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp61a0r6oo.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp61a0r6oo.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    s = string\n    i = length(s)\n    while i > 0 && ispalindrome(s[1:i]) ==\
    \ false\n        i -= 1\n    end\n    return s * reverse(s[1:length(s)-i+1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmig0pa8v.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [1:1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmpmig0pa8v.jl:18\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmig0pa8v.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmig0pa8v.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmig0pa8v.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmig0pa8v.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmig0pa8v.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmig0pa8v.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmig0pa8v.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmig0pa8v.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmig0pa8v.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmig0pa8v.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmig0pa8v.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: ispalindrome not "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmig0pa8v.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix = reverse(string)\n    size = length(string)\n    while size > 0\n\
    \        if ends_with(string, suffix)\n            return string * reverse(string[1:size])\n\
    \        end\n        size -= 1\n        suffix = suffix[2:end]\n    end\n   \
    \ # The string is a palindrome and does not need to be altered.\n    return string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpezkr421w.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: ends_with not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpezkr421w.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpezkr421w.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpezkr421w.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpezkr421w.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: ends_with not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpezkr421w.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpezkr421w.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpezkr421w.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpezkr421w.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: ends_with not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpezkr421w.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpezkr421w.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpezkr421w.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpezkr421w.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: ends_with not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpezkr421w.jl:16\n\
    \   [2] macro expansion\n     @ /shared"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpezkr421w.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    slen = length(string)\n    if slen <= 1\n        return string\n    end\n\
    \    endi = 0\n    while endi < slen\n        if is_palindrome(string[endi:slen])\n\
    \            break\n        end\n        endi += 1\n    end\n    if endi == slen\n\
    \        return string\n    end\n    return string * string[1:endi]'\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_577_ema.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access\
    \ 3-codeunit String at index [0:3]\n  Stacktrace:\n   [1] checkbounds\n     @\
    \ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261\
    \ [inlined]\n   [3] make_palindrome(string::String)\n     @ Main /tmp/tmp_577_ema.jl:19\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_577_ema.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp_577_ema.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_577_ema.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  BoundsError: attempt to access 3-codeunit String\
    \ at index [0:3]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmp_577_ema.jl:19\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_577_ema.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp_577_ema.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_577_ema.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  BoundsError: attempt to access 5-codeunit\
    \ String at index [0:5]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmp_577_ema.jl:19\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_577_ema.jl:38 [inlined]\n\
    \   [6] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_577_ema.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Reverse the supplied string to \n    # find the longest palindromic postfix\n\
    \    rev_string = reverse(string)\n    # Find the length of the longest palindromic\
    \ postfix\n    # Find the end of the prefix to be appended to the supplied string\n\
    \    # Append this prefix to the supplied string\n    # Return the result\n  \
    \  return string * make_palindrome(string[1:end], rev_string[1:end])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5j0xhi5f.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching make_palindrome(::String,\
    \ ::String)\n  Closest candidates are:\n    make_palindrome(::String) at /tmp/tmp5j0xhi5f.jl:12\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5j0xhi5f.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5j0xhi5f.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5j0xhi5f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5j0xhi5f.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching make_palindrome(::String,\
    \ ::String)\n  Closest candidates are:\n    make_palindrome(::String) at /tmp/tmp5j0xhi5f.jl:12\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5j0xhi5f.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5j0xhi5f.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5j0xhi5f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5j0xhi5f.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  MethodError: no method matching make_palindrome(::String,\
    \ ::String)\n  Closest candidates are:\n    make_palindrome(::String) at /tmp/tmp5j0xhi5f.jl:12\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5j0xhi5f.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5j0xhi5f.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] to"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5j0xhi5f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    if (n == 0) return \"\"\n    if (n == 1) return string\n\
    \    for i in 0:n\n        if is_palindrome(string[1:n-i]) \n            return\
    \ string * reverse(string[1:n-i])\n        end\n    end\n    return \"\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoer2k79m.jl:1\nin expression starting at /tmp/tmpoer2k79m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Create a reverse of the supplied string\n    rev = reverse(string)\n  \
    \  # Append the reverse to the original string and concatenate it with '$' to\
    \ prevent catacatac from being recognized as palindrome\n    comp = string * \"\
    \u221E\" * rev\n    # Perform KMP on the resulting string and find the position\
    \ of the longest palindromic suffix in comp\n    pos = max(kmp(comp))\n    # Cut\
    \ off the last pos+1 characters of string (last pos+1 characters are a palindrome)\n\
    \    # and append a reversed first part of string\n    return string[1:pos+1]\
    \ * \"\u221E\" * reverse(string[1:pos+1])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvzg_jsbb.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: kmp not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvzg_jsbb.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvzg_jsbb.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvzg_jsbb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvzg_jsbb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: kmp not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvzg_jsbb.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvzg_jsbb.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvzg_jsbb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvzg_jsbb.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: kmp not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvzg_jsbb.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvzg_jsbb.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvzg_jsbb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvzg_jsbb.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: kmp not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpvzg_jsbb.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvzg_jsbb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix = suffix_palindrome(string)\n    prefix = String(string[1:end-suffix])\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmaush8lp.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: suffix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpmaush8lp.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmaush8lp.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmaush8lp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmaush8lp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmaush8lp.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmaush8lp.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmaush8lp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmaush8lp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmaush8lp.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmaush8lp.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmaush8lp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmaush8lp.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpmaush8lp.jl:13\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmaush8lp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    longest_postfix_palindrome_length\
    \ = longest_palindrome_length(string)\n    reverse_prefix = reverse(string[1:end-longest_postfix_palindrome_length])\n\
    \    return string * reverse_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeinyf0z2.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeinyf0z2.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeinyf0z2.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeinyf0z2.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpeinyf0z2.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeinyf0z2.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeinyf0z2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeinyf0z2.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpeinyf0z2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_length not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeinyf0z2.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeinyf0z2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeinyf0z2.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpeinyf0z2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ M"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeinyf0z2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    len = length(string)\n    len_half = Int(ceil(len/2))\n    is_odd = len %\
    \ 2 != 0\n    suffix = string[len_half:len]\n    prefix = string[1:len_half]\n\
    \    if is_odd\n        prefix = string[1:len_half-1]\n    end\n    return string\
    \ * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpllmc72oa.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [0:0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmpllmc72oa.jl:16\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpllmc72oa.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpllmc72oa.jl:27\ntest set:\
    \ Test Failed at /tmp/tmpllmc72oa.jl:30\n  Expression: candidate(\"xyz\") == \"\
    xyzyx\"\n   Evaluated: \"xyzx\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpllmc72oa.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpllmc72oa.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpllmc72oa.jl:31\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpllmc72oa.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpllmc72oa.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpllmc72oa.jl:32\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpllmc72oa.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpllmc72oa.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return \"\"\n    end\n    right_index = index_longest_palindrome_suffix(string)\n\
    \    return string * (string[1:length(string) - right_index + 1])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpknahodkf.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: index_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpknahodkf.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpknahodkf.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpknahodkf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpknahodkf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: index_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpknahodkf.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpknahodkf.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpknahodkf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpknahodkf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: index_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpknahodkf.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpknahodkf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpknahodkf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpknahodkf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: index_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome("
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpknahodkf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    last_i = 0\n    for i in 1:length(string)\n        if is_palindrome(string[i:end])\n\
    \            last_i = i\n            break\n        end\n    end\n    return string\
    \ * reverse(string[1:last_i])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4jf2o5yx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4jf2o5yx.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4jf2o5yx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4jf2o5yx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4jf2o5yx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4jf2o5yx.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4jf2o5yx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4jf2o5yx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4jf2o5yx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4jf2o5yx.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4jf2o5yx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4jf2o5yx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4jf2o5yx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4jf2o5yx.jl:15\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4jf2o5yx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    prefix = \"a\"\n   \
    \ for i in 1:length(string)\n        if is_palindrome(string[1:i])\n         \
    \   prefix = string[1:i]\n        end\n    end\n    return string * reverse(prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr0z3jty6.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr0z3jty6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0z3jty6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0z3jty6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpr0z3jty6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr0z3jty6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0z3jty6.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0z3jty6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpr0z3jty6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr0z3jty6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0z3jty6.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0z3jty6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpr0z3jty6.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr0z3jty6.jl:18\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0z3jty6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest suffix of a string that is a palindrome\n    suffix_length\
    \ = palindrome_length(string)\n    prefix_length = length(string) - suffix_length\n\
    \    if suffix_length > 0 \n        prefix = string[1:prefix_length]\n       \
    \ suffix = string[prefix_length+1:end]\n        return string * reverse(prefix)\
    \ * suffix\n    else\n        return string\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2eyhwaoq.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: palindrome_length not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp2eyhwaoq.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eyhwaoq.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eyhwaoq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp2eyhwaoq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: palindrome_length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2eyhwaoq.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eyhwaoq.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eyhwaoq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp2eyhwaoq.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: palindrome_length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2eyhwaoq.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eyhwaoq.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eyhwaoq.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp2eyhwaoq.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: palindrome_length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp2eyhwaoq.jl:14\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2eyhwaoq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    palindrome_suffix = find_longest_palindrome_suffix(string)\n    palindrome_prefix\
    \ = reverse(string[1:end - length(palindrome_suffix)])\n    return string * palindrome_prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr0jwcawe.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpr0jwcawe.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0jwcawe.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0jwcawe.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr0jwcawe.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpr0jwcawe.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0jwcawe.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0jwcawe.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr0jwcawe.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpr0jwcawe.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0jwcawe.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0jwcawe.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr0jwcawe.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0jwcawe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    return string * reverse(string[1:end])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx70_d7gm.jl:21\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx70_d7gm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx70_d7gm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpx70_d7gm.jl:22\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzzyx\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx70_d7gm.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx70_d7gm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpx70_d7gm.jl:23\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx70_d7gm.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx70_d7gm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpx70_d7gm.jl:24\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx70_d7gm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx70_d7gm.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx70_d7gm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix_length = find_longest_palindromic_suffix(string)\n    prefix = string[1:end-suffix_length]\n\
    \    return string * \"a\" ^ prefix\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6ocjqjmv.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6ocjqjmv.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ocjqjmv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ocjqjmv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp6ocjqjmv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6ocjqjmv.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ocjqjmv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ocjqjmv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp6ocjqjmv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6ocjqjmv.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ocjqjmv.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ocjqjmv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp6ocjqjmv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ocjqjmv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    r = reverse(string)\n    l = length(string)\n    for i in 1:l\n        if\
    \ r[i:end] == string[1:end-i+1]\n            return string * r[1:i]\n        end\n\
    \    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppel_s4o_.jl:28\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppel_s4o_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppel_s4o_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppel_s4o_.jl:29\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzzyx\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppel_s4o_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppel_s4o_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppel_s4o_.jl:30\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppel_s4o_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppel_s4o_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppel_s4o_.jl:31\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppel_s4o_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppel_s4o_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppel_s4o_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    left = get_longest_palindrome_postfix(string)\n\
    \    return string * string[1:left]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp40rxqap.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: get_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp40rxqap.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp40rxqap.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp40rxqap.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpp40rxqap.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: get_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp40rxqap.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp40rxqap.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp40rxqap.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpp40rxqap.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: get_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp40rxqap.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp40rxqap.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp40rxqap.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpp40rxqap.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: get_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(stri"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp40rxqap.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if(is_palindrome(string))\n        return string\n    end\n    suffix = suffix_palindrome(string)\n\
    \    if(suffix == string)\n        return string\n    end\n    return string*reverse(string[1:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp12wqr2yj.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp12wqr2yj.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp12wqr2yj.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp12wqr2yj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp12wqr2yj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp12wqr2yj.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp12wqr2yj.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp12wqr2yj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp12wqr2yj.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp12wqr2yj.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp12wqr2yj.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp12wqr2yj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp12wqr2yj.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp12wqr2yj.jl:13\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12wqr2yj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    length::Int = length(string)\n    return_string::String = string\n    is_palindrome::Bool\
    \ = false\n    for i in 1:length-1\n        if is_palindrome\n            break\n\
    \        elseif string[i] == string[length]\n            is_palindrome = is_palindrome(string[i:length])\n\
    \        end\n    end\n    if !is_palindrome\n        for i in 1:length-1\n  \
    \          return_string = string[i] * return_string\n        end\n    end\n \
    \   return return_string\nend\n \n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3zt1gcna.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp3zt1gcna.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3zt1gcna.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3zt1gcna.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp3zt1gcna.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp3zt1gcna.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3zt1gcna.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3zt1gcna.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp3zt1gcna.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp3zt1gcna.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3zt1gcna.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3zt1gcna.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp3zt1gcna.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp3zt1gcna.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3zt1gcna.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    palindrome_length = longest_palindrome_postfix(string)\n    return (\n  \
    \      string[1:end+1-palindrome_length] \n        * \n        reverse(string[end+1-palindrome_length:end])\n\
    \    )\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp07smwmdk.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp07smwmdk.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp07smwmdk.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp07smwmdk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp07smwmdk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_postfix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp07smwmdk.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp07smwmdk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp07smwmdk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp07smwmdk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp07smwmdk.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp07smwmdk.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp07smwmdk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp07smwmdk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp07smwmdk.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    return string * make_palindrome_from_postfix(string)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp184s37_b.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: make_palindrome_from_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp184s37_b.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp184s37_b.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp184s37_b.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp184s37_b.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: make_palindrome_from_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp184s37_b.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp184s37_b.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp184s37_b.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp184s37_b.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: make_palindrome_from_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp184s37_b.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp184s37_b.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp184s37_b.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp184s37_b.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: make_palindrome_from_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Mai"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp184s37_b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    str_length = length(string)\n    for i = str_length:-1:1\n        if string[i:end]\
    \ == string[i:end]\n            return string * string[1:i]\n        end\n   \
    \ end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpakqwgjpr.jl:27\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpakqwgjpr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpakqwgjpr.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpakqwgjpr.jl:28\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzxyz\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpakqwgjpr.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpakqwgjpr.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpakqwgjpr.jl:29\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpakqwgjpr.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpakqwgjpr.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpakqwgjpr.jl:30\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryjerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpakqwgjpr.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpakqwgjpr.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpakqwgjpr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    palindrome_suffix = \"\"\n    for i in 1:length(string)\n        if (is_palindrome(string[i:end]))\n\
    \            palindrome_suffix = string[i:end]\n            break\n        end\n\
    \    end\n    if (length(palindrome_suffix) == 0)\n        return string\n   \
    \ end\n    palindrome_prefix = string[1:end-length(palindrome_suffix)]\n    return\
    \ string * reverse(palindrome_prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpde1f7s84.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpde1f7s84.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde1f7s84.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde1f7s84.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpde1f7s84.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpde1f7s84.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde1f7s84.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde1f7s84.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpde1f7s84.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpde1f7s84.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde1f7s84.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde1f7s84.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpde1f7s84.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpde1f7s84.jl:15\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpde1f7s84.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    len = length(string)\n\
    \    # find the longest postfix that is a palindrome\n    suffix = string[len:-1:-1]\n\
    \    i = firstindex(suffix, string)\n    # append to the end of the string prefix\
    \ that comes before the palindromic suffix\n    return string * string[1:i]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbwvszzf1.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit\
    \ String at index [0]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::Base.var\"\
    #345#346\"{String, StepRange{Int64, Int64}})(io::IOBuffer)\n      @ Base ./strings/basic.jl:193\n\
    \    [5] sprint(::Function; context::Nothing, sizehint::Int64)\n      @ Base ./strings/io.jl:114\n\
    \    [6] getindex\n      @ ./strings/basic.jl:192 [inlined]\n    [7] make_palindrome(string::String)\n\
    \      @ Main /tmp/tmpbwvszzf1.jl:18\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpbwvszzf1.jl:29 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpbwvszzf1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbwvszzf1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [0]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::Base.var\"\
    #345#346\"{String, StepRange{Int64, Int64}})(io::IOBuffer)\n      @ Base ./strings/basic.jl:193\n\
    \    [5] sprint(::Function; context::Nothing, sizehint::Int64)\n      @ Base ./strings/io.jl:114\n\
    \    [6] getindex\n      @ ./strings/basic.jl:192 [inlined]\n    [7] make_palindrome(string::String)\n\
    \      @ Main /tmp/tmpbwvszzf1.jl:18\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpbwvszzf1.jl:30 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbwvszzf1.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    for k in reverse(0:n)\n        if is_palindrome(string[1:k])\n\
    \            return string * reverse(string[k+1:n])\n        end\n    end\n  \
    \  return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcfa0dha3.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcfa0dha3.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcfa0dha3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcfa0dha3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpcfa0dha3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcfa0dha3.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcfa0dha3.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcfa0dha3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpcfa0dha3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcfa0dha3.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcfa0dha3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcfa0dha3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpcfa0dha3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcfa0dha3.jl:15\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcfa0dha3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    longest_palindrome_suffix = longest_palindrome_suffix(string)\n    prefix\
    \ = string[1:end]\n    return string * reverse(prefix)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpizgkfz9x.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpizgkfz9x.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpizgkfz9x.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpizgkfz9x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpizgkfz9x.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpizgkfz9x.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpizgkfz9x.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpizgkfz9x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpizgkfz9x.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpizgkfz9x.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpizgkfz9x.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpizgkfz9x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpizgkfz9x.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpiz"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizgkfz9x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    postfix = find_longest_palindromic_suffix(string)\n    prefix = reverse(string[1:end-length(postfix)])\n\
    \    return string * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpipq7hvqp.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpipq7hvqp.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpipq7hvqp.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpipq7hvqp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpipq7hvqp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpipq7hvqp.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpipq7hvqp.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpipq7hvqp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpipq7hvqp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpipq7hvqp.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpipq7hvqp.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpipq7hvqp.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpipq7hvqp.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpipq7hvqp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    L = length(string)\n    max_suffix_len = 0\n    for k = 1:L\n        if ispalindrome(string[k:end])\n\
    \            max_suffix_len = k - 1\n            break\n        end\n    end\n\
    \    if max_suffix_len == 0\n        return string\n    end\n    string_prefix\
    \ = string[1:L - max_suffix_len]\n    return string * reverse(string_prefix)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi172or_j.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpi172or_j.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi172or_j.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi172or_j.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpi172or_j.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpi172or_j.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi172or_j.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi172or_j.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpi172or_j.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: ispalindrome not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpi172or_j.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi172or_j.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi172or_j.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpi172or_j.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: ispalindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpi172or_j.jl:16\n\
    \   [2] macro expansion\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi172or_j.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix of the string.\n    longest_postfix_palindrome_indices\
    \ = LongestCommonSubstring.longest_common_substring(string, string[end:-1:1])\n\
    \    if length(longest_postfix_palindrome_indices) == 0\n        return string\n\
    \    end\n    # Add to the beginning a reversed remaining string.\n    return\
    \ string[1:longest_postfix_palindrome_indices[end]:1] * string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeyqd0dm6.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: LongestCommonSubstring\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeyqd0dm6.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeyqd0dm6.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeyqd0dm6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpeyqd0dm6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: LongestCommonSubstring not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpeyqd0dm6.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeyqd0dm6.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeyqd0dm6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpeyqd0dm6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: LongestCommonSubstring not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeyqd0dm6.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeyqd0dm6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeyqd0dm6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpeyqd0dm6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: LongestCommonSubstring not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpeyqd0dm6.jl:14"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeyqd0dm6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    len = length(string)\n    if len == 0\n        return string\n    end\n \
    \   lps = make_longest_palindrome_suffix(string)\n    len_lps = length(lps)\n\
    \    if len_lps == len\n        return string\n    end\n    rev_prefix = reverse(string[1:len-len_lps])\n\
    \    return string * rev_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeupkq3y0.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: make_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeupkq3y0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeupkq3y0.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeupkq3y0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeupkq3y0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: make_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeupkq3y0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeupkq3y0.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeupkq3y0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeupkq3y0.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: make_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpeupkq3y0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeupkq3y0.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeupkq3y0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeupkq3y0.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: make_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(stri"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeupkq3y0.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    s = string\n    for i in 1:length(s)\n        if(s[i] != s[end])\n      \
    \      s = s[i:end]\n        else\n            i = i + 1\n        end\n    end\n\
    \    return string * reverse(s)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxko2rafp.jl:29\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxko2rafp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxko2rafp.jl:27\ntest set: Error\
    \ During Test at /tmp/tmpxko2rafp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 2-codeunit\
    \ String at index [3]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpxko2rafp.jl:15\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxko2rafp.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxko2rafp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxko2rafp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  BoundsError: attempt to access 2-codeunit String\
    \ at index [3]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpxko2rafp.jl:15\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxko2rafp.jl:31 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxko2rafp.jl:27\ntest set:\
    \ Error During Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxko2rafp.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # find the longest postfix of supplied string that is a palindrome\n    longest_postfix_palindrome\
    \ = longest_palindrome_suffix(string)\n    # Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    return string\
    \ * reverse(string[1:end-length(longest_postfix_palindrome)])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgj14vse8.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgj14vse8.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgj14vse8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgj14vse8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgj14vse8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpgj14vse8.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgj14vse8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgj14vse8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgj14vse8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgj14vse8.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgj14vse8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgj14vse8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpgj14vse8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgj"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgj14vse8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    s = string\n    postfix = longest_palindrome_suffix(s)\n    if postfix ==\
    \ s\n        return s\n    else\n        return s * reverse(s[1:end-length(postfix)])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgajigepb.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgajigepb.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgajigepb.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgajigepb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgajigepb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpgajigepb.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgajigepb.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgajigepb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgajigepb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgajigepb.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgajigepb.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgajigepb.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpgajigepb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpga"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgajigepb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    if n == 0\n        return string\n    end\n    first_half\
    \ = string[1:n \xF7 2]\n    second_half = string[n \xF7 2 + 1:n]\n    if string[n\
    \ \xF7 2 + 1] == string[n \xF7 2]\n        return string * reverse(string[1:n\
    \ \xF7 2])\n    else\n        return string * reverse(string[1:n \xF7 2 + 1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmsnp97u7.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpmsnp97u7.jl:19\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpmsnp97u7.jl:31 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpmsnp97u7.jl:29\ntest set:\
    \ Test Failed at /tmp/tmpmsnp97u7.jl:33\n  Expression: candidate(\"xyx\") == \"\
    xyx\"\n   Evaluated: \"xyxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmsnp97u7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmsnp97u7.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpmsnp97u7.jl:34\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmsnp97u7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmsnp97u7.jl:29\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    2     2      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmsnp97u7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    str_len = length(string)\n    longest_prefix = find_longest_palindrome_prefix(string)\n\
    \    if str_len == 0 || longest_prefix == str_len\n        return string\n   \
    \ else\n        prefix = string[1:str_len - longest_prefix]\n        return string\
    \ * reverse(prefix)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx8_elf4p.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpx8_elf4p.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx8_elf4p.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx8_elf4p.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx8_elf4p.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_prefix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpx8_elf4p.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx8_elf4p.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx8_elf4p.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx8_elf4p.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpx8_elf4p.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx8_elf4p.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx8_elf4p.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx8_elf4p.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx8_elf4p.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    length = length(string)\n    for i in length:-1:1\n        if is_palindrome(string[1:i])\n\
    \            return string * string[i:length]\n    end\n    return string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjhjvjrl1.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjhjvjrl1.jl:1\n\
    in expression starting at /tmp/tmpjhjvjrl1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    right = last_palindrome_postfix(string)\n\
    \    return string * string[1:end-right]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv8gvaaah.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: last_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpv8gvaaah.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8gvaaah.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8gvaaah.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpv8gvaaah.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: last_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpv8gvaaah.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8gvaaah.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8gvaaah.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpv8gvaaah.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: last_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpv8gvaaah.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8gvaaah.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8gvaaah.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpv8gvaaah.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: last_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv8gvaaah.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    #construct suffix that is a palindrome\n    longest_palindrome_suffix = string[1:end]\n\
    \    for j in 1:2:length(string)\n        if is_palindrome(string[j:end]) \n \
    \           longest_palindrome_suffix = string[j:end]\n            break\n   \
    \     end\n    end\n    #construct prefix\n    prefix = string[1:length(string)-length(longest_palindrome_suffix)]\n\
    \    return string*reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu50kkl0v.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpu50kkl0v.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu50kkl0v.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu50kkl0v.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpu50kkl0v.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpu50kkl0v.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu50kkl0v.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu50kkl0v.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpu50kkl0v.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpu50kkl0v.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu50kkl0v.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu50kkl0v.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpu50kkl0v.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpu50kkl0v.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu50kkl0v.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    palindrome = find_palindrome(string)\n    return string*palindrome\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpca3jo8_w.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpca3jo8_w.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpca3jo8_w.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpca3jo8_w.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpca3jo8_w.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpca3jo8_w.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpca3jo8_w.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpca3jo8_w.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpca3jo8_w.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpca3jo8_w.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpca3jo8_w.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpca3jo8_w.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpca3jo8_w.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpca3jo8_w.jl:13\n\
    \   [2] macro expansion\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpca3jo8_w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    N = length(string)\n    # make list of booleans (palindrome[i][j] = true\
    \ iff string[i:j] is a palindrome).\n    palindrome = fill(true, N, N)\n    for\
    \ len = 1:N\n        for l = 1:N-len+1\n            r = l + len - 1\n        \
    \    palindrome[l, r] = string[l] == string[r] && (len < 3 || palindrome[l+1,\
    \ r-1])\n        end\n    end\n    # find the longest palindromic suffix.\n  \
    \  max_len = 0\n    max_pos = 1\n    for len = 1:N\n        for l = 1:N-len+1\n\
    \            r = l + len - 1\n            if palindrome[l, r] && len > max_len\n\
    \                max_len = len\n                max_pos = l\n            end\n\
    \        end\n    end\n    # append reversed prefix that comes before the palindromic\
    \ suffix.\n    return string * reverse(string[1:max_pos-1])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpigp6hamz.jl:44\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpigp6hamz.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpigp6hamz.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpigp6hamz.jl:46\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpigp6hamz.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpigp6hamz.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpigp6hamz.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    if n == 0\n        return \"\"\n    end\n    suffix\
    \ = [string[i] for i in 1:n]\n    is_palindrome = false\n    for i in 1:n\n  \
    \      if is_palindrome\n            break\n        end\n        for j in 1:n-i+1\n\
    \            if is_palindrome\n                break\n            end\n      \
    \      is_palindrome = true\n            for k in 1:j-1\n                if suffix[i+k-1]\
    \ != suffix[i+j-k-1]\n                    is_palindrome = false\n            \
    \        break\n                end\n            end\n            if is_palindrome\n\
    \                suffix = suffix[i:i+j-1]\n            end\n        end\n    end\n\
    \    if is_palindrome\n        return string\n    end\n    return string * join(reverse(suffix),\
    \ \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpck7jqsf4.jl:51\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpck7jqsf4.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpck7jqsf4.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpck7jqsf4.jl:53\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpck7jqsf4.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpck7jqsf4.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpck7jqsf4.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # base case: return empty string if input is empty\n    if isempty(string)\n\
    \        return \"\"\n    end\n    \n    # find the longest postfix of the supplied\
    \ string that is a palindrome\n    longest_palindrome_postfix = find_longest_palindrome_postfix(string)\n\
    \    \n    # find the shortest prefix of the supplied string that is not a palindrome.\n\
    \    # it's just the string without longest palindrome postfix\n    string_without_palindrome_postfix\
    \ = string[1:end-length(longest_palindrome_postfix)]\n    \n    # append reverse\
    \ of string prefix to the end of supplied string\n    return string * reverse(string_without_palindrome_postfix)\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpktu4ylnq.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpktu4ylnq.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpktu4ylnq.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpktu4ylnq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpktu4ylnq.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpktu4ylnq.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpktu4ylnq.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpktu4ylnq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpktu4ylnq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpktu4ylnq.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpktu4ylnq.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpktu4ylnq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpktu4ylnq.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome("
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpktu4ylnq.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    m = length(string)\n\
    \    T = [1]\n    for i in 2:m\n        T[i] = 0\n    end\n    for i in 2:m\n\
    \        if string[i] == string[1]\n            T[i] = 2\n        end\n    end\n\
    \    for i in 3:m\n        for j in i-1:-1:2\n            if string[i] == string[j]\n\
    \                T[i] = j + T[j-1]\n                break\n            end\n \
    \       end\n    end\n    suffix = string[T[m]:m]\n    return string * reverse(string[1:T[m]-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgq4zgs7o.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access\
    \ 1-element Vector{Int64} at index [2]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgq4zgs7o.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgq4zgs7o.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgq4zgs7o.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpgq4zgs7o.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpgq4zgs7o.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgq4zgs7o.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgq4zgs7o.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpgq4zgs7o.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] make_palindrome(string::String)\n     @ Main /tmp/tmpgq4zgs7o.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgq4zgs7o.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgq4zgs7o.jl:41\nTest Summary:\
    \ | Pass  Error  Total\nte"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgq4zgs7o.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    longest_palindrome_postfix_length\
    \ = longest_palindrome_length(string)\n    prefix = string[1:end-longest_palindrome_postfix_length]\n\
    \    return string * reverse(prefix)\nend\nprintln(make_palindrome(\"cat\"))\n\
    println(make_palindrome(\"cata\"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: longest_palindrome_length not defined\n\
    Stacktrace:\n [1] make_palindrome(string::String)\n   @ Main /tmp/tmpiyd_zt0s.jl:16\n\
    \ [2] top-level scope\n   @ /tmp/tmpiyd_zt0s.jl:20\nin expression starting at\
    \ /tmp/tmpiyd_zt0s.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    postfix = longest_palindrome_postfix(string)\n    return string * reverse(string[1:end\
    \ - postfix])\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6ffy6o4a.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6ffy6o4a.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ffy6o4a.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ffy6o4a.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp6ffy6o4a.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_postfix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp6ffy6o4a.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ffy6o4a.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ffy6o4a.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp6ffy6o4a.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp6ffy6o4a.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ffy6o4a.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ffy6o4a.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp6ffy6o4a.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ffy6o4a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return \"\"\n    end\n    # Find longest\
    \ suffix of the string that is a palindrome.\n    end = find_palindrome_end(string)\n\
    \    preffix = string[1:end]\n    return string * reverse(preffix)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"function make_palindrome(string::String)::String\n\
    \    # /tmp/tmpw1k_8ww5.jl, line 12\n    # /tmp/tmpw1k_8ww5.jl, line 13\n    if\
    \ (length(string) == 0)\n        # /tmp/tmpw1k_8ww5.jl, line 14\n        return\
    \ \"\"\n    end\nend\" around /tmp/tmpw1k_8ww5.jl:1\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw1k_8ww5.jl:1\nin expression starting at /tmp/tmpw1k_8ww5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix::String = longest_palindrome_suffix(string)\n    base::String = string[1:end-length(suffix)]\n\
    \    return base * reverse(base) * suffix\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp0h4sh4t.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp0h4sh4t.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp0h4sh4t.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp0h4sh4t.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpp0h4sh4t.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpp0h4sh4t.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp0h4sh4t.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp0h4sh4t.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpp0h4sh4t.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp0h4sh4t.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp0h4sh4t.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp0h4sh4t.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpp0h4sh4t.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp0"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp0h4sh4t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) <= 1\n        return string\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    return string * reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyenkif76.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyenkif76.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyenkif76.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyenkif76.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyenkif76.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyenkif76.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyenkif76.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyenkif76.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyenkif76.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpyenkif76.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyenkif76.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyenkif76.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyenkif76.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    l = size(string)\n    for i in reverse(1:l)\n        if is_palindrome(string[1:i])\n\
    \            palindrome = string[i+1:end]\n            return string * reverse(palindrome)\n\
    \        end\n    end\n    return \"\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpud2m3ixh.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching size(::String)\n\
    \  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\n\
    \    size(!Matched::Union{LinearAlgebra.Adjoint{T, var\"#s861\"}, LinearAlgebra.Transpose{T,\
    \ var\"#s861\"}} where {T, var\"#s861\"<:(AbstractMatrix)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\n\
    \    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:567\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpud2m3ixh.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpud2m3ixh.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpud2m3ixh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpud2m3ixh.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching size(::String)\n\
    \  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.Adjoint{T,\
    \ var\"#s861\"}, LinearAlgebra.Transpose{T, var\"#s861\"}} where {T, var\"#s861\"\
    <:(AbstractVector)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:172\n\
    \    size(!Matched::Union{LinearAlgebra.Adjoint{T, var\"#s861\"}, LinearAlgebra.Transpose{T,\
    \ var\"#s861\"}} where {T, var\"#s861\"<:(AbstractMatrix)}) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:173\n\
    \    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted})\
    \ at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpud2m3ixh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    for i in 0:n\n        if is_palindrome(string[i+1:end])\n\
    \            return string*reverse(string[1:i])\n        end\n    end\n    return\
    \ string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpet_5rxpl.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpet_5rxpl.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpet_5rxpl.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpet_5rxpl.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpet_5rxpl.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpet_5rxpl.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpet_5rxpl.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpet_5rxpl.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpet_5rxpl.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpet_5rxpl.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpet_5rxpl.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpet_5rxpl.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpet_5rxpl.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpet_5rxpl.jl:15\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpet_5rxpl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    for i in 1:n\n        if palindrome(string[1:n-i+1])\n\
    \            return string * reverse(string[1:i])\n        end\n    end\n    throw(RuntimeError(\"\
    Could not make palindrome out of: $string\"))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4r45p2n_.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: RuntimeError not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4r45p2n_.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4r45p2n_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4r45p2n_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4r45p2n_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4r45p2n_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4r45p2n_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4r45p2n_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4r45p2n_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: palindrome not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4r45p2n_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4r45p2n_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4r45p2n_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4r45p2n_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4r45p2n_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4r45p2n_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    l = string_find_palindrome_suffix(string)\n\
    \    return string * reverse(string[1:l])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo9mhf0gm.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: string_find_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpo9mhf0gm.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo9mhf0gm.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo9mhf0gm.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpo9mhf0gm.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: string_find_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpo9mhf0gm.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo9mhf0gm.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo9mhf0gm.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpo9mhf0gm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: string_find_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpo9mhf0gm.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo9mhf0gm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo9mhf0gm.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpo9mhf0gm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: string_find_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo9mhf0gm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    postfix = LongestPalindromicSubstring(string)\n    prefix = reverse(string[1:end])\n\
    \    return string * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo2zi4h85.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: LongestPalindromicSubstring\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpo2zi4h85.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo2zi4h85.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo2zi4h85.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpo2zi4h85.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: LongestPalindromicSubstring not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpo2zi4h85.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo2zi4h85.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo2zi4h85.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpo2zi4h85.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: LongestPalindromicSubstring\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpo2zi4h85.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo2zi4h85.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo2zi4h85.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpo2zi4h85.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: LongestPalindromicSubstring\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo2zi4h85.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    m = length(string) \n    suffix = string\n    pos = -1 \n    for i = 1:m\n\
    \        if is_palindrome(suffix)\n            pos = i\n            break\n  \
    \      end\n        suffix = suffix[2:end]\n    end\n    new_string = string[1:pos]\n\
    \    new_string = string*string[pos:end]\n    return new_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpww5xosq_.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [-1:0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmpww5xosq_.jl:24\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpww5xosq_.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpww5xosq_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpww5xosq_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpww5xosq_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpww5xosq_.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpww5xosq_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpww5xosq_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpww5xosq_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpww5xosq_.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpww5xosq_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpww5xosq_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpww5xosq_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if empty(string)\n        return \"\"\n    end\n    longest_postfix = find_longest_palindromic_postfix(string)\n\
    \    postfix_end = length(longest_postfix)\n    prefix = string[1:end-postfix_end]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5rj7j65b.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: no method matching empty(::String)\n\
    \  Closest candidates are:\n    empty(!Matched::NamedTuple) at /shared/centos7/julia/1.7.3/share/julia/base/namedtuple.jl:133\n\
    \    empty(!Matched::IdDict, !Matched::Type{K}, !Matched::Type{V}) where {K, V}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:69\n    empty(!Matched::Tuple)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:541\n    ...\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5rj7j65b.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5rj7j65b.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5rj7j65b.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5rj7j65b.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  MethodError: no method matching empty(::String)\n\
    \  Closest candidates are:\n    empty(!Matched::NamedTuple) at /shared/centos7/julia/1.7.3/share/julia/base/namedtuple.jl:133\n\
    \    empty(!Matched::IdDict, !Matched::Type{K}, !Matched::Type{V}) where {K, V}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/iddict.jl:69\n    empty(!Matched::Tuple)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:541\n    ...\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5rj7j65b.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5rj7j65b.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5rj7j65b.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5rj7j65b.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  MethodError: no metho"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5rj7j65b.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    length = length(string)\n    if length < 2\n        return string\n    end\n\
    \    # Get the right half of the string.\n    right_half = string[length/2 + 1:length]\n\
    \    # Get the left half of the string.\n    left_half = string[1:length/2]\n\
    \    if left_half == reverse(right_half)\n        return string\n    end\n   \
    \ # Find the longest palindromic suffix.\n    suffix = longest_palindromic_suffix(right_half)\n\
    \    # append to string reverse of the prefix that precedes the palindromic suffix.\n\
    \    return string * reverse(string[1:length-length(suffix)])\nend\n# Test all\
    \ possibilities.\ntest_all_make_palindrome()\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: test_all_make_palindrome not defined\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpox56mrxq.jl:30\nin expression\
    \ starting at /tmp/tmpox56mrxq.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    longest_palindrome_postfix = find_longest_palindrome_postfix(string)\n  \
    \  prefix = string[1:end-length(longest_palindrome_postfix)]\n    return string\
    \ * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdizk8coo.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdizk8coo.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdizk8coo.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdizk8coo.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpdizk8coo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdizk8coo.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdizk8coo.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdizk8coo.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpdizk8coo.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpdizk8coo.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdizk8coo.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdizk8coo.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpdizk8coo.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdizk8coo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find a postfix of string that is a palindrome\n    i = length(string)\n\
    \    while i > 0\n        j = 0\n        k = i\n        while k > 0\n        \
    \    if string[j+1] != string[k]\n                break\n            end\n   \
    \         j += 1\n            k -= 1\n        end\n        if k == 0\n       \
    \     # We found a palindrome postfix\n            break\n        end\n      \
    \  i -= 1\n    end\n    # Add reverse of prefix that comes before the palindromic\
    \ suffix.\n    return string * reverse(string[1:i])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp957j09em.jl:40\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp957j09em.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp957j09em.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp957j09em.jl:41\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzx\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp957j09em.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp957j09em.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp957j09em.jl:42\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp957j09em.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp957j09em.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp957j09em.jl:43\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryj\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp957j09em.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp957j09em.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp957j09em.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) <= 1\n        return string\n    end\n    suffix = suffix_palindrome(string)\n\
    \    len_suffix = length(suffix)\n    if len_suffix == length(string)\n      \
    \  return string\n    end\n    prefix = reverse(string[1:end-len_suffix])\n  \
    \  return string * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqrfqucqk.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: suffix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqrfqucqk.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrfqucqk.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrfqucqk.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpqrfqucqk.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpqrfqucqk.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrfqucqk.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrfqucqk.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpqrfqucqk.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: suffix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpqrfqucqk.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrfqucqk.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrfqucqk.jl:28\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqrfqucqk.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    postfix::String = find_longest_postfix_palindrome(string)\n    prefix::String\
    \ = reverse(string[1:end-length(postfix)])\n    return string * prefix\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptddv6j0d.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptddv6j0d.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptddv6j0d.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptddv6j0d.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptddv6j0d.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptddv6j0d.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptddv6j0d.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptddv6j0d.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptddv6j0d.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmptddv6j0d.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptddv6j0d.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptddv6j0d.jl:21\ntest set:\
    \ Error During Test at /tmp/tmptddv6j0d.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_postfix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptddv6j0d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    \n    # reverse string to get prefix of it\n    prefix = string[end:-1:end]\n\
    \    \n    # find a palindromic suffix of the string\n    suffix = find_max_palindrome(string)\n\
    \    \n    # just concatenate strings\n    return string * (suffix != string)\
    \ * suffix + prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdd6earka.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [0]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::Base.var\"\
    #345#346\"{String, StepRange{Int64, Int64}})(io::IOBuffer)\n      @ Base ./strings/basic.jl:193\n\
    \    [5] sprint(::Function; context::Nothing, sizehint::Int64)\n      @ Base ./strings/io.jl:114\n\
    \    [6] getindex\n      @ ./strings/basic.jl:192 [inlined]\n    [7] make_palindrome(string::String)\n\
    \      @ Main /tmp/tmpdd6earka.jl:15\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpdd6earka.jl:28 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpdd6earka.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdd6earka.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_max_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdd6earka.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdd6earka.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdd6earka.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdd6earka.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_max_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpdd6earka.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdd6earka.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    if length(string)\
    \ == 1\n        return string * 2\n    end\n    longest_suffix_length = 0\n  \
    \  for index in 1:length(string)\n        if is_palindrome(string[index:end])\
    \ && (index - 1) > longest_suffix_length\n            longest_suffix_length =\
    \ index - 1\n        end\n    end\n    return string * 2 - reverse(string[1:longest_suffix_length\
    \ + 1])\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx0tp0tdf.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"x\") == \"x\"\\n  MethodError: no method\
    \ matching *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:88\\\
    n    *(::Union{AbstractChar, AbstractString}, !Matched::Union{AbstractChar, AbstractString}...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:260\\n    ...\\\
    n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n     @ Main /tmp/tmpx0tp0tdf.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpx0tp0tdf.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx0tp0tdf.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpx0tp0tdf.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\\n  UndefVarError: is_palindrome not defined\\\
    n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n     @ Main /tmp/tmpx0tp0tdf.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpx0tp0tdf.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx0tp0tdf.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpx0tp0tdf.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\\n  UndefVarError: is_palindrome not defined\\\
    n  Stacktrace:\\n   [1] make_palindrome(string::String)\\n     @ Main /tmp/tmpx0tp0tdf.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    \n    first_half, second_half = split(string)\n    palindrome_suffix = find_largest_palindrome_suffix(first_half)\n\
    \    reversed_prefix = reverse(string[1:end-length(palindrome_suffix)])\n    return\
    \ palindrome_suffix * reversed_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpekyurlld.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access 0-element\
    \ Vector{SubString{String}} at index [1]\n  Stacktrace:\n   [1] getindex\n   \
    \  @ ./array.jl:861 [inlined]\n   [2] indexed_iterate (repeats 2 times)\n    \
    \ @ ./tuple.jl:90 [inlined]\n   [3] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpekyurlld.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpekyurlld.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpekyurlld.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpekyurlld.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-element Vector{SubString{String}}\
    \ at index [2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] indexed_iterate\n     @ ./tuple.jl:90 [inlined]\n   [3] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpekyurlld.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpekyurlld.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpekyurlld.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpekyurlld.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 1-element\
    \ Vector{SubString{String}} at index [2]\n  Stacktrace:\n   [1] getindex\n   \
    \  @ ./array.jl:861 [inlined]\n   [2] indexed_iterate\n     @ ./tuple.jl:90 [inlined]\n\
    \   [3] make_palindrome(string::String)\n     @ Main /tmp/tmpekyurlld.jl:14\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpekyurlld.jl:26 [inlined]\n\
    \   [6] ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpekyurlld.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix = longest_palindrome_suffix(string)\n    prefix = reverse(string[1:end-length(suffix)])\n\
    \    return string * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcvqxa1rr.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcvqxa1rr.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcvqxa1rr.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcvqxa1rr.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpcvqxa1rr.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpcvqxa1rr.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcvqxa1rr.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcvqxa1rr.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpcvqxa1rr.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcvqxa1rr.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcvqxa1rr.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcvqxa1rr.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpcvqxa1rr.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpcv"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcvqxa1rr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    return string * join(reverse(split(string)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpubke86pl.jl:21\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpubke86pl.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpubke86pl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpubke86pl.jl:22\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzxyz\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpubke86pl.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpubke86pl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpubke86pl.jl:23\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpubke86pl.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpubke86pl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpubke86pl.jl:24\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryjerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpubke86pl.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpubke86pl.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpubke86pl.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n    palindrome_prefix\
    \ = reverse(string[1:end-length(longest_palindrome_suffix)])\n    return string\
    \ * palindrome_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpymiwtyxa.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpymiwtyxa.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpymiwtyxa.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpymiwtyxa.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpymiwtyxa.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpymiwtyxa.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpymiwtyxa.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpymiwtyxa.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpymiwtyxa.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpymiwtyxa.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpymiwtyxa.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpymiwtyxa.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpymiwtyxa.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpymiwtyxa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    find_longest_palindrome_suffix(string)\n\
    \    longest_palindrome_suffix = @view string[1:end - length(longest_palindrome_suffix)]\n\
    \    prefix = @view string[1:end - length(longest_palindrome_suffix)]\n    return\
    \ string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp73kwi5y.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp73kwi5y.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp73kwi5y.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp73kwi5y.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpp73kwi5y.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp73kwi5y.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp73kwi5y.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp73kwi5y.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpp73kwi5y.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp73kwi5y.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp73kwi5y.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp73kwi5y.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpp73kwi5y.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(stri"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp73kwi5y.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    n = length(string)\n\
    \    i = n\n    while i > 0\n        if string[i:n] == reverse(string[i:n])\n\
    \            return string * string[1:i]\n        end\n        i -= 1\n    end\n\
    \    throw(\"ERROR: input string '$string' is not a palindrome itself and also\
    \ does not have a palindromic prefix\")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprl3046ij.jl:32\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprl3046ij.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprl3046ij.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprl3046ij.jl:33\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzxyz\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprl3046ij.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprl3046ij.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprl3046ij.jl:34\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprl3046ij.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprl3046ij.jl:30\ntest set: Test\
    \ Failed at /tmp/tmprl3046ij.jl:35\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryjerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprl3046ij.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprl3046ij.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprl3046ij.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    size = length(string)\n    for n in size:-1:1\n        if is_palindrome(string[n:size])\n\
    \            return string * reverse(string[1:n])\n        end\n    end\n    return\
    \ string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpargi0r1f.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpargi0r1f.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpargi0r1f.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpargi0r1f.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpargi0r1f.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpargi0r1f.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpargi0r1f.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpargi0r1f.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpargi0r1f.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpargi0r1f.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpargi0r1f.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpargi0r1f.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpargi0r1f.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpargi0r1f.jl:15\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpargi0r1f.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    l = longest_palindrome_suffix(string)\n\
    \    return string * reverse(string[1:l])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgwfjw1bj.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgwfjw1bj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgwfjw1bj.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgwfjw1bj.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpgwfjw1bj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgwfjw1bj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgwfjw1bj.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgwfjw1bj.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpgwfjw1bj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpgwfjw1bj.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgwfjw1bj.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgwfjw1bj.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpgwfjw1bj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ M"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgwfjw1bj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # if string is empty or palindrome (length 1), return the string.\n    isempty(string)\
    \ && return string\n    length(string) == 1 && return string\n    # if string\
    \ is two characters, return string if they are the same\n    # or append the first\
    \ character to the end if they are different.\n    length(string) == 2 && (\n\
    \        (string[1] == string[2]) ? (return string) : (return string * string[1])\n\
    \    )\n    # Get the postfix and suffix of the string.\n    # The empty string\
    \ will be returned for one and two character strings.\n    postfix, suffix = get_postfix_suffix(string)\n\
    \    # if the postfix is empty, reverse and append the whole string to itself.\n\
    \    isempty(postfix) && return string * reverse(string)\n    # Take the part\
    \ of the string before the palindromic postfix.\n    prefix = string[1:(end-length(postfix))]\n\
    \    # append reverse of the prefix to the end of the string.\n    append!(string,\
    \ reverse(prefix))\n    # return the new palindrome.\n    return string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj89xteu3.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: get_postfix_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj89xteu3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj89xteu3.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj89xteu3.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpj89xteu3.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: get_postfix_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpj89xteu3.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj89xteu3.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj89xteu3.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpj89xteu3.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: get_postfix_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj89xteu3.jl:23\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj89xteu3.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj89xteu3.jl:37\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj89xteu3.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Initialize longest palindrome starting at first element of supplied string.\n\
    \    palindrome = string[1]\n    # Split string into characters and reverse the\
    \ order.\n    chars = reverse(collect(string))\n    # Iterate through characters\
    \ and check if prefix is palindrome.\n    for (j, c) in enumerate(chars)\n   \
    \     # Compare prefix with palindrome and keep longest.\n        if is_palindrome(chars[j:end])\
    \ && !(palindrome == string[1])\n            palindrome = string[1:end-j]\n  \
    \      end\n    end\n    # Reverse palindrome and append to front of original\
    \ string.\n    return string * reverse(palindrome)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx21myowp.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  BoundsError: attempt to access empty\
    \ String at index [1]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpx21myowp.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpx21myowp.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpx21myowp.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpx21myowp.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpx21myowp.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx21myowp.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx21myowp.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpx21myowp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpx21myowp.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx21myowp.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx21myowp.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpx21myowp.jl:35\n  Test threw exception\n  Expression:\
    \ can"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx21myowp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Shortcuts for empty and one-char strings.\n    if isempty(string)\n   \
    \     return string\n    elseif length(string) == 1\n        return string * string\n\
    \    end\n    \n    # Find the longest palindromic suffix.\n    # If a string\
    \ is a palindrome itself then the found suffix will be an empty string.\n    max_suffix_length\
    \ = 1\n    for i in 1:length(string)\n        if is_palindrome(string[end-i+1:end])\n\
    \            max_suffix_length = i\n            break\n        end\n    end\n\
    \    \n    return string * reverse(string[1:end-max_suffix_length])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg2v8f17s.jl:38\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2v8f17s.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2v8f17s.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpg2v8f17s.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpg2v8f17s.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg2v8f17s.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg2v8f17s.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg2v8f17s.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpg2v8f17s.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg2v8f17s.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg2v8f17s.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpg2v8f17s.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpg2v8f17s.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg2v8f17s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg2v8f17s.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    KMP_table = KMP_longest_prefix_suffix(string)\n \
    \   postfix_len = n - KMP_table[end]\n    return string * string[end-postfix_len+1:end:-1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbk3w98ip.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: KMP_longest_prefix_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbk3w98ip.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbk3w98ip.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbk3w98ip.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpbk3w98ip.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: KMP_longest_prefix_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbk3w98ip.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbk3w98ip.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbk3w98ip.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpbk3w98ip.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: KMP_longest_prefix_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbk3w98ip.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbk3w98ip.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbk3w98ip.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpbk3w98ip.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: KMP_longest_prefix_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbk"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbk3w98ip.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    \n    # handle empty strings\n    if length(string) == 0\n        return\
    \ string\n    end\n    \n    # find the index of the longest palindromic postfix\n\
    \    postfix_index = last_longest_palindrome_index(string)\n    \n    # if the\
    \ string itself is already a palindrome\n    if postfix_index == length(string)\n\
    \        return string\n    end\n    \n    # otherwise take prefix and append\
    \ it's reverse\n    return string * string[1:postfix_index]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpifin35eg.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: last_longest_palindrome_index\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpifin35eg.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpifin35eg.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpifin35eg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpifin35eg.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: last_longest_palindrome_index\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpifin35eg.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpifin35eg.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpifin35eg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpifin35eg.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: last_longest_palindrome_index\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpifin35eg.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpifin35eg.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpifin35eg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpifin35eg.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: last_longest_palindrome_index\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpifin35eg.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    N = length(string)\n    # preprocess the string\n    preproc = [0]*(2*N+1)\n\
    \    index = 0\n    rad = 0\n    for i = 1:2*N\n        # find j such that j <\
    \ N and i+j < 2N+1 and\n        # i-j >= 0 and i+j < 2N+1 and i-j >= 0 and\n \
    \       # i+j has to be odd since we reversed the string\n        # i-j has to\
    \ be even\n        if (i > index + rad) || (i + preproc[2*index-i] < index + rad)\n\
    \            rad = find_palindrome_radius(string, i)\n            index = i\n\
    \        end\n        preproc[i] = rad\n    end\n    # find the longest palindrome\n\
    \    length, center = findmax(preproc)\n    # append the reverse of a prefix that\
    \ precedes the palindrome\n    return string * reverse(string[1:center])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjvn45i72.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjvn45i72.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjvn45i72.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjvn45i72.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpjvn45i72.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjvn45i72.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjvn45i72.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjvn45i72.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpjvn45i72.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjvn45i72.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjvn45i72.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjvn45i72.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpjvn45i72.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjvn45i72.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjvn45i72.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # First find the longest postfix that is a palindrome\n    l = length(string)\n\
    \    for i in 1:l\n        if is_palindrome(string[i:l])\n            return string\
    \ * reverse(string[1:i-1])\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbmaxfpp_.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbmaxfpp_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbmaxfpp_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbmaxfpp_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpbmaxfpp_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbmaxfpp_.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbmaxfpp_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbmaxfpp_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpbmaxfpp_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbmaxfpp_.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbmaxfpp_.jl:28 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbmaxfpp_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    x = string\n    for i in 1:length(string)\n        x = string[1:i]\n    \
    \    if x == reverse(x)\n            return string * reverse(string[i+1:end])\n\
    \        end\n    end\n    return \"\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjdx8_3vu.jl:29\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyzzy\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdx8_3vu.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdx8_3vu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjdx8_3vu.jl:30\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxy\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjdx8_3vu.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdx8_3vu.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjdx8_3vu.jl:31\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrre\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjdx8_3vu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjdx8_3vu.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjdx8_3vu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    string_length = length(string)\n    if string_length > 0\n        # Find\
    \ the longest palindromic suffix.\n        # We use z-box algorithm here.\n  \
    \      z_box = find_z_box(string)\n        # The longest palindromic suffix is\
    \ located before the maximum z-box value.\n        palindromic_suffix_length =\
    \ indmax(z_box) - 1\n        if palindromic_suffix_length > 0\n            # The\
    \ string prefix that comes before the palindromic suffix.\n            prefix\
    \ = string[1:palindromic_suffix_length]\n            string = string * \"A\" *\
    \ prefix\n        end\n    end\n    return string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp13xi0sjf.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_z_box not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp13xi0sjf.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp13xi0sjf.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp13xi0sjf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp13xi0sjf.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_z_box not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp13xi0sjf.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp13xi0sjf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp13xi0sjf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp13xi0sjf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_z_box not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp13xi0sjf.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp13xi0sjf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp13xi0sjf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp13xi0sjf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_z_box not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp13xi0sjf.jl:17\n\
    \   [2] macro expansion\n     @ /sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp13xi0sjf.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    m = string\n    while !is_palindrome(m)\n        m = m[1:end]\n    end\n\
    \    return string * reverse(string[1:length(m)])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5jc3lq3n.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5jc3lq3n.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5jc3lq3n.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jc3lq3n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp5jc3lq3n.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5jc3lq3n.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5jc3lq3n.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jc3lq3n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp5jc3lq3n.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5jc3lq3n.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5jc3lq3n.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jc3lq3n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp5jc3lq3n.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp5jc3lq3n.jl:14\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5jc3lq3n.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    n_sqrt = ceil(Int, sqrt(n))\n    # find the longest\
    \ postfix that is a palindrome\n    for i in n:-1:n_sqrt:1\n        if is_palindrome(string[i:n])\n\
    \            break\n    end\n    # append reverse of string prefix to the end\
    \ of original string\n    return string * string[1:i-1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8n8p81dc.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8n8p81dc.jl:1\n\
    in expression starting at /tmp/tmp8n8p81dc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix = palindromic_suffix(string)\n    if string == suffix\n        return\
    \ string\n    else\n        return string * reverse(string[1:length(suffix)])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz6n3bfdi.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: palindromic_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpz6n3bfdi.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz6n3bfdi.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz6n3bfdi.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpz6n3bfdi.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpz6n3bfdi.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz6n3bfdi.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz6n3bfdi.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpz6n3bfdi.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpz6n3bfdi.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz6n3bfdi.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz6n3bfdi.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpz6n3bfdi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: palindromic_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpz6n3bfdi.jl:13\n\
    \   [2] macro ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6n3bfdi.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    r = string\n    for i = 0:string.length\n        postfix = string[i:end]\n\
    \        if is_palindrome(postfix)\n            r = string * string[0:i]\n   \
    \         break\n        end\n    end\n    return r\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu90yz43c.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpu90yz43c.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu90yz43c.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu90yz43c.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpu90yz43c.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpu90yz43c.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu90yz43c.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu90yz43c.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpu90yz43c.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpu90yz43c.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu90yz43c.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu90yz43c.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpu90yz43c.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  type String has no field length\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu90yz43c.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\" \n        return \"\"\n    end\n    palindrome_suffix =\
    \ get_palindrome_suffix(string)\n    prefix = string[1:end-length(palindrome_suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj7w5_s42.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: get_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj7w5_s42.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj7w5_s42.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj7w5_s42.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpj7w5_s42.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: get_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj7w5_s42.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj7w5_s42.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj7w5_s42.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpj7w5_s42.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: get_palindrome_suffix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpj7w5_s42.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj7w5_s42.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj7w5_s42.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpj7w5_s42.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: get_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpj7w5"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj7w5_s42.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    if n == 0\n        return \"\"\n    end\n    rev\
    \ = reverse(string)\n    string = string * \" \" * rev\n    n = length(string)\n\
    \    lps = lps_array(string)\n    #print(lps)\n    ind = n - lps[end]\n    return\
    \ rev[1:ind] * string[1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4wicvgys.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: lps_array not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4wicvgys.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4wicvgys.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4wicvgys.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp4wicvgys.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: lps_array not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4wicvgys.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4wicvgys.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4wicvgys.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp4wicvgys.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: lps_array not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4wicvgys.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4wicvgys.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4wicvgys.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp4wicvgys.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: lps_array not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4wicvgys.jl:20\n\
    \   [2] macro expansion\n     @ /shared"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4wicvgys.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) <= 1\n        return string\n    end\n    longest_prefix\
    \ = longest_palindromic_prefix(string)\n    return string * reverse(string[1:longest_prefix])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphwq1uae3.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphwq1uae3.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphwq1uae3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphwq1uae3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphwq1uae3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindromic_prefix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphwq1uae3.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphwq1uae3.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphwq1uae3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphwq1uae3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindromic_prefix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmphwq1uae3.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphwq1uae3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphwq1uae3.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwq1uae3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    ret = string\n    for i = 1:length(string)\n        if is_palindrome(string[1:i])\n\
    \            ret = ret * string[i:-1]\n            break\n        end\n    end\n\
    \    return ret\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp60reaxi1.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp60reaxi1.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp60reaxi1.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp60reaxi1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp60reaxi1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp60reaxi1.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp60reaxi1.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp60reaxi1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp60reaxi1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp60reaxi1.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp60reaxi1.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp60reaxi1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp60reaxi1.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp60reaxi1.jl:15\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp60reaxi1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    index = find_palindrome_index(string)\n    return string * string[1:index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpquyh9ert.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_palindrome_index\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpquyh9ert.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpquyh9ert.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpquyh9ert.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpquyh9ert.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_palindrome_index not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpquyh9ert.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpquyh9ert.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpquyh9ert.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpquyh9ert.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_palindrome_index not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpquyh9ert.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpquyh9ert.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpquyh9ert.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpquyh9ert.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_palindrome_index not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpquyh9ert.jl:13\n\
    \   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpquyh9ert.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if is_palindrome(string)\n        return string\n    end\n    start = lps(string)\n\
    \    return string*reverse(string[1:start])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph9il6uhh.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmph9il6uhh.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9il6uhh.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9il6uhh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmph9il6uhh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmph9il6uhh.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9il6uhh.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9il6uhh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmph9il6uhh.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmph9il6uhh.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9il6uhh.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9il6uhh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmph9il6uhh.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmph9il6uhh.jl:13\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9il6uhh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    if n <= 1\n        return string\n    end\n    i\
    \ = find_max_prefix_palindrome(string)\n    return string * reverse(string[1:i])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3i81kukl.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_max_prefix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3i81kukl.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i81kukl.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3i81kukl.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp3i81kukl.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_max_prefix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3i81kukl.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i81kukl.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3i81kukl.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp3i81kukl.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_max_prefix_palindrome\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp3i81kukl.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i81kukl.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3i81kukl.jl:24\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3i81kukl.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    str_rev = reverse(string)\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyzj4x6zg.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyzj4x6zg.jl:1\n\
    in expression starting at /tmp/tmpyzj4x6zg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    for k in 1:n\n        if is_palindrome(string[n-k+1:n])\n\
    \            return string * reverse(string[1:n-k+1])\n        end\n    end\n\
    \    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr44bugas.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr44bugas.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr44bugas.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr44bugas.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpr44bugas.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr44bugas.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr44bugas.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr44bugas.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpr44bugas.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr44bugas.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr44bugas.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr44bugas.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpr44bugas.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpr44bugas.jl:15\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr44bugas.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    n_mul_2 = 2*n - 1\n    pal_len = zarray(n_mul_2)\n\
    \    right = 1\n    center = 1\n    for i = 2:n_mul_2\n        mirror = 2*center\
    \ - i\n        diff = right - i\n        if diff > 0\n            pal_len[i] =\
    \ min(pal_len[mirror], diff)\n        else\n            pal_len[i] = 0\n     \
    \   while i+pal_len[i]+1 <= n_mul_2 && i-pal_len[i]-1 >= 1\n            c = compute_char(string,\
    \ i+pal_len[i]+1)\n            c_m = compute_char(string, i-pal_len[i]-1)\n  \
    \          if c == c_m\n                pal_len[i] += 1\n            else\n  \
    \              break\n            end\n        end\n        if i+pal_len[i] >\
    \ right\n            right = i+pal_len[i]\n            center = i\n        end\n\
    \    end\n    # Find the longest palindromic suffix.\n    max_len = 0\n    idx\
    \ = -1\n    for i = 1:n_mul_2\n        if i-pal_len[i] == 1\n            idx =\
    \ i\n            max_len = pal_len[i]\n        end\n    end\n    return string*reverse(string[1:n-max_len])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw3zulnqg.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw3zulnqg.jl:1\n\
    in expression starting at /tmp/tmpw3zulnqg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    for ii in 1:length(string)\n        if string[end-ii+1:end] == string[1:ii]\n\
    \            return string * reverse(string[1:end-ii])\n        end\n    end\n\
    \    return string * reverse(string[1:end])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdyo73f72.jl:27\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyo73f72.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyo73f72.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpdyo73f72.jl:28\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdyo73f72.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyo73f72.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpdyo73f72.jl:29\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdyo73f72.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdyo73f72.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdyo73f72.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Create a reversed copy of the string.\n    reversed_string = copy(string)\n\
    \    reverse!(reversed_string)\n    # Create a concatenation of the original string\
    \ with reversed string.\n    orig_string_reversed = string * reversed_string\n\
    \    # Find the longest suffix of concatenated string that is a palindrome.\n\
    \    length = maximum(findall(issubstring.(orig_string_reversed), reversed_string))\n\
    \    # Append string prefix that does not belong to palindromic suffix to the\
    \ end of the original string.\n    return string * reversed_string[length + 1:end]\n\
    end\nmake_palindrome(\"cat\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching copy(::String)\nClosest\
    \ candidates are:\n  copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.UpperHessenberg})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:418\n\
    \  copy(!Matched::LinearAlgebra.Hessenberg{<:Any, <:LinearAlgebra.SymTridiagonal})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/hessenberg.jl:419\n\
    \  copy(!Matched::LinearAlgebra.CholeskyPivoted) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:492\n\
    \  ...\nStacktrace:\n [1] make_palindrome(string::String)\n   @ Main /tmp/tmpbviljmo2.jl:14\n\
    \ [2] top-level scope\n   @ /tmp/tmpbviljmo2.jl:23\nin expression starting at\
    \ /tmp/tmpbviljmo2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    palindrome = string\n\
    \    reverse_string = reverse(string)\n    position = search(reverse_string, string)\
    \ # find the longest postfix of string that is a palindrome\n    if position <\
    \ 0\n        position = 0\n    end\n    if position < length(string)\n       \
    \ palindrome = palindrome * reverse_string[1:position]\n    end\n    return palindrome\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp41ixpa3c.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: search not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp41ixpa3c.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp41ixpa3c.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp41ixpa3c.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp41ixpa3c.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: search not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp41ixpa3c.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp41ixpa3c.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp41ixpa3c.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp41ixpa3c.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: search not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp41ixpa3c.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp41ixpa3c.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp41ixpa3c.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp41ixpa3c.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: search not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp41ixpa3c.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/jul"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp41ixpa3c.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # TODO: This will create a new array every time. \n    # Ideally, the suffix\
    \ array should be created once and modified in-place.\n    suffixes = [string[i:end]\
    \ for i=1:length(string)]\n    # Iterate over all suffixes of the given string\
    \ in order of their lengths (from 1 to N).\n    for suffix in suffixes\n     \
    \   # Find all the prefixes of suffix.\n        prefixes = [suffix[1:i] for i=1:length(suffix)]\n\
    \        # Check all prefixes to be a palindrome\n        for prefix in prefixes\n\
    \            # Break out of the inner loop when the prefix is a palindrome, \n\
    \            # so that the longest prefix is selected.\n            if is_palindrome(prefix)\n\
    \                # Return the given string with a reverse of the found prefix\
    \ appended to it.\n                return string * reverse(prefix)\n         \
    \   end\n        end\n    end\n    # If no suffix found that is a palindrome,\
    \ then the given string must be a palindrome.\n    return string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf5jqjxt4.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf5jqjxt4.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf5jqjxt4.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5jqjxt4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpf5jqjxt4.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf5jqjxt4.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf5jqjxt4.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5jqjxt4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpf5jqjxt4.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf5jqjxt4.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf5jqjxt4.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5jqjxt4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpf5jqjxt4.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpf5jqjxt4.jl:24\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf5jqjxt4.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Empty or single-character strings are palindromes.\n    if length(string)\
    \ <= 1\n        return string\n    end\n    # Find the longest palindromic postfix\
    \ of the string.\n    result = find_longest_palindromic_postfix(string)\n    #\
    \ Append to the end of the string reverse of the string prefix that comes before\
    \ the palindromic suffix.\n    # Here we use splat operator to add characters\
    \ one by one.\n    return string * ' ' * reverse(string[1:end - length(result)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp65f5v1a8.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp65f5v1a8.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp65f5v1a8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp65f5v1a8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp65f5v1a8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp65f5v1a8.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp65f5v1a8.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp65f5v1a8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp65f5v1a8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_longest_palindromic_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp65f5v1a8.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp65f5v1a8.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp65f5v1a8.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp65f5v1a8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n    string_prefix\
    \ = string[1:end]\n    string_prefix_reverse = reverse(string_prefix)\n    return\
    \ string * string_prefix_reverse * longest_palindrome_suffix\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkpomn1es.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkpomn1es.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkpomn1es.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpomn1es.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpkpomn1es.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkpomn1es.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkpomn1es.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpomn1es.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpkpomn1es.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpkpomn1es.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkpomn1es.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpomn1es.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpkpomn1es.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkpomn1es.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n::Int = length(string)\n    n + 1 >= n # we assume all strings are one character\
    \ long\n    for l in 1:n \n        for c in 1:n-l+1\n            if reverse(string[c:c+l])\
    \ == string[c:c+l]\n                return string * reverse(string[1:c-1])\n \
    \           end\n        end\n    end\n    string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprzcx6m6a.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  BoundsError: attempt to access 1-codeunit\
    \ String at index [1:2]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmprzcx6m6a.jl:17\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprzcx6m6a.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprzcx6m6a.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprzcx6m6a.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [3:4]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmprzcx6m6a.jl:17\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprzcx6m6a.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmprzcx6m6a.jl:28\ntest set:\
    \ Error During Test at /tmp/tmprzcx6m6a.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  BoundsError: attempt to access 3-codeunit String\
    \ at index [3:4]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3]\
    \ make_palindrome(string::String)\n     @ Main /tmp/tmprzcx6m6a.jl:17\n   [4]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmprzcx6m6a.jl:32 [inlined]\n\
    \   [6] macro expansion\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprzcx6m6a.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    j::Int64 = string.length\n    while j > 0\n        s = string[1:j]\n    \
    \    if is_palindrome(s)\n            return string * s[end:-1:1]\n        end\n\
    \        j -= 1\n    end\n    return string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe0gxqqru.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpe0gxqqru.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe0gxqqru.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe0gxqqru.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpe0gxqqru.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpe0gxqqru.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe0gxqqru.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe0gxqqru.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpe0gxqqru.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] make_palindrome(string::String)\n\
    \     @ Main /tmp/tmpe0gxqqru.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe0gxqqru.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe0gxqqru.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpe0gxqqru.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  type String has no field length\n  Stacktrace"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe0gxqqru.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    i = find_max_palindrome_suffix(string)\n\
    \    reverse_prefix = reverse(string[1:i])\n    return string * reverse_prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc4w6kmu4.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: find_max_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpc4w6kmu4.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc4w6kmu4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc4w6kmu4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc4w6kmu4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_max_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpc4w6kmu4.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc4w6kmu4.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc4w6kmu4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc4w6kmu4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_max_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpc4w6kmu4.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc4w6kmu4.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc4w6kmu4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc4w6kmu4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: find_max_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n    "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4w6kmu4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    \n    # Find the longest postfix that is a palindrome:\n    postfix = string\
    \ \n    while !is_palindrome(postfix)\n        pop!(postfix)\n    end\n    \n\
    \    # Append reversed prefix:\n    prefix = reverse(string[1:end-length(postfix)])\n\
    \    string * prefix\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj36kfk9_.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpj36kfk9_.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj36kfk9_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj36kfk9_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpj36kfk9_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpj36kfk9_.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj36kfk9_.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj36kfk9_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpj36kfk9_.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpj36kfk9_.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj36kfk9_.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj36kfk9_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpj36kfk9_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpj36kfk9_.jl:16\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj36kfk9_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    suffix_length = find_max_suffix_length(string)\n    prefix = string[1:suffix_length]\n\
    \    return string * prefix\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp155__eo5.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_max_suffix_length\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp155__eo5.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp155__eo5.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp155__eo5.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp155__eo5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_max_suffix_length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp155__eo5.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp155__eo5.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp155__eo5.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp155__eo5.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_max_suffix_length not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp155__eo5.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp155__eo5.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp155__eo5.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp155__eo5.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_max_suffix_length not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp155__eo5.jl:13"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp155__eo5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0 \n        return string\n    end\n    longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    reversed_prefix = reverse(string[1:end-length(longest_palindrome_suffix)])\n\
    \    return string * reversed_prefix\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp3dcd4l6.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp3dcd4l6.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp3dcd4l6.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp3dcd4l6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpp3dcd4l6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp3dcd4l6.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp3dcd4l6.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp3dcd4l6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpp3dcd4l6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpp3dcd4l6.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp3dcd4l6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp3dcd4l6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpp3dcd4l6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ M"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp3dcd4l6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    \n    suffix = suffix_palindrome(string)\n    prefix = string[1:end-length(suffix)]\n\
    \    return string * reverse(prefix)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv4ul4asy.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: suffix_palindrome not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpv4ul4asy.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv4ul4asy.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv4ul4asy.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpv4ul4asy.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpv4ul4asy.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv4ul4asy.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv4ul4asy.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpv4ul4asy.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpv4ul4asy.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv4ul4asy.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv4ul4asy.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpv4ul4asy.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: suffix_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpv4ul4asy.jl:14\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv4ul4asy.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) == 0\n        return string\n    end\n    for i in 1:length(string)\n\
    \        if is_palindrome(string[i:end])\n            return string * reverse(string[1:i-1])\n\
    \        end\n    end\n    return string * reverse(string[1:end])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt6kzlbj9.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpt6kzlbj9.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt6kzlbj9.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt6kzlbj9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpt6kzlbj9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpt6kzlbj9.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt6kzlbj9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt6kzlbj9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpt6kzlbj9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpt6kzlbj9.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt6kzlbj9.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt6kzlbj9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpt6kzlbj9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpt6kzlbj9.jl:17\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt6kzlbj9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    matches = [is_palindrome(string[i:end]) for i in\
    \ 1:n]\n    max_match = argmax(matches)\n    return string * reverse(string[1:max_match])\n\
    end\nmake_palindrome(\"cata\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: is_palindrome not defined\nStacktrace:\n\
    \ [1] (::var\"#1#2\"{String})(i::Int64)\n   @ Main ./none:0\n [2] iterate\n  \
    \ @ ./generator.jl:47 [inlined]\n [3] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{String}})\n   @ Base ./array.jl:724\n [4] make_palindrome(string::String)\n\
    \   @ Main /tmp/tmp19mdvrts.jl:14\n [5] top-level scope\n   @ /tmp/tmp19mdvrts.jl:18\n\
    in expression starting at /tmp/tmp19mdvrts.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == ''\n        return ''\n    end\n    longest_prefix_palindrome,\
    \ longest_postfix_palindrome = string[1:end], string[end:1:end]\n    for i in\
    \ 1:length(string)\n        if string[1:i] == string[end:end-i:end]\n        \
    \    longest_prefix_palindrome = string[1:i]\n        end\n        if string[i:end]\
    \ == string[end:end-i:end]\n            longest_postfix_palindrome = string[i:end]\n\
    \        end\n    end\n    return string * reverse(longest_prefix_palindrome)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrvou18v.jl:13\nin expression starting at\
    \ /tmp/tmpfrvou18v.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    n = length(string)\n    nz = n\n    while n > 0\n        if is_palindrome(string[1:n])\n\
    \            return string*reverse(string[n+1:nz])\n        end\n        n -=\
    \ 1\n    end\n    return string*reverse(string)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjynqxfqm.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjynqxfqm.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjynqxfqm.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjynqxfqm.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpjynqxfqm.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjynqxfqm.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjynqxfqm.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjynqxfqm.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpjynqxfqm.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjynqxfqm.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjynqxfqm.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjynqxfqm.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpjynqxfqm.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpjynqxfqm.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjynqxfqm.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    \n    # Number of characters before the longest palindromic suffix\n    n::Int\
    \ = length(string) - find_longest_palindromic_suffix(string)\n    \n    return\
    \ string * reverse(string[1:n])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt44brrb_.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt44brrb_.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt44brrb_.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt44brrb_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt44brrb_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt44brrb_.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt44brrb_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt44brrb_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt44brrb_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpt44brrb_.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt44brrb_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt44brrb_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt44brrb_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt44brrb_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    tail_idx = find_longest_palindrome_tail(string)\n    return string * reverse(string[1:tail_idx])\n\
    end\n \nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxwnba_36.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_tail\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxwnba_36.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxwnba_36.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxwnba_36.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxwnba_36.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_tail not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxwnba_36.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxwnba_36.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxwnba_36.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxwnba_36.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_tail\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpxwnba_36.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxwnba_36.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxwnba_36.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxwnba_36.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_tail\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Mai"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxwnba_36.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # If the supplied string is empty, return the empty string.\n    if string\
    \ == \"\"\n        return \"\"\n    # Find the longest postfix that is a palindrome.\n\
    \    n = length(string)\n    for i in 1:n\n        prefix = string[1:i]\n    \
    \    # If a postfix is a palindrome,\n        if prefix == reverse(prefix)\n \
    \           # Return the string with reverse of the prefix appended to the end.\n\
    \            return string * reverse(string[1:i])\n        end\n    end\n    #\
    \ If a postfix is not a palindrome,\n    # Return the string with reverse of the\
    \ whole string appended to the end.\n    return string * reverse(string)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1_msylft.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1_msylft.jl:1\n\
    in expression starting at /tmp/tmp1_msylft.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    palindrome_suffix = longest_palindrome_postfix(string)\n    reverse_prefix\
    \ = reverse(string[1:end-length(palindrome_suffix)])\n    return string * reverse_prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp82w216lg.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp82w216lg.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp82w216lg.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp82w216lg.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp82w216lg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: longest_palindrome_postfix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp82w216lg.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp82w216lg.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp82w216lg.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp82w216lg.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: longest_palindrome_postfix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp82w216lg.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp82w216lg.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp82w216lg.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp82w216lg.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: longest_palindrome_postfix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp82w216lg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) <= 1\n        return string\n    end\n    m = z_function(string)\n\
    \    return string * reverse(string[1:indmax(m)])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbvzzr9nz.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: z_function not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpbvzzr9nz.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbvzzr9nz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbvzzr9nz.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbvzzr9nz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: z_function not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbvzzr9nz.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbvzzr9nz.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbvzzr9nz.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbvzzr9nz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: z_function not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmpbvzzr9nz.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbvzzr9nz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbvzzr9nz.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbvzzr9nz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    # Find the longest palindromic suffix by using the fact that we could find\
    \ the shortest palindrome by\n    # adding the reverse of the postfix of the string\
    \ to the end of the string.\n    palindromic_suffix = find_longest_palindromic_suffix(string)\n\
    \    # Add the reverse of the preffix to the string\n    string * reverse(string[1:end\
    \ - length(palindromic_suffix)])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplu7e7z_s.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplu7e7z_s.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplu7e7z_s.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplu7e7z_s.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplu7e7z_s.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplu7e7z_s.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplu7e7z_s.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplu7e7z_s.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplu7e7z_s.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmplu7e7z_s.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplu7e7z_s.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplu7e7z_s.jl:23\ntest set:\
    \ Error During Test at /tmp/tmplu7e7z_s.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplu7e7z_s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    palindrome_suffix = find_longest_palindrome_suffix(string)\n    palindrome_prefix\
    \ = reverse(string[1:end-length(palindrome_suffix)])\n    return string * palindrome_prefix\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp53lxdhkb.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53lxdhkb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53lxdhkb.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53lxdhkb.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp53lxdhkb.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindrome_suffix not\
    \ defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53lxdhkb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53lxdhkb.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53lxdhkb.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp53lxdhkb.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmp53lxdhkb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53lxdhkb.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53lxdhkb.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp53lxdhkb.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindrome_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp53lxdhkb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    postfix_len = find_max_palindrome_postfix_len(string)\n    if postfix_len\
    \ == length(string)\n        return string\n    else\n        return string *\
    \ string[1:postfix_len]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph0fm_zzx.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_max_palindrome_postfix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph0fm_zzx.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph0fm_zzx.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph0fm_zzx.jl:24\ntest set:\
    \ Error During Test at /tmp/tmph0fm_zzx.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_max_palindrome_postfix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph0fm_zzx.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph0fm_zzx.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph0fm_zzx.jl:24\ntest set:\
    \ Error During Test at /tmp/tmph0fm_zzx.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_max_palindrome_postfix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmph0fm_zzx.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph0fm_zzx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph0fm_zzx.jl:24\ntest set:\
    \ Error During Test at /tmp/tmph0fm_zzx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_max_palindrome_postfix_len\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0fm_zzx.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    length = length(string)\n    if length < 2\n        return string\n    end\n\
    \    maximum = length - 1\n    index = length - 1\n    while index > 0\n     \
    \   if string[index] == string[maximum]\n            maximum -= 1\n        else\n\
    \            maximum = length - 1\n        end\n        index -= 1\n    end\n\
    \    if maximum == 0\n        return string\n    end\n    return string * string[1:maximum]\n\
    end\nmake_palindrome(\"cat\")\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: length not defined\nStacktrace:\n [1]\
    \ make_palindrome(string::String)\n   @ Main /tmp/tmpsxvew_du.jl:13\n [2] top-level\
    \ scope\n   @ /tmp/tmpsxvew_du.jl:32\nin expression starting at /tmp/tmpsxvew_du.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    (lps, _) = find_longest_palindromic_suffix(string)\n    prefix = string[1:end-lps]\n\
    \    return string * reverse(prefix)\nend\n \nusing Test\n\n@testset begin\n\n\
    candidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"\
    xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo0i17fa9.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\") == \"\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpo0i17fa9.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0i17fa9.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0i17fa9.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpo0i17fa9.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == \"x\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpo0i17fa9.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0i17fa9.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0i17fa9.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpo0i17fa9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main\
    \ /tmp/tmpo0i17fa9.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0i17fa9.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0i17fa9.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpo0i17fa9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: find_longest_palindromic_suffix\
    \ not defined\n  Stacktrace:\n   [1] make_palindrome(string::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0i17fa9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    len = length(string)\n    j = len\n    while j > 0\n        if is_palindrome(string[1:j])\n\
    \            return string * reverse(string[j+1:len])\n        end\n        j\
    \ -= 1\n    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4t4r40s8.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4t4r40s8.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4t4r40s8.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4t4r40s8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4t4r40s8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4t4r40s8.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4t4r40s8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4t4r40s8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4t4r40s8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4t4r40s8.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4t4r40s8.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4t4r40s8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4t4r40s8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: is_palindrome not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp4t4r40s8.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4t4r40s8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    size = length(string)\n    if size == 0\n        return \"\"\n    end\n \
    \   for i in 1:size\n        reverse_prefix = reverse(string[1:i])\n        if\
    \ string[i+1:end] == reverse_prefix\n            return string * reverse_prefix\n\
    \        end\n    end\n    return string * reverse(string[1:end])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplom56gf9.jl:31\n  Expression: candidate(\"\
    x\") == \"x\"\n   Evaluated: \"xx\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplom56gf9.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplom56gf9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmplom56gf9.jl:32\n  Expression: candidate(\"xyz\") == \"xyzyx\"\
    \n   Evaluated: \"xyzzyx\" == \"xyzyx\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplom56gf9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplom56gf9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmplom56gf9.jl:33\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxyx\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplom56gf9.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplom56gf9.jl:29\ntest set: Test\
    \ Failed at /tmp/tmplom56gf9.jl:34\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryyrrej\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplom56gf9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplom56gf9.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplom56gf9.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if length(string) < 2 \n        return string\n    end\n    if string ==\
    \ reverse(string)\n        return string\n    end\n    # Find the longest postfix\
    \ that is a palindrome\n    for i in length(string):-1:1\n        substring =\
    \ string[i:end]\n        if substring == reverse(substring)\n            return\
    \ string * string[1:i]\n        end\n    end\n    # Single-character case\n  \
    \  return string * string[1:end]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\"\
    ) == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\"\
    ) == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpowb9f0ie.jl:36\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyzxyz\" == \"xyzyx\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowb9f0ie.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpowb9f0ie.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpowb9f0ie.jl:38\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerryjerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpowb9f0ie.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpowb9f0ie.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpowb9f0ie.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    l = length(string)\n    i = l-1\n    while i > 0\n        prefix_len = l\
    \ - i\n        if string[1:prefix_len] == string[i+1:l]\n            return string\
    \ * string[prefix_len:i]\n        end\n        i -= 1\n    end\n    return string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg6bmsl09.jl:31\n  Expression: candidate(\"\
    xyz\") == \"xyzyx\"\n   Evaluated: \"xyz\" == \"xyzyx\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6bmsl09.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6bmsl09.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpg6bmsl09.jl:32\n  Expression: candidate(\"xyx\") == \"xyx\"\
    \n   Evaluated: \"xyxxy\" == \"xyx\"\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg6bmsl09.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6bmsl09.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpg6bmsl09.jl:33\n  Expression: candidate(\"jerry\") == \"jerryrrej\"\
    \n   Evaluated: \"jerry\" == \"jerryrrej\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6bmsl09.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6bmsl09.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6bmsl09.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n\
    \    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n\
    \    'catac'\n    \"\"\"\nfunction make_palindrome(string::String)::String \n\
    \    if string == \"\"\n        return \"\"\n    end\n    lsp = lsp_prefix(string)\n\
    \    if lsp[2] == length(string)\n        return string\n    end\n    return string*reverse(string[1:lsp[2]+1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7g70j9a8.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"x\") == \"x\"\n  UndefVarError: lsp_prefix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7g70j9a8.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7g70j9a8.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7g70j9a8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7g70j9a8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"xyz\") == \"xyzyx\"\n  UndefVarError: lsp_prefix not defined\n \
    \ Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7g70j9a8.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7g70j9a8.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7g70j9a8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7g70j9a8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"xyx\") == \"xyx\"\n  UndefVarError: lsp_prefix not defined\n  Stacktrace:\n\
    \   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7g70j9a8.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7g70j9a8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7g70j9a8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7g70j9a8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"jerry\") == \"jerryrrej\"\n  UndefVarError: lsp_prefix not defined\n\
    \  Stacktrace:\n   [1] make_palindrome(string::String)\n     @ Main /tmp/tmp7g70j9a8.jl:16\n\
    \   [2] macro expansion\n     @ /sh"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7g70j9a8.jl:24\n"
  exit_code: 1
  status: SyntaxError
