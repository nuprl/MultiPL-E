name: HumanEval_74_total_match
language: jl
results:
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_sum = sum(length(s) for s in\
    \ lst1)\n    lst2_sum = sum(length(s) for s in lst2)\n    if lst1_sum < lst2_sum\n\
    \        return lst1\n    elseif lst1_sum > lst2_sum\n        return lst2\n  \
    \  else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4b1u33fh.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  ArgumentError: reducing over an empty collection is\
    \ not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\\
    n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\\n      @ Base ./reduce.jl:344\\n    [3] reduce_empty(op::Base.MappingRF{var\"\
    #1#3\", Base.BottomRF{typeof(Base.add_sum)}}, #unused#::Type{String})\\n     \
    \ @ Base ./reduce.jl:331\\n    [4] reduce_empty_iter\\n      @ ./reduce.jl:357\
    \ [inlined]\\n    [5] reduce_empty_iter\\n      @ ./reduce.jl:356 [inlined]\\\
    n    [6] foldl_impl\\n      @ ./reduce.jl:49 [inlined]\\n    [7] mapfoldl_impl\\\
    n      @ ./reduce.jl:44 [inlined]\\n    [8] #mapfoldl#244\\n      @ ./reduce.jl:162\
    \ [inlined]\\n    [9] mapfoldl\\n      @ ./reduce.jl:162 [inlined]\\n   [10] #mapreduce#248\\\
    n      @ ./reduce.jl:289 [inlined]\\n   [11] mapreduce\\n      @ ./reduce.jl:289\
    \ [inlined]\\n   [12] #sum#251\\n      @ ./reduce.jl:503 [inlined]\\n   [13] sum\\\
    n      @ ./reduce.jl:503 [inlined]\\n   [14] #sum#252\\n      @ ./reduce.jl:532\
    \ [inlined]\\n   [15] sum\\n      @ ./reduce.jl:532 [inlined]\\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n      @ Main /tmp/tmp4b1u33fh.jl:15\\n   [17] macro\
    \ expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [18] macro expansion\\n      @ /tmp/tmp4b1u33fh.jl:30 [inlined]\\\
    n   [19] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmp4b1u33fh.jl:29\\ntest\
    \ set: Error During Test at /tmp/tmp4b1u33fh.jl:37\\n  Test threw exception\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1, len2 = 0, 0\n    for w in\
    \ lst1 \n        len1 += length(w)\n    end\n    for w in lst2 \n        len2\
    \ += length(w)\n    end\n    if len1 < len2 \n        return lst1\n    elseif\
    \ len2 < len1 \n        return lst2\n    else \n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n  l1 = sum(length, lst1)\n  l2 = sum(length,\
    \ lst2)\n  if l1 > l2\n    return lst2\n  elseif l1 < l2\n    return lst1\n  else\n\
    \    return lst1\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt16qnbpx.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  ArgumentError: reducing over an empty collection is\
    \ not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\\
    n    [2] mapreduce_empty(f::Function, op::Function, T::Type)\\n      @ Base ./reduce.jl:344\\\
    n    [3] reduce_empty(op::Base.MappingRF{typeof(length), typeof(Base.add_sum)},\
    \ #unused#::Type{String})\\n      @ Base ./reduce.jl:331\\n    [4] reduce_empty_iter\\\
    n      @ ./reduce.jl:357 [inlined]\\n    [5] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{String}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [6] _mapreduce(f::typeof(length), op::typeof(Base.add_sum),\
    \ #unused#::IndexLinear, A::Vector{String})\\n      @ Base ./reduce.jl:402\\n\
    \    [7] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [8] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n    [9] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [10] #_sum#741\\n      @ ./reducedim.jl:894 [inlined]\\n   [11]\
    \ _sum\\n      @ ./reducedim.jl:894 [inlined]\\n   [12] #sum#739\\n      @ ./reducedim.jl:890\
    \ [inlined]\\n   [13] sum\\n      @ ./reducedim.jl:890 [inlined]\\n   [14] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n      @ Main /tmp/tmpt16qnbpx.jl:15\\n   [15] macro\
    \ expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [16] macro expansion\\n      @ /tmp/tmpt16qnbpx.jl:30 [inlined]\\\
    n   [17] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [18] top-level scope\\n      @ /tmp/tmpt16qnbpx.jl:29\\ntest\
    \ set: Error During Test at /tmp/tmpt16qnbpx.jl:37\\n  Test threw exception\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\n    [2] mapreduce_emp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n1, n2 = 0, 0 \n    for s in lst1\
    \ n1 += length(s) end\n    for s in lst2 n2 += length(s) end\n    return lst1\
    \ if n1 < n2 else lst2\nend\n@testset \"Examples\" begin\n    @test total_match([],\
    \ []) == []\n    @test total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"\
    hI\", \"Hi\"]\n    @test total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]\n    @test total_match([\"hi\",\
    \ \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n    @test\
    \ total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\nend;\n\
    \ \n \n##########################################################################\n\
    \"\"\"\n    Write a function that accepts a list of strings and returns a list\
    \ containing \n    all the lowercase words beginning with a vowel.\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp5nhrwwok.jl:14 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5nhrwwok.jl:18\n\
    in expression starting at /tmp/tmp5nhrwwok.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total1 = sum(length.(lst1))\n  \
    \  total2 = sum(length.(lst2))\n    if total1 == total2\n        return lst1\n\
    \    elseif total1 < total2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum_lst1 = sum(map(x -> length(x),\
    \ lst1))\n    sum_lst2 = sum(map(x -> length(x), lst2))\n    if sum_lst1 < sum_lst2\n\
    \        return lst1\n    elseif sum_lst1 > sum_lst2\n        return lst2\n  \
    \  else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = sum(map(length, lst1))\n\
    \    lst2_total = sum(map(length, lst2))\n    if lst1_total == lst2_total\n  \
    \      return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"])\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total1 = 0\n    total2 = 0\n   \
    \ for x in lst1\n        total1 += length(x)\n    end\n    for x in lst2\n   \
    \     total2 += length(x)\n    end\n    if total1 == total2\n        return lst1\n\
    \    elseif total1 < total2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = 0\n    lst2_len = 0\n\
    \    for x in lst1\n        lst1_len += length(x)\n    end\n    for x in lst2\n\
    \        lst2_len += length(x)\n    end\n    if lst1_len < lst2_len\n        return\
    \ lst1\n    elseif lst1_len > lst2_len\n        return lst2\n    else\n      \
    \  return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1 = 0\n    len2 = 0\n    for\
    \ item in lst1\n        len1 += length(item)\n    end\n    for item in lst2\n\
    \        len2 += length(item)\n    end\n    return lst1 == lst2 ? lst1 : len1\
    \ < len2 ? lst1 : lst2\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjfkvwx_g.jl:36\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjfkvwx_g.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjfkvwx_g.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjfkvwx_g.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if count_chars(lst1) == count_chars(lst2)\n\
    \        return lst1\n    end\n    if count_chars(lst1) < count_chars(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe_j56j2t.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]\\n  UndefVarError: count_chars not defined\\n  Stacktrace:\\\
    n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmpe_j56j2t.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe_j56j2t.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe_j56j2t.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpe_j56j2t.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\\n  UndefVarError: count_chars not defined\\n  Stacktrace:\\\
    n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmpe_j56j2t.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe_j56j2t.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe_j56j2t.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpe_j56j2t.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\\n  UndefVarError:\
    \ count_chars not defined\\n  Stacktrace:\\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n     @ Main /tmp/tmpe_j56j2t.jl:18\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe_j56j2t.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe_j56j2t.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpe_j56j2t.jl"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    lst1_letters_number = count(x -> x in\
    \ Char.(lst1), lst1)\n    lst2_letters_number = count(x -> x in Char.(lst2), lst2)\n\
    \    if lst1_letters_number == lst2_letters_number\n        return lst1\n    elseif\
    \ lst1_letters_number > lst2_letters_number\n        return lst2\n    else\n \
    \       return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    i = length(lst1)\n    j = length(lst2)\n\
    \    (i == j && lst1) || (i < j && lst1) || (i > j && lst2)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbles7yh0.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  TypeError: non-boolean (Vector{String}) used in boolean\
    \ context\\n  Stacktrace:\\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\\
    n     @ Main /tmp/tmpbles7yh0.jl:17\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbles7yh0.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbles7yh0.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpbles7yh0.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n  TypeError:\
    \ non-boolean (Vector{String}) used in boolean context\\n  Stacktrace:\\n   [1]\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main /tmp/tmpbles7yh0.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbles7yh0.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbles7yh0.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpbles7yh0.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\\n  TypeError: non-boolean (Vector{String}) used in boolean\
    \ context\\n  Stacktrace:\\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\\
    n     @ Main /tmp/tmpbles7yh0.jl:17\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbles7yh0.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total1 = 0\n    total2 = 0\n   \
    \ for i in lst1\n        total1 += length(i)\n    end\n    for i in lst2\n   \
    \     total2 += length(i)\n    end\n    if total1 < total2\n        return lst1\n\
    \    elseif total1 > total2\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1 = 0\n    len2 = 0\n    for\
    \ x in lst1\n        len1 += length(x)\n    end\n    for x in lst2\n        len2\
    \ += length(x)\n    end\n    if len1 == len2\n        return lst1\n    elseif\
    \ len1 < len2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return (length(join(lst1, \"\"))\
    \ < length(join(lst2, \"\"))) ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4_8jtlw0.jl:23\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_8jtlw0.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_8jtlw0.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4_8jtlw0.jl:24\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_8jtlw0.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_8jtlw0.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4_8jtlw0.jl:25\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_8jtlw0.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_8jtlw0.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp4_8jtlw0.jl:26\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_8jtlw0.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_8jt"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4_8jtlw0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    totals1 = sum(length.(lst1))\n \
    \   totals2 = sum(length.(lst2))\n    if totals1 > totals2\n        return lst2\n\
    \    elseif totals1 < totals2\n        return lst1\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total1 = 0\n    total2 = 0\n   \
    \ for i in lst1\n        total1 += length(i)\n    end\n    for i in lst2\n   \
    \     total2 += length(i)\n    end\n    if total1 <= total2\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total_chars_1 = sum([length(e) for\
    \ e in lst1])\n    total_chars_2 = sum([length(e) for e in lst2])\n    if total_chars_1\
    \ < total_chars_2\n        return lst1\n    elseif total_chars_1 > total_chars_2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len_first = sum([length(x) for x\
    \ in lst1])\n    len_second = sum([length(x) for x in lst2])\n    return lst1\
    \ == len_first < len_second ? lst1 : lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc5wpjvyr.jl:26\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]\n   Evaluated: [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5wpjvyr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5wpjvyr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc5wpjvyr.jl:27\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5wpjvyr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5wpjvyr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc5wpjvyr.jl:30\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated: [\"hI\", \"\
    hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc5wpjvyr.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5wpjvyr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc5wpjvyr.jl:31\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5wpjvyr.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc5wpjvyr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total1 = 0\n    total2 = 0\n   \
    \ for i in lst1\n        total1 += length(i)\n    end\n    for i in lst2\n   \
    \     total2 += length(i)\n    end\n    if total1<total2\n        return lst1\n\
    \    elseif total1>total2\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ []\n    end\n    num1 = sum(length.(lst1))\n    num2 = sum(length.(lst2))\n\
    \    if num1 < num2\n        return lst1\n    elseif num1 > num2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    #return sum(length(i) for i in lst1)<sum(length(i)\
    \ for i in lst2) ? lst1 : lst2\n    d1 = reduce(+, map(length, lst1))\n    d2\
    \ = reduce(+, map(length, lst2))\n    return d1<d2 ? lst1 : d1>d2 ? lst2 : lst1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(join(lst1)) < length(join(lst2))\n\
    \        return lst1\n    elseif length(join(lst1)) > length(join(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    # We are using a combination of\
    \ length() and the count() function to count the total number of characters in\
    \ our lists\n    if count(lst1) == count(lst2)\n        return lst1\n    elseif\
    \ count(lst1) < count(lst2)\n        return lst1\n    else \n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwuxauss5.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]\\n  TypeError: non-boolean (String) used in boolean context\\\
    n  Stacktrace:\\n    [1] _simple_count\\n      @ ./reduce.jl:1206 [inlined]\\\
    n    [2] _count\\n      @ ./reducedim.jl:407 [inlined]\\n    [3] #count#735\\\
    n      @ ./reducedim.jl:405 [inlined]\\n    [4] #count#734\\n      @ ./reducedim.jl:404\
    \ [inlined]\\n    [5] count\\n      @ ./reducedim.jl:404 [inlined]\\n    [6] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n      @ Main /tmp/tmpwuxauss5.jl:16\\n    [7] macro\
    \ expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpwuxauss5.jl:30 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpwuxauss5.jl:28\\ntest\
    \ set: Error During Test at /tmp/tmpwuxauss5.jl:31\\n  Test threw exception\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"]\\n  TypeError: non-boolean (String) used in boolean\
    \ context\\n  Stacktrace:\\n    [1] _simple_count\\n      @ ./reduce.jl:1206 [inlined]\\\
    n    [2] _count\\n      @ ./reducedim.jl:407 [inlined]\\n    [3] #count#735\\\
    n      @ ./reducedim.jl:405 [inlined]\\n    [4] #count#734\\n      @ ./reducedim.jl:404\
    \ [inlined]\\n    [5] count\\n      @ ./reducedim.jl:404 [inlined]\\n    [6] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n      @ Main /tmp/tmpwuxauss5.jl:16\\n    [7] macro\
    \ expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n    [8] macro expansion\\n      @ /tmp/tmpwuxauss5.jl:31 [inlined]\\\
    n    [9] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpwuxauss5.jl:28\\ntest\
    \ set: Error During Test at /tmp/tmpwuxauss5.jl:32\\n  Test threw exception\\\
    n  Expres"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1 = sum(length.(lst1))\n    sum2\
    \ = sum(length.(lst2))\n    if sum1 == sum2\n        return lst1\n    elseif sum1\
    \ < sum2\n        return lst1\n    else\n        return lst2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \"\"\"Write a function that accepts\
    \ two lists of strings and returns the list that has total number of chars in\
    \ the all strings of the list less than the other list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyzqqb_hd.jl:1\nin expression starting at /tmp/tmpyzqqb_hd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    total1 = 0\n    total2 = 0\n    for i in lst1\n        total1\
    \ += length(i)\n    end\n    for i in lst2\n        total2 += length(i)\n    end\n\
    \    if total1 == total2\n        return lst1\n    elseif total1 < total2\n  \
    \      return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return length(lst1) > length(lst2)\
    \ ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiu10tyob.jl:23\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiu10tyob.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiu10tyob.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiu10tyob.jl:26\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiu10tyob.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiu10tyob.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpiu10tyob.jl:27\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiu10tyob.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiu10tyob.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiu10tyob.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = sum([length(e) for e\
    \ in lst1])\n    lst2_len = sum([length(e) for e in lst2])\n    if lst1_len ==\
    \ lst2_len\n        return lst1\n    elseif lst1_len < lst2_len\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    # Base case: if one of the lists\
    \ are empty, return the other list\n    if length(lst1) == 0\n        return lst2\n\
    \    elseif length(lst2) == 0\n        return lst1\n    end\n    \n    # determine\
    \ which list is longer\n    lst1_len = sum([length(i) for i in lst1])\n    lst2_len\
    \ = sum([length(i) for i in lst2])\n    \n    if lst1_len < lst2_len\n       \
    \ return lst1\n    elseif lst2_len < lst1_len\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyjphvrj4.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjphvrj4.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjphvrj4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpyjphvrj4.jl:47\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjphvrj4.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjphvrj4.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjphvrj4.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total_chars_lst1 = sum([length(x)\
    \ for x in lst1])\n    total_chars_lst2 = sum([length(x) for x in lst2])\n   \
    \ if total_chars_lst1 < total_chars_lst2\n        return lst1\n    elseif total_chars_lst1\
    \ > total_chars_lst2\n        return lst2\n    else\n        return lst1\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n  lst1_count = sum(length.(lst1))\n\
    \  lst2_count = sum(length.(lst2))\n  if (lst1_count == lst2_count)\n    return\
    \ lst1\n  elseif (lst1_count < lst2_count)\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend\nprintln(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\n\
    println(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]))\nprintln(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\nprintln(total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]))\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "[\"hI\", \"Hi\"]\n[\"hi\", \"admin\"]\n[\"hI\", \"hi\", \"hi\"]\n[\"4\"\
    ]\nTest Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    #return the first list if the lengths\
    \ are the same\n    if length(lst1) == length(lst2)\n        return lst1\n   \
    \ end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_yy039cn.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_yy039cn.jl:1\n\
    in expression starting at /tmp/tmp_yy039cn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n1 = sum([length(x) for x in lst1])\n\
    \    n2 = sum([length(x) for x in lst2])\n    if n1 > n2\n        return lst2\n\
    \    elseif n1 < n2\n        return lst1\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    function total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String}\n        length1, length2 = map(x -> sum(length.(x)),\
    \ (lst1, lst2))\n        if length1 > length2 \n            return lst2\n    \
    \    else\n            return lst1\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1 = 0\n    sum2 = 0\n    for\
    \ i in lst1\n        sum1 += length(i)\n    end\n    for i in lst2\n        sum2\
    \ += length(i)\n    end\n    if sum1 == sum2\n        return lst1\n    elseif\
    \ sum1 < sum2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    count1 = 0 \n    count2 = 0 \n \
    \   for i = 1:length(lst1)\n        for j = 1:length(lst1[i])\n            count1\
    \ += 1\n        end\n    end\n    for i = 1:length(lst2)\n        for j = 1:length(lst2[i])\n\
    \            count2 += 1\n        end\n    end\n    if count1 == count2 \n   \
    \     return lst1\n    elseif count1 > count2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n     if sum(string.(lst1)) < sum(string.(lst2))\
    \ \n         return lst1\n     elseif sum(string.(lst1)) > sum(string.(lst2))\n\
    \         return lst2\n     else\n         return lst1\n     end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n1 = sum([length(string(x)) for\
    \ x in lst1])\n    n2 = sum([length(string(x)) for x in lst2])\n    if n1 < n2\n\
    \        return lst1\n    elseif n1 > n2\n        return lst2\n    else\n    \
    \    return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if size(lst1)[1] == 0\n        return\
    \ lst1\n    end\n    if sum(length.(lst1)) == sum(length.(lst2))\n        return\
    \ lst1\n    end\n    if sum(length.(lst1)) < sum(length.(lst2))\n        return\
    \ lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    i1 = sum(length.(lst1))\n    i2\
    \ = sum(length.(lst2))\n    if i1 == i2\n        return lst1\n    elseif i1 >\
    \ i2\n        return lst2\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total_match(lst1::Vector{String},\
    \ lst2::Vector{String}) =\n        total_chars(lst1) < total_chars(lst2) ? lst1\
    \ : lst2\n        \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf8qxj2yb.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf8qxj2yb.jl:1\n\
    in expression starting at /tmp/tmpf8qxj2yb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_sum = mapreduce(length, +,\
    \ lst1)\n    lst2_sum = mapreduce(length, +, lst2)\n    if lst1_sum > lst2_sum\n\
    \        return lst2\n    elseif lst1_sum < lst2_sum\n        return lst1\n  \
    \  else\n        return lst1\n    end\nend\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"])\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0djqaa8f.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  ArgumentError: reducing over an empty collection is\
    \ not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\\
    n    [2] mapreduce_empty(f::Function, op::Function, T::Type)\\n      @ Base ./reduce.jl:344\\\
    n    [3] reduce_empty(op::Base.MappingRF{typeof(length), typeof(+)}, #unused#::Type{String})\\\
    n      @ Base ./reduce.jl:331\\n    [4] reduce_empty_iter\\n      @ ./reduce.jl:357\
    \ [inlined]\\n    [5] mapreduce_empty_iter(f::Function, op::Function, itr::Vector{String},\
    \ ItrEltype::Base.HasEltype)\\n      @ Base ./reduce.jl:353\\n    [6] _mapreduce(f::typeof(length),\
    \ op::typeof(+), #unused#::IndexLinear, A::Vector{String})\\n      @ Base ./reduce.jl:402\\\
    n    [7] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [8] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n    [9] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [10] total_match(lst1::Vector{String}, lst2::Vector{String})\\\
    n      @ Main /tmp/tmp0djqaa8f.jl:15\\n   [11] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [12] macro expansion\\n      @ /tmp/tmp0djqaa8f.jl:34 [inlined]\\\
    n   [13] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [14] top-level scope\\n      @ /tmp/tmp0djqaa8f.jl:33\\ntest\
    \ set: Error During Test at /tmp/tmp0djqaa8f.jl:41\\n  Test threw exception\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n  ArgumentError: reducing over an empty collection is not allowed\\n  Stacktrace:\\\
    n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\n    [2] mapreduce_empty(f::Function,\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:344\\n    [3] reduce_empty(op::Base.MappingRF{typeof(length),\
    \ typeof(+)}, #unused#::Type{String})\\n      @ Base ./reduce.jl:331\\n    [4]\
    \ reduce_empty_iter\\n      @ ./reduce.j"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(map(length, lst1)) < sum(map(length,\
    \ lst2))\n        return lst1\n    elseif sum(map(length, lst1)) > sum(map(length,\
    \ lst2))\n        return lst2\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) <= length(lst2)\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpphprzihl.jl:33\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphprzihl.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphprzihl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpphprzihl.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphprzihl.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphprzihl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpphprzihl.jl:37\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphprzihl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphprzihl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpphprzihl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = 0\n    lst2_total =\
    \ 0\n    for e in lst1\n        lst1_total += length(e)\n    end\n    for e in\
    \ lst2\n        lst2_total += length(e)\n    end\n    if lst1_total < lst2_total\n\
    \        return lst1\n    elseif lst1_total > lst2_total\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    tot1 = sum([length(s) for s in lst1])\n\
    \    tot2 = sum([length(s) for s in lst2])\n    if tot1 == tot2 return lst1 elseif\
    \ tot1 < tot2 return lst1 else return lst2 end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) > sum(length.(lst2))\n        return lst2\n    elseif sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if  sum(map(length, lst1)) < sum(map(length,\
    \ lst2))\n        return lst1\n    elseif sum(map(length, lst1)) > sum(map(length,\
    \ lst2))\n        return lst2\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    for i in 1:length(lst1)\n      \
    \  lst1[i] = length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        lst2[i]\
    \ = length(lst2[i])\n    end\n    lst1, lst2 = sum(lst1), sum(lst2)\n    if lst1\
    \ > lst2\n        return lst2\n    elseif lst1 < lst2\n        return lst1\n \
    \   else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyk1460n4.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  MethodError: no method matching zero(::Type{String})\\\
    n  Closest candidates are:\\n    zero(!Matched::Union{Type{P}, P}) where P<:Dates.Period\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/periods.jl:53\\\
    n    zero(!Matched::T) where T<:Dates.TimeType at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Dates/src/types.jl:450\\\
    n    zero(!Matched::LinearAlgebra.UniformScaling{T}) where T at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:136\\\
    n    ...\\n  Stacktrace:\\n    [1] reduce_empty(#unused#::typeof(+), #unused#::Type{String})\\\
    n      @ Base ./reduce.jl:313\\n    [2] reduce_empty(#unused#::typeof(Base.add_sum),\
    \ #unused#::Type{String})\\n      @ Base ./reduce.jl:322\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(Base.add_sum)}, #unused#::Type{String})\\n      @ Base ./reduce.jl:331\\\
    n    [5] reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{String}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_sum#741\\n      @ ./reducedim.jl:894 [inlined]\\n   [12]\
    \ _sum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_sum#740\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [14] _sum\\n      @ ./reducedim.jl:893 [inlined]\\n   [15] #sum#738\\\
    n      @ ./reducedim.jl:889 [inlined]\\n   [16] sum\\n      @ ./reducedim.jl:889\
    \ [inlined]\\n   [17] total_match(lst1::Vector{String}, lst2::Vector{String})\\\
    n      @ Main /tmp/tmpyk1460n4.jl:21\\n   [18] macro expansion\\n      @ /shared/cent"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total1 = length(join(lst1))\n  \
    \  total2 = length(join(lst2))\n    if total1 < total2\n        return lst1\n\
    \    elseif total1 > total2\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return sum(length.(lst1)) >= sum(length.(lst2))\
    \ ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd0_k38s2.jl:28\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd0_k38s2.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd0_k38s2.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd0_k38s2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq0iiavx1.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0iiavx1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq0iiavx1.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0iiavx1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    len1\
    \ = 0\n    len2 = 0\n    for word in lst1\n        len1 += length(word)\n    end\n\
    \    for word in lst2\n        len2 += length(word)\n    end\n    if len1 == len2\n\
    \        return lst1\n    elseif len1 < len2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoakm2oaz.jl:29\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoakm2oaz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoakm2oaz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoakm2oaz.jl:32\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoakm2oaz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoakm2oaz.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpoakm2oaz.jl:33\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoakm2oaz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoakm2oaz.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoakm2oaz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    (length(join(lst1)) < length(join(lst2)))\
    \ ? lst1 : lst2\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmg9ek8xy.jl:28\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmg9ek8xy.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmg9ek8xy.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmg9ek8xy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    count1 = 0\n    count2 = 0\n   \
    \ for i in lst1\n        count1 += length(i)\n    end\n    for i in lst2\n   \
    \     count2 += length(i)\n    end\n    if count1 < count2\n        return lst1\n\
    \    elseif count1 > count2\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1 = 0\n    sum2 = 0\n    if length(lst1)\
    \ == 0\n        return lst1\n    end\n    for k in lst1\n        sum1 += length(k)\n\
    \    end\n    for k in lst2\n        sum2 += length(k)\n    end\n    if sum1 <\
    \ sum2\n        return lst1\n    elseif sum1 > sum2\n        return lst2\n   \
    \ else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len_lst1 = sum([length(i) for i\
    \ in lst1])\n    len_lst2 = sum([length(i) for i in lst2])\n    if len_lst1 <\
    \ len_lst2\n        return lst1\n    elseif len_lst1 > len_lst2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    # calc length of all strings\n\
    \    lst1Lengthes = [length(w) for w in lst1]\n    lst2Lengthes = [length(w) for\
    \ w in lst2]\n    if sum(lst1Lengthes) <= sum(lst2Lengthes)\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7a307fac.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7a307fac.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7a307fac.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp7a307fac.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7a307fac.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7a307fac.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp7a307fac.jl:48\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7a307fac.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7a307fac.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp7a307fac.jl:49\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7a307fac.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7a307fac.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set  "
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7a307fac.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == length(lst2)\n    \
    \    return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq4mc9zw4.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq4mc9zw4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq4mc9zw4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpq4mc9zw4.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq4mc9zw4.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq4mc9zw4.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpq4mc9zw4.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq4mc9zw4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq4mc9zw4.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4mc9zw4.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return (length(join(lst1, \"\"))\
    \ > length(join(lst2, \"\"))) ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0fgz5hbn.jl:29\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fgz5hbn.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fgz5hbn.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0fgz5hbn.jl:32\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fgz5hbn.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fgz5hbn.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp0fgz5hbn.jl:33\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0fgz5hbn.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0fgz5hbn.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0fgz5hbn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    c1, c2 = 0, 0\n    for i in lst1\n\
    \        c1 += length(i)\n    end\n    for i in lst2\n        c2 += length(i)\n\
    \    end\n    if c1 > c2\n        return lst2\n    elseif c1 < c2\n        return\
    \ lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    # c = 0\n    # for i in lst1\n \
    \   #     c = c + length(i)\n    # end\n    # d = 0\n    # for i in lst2\n   \
    \ #     d = d + length(i)\n    # end\n    # if c < d\n    #     return lst1\n\
    \    # else\n    #     return lst2\n    # end\n    # return lst1\n    c = sum(length(i)\
    \ for i in lst1)\n    d = sum(length(i) for i in lst2)\n    if c < d\n       \
    \ return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp997a1kiz.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  ArgumentError: reducing over an empty collection is\
    \ not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\\
    n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\\n      @ Base ./reduce.jl:344\\n    [3] reduce_empty(op::Base.MappingRF{var\"\
    #1#3\", Base.BottomRF{typeof(Base.add_sum)}}, #unused#::Type{String})\\n     \
    \ @ Base ./reduce.jl:331\\n    [4] reduce_empty_iter\\n      @ ./reduce.jl:357\
    \ [inlined]\\n    [5] reduce_empty_iter\\n      @ ./reduce.jl:356 [inlined]\\\
    n    [6] foldl_impl\\n      @ ./reduce.jl:49 [inlined]\\n    [7] mapfoldl_impl\\\
    n      @ ./reduce.jl:44 [inlined]\\n    [8] #mapfoldl#244\\n      @ ./reduce.jl:162\
    \ [inlined]\\n    [9] mapfoldl\\n      @ ./reduce.jl:162 [inlined]\\n   [10] #mapreduce#248\\\
    n      @ ./reduce.jl:289 [inlined]\\n   [11] mapreduce\\n      @ ./reduce.jl:289\
    \ [inlined]\\n   [12] #sum#251\\n      @ ./reduce.jl:503 [inlined]\\n   [13] sum\\\
    n      @ ./reduce.jl:503 [inlined]\\n   [14] #sum#252\\n      @ ./reduce.jl:532\
    \ [inlined]\\n   [15] sum\\n      @ ./reduce.jl:532 [inlined]\\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n      @ Main /tmp/tmp997a1kiz.jl:29\\n   [17] macro\
    \ expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [18] macro expansion\\n      @ /tmp/tmp997a1kiz.jl:42 [inlined]\\\
    n   [19] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [20] top-level scope\\n      @ /tmp/tmp997a1kiz.jl:41\\ntest\
    \ set: Test Failed at /tmp/tmp997a1kiz.jl:48\\n  Expression: candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ []\n    end\n    if total_chars(lst1) < total_chars(lst2)\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\ntotal_match([\"this\", \"is\", \"\
    long\"], [\"this\", \"is\", \"long\", \"too\"])\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: total_chars not defined\nStacktrace:\n\
    \ [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n   @ Main /tmp/tmp2_emqyc5.jl:18\n\
    \ [2] top-level scope\n   @ /tmp/tmp2_emqyc5.jl:24\nin expression starting at\
    \ /tmp/tmp2_emqyc5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return length(lst1) == length(lst2)\
    \ ||\n        length(lst1) > length(lst2) ? lst1 : lst2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpev1e3mq4.jl:24\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpev1e3mq4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpev1e3mq4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpev1e3mq4.jl:25\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpev1e3mq4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpev1e3mq4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpev1e3mq4.jl:26\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpev1e3mq4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpev1e3mq4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpev1e3mq4.jl:27\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpev1e3mq4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpev1e3"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpev1e3mq4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    t1 = length(join(lst1, \"\"))\n\
    \    t2 = length(join(lst2, \"\"))\n    if t1 == t2\n        return lst1\n   \
    \ elseif t1 < t2\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst1_count = sum(length.(lst1))\n\
    \    lst2_count = sum(length.(lst2))\n    \n    if lst1_count < lst2_count\n \
    \       return lst1\n    elseif lst1_count > lst2_count\n        return lst2\n\
    \    elseif lst1_count == lst2_count\n        return lst1\n    end\n    \nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst1_size = 0\n    lst2_size\
    \ = 0\n    \n    for i in lst1\n        lst1_size += size(i, 1)\n    end\n   \
    \ \n    for i in lst2\n        lst2_size += size(i, 1)\n    end\n    \n    if\
    \ lst1_size < lst2_size\n        return lst1\n    elseif lst1_size > lst2_size\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqyyzs9h3.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]\\n  MethodError: no method matching size(::String, ::Int64)\\\
    n  Closest candidates are:\\n    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY,\
    \ LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\\\
    n    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\\\
    n    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\\\
    n    ...\\n  Stacktrace:\\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\\
    n     @ Main /tmp/tmpqyyzs9h3.jl:20\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqyyzs9h3.jl:41 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqyyzs9h3.jl:39\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    l1 = sum(length.(lst1))\n    l2\
    \ = sum(length.(lst2))\n    if l1 == l2\n        return lst1\n    elseif l1 <\
    \ l2\n        return lst1\n    else\n        return lst2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    count1 = 0\n    count2 = 0\n   \
    \ for string in lst1\n        count1 += length(string)\n    end\n    for string\
    \ in lst2\n        count2 += length(string)\n    end\n    if count1 > count2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = 0\n    lst2_len = 0\n\
    \    for i in lst1\n        lst1_len += length(i)\n    end\n    for i in lst2\n\
    \        lst2_len += length(i)\n    end\n    if lst1_len == lst2_len\n       \
    \ return lst1\n    elseif lst1_len < lst2_len\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    #return lst1\n    #return lst2\n\
    \    n1=0\n    n2=0\n    l1=length(lst1)\n    l2=length(lst2)\n    for i=1:l1\n\
    \        n1+=length(lst1[i])\n    end\n    for i=1:l2\n        n2+=length(lst2[i])\n\
    \    end\n    if n1 == n2\n        return lst1\n    elseif n1 < n2\n        return\
    \ lst1\n    elseif n1 > n2\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ []\n    end\n    if length(lst1) == length(lst2)\n        return lst1\n    end\n\
    \    if length(lst1) > length(lst2)\n        return lst2\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphuf6iks_.jl:34\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuf6iks_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuf6iks_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphuf6iks_.jl:37\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuf6iks_.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuf6iks_.jl:32\ntest set: Test\
    \ Failed at /tmp/tmphuf6iks_.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphuf6iks_.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphuf6iks_.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphuf6iks_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = 0\n    lst2_total =\
    \ 0\n    for s in lst1\n        lst1_total += length(s)\n    end\n    for s in\
    \ lst2\n        lst2_total += length(s)\n    end\n    if lst1_total > lst2_total\n\
    \        return lst2\n    elseif lst1_total < lst2_total\n        return lst1\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) == sum(length.(lst2))\
    \ \n        return lst1\n    elseif sum(length.(lst1)) < sum(length.(lst2)) \n\
    \        return lst1\n    else \n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    length1 = 0\n    length2 =\
    \ 0\n    \n    for item in lst1\n        length1 += length(item)\n    end\n  \
    \  \n    for item in lst2\n        length2 += length(item)\n    end\n    \n  \
    \  if length1 == length2\n        return lst1\n    elseif length1 < length2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    tot_num1 = sum([length(i) for i\
    \ in lst1])\n    tot_num2 = sum([length(i) for i in lst2])\n    if tot_num1 >\
    \ tot_num2\n        return lst2\n    elseif tot_num1 < tot_num2\n        return\
    \ lst1\n    else\n        return lst1\n    end\nend\nlst1 = [\"hi\", \"admin\"\
    ]\nlst2 = [\"hI\", \"Hi\"]\nprintln(total_match(lst1, lst2))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "[\"hI\", \"Hi\"]\nTest Summary: | Pass  Total\ntest set      |    9   \
    \   9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n   \n    if length(lst1) == 0\n    \
    \    return []\n    end\n    if length(lst2) == 0\n        return []\n    end\n\
    \    if sum(length.(lst1)) == sum(length.(lst2))\n        return lst1\n    end\n\
    \    if sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    end\n\
    \    if sum(length.(lst1)) > sum(length.(lst2))\n        return lst2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    elseif sum(length.(lst1)) < sum(length.(lst2))\n   \
    \     return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n_lst1 = length(join(lst1))\n  \
    \  n_lst2 = length(join(lst2))\n    if n_lst1 == n_lst2\n        return lst1\n\
    \    elseif n_lst1 < n_lst2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 \n        return\
    \ lst1\n    end\n    l1 = length(join(lst1, \"\"))\n    l2 = length(join(lst2,\
    \ \"\"))\n    if l1 < l2\n        return lst1\n    elseif l2 < l1\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    \n    lst1_chars = 0\n    lst2_chars =\
    \ 0\n    \n    for s in lst1\n        lst1_chars += length(s)\n    end\n    \n\
    \    for s in lst2\n        lst2_chars += length(s)\n    end\n    \n    if lst1_chars\
    \ < lst2_chars\n        return lst1\n    elseif lst1_chars > lst2_chars\n    \
    \    return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwt1kxu4f.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwt1kxu4f.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwt1kxu4f.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwt1kxu4f.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwt1kxu4f.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwt1kxu4f.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwt1kxu4f.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwt1kxu4f.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwt1kxu4f.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpwt1kxu4f.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwt1kxu4f.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwt1kxu4f.jl:38\ntest set: Test\
    \ Faile"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwt1kxu4f.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    \n    # get length of strings in list\n\
    \    lst1_len = length.(lst1)\n    lst2_len = length.(lst2)\n    \n    # sum length\
    \ of strings\n    lst1_sum = sum(lst1_len)\n    lst2_sum = sum(lst2_len)\n   \
    \ \n    # compare sum of lengths\n    if lst1_sum < lst2_sum\n        return lst1\n\
    \    elseif lst2_sum < lst1_sum\n        return lst2\n    else\n        return\
    \ lst1\n    end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return length(reduce(*, lst1)) >\
    \ length(reduce(*, lst2)) ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n1, n2 = 0, 0\n    for i in lst1\n\
    \        n1 += length(i)\n    end\n    for i in lst2\n        n2 += length(i)\n\
    \    end\n    if n1 < n2\n        return lst1\n    elseif n1 > n2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n1, n2 = length(join(lst1)), length(join(lst2))\n\
    \    lst1[n1 < n2 ? 1 : 2]\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpavll465x.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  BoundsError: attempt to access 0-element Vector{String}\
    \ at index [2]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:861 [inlined]\\\
    n   [2] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmpavll465x.jl:16\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpavll465x.jl:23 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpavll465x.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptpzbj3et.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptpzbj3et.jl:1\n\
    in expression starting at /tmp/tmptpzbj3et.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total_lst1 = reduce(+, length, lst1)\n\
    \    total_lst2 = reduce(+, length, lst2)\n    if total_lst1 == total_lst2\n \
    \       return lst1\n    elseif total_lst1 < total_lst2\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    count1 = sum(length.(lst1))\n  \
    \  count2 = sum(length.(lst2))\n    if count1 == count2\n        return lst1\n\
    \    elseif count1 < count2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_num_chars = 0\n    lst2_num_chars\
    \ = 0\n    for elem in lst1\n        lst1_num_chars += length(elem)\n    end\n\
    \    for elem in lst2\n        lst2_num_chars += length(elem)\n    end\n    if\
    \ lst1_num_chars < lst2_num_chars\n        return lst1\n    elseif lst1_num_chars\
    \ > lst2_num_chars\n        return lst2\n    elseif lst1_num_chars == lst2_num_chars\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    l1 = sum(length.(lst1))\n    l2\
    \ = sum(length.(lst2))\n    if l1 == l2\n        return lst1\n    elseif l1 >\
    \ l2\n        return lst2\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    total1 = 0\n    total2 = 0\n    for\
    \ i in lst1\n        total1 += length(i)\n    end\n    for i in lst2\n       \
    \ total2 += length(i)\n    end\n    if total1 < total2\n        return lst1\n\
    \    elseif total2 < total1\n        return lst2\n    elseif total1 == total2\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total1, total2 = 0, 0\n    for i\
    \ in lst1\n        total1 += length(i)\n    end\n    for i in lst2\n        total2\
    \ += length(i)\n    end\n    if total1 <= total2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    count1 = 0\n    count2 = 0\n   \
    \ for i in lst1\n        count1 += length(i)\n    end\n    for i in lst2\n   \
    \     count2 += length(i)\n    end\n    if count1 > count2\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_chars = 0\n    lst2_chars =\
    \ 0\n    for s in lst1\n        lst1_chars += length(s)\n    end\n    for s in\
    \ lst2\n        lst2_chars += length(s)\n    end\n    if lst1_chars == lst2_chars\n\
    \        return lst1\n    elseif lst1_chars < lst2_chars\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1 = sum([length(i) for i in lst1])\n\
    \    len2 = sum([length(i) for i in lst2])\n    if len1 > len2\n        return\
    \ lst2\n    elseif len1 < len2\n        return lst1\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) < length(lst2) \n\
    \        return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx6io4lcm.jl:29\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6io4lcm.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6io4lcm.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpx6io4lcm.jl:32\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6io4lcm.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6io4lcm.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpx6io4lcm.jl:33\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx6io4lcm.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx6io4lcm.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6io4lcm.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n  return length(lst1) < length(lst2)\
    \ ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi9y75k9_.jl:23\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9y75k9_.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9y75k9_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi9y75k9_.jl:24\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9y75k9_.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9y75k9_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi9y75k9_.jl:25\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9y75k9_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9y75k9_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpi9y75k9_.jl:26\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi9y75k9_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi9y75"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9y75k9_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    num1 = 0\n    num2 = 0\n    for x in lst1\n\
    \        num1 += length(x)\n    end\n    for x in lst2\n        num2 += length(x)\n\
    \    end\n    if num1 < num2\n        return lst1\n    elseif num1 > num2\n  \
    \      return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return (length(join(lst1)) < length(join(lst2)))\
    \ ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9eipuefz.jl:23\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9eipuefz.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9eipuefz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9eipuefz.jl:24\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9eipuefz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9eipuefz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9eipuefz.jl:25\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9eipuefz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9eipuefz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9eipuefz.jl:26\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9eipuefz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9eipu"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9eipuefz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if total_chars(lst1) < total_chars(lst2)\n\
    \        return lst1\n    elseif total_chars(lst1) > total_chars(lst2)\n     \
    \   return lst2\n    elseif total_chars(lst1) == total_chars(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3bqchrr7.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]\\n  UndefVarError: total_chars not defined\\n  Stacktrace:\\\
    n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmp3bqchrr7.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3bqchrr7.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3bqchrr7.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp3bqchrr7.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\\n  UndefVarError: total_chars not defined\\n  Stacktrace:\\\
    n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmp3bqchrr7.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3bqchrr7.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3bqchrr7.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp3bqchrr7.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\\n  UndefVarError:\
    \ total_chars not defined\\n  Stacktrace:\\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n     @ Main /tmp/tmp3bqchrr7.jl:18\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3bqchrr7.jl:34 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3bqchrr7.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp3bqchrr7.jl"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) <= length(lst2)\
    \ \n        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp55wnb1_h.jl:27\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55wnb1_h.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55wnb1_h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp55wnb1_h.jl:30\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55wnb1_h.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55wnb1_h.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp55wnb1_h.jl:31\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp55wnb1_h.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp55wnb1_h.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp55wnb1_h.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_length = length(lst1)\n   \
    \ lst2_length = length(lst2)\n    if lst1_length < lst2_length\n        return\
    \ lst1\n    elseif lst1_length > lst2_length\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0elt62m_.jl:31\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0elt62m_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0elt62m_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp0elt62m_.jl:34\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0elt62m_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0elt62m_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp0elt62m_.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0elt62m_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0elt62m_.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0elt62m_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_n_chars = map(x -> length(x),\
    \ lst1)\n    lst2_n_chars = map(x -> length(x), lst2)\n    if sum(lst1_n_chars)\
    \ < sum(lst2_n_chars)\n        return lst1\n    elseif sum(lst1_n_chars) > sum(lst2_n_chars)\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n1 = length(lst1)\n    n2 = length(lst2)\n\
    \    total1 = 0\n    total2 = 0\n    if n1 == 0 && n2 == 0\n        return lst1\n\
    \    end\n    for i in 1:n1\n        total1 += length(lst1[i])\n    end\n    for\
    \ i in 1:n2\n        total2 += length(lst2[i])\n    end\n    if total1 < total2\n\
    \        return lst1\n    elseif total1 > total2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total_chars_in_lst1 = sum([length(x)\
    \ for x in lst1])\n    total_chars_in_lst2 = sum([length(x) for x in lst2])\n\
    \    if (total_chars_in_lst1 < total_chars_in_lst2)\n        return lst1\n   \
    \ elseif (total_chars_in_lst1 > total_chars_in_lst2)\n        return lst2\n  \
    \  else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\n    c1 = 0\n    c2 = 0\n    for i in lst1\n\
    \        c1 += length(i)\n    end\n    for i in lst2\n        c2 += length(i)\n\
    \    end\n    if c1 < c2\n        return lst1\n    elseif c2 < c1\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    global lst1::Vector{String}\n  \
    \  global lst2::Vector{String}\n    sum1::Int = 0\n    sum2::Int = 0\n    for\
    \ i in lst1 \n        sum1 += length(i)\n    end\n    for i in lst2 \n       \
    \ sum2 += length(i)\n    end\n    if sum1 > sum2 \n        return lst2\n    elseif\
    \ sum1 < sum2 \n        return lst1\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: type declarations on global variables are not\
    \ yet supported\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphv5e3_1m.jl:1\n\
    in expression starting at /tmp/tmphv5e3_1m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1 = length(lst1)\n    len2 =\
    \ length(lst2)\n    if len1 > len2\n        return lst2\n    elseif len1 < len2\n\
    \        return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa9_mybey.jl:31\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9_mybey.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9_mybey.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpa9_mybey.jl:34\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9_mybey.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9_mybey.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpa9_mybey.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9_mybey.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9_mybey.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa9_mybey.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total_1 = sum(length.(lst1))\n \
    \   total_2 = sum(length.(lst2))\n    if total_1 <= total_2\n        return lst1\n\
    \    elseif total_1 > total_2\n        return lst2\n    end\nend\n\"\"\"\n   \
    \ Write a function that takes a sentence as a string, and returns a new string\
    \ that \n    is the reverse of the given sentence.\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptap6uaf1.jl:23\nin expression starting at\
    \ /tmp/tmptap6uaf1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    length_lst1 = map(x -> length(x),\
    \ lst1)\n    length_lst2 = map(x -> length(x), lst2)\n    sum_lst1 = sum(length_lst1)\n\
    \    sum_lst2 = sum(length_lst2)\n    if sum_lst1 < sum_lst2\n        return lst1\n\
    \    elseif sum_lst1 > sum_lst2\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2e_n45ca.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2e_n45ca.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2e_n45ca.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2e_n45ca.jl:45\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2e_n45ca.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2e_n45ca.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2e_n45ca.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if reduce(+, map(x->length(x), lst1))\
    \ > reduce(+, map(x->length(x), lst2))\n        return lst2\n    elseif reduce(+,\
    \ map(x->length(x), lst1)) < reduce(+, map(x->length(x), lst2))\n        return\
    \ lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    num1 = length(sum(length.(lst1)))\n\
    \    num2 = length(sum(length.(lst2)))\n    if num1 > num2 \n        return lst2\n\
    \    elseif num1 < num2\n        return lst1\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk6opnnxj.jl:31\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6opnnxj.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6opnnxj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpk6opnnxj.jl:34\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6opnnxj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6opnnxj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpk6opnnxj.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6opnnxj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6opnnxj.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpk6opnnxj.jl:38\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6opnnxj.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6opnnxj.jl:29\nTest Summary:\
    \ | Pass"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk6opnnxj.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    tot1 = 0\n    tot2 = 0\n    for\
    \ i in lst1\n        tot1 += length(i)\n    end\n    for i in lst2\n        tot2\
    \ += length(i)\n    end\n    if tot1 < tot2\n        return lst1\n    elseif tot1\
    \ > tot2\n        return lst2\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    lst1_sum = sum(length.(lst1))\n    lst2_sum = sum(length.(lst2))\n\
    \    if lst1_sum == lst2_sum\n        return lst1\n    elseif lst1_sum < lst2_sum\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return if(sum(length.(lst1)) < sum(length.(lst2)))\
    \ lst1 else lst2 end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsz055m4z.jl:28\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsz055m4z.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsz055m4z.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsz055m4z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) == sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) < sum(length.(lst2))\n   \
    \     return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n  #create a vector to hold the results\
    \ of total chars in lst1\n  lst1_vec = [length(i) for i in lst1]\n  #create a\
    \ vector to hold the results of total chars in lst2\n  lst2_vec = [length(i) for\
    \ i in lst2]\n  #if lst1 is equal to the sum of lst1_vec, return lst1\n  if sum(lst1_vec)\
    \ == sum(lst2_vec)\n      return lst1\n  #if lst1_vec is greater than lst2_vec,\
    \ return lst2\n  elseif sum(lst1_vec) > sum(lst2_vec)\n      return lst2\n  #if\
    \ lst1_vec is less than lst2_vec, return lst1\n  else\n      return lst1\n  end\n\
    end\n  \n  \ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) > length(lst2) \n\
    \        return lst2\n    elseif length(lst1) < length(lst2)\n        return lst1\n\
    \    else \n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm4qn7daw.jl:29\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4qn7daw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4qn7daw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpm4qn7daw.jl:32\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4qn7daw.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4qn7daw.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpm4qn7daw.jl:33\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4qn7daw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4qn7daw.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm4qn7daw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_chars = sum(length.(lst1))\n\
    \    lst2_chars = sum(length.(lst2))\n    return lst1_chars <= lst2_chars ? lst1\
    \ : lst2\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1 = 0\n    sum2 = 0\n    for\
    \ i = 1:length(lst1)\n        sum1 += length(lst1[i])\n    end\n    for i = 1:length(lst2)\n\
    \        sum2 += length(lst2[i])\n    end\n    if sum1 < sum2\n        return\
    \ lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(map(length, lst1)) < sum(map(length,\
    \ lst2))\n        return lst1\n    else\n        return lst2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk02ajd_v.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk02ajd_v.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk02ajd_v.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk02ajd_v.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1 = sum(length.(lst1))\n    sum2\
    \ = sum(length.(lst2))\n    if sum1 == sum2\n        return lst1\n    elseif sum1\
    \ < sum2\n        return lst1\n    else\n        return lst2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return  length(lst1) > length(lst2)\
    \ ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz9dsljof.jl:23\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz9dsljof.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz9dsljof.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz9dsljof.jl:26\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz9dsljof.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz9dsljof.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz9dsljof.jl:27\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz9dsljof.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz9dsljof.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz9dsljof.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) > length(lst2)\n        return lst2\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptze8zy3w.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptze8zy3w.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptze8zy3w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmptze8zy3w.jl:40\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptze8zy3w.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptze8zy3w.jl:35\ntest set: Test\
    \ Failed at /tmp/tmptze8zy3w.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptze8zy3w.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptze8zy3w.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptze8zy3w.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) <= length(lst2)\n  \
    \      return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps6zkf_nb.jl:30\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6zkf_nb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6zkf_nb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmps6zkf_nb.jl:33\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6zkf_nb.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6zkf_nb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmps6zkf_nb.jl:34\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6zkf_nb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6zkf_nb.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6zkf_nb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1 = sum(length.(lst1))\n    sum2\
    \ = sum(length.(lst2))\n    if sum1 == sum2\n        return lst1\n    elseif sum1\
    \ < sum2\n        return lst1\n    else\n        return lst2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 \n        return\
    \ lst1\n    end\n    if length(lst2) == 0 \n        return lst2\n    end\n   \
    \ sum_lst1 = 0\n    sum_lst2 = 0\n    for i in lst1\n        sum_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        sum_lst2 += length(i)\n    end\n    if sum_lst1\
    \ < sum_lst2\n        return lst1\n    elseif sum_lst1 > sum_lst2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if reduce(+, map(length, lst1))\
    \ == reduce(+, map(length, lst2))\n        return lst1\n    elseif reduce(+, map(length,\
    \ lst1)) < reduce(+, map(length, lst2))\n        return lst1\n    else \n    \
    \    return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if isempty(lst1) && isempty(lst2)\n\
    \        return []\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ghaai30.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ghaai30.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ghaai30.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp8ghaai30.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ghaai30.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ghaai30.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp8ghaai30.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ghaai30.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ghaai30.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ghaai30.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    l1_sum = length(join(lst1))\n  \
    \  l2_sum = length(join(lst2))\n    if l1_sum < l2_sum \n        return lst1\n\
    \    elseif l1_sum > l2_sum\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    totalChars1\
    \ = 0\n    totalChars2 = 0\n    for i in lst1\n        totalChars1 += length(i)\n\
    \    end\n    for i in lst2\n        totalChars2 += length(i)\n    end\n    if\
    \ totalChars1 < totalChars2\n        return lst1\n    elseif totalChars2 < totalChars1\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    #Get number of characters in each\
    \ list\n    len1 = sum([length(s) for s in lst1])\n    len2 = sum([length(s) for\
    \ s in lst2])\n    #Return the list with the smaller number of characters\n  \
    \  if len1 <= len2\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0 && length(lst2) !=\
    \ 0\n        return lst2\n    end\n    if length(lst1) != 0 && length(lst2) ==\
    \ 0\n        return lst1\n    end\n    if length(lst1) != 0 && length(lst2) !=\
    \ 0\n        if length(lst1) < length(lst2)\n            return lst1\n       \
    \ elseif length(lst1) > length(lst2)\n            return lst2\n        elseif\
    \ length(lst1) == length(lst2)\n            return lst1\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpco06wvu8.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpco06wvu8.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpco06wvu8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpco06wvu8.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpco06wvu8.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpco06wvu8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpco06wvu8.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpco06wvu8.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpco06wvu8.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpco06wvu8.jl:46\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpco06wvu8.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpco06wvu8.jl:38\ntest set: Test\
    \ Faile"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpco06wvu8.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) <= sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    @assert length(lst1) == length(lst2)\n\
    \    lst1_ = map(lst1) do l\n        reduce(+, [length(lst) for lst in l])\n \
    \   end\n    lst2_ = map(lst2) do l\n        reduce(+, [length(lst) for lst in\
    \ l])\n    end\n    mn = findmin(lst1_)[1]\n    mx = findmax(lst2_)[1]\n    if\
    \ mn <= mx\n        lst1\n    else\n        lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphnj74tgw.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  ArgumentError: reducing over an empty collection is\
    \ not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\n      @ Base ./reduce.jl:301\\\
    n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base._rf_findmin)},\
    \ T::Type)\\n      @ Base ./reduce.jl:344\\n    [3] reduce_empty(op::Base.MappingRF{Base.var\"\
    #262#263\"{typeof(identity)}, Base.BottomRF{typeof(Base._rf_findmin)}}, #unused#::Type{Pair{Int64,\
    \ Int64}})\\n      @ Base ./reduce.jl:331\\n    [4] reduce_empty_iter\\n     \
    \ @ ./reduce.jl:357 [inlined]\\n    [5] reduce_empty_iter\\n      @ ./reduce.jl:356\
    \ [inlined]\\n    [6] foldl_impl\\n      @ ./reduce.jl:49 [inlined]\\n    [7]\
    \ mapfoldl_impl\\n      @ ./reduce.jl:44 [inlined]\\n    [8] #mapfoldl#244\\n\
    \      @ ./reduce.jl:162 [inlined]\\n    [9] mapfoldl\\n      @ ./reduce.jl:162\
    \ [inlined]\\n   [10] findmin\\n      @ ./reduce.jl:862 [inlined]\\n   [11] _findmin\\\
    n      @ ./reduce.jl:888 [inlined]\\n   [12] #findmin#783\\n      @ ./reducedim.jl:1005\
    \ [inlined]\\n   [13] findmin\\n      @ ./reducedim.jl:1005 [inlined]\\n   [14]\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})\\n      @ Main /tmp/tmphnj74tgw.jl:22\\\
    n   [15] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [16] macro expansion\\n      @ /tmp/tmphnj74tgw.jl:35 [inlined]\\\
    n   [17] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [18] top-level scope\\n      @ /tmp/tmphnj74tgw.jl:34\\ntest\
    \ set: Test Failed at /tmp/tmphnj74tgw.jl:36\\n  Expression: candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"\
    admin\"] == [\"hi\", \"hi\"]'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    # Total length of the first list\
    \ of strings\n    lst1_total = 0\n    for s in lst1\n        lst1_total += length(s)\n\
    \    end\n    # Total length of the second list of strings\n    lst2_total = 0\n\
    \    for s in lst2\n        lst2_total += length(s)\n    end\n    # If the two\
    \ list lengths are the same\n    if lst1_total == lst2_total\n        return lst1\n\
    \    elseif lst1_total < lst2_total\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(join(lst1)) > length(join(lst2))\n\
    \        return lst2\n    elseif length(join(lst1)) < length(join(lst2))\n   \
    \     return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst1size = 0\n    lst2size\
    \ = 0\n    \n    for i in lst1\n        lst1size += length(i)\n    end\n    \n\
    \    for i in lst2\n        lst2size += length(i)\n    end\n    \n    if lst1size\
    \ < lst2size\n        return lst1\n    elseif lst1size > lst2size\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    is_lst1_longer = length(lst1) >=\
    \ length(lst2)\n    smaller_lst = is_lst1_longer ? lst2 : lst1\n    larger_lst\
    \ = is_lst1_longer ? lst1 : lst2\n    smaller_lst_char_total = sum(length.(smaller_lst))\n\
    \    larger_lst_char_total = sum(length.(larger_lst))\n    if smaller_lst_char_total\
    \ < larger_lst_char_total\n        return smaller_lst\n    elseif smaller_lst_char_total\
    \ > larger_lst_char_total\n        return larger_lst\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    str_lst1 = join(lst1)\n    str_lst2\
    \ = join(lst2)\n    if length(str_lst1) == length(str_lst2)\n        return lst1\n\
    \    elseif length(str_lst1) < length(str_lst2)\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    num_chars_lst1 = sum([length(s)\
    \ for s in lst1])\n    num_chars_lst2 = sum([length(s) for s in lst2])\n    if\
    \ num_chars_lst1 == num_chars_lst2\n        return lst1\n    elseif num_chars_lst1\
    \ < num_chars_lst2\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return sum(length.(lst1)) < sum(length.(lst2))\
    \ ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_cc5gzf8.jl:23\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cc5gzf8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cc5gzf8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_cc5gzf8.jl:24\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cc5gzf8.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cc5gzf8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_cc5gzf8.jl:25\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cc5gzf8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cc5gzf8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_cc5gzf8.jl:26\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_cc5gzf8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_cc5g"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_cc5gzf8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    i1 = sum(map(x -> length(x), lst1))\n\
    \    i2 = sum(map(x -> length(x), lst2))\n    if i1==i2\n        return lst1\n\
    \    elseif i1<i2\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nprintln(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\nprintln(total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]))\nprintln(total_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\nprintln(total_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\"]))\nprintln(total_match([\"hi\", \"admin\"], [\"\
    hi\", \"admin\"]))\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "[\"hI\", \"Hi\"]\n[\"hi\", \"admin\"]\n[\"hI\", \"hi\", \"hi\"]\n[\"4\"\
    ]\n[\"hi\", \"admin\"]\nTest Summary: | Pass  Total\ntest set      |    9    \
    \  9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n  len1 = sum([ length(x) for x in lst1\
    \ ])\n  len2 = sum([ length(x) for x in lst2 ])\n  if len1 < len2\n    return\
    \ lst1\n  elseif len1 > len2\n    return lst2\n  else\n    return lst1\n  end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    num_chars_lst1 = 0\n    num_chars_lst2\
    \ = 0\n    \n    for word in lst1\n        num_chars_lst1 += length(word)\n  \
    \  end\n    \n    for word in lst2\n        num_chars_lst2 += length(word)\n \
    \   end\n    \n    if num_chars_lst1 < num_chars_lst2\n        return lst1\n \
    \   elseif num_chars_lst1 > num_chars_lst2\n        return lst2\n    else\n  \
    \      return lst1\n    end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(map(length, lst1)) < sum(map(length,\
    \ lst2))\n        return lst1\n    elseif sum(map(length, lst1)) > sum(map(length,\
    \ lst2))\n        return lst2\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4xvuzog7.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xvuzog7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xvuzog7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4xvuzog7.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xvuzog7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xvuzog7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp4xvuzog7.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xvuzog7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xvuzog7.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xvuzog7.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1 = sum([length(x) for x in lst1])\n\
    \    len2 = sum([length(x) for x in lst2])\n    if len1 == len2\n        return\
    \ lst1\n    elseif len1 < len2\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nprintln(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprintln(total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']))\nprintln(total_match(['hi', 'admin'],\
    \ ['hI', 'hi', 'hi']))\nprintln(total_match(['4'], ['1', '2', '3', '4', '5']))\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpp828p8m_.jl:25\nin expression\
    \ starting at /tmp/tmpp828p8m_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if count_chars(lst1) == count_chars(lst2)\n\
    \        return lst1\n    elseif count_chars(lst1) < count_chars(lst2)\n     \
    \   return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp506mmnc0.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  UndefVarError: count_chars not defined\\n  Stacktrace:\\\
    n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmp506mmnc0.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp506mmnc0.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp506mmnc0.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp506mmnc0.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n  UndefVarError:\
    \ count_chars not defined\\n  Stacktrace:\\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n     @ Main /tmp/tmp506mmnc0.jl:15\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp506mmnc0.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp506mmnc0.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp506mmnc0.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\\n  UndefVarError: count_chars not defined\\n  Stacktrace:\\\
    n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmp506mmnc0.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp506mmnc0.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp506mmnc0.jl:27\\ntest set:\
    \ Error During Test at "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    if length(lst1)==0 && length(lst2)==0\n\
    \        return []\n    end\n    \n    if length(lst1)>length(lst2)\n        return\
    \ lst2\n    elseif length(lst1)<length(lst2)\n        return lst1\n    else\n\
    \        total1=0\n        total2=0\n        for str in lst1\n            total1+=length(str)\n\
    \        end\n        for str in lst2\n            total2+=length(str)\n     \
    \   end\n        if total1==total2\n            return lst1\n        elseif total1>total2\n\
    \            return lst2\n        else\n            return lst1\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp31la0qai.jl:52\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated:\
    \ [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp31la0qai.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp31la0qai.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp31la0qai.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    l1=total_chars(lst1)\n    l2=total_chars(lst2)\n\
    \    if l1==l2\n        return lst1\n    elseif l1<l2\n        return lst1\n \
    \   else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq6pkvo9h.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  UndefVarError: total_chars not defined\\n  Stacktrace:\\\
    n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmpq6pkvo9h.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq6pkvo9h.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq6pkvo9h.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpq6pkvo9h.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n  UndefVarError:\
    \ total_chars not defined\\n  Stacktrace:\\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n     @ Main /tmp/tmpq6pkvo9h.jl:15\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq6pkvo9h.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq6pkvo9h.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpq6pkvo9h.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\\n  UndefVarError: total_chars not defined\\n  Stacktrace:\\\
    n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmpq6pkvo9h.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq6pkvo9h.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq6pkvo9h.jl:29\\ntest set:\
    \ Error During Test at "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    cnt1 = 0\n    cnt2 = 0\n \
    \   \n    for elm in lst1\n        cnt1 += length(elm)\n    end\n    \n    for\
    \ elm in lst2\n        cnt2 += length(elm)\n    end\n    \n    if cnt1 < cnt2\n\
    \        return lst1\n    elseif cnt1 > cnt2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1, sum2 = 0, 0\n    for i in\
    \ lst1\n        sum1 += length(i)\n    end\n    for i in lst2\n        sum2 +=\
    \ length(i)\n    end\n    if sum1 > sum2\n        return lst2\n    elseif sum1\
    \ < sum2\n        return lst1\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n1, n2 = count_chars(lst1), count_chars(lst2)\n\
    \    if n1 < n2\n        return lst1\n    elseif n1 > n2\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpey7r6wu7.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  UndefVarError: count_chars not defined\\n  Stacktrace:\\\
    n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmpey7r6wu7.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpey7r6wu7.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpey7r6wu7.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpey7r6wu7.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n  UndefVarError:\
    \ count_chars not defined\\n  Stacktrace:\\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n     @ Main /tmp/tmpey7r6wu7.jl:15\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpey7r6wu7.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpey7r6wu7.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpey7r6wu7.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\\n  UndefVarError: count_chars not defined\\n  Stacktrace:\\\
    n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\\n     @ Main\
    \ /tmp/tmpey7r6wu7.jl:15\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpey7r6wu7.jl:31 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpey7r6wu7.jl:28\\ntest set:\
    \ Error During Test at "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    t1 = sum(length.(lst1))\n    t2\
    \ = sum(length.(lst2))\n    if t1 == t2\n        return lst1\n    elseif t1 >\
    \ t2\n        return lst2\n    else\n        return lst1\n    end\nend\n    \n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1 = 0\n    len2 = 0\n    for\
    \ i in lst1\n        len1 += length(i)\n    end\n    for i in lst2\n        len2\
    \ += length(i)\n    end\n    if len1 < len2\n        return lst1\n    elseif len1\
    \ > len2\n        return lst2\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n  if length(lst1) == 0 && length(lst2)\
    \ == 0\n    return lst1\n  end\n  lst1total = 0\n  lst2total = 0\n  for i in lst1\n\
    \    lst1total += length(i)\n  end\n  for i in lst2\n    lst2total += length(i)\n\
    \  end\n  if lst1total == lst2total\n    return lst1\n  elseif lst1total < lst2total\n\
    \    return lst1\n  else\n    return lst2\n  end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    #number of chars in the all strings\
    \ of the list less than the other list\n    if sum(length.(lst1)) <= sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nprintln(total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]))\nprintln(total_match([\"hi\", \"admin\"],\
    \ [\"hi\", \"hi\", \"admin\", \"project\"]))\nprintln(total_match([\"hi\", \"\
    admin\"], [\"hI\", \"hi\", \"hi\"]))\nprintln(total_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]))\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "[\"hI\", \"Hi\"]\n[\"hi\", \"admin\"]\n[\"hI\", \"hi\", \"hi\"]\n[\"4\"\
    ]\nTest Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    function total_chars(strs::Vector{String})::Int\n\
    \        total = 0\n        for str in strs\n            total += length(str)\n\
    \        end\n        return total\n    end\n    \n    strs = [lst1, lst2]\n \
    \   totals = [total_chars(lst1), total_chars(lst2)]\n    if (totals[1] < totals[2])\n\
    \        return lst1\n    elseif (totals[1] > totals[2])\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len_1 = length(reduce(*, lst1))\n\
    \    len_2 = length(reduce(*, lst2))\n    if (len_1 < len_2)\n        return lst1\n\
    \    elseif (len_1 > len_2)\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    # initialize and declare variables\
    \ \n    total_chars_lst1 = 0 \n    total_chars_lst2 = 0 \n    total_char_lst1_vec\
    \ = []\n    total_char_lst2_vec = []\n    # find the total number of chars in\
    \ lst1\n    for word in lst1\n        total_chars_lst1 += length(word)\n    end\n\
    \    # find the total number of chars in lst2\n    for word in lst2\n        total_chars_lst2\
    \ += length(word)\n    end\n    # if lst1 has fewer chars than lst2\n    if total_chars_lst1\
    \ < total_chars_lst2\n        return lst1\n    # if lst2 has fewer chars than\
    \ lst1\n    elseif total_chars_lst2 < total_chars_lst1\n        return lst2\n\
    \    # if lst1 and lst2 have equal number of chars \n    elseif total_chars_lst1\
    \ == total_chars_lst2\n        return lst1\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len_lst1 = String.length.(join(lst1))\n\
    \    len_lst2 = String.length.(join(lst2))\n    if len_lst1 < len_lst2\n     \
    \   return lst1\n    elseif len_lst1 > len_lst2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp16l1ewsc.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([])\\n  type DataType has no field length\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:37 [inlined]\\n   [2] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n     @ Main /tmp/tmp16l1ewsc.jl:15\\n   [3] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp16l1ewsc.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp16l1ewsc.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp16l1ewsc.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n  type\
    \ DataType has no field length\\n  Stacktrace:\\n   [1] getproperty\\n     @ ./Base.jl:37\
    \ [inlined]\\n   [2] total_match(lst1::Vector{String}, lst2::Vector{String})\\\
    n     @ Main /tmp/tmp16l1ewsc.jl:15\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp16l1ewsc.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp16l1ewsc.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp16l1ewsc.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\\n  type DataType has no field length\\n  Stacktrace:\\\
    n   [1] getproperty\\n     @ ./Base.jl:37 [inlined]\\n   [2] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\\n     @ Main /tmp/tmp16l1ewsc.jl:15\\n   [3] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp16l1ewsc.jl:32 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total_len, lst2_total_len =\
    \ 0, 0\n    for i in lst1, j in lst2\n        lst1_total_len += length(i)\n  \
    \      lst2_total_len += length(j)\n    end\n    if lst1_total_len < lst2_total_len\n\
    \        return lst1\n    elseif lst1_total_len > lst2_total_len\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8gkcxe5k.jl:39\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gkcxe5k.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gkcxe5k.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8gkcxe5k.jl:41\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8gkcxe5k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8gkcxe5k.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gkcxe5k.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0 \n        return []\n    end\n    lst1_len = 0\n    lst2_len = 0\n    for\
    \ s in lst1\n        lst1_len += length(s)\n    end\n    for s in lst2\n     \
    \   lst2_len += length(s)\n    end\n    if lst1_len == lst2_len\n        return\
    \ lst1\n    elseif lst1_len < lst2_len\n        return lst1\n    else\n      \
    \  return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum_lst1 = sum(length.(lst1))\n\
    \    sum_lst2 = sum(length.(lst2))\n    if sum_lst1 < sum_lst2\n        return\
    \ lst1\n    elseif sum_lst1 > sum_lst2\n        return lst2\n    else\n      \
    \  return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total1 = sum(length.(lst1))\n  \
    \  total2 = sum(length.(lst2))\n    if total1 == total2\n        return lst1\n\
    \    elseif total1 < total2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n_lst1 = sum([length(i) for i in\
    \ lst1])\n    n_lst2 = sum([length(i) for i in lst2])\n    if n_lst1 < n_lst2\n\
    \        return lst1\n    elseif n_lst1 > n_lst2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    elseif sum(length.(lst1)) < sum(length.(lst2))\n   \
    \     return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_length = 0\n    lst2_length\
    \ = 0\n    for e in lst1\n        lst1_length += length(e)\n    end\n    for e\
    \ in lst2\n        lst2_length += length(e)\n    end\n    if lst1_length > lst2_length\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return if length(lst1) < length(lst2)\
    \ return lst1 else return lst2 end \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8fml4wrn.jl:27\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated:\
    \ [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8fml4wrn.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8fml4wrn.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8fml4wrn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total = function(lst::Vector{String})::Int\n\
    \        count = 0\n        for s in lst\n            count += length(s)\n   \
    \     end\n        return count\n    end\n    if total(lst1) <= total(lst2)\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: ambiguous signature in function definition. Try\
    \ adding a comma if this is a 1-argument anonymous function.\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpa0p9u0mg.jl:16\nin expression starting at /tmp/tmpa0p9u0mg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n  lst1_count = sum(map(x -> length(x),\
    \ lst1))\n  lst2_count = sum(map(x -> length(x), lst2))\n  if lst1_count < lst2_count\n\
    \    return lst1\n  elseif lst1_count > lst2_count\n    return lst2\n  else\n\
    \    return lst1\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    x1 = sum(length, lst1)\n    x2 =\
    \ sum(length, lst2)\n    if x1 == x2\n        return lst1\n    elseif x1 > x2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpauumjqin.jl:30\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{typeof(length),\
    \ typeof(Base.add_sum)}, #unused#::Type{String})\n      @ Base ./reduce.jl:331\n\
    \    [4] reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [5] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{String}, ItrEltype::Base.HasEltype)\n      @ Base\
    \ ./reduce.jl:353\n    [6] _mapreduce(f::typeof(length), op::typeof(Base.add_sum),\
    \ #unused#::IndexLinear, A::Vector{String})\n      @ Base ./reduce.jl:402\n  \
    \  [7] _mapreduce_dim\n      @ ./reducedim.jl:330 [inlined]\n    [8] #mapreduce#731\n\
    \      @ ./reducedim.jl:322 [inlined]\n    [9] mapreduce\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] #_sum#741\n      @ ./reducedim.jl:894 [inlined]\n   [11]\
    \ _sum\n      @ ./reducedim.jl:894 [inlined]\n   [12] #sum#739\n      @ ./reducedim.jl:890\
    \ [inlined]\n   [13] sum\n      @ ./reducedim.jl:890 [inlined]\n   [14] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmpauumjqin.jl:15\n   [15] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpauumjqin.jl:30 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpauumjqin.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpauumjqin.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Function,\
    \ T::Type)\n      @ Bas"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpauumjqin.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) >= length(lst2)\n    \
    \    lst1\n    else\n        lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx_2k61_i.jl:30\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_2k61_i.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_2k61_i.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx_2k61_i.jl:31\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_2k61_i.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_2k61_i.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx_2k61_i.jl:32\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_2k61_i.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_2k61_i.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx_2k61_i.jl:33\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx_2k61_i.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx_2k6"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_2k61_i.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst_len1 = length(join(lst1))\n\
    \    lst_len2 = length(join(lst2))\n    if lst_len1 <= lst_len2\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n1, n2 = length(lst1), length(lst2)\n\
    \    return lst1[1] == lst2[1] ? lst1 : ifelse(sum(length.(lst1)) < sum(length.(lst2)),\
    \ lst1, lst2)\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_8uis2rc.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp_8uis2rc.jl:16\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_8uis2rc.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_8uis2rc.jl:22\ntest set:\
    \ Test Failed at /tmp/tmp_8uis2rc.jl:24\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_8uis2rc.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8uis2rc.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_8uis2rc.jl:29\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated: [\"hI\", \"\
    hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_8uis2rc.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_8uis2rc.jl:22\ntest set: Error\
    \ During Test at /tmp/tmp_8uis2rc.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_8uis2rc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = sum([length(w) for w\
    \ in lst1])\n    lst2_len = sum([length(w) for w in lst2])\n    if lst1_len ==\
    \ lst2_len\n        return lst1\n    elseif lst1_len < lst2_len\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8pgzhxm8.jl:29\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8pgzhxm8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8pgzhxm8.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8pgzhxm8.jl:32\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8pgzhxm8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8pgzhxm8.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8pgzhxm8.jl:33\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8pgzhxm8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8pgzhxm8.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8pgzhxm8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    total_length(lst::Vector{String}) = sum([length(char)\
    \ for char in lst])\n    if total_length(lst1) == total_length(lst2)\n       \
    \ return lst1\n    elseif total_length(lst1) < total_length(lst2)\n        return\
    \ lst1\n    else \n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum(length.(lst1)) < sum(length.(lst2))\
    \ ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpadnvjf_c.jl:23\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpadnvjf_c.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpadnvjf_c.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpadnvjf_c.jl:24\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpadnvjf_c.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpadnvjf_c.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpadnvjf_c.jl:25\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpadnvjf_c.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpadnvjf_c.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpadnvjf_c.jl:26\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpadnvjf_c.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpadnvj"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpadnvjf_c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == length(lst2)\n    \
    \    return lst1\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphc952ve0.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphc952ve0.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphc952ve0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphc952ve0.jl:35\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphc952ve0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphc952ve0.jl:30\ntest set: Test\
    \ Failed at /tmp/tmphc952ve0.jl:36\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphc952ve0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphc952ve0.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphc952ve0.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    l1 = length(join(lst1))\n    l2\
    \ = length(join(lst2))\n    if l1 == l2\n        return lst1\n    elseif l1 <\
    \ l2\n        return lst1\n    else\n        return lst2\n    end\nend\n@testset\
    \ \"Empty Lists\" begin\n    @test total_match([], []) == []\nend\n@testset \"\
    All chars number is the same\" begin\n    @test total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\nend\n@testset \"Difference chars number\"\
    \ begin\n    @test total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"]) == [\"hi\", \"admin\"]\n    @test total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n    @test total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmp1udxasee.jl:25\nin expression starting at /tmp/tmp1udxasee.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    lst1_sum, lst2_sum = sum([length(w) for\
    \ w in lst1]), sum([length(w) for w in lst2])\n    if lst1_sum < lst2_sum\n  \
    \      return lst1\n    elseif lst1_sum > lst2_sum\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\ntotal_match(['hi', 'admin'], ['hI', 'Hi'])\
    \  # ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\
    \  # ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi'])  # ['hI',\
    \ 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5'])  # ['4']\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp2806g4f6.jl:27\nin expression\
    \ starting at /tmp/tmp2806g4f6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) == sum(length.(lst2))\n        return lst1\n    end\n   \
    \ if sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    end\n \
    \   return lst2\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    n1, n2 = map(String, lst1) , map(String,\
    \ lst2) \n    if length(n1) == length(n2) \n        return lst1 \n    elseif length(n1)\
    \ > length(n2) \n        return lst2 \n    else \n        return lst1 \n    end\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppcpd6rp7.jl:30\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppcpd6rp7.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppcpd6rp7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppcpd6rp7.jl:33\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppcpd6rp7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppcpd6rp7.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppcpd6rp7.jl:34\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppcpd6rp7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppcpd6rp7.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppcpd6rp7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst_diff_len = length(lst1)\
    \ - length(lst2)\n    if lst_diff_len < 0\n        return lst1\n    elseif lst_diff_len\
    \ > 0\n        return lst2\n    else\n        if count_string_chars(lst1) < count_string_chars(lst2)\n\
    \            return lst1\n        elseif count_string_chars(lst1) > count_string_chars(lst2)\n\
    \            return lst2\n        else\n            return lst1\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp5zvlv3v.jl:36\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  UndefVarError: count_string_chars not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpp5zvlv3v.jl:22\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp5zvlv3v.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp5zvlv3v.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpp5zvlv3v.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  UndefVarError:\
    \ count_string_chars not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpp5zvlv3v.jl:22\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp5zvlv3v.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp5zvlv3v.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpp5zvlv3v.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n  UndefVarError:\
    \ count_string_chars not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpp5zvlv3v.jl:22\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp5zvlv3v.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp5zvlv3v.jl:35\ntest set:\
    \ Test Failed at /tmp/tmpp5zvlv3v.jl:41\n  Expression: candidate([\"hi\", \""
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp5zvlv3v.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    # find the total number of chars\
    \ in the all strings of each list\n    total_lst1 = 0\n    total_lst2 = 0\n  \
    \  for (i, x) in enumerate(lst1)\n        total_lst1 += length(x)\n    end\n \
    \   for (i, x) in enumerate(lst2)\n        total_lst2 += length(x)\n    end\n\
    \    # decide which list to return\n    if total_lst1 < total_lst2\n        return\
    \ lst1\n    elseif total_lst1 > total_lst2\n        return lst2\n    else\n  \
    \      return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    return lst1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5v5t2dpa.jl:23\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5v5t2dpa.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v5t2dpa.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5v5t2dpa.jl:26\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5v5t2dpa.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v5t2dpa.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5v5t2dpa.jl:27\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5v5t2dpa.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v5t2dpa.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5v5t2dpa.jl:30\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5v5t2dpa.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5v5t2dpa.jl:21\nTest Summary:\
    \ | Pass"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5v5t2dpa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    d1 = sum(length, lst1)\n    d2 =\
    \ sum(length, lst2)\n    if d1 == d2\n        return lst1\n    elseif d1 < d2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpexh4w3bq.jl:30\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{typeof(length),\
    \ typeof(Base.add_sum)}, #unused#::Type{String})\n      @ Base ./reduce.jl:331\n\
    \    [4] reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [5] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{String}, ItrEltype::Base.HasEltype)\n      @ Base\
    \ ./reduce.jl:353\n    [6] _mapreduce(f::typeof(length), op::typeof(Base.add_sum),\
    \ #unused#::IndexLinear, A::Vector{String})\n      @ Base ./reduce.jl:402\n  \
    \  [7] _mapreduce_dim\n      @ ./reducedim.jl:330 [inlined]\n    [8] #mapreduce#731\n\
    \      @ ./reducedim.jl:322 [inlined]\n    [9] mapreduce\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] #_sum#741\n      @ ./reducedim.jl:894 [inlined]\n   [11]\
    \ _sum\n      @ ./reducedim.jl:894 [inlined]\n   [12] #sum#739\n      @ ./reducedim.jl:890\
    \ [inlined]\n   [13] sum\n      @ ./reducedim.jl:890 [inlined]\n   [14] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmpexh4w3bq.jl:15\n   [15] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpexh4w3bq.jl:30 [inlined]\n\
    \   [17] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpexh4w3bq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpexh4w3bq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Function,\
    \ T::Type)\n      @ Bas"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpexh4w3bq.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    count1 = 0\n    count2 = 0\n   \
    \ for i in lst1\n        count1 += length(i)\n    end\n    for i in lst2\n   \
    \     count2 += length(i)\n    end\n    if count1 < count2\n        return lst1\n\
    \    elseif count1 > count2\n        return lst2\n    elseif count1 == count2\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total_count = sum(length.(lst1))\n\
    \    lst2_total_count = sum(length.(lst2))\n    if lst1_total_count < lst2_total_count\n\
    \        return lst1\n    elseif lst1_total_count > lst2_total_count\n       \
    \ return lst2\n    else\n        return lst1\n    end\nend\nprintln(total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]))\nprintln(total_match([\"hi\", \"admin\"],\
    \ [\"hi\", \"hi\", \"admin\", \"project\"]))\nprintln(total_match([\"hi\", \"\
    admin\"], [\"hI\", \"hi\", \"hi\"]))\nprintln(total_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]))\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "[\"hI\", \"Hi\"]\n[\"hi\", \"admin\"]\n[\"hI\", \"hi\", \"hi\"]\n[\"4\"\
    ]\nTest Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
