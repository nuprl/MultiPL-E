name: HumanEval_125_split_words
language: jl
results:
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    v = split(txt)\n    if length(v) > 1\n        return v\n    else\n\
    \        v = split(txt, \",\")\n        if length(v) > 1\n            return v\n\
    \        else\n            count = 0\n            i = 1\n            for c in\
    \ txt\n                if i % 2 == 1\n                    if c in \"abcdefghijklmnopqrstuvwxyz\"\
    \n                        count += 1\n                    end\n              \
    \  end\n                i += 1\n            end\n            return count\n  \
    \      end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0ida4xsu.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp0ida4xsu.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0ida4xsu.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0ida4xsu.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmp0ida4xsu.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp0ida4xsu.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp0ida4xsu.jl:39 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0ida4xsu.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmp0ida4xsu.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespaces = findall(x -> x == ' ', txt)\n    commas = findall(x\
    \ -> x == ',', txt)\n    if length(whitespaces) > 0\n        return split(txt,\
    \ whitespaces)\n    elseif length(commas) > 0\n        return split(txt, commas)\n\
    \    else\n        return sum(Int64, [x for x in collect(0:25) if x % 2 == 1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpte9uezsi.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: no method matching findfirst(::Vector{Int64}, ::String)\\n\
    \  Closest candidates are:\\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\\\
    n    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\\\
    n    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\\\
    n    ...\\n  Stacktrace:\\n   [1] _split(str::String, splitter::Vector{Int64},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\n     @ Base\
    \ ./strings/util.jl:435\\n   [2] split(str::String, splitter::Vector{Int64}; limit::Int64,\
    \ keepempty::Bool)\\n     @ Base ./strings/util.jl:419\\n   [3] split(str::String,\
    \ splitter::Vector{Int64})\\n     @ Base ./strings/util.jl:419\\n   [4] split_words(txt::String)\\\
    n     @ Main /tmp/tmpte9uezsi.jl:14\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpte9uezsi.jl:26 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpte9uezsi.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpte9uezsi.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: no method\
    \ matching findfirst(::Vector{Int64}, ::String)\\n  Closest candidates are:\\\
    n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\\\
    n    ...\\n  Stacktrace"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return length(filter(c -> !isupper(c) && isodd(ord(c) - ord('a')), txt))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuqjrqxx8.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuqjrqxx8.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuqjrqxx8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuqjrqxx8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpuqjrqxx8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuqjrqxx8.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuqjrqxx8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuqjrqxx8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpuqjrqxx8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuqjrqxx8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt_clean = replace(txt, r\"[^a-zA-Z0-9]\", \" \")\n    txt_vec\
    \ = split(txt_clean)\n    if isempty(txt_vec)\n        count_lowercase = [c for\
    \ c in txt if c in lowercase(alphabet(1))]\n        return length(count_lowercase)\
    \ % 2 == 1 ? length(count_lowercase) : 0\n    else\n        return txt_vec\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpojzz1ktc.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpojzz1ktc.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojzz1ktc.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojzz1ktc.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpojzz1ktc.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\n  Closest candidates are:\n \
    \   replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpojzz1ktc.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojzz1ktc.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpojzz1ktc.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    a = split(txt, ' ')\n    b = split(txt, ',')\n    if length(a)==1\
    \ && length(b)==1\n        num_of_odd_letters = count(x->occursin(x,\"bdfhjklmnpqrstvwxyz\"\
    ) && occursin(x,\"a\"), collect(txt))\n        return num_of_odd_letters\n   \
    \ elseif length(a)==1 && length(b) > 1\n        return b\n    else\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpijzzwbqe.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpijzzwbqe.jl:19\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpijzzwbqe.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpijzzwbqe.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpijzzwbqe.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpijzzwbqe.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpijzzwbqe.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpijzzwbqe.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpijzzwbqe.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if any(c in string(\" ,;:.\") for c in txt)\n        return split(replace(txt,\
    \ \";\" => \" \"), \" ,;:.\")\n    else\n        return length(filter(x -> isodd(ord(x)\
    \ - ord('a')), lowercase(txt)))\n    end\nend\n \n ##############################\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb9mbsp75.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpb9mbsp75.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9mbsp75.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9mbsp75.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb9mbsp75.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpb9mbsp75.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9mbsp75.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9mbsp75.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpb9mbsp75.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9mbsp75.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    return extract_odd_letters(txt)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8sudky8a.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ extract_odd_letters not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmp8sudky8a.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sudky8a.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sudky8a.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp8sudky8a.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: extract_odd_letters\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8sudky8a.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sudky8a.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sudky8a.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp8sudky8a.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: extract_odd_letters\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8sudky8a.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sudky8a.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sudky8a.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp8sudky8a.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ extract_odd_letters not defined\n  St"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8sudky8a.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) > 1\n        return words\n\
    \    else\n        letters = Vector{String}()\n        for letter in txt\n   \
    \         push!(letters, letter)\n        end\n        indexes = Vector{Int64}()\n\
    \        for (index, letter) in enumerate(letters)\n            if ord(letter)\
    \ in 0:25\n                push!(indexes, index)\n            end\n        end\n\
    \        count = 0\n        for index in indexes\n            if index % 2 ==\
    \ 1\n                count += 1\n            end\n        end\n        return\
    \ count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkgi8ppk3.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkgi8ppk3.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkgi8ppk3.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkgi8ppk3.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpkgi8ppk3.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Char)\n     @ Base\
    \ ./array.jl:994\n   [2] split_words(txt::String)\n     @ Main /tmp/tmpkgi8ppk3.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkgi8ppk3.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkgi8ppk3.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpkgi8ppk3.jl:41\n  Test threw exception\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkgi8ppk3.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findfirst(txt, ' ') == nothing\n        if findfirst(txt, ',')\
    \ == nothing\n            # find lower-case letters with odd order in the alphabet\n\
    \            return sum(map(x -> islower(x) ? isodd(x - 'a') : false, collect(txt)))\n\
    \        else\n            return split(txt, ',')\n        end\n    else\n   \
    \     return split(txt)\n    end\nend\n\"\"\"\n    You are a farmer who is raising\
    \ cows and chickens. You need to know how many legs you have in total.\n    Each\
    \ cow has 4 legs, and each chicken has 2 legs.\n    Examples\n    count_legs(2,\
    \ 3) \u279E 16\n    count_legs(5, 2) \u279E 20\n    count_legs(1, 4) \u279E 10\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp2ganz_85.jl:22\nin expression starting at /tmp/tmp2ganz_85.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    len_txt = length(txt)\n    if len_txt <= 1\n        return len_txt\n\
    \    end\n    ws = findall(txt, r\"\\s\")\n    if !isempty(ws)\n        return\
    \ split(txt, r\"\\s\")\n    end\n    com = findall(txt, \",\")\n    if !isempty(com)\n\
    \        return split(txt, \",\")\n    end\n    if isascii(txt)\n        return\
    \ sum(isodd.(txt .- 'a'))\n    end\n    throw(ArgumentError(\"txt must be ASCII-only\"\
    ))\nend\n \nsplit_words(\"abcdef\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching findall(::String, ::Regex)\n\
    Closest candidates are:\n  findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n  findall(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n  findall(::String,\
    \ !Matched::LibGit2.GitIndex) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \  ...\nStacktrace:\n [1] split_words(txt::String)\n   @ Main /tmp/tmpz2ckmf8y.jl:15\n\
    \ [2] top-level scope\n   @ /tmp/tmpz2ckmf8y.jl:29\nin expression starting at\
    \ /tmp/tmpz2ckmf8y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt, r\"\\s\"\
    )\n    elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n\
    \        ans = 0\n        for i in txt\n            if isalpha(i)\n          \
    \      if islower(i)\n                    if (ord(i) - 96) % 2 == 1\n        \
    \                ans += 1\n                    end\n                end\n    \
    \        end\n        end\n        return ans\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4wcwipk_.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp4wcwipk_.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4wcwipk_.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4wcwipk_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4wcwipk_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp4wcwipk_.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4wcwipk_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4wcwipk_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp4wcwipk_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4wcwipk_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    w = split(txt)\n    if length(w) == 1\n        v = split(txt, \"\
    ,\")\n        if length(v) == 1\n            return sum(i->i%2 == 1, collect(Char.((txt\
    \ .- 'a') .+ 1)))\n        else\n            return v\n        end\n    else\n\
    \        return w\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1pqn30ur.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1pqn30ur.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1pqn30ur.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1pqn30ur.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp1pqn30ur.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1pqn30ur.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1pqn30ur.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1pqn30ur.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp1pqn30ur.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1pqn30ur.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        return\
    \ sum(lowercase(txt) .% 2 .== 1)\n    elseif !occursin(\" \", txt) && occursin(\"\
    ,\", txt)\n        return split(txt, \",\")\n    elseif occursin(\" \", txt) &&\
    \ !occursin(\",\", txt)\n        return split(txt, \" \")\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnvkcge2x.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpnvkcge2x.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnvkcge2x.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnvkcge2x.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpnvkcge2x.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpnvkcge2x.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnvkcge2x.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnvkcge2x.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpnvkcge2x.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Nothing to an object of type \\n    Union{Int64,\
    \ Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpnvkcge2x.jl:21\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        cnt =\
    \ 0\n        for c in txt\n            if islower(c) && cnt % 2 == 0\n       \
    \         cnt += 1\n            end\n        end\n        return cnt\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprbyvn5y8.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmprbyvn5y8.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprbyvn5y8.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprbyvn5y8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmprbyvn5y8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmprbyvn5y8.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprbyvn5y8.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprbyvn5y8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmprbyvn5y8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprbyvn5y8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    l = strsplit(txt, \" \")\n    if length(l) > 1 \n        return\
    \ l\n    else\n        l = strsplit(txt, \",\")\n        if length(l) > 1\n  \
    \          return l\n        else\n            cnt = 0\n            for i in 1:length(txt)\n\
    \                if txt[i] == 'a' || txt[i] == 'c' || txt[i] == 'e' || txt[i]\
    \ == 'g' || txt[i] == 'i' || txt[i] == 'k' || txt[i] == 'm' || txt[i] == 'o' ||\
    \ txt[i] == 'q' || txt[i] == 's' || txt[i] == 'u' || txt[i] == 'w' || txt[i] ==\
    \ 'y'\n                    cnt += 1\n                end\n            end\n  \
    \          return cnt\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpabridhwh.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ strsplit not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @\
    \ Main /tmp/tmpabridhwh.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabridhwh.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabridhwh.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpabridhwh.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: strsplit\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpabridhwh.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabridhwh.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabridhwh.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpabridhwh.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: strsplit\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpabridhwh.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabridhwh.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabridhwh.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpabridhwh.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ strsplit not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpabridhwh.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    new_txt = lowercase(txt)\n    if ' ' in new_txt\n        return\
    \ split(new_txt, ' ')\n    elseif ',' in new_txt\n        return split(new_txt,\
    \ ',')\n    else\n        counter = 0\n        for i in 1:length(new_txt)\n  \
    \          if new_txt[i] == 'a' || new_txt[i] == 'c' || new_txt[i] == 'e' || new_txt[i]\
    \ == 'g' || new_txt[i] == 'i' || new_txt[i] == 'k' || new_txt[i] == 'm' || new_txt[i]\
    \ == 'o' || new_txt[i] == 'q' || new_txt[i] == 's' || new_txt[i] == 'u' || new_txt[i]\
    \ == 'w' || new_txt[i] == 'y'\n                counter += 1\n            end\n\
    \        end\n        return counter\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp56zkmity.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp56zkmity.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp56zkmity.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp56zkmity.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp56zkmity.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp56zkmity.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp56zkmity.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp56zkmity.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp56zkmity.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp56zkmity.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[^\\s]\", txt)\n        return split(txt, \" \"\
    )\n    elseif occursin(r\"[^,]\", txt)\n        return split(txt, \",\")\n   \
    \ else\n        sum = 0\n        for i in 1:length(txt)\n            if length(txt)\
    \ % 2 == 1 && i % 2 == 1\n                sum += i\n            end\n        end\n\
    \        return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6_xap_fn.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6_xap_fn.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6_xap_fn.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_xap_fn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6_xap_fn.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6_xap_fn.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6_xap_fn.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_xap_fn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6_xap_fn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_xap_fn.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n  if occursin(' ', txt)\n    return split(txt, ' ')\n  elseif occursin(',',\
    \ txt)\n    return split(txt, ',')\n  else\n    #return length(filter(ch-> ch\
    \ != ' ' && ch != ',' && (ord(ch) - 97) % 2 == 1, txt))\n    return length(filter(ch->\
    \ ch != ' ' && ch != ',' && (ord(ch) - ord('a')) % 2 == 1, txt))\n  end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplbgpnh_k.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmplbgpnh_k.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplbgpnh_k.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplbgpnh_k.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplbgpnh_k.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmplbgpnh_k.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplbgpnh_k.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplbgpnh_k.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplbgpnh_k.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplbgpnh_k.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if (occursin(' ', txt))\n        split(txt, ' ')\n    elseif (occursin(',',\
    \ txt))\n        split(txt, ',')\n    else\n        alpha = 'abcdefghijklmnopqrstuvwxyz'\n\
    \        cnt = 0\n        for i = 1:length(txt)\n            if islower(txt[i])\
    \ && (ord(txt[i]) % 2 == 1)\n                cnt += 1\n            end\n     \
    \   end\n        cnt\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp8awpjmcv.jl:16\nin expression\
    \ starting at /tmp/tmp8awpjmcv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return count(x -> isodd(ord(x) - ord('a')), lowercase(txt))\n\
    \    end\nend\n@testset \"Example Tests\" begin\n    @test split_words(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"]\n    @test split_words(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"]\n    @test split_words(\"abcdef\") == 3\n    @test\
    \ split_words(\"xyz\") == 3\n    @test split_words(\"\") == 0\n    @test split_words(\"\
    abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef_abcdef\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nd7uc30.jl:31\nin expression starting at\
    \ /tmp/tmp3nd7uc30.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = delete(txt, r\"\\W\")\n    if isempty(txt)\n        return\
    \ 0\n    elseif length(txt) == 1\n        return txt\n    elseif length(txt) >\
    \ 1\n        txt = collect(txt)\n        splitted_txt = []\n        for i in eachindex(txt)\n\
    \            if islower(txt[i]) && i % 2 == 1\n                push!(splitted_txt,\
    \ txt[i])\n            end\n        end\n        return splitted_txt\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgntiwm_y.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ delete not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpgntiwm_y.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgntiwm_y.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgntiwm_y.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgntiwm_y.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: delete\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgntiwm_y.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgntiwm_y.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgntiwm_y.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgntiwm_y.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: delete\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgntiwm_y.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgntiwm_y.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgntiwm_y.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgntiwm_y.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ delete not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Mai"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgntiwm_y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n   \n    words = split(txt)\n    commas = split(txt, ',')\n    if length(words)\
    \ > 1\n        return words\n    elseif length(commas) > 1\n        return commas\n\
    \    else\n        num_lower_case_odd_order = 0\n        for i in 1:length(txt)\n\
    \            if islower(txt[i])\n                if isodd(Int(txt[i]) - 96)\n\
    \                    num_lower_case_odd_order += 1\n                end\n    \
    \        end\n        end\n        return num_lower_case_odd_order\n    end\n\
    end\n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnwhx6br4.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnwhx6br4.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnwhx6br4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnwhx6br4.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpnwhx6br4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnwhx6br4.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnwhx6br4.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnwhx6br4.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpnwhx6br4.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwhx6br4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        n = 0\n\
    \        for i in 1:length(txt)\n            if mod(lowercase(txt[i]) - 97, 2)\
    \ == 1\n                n += 1\n            end\n        end\n        return n\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa8krn15u.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpa8krn15u.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa8krn15u.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa8krn15u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpa8krn15u.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpa8krn15u.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa8krn15u.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa8krn15u.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpa8krn15u.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa8krn15u.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, \" \")\n    elseif\
    \ occursin(',', txt)\n        return split(txt, \",\")\n    else\n        n =\
    \ 0\n        for i in txt\n            if islower(i) && n < 26\n             \
    \   n += 1\n            end\n        end\n        return n\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl68at0l3.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpl68at0l3.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl68at0l3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl68at0l3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpl68at0l3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpl68at0l3.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl68at0l3.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl68at0l3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpl68at0l3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl68at0l3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !(contains(txt, ' ')) & (contains(txt, ','))\n        return\
    \ split(txt, ',')\n    elseif !(contains(txt, ' ')) & !(contains(txt, ','))\n\
    \        return length(filter(c -> c - 'a' % 2 == 1, txt))\n    else\n       \
    \ return split(txt, ' ')\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpibglld4o.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpibglld4o.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibglld4o.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibglld4o.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpibglld4o.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpibglld4o.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibglld4o.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibglld4o.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpibglld4o.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibglld4o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) > 1\n        return words\n\
    \    elseif length(words) == 1\n        chars = split(words[1], \",\")\n     \
    \   if length(chars) > 1\n            return chars\n        else\n           \
    \ cnt = 0\n            for i in 1:length(chars[1])\n                if ord(chars[1][i])\
    \ % 2 == 1\n                    cnt += 1\n                end\n            end\n\
    \            return cnt\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo51_iwww.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo51_iwww.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo51_iwww.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo51_iwww.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpo51_iwww.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo51_iwww.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo51_iwww.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo51_iwww.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpo51_iwww.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo51_iwww.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if count(x -> x in ' ' \u2228 x in ',' , txt) == 0\n        return\
    \ count(a -> a == 'a' \u2228 a == 'c' \u2228 a == 'e' \u2228 a == 'g' \u2228 a\
    \ == 'i' \u2228 a == 'k' \u2228 a == 'm' \u2228 a == 'o' \u2228 a == 'q' \u2228\
    \ a == 's' \u2228 a == 'u' \u2228 a == 'w' \u2228 a == 'y', txt)\n    elseif count(x\
    \ -> x in ' ' , txt) == 0\n        return split(txt, \",\")\n    else\n      \
    \  return split(txt, \" \")\n    end\nend\n    \n    \n@testset \"Split Words\"\
    \ begin\n    @test split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n\
    \    @test split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    @test\
    \ split_words(\"abcdef\") == 3\n    @test split_words(\"Hi,my name is Sara\")\
    \ == [\"Hi\", \"my name is Sara\"]\n    @test split_words(\"This is a sentence\
    \ without any commas.\") == [\"This\", \"is\", \"a\", \"sentence\", \"without\"\
    , \"any\", \"commas.\"]\n    @test split_words(\"\") == 0\n    @test split_words(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ) == 50\n    @test split_words(\"This is a test string\") == [\"This\", \"is\"\
    , \"a\", \"test\", \"string\"]\n    @test split_words(\"abcd efgh\") == [\"abcd\"\
    , \"efgh\"]\n    @test split_words(\"this,is,a,csv,file\") == [\"this\", \"is\"\
    , \"a\", \"csv\", \"file\"]\n    @test split_words(\"This,is,a,csv,file\") ==\
    \ [\"This\", \"is\", \"a\", \"csv\", \"file\"]\n    @test split_words(\"qwertyuiopasdfghjklzxcvbnm\"\
    ) == 13\n    @test split_words(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgltm09p_.jl:40\nin expression starting at\
    \ /tmp/tmpgltm09p_.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        count = 0\n        for\
    \ char in txt\n            ord_char = ord(char)\n            if islower(char)\
    \ && ord_char % 2 == 1\n                count += 1\n            end\n        end\n\
    \        return count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpot4hed8l.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpot4hed8l.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpot4hed8l.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpot4hed8l.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpot4hed8l.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpot4hed8l.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpot4hed8l.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpot4hed8l.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpot4hed8l.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpot4hed8l.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        count\
    \ = 0\n        for i in 1:length(txt)\n            if occursin(txt[i], 'a':'z')\
    \ && isodd(Int(txt[i]) - 97)\n                count += 1\n            end\n  \
    \      end\n        return count\n    elseif !occursin(\" \", txt)\n        return\
    \ split(txt, \",\")\n    else\n        return split(txt, \" \")\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpccnxii69.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpccnxii69.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpccnxii69.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpccnxii69.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpccnxii69.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpccnxii69.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpccnxii69.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpccnxii69.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpccnxii69.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpccnxii69.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # your code\n    return text\nend\n\"\"\"\n    You are given a\
    \ list of words, a vowel, and a string. Your job is to return a new string of\
    \ words with all the vowels\n    replaced by a given vowel.\n    Examples\n  \
    \  replace_vowels(\"Hello world!\", '*', \"aeiou\") \u279E \"H*ll* w*rld!\"\n\
    \    replace_vowels(\"tricky\", 'o', \"aeiou\") \u279E \"trooky\"\n    replace_vowels(\"\
    apple\", 'o', \"aeiou\") \u279E \"opple\"\n    Notes\n    Make sure that the order\
    \ of the words in the output is the same as in the input list.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp36kq2uox.jl:14\nin expression starting at /tmp/tmp36kq2uox.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if txt == \"\"\n        return []\n    end\n    words = txt |>\
    \ x -> split(x, \" \")\n    if length(words) == 1\n        letters = txt |> x\
    \ -> split(x, \",\")\n        if length(letters) == 1\n            out = [ord(x)\
    \ - ord('a') for x in letters[1]]\n            for i in 1:length(out)\n      \
    \          if out[i] % 2 == 0\n                    deleteat!(out, i)\n       \
    \         end\n            end\n            return length(out)\n        else\n\
    \            return letters\n        end\n    else\n        return words\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpomjmbeaw.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpomjmbeaw.jl:29\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpomjmbeaw.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpomjmbeaw.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpomjmbeaw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpomjmbeaw.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpomjmbeaw.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpomjmbeaw.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpomjmbeaw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpomjmbeaw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[a-z]\", txt)\n        findall(r\"[a-z]\", txt)\n\
    \    elseif occursin(r\"\\w\", txt)\n        split(txt, r\"\\W\")\n    elseif\
    \ occursin(r\",\", txt)\n        split(txt, r\",\")\n    else\n        split(txt,\
    \ r\"\\s\")\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk7cma149.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{UnitRange{Int64}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpk7cma149.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpk7cma149.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk7cma149.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpk7cma149.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{UnitRange{Int64}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpk7cma149.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpk7cma149.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk7cma149.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpk7cma149.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{UnitRange{Int64}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matc"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt)\n        # no spaces\n        if !occursin(\"\
    ,\", txt)\n            # no commas\n            r = 0\n            for i = 1:length(txt)\n\
    \                if i % 2 == 1\n                    r += Int(txt[i]) - 97\n  \
    \              end\n            end\n            return r\n        else\n    \
    \        # commas exist\n            return [c for c in split(txt, \",\")]\n \
    \       end\n    else\n        # spaces exist\n        return [c for c in split(txt,\
    \ \" \")]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph83ik0ki.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmph83ik0ki.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph83ik0ki.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph83ik0ki.jl:35\ntest set:\
    \ Error During Test at /tmp/tmph83ik0ki.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmph83ik0ki.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph83ik0ki.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph83ik0ki.jl:35\ntest set:\
    \ Error During Test at /tmp/tmph83ik0ki.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph83ik0ki.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if count(x -> x == ' ', txt) > 0 \n        return split(txt, '\
    \ ')\n    elseif count(x -> x == ',', txt) > 0\n        return split(txt, ',')\n\
    \    else\n        return sum(isodd.(collect(txt)))\n    end\nend\n@test split_words(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n@test split_words(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"]\n@test split_words(\"abcdef\") == 3 \n \n \n\"\"\"\
    \n    Return the first element of a given array or string.\n    Examples\n   \
    \ first([1, 2, 3]) \u279E 1\n    first(\"neon\") \u279E \"n\"\n    first([{foo:\
    \ \"bar\"}, [1, 2, 3], 123]) \u279E {foo: \"bar\"}\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpi3yu3yzr.jl:19\nin expression starting at /tmp/tmpi3yu3yzr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        split(txt, ' ')\n    elseif occursin(txt,\
    \ ',')\n        split(txt, ',')\n    else\n        length(filter(r -> r%2 == 1,\
    \ map(r -> Int(r) - 97, collect(txt))))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0y6haxzp.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp0y6haxzp.jl:11\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0y6haxzp.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0y6haxzp.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0y6haxzp.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0y6haxzp.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0y6haxzp.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0y6haxzp.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0y6haxzp.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0y6haxzp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split(txt, \" \") == [] && split(txt, \",\") == [] && return sum(i\
    \ % 2 == 1 for i in ASCII(txt)) == 1 ? [txt] : [txt]\n    split(txt, \" \") ==\
    \ [] && return collect(ASCII(txt))\n    return split(txt, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgr155e_n.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgr155e_n.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgr155e_n.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgr155e_n.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgr155e_n.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgr155e_n.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgr155e_n.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgr155e_n.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgr155e_n.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgr155e_n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    a = union(findall(r\"[ ,]\", txt))\n    if length(a) > 0\n\
    \        a = sort(a)\n        x = 0\n        n = Vector{String}()\n        while\
    \ x < length(a)\n            if x == 0\n                push!(n, strip(txt[1:a[x]]))\n\
    \            else\n                push!(n, strip(txt[a[x-1]+1:a[x]]))\n     \
    \       end\n            x += 1\n        end\n        push!(n, strip(txt[a[end]+1:end]))\n\
    \        return n\n    else\n        if isa(eval(parse(txt)), Number)\n      \
    \      return 0\n        else\n            x = union(findall(r\"[^a-z]\", txt))\n\
    \            if length(x) > 0\n                return 0\n            else\n  \
    \              return sum(odd(string2num(txt)))\n            end\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx_z8wlhs.jl:45\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  BoundsError:\
    \ attempt to access 1-element Vector{UnitRange{Int64}} at index [0]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] split_words(txt::String)\n\
    \     @ Main /tmp/tmpx_z8wlhs.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx_z8wlhs.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx_z8wlhs.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpx_z8wlhs.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  BoundsError: attempt\
    \ to access 1-element Vector{UnitRange{Int64}} at index [0]\n  Stacktrace:\n \
    \  [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] split_words(txt::String)\n\
    \     @ Main /tmp/tmpx_z8wlhs.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx_z8wlhs.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx_z8wlhs.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpx_z8wlhs.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  BoundsError: attempt\
    \ to access 2-element Vector{UnitRange{Int64}} at index [0]\n  Stacktrace:\n \
    \  [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] split_words(txt::String)\n\
    \     @ Main /tmp/tmpx_z8wlhs.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx_z8wlhs.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level sco"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_z8wlhs.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    splitted_sentence = split(txt, [\" \", \",\"])\n    number_of_lower_letters\
    \ = 0\n    for word in splitted_sentence\n        if word != \"\"\n          \
    \  return splitted_sentence\n        end\n    end\n    for letter in splitted_sentence\n\
    \        if letter in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n            if number_of_lower_letters\
    \ % 2 == 0\n                number_of_lower_letters += 1\n            end\n  \
    \      end\n    end\n    return number_of_lower_letters\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuo59frka.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{String}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpuo59frka.jl:11\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuo59frka.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuo59frka.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpuo59frka.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, spl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuo59frka.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        count\
    \ = 0\n        for c in txt\n            if ord(c) % 2 == 1\n                count\
    \ += 1\n            end\n        end\n        return count\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy25j16q6.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpy25j16q6.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy25j16q6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy25j16q6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpy25j16q6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpy25j16q6.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy25j16q6.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy25j16q6.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpy25j16q6.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy25j16q6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(strsplit(txt, \" \")) > 1\n        return strsplit(txt,\
    \ \" \")\n    elseif length(strsplit(txt, \",\")) > 1\n        return strsplit(txt,\
    \ \",\")\n    else\n        res = 0\n        for x in 1:length(txt)\n        \
    \    if isalpha(txt[x])\n                res += ord(txt[x]) - 96\n           \
    \ end\n        end\n        return res\n    end\nend\n@testset \"split_words\"\
    \ begin\n    @test split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n\
    \    @test split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    @test\
    \ split_words(\"abcdef\") == 3\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @testset not defined\nin expression starting\
    \ at /tmp/tmpav9e_5_q.jl:25\nin expression starting at /tmp/tmpav9e_5_q.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if split(txt, ' ') != [\"\"]\n        return split(txt, ' ')\n\
    \    elseif split(txt, ',') != [\"\"]\n        return split(txt, ',')\n    else\n\
    \        cnt = 0\n        for i = 1:length(txt)\n            if txt[i] in ['a',\
    \ 'c', 'e', 'g', 'i', 'k', 'm', 'o', 'q', 's', 'u', 'w', 'y']\n              \
    \  cnt += 1\n            end\n        end\n        return cnt\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdzs87ylp.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdzs87ylp.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdzs87ylp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdzs87ylp.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdzs87ylp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdzs87ylp.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdzs87ylp.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdzs87ylp.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdzs87ylp.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdzs87ylp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    splits = split(txt, [\" \", \",\"])\n    if length(splits) == 1\n\
    \        if length(txt) <= 1\n            return 0\n        end\n        return\
    \ sum(1 for c in txt if c in 'abcdefghijklmnopqrstuvwxyz' && c - 'a' % 2 == 1)\n\
    \    end\n    return splits\nend\n@testset \"split_words\" begin\n    @test split_words(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n    @test split_words(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"]\n    @test split_words(\"abcdef\") == 3\n    @test\
    \ split_words(\"abcdefgh\") == 4\n    @test split_words(\"abcd efgh\") == 7\n\
    \    @test split_words(\"abcd,efgh\") == 7\n    @test split_words(\"\") == 0\n\
    \    @test split_words(\"a\") == 1\n    @test split_words(\"b\") == 0\n    @test\
    \ split_words(\"c\") == 1\n    @test split_words(\"d\") == 0\n    @test split_words(\"\
    e\") == 1\n    @test split_words(\"f\") == 0\n    @test split_words(\"g\") ==\
    \ 1\n    @test split_words(\"h\") == 0\n    @test split_words(\"i\") == 1\n  \
    \  @test split_words(\"j\") == 0\n    @test split_words(\"k\") == 1\n    @test\
    \ split_words(\"l\") == 0\n    @test split_words(\"m\") == 1\n    @test split_words(\"\
    n\") == 0\n    @test split_words(\"o\") == 1\n    @test split_words(\"p\") ==\
    \ 0\n    @test split_words(\"q\") == 1\n    @test split_words(\"r\") == 0\n  \
    \  @test split_words(\"s\") == 1\n    @test split_words(\"t\") == 0\n    @test\
    \ split_words(\"u\") == 1\n    @test split_words(\"v\") == 0\n    @test split_words(\"\
    w\") == 1\n    @test split_words(\"x\") == 0\n    @test split_words(\"y\") ==\
    \ 1\n   \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp66mqmc6k.jl:16\nin expression\
    \ starting at /tmp/tmp66mqmc6k.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if txt == findfirst(isalpha, txt)\n        return length(txt)\n\
    \    elseif txt == findfirst(x -> x == ' ' , txt)\n        return split(txt, \"\
    \ \")\n    else \n        return split(txt, \",\")\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyy_jwhf0.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @\
    \ Main /tmp/tmpyy_jwhf0.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyy_jwhf0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyy_jwhf0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyy_jwhf0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpyy_jwhf0.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyy_jwhf0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyy_jwhf0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyy_jwhf0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpyy_jwhf0.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyy_jwhf0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyy_jwhf0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpyy_jwhf0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyy_jwhf0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      total_odd = 0\n        for i in 1:length(txt)\n            if islower(txt[i])\n\
    \                if mod(Int(txt[i]), 2) == 1\n                    total_odd +=\
    \ 1\n                end\n            end\n        end\n        return total_odd\n\
    \    end\nend\n        \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx_2lywvm.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpx_2lywvm.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_2lywvm.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_2lywvm.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpx_2lywvm.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpx_2lywvm.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_2lywvm.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_2lywvm.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpx_2lywvm.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_2lywvm.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        let\n\
    \            mask = [isodd(i) for i = 1:26]\n            mask[occursin.(lowercase.(txt),\
    \ ['a', 'e', 'i', 'o', 'u'])] .= false\n            return sum(mask)\n       \
    \ end\n    elseif !occursin(\" \", txt)\n        return split(txt, \",\")\n  \
    \  else\n        return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8sv83vx6.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8sv83vx6.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sv83vx6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sv83vx6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8sv83vx6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8sv83vx6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sv83vx6.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sv83vx6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8sv83vx6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8sv83vx6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split_txt = split(txt, r\"\\s\")\n    if(length(split_txt)==1)\n\
    \        split_txt = split(txt, \",\")\n        if(length(split_txt)==1)\n   \
    \         count = 0\n            for letter in txt\n                letter_order\
    \ = Int(letter)-Int('a')\n                if(letter_order%2==1)\n            \
    \        count += 1\n                end\n            end\n            return\
    \ count\n        end\n    end\n    return split_txt\nend\n@testset \"Basic tests\"\
    \ begin\n    @test split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n\
    \    @test split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    @test\
    \ split_words(\"abcdef\") == 3\n    @test split_words(\"abcdefghijklmnopqrstuvwxyz\"\
    ) == 26\n    @test split_words(\"Hello, world!\") == [\"Hello\", \"world!\"]\n\
    \    @test split_words(\"Hello! world!\") == [\"Hello!\", \"world!\"]\n    @test\
    \ split_words(\"Hello, world!\") == [\"Hello\", \"world!\"]\n    @test split_words(\"\
    abcd\") == 2\n    @test split_words(\"abcdefghijklmnopqrstuvwxyz\") == 26\n  \
    \  @test split_words(\"Hello, world!\") == [\"Hello\", \"world!\"]\n    @test\
    \ split_words(\"Hello! world!\") == [\"Hello!\", \"world!\"]\n    @test split_words(\"\
    Hello, world!\") == [\"Hello\", \"world!\"]\n    @test split_words(\"abcd\") ==\
    \ 2\n    @test split_words(\"abcdefghijklmnopqrstuvwxyz\") == 26\n    @test split_words(\"\
    Hello, world!\") == [\"Hello\", \"world!\"]\n    @test split_words(\"Hello! world!\"\
    ) == [\"Hello!\", \"world!\"]\n    @test split_words(\"Hello, world!\") == [\"\
    Hello\", \"world!\"]\n    @test split_words(\"abcd\") == 2\n    @test split_words(\"\
    abcdefghijklmnopqrstuvwxyz\") == 26\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"begin\" at /tmp/tmpc0wyjd0z.jl:27\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc0wyjd0z.jl:27\n\
    in expression starting at /tmp/tmpc0wyjd0z.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        words = split(txt, \" \")\n        return\
    \ words\n    elseif ',' in txt\n        words = split(txt, \",\")\n        return\
    \ words\n    else\n        j = 0\n        for (i, letter) in enumerate(txt)\n\
    \            if i % 2 == 0\n                j += 1\n            end\n        end\n\
    \        return j\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpec_f2rwo.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpec_f2rwo.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpec_f2rwo.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpec_f2rwo.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpec_f2rwo.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpec_f2rwo.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpec_f2rwo.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpec_f2rwo.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpec_f2rwo.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    s = split(txt, ' ')\n    if length(s) > 1\n        return s\n \
    \   else\n        s = split(txt, ',')\n        if length(s) > 1\n            return\
    \ s\n        else\n            return filter(c -> c in 'abcdefghijklmnopqrstuvwxyz',\
    \ txt)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmppy74vn60.jl:19\nin expression\
    \ starting at /tmp/tmppy74vn60.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else \n        # return\
    \ sum(ifelse.(Int.(txt) .<= 14, 1, 0))\n        # return length(filter(c -> c\
    \ <= 'm', txt))\n        # return count(x -> x <= 'm', txt)\n        return length(txt)\
    \ \xF7 2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc74qb8ti.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpc74qb8ti.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpc74qb8ti.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpc74qb8ti.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpc74qb8ti.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpc74qb8ti.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpc74qb8ti.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpc74qb8ti.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpc74qb8ti.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ! occursin(r'\\s', txt)\n        if ! occursin(',', txt)\n \
    \           n = 0\n            for c in txt\n                if (n + ord(c) -\
    \ 97) % 2 == 1\n                    n += 1\n                end\n            end\n\
    \            return n\n        else\n            return split(txt, ',')\n    \
    \    end\n    else\n        return split(txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqve239tt.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ r not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqve239tt.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqve239tt.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqve239tt.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqve239tt.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: r not\
    \ defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqve239tt.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqve239tt.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqve239tt.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqve239tt.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: r\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqve239tt.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqve239tt.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqve239tt.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqve239tt.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ r not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqve239tt.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqve239tt.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    ws = isspace(txt)\n    if all(ws)\n        return length(txt)\n\
    \    elseif all(!ws)\n        return length(filter(x -> x == ',', txt))\n    else\n\
    \        split(txt, r\"\\s+\")\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp54esudpw.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching isspace(::String)\n  Closest candidates are:\n    isspace(!Matched::AbstractChar)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:471\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp54esudpw.jl:11\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp54esudpw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp54esudpw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp54esudpw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching isspace(::String)\n  Closest candidates are:\n    isspace(!Matched::AbstractChar)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:471\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp54esudpw.jl:11\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp54esudpw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp54esudpw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp54esudpw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching isspace(::String)\n  Closest candidates are:\n    isspace(!Matched::AbstractChar)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/unicode.jl:471\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp54esudpw.jl:11\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp54esudpw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespace_idx = findall(txt .== ' ')\n    if !isempty(whitespace_idx)\n\
    \        return [txt[1:whitespace_idx[1]-1] ; txt[whitespace_idx[1]+1:end]]\n\
    \    else\n        comma_idx = findall(txt .== ',')\n        if !isempty(comma_idx)\n\
    \            return [txt[1:comma_idx[1]-1] ; txt[comma_idx[1]+1:end]]\n      \
    \  else\n            return length(lowercase(txt))\n        end\n    end\nend\n\
    \"\"\"\n    Given two integers, return a list of their sum, difference, product,\
    \ and quotient.\n    Examples\n    math_1(1, 2) \u279E [3, -1, 2, 0.5]\n    math_1(10,\
    \ 5) \u279E [15, 5, 50, 2]\n    math_1(2, 10) \u279E [12, -8, 20, 0.2]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpv3a9icvc.jl:23\nin expression starting at /tmp/tmpv3a9icvc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    out = split(txt, \" \")\n    if length(out) == 1\n        out =\
    \ split(txt, \",\")\n        if length(out) == 1\n            out = sum(map(isodd,\
    \ map(x -> Int(x) - 97, txt)))\n        end\n    end\n    return out\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpteeaqy5a.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpteeaqy5a.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpteeaqy5a.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpteeaqy5a.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpteeaqy5a.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpteeaqy5a.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpteeaqy5a.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpteeaqy5a.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpteeaqy5a.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpteeaqy5a.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findfirst(txt, ' ') != nothing\n        return split(txt, '\
    \ ')\n    elseif findfirst(txt, ',') != nothing\n        return split(txt, ',')\n\
    \    else\n        let odd = 0\n        for i = 1:length(txt)\n            if\
    \ islower(txt[i])\n                if (i % 2) == 1\n                    odd +=\
    \ 1\n                end\n            end\n        end\n        return odd\n \
    \   end\nend\n# split_words(\"abcdef\") == 3\n# split_words(\"Hello,world!\")\n\
    # split_words(\"Hello world!\")\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphgu_nwey.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphgu_nwey.jl:1\n\
    in expression starting at /tmp/tmphgu_nwey.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    white_space_idx = findfirst(c -> c == ' ', txt)\n    if white_space_idx\
    \ == nothing\n        comma_idx = findfirst(c -> c == ',', txt)\n        if comma_idx\
    \ == nothing\n            return count(x -> (x <= 'z' && x >= 'a') && x % 2 ==\
    \ 1, map(c -> Int(c), txt))\n        else\n            return [txt[1:comma_idx-1],\
    \ txt[comma_idx+1:end]]\n        end\n    else\n        return [txt[1:white_space_idx-1],\
    \ txt[white_space_idx+1:end]]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyvhnvylh.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"abcdef\") == 3\n  ArgumentError: map(f, s::AbstractString)\
    \ requires f to return AbstractChar; try map(f, collect(s)) or a comprehension\
    \ instead\n  Stacktrace:\n   [1] map(f::var\"#4#8\", s::String)\n     @ Base ./strings/basic.jl:611\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmpyvhnvylh.jl:15\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyvhnvylh.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyvhnvylh.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyvhnvylh.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"aaabb\") == 2\n  ArgumentError: map(f, s::AbstractString) requires\
    \ f to return AbstractChar; try map(f, collect(s)) or a comprehension instead\n\
    \  Stacktrace:\n   [1] map(f::var\"#4#8\", s::String)\n     @ Base ./strings/basic.jl:611\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmpyvhnvylh.jl:15\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyvhnvylh.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyvhnvylh.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpyvhnvylh.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"aaaBb\") == 1\n  ArgumentError: map(f, s::AbstractString) requires\
    \ f to return AbstractChar; try map(f, collect(s)) or a comprehension instead\n\
    \  Stacktrace:\n   [1] map(f::var\"#4#8\", s::String)\n     @ Base ./strings/basic.jl:611\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmpyvhnvylh.jl:15\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyvhnvylh.jl:34 [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyvhnvylh.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \"\"\"\n        extract the text into string \n        try to split\
    \ the text\n        check if the text can be split by , or whitespace\n      \
    \  \"\"\"\n    # get the words to split\n    words = split(txt, \",\")\n    if\
    \ length(words) == 1 \n        words = split(txt, \" \")\n        if length(words)\
    \ == 1\n            # count odd letters\n            cnt = 0\n            for\
    \ i = 1:length(txt)\n                letter = lowercase(txt[i])\n            \
    \    if ord(letter) % 2 == 1\n                    cnt += 1\n                end\n\
    \            end\n            return cnt\n        end\n    end\n    return words\n\
    end\n \n \n \n\"\"\"\n    Challenge\n    Create a function that takes a string\
    \ and returns the number of\n    vowels (AEIOUY) in a string.\n    Examples\n\
    \    num_vowels(\"Yo, write some code already!\") == 5\n    num_vowels(\"Hey!\
    \ I don't bite, promise.\") == 7\n    num_vowels(\"Everything you can imagine\
    \ is real.\") == 10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpfhfm_d82.jl:37\nin expression starting at /tmp/tmpfhfm_d82.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    l = split(txt)\n    if length(l) != 0 \n        return l\n    else\n\
    \        l = split(txt, ',')\n        if length(l) != 0\n            return l\n\
    \        else\n            return count_odd_letters(txt)\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppsiw094j.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppsiw094j.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsiw094j.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsiw094j.jl:27\ntest set:\
    \ Error During Test at /tmp/tmppsiw094j.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppsiw094j.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsiw094j.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsiw094j.jl:27\ntest set:\
    \ Error During Test at /tmp/tmppsiw094j.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppsiw094j.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        split(txt, \" \")\n    elseif\
    \ contains(txt, \",\")\n        split(txt, \",\")\n    else\n        sum(i->Int(i\
    \ == 'a')+(i == 'c')+(i == 'e')+(i == 'g')+(i == 'i')+(i == 'k')+(i == 'm')+(i\
    \ == 'o')+(i == 'q')+(i == 's')+(i == 'u')+(i == 'w')+(i == 'y'), txt)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7avwmp9u.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp7avwmp9u.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7avwmp9u.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7avwmp9u.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp7avwmp9u.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp7avwmp9u.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp7avwmp9u.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7avwmp9u.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp7avwmp9u.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    s = split(txt)\n    if length(s) == 1\n        return count_odd(txt)\n\
    \    else\n        return s\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_7vsasce.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_7vsasce.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7vsasce.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7vsasce.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp_7vsasce.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: count_odd\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_7vsasce.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7vsasce.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7vsasce.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp_7vsasce.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_7vsasce.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_7vsasce.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt) \n    if length(words) == 1\n        return\
    \ sum(ord(c)%2 == 1 for c in txt if 'a' <= c <= 'z')\n    end\n    return words\n\
    end\n    \n    \n@test split_words(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\n@test split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n@test split_words(\"\
    abcdef\") == 3\n@test split_words(\"a\") == 1\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpzfk79o21.jl:19\nin expression starting at /tmp/tmpzfk79o21.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    p = r\"[\\s,]+\" # r\"\\w+\" | r\"[^\\w\\s]+\" | r\"[\\s,]+\"\
    \n    all_words = split(txt, p, keep=false)\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzifnfit.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzifnfit.jl:1\n\
    in expression starting at /tmp/tmpxzifnfit.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        count = 0\n        for\
    \ j in txt\n            if ord(j) % 2 == 1\n                count += 1\n     \
    \       end\n        end\n        return count\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpewroq0k_.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpewroq0k_.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpewroq0k_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpewroq0k_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpewroq0k_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpewroq0k_.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpewroq0k_.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpewroq0k_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpewroq0k_.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewroq0k_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    v = regexp(r\"\\s\", txt)\n    w = regexp(r\",\", txt)\n    if\
    \ !isempty(v)\n        return split(txt,r\"\\s\")\n    elseif !isempty(w)\n  \
    \      return split(txt,r\",\")\n    else\n        n = 0\n        for (i,c) in\
    \ enumerate(txt)\n            if i % 2 == 0 && c == lowercase(c)\n           \
    \     n += 1\n            end\n        end\n        return n\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp39jozu_v.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp39jozu_v.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp39jozu_v.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp39jozu_v.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp39jozu_v.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: regexp\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp39jozu_v.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp39jozu_v.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp39jozu_v.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp39jozu_v.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: regexp\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp39jozu_v.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp39jozu_v.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp39jozu_v.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp39jozu_v.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ regexp not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Mai"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp39jozu_v.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt .|> lowercase\n    no_split = sum(c->ord(c)-ord('a')<=25&&ord(c)-ord('a')>=0&&(ord(c)-ord('a'))%2==1,\
    \ txt)\n    return map(x->x[1], split(txt, r\"\\s+\"))  || map(x->x[1], split(txt,\
    \ r\",\")) || no_split\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsyknep7a.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ ord not defined\n  Stacktrace:\n    [1] (::var\"#1#4\")(c::Char)\n      @ Main\
    \ /tmp/tmpsyknep7a.jl:12\n    [2] MappingRF\n      @ ./reduce.jl:95 [inlined]\n\
    \    [3] _foldl_impl(op::Base.MappingRF{var\"#1#4\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ init::Base._InitialValue, itr::String)\n      @ Base ./reduce.jl:58\n    [4]\
    \ foldl_impl\n      @ ./reduce.jl:48 [inlined]\n    [5] mapfoldl_impl\n      @\
    \ ./reduce.jl:44 [inlined]\n    [6] #mapfoldl#244\n      @ ./reduce.jl:162 [inlined]\n\
    \    [7] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n    [8] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n    [9] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [10] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [11] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [12] split_words(txt::String)\n      @\
    \ Main /tmp/tmpsyknep7a.jl:12\n   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [14] macro expansion\n      @ /tmp/tmpsyknep7a.jl:20 [inlined]\n\
    \   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [16] top-level scope\n      @ /tmp/tmpsyknep7a.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsyknep7a.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: ord\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#4\")(c::Char)\n      @ Main /tmp/tmpsyknep7a.jl:12\n\
    \    [2] MappingRF\n      @ ./reduce.jl:95 [inlined]\n    [3] _foldl_impl(op::Base.MappingRF{var\"\
    #1#4\", Base.BottomRF{typeof(Base.add_sum)}}, init::Base._InitialValue, itr::String)\n\
    \      @ Base ./reduce.jl:58\n    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n\
    \    [5] mapfoldl_impl\n      @ ./reduce.jl:44 [inlined]\n    [6] #mapfoldl#244\n\
    \      @ ./reduce.jl:162 [inlined]\n    [7] mapfoldl\n      @ ./reduce.jl:162\
    \ [inlined]\n    [8] #mapreduce#248\n      @ ./reduce.jl:289 [inlined]\n    [9]\
    \ mapreduce"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsyknep7a.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      let num = 0\n        for c in txt\n            if islower(c) && (ord(c)\
    \ - ord('a')) % 2 == 1\n                num += 1\n            end\n        end\n\
    \        return num\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm300xwy3.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm300xwy3.jl:1\n\
    in expression starting at /tmp/tmpm300xwy3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    str_list = collect(split(txt, r\"\\s+|,|\"))\n    if length(str_list)\
    \ == 1\n        odd_lowercase_count = 0\n        for char in str_list[1]\n   \
    \         if islower(char) && !iseven(ord(char) - 96)\n                odd_lowercase_count\
    \ += 1\n            end\n        end\n        return odd_lowercase_count\n   \
    \ else\n        return str_list\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwipqrbsh.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwipqrbsh.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwipqrbsh.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwipqrbsh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpwipqrbsh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwipqrbsh.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwipqrbsh.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwipqrbsh.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpwipqrbsh.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwipqrbsh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) != 0\n        return words\n\
    \    else\n        lst = split(txt, \",\")\n        if length(lst) != 0\n    \
    \        return lst\n        else\n            return sum(1 for c in txt if txt[c]\
    \ in 'abcdefghijklmnopqrstuvwxyz' && c % 2 == 1)\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzjehcf76.jl:19\nin expression\
    \ starting at /tmp/tmpzjehcf76.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, \" \")\n    elseif ','\
    \ in txt\n        return split(txt, \",\")\n    else\n        nums = [ord(x) -\
    \ ord('a') for x in txt]\n        return sum(nums)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiyzpkh_d.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpiyzpkh_d.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiyzpkh_d.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiyzpkh_d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpiyzpkh_d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpiyzpkh_d.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiyzpkh_d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiyzpkh_d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpiyzpkh_d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiyzpkh_d.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = lowercase(txt)\n    chars_list = collect(txt)\n    if any(c\
    \ in whitespace for c in chars_list)\n        return split(txt, r\"\\s+\")\n \
    \   elseif any(c in punctuation for c in chars_list)\n        return split(txt,\
    \ r\"\\p+\")\n    else\n        x = findall(r\"([a-z])\\1+\", txt)\n        return\
    \ length(x)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: PCRE compilation error: malformed \\P or \\p sequence\
    \ at offset 3\nStacktrace:\n  [1] error(s::String)\n    @ Base ./error.jl:33\n\
    \  [2] compile(pattern::String, options::UInt32)\n    @ Base.PCRE ./pcre.jl:155\n\
    \  [3] compile(regex::Regex)\n    @ Base ./regex.jl:82\n  [4] Regex(pattern::String,\
    \ compile_options::UInt32, match_options::UInt32)\n    @ Base ./regex.jl:47\n\
    \  [5] Regex(pattern::String)\n    @ Base ./regex.jl:70\n  [6] var\"@r_str\"(__source__::LineNumberNode,\
    \ __module__::Module, pattern::Any, flags::Vararg{Any})\n    @ Base ./regex.jl:119\n\
    \  [7] #macroexpand#51\n    @ ./expr.jl:115 [inlined]\n  [8] macroexpand\n   \
    \ @ ./expr.jl:114 [inlined]\n  [9] docm(source::LineNumberNode, mod::Module, meta::Any,\
    \ ex::Any, define::Bool) (repeats 2 times)\n    @ Base.Docs ./docs/Docs.jl:537\n\
    \ [10] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n    @\
    \ Core ./boot.jl:517\nin expression starting at /tmp/tmpt352fd1s.jl:1\nin expression\
    \ starting at /tmp/tmpt352fd1s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if match(r\"\\w+\", txt) isa Match\n        return split(txt)\n\
    \    elseif match(r\"[A-Za-z]+\", txt) isa Match\n        return length(filter(c\
    \ -> isodd(Int(c) - Int('a')), txt))\n    else\n        return 0\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0kkm88ei.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ Match not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp0kkm88ei.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0kkm88ei.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0kkm88ei.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0kkm88ei.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: Match\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0kkm88ei.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0kkm88ei.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0kkm88ei.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0kkm88ei.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: Match\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0kkm88ei.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0kkm88ei.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0kkm88ei.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0kkm88ei.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ Match not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0kkm88ei.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        sum(occursin(txt,\
    \ l) for l in 'abcdefghijklmnopqrstuvwxyz'[1:2:end])\n    elseif !occursin(\"\
    \ \", txt)\n        split(txt, \",\")\n    else\n        split(txt, \" \")\n \
    \   end\nend\nsplit_words(\"one, two, three\")\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpg_fv68zv.jl:12\nin expression\
    \ starting at /tmp/tmpg_fv68zv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = split(txt, [';', '\\n', ' '])\n    for i in 1:length(txt)\n\
    \        if length(txt[i]) == 0\n            deleteat!(txt, i)\n        end\n\
    \    end\n    if length(txt) > 1\n        return txt\n    else\n        sum =\
    \ 0\n        for i in txt[1]\n            if (ord(i) - ord('a')) % 2 == 1\n  \
    \              sum += 1\n            end\n        end\n        return sum\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmejhm0a3.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmejhm0a3.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmejhm0a3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmejhm0a3.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmejhm0a3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: ord\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmejhm0a3.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmejhm0a3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmejhm0a3.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmejhm0a3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmejhm0a3.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmejhm0a3.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        vals =\
    \ []\n        for i in 1:length(txt)\n            push!(vals, (Int(txt[i])-96)%2)\n\
    \        end\n        return sum(vals)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwb0eq6zz.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpwb0eq6zz.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwb0eq6zz.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwb0eq6zz.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpwb0eq6zz.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpwb0eq6zz.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwb0eq6zz.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwb0eq6zz.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpwb0eq6zz.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else \n        return sum(i -> isodd(ord(i)-ord('a')),\
    \  collect(txt))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbyzv72iw.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbyzv72iw.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbyzv72iw.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbyzv72iw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbyzv72iw.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbyzv72iw.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbyzv72iw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbyzv72iw.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbyzv72iw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbyzv72iw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    result = filter(x ->  !(x == ' '), split(txt, \" \"))\n \
    \   if length(result) == 0\n        result = filter(x ->  !(x == ','), split(txt,\
    \ \",\"))\n        if length(result) == 0\n            result = length(filter(x\
    \ -> islower(x) && !(x == 'a') && !(x == 'c') && !(x == 'e') && !(x == 'g') &&\
    \ !(x == 'i') && !(x == 'k') && !(x == 'm') && !(x == 'o') && !(x == 'q') && !(x\
    \ == 's') && !(x == 'u') && !(x == 'w') && !(x == 'y'), txt))\n        end\n \
    \   end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5qjxvypm.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5qjxvypm.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qjxvypm.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qjxvypm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5qjxvypm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5qjxvypm.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qjxvypm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qjxvypm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5qjxvypm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qjxvypm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findfirst(txt, ' ') != nothing \n        return split(txt, '\
    \ ')\n    elseif findfirst(txt, ',') != nothing\n        return split(txt, ',')\n\
    \    else\n        num = 0\n        for i in txt\n            if Int(ord(i) -\
    \ ord('a')) % 2 == 1\n                num += 1\n            end\n        end\n\
    \        return num\n    end\nend\nprintln(split_words(\"ciao, mondo\"))\nprintln(split_words(\"\
    Hello world!\"))\nprintln(split_words(\"abcdef\"))\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching findfirst(::String, ::Char)\n\
    Closest candidates are:\n  findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \  findfirst(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \  findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    Stacktrace:\n [1] split_words(txt::String)\n   @ Main /tmp/tmp7zampbpx.jl:11\n\
    \ [2] top-level scope\n   @ /tmp/tmp7zampbpx.jl:25\nin expression starting at\
    \ /tmp/tmp7zampbpx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      num = 0\n        for c in txt\n            if \"a\" <= c <= \"z\" && ord(c)\
    \ % 2 == 1\n                num += 1\n            end\n        end\n        return\
    \ num\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp96sz6yik.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp96sz6yik.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96sz6yik.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96sz6yik.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp96sz6yik.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp96sz6yik.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96sz6yik.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96sz6yik.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp96sz6yik.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp96sz6yik.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt) \n        split(txt, ' ')\n    elseif occursin(',',\
    \ txt)\n        split(txt, ',')\n    else\n        filter(x -> isodd(x), map(x\
    \ -> ord(x) - ord('a'), txt)) |> length\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0thpkt61.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0thpkt61.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0thpkt61.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0thpkt61.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0thpkt61.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0thpkt61.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0thpkt61.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0thpkt61.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0thpkt61.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0thpkt61.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if count(x -> x in ' ' , txt) > 0\n        return split(txt)\n\
    \    elseif count(x -> x in ',' , txt) > 0\n        return split(txt, \",\")\n\
    \    else\n        return sum( (i % 2 == 1) for i in lowercase(txt) .- ord('a')\
    \ )\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2avcoluq.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2avcoluq.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2avcoluq.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2avcoluq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp2avcoluq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2avcoluq.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2avcoluq.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2avcoluq.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp2avcoluq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2avcoluq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if search(r\"[^a-z,\\s]\", txt) != nothing\n        return\
    \ split(txt, r\"(?<=\\S)[^a-z,\\s](?=\\S)|(?<=\\S)[^a-z,\\s](?=\\S)\")\n    elseif\
    \ split(txt, ' ') != [\"\"]\n        return split(txt, ' ')\n    elseif split(txt,\
    \ ',') != [\"\"]\n        return split(txt, ',')\n    else\n        return sum(i->isodd(i),[Int(i)\
    \ for i in txt])\n    end\n    \nend\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptuw1jn86.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmptuw1jn86.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptuw1jn86.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptuw1jn86.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptuw1jn86.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptuw1jn86.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptuw1jn86.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptuw1jn86.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptuw1jn86.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: search\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptuw1jn86.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptuw1jn86.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptuw1jn86.jl:28\ntest set:\
    \ Error During Test at /tmp/tmptuw1jn86.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ search not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Mai"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptuw1jn86.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt_split = split(txt, r\"\\s\")\n    if isempty(txt_split)\n \
    \       txt_split = split(txt, \",\")\n        if isempty(txt_split)\n       \
    \     count = 0\n            for c in txt\n                if ord(c) - 97 % 2\
    \ == 1\n                    count += 1\n                end\n            end\n\
    \            return count\n        end\n    end\n    return txt_split\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppav_6clw.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppav_6clw.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppav_6clw.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppav_6clw.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppav_6clw.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppav_6clw.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppav_6clw.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppav_6clw.jl:30\ntest set:\
    \ Error During Test at /tmp/tmppav_6clw.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppav_6clw.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    if length(words) == 1\n        words\
    \ = split(txt, \",\")\n        if length(words) == 1\n            return sum(isodd.(lowercase(txt)))\n\
    \        end\n    end\n    return words\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi_mj43d4.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpi_mj43d4.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi_mj43d4.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi_mj43d4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpi_mj43d4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpi_mj43d4.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi_mj43d4.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi_mj43d4.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpi_mj43d4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_mj43d4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # Your Code Here\n    if find(txt, \" \") == nothing\n        if\
    \ find(txt, \",\") == nothing\n            return length(filter(x -> (x - 96)\
    \ % 2 == 1, [ord(x) for x in lowercase(txt)]))\n        else\n            return\
    \ split(txt, \",\")\n        end\n    else\n        return split(txt, \" \")\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmposd1ofgx.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ find not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmposd1ofgx.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmposd1ofgx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmposd1ofgx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmposd1ofgx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmposd1ofgx.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmposd1ofgx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmposd1ofgx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmposd1ofgx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmposd1ofgx.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmposd1ofgx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmposd1ofgx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmposd1ofgx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ find not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmposd1ofgx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, \" \")\n    elseif\
    \ contains(txt, ',')\n        return split(txt, \",\")\n    else\n        letter_count\
    \ = 0\n        for letter in txt\n            if(Int(letter) - 97) % 2 == 1\n\
    \                letter_count += 1\n            end\n        end\n        return\
    \ letter_count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5u7pmn8l.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5u7pmn8l.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5u7pmn8l.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5u7pmn8l.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp5u7pmn8l.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5u7pmn8l.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5u7pmn8l.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5u7pmn8l.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp5u7pmn8l.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5u7pmn8l.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt # if there are spaces\n        split_words = split(txt,\
    \ \" \")\n    elseif ',' in txt # if there are commas\n        split_words = split(txt,\
    \ \",\")\n    else # if there are not any spaces or commas\n        letters =\
    \ split(txt, \"\")\n        num_odd = 0\n        for letter in letters\n     \
    \       letter_pos = Int64(ord(letter) - 97)\n            if letter_pos % 2 ==\
    \ 1\n                num_odd += 1\n            end\n        end\n        split_words\
    \ = num_odd\n    end\n    return split_words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqh49r9db.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqh49r9db.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqh49r9db.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqh49r9db.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqh49r9db.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqh49r9db.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqh49r9db.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqh49r9db.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpqh49r9db.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqh49r9db.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        letters\
    \ = collect(letters(:lower))\n        odd_letters = letters[1:2:end]\n       \
    \ return sum(countin(txt, odd_letters))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpimi_61lk.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpimi_61lk.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimi_61lk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimi_61lk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpimi_61lk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpimi_61lk.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimi_61lk.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimi_61lk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpimi_61lk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpimi_61lk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt \n        return split(txt, ' ')\n    elseif ','\
    \ in txt\n        return split(txt, ',')\n    else\n        c = 0\n        for\
    \ i = 'a':'z'\n            if (ord(i) % 2) == 1 \n                c += count(txt,\
    \ i)\n            end\n        end\n        return c\n    end\nend\n@test split_words(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n@test split_words(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"]\n@test split_words(\"abcdef\") == 3\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpmpvkju7a.jl:25\nin expression starting at /tmp/tmpmpvkju7a.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    inds = findall(txt, r\"[,\\s]\")\n    if isempty(inds) #no comma,\
    \ no whitespace\n        return sum(count_even_odd(txt))\n    elseif length(inds)\
    \ == 1\n        if inds[1] == 1\n            return split_words(string(txt[inds[1]+1:end]))\n\
    \        elseif inds[1] == length(txt)\n            return split_words(string(txt[1:inds[1]-1]))\n\
    \        else\n            return [txt[1:inds[1]-1], txt[inds[1]+1:end]]\n   \
    \     end\n    else\n        if inds[1] == 1\n            return [split_words(string(txt[inds[1]+1:inds[2]-1])),\
    \ txt[inds[2]+1:end]]\n        elseif inds[end] == length(txt)\n            return\
    \ [txt[1:inds[1]-1], split_words(string(txt[inds[1]+1:inds[end]-1]))]\n      \
    \  else\n            return [txt[1:inds[1]-1], split_words(string(txt[inds[1]+1:inds[end]-1])),\
    \ txt[inds[end]+1:end]]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfk7_vzd6.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findall(::String, ::Regex)\n  Closest candidates are:\n \
    \   findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n    findall(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n    findall(::String,\
    \ !Matched::LibGit2.GitIndex) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfk7_vzd6.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfk7_vzd6.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfk7_vzd6.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfk7_vzd6.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findall(::String, ::Regex)\n  Closest candidates are:\n    findall(::Union{AbstractPattern,\
    \ AbstractString}, !Matched::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    findall(::String, !Matched::LibGit2.GitIndex) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfk7_vzd6.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfk7_vzd6.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfk7_vzd6.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split_txt = split(txt, \" \")\n    if length(split_txt) > 1\n \
    \       return split_txt\n    else\n        split_txt = split(txt, \",\")\n  \
    \      if length(split_txt) > 1\n            return split_txt\n        else\n\
    \            # return number of lowercase letters with odd order\n           \
    \ split_txt = filter(isalpha, txt)\n            split_txt = filter(islower, split_txt)\n\
    \            return length(split_txt)\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpad13ct57.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpad13ct57.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpad13ct57.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad13ct57.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpad13ct57.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpad13ct57.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpad13ct57.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad13ct57.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpad13ct57.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpad13ct57.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0\n        return 0\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplql1jacd.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplql1jacd.jl:1\n\
    in expression starting at /tmp/tmplql1jacd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        cnt =\
    \ 0\n        for i in 1:length(txt)\n            if i % 2 == 1\n             \
    \   if lowercase(txt[i]) == txt[i]\n                    cnt += 1\n           \
    \     end\n            end\n        end\n        return cnt\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2gquw7ac.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp2gquw7ac.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2gquw7ac.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2gquw7ac.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp2gquw7ac.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp2gquw7ac.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp2gquw7ac.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2gquw7ac.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp2gquw7ac.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) > 2 \n        if findfirst(txt, \" \") != 0 \n \
    \           return split(txt, \" \")\n        elseif findfirst(txt, \",\") !=\
    \ 0 \n            return split(txt, \",\")\n        else \n            count =\
    \ 0 \n            for i in txt \n                if count != 0 && count%2 == 0\
    \ \n                    count += 1 \n                else \n                 \
    \   count += 1 \n                end \n            end \n            return count\
    \ \n        end \n    else \n        return 0 \n    end \nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptddl70f7.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptddl70f7.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptddl70f7.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptddl70f7.jl:35\ntest set:\
    \ Error During Test at /tmp/tmptddl70f7.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptddl70f7.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptddl70f7.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptddl70f7.jl:35\ntest set:\
    \ Error During Test at /tmp/tmptddl70f7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptddl70f7.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        res = split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        res = split(txt, ',')\n    else\n        res = length(collect(a->a\
    \ in \"acegikmoqsuwy\", eachindex(txt)))\n    end\n    return res\nend\n\"\"\"\
    \n    #### Problem 2 - Total volume\n    \"\"\"\n    Given a list of boxes containing\
    \ triples of (length, width, height) return the total volume of all boxes \n \
    \   Examples\n    boxes = [(2,3,4), (10,12,11), (1,1,1)] # Total volume = 409\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5toskqz.jl:23\nin expression starting at\
    \ /tmp/tmpp5toskqz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findfirst(iswhitespace, txt) == nothing \n        if findfirst(isequal(','))\
    \ == nothing \n            return count(i -> isodd(i), [ord(c) - ord('a') for\
    \ c in txt])\n        else \n            return split(txt, ',')\n        end\n\
    \    else \n        return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5l6x3j0o.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ iswhitespace not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n \
    \    @ Main /tmp/tmp5l6x3j0o.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5l6x3j0o.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5l6x3j0o.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5l6x3j0o.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: iswhitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5l6x3j0o.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5l6x3j0o.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5l6x3j0o.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5l6x3j0o.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: iswhitespace\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5l6x3j0o.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5l6x3j0o.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5l6x3j0o.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5l6x3j0o.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ iswhitespace not defined\n  Stacktrace:\n   [1] split_words"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5l6x3j0o.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if match(r\"[a-zA-Z\\s]+\", txt) !== nothing\n        return split(txt)\n\
    \    elseif match(r\"[a-zA-Z,]+\", txt) !== nothing\n        return split(txt,\
    \ \",\")\n    elseif match(r\"[a-zA-Z]+\", txt) !== nothing\n        length(findall(x\
    \ -> isodd(Int(x)), collect(txt)))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4pojevxr.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp4pojevxr.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4pojevxr.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4pojevxr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp4pojevxr.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp4pojevxr.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4pojevxr.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4pojevxr.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp4pojevxr.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4pojevxr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    @match txt begin\n    s\"$x $y\" => [x, y]\n    s\"$x,$y\" => [x,\
    \ y]\n    s\"$x\"    => length(findall(r\"[[:lower:]]\", x))%2==1 ? 1 : 0\n  \
    \  end\nend\n@testset \"Split Words Tests\" begin\n    @test split_words(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"]\n    @test split_words(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"]\n    @test split_words(\"abcdef\") == 3\n    @test\
    \ split_words(\"abcdefg\") == 0\n    @test split_words(\"Hello,world\") == [\"\
    Hello\", \"world\"]\n    @test split_words(\"Hello world,abcdef\") == [\"Hello\"\
    , \"world\", \"abcdef\"]\n    @test split_words(\"Hello world,abcdefg\") == [\"\
    Hello\", \"world\", \"abcdefg\"]\n    @test split_words(\"Hello,world,abcdef\"\
    ) == [\"Hello\", \"world\", \"abcdef\"]\n    @test split_words(\"Hello,world,abcdefg\"\
    ) == [\"Hello\", \"world\", \"abcdefg\"]\n    @test split_words(\"def\") == 1\n\
    \    @test split_words(\"abcdefgh\") == 0\n    @test split_words(\"abcde\") ==\
    \ 3\n    @test split_words(\"abcd\") == 1\n    @test split_words(\"\") == 0\n\
    \    @test split_words(\"Hello,world,a\") == [\"Hello\", \"world\", \"a\"]\n \
    \   @test split_words(\"Hello,world,a,\") == [\"Hello\", \"world\", \"a\"]\n \
    \   @test split_words(\"Hello,world,a,def\") == [\"Hello\", \"world\", \"a\",\
    \ \"def\"]\n    @test split_words(\"Hello,world,a,defg\") == [\"Hello\", \"world\"\
    , \"a\", \"defg\"]\n    @test split_words(\"Hello,world,a,def,g\") == [\"Hello\"\
    , \"world\", \"a\", \"def\", \"g\"]\n    @test split_words(\"Hello,world,a,defg,g\"\
    ) == [\"Hello\", \"world\", \"a\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @match not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpkjmbbr5q.jl:1\nin\
    \ expression starting at /tmp/tmpkjmbbr5q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespaces = split(txt, \" \")\n    if length(whitespaces) > 1\n\
    \        return whitespaces\n    else\n        commas = split(txt, \",\")\n  \
    \      if length(commas) > 1\n            return commas\n        else\n      \
    \      let chars = [x for x in txt]\n            let ords = [ord(x) for x in chars]\n\
    \            let lower_ords = [x for x in ords if x >= 97 && x <= 122]\n     \
    \       let odd_lower_ords = [x for x in lower_ords if x % 2 == 1]\n         \
    \   return length(odd_lower_ords)\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"let\" at /tmp/tmp673x24ks.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp673x24ks.jl:1\n\
    in expression starting at /tmp/tmp673x24ks.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt2 = map(x -> x isa '\\n' ? ' ' : x, txt)\n    match = match(r\"\
    (\\w+|,|\\s)+\", txt2)\n    if match.match == \"\"\n        return 0\n    elseif\
    \ match.match == txt2\n        s = split(txt2, match(\"\\s\"))\n        if length(s)\
    \ == 1\n            return length(filter(x -> islower(x), txt2))\n        else\n\
    \            return s\n        end\n    else\n        return length(filter(x ->\
    \ islower(x), txt2))\n    end\nend\n@test split_words(\"abcdef\") == 3\n@test\
    \ split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n@test split_words(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n@test split_words(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"]\n@test split_words(\"\") == 0\n@test split_words(\"\
    The quick brown fox jumps over the lazy dog\") == [\"The\", \"quick\", \"brown\"\
    , \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n@test split_words(\"\
    It was the best of times, it was the worst of times, it was the age of wisdom,\
    \ it was the age of foolishness, it was the epoch of belief, it was the epoch\
    \ of incredulity, it was the season of Light, it was the season of Darkness, it\
    \ was the spring of hope, it was the winter of despair, we had everything before\
    \ us, we had nothing before us, we were all going direct to Heaven, we were all\
    \ going direct the other way \u2013 in short, the period was so far like the present\
    \ period, that some of its noisiest authorities insisted on its being received,\
    \ for good or for evil, in the superlative degree of comparison only.\") == \n\
    \    [\"It\", \"was\", \"the\", \"best\", \"of\", \"times,\", \"it\", \"was\"\
    , \"the\", \"worst\", \"of\", \"times,\", \"it\", \"was\", \"the\", \"age\", \"\
    of\", \"wisdom,\", \"it\", \"was\", \"the\", \"age\", \"of\", \"foolishness,\"\
    ,\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyc13nwgi.jl:16\nin expression starting at /tmp/tmpyc13nwgi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = lowercase(txt)\n    let \n        split_txt = split(txt,\
    \ ' ')\n        if length(split_txt) == 1\n            split_txt = split(txt,\
    \ ',')\n            if length(split_txt) == 1\n                return sum(i ->\
    \ isodd(i) ? 1 : 0, Int.([ord(c) for c in txt]))\n            end\n        end\n\
    \        return split_txt\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpel46hn68.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpel46hn68.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpel46hn68.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpel46hn68.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpel46hn68.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpel46hn68.jl:20\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpel46hn68.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpel46hn68.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpel46hn68.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    x = split(txt, \" \")\n  \
    \  if length(x) > 1\n        return x\n    else\n        y = split(txt, \",\"\
    )\n        if length(y) > 1\n            return y\n        else\n            len\
    \ = 0\n            for i in txt\n                if !isupper(i) && (ord(i) - ord('a'))\
    \ % 2 == 1\n                    len += 1\n                end\n            end\n\
    \            return len\n        end\n    end\nend\n\"\"\"\n    Given three positive\
    \ integers as arguments, you are to return the sum of the first two arguments\
    \ if the third argument\n    is true, otherwise you should return the difference\
    \ of the first two arguments. However, if the third argument is a\n    string,\
    \ you should return the string repeated the number of times indicated by the first\
    \ two arguments.\n    Examples\n    first_two(10, 5, true) == 15 \n    first_two(10,\
    \ 5, false) == 5 \n    first_two(5, 5, \"Hello\") == \"HelloHelloHelloHelloHello\"\
    \ \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpdwq_zdde.jl:38\nin expression starting at /tmp/tmpdwq_zdde.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt2 = replace(txt, \",\" => \" \")\n    if count(txt2, \" \")\
    \ == 0\n        return count(collect(txt2), y -> y == 'a' || y == 'c' || y ==\
    \ 'e' || y == 'g' || y == 'i' || y == 'k' || y == 'm' || y == 'o' || y == 'q'\
    \ || y == 's' || y == 'u' || y == 'w' || y == 'y')\n    else\n        return split(txt2)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqxlt9q3p.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: no method matching iterate(::var\"#1#2\")\\n  Closest candidates\
    \ are:\\n    iterate(!Matched::Union{LinRange, StepRangeLen}) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\\n    ...\\n  Stacktrace:\\\
    n   [1] _simple_count(pred::Vector{Char}, itr::Function, init::Int64)\\n     @\
    \ Base ./reduce.jl:1205\\n   [2] count(f::Vector{Char}, itr::Function; init::Int64)\\\
    n     @ Base ./reduce.jl:1201\\n   [3] count(f::Vector{Char}, itr::Function)\\\
    n     @ Base ./reduce.jl:1201\\n   [4] split_words(txt::String)\\n     @ Main\
    \ /tmp/tmpqxlt9q3p.jl:13\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpqxlt9q3p.jl:23 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpqxlt9q3p.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpqxlt9q3p.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: no method\
    \ matching iterate(::var\"#1#2\")\\n  Closest candidates are:\\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\\\
    n    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\\n    ...\\n  Stacktrace:\\\
    n   [1] _simple_count(pred::Vector{Char}, itr::Fun"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !isempty(split(txt))\n        return split(txt)\n    elseif\
    \ !isempty(split(txt, \",\"))\n        return split(txt, \",\")\n    else\n  \
    \      odd_index = []\n        for (index, char) in enumerate(txt)\n         \
    \   if index % 2 != 0\n                push!(odd_index, char)\n            end\n\
    \        end\n        return length(odd_index)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_3uaa7lw.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_3uaa7lw.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_3uaa7lw.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_3uaa7lw.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_3uaa7lw.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_3uaa7lw.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_3uaa7lw.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_3uaa7lw.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_3uaa7lw.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_3uaa7lw.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \"\"\"\n    Given a string of words, return a list of words split\
    \ on whitespace, if no whitespaces exists in the text you\n    should split on\
    \ commas ',' if no commas exists you should return the number of lower-case letters\
    \ with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"\
    world!\"]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n\
    \    split_words(\"abcdef\") == 3 \n    \"\"\"\n    txt2=split(txt, \" \")\n \
    \   if(length(txt2) == 1)\n        txt2=split(txt, \",\")\n        if(length(txt2)\
    \ == 1)\n            return countodd(txt)\n        end\n    end\n    return txt2\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcxlpr18t.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpcxlpr18t.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcxlpr18t.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcxlpr18t.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpcxlpr18t.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpcxlpr18t.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcxlpr18t.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcxlpr18t.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpcxlpr18t.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcxlpr18t.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\")\n    if length(words) == 1\n    \
    \    word = words[1]\n        words = split(word, r\"\\W+\")\n        if length(words)\
    \ == 1\n            let odd_letters = 0\n            for (i, letter) in enumerate(words[1])\n\
    \                if i % 2 == 0\n                    let odd_letters += 1\n   \
    \             end\n            end\n            return odd_letters\n        end\n\
    \    end\n    return words\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26k_o7wz.jl:1\nin expression starting at /tmp/tmp26k_o7wz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    a::Int64 = 0\n    b::Int64 = 0\n    c::Int64 = 0\n    d::Int64\
    \ = 0\n    x::Int64 = 0\n    y::Int64 = 0\n    z::Int64 = 0\n    w::Int64 = 0\n\
    \    v::Int64 = 0\n    u::Int64 = 0\n    r::Int64 = 0\n    s::Int64 = 0\n    t::Int64\
    \ = 0\n    p::Int64 = 0\n    q::Int64 = 0\n    m::Int64 = 0\n    n::Int64 = 0\n\
    \    l::Int64 = 0\n    i::Int64 = 0\n    k::Int64 = 0\n    j::Int64 = 0\n    h::Int64\
    \ = 0\n    g::Int64 = 0\n    f::Int64 = 0\n    e::Int64 = 0\n    d::Int64 = 0\n\
    \    c::Int64 = 0\n    b::Int64 = 0\n    g::Int64 = 0\n    for i::Int64 in 1:length(txt)\n\
    \        if txt[i] == 'a'\n            a += 1\n        elseif txt[i] == 'b'\n\
    \            b += 1\n        elseif txt[i] == 'c'\n            c += 1\n      \
    \  elseif txt[i] == 'd'\n            d += 1\n        elseif txt[i] == 'e'\n  \
    \          e += 1\n        elseif txt[i] == 'f'\n            f += 1\n        elseif\
    \ txt[i] == 'g'\n            g += 1\n        elseif txt[i] == 'h'\n          \
    \  h += 1\n        elseif txt[i] == 'i'\n            i += 1\n        elseif txt[i]\
    \ == 'j'\n            j += 1\n        elseif txt[i] == 'k'\n            k += 1\n\
    \        elseif txt[i] == 'l'\n            l += 1\n        elseif txt[i] == 'm'\n\
    \            m += 1\n        elseif txt[i] == 'n'\n            n += 1\n      \
    \  elseif txt[i] == 'o'\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy0zz84a_.jl:1\nin expression starting at /tmp/tmpy0zz84a_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n  split_word = split(txt, r\"\\s+\")\n  if length(split_word) > 1\n\
    \    return split_word\n  else\n    split_word = split(txt, \",\")\n    if length(split_word)\
    \ > 1\n      return split_word\n    else\n      lower_case = sum(sum(Int.(map(Char.islower,\
    \ collect(txt)))) % 2)\n      return lower_case\n    end\n  end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp9mcvtt4.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpp9mcvtt4.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp9mcvtt4.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp9mcvtt4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp9mcvtt4.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpp9mcvtt4.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp9mcvtt4.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp9mcvtt4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp9mcvtt4.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp9mcvtt4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt) || occursin(',', txt)\n        return split(txt,\
    \ r\"[ ,]\")\n    else\n        return count_odd(txt)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9uj3eup9.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9uj3eup9.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9uj3eup9.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9uj3eup9.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp9uj3eup9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9uj3eup9.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9uj3eup9.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9uj3eup9.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp9uj3eup9.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9uj3eup9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        odd_count\
    \ = 0\n        for i in 1:length(txt)\n            a = Int(txt[i]) - 97\n    \
    \        if a % 2 == 1\n                odd_count += 1\n            end\n    \
    \    end\n        return odd_count\n    elseif !occursin(\" \", txt)\n       \
    \ return split(txt, \",\")\n    else\n        return split(txt, \" \")\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfszqux5x.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfszqux5x.jl:23\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfszqux5x.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfszqux5x.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpfszqux5x.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfszqux5x.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfszqux5x.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfszqux5x.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpfszqux5x.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfszqux5x.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0\n        return \"Invalid input\"\n    end\n\
    \    whitespace = findall(r\"\\s\", txt)\n    commas = findall(r\",\", txt)\n\
    \    if length(whitespace) > 0\n        return split(txt, r\"\\s\")\n    elseif\
    \ length(commas) > 0\n        return split(txt, r\",\")\n    else\n        return\
    \ sum(occursin(a, txt) for a in 'abcdefghijklmnopqrstuvwxyz' if a == lowercase(a))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpydj8p_1f.jl:21\nin expression\
    \ starting at /tmp/tmpydj8p_1f.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n   if ' ' in txt\n       return split(txt, \" \")\n   elseif ',' in\
    \ txt\n       return split(txt, \",\")\n   else\n       return count(ASCIItoInt.((collect(txt)).%26\
    \ .== 1))\n   end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkxtlskc7.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkxtlskc7.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkxtlskc7.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkxtlskc7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkxtlskc7.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkxtlskc7.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkxtlskc7.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkxtlskc7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpkxtlskc7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkxtlskc7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        txt = split(txt, \" \")\n    elseif ','\
    \ in txt\n        txt = split(txt, \",\")\n    else\n        txt = count(isodd(ord.(lowercase(txt))\
    \ .- ord('a')))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphk6bqc5k.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphk6bqc5k.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphk6bqc5k.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphk6bqc5k.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphk6bqc5k.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphk6bqc5k.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphk6bqc5k.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphk6bqc5k.jl:23\ntest set:\
    \ Error During Test at /tmp/tmphk6bqc5k.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphk6bqc5k.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    ws = collect(split(txt, \" \"))\n    if length(ws) == 1\n     \
    \   ws = collect(split(txt, \",\"))\n        if length(ws) == 1\n            return\
    \ length(lowercase(filter(c -> c == 'a' || c == 'c' || c == 'e' || c == 'g' ||\
    \ c == 'i' || c == 'k' || c == 'm' || c == 'o' || c == 'q' || c == 's' || c ==\
    \ 'u' || c == 'w' || c == 'y', txt)))\n        end\n    end\n    return ws\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsoyub393.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpsoyub393.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpsoyub393.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsoyub393.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpsoyub393.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpsoyub393.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpsoyub393.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpsoyub393.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpsoyub393.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s\")\n    if length(words) < 2\n      \
    \  words = split(txt, r\",\")\n        if length(words) < 2\n            l_odd\
    \ = []\n            for l in txt\n                if islower(l) && (Int(l)%2 ==\
    \ 1)\n                    push!(l_odd, l)\n                end\n            end\n\
    \            return length(l_odd)\n        end\n    end\n    return words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuyh4_zna.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuyh4_zna.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuyh4_zna.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuyh4_zna.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpuyh4_zna.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuyh4_zna.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuyh4_zna.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuyh4_zna.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpuyh4_zna.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuyh4_zna.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if any(isalpha, txt)\n        if any(isspace, txt)\n          \
    \  return split(txt)\n        elseif any(isequal(','), txt)\n            return\
    \ split(txt, \",\")\n        else\n            split_words(txt) = sum(i % 2 ==\
    \ 1 ? 1 : 0 for i in map(x -> ord(x) - ord('a'), txt))\n        end\n    else\n\
    \        throw(ArgumentError(\"Please provide a string of letters\"))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptfzrnwtl.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @\
    \ Main /tmp/tmptfzrnwtl.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfzrnwtl.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfzrnwtl.jl:27\ntest set:\
    \ Error During Test at /tmp/tmptfzrnwtl.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptfzrnwtl.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfzrnwtl.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfzrnwtl.jl:27\ntest set:\
    \ Error During Test at /tmp/tmptfzrnwtl.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: isalpha\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptfzrnwtl.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfzrnwtl.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfzrnwtl.jl:27\ntest set:\
    \ Error During Test at /tmp/tmptfzrnwtl.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ isalpha not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptfzrnwtl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if (occursin(\" \", txt))\n        return split(txt, \" \")\n \
    \   elseif (occursin(\",\", txt))\n        return split(txt, \",\")\n    else\n\
    \        return sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcrmwe_bt.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpcrmwe_bt.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcrmwe_bt.jl:24 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcrmwe_bt.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpcrmwe_bt.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpcrmwe_bt.jl:14\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpcrmwe_bt.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcrmwe_bt.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpcrmwe_bt.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpcrmwe_bt.jl:21\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    w = split(txt, \" \")\n    if length(w) > 1\n        return w\n\
    \    end\n    w = split(txt, \",\")\n    if length(w) > 1\n        return w\n\
    \    end\n    return length(filter(x -> x == 'a' || x == 'c' || x == 'e' || x\
    \ == 'g' || x == 'i' || x == 'k' || x == 'm' || x == 'o' || x == 'q' || x == 's'\
    \ || x == 'u' || x == 'w' || x == 'y', txt))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt9w8e_da.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpt9w8e_da.jl:13\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt9w8e_da.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt9w8e_da.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpt9w8e_da.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpt9w8e_da.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt9w8e_da.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt9w8e_da.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpt9w8e_da.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) > 1\n        return words\n\
    \    else\n        split_on_commas = split(txt, \",\")\n        if length(split_on_commas)\
    \ > 1\n            return split_on_commas\n        else\n            return count_odd_alphabet(txt)\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc4_w9rgk.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpc4_w9rgk.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc4_w9rgk.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc4_w9rgk.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpc4_w9rgk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpc4_w9rgk.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc4_w9rgk.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc4_w9rgk.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpc4_w9rgk.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4_w9rgk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whites = match(r\"\\s+\", txt)\n    return txt[whites] != \"\"\
    \ ? split(txt, r\"\\s+\") :\n    txt[match(r\",\", txt)] != \"\" ? split(txt,\
    \ r\",\") : sum(isodd.(collect(eachindex(txt)) .* txt .- 'a' .+ 1))\nend\n@assert\
    \ split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n@assert split_words(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n@assert split_words(\"abcdef\") ==\
    \ 3 \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: no method matching getindex(::String, ::RegexMatch)\n\
    Closest candidates are:\n  getindex(::AbstractString, !Matched::Colon) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:189\n\
    \  getindex(::String, !Matched::Int64) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:222\n\
    \  getindex(::AbstractString, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:184\n\
    \  ...\nStacktrace:\n [1] split_words(txt::String)\n   @ Main /tmp/tmptdye0gza.jl:12\n\
    \ [2] top-level scope\n   @ /tmp/tmptdye0gza.jl:15\nin expression starting at\
    \ /tmp/tmptdye0gza.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split = txt |> split(' ')\n    if length(split) == 1\n        split\
    \ = txt |> split(',')\n        if length(split) == 1\n            split = [i for\
    \ i in txt if islower(i)] |> collect |> sort |> countodd |> length\n        end\n\
    \    end\n    return split\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5e2dcn7g.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ split not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmp5e2dcn7g.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5e2dcn7g.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5e2dcn7g.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp5e2dcn7g.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: split\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5e2dcn7g.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5e2dcn7g.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5e2dcn7g.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp5e2dcn7g.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: split\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5e2dcn7g.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5e2dcn7g.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5e2dcn7g.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp5e2dcn7g.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ split not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5e2dcn7g.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        txt = split(txt, \" \")\n    elseif\
    \ occursin(',', txt)\n        txt = split(txt, \",\")\n    else \n        txt\
    \ = length(filter(c -> c in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(c)-Int('a')),\
    \ txt))\n    end\n    return txt\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpd6tvnjcp.jl:16\nin expression\
    \ starting at /tmp/tmpd6tvnjcp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    commas = findall(txt, ',')\n    if commas != []\n        return\
    \ split(txt, ',')\n    else\n        whitespaces = findall(txt, ' ')\n       \
    \ if whitespaces != []\n            return split(txt, ' ')\n        else\n   \
    \         return [n for n in 1:length(txt) if islower(txt[n]) && n % 2 == 1]\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpffo4ogjs.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findall(::String, ::Char)\n  Closest candidates are:\n  \
    \  findall(::Union{AbstractPattern, AbstractString}, !Matched::AbstractString;\
    \ overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n    findall(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n    findall(::String,\
    \ !Matched::LibGit2.GitIndex) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpffo4ogjs.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpffo4ogjs.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpffo4ogjs.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpffo4ogjs.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findall(::String, ::Char)\n  Closest candidates are:\n    findall(::Union{AbstractPattern,\
    \ AbstractString}, !Matched::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    findall(::String, !Matched::LibGit2.GitIndex) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/index.jl:191\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpffo4ogjs.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpffo4ogjs.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpffo4ogjs.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    array = collect(txt)\n    len = length(array)\n    for i in 1:len\n\
    \        if islower(array[i]) \n            if (ord(array[i]) % 2 == 1)\n    \
    \            return 1\n        else\n            return 0\n        end\n    end\n\
    end\n\"\"\"\n    Given a string of words, return the first character of each word\
    \ in the string (whitespace delimited).\n    Examples\n    first_letters(\"Hello\
    \ world!\") \u279E \"Hw!\"\n    first_letters(\"No, you don't understand!\") \u279E\
    \ \"Ny'd!\"\n    first_letters(\"It's a beautiful day!\") \u279E \"Iabd!\"\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4zgqyodg.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4zgqyodg.jl:1\n\
    in expression starting at /tmp/tmp4zgqyodg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    return split(txt, r\"[\\s,]\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfck6o0cw.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfck6o0cw.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfck6o0cw.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfck6o0cw.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpfck6o0cw.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfck6o0cw.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfck6o0cw.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfck6o0cw.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpfck6o0cw.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfck6o0cw.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if count(txt, r\"\\w+\") > 0\n        return split(txt, r\"\\s+\"\
    )\n    elseif count(txt, r\"\\W+\") > 0\n        return split(txt, r\"[,;]\")\n\
    \    else\n        odd_count = 0\n        for i in txt\n            if islower(i)\
    \ && isodd(ord(i) - ord('a'))\n                odd_count += 1\n            end\n\
    \        end\n        return odd_count\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzme1s308.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching iterate(::Regex)\n  Closest candidates are:\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\n    ...\n  Stacktrace:\n\
    \   [1] _simple_count(pred::String, itr::Regex, init::Int64)\n     @ Base ./reduce.jl:1205\n\
    \   [2] count(f::String, itr::Regex; init::Int64)\n     @ Base ./reduce.jl:1201\n\
    \   [3] count(f::String, itr::Regex)\n     @ Base ./reduce.jl:1201\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpzme1s308.jl:11\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzme1s308.jl:30 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzme1s308.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpzme1s308.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching iterate(::Regex)\n  Closest candidates are:\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/dict.jl:695\n    ...\n  Stacktrace:\n\
    \   [1] _simple_count(pred::String, itr::Regex, init::Int64)\n     @ Base ./reduce.jl:1205\n\
    \   [2] count(f::String, itr::Rege"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzme1s308.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # return length(txt)\n    # function split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s+\") # \"Hello, world\"\n    if length(words)\
    \ == 1\n        words = split(txt, r\"\\,\")\n        if length(words) == 1\n\
    \            return length(regexp(txt, r\"[a-z]\"))\n        end\n    end\n  \
    \  return words\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwf05yyje.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwf05yyje.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwf05yyje.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwf05yyje.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwf05yyje.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwf05yyje.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwf05yyje.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwf05yyje.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwf05yyje.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwf05yyje.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n  txt = split(txt)\n  if length(txt) == 1 # no split is found\n   \
    \ txt = txt[1]\n    return sum(ord(ch)-96 for ch in txt if islower(ch) && isodd(ord(ch)-96))\n\
    \  end\n  return txt\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6przjusj.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6przjusj.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6przjusj.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6przjusj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp6przjusj.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: islower\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(ch::Char)\n      @ Main\
    \ ./none:0\n    [2] FilteringRF\n      @ ./reduce.jl:107 [inlined]\n    [3] _foldl_impl(op::Base.FilteringRF{var\"\
    #2#4\", Base.MappingRF{var\"#1#3\", Base.BottomRF{typeof(Base.add_sum)}}}, init::Base._InitialValue,\
    \ itr::SubString{String})\n      @ Base ./reduce.jl:58\n    [4] foldl_impl\n \
    \     @ ./reduce.jl:48 [inlined]\n    [5] mapfoldl_impl\n      @ ./reduce.jl:44\
    \ [inlined]\n    [6] #mapfoldl#244\n      @ ./reduce.jl:162 [inlined]\n    [7]\
    \ mapfoldl\n      @ ./reduce.jl:162 [inlined]\n    [8] #mapreduce#248\n      @\
    \ ./reduce.jl:289 [inlined]\n    [9] mapreduce\n      @ ./reduce.jl:289 [inlined]\n\
    \   [10] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [11] sum\n      @ ./reduce.jl:503\
    \ [inlined]\n   [12] #sum#252\n      @ ./reduce.jl:532 [inlined]\n   [13] sum\n\
    \      @ ./reduce.jl:532 [inlined]\n   [14] split_words(txt::String)\n      @\
    \ Main /tmp/tmp6przjusj.jl:14\n   [15] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6przjusj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, [\" \", \",\"])\n    if length(words) == 1\n\
    \        return count(x -> x.islower() && x.ord < 13, txt)\n    end\n    return\
    \ words\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnfd2rjfy.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{String}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpnfd2rjfy.jl:11\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpnfd2rjfy.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpnfd2rjfy.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnfd2rjfy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, spl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnfd2rjfy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if haskey(split(txt, \" \"), 2)\n        return split(txt, \" \"\
    )\n    elseif haskey(split(txt, \",\"), 2)\n        return split(txt, \",\")\n\
    \    else\n        return length(filter(t -> t % 2 == 1, [ord(x) - 96 for x in\
    \ lowercase(txt)]))\n    end\nend\n\"\"\"\n    Given a number (n), return an array\
    \ containing all the numbers from 0 to n. If the given number is not an integer\
    \ return an empty array.\n    Examples\n    make_array(3) \u279E [0, 1, 2, 3]\n\
    \    make_array(3.2) \u279E []\n    make_array(1) \u279E [0, 1]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpfz0l_9yd.jl:19\nin expression starting at /tmp/tmpfz0l_9yd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespace = map(isspace, txt)\n    if all(whitespace)\n      \
    \  split(txt, \",\")\n    elseif all(!whitespace)\n        count = 0\n       \
    \ for i in 1:length(txt)\n            if !(odd(ord(txt[i]) - 96))\n          \
    \      count += 1\n            end\n        end\n        count\n    else\n   \
    \     split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz2yv8py9.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  ArgumentError:\
    \ map(f, s::AbstractString) requires f to return AbstractChar; try map(f, collect(s))\
    \ or a comprehension instead\n  Stacktrace:\n   [1] map(f::typeof(isspace), s::String)\n\
    \     @ Base ./strings/basic.jl:611\n   [2] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpz2yv8py9.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz2yv8py9.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz2yv8py9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz2yv8py9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  ArgumentError: map(f,\
    \ s::AbstractString) requires f to return AbstractChar; try map(f, collect(s))\
    \ or a comprehension instead\n  Stacktrace:\n   [1] map(f::typeof(isspace), s::String)\n\
    \     @ Base ./strings/basic.jl:611\n   [2] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpz2yv8py9.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz2yv8py9.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz2yv8py9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz2yv8py9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  ArgumentError: map(f,\
    \ s::AbstractString) requires f to return AbstractChar; try map(f, collect(s))\
    \ or a comprehension instead\n  Stacktrace:\n   [1] map(f::typeof(isspace), s::String)\n\
    \     @ Base ./strings/basic.jl:611\n   [2] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpz2yv8py9.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz2yv8py9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, r\"\\s\")\n    chars = join(words)\n    odds\
    \ = count(i -> (i > 96) && (i < 123) && isodd(i - 96), collect(chars))\n    return\
    \ (length(words) > 1) ? words : (length(chars) > 1) ? odds : 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd6oddowf.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching isless(::Int64, ::Char)\n  Closest candidates are:\n    isless(::Real,\
    \ !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(!Matched::Char, ::Char) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:214\n\
    \    ...\n  Stacktrace:\n    [1] <(x::Int64, y::Char)\n      @ Base ./operators.jl:352\n\
    \    [2] >(x::Char, y::Int64)\n      @ Base ./operators.jl:378\n    [3] (::var\"\
    #1#2\")(i::Char)\n      @ Main /tmp/tmpd6oddowf.jl:13\n    [4] _simple_count\n\
    \      @ ./reduce.jl:1206 [inlined]\n    [5] _count\n      @ ./reducedim.jl:407\
    \ [inlined]\n    [6] #count#735\n      @ ./reducedim.jl:405 [inlined]\n    [7]\
    \ count\n      @ ./reducedim.jl:405 [inlined]\n    [8] split_words(txt::String)\n\
    \      @ Main /tmp/tmpd6oddowf.jl:13\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpd6oddowf.jl:21 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpd6oddowf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpd6oddowf.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching isless(::Int64, ::Char)\n  Closest candidates are:\n    isless(::Real,\
    \ !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    isless(!Matched::Char, ::Char) at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:214\n\
    \    ...\n  Stacktrace:\n    [1] <(x::Int64, y::Char)\n      @ Base ./operators.jl:352\n\
    \    [2] >(x::Char, y::Int64)\n      @ Base ./operators.jl:378\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6oddowf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[\\s]+\", txt)\n        return split(txt, r\"[\\\
    s]+\")\n    elseif occursin(r\",\", txt)\n        return split(txt, \",\")\n \
    \   else\n        return count(ascii_islower, txt)\n    end\nend\nprintln(split_words(\"\
    Hellow world!\"))\nprintln(split_words(\"Hello,world!\"))\nprintln(split_words(\"\
    abcdef\"))\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type \n  Vector{SubString{String}}\
    \ to an object of type \n  Union{Int64, Vector{String}}\nClosest candidates are:\n\
    \  convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    Stacktrace:\n [1] split_words(txt::String)\n   @ Main /tmp/tmparloal4j.jl:12\n\
    \ [2] top-level scope\n   @ /tmp/tmparloal4j.jl:19\nin expression starting at\
    \ /tmp/tmparloal4j.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    w = split(txt, ' ')\n    if length(w) > 1 \n        return w\n\
    \    else\n        w = split(txt, ',')\n        if length(w) > 1\n           \
    \ return w\n        else\n            c = 0\n            for i in txt\n      \
    \          c += isodd(Int(i) - Int('a'))\n            end\n            return\
    \ c\n        end\n    end\nend\n@testset \"Problem 2 Tests\" begin\n    @test\
    \ split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    @test split_words(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n    @test split_words(\"abcdef\")\
    \ == 3\n    @test split_words(\"Hello, how are you\") == [\"Hello\", \"how are\
    \ you\"]\n    @test split_words(\"Hello,how are you\") == [\"Hello\", \"how are\
    \ you\"]\n    @test split_words(\"Hello,how,are,you\") == [\"Hello\", \"how\"\
    , \"are\", \"you\"]\n    @test split_words(\"Hello how are you\") == [\"Hello\"\
    , \"how are you\"]\n    @test split_words(\"Hello,are you\") == [\"Hello\", \"\
    are you\"]\n    @test split_words(\"Hello,are,you\") == [\"Hello\", \"are\", \"\
    you\"]\n    @test split_words(\"Hello are you\") == [\"Hello\", \"are you\"]\n\
    \    @test split_words(\"Hello,are\") == [\"Hello\", \"are\"]\n    @test split_words(\"\
    Hello,are,you,\") == [\"Hello\", \"are\", \"you\", \"\"]\n    @test split_words(\"\
    Hello,are,\") == [\"Hello\", \"are\", \"\"]\n    @test split_words(\"Hello,are,you\"\
    ) == [\"Hello\", \"are\", \"you\"]\n    @test split_words(\"Hello,are you,\")\
    \ == [\"Hello\", \"are you\", \"\"]\n    @test split_words(\"Hello are\") == [\"\
    Hello\", \"are\"]\n    @test split_words(\"Hello are you,\") == [\"Hello\", \"\
    are you\", \"\"]\n    @test split_words(\"Hello are,\") == [\"Hello\", \"are\"\
    , \"\"]\n    @test split_words(\"Hello\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9djrvv3.jl:52\nin expression starting at\
    \ /tmp/tmps9djrvv3.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        count\
    \ = 0\n        for i in 1:length(txt)\n            if Int(ord(txt[i])) % 2 ==\
    \ 1\n                count += 1\n            end\n        end\n        return\
    \ count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3i4w3um7.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3i4w3um7.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i4w3um7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3i4w3um7.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3i4w3um7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3i4w3um7.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3i4w3um7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3i4w3um7.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp3i4w3um7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3i4w3um7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif occursin(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(i -> isodd(i), map(x -> ord(x) - ord('a'), txt))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc7up8vpa.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ ord not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Char)\n     @ Main\
    \ /tmp/tmpc7up8vpa.jl:16\n   [2] map(f::var\"#2#4\", s::String)\n     @ Base ./strings/basic.jl:610\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpc7up8vpa.jl:16\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpc7up8vpa.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpc7up8vpa.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpc7up8vpa.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: ord\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Char)\n     @ Main /tmp/tmpc7up8vpa.jl:16\n\
    \   [2] map(f::var\"#2#4\", s::String)\n     @ Base ./strings/basic.jl:610\n \
    \  [3] split_words(txt::String)\n     @ Main /tmp/tmpc7up8vpa.jl:16\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpc7up8vpa.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpc7up8vpa.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpc7up8vpa.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: ord\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#2#4\")(x::Char)\n     @ Main /tmp/tmpc7up8vpa.jl:16\n\
    \   [2] map(f::var\"#2#4\", s::String)\n     @ Base ./strings/basic.jl:610\n \
    \  [3] split_words(txt::String)\n     @ Main /tmp/tmpc7up8vpa.jl:16\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpc7up8vpa.jl:26 [inlined]\n\
    \   [6] macro e"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7up8vpa.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    lst_txt = split(txt)\n    if length(lst_txt) == 1\n        lst_chars\
    \ = collect(txt)\n        return length(filter(x -> islower(x) && (mod(Int(x),\
    \ 2) == 1), lst_chars))\n    else\n        return lst_txt\n    end\nend\n\"\"\"\
    \n    You are a researcher making a report on the local food of a country. You\
    \ have a list of strings where each string \n    represents a recipe name and\
    \ you want to present it in an alphabetical order but you want to check if the\
    \ names \n    are correct and complete. To do so you want to build a list with\
    \ the valid recipe names, in alphabetical order. \n    The list should not contain\
    \ duplicates. In some cases an ingredient may be written as an abbreviation of\
    \ the \n    ingredient name or the recipe name may be written in a shortened way.\
    \ You have a list of accepted abbreviations. \n    For a string to be a valid\
    \ recipe name it has to follow the next rules:\n    The recipe name should only\
    \ contain letters, numbers, spaces and commas.\n    If there is an abbreviation\
    \ in the name, it should be surrounded by parentheses and have a space after it.\
    \ \n    Parentheses can only contain one abbreviation and there should be no space\
    \ before the abbreviation.\n    If there is a colon (\":\") after an ingredient,\
    \ the ingredient is optional.\n    If an ingredient has a comma, it should be\
    \ followed by \"or\" and another ingredient. \n    In this case, both the ingredients\
    \ before and after \"or\" should be valid. \n    (In the last example there are\
    \ two recipes with names that are not valid. \n    The first one is missing the\
    \ abbreviation and the second one has two abbreviations.)\n    You should return\
    \ a list with the valid recipes, sorted in alphabetical order.\n    Examples\n\
    \    recipes = [\"Cake: flour, sugar, eggs\",\n    \"Banana(ripe, sliced)Pudding:\
    \ bananas, sugar, vanilla essence, milk\",\n    \"Cake: flour, sugar, eggs\",\n\
    \    \"Banana: bananas\",\n    \"Banana(ripe, sliced)Pudding: bananas, sugar,\
    \ vanilla essence, milk\",\n    \"Cake: flour, sugar, eggs\",\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdm79kx0.jl:19\nin expression starting at\
    \ /tmp/tmpwdm79kx0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    #split on whitespace\n    if length(findall(txt, \" \")) != 0\n\
    \        split(txt, \" \")\n    elseif length(findall(txt, \",\")) != 0\n    \
    \    split(txt, \",\")\n    else\n        reduce(+, map(x -> x[1] == \"a\" ||\
    \ x[1] == \"c\" || x[1] == \"e\" || x[1] == \"g\" || x[1] == \"i\" || x[1] ==\
    \ \"k\" || x[1] == \"m\" || x[1] == \"o\" || x[1] == \"q\" || x[1] == \"s\" ||\
    \ x[1] == \"u\" || x[1] == \"w\" || x[1] == \"y\" ? 1 : 0, split(txt, \"\")))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6qdxvs01.jl:25\n  Expression: candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n   Evaluated: 0 == [\"Hello\", \"\
    world!\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6qdxvs01.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6qdxvs01.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6qdxvs01.jl:26\n  Expression: candidate(\"Hello,world!\")\
    \ == [\"Hello\", \"world!\"]\n   Evaluated: 0 == [\"Hello\", \"world!\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6qdxvs01.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6qdxvs01.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6qdxvs01.jl:27\n  Expression: candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"]\n   Evaluated: 0 == [\"Hello\", \"world,!\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6qdxvs01.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6qdxvs01.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6qdxvs01.jl:28\n  Expression: candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"]\n   Evaluated: 0 == [\"Hello,Hello,world\"\
    , \"!\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6qdxvs01.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6qdxvs01.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6qdxvs01.jl:29\n  Expression: candid"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6qdxvs01.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt =  strip(txt) # remove end whitespaces\n    if occursin(\"\
    \ \", txt)\n        return split(txt, \" \")\n    elseif occursin(\",\", txt)\n\
    \        return split(txt, \",\")\n    else\n        count = 0\n        for i\
    \ in txt\n            if islower(i)\n                index = ord(i) - 97\n   \
    \             if mod(index, 2) == 1\n                    count += 1\n        \
    \        end\n            end\n        end\n        return count\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppmmc1s7u.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppmmc1s7u.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppmmc1s7u.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppmmc1s7u.jl:33\ntest set:\
    \ Error During Test at /tmp/tmppmmc1s7u.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppmmc1s7u.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppmmc1s7u.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppmmc1s7u.jl:33\ntest set:\
    \ Error During Test at /tmp/tmppmmc1s7u.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppmmc1s7u.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    if length(words) == 1\n        words\
    \ = split(txt, \",\")\n        if length(words) == 1\n            return sum(isodd.([ord(char)\
    \ for char in lowercase(txt)]))\n        end\n    end\n    return words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsfehu1dw.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpsfehu1dw.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsfehu1dw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsfehu1dw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpsfehu1dw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpsfehu1dw.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsfehu1dw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsfehu1dw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpsfehu1dw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsfehu1dw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    ws = split(txt, \" \")\n    if length(ws) > 1\n        return ws\n\
    \    end\n    cm = split(txt, \",\")\n    if length(cm) > 1\n        return cm\n\
    \    end\n    count = 0\n    for i in 1:length(txt)\n        if islower(txt[i])\n\
    \            if i % 2 == 1\n                count += 1\n            end\n    \
    \    end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpivzwqerw.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpivzwqerw.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivzwqerw.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivzwqerw.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpivzwqerw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpivzwqerw.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivzwqerw.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivzwqerw.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpivzwqerw.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivzwqerw.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n   if isempty(findfirst(txt, r\"[ ,]\"))\n      return length(txt)\n\
    \   elseif isempty(findfirst(txt, r\" \"))\n      return split(txt, \",\")\n \
    \  else\n      return split(txt, \" \")\n   end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp118s42z2.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::String, ::Regex)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp118s42z2.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp118s42z2.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp118s42z2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp118s42z2.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::String, ::Regex)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp118s42z2.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp118s42z2.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp118s42z2.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp118s42z2.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp118s42z2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # try to split on whitespace\n    if \" \" in txt\n        words\
    \ = split(txt, \" \")\n        return words\n    elseif \",\" in txt\n       \
    \ words = split(txt, \",\")\n        return words\n    else\n        # no space\
    \ or commas so I count the number of lower-case letters with odd order in the\
    \ alphabet\n        #ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n        n\
    \ = 0\n        for i = 1:length(txt)\n            if txt[i] in ['a', 'c', 'e',\
    \ 'g', 'i', 'k', 'm', 'o', 'q', 's', 'u', 'w', 'y']\n                n = n + 1\n\
    \            end\n        end\n        return n\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0su9nzdp.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmp0su9nzdp.jl:12\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp0su9nzdp.jl:35 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp0su9nzdp.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0su9nzdp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmp0su9nzdp.jl:12\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp0su9nzdp.jl:36 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp0su9nzdp.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp0su9nzdp.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmp0su9nzdp.jl:12\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp0su9nzdp.jl:37 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0su9nzdp.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return sum(occursin(\"aeiou\", tolower(txt)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptol0nd_b.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptol0nd_b.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptol0nd_b.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptol0nd_b.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptol0nd_b.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptol0nd_b.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptol0nd_b.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptol0nd_b.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptol0nd_b.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptol0nd_b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    s = split(txt, \" \")\n    if length(s) == 1\n        s = split(txt,\
    \ \",\")\n        if length(s) == 1\n            s = [txt]\n        end\n    end\n\
    \    if length(s) == 1\n        n = 0\n        for i in 1:length(txt)\n      \
    \      if txt[i] in 'abcdefghijklmnopqrstuvwxyz'\n                if (ord(txt[i])\
    \ - ord('a')) % 2 == 1\n                    n += 1\n                end\n    \
    \        end\n        end\n        return n\n    end\n    return s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp466x_adn.jl:21\nin expression\
    \ starting at /tmp/tmp466x_adn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # preprocess the text\n    txt = replace(txt, r\"[^a-zA-Z, ]\"\
    , \"\")\n    txt = replace(txt, \",\", \" \")\n    # split into words\n    txt\
    \ = split(txt)\n    # count the number of words with uppercase letters\n    n\
    \ = 0\n    for word in txt\n        if contains(word, \"A\") || contains(word,\
    \ \"B\") || contains(word, \"C\") || contains(word, \"D\") || contains(word, \"\
    E\") || contains(word, \"F\") || contains(word, \"G\") || contains(word, \"H\"\
    ) || contains(word, \"I\") || contains(word, \"J\") || contains(word, \"K\") ||\
    \ contains(word, \"L\") || contains(word, \"M\") || contains(word, \"N\") || contains(word,\
    \ \"O\") || contains(word, \"P\") || contains(word, \"Q\") || contains(word, \"\
    R\") || contains(word, \"S\") || contains(word, \"T\") || contains(word, \"U\"\
    ) || contains(word, \"V\") || contains(word, \"W\") || contains(word, \"X\") ||\
    \ contains(word, \"Y\") || contains(word, \"Z\")\n            n += 1\n       \
    \ end\n    end\n    # if there are words with uppercase letters return the words\n\
    \    if n > 0\n        return txt\n    else\n        return count_lowercase_odd(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzku1s98j.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzku1s98j.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzku1s98j.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzku1s98j.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzku1s98j.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\n  Closest candidates are:\n \
    \   replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzku1s98j.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzku1s98j.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzku1s98j.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if match(r\"\\s\", txt) == nothing\n        if match(r\",\", txt)\
    \ == nothing\n            return count(islower.(txt), i->i && (i % 2) == 1)\n\
    \        else\n            return split(txt, \",\")\n        end\n    else\n \
    \       return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoagks6hm.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpoagks6hm.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoagks6hm.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoagks6hm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpoagks6hm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpoagks6hm.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoagks6hm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoagks6hm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpoagks6hm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoagks6hm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(collect(eachmatch(r\"\\w+\", txt))) == 0\n        if\
    \ length(collect(eachmatch(r\"[a-z]+\", txt))) == 0\n            return 0\n  \
    \      else\n            return length(collect(eachmatch(r\"[a-z]+\", txt))[1])\n\
    \        end\n    else\n        return collect(eachmatch(r\"\\w+\", txt))\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbagibrq6.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{RegexMatch} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbagibrq6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbagibrq6.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbagibrq6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpbagibrq6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{RegexMatch} to an object of type \n\
    \    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbagibrq6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbagibrq6.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbagibrq6.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpbagibrq6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{RegexMatch} to an object of type \n\
    \    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/e"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbagibrq6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, r\"\\s+\", \",\")\n    if findall(txt, r\"\\\
    s\") != []\n        return split(txt, r\",\\s*\")\n    elseif findall(txt, r\"\
    \\,\") != []\n        return split(txt, r\",\\s*\")\n    else\n        odd_let\
    \ = 0\n        for i in 1:length(txt)\n            if txt[i] != Char(32) && islower(txt[i])\n\
    \                if i % 2 == 1\n                    odd_let += 1\n           \
    \     end\n            end\n        end\n        return odd_let\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3eylyzhp.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3eylyzhp.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3eylyzhp.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3eylyzhp.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3eylyzhp.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::Regex, ::String)\n  Closest candidates are:\n \
    \   replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3eylyzhp.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3eylyzhp.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3eylyzhp.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    s = split(txt, \" \")\n    if length(s) > 1\n        return s\n\
    \    end\n    s = split(txt, \",\")\n    if length(s) > 1\n        return s\n\
    \    end\n    s = 0\n    for i in 1:length(txt)\n        if 97 <= Int(txt[i])\
    \ <= 122 && i % 2 == 1\n            s += 1\n        end\n    end\n    return s\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp72vs5qfi.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp72vs5qfi.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp72vs5qfi.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp72vs5qfi.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp72vs5qfi.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp72vs5qfi.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp72vs5qfi.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp72vs5qfi.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp72vs5qfi.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp72vs5qfi.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findall(r\"\\s\", txt) == [] && findall(r\",\", txt) == []\n\
    \        count = 0\n        for (i, ch) in enumerate(txt)\n            if i %\
    \ 2 == 0 && (ch < 'a' || ch > 'z')\n                return 0\n            elseif\
    \ i % 2 == 1 && (ch < 'a' || ch > 'z')\n                return 0\n           \
    \ elseif i % 2 == 0 && (ch >= 'a' && ch <= 'z')\n                count += 1\n\
    \            end\n        end\n        return count\n    elseif findall(r\"\\\
    s\", txt) == []\n        return split(txt, \",\")\n    else\n        return split(txt,\
    \ \" \")\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ut4rnha.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1ut4rnha.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ut4rnha.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ut4rnha.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp1ut4rnha.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1ut4rnha.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ut4rnha.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ut4rnha.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp1ut4rnha.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ut4rnha.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      count = 0\n            for c in txt\n                if lowercase(c) &&\
    \ isodd(Int(c))\n                    count += 1\n                end\n       \
    \     end\n            return count\n        else\n            return split(txt,\
    \ ',')\n        end\n    else\n        return split(txt)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp32sd7ao3.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp32sd7ao3.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32sd7ao3.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32sd7ao3.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp32sd7ao3.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp32sd7ao3.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32sd7ao3.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32sd7ao3.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp32sd7ao3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp32sd7ao3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) > 1\n        return words\n\
    \    elseif length(words) == 1\n        comma_split = split(words[1], \",\")\n\
    \        if length(comma_split) > 1\n            return comma_split\n        elseif\
    \ length(comma_split) == 1\n            let = [ch in (:abc...:xyz) for ch in comma_split[1]]\n\
    \            return sum(let[2 .% 2 .== 1])\n        end\n    end\nend\n```\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpokfbrd_t.jl:19\nin expression starting at /tmp/tmpokfbrd_t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, \" \")\n    elseif\
    \ occursin(',', txt)\n        return split(txt, \",\")\n    else\n        odd_order\
    \ = 0\n        for s in txt\n            if ord(s) % 2 == 1\n                odd_order\
    \ += 1\n            end\n        end\n        return odd_order\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplbmi49dg.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmplbmi49dg.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplbmi49dg.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplbmi49dg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplbmi49dg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmplbmi49dg.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplbmi49dg.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplbmi49dg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplbmi49dg.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplbmi49dg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return sum(isodd.([ord(x) for x in collect(lowercase(txt))]))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqztedz09.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqztedz09.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqztedz09.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqztedz09.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpqztedz09.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqztedz09.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqztedz09.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqztedz09.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpqztedz09.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqztedz09.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # code goes here\n    split_txt = split(txt, \" \")\n    if length(split_txt)\
    \ == 1\n        split_txt = split(txt, \",\")\n        if length(split_txt) ==\
    \ 1\n            cnt = 0\n            for i in 1:length(txt)\n               \
    \ if islower(txt[i]) && i % 2 == 1\n                    cnt += 1\n           \
    \     end\n            end\n            return cnt\n        end\n    end\n   \
    \ return split_txt\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjmh3zt4l.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjmh3zt4l.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjmh3zt4l.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjmh3zt4l.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjmh3zt4l.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjmh3zt4l.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjmh3zt4l.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjmh3zt4l.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpjmh3zt4l.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjmh3zt4l.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif occursin(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.(lowercase(txt)))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnhl88721.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching isodd(::String)\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [3] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @ ./broadcast.jl:875\
    \ [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [6]\
    \ split_words(txt::String)\n      @ Main /tmp/tmpnhl88721.jl:16\n    [7] macro\
    \ expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpnhl88721.jl:24 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpnhl88721.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpnhl88721.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching isodd(::String)\n  Closest candidates are:\n    isodd(!Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/float.jl:832\n    isodd(!Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:101\n    isodd(!Matched::BigInt)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:345\n    ...\n  Stacktrace:\n\
    \    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [3] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @ ./broadcast.jl:875\
    \ [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [6] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnhl88721.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(ord(i) % 2 == 1 for i in txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqb9b8jvs.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqb9b8jvs.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqb9b8jvs.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqb9b8jvs.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpqb9b8jvs.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqb9b8jvs.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqb9b8jvs.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqb9b8jvs.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpqb9b8jvs.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqb9b8jvs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, \",\", \" \")\n    if ' ' in txt\n        return\
    \ split(txt)\n    else\n        letters = collect(alphabet(txt))\n        return\
    \ sum(isodd.(collect(letters)))\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbif6alii.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbif6alii.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbif6alii.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbif6alii.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbif6alii.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbif6alii.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbif6alii.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbif6alii.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if txt == \"\"\n        return []\n    end\n    if contains(txt,\
    \ ' ')\n        return split(txt, ' ')\n    elseif contains(txt, ',')\n      \
    \  return split(txt, ',')\n    else\n        return length(txt[txt .< 'a']) +\
    \ length(txt[txt .> 'z'])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_w_wm0z1.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_w_wm0z1.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_w_wm0z1.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_w_wm0z1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_w_wm0z1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_w_wm0z1.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_w_wm0z1.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_w_wm0z1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_w_wm0z1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_w_wm0z1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    splt = split(txt, [\" \", \",\"])\n    if length(splt) == 1\n \
    \       return length(splt[1]) - length(filter(c -> islower(c) && ord(c) % 2 ==\
    \ 0, splt[1]))\n    else\n        return splt\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqm6qmjd_.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{String}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpqm6qmjd_.jl:11\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpqm6qmjd_.jl:23 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpqm6qmjd_.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqm6qmjd_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, spl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqm6qmjd_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    res::Vector{String} = split(txt, [\" \", \",\"])\n    n::Int64\
    \ = length(res)\n    if n == 1\n        split_words(txt) = [Int64(parse(Int, i)\
    \ % 2 == 1) for i in txt] |> sum\n    elseif n > 1\n        split_words(txt) =\
    \ res\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpomenhwld.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{String}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmpomenhwld.jl:11\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpomenhwld.jl:24 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpomenhwld.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpomenhwld.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, spl"
  stderr: "WARNING: Method definition (::Main.var\"#split_words#2\"{res})(Any) in\
    \ module Main at /tmp/tmpomenhwld.jl:14 overwritten at /tmp/tmpomenhwld.jl:16.\n\
    ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored, 0 broken.\n\
    in expression starting at /tmp/tmpomenhwld.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, [' ', ','])\n    if length(words) > 1\n    \
    \    return words\n    elseif length(filter(x -> islower(x), collect(txt))) >\
    \ 0\n        return count(x -> islower(x) && isodd(x - ord('a')), collect(txt))\n\
    \    else\n        return 0\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp19qsub38.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp19qsub38.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp19qsub38.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp19qsub38.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp19qsub38.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp19qsub38.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp19qsub38.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp19qsub38.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp19qsub38.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19qsub38.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occurrences(txt, ' ') == 0\n        if occurrences(txt, ',')\
    \ == 0\n            return length(filter(ch -> (string(ch) in 'abcdefghijklmnopqrstuvwxyz')\
    \ && isodd(Int(ch)), txt))\n        else\n            return split(txt, ',')\n\
    \        end\n    else\n        return split(txt, ' ')\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpj3w4qqy_.jl:13\nin expression\
    \ starting at /tmp/tmpj3w4qqy_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, r\"\\s\") # string has white spaces\n        split(txt,\
    \ r\"\\s\")\n    elseif contains(txt, \",\") # string has commas\n        split(txt,\
    \ \",\")\n    else # string has no whitespaces or commas; return sum of odds\n\
    \        sum(isodd.([ord(c) for c in txt]))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3kj5t_0i.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3kj5t_0i.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3kj5t_0i.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3kj5t_0i.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3kj5t_0i.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3kj5t_0i.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3kj5t_0i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3kj5t_0i.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp3kj5t_0i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3kj5t_0i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    res = []\n    m = match(r\"\\s\", txt)\n    if m == nothing\n \
    \       m = match(r\",\", txt)\n        if m == nothing\n            return sum(1\
    \ .* isodd.(lowercase(txt)))\n        end\n        res = split(txt, \",\")\n \
    \   else\n        res = split(txt, \" \")\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpic3aqpv_.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpic3aqpv_.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpic3aqpv_.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpic3aqpv_.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpic3aqpv_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpic3aqpv_.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpic3aqpv_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpic3aqpv_.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpic3aqpv_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpic3aqpv_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    ws = split(txt, whitespace(txt))\n    if ws != [\"\"]\n       \
    \ return ws\n    end\n    ws = split(txt, \",\")\n    if ws != [\"\"]\n      \
    \  return ws\n    end\n    cnt = 0\n    for i in 1:length(txt)\n        let letter\
    \ = txt[i]\n            if letter in 'abcdefghijklmnopqrstuvwxyz'\n          \
    \      if (Int(letter) - Int('a')) % 2 == 1\n                    cnt += 1\n  \
    \              end\n            end\n        end\n    end\n    return cnt\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrwiacq7.jl:22\nin expression\
    \ starting at /tmp/tmpbrwiacq7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # if any(x->x in 'abcdefghijklmnopqrstuvwxyz', txt)\n    #    \
    \ return count(x->x in 'abcdefghijklmnopqrstuvwxyz', txt)\n    # end\n    return\
    \ replace(split(txt, [' ','.',',','!','?','@','_','%','#','$','^','&','*','(',')','[',']','{','}','/','-','=','+','|','\\\
    \\','<','>',';',':','\"',\"'\",'`','~','\\n']), nothing => \"\")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb5hs9s69.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{Any}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{Any}, limit::Int64,\
    \ keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base ./strings/util.jl:435\n\
    \   [2] split(str::String, splitter::Vector{Any}; limit::Int64, keepempty::Bool)\n\
    \     @ Base ./strings/util.jl:419\n   [3] split(str::String, splitter::Vector{Any})\n\
    \     @ Base ./strings/util.jl:419\n   [4] split_words(txt::String)\n     @ Main\
    \ /tmp/tmpb5hs9s69.jl:14\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpb5hs9s69.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpb5hs9s69.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpb5hs9s69.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{Any}, ::String)\n  Closest candidates are:\n   \
    \ findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{A"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb5hs9s69.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        cnt\
    \ = 0\n        for (i, ch) in enumerate(txt)\n            if i % 2 == 0 && !isupper(ch)\n\
    \                cnt += 1\n            end\n        end\n        return cnt\n\
    \    elseif !occursin(\" \", txt)\n        return split(txt, \",\")\n    else\n\
    \        return split(txt, \" \")\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbthmrxmt.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbthmrxmt.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbthmrxmt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbthmrxmt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbthmrxmt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbthmrxmt.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbthmrxmt.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbthmrxmt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbthmrxmt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbthmrxmt.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    space_splits = split(txt, ' ')\n    if length(space_splits) !=\
    \ 1\n        return space_splits\n    end\n    comma_splits = split(txt, ',')\n\
    \    if length(comma_splits) != 1\n        return comma_splits\n    end\n    #if\
    \ no whitespaces or commas exist\n    odd_order_letters = 0\n    for c in txt\n\
    \        if islower(c) && ord(c) % 2 == 1\n            odd_order_letters += 1\n\
    \        end\n    end\n    return odd_order_letters\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc_j8wyne.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpc_j8wyne.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_j8wyne.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_j8wyne.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpc_j8wyne.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpc_j8wyne.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc_j8wyne.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc_j8wyne.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpc_j8wyne.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_j8wyne.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if txt == \"\"\n        return Int64(0)\n    end\n    if occursin(r\"\
    [a-z,]\", txt) == false\n        return split(txt)\n    end\n    if occursin(r\"\
    [a-z, ]\", txt) == false\n        return (length(txt)-1)\xF72\n    end\n    return\
    \ [r[:end-1] for r in eachmatch(r\"[^ ]+,\", txt)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph1r8_hax.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{Union{}} to an object of type\
    \ \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmph1r8_hax.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph1r8_hax.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph1r8_hax.jl:26\ntest set:\
    \ Error During Test at /tmp/tmph1r8_hax.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching -(::Symbol, ::Int64)\n  Closest candidates are:\n    -(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\n \
    \   -(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:227\n\
    \    -(!Matched::LinearAlgebra.UniformScaling, ::Number) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:147\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(r::RegexMatch)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] grow_to!\n     @ ./array.jl:797\
    \ [inlined]\n   [4] collect\n     @ ./array.jl:721 [inlined]\n   [5] split_words(txt::String)\n\
    \     @ Main /tmp/tmph1r8_hax.jl:20\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmph1r8_hax.jl:28 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph1r8_hax.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findall(r\"\\w+\", txt) == []\n        return length(findall(r\"\
    [a-z]\", txt))\n    else\n        return split(txt, r\"\\s+\")\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2muh6jfc.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2muh6jfc.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2muh6jfc.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2muh6jfc.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2muh6jfc.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2muh6jfc.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2muh6jfc.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2muh6jfc.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp2muh6jfc.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2muh6jfc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt)\n        return split(txt, \" \")\n   \
    \ elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n  \
    \      return length(filter(x -> x in \"abcdefghijklmnopqrstuvwxyz\", txt)[occursin(odd(1:25),\
    \ collect(x -> x-97, filter(x -> x in \"abcdefghijklmnopqrstuvwxyz\", txt)))])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_5vh66it.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_5vh66it.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_5vh66it.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5vh66it.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp_5vh66it.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_5vh66it.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_5vh66it.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5vh66it.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp_5vh66it.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_5vh66it.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = strip(txt)\n    if contains(txt, \" \")\n        return split(txt,\
    \ \" \")\n    elseif contains(txt, \",\")\n        return split(txt, \",\")\n\
    \    else\n        odd_letters = 0\n        for i in 1:length(txt)\n         \
    \   if ord(txt[i]) % 2 == 1\n                odd_letters += 1\n            end\n\
    \        end\n        return odd_letters\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprua655q7.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmprua655q7.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprua655q7.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprua655q7.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprua655q7.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmprua655q7.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprua655q7.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprua655q7.jl:30\ntest set:\
    \ Error During Test at /tmp/tmprua655q7.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprua655q7.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, ' ')) > 1\n        return split(txt, ' ')\n\
    \    elseif length(split(txt, ',')) > 1\n        return split(txt, ',')\n    else\
    \ \n        num = 0\n        for i in txt\n            if ord(i)%2==1 \n     \
    \           num+=1\n            end\n        end\n        return num\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1tlx02w_.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1tlx02w_.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1tlx02w_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1tlx02w_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1tlx02w_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1tlx02w_.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1tlx02w_.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1tlx02w_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1tlx02w_.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1tlx02w_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, \" \")\n    elseif ','\
    \ in txt\n        return split(txt, \",\")\n    else\n        return count(i ->\
    \ i % 2 == 1, [ord(c) - 97 for c in lowercase(txt)])\n    end\nend\n \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpndq16zsz.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpndq16zsz.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpndq16zsz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpndq16zsz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpndq16zsz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpndq16zsz.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpndq16zsz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpndq16zsz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpndq16zsz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpndq16zsz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      return count(map(lc -> lc in collect(0:2:25), map(l -> ord(l) - 97, lowercase(txt))))\n\
    \        else\n            return split(txt, \",\")\n        end\n    else\n \
    \       return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo0_rytvy.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo0_rytvy.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0_rytvy.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0_rytvy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpo0_rytvy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpo0_rytvy.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0_rytvy.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0_rytvy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpo0_rytvy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0_rytvy.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split = findall(r\"\\s+|\\,+\", txt)\n    if isempty(split) \n\
    \        return sum(ord(ch) % 2 == 1 for ch in lowercase(txt))\n    else\n   \
    \     res = split(txt, split)\n        return res\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzaqlqlxh.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ objects of type Vector{UnitRange{Int64}} are not callable\n  Use square brackets\
    \ [] for indexing an Array.\n  Stacktrace:\n   [1] split_words(txt::String)\n\
    \     @ Main /tmp/tmpzaqlqlxh.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzaqlqlxh.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzaqlqlxh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzaqlqlxh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: objects\
    \ of type Vector{UnitRange{Int64}} are not callable\n  Use square brackets []\
    \ for indexing an Array.\n  Stacktrace:\n   [1] split_words(txt::String)\n   \
    \  @ Main /tmp/tmpzaqlqlxh.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzaqlqlxh.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzaqlqlxh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpzaqlqlxh.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: objects\
    \ of type Vector{UnitRange{Int64}} are not callable\n  Use square brackets []\
    \ for indexing an Array.\n  Stacktrace:\n   [1] split_words(txt::String)\n   \
    \  @ Main /tmp/tmpzaqlqlxh.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzaqlqlxh.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzaqlql"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzaqlqlxh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \"\"\"\n    #TODO\n    \"\"\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp3a4mmz4.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    String to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpp3a4mmz4.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp3a4mmz4.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp3a4mmz4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpp3a4mmz4.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    String to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpp3a4mmz4.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp3a4mmz4.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp3a4mmz4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpp3a4mmz4.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    String to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp3a4mmz4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    split_patterns = (w for w in [\" \", \",\"] if occursin(w, txt))\n\
    \   \n    if split_patterns == nothing\n        return length(filter(x -> islower(x)\
    \ && isodd(Int(x) - Int('a')), collect(txt)))\n    else\n        return split(txt,\
    \ split_patterns)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx1uouhgs.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Base.Generator{Base.Iterators.Filter{var\"#1#3\"\
    {String}, Vector{String}}, typeof(identity)}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Base.Generator{Base.Iterators.Filter{var\"\
    #1#3\"{String}, Vector{String}}, typeof(identity)}, limit::Int64, keepempty::Bool,\
    \ strs::Vector{SubString{String}})\n     @ Base ./strings/util.jl:435\n   [2]\
    \ split(str::String, splitter::Base.Generator{Base.Iterators.Filter{var\"#1#3\"\
    {String}, Vector{String}}, typeof(identity)}; limit::Int64, keepempty::Bool)\n\
    \     @ Base ./strings/util.jl:419\n   [3] split(str::String, splitter::Base.Generator{Base.Iterators.Filter{var\"\
    #1#3\"{String}, Vector{String}}, typeof(identity)})\n     @ Base ./strings/util.jl:419\n\
    \   [4] split_words(txt::String)\n     @ Main /tmp/tmpx1uouhgs.jl:16\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpx1uouhgs.jl:24 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpx1uouhgs.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpx1uouhgs.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Base.Generator{Base.Iterators.Filter{var\"#1#3\"{String},\
    \ Vector{String}}, typeof(identity)}, ::String)\n  Closest candidates are:\n \
    \   findfirst(!Matched::Function, ::Uni"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx1uouhgs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    splitted = split(txt)\n    if length(splitted) > 1 \n        return\
    \ splitted\n    elseif length(findall(r\"[a-zA-Z]+\", txt)) == 1\n        txt\
    \ = txt[findall(r\"[a-zA-Z]+\", txt)]\n        cnt = 0\n        for i in 1:length(txt)\n\
    \            if i % 2 == 1\n                if islower(txt[i])\n             \
    \       cnt += 1\n                end\n            end\n        end\n        return\
    \ cnt\n    else\n        return split(txt, \",\")\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptavs9397.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptavs9397.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptavs9397.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptavs9397.jl:33\ntest set:\
    \ Error During Test at /tmp/tmptavs9397.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptavs9397.jl:26\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptavs9397.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptavs9397.jl:33\ntest set:\
    \ Error During Test at /tmp/tmptavs9397.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptavs9397.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, \",\", \" \")\n    w = split(txt)\n    if length(w)\
    \ == 1\n        letters = map(lowercase, txt)\n        odd_letters = filter(x\
    \ -> mod(x - ord('a'), 2) == 1, letters)\n        if length(odd_letters) > 0\n\
    \            return length(odd_letters)\n        else\n            return 0\n\
    \        end\n    else\n        return w\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbs1dh56q.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbs1dh56q.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbs1dh56q.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbs1dh56q.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpbs1dh56q.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbs1dh56q.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbs1dh56q.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbs1dh56q.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespace = split(txt, \" \")\n    comma = split(txt, \",\")\n\
    \    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    if length(whitespace) > 1\n\
    \        return whitespace\n    elseif length(comma) > 1\n        return comma\n\
    \    else\n        odd = collect(countin(1,1,2))\n        for i in 1:length(alphabet)\n\
    \            if txt == alphabet[i]\n                if i in odd\n            \
    \        return 1\n                else\n                    return 0\n      \
    \          end\n            end\n        end\n    end\nend\n@assert split_words(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n@assert split_words(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"]\n@assert split_words(\"abcdef\") == 3\n@assert split_words(\"\
    \") == 0\n@assert split_words(\"abcd\") == 1\n@assert split_words(\"abce\") ==\
    \ 0\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpvcp86rhm.jl:13\nin expression\
    \ starting at /tmp/tmpvcp86rhm.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, \" \")\n    elseif ','\
    \ in txt\n        return split(txt, \",\")\n    else \n        count = 0\n   \
    \     for i in 1:length(txt)\n            if i%2 != 0\n                if txt[i]\
    \ == char(96 + i)\n                    count += 1\n                end\n     \
    \       end\n        end\n        return count\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgf6q9vhi.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgf6q9vhi.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgf6q9vhi.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgf6q9vhi.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgf6q9vhi.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgf6q9vhi.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgf6q9vhi.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgf6q9vhi.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpgf6q9vhi.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgf6q9vhi.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if occurrences(txt, \" \") > 0\n        return split(txt,\
    \ \" \")\n    elseif occurrences(txt, \",\") > 0\n        return split(txt, \"\
    ,\")\n    else\n        return sum(occurrences(txt, join(string.('a':'z'), \"\"\
    )) .% 2 .!= 0)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9qpcg0g8.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ occurrences not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n  \
    \   @ Main /tmp/tmp9qpcg0g8.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9qpcg0g8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9qpcg0g8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9qpcg0g8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: occurrences\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9qpcg0g8.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9qpcg0g8.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9qpcg0g8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9qpcg0g8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: occurrences\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9qpcg0g8.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9qpcg0g8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9qpcg0g8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp9qpcg0g8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ occurrences not defined\n  Stacktrace:\n   [1] split_words(txt"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qpcg0g8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespaces = length(occursin(\" \", txt))\n    commas = length(occursin(\"\
    ,\", txt))\n    if whitespaces > 0 \n        return split(txt, \" \")\n    elseif\
    \ commas > 0\n        return split(txt, \",\")\n    else\n        count = 0\n\
    \        for i in 1:length(txt)\n            if ord(txt[i]) - 96 > 0 && mod(ord(txt[i])\
    \ - 96, 2) == 1\n                count += 1\n            end\n        end\n  \
    \      return count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc1o_2c_z.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpc1o_2c_z.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc1o_2c_z.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc1o_2c_z.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpc1o_2c_z.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpc1o_2c_z.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc1o_2c_z.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc1o_2c_z.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpc1o_2c_z.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc1o_2c_z.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = replace(txt, \", \", \" \")\n    if findfirst(txt, ' ') ===\
    \ nothing\n        words = split(txt, ',')\n        if length(words) == 1\n  \
    \          return sum(i -> i % 2 == 1 ? 1 : 0, eachindex(txt) .- 'a')\n      \
    \  end\n    end\n    return split(txt, ' ')\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwzxh9f2d.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\n  Closest candidates\
    \ are:\n    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwzxh9f2d.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwzxh9f2d.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwzxh9f2d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwzxh9f2d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwzxh9f2d.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwzxh9f2d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwzxh9f2d.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    s = split(txt)\n    if length(s) == 1\n        s = split(txt, \"\
    ,\")\n        if length(s) == 1\n            n = 0\n            for i in 1:length(txt)\n\
    \                if txt[i] in 'abcdefghijklmnopqrstuvwxyz'\n                 \
    \   n += Int(i % 2 == 1)\n                end\n            end\n            return\
    \ n\n        end\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbc9n57bc.jl:17\nin expression\
    \ starting at /tmp/tmpbc9n57bc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.(collect(lowercase(txt)) .- ord('a')))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd47in05e.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpd47in05e.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd47in05e.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd47in05e.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd47in05e.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpd47in05e.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd47in05e.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd47in05e.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpd47in05e.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd47in05e.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findall(r\"\\s\", txt) != []\n        return split(txt, \"\\\
    s\")\n    elseif findall(r\",\", txt) != []\n        return split(txt, \",\")\n\
    \    else\n        num = 0\n        for i in txt\n            if islower(i) ==\
    \ true\n                num += 1\n            end\n        end\n        return\
    \ num\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqnxiiep_.jl:12\nin expression starting at /tmp/tmpqnxiiep_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if search(r\"[^\\,]\\s[^\\,]\", txt) != nothing\n        return\
    \ split(txt, ' ')\n    elseif search(r\"[^\\,]\\,+[^\\,]\", txt) != nothing\n\
    \        return split(txt, ',')\n    else\n        count = 0\n        for i in\
    \ txt\n            if isalpha(i) && ord(i) % 2 == 1\n                count +=\
    \ 1\n            end\n        end\n        return count\n    end\nend\n@test split_words(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n@test split_words(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"]\n@test split_words(\"abcdef\") == 3\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @test not defined\nin expression starting\
    \ at /tmp/tmpgibuvf8d.jl:25\nin expression starting at /tmp/tmpgibuvf8d.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    whitespaces = findall(r\"\\s+\", txt)\n    commas = findall(r\"\
    ,\", txt)\n    if length(whitespaces) == 0 && length(commas) == 0\n        return\
    \ length(findall(r\"[a-z]\", txt))\n    elseif length(whitespaces) == 0\n    \
    \    return split(txt, \",\")\n    else\n        return split(txt, \" \")\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5qx5_yfv.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5qx5_yfv.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qx5_yfv.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qx5_yfv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5qx5_yfv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5qx5_yfv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qx5_yfv.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qx5_yfv.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp5qx5_yfv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qx5_yfv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfjn_e_jq.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Nothing to an object of type \n   \
    \ Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfjn_e_jq.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjn_e_jq.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjn_e_jq.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpfjn_e_jq.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfjn_e_jq.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfjn_e_jq.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfjn_e_jq.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpfjn_e_jq.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfjn_e_jq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findfirst(txt, r\"\\s\") != nothing\n        return split(txt,\
    \ \" \")\n    elseif findfirst(txt, \",\") != nothing\n        return split(txt,\
    \ \",\")\n    else\n        odd = 0\n        for i = 1:length(txt)\n         \
    \   if (ord(txt[i]) .& 1) == 1\n                odd += 1\n            end\n  \
    \      end\n        return odd\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm60r52ar.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::String, ::Regex)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpm60r52ar.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm60r52ar.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm60r52ar.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpm60r52ar.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::String, ::Regex)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpm60r52ar.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm60r52ar.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm60r52ar.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpm60r52ar.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm60r52ar.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n   txt = replace(txt, ' ', ',')\n   txt = replace(txt, '_', ',')\n\
    \   txt = replace(txt, '-', ',')\n   txt = replace(txt, '.', ',')\n   if findfirst(txt,\
    \ ',') == nothing\n      return length(findall(x -> x == true, [islower(txt[i])\
    \ && mod(i, 2) == 1 for i = 1:length(txt)]))\n   else\n      return split(txt,\
    \ ',')\n   end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzzq59qhe.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching replace(::String, ::Char, ::Char)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzzq59qhe.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzzq59qhe.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzzq59qhe.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzzq59qhe.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching replace(::String, ::Char, ::Char)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzzq59qhe.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzzq59qhe.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzzq59qhe.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt)\n    elseif ',' in txt\n\
    \        return split(txt, ',')\n    else\n        let r::Int64 = 0\n        for\
    \ (ind,x) in enumerate(txt)\n            let ind = ind + 1\n            if ind\
    \ % 2 == 1 && Int64(x) >= Int64('a') && Int64(x) <= Int64('z')\n             \
    \   r += 1\n            end\n        end\n        return r\n    end\nend\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp8wifwll4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8wifwll4.jl:1\n\
    in expression starting at /tmp/tmp8wifwll4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    return split(txt, [\" \", \",\"])[1]\nend\n# 1, 2\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphbj8b3_p.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::Vector{String}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] split_words(txt::String)\n\
    \     @ Main /tmp/tmphbj8b3_p.jl:11\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmphbj8b3_p.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmphbj8b3_p.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphbj8b3_p.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::String)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(!Matched::AbstractString,\
    \ ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, spl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbj8b3_p.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) != 0\n        return words\n\
    \    else\n        commas = split(txt, ',')\n        if length(commas) != 0\n\
    \            return commas\n        else\n            alpha = [char for char in\
    \ txt if 'a' <= char <= 'z']\n            return length(alpha) % 2\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpamto3sip.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpamto3sip.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpamto3sip.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpamto3sip.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpamto3sip.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpamto3sip.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpamto3sip.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpamto3sip.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpamto3sip.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpamto3sip.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt_splitted = split(txt)\n    n_words = length(txt_splitted)\n\
    \    if n_words > 1\n        return txt_splitted\n    elseif contains(txt, ',')\n\
    \        return split(txt, ',')\n    else \n        n_odd = 0\n        for w in\
    \ txt\n            n_odd += (ord(w) % 2 == 1) ? 1 : 0\n        end\n        return\
    \ n_odd\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpok84whr1.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpok84whr1.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpok84whr1.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpok84whr1.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpok84whr1.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpok84whr1.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpok84whr1.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpok84whr1.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpok84whr1.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpok84whr1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(\" \", txt) \n        return split(txt, \" \")\n  \
    \  elseif occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n \
    \       return length(filter(c -> c == 'a' || c == 'c' || c == 'e' || c == 'g'\
    \ || c == 'i' || c == 'k' || c == 'm' || c == 'o' || c == 'q' || c == 's' || c\
    \ == 'u' || c == 'w' || c == 'y', split(txt, \"\")))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx6g6uu72.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpx6g6uu72.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx6g6uu72.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6g6uu72.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpx6g6uu72.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpx6g6uu72.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx6g6uu72.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6g6uu72.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpx6g6uu72.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6g6uu72.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if !occursin(r\"[ ,]\", txt) # if txt contains spaces or\
    \ commas\n        return length(occursin(r\"[a-z]\", txt)) # return the number\
    \ of lower-case letters with odd order in the alphabet\n    elseif occursin(r\"\
    [ ,]\", txt) # if txt contains spaces or commas\n        return split(txt, r\"\
    [ ,]\") # split on whitespace, if no whitespaces exists in the text you should\
    \ split on commas\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpclm_s35l.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpclm_s35l.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpclm_s35l.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpclm_s35l.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpclm_s35l.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpclm_s35l.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpclm_s35l.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpclm_s35l.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpclm_s35l.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclm_s35l.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if txt == \"\"\n        return 0\n    end\n    cond1 = map(isequal(x\
    \ -> x), split(txt, \" \"))\n    cond2 = map(isequal(x -> x), split(txt, \",\"\
    ))\n    if (length(cond1) == 1 && cond1[1] == false) || (length(cond2) == 1 &&\
    \ cond2[1] == false)\n        return 0\n    end\n    if (length(cond1) > 1 &&\
    \ cond1[1] == false)\n        return split(txt, \" \")\n    end\n    if (length(cond2)\
    \ > 1 && cond2[1] == false)\n        return split(txt, \",\")\n    end\n    if\
    \ (length(cond1) == 1 && cond1[1] == true) || (length(cond2) == 1 && cond2[1]\
    \ == true)\n        count = 0\n        for i in 1:length(txt)\n            count\
    \ += ord(txt[i]) % 2 == 1 ? 1 : 0\n        end\n        return count\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprm6tmuh3.jl:38\n  Expression: candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n   Evaluated: 0 == [\"Hello\", \"\
    world!\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm6tmuh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm6tmuh3.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprm6tmuh3.jl:39\n  Expression: candidate(\"Hello,world!\")\
    \ == [\"Hello\", \"world!\"]\n   Evaluated: 0 == [\"Hello\", \"world!\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm6tmuh3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm6tmuh3.jl:37\ntest set: Error\
    \ During Test at /tmp/tmprm6tmuh3.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmprm6tmuh3.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprm6tmuh3.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprm6tmuh3.jl:37\ntest set:\
    \ Error During Test at /tmp/tmprm6tmuh3.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprm6tmuh3.jl:35\n"
  exit_code: 1
  status: SyntaxError
