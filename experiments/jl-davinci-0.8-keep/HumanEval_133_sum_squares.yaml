name: HumanEval_133_sum_squares
language: jl
prompt: "\"\"\"You are given a list of numbers.\n    You need to return the sum of\
  \ squared numbers in the given list,\n    round each element in the list to the\
  \ upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should\
  \ be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
  \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n \
  \   For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
  \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
  \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
  \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
  \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
  \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
  \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
completions: ["    return sum(ceil.(lst).^2)\nend", "    s = 0\n    for num in lst\n\
    \        s += round(Int64,num)^2\n    end\n    return s\nend", "    total = 0\n\
    \    for i in lst\n        total += round(i)^2\n    end\n    return total\nend",
  "    sum_squares_temp = 0\n    for x in lst\n        sum_squares_temp += ceil(x)^2\n\
    \    end\n    return sum_squares_temp\nend", "    total = 0\n    for i in lst\n\
    \        total += ceil(i)^2\n    end\n    return total\nend", "    s = 0\n   \
    \ for i in 1:length(lst)\n        s += (ceil(lst[i]))^2\n    end\n    return s\n\
    end", "    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n    return\
    \ sum\nend", "    lst = ceil.(lst)\n    sum = 0\n    for i in lst\n        sum\
    \ += i^2\n    end\n    return sum\nend", "    tmp = ceil.(lst)\n    sum = 0.0\n\
    \    for i in tmp\n        sum += i*i\n    end\n    return Int64(sum)\nend", " \
    \   s = 0\n    for i in 1:length(lst)\n        s += ceil(lst[i])^2\n    end\n\
    \    return s\nend", "    return sum(Int64.(ceil.(lst)) .^ 2)\nend", "       \
    \ \"\"\"\n        Return the sum of the squared input vector elements after rounding\
    \ each element to its upper integer\n        \"\"\"\n    \n        # Rounding\
    \ to upper integer\n        [ceil(x) for x in lst]\n        \n        # Sum of\
    \ the squared elements\n        sum(x^2 for x in lst)\n    end", "    return sum(ceil.(lst).^2)\n\
    end", "    new_lst = ceil.(lst)\n    return sum(new_lst.^2)\nend", "    res =\
    \ 0\n    for i = 1:length(lst)\n        res += ceil(Int64, lst[i])^2\n    end\n\
    \    return res\nend", "    s = 0\n    for x in lst\n        s += ceil(x)^2\n\
    \    end\n    return s\nend", "    nums=[]\n    for x in lst\n        push!(nums,ceil(x))\n\
    \    end\n    square_sum=0\n    for x in nums\n        square_sum += x^2\n   \
    \ end\n    return square_sum\nend", "    # create new var sum_squares \n    sum_squares\
    \ = 0\n    # loop over lst \n    for i in lst\n        # square every elemenet\
    \ in lst first \n        i = i^2\n        # round each element to the upper int\
    \ (ceiling) \n        i = ceil(i)\n        # sum the squares \n        sum_squares\
    \ += i\n    end\n    # return sum_squares\n    return sum_squares\nend", "   \
    \ total::Int64 = 0\n    for n in lst\n        n_squared = ceil(n)^2\n        total\
    \ += n_squared\n    end\n    return total\nend", "    lst = ceil.(lst)\n    return\
    \ sum(lst.^2)\nend", "    new_lst = Int64[]\n    for elem in lst\n        push!(new_lst,ceil(elem))\n\
    \    end\n    return sum([x^2 for x in new_lst])\nend\n    ", "    # your code\
    \ here\n    for i in 1:length(lst)\n        if lst[i] < 0\n            lst[i]\
    \ = ceil(lst[i])\n        else\n            lst[i] = floor(lst[i])\n        end\n\
    \    end\n    return sum(map(x->x^2,lst))\nend", "    \n     #use the map function\
    \ to round each element in the list\n    upperlst = map(x->ceil(x),lst)\n    #squares\
    \ each element in the list\n    powerlst = map(x->x^2,upperlst)\n    #sum up all\
    \ the elements in the list\n    output = sum(powerlst)\n    return output\nend",
  "    sum = 0\n    for i in lst\n        sum += Int64(ceil(i)*ceil(i))\n    end\n\
    \    return sum\nend", "    # your code goes here\n    sum = 0\n    for i in lst\n\
    \        sum += ceil(i)*ceil(i)\n    end\n    return sum\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    temp = [ceil(i) for i in lst]\n\
    \    return sum([i^2 for i in temp])\nend", "    #loop through the list and square\
    \ each element in the list,\n    # Then get the sum of the squared numbers in\
    \ the list\n    return sum( ceil.(lst).^2)\nend", "    i = length(lst)\n    s\
    \ = 0\n    while i>0\n        s = s + Int64(ceil(lst[i]^2))\n        i = i-1\n\
    \    end\n    return s\nend", "    return sum(round.(Int64,lst).^2)\nend", " \
    \   lst = map(round, lst)\n    s = 0\n    for num in lst\n        s += num^2\n\
    \    end\n    return s\nend", "    sum = 0\n    for i in 1:length(lst)\n     \
    \   lst[i] = ceil(lst[i])\n        sum += lst[i]^2\n    end\n    return sum\n\
    end\n ", "   #Your code here...\nend", "    sum = 0\n    for i in lst\n      \
    \  sum = sum + ceil(i)^2\n    end\n    return sum\nend", "    lst = ceil.(lst)\n\
    \    sum = 0\n    for i in lst\n        sum += i*i\n    end\n    return sum\n\
    end", "    \n    \n    \n    counter::Int64 = 0 \n    for i in 1:length(lst)\n\
    \        \n        lst[i] = ceil(lst[i])\n        lst[i] = lst[i] * lst[i]\n \
    \       counter += lst[i]\n        \n        \n    end\n    \n    return counter\n\
    \    \nend", "    # Your code here\nend", "    return sum([floor(i^2) for i in\
    \ lst])\nend", "    lst_ceil = ceil.(lst)\n    sum = 0\n    for i in lst_ceil\n\
    \        sum += i^2\n    end\n    return sum\nend", "    total = 0\n    for i\
    \ = 1:length(lst)\n        if lst[i]<0\n            lst[i] = -lst[i]\n       \
    \ end\n        total = total + ceil(lst[i])^2\n    end\n    return total\nend",
  " \n    new_list = []\n    for i in lst\n        new_list = push!(new_list, ceil(i)^2)\n\
    \    end\n   sum(new_list)\nend", "    for i in lst\n        ceil(i)\n    end\n\
    \    sum(lst.^2)\nend", "    return sum(ceil.(lst).^2)\nend", "    sum = 0\n \
    \   for i in lst\n        sum += Int64(ceil(i))*Int64(ceil(i))\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n\
    \    end\n    return sum\nend", "    return sum([ceil(x)^2 for x in lst])\nend",
  "    # lst is a list of numbers\n    # you can round each element in the list by\
    \ calling ```int(round(x))```\n    # Note you do not need to call `round` if the\
    \ list is integers.\n    # iterate over each element in the list, then square\
    \ it and sum it up\n    # do not use `sum` function, you need to implement it\
    \ on your own\n    result = 0\n    for x in lst\n        #YOUR CODE HERE\n   \
    \     result += round(x)*round(x)\n    end\n    return result\nend", "    s =\
    \ 0\n    for i in lst\n        s += ceil(i)^2\n    end\n    return s\nend", " \
    \   lst = ceil.(lst)\n    sum_of_squares = 0\n    for i = 1:length(lst)\n    \
    \    sum_of_squares += lst[i]^2\n    end\n    return sum_of_squares\nend", " \
    \   nums = ceil.(lst)\n    return sum(nums.^2)\nend", "    sum = 0\n    for i\
    \ in lst\n        sum += ceil(i) * ceil(i)\n    end\n    return sum\nend", " \
    \   return sum(ceil.(lst).^2)\nend\n ", "    return sum(ceil.(lst).^2)\nend",
  "    t = Int64[]\n    for x in lst\n        if x % 1 == 0.0\n            push!(t,x)\n\
    \        else\n            x = ceil(x)\n            push!(t,x)\n        end\n\
    \    end\n    return sum(t.^2)\nend", "    x = 0\n    for i in lst\n        x\
    \ += ceil(i)^2\n    end\n    return x\nend", "    sum = 0\n    for i in lst\n\
    \        sum += ceil(i)^2\n    end\n    return sum\nend", "    return Int64(sum(lst.^2))\n\
    end", "    return sum([ceil(x)^2 for x in lst])\nend", "    return 0 \nend\n#\
    \ test code \n# make sure to update this next cell!\nlst = [1,2,3]\nprintln(\"\
    sum of sqrs = \", sum_squares(lst))", "    lst = ceil.(lst)\n    sum_squares =\
    \ 0\n    for i in lst\n        sum_squares += i*i\n    end\n    return sum_squares\n\
    end", "    return Int64(sum(ceil.(lst).^2))\nend", "    c = map(x->ceil(x),lst)\n\
    \    s = map(x->x^2,c)\n    return reduce(+,s)\nend", "    s = 0\n    for x in\
    \ lst\n        s += round(Int64,x)^2\n    end\n    return s\nend", "    b=ceil.(lst)\n\
    \    c=b.^2\n    d=sum(c)\n    return d\nend\n ", "    temp = ceil.(lst).^2\n\
    \    return sum(temp)\nend", "    newsum = 0\n    for i in 1:length(lst)\n   \
    \     newsum += ceil(lst[i])^2\n    end\n    return newsum\nend", "  #Ceiling()\
    \ \n  #return the sum of squared numbers in the given list,\n  #round each element\
    \ in the list to the upper int(Ceiling) first.\n  sum = 0\n  for i in lst\n  \
    \  sum = sum + Ceil(i)^2\n  end\n  return sum\nend", "    ceil(x) = ceil(Int64,\
    \ x)\n    total = 0\n    for i = 1:length(lst)\n        total += ceil(lst[i])^2\n\
    \    end\n    return total\nend", "    return sum(ceil.(lst).^2)\nend", "    sum\
    \ = 0\n    for i in 1:length(lst)\n        sum += ceil(lst[i])^2\n    end\n  \
    \  return sum\nend", "    return sum(round.(Int64,x)^2 for x in lst)\nend", " \
    \   #lst_new=lst-1;\n    ceil(a::Float64) = Int64(ceil(a))\n    #lst_new=map(ceil,lst)\n\
    \    #vcat(lst_new,lst)\n    lst_new=apply(ceil,lst)\n    return sum(lst_new.*lst_new)\n\
    end", "    return sum(map(x->ceil(x)^2, lst))\nend", "    s=0\n    for i in lst\n\
    \        x=ceil(i)\n        s=s+x^2\n    end\n    return s\n    \n    \nend",
  "    return sum(ceil.(lst).^2)\nend\nlst = [1,2,3]\nsum_squares(lst)", "    # sum\
    \ of squared numbers\n    num = 0\n    for i in lst\n        num += ceil(i)^2\n\
    \    end\n    return num\nend", "    sum = 0\n    for i in lst\n        sum +=\
    \ Int64(ceil(i))^2\n    end\n    return sum\nend", "    total = 0\n    for i =\
    \ 1:length(lst)\n        lst[i] = ceil(lst[i])\n        lst[i] = lst[i]^2\n  \
    \      total += lst[i]\n    end\n    return total\nend", "    #Your code here\n\
    \    lst1 = []\n    for i in lst\n        x =ceil(i)\n        push!(lst1,x)\n\
    \    end\n    squared_list = []\n    for j in lst1\n        y = j^2\n        push!(squared_list,y)\n\
    \    end\n    z = sum(squared_list)\nend", "    # your code goes here\n    return\
    \ 0\nend", "    return sum(ceil.(x)^2 for x in lst)\nend", "    u_lst = ceil.(lst)\n\
    \    return round(sum(u_lst.^2))\nend", "    total = 0\n    for i in 1:length(lst)\n\
    \        total += ceil(lst[i])*ceil(lst[i])\n    end\n    return total\nend",
  "    return sum(Int.(ceil.(lst)).^2)\nend\n ", "    sum=0\n    for i in lst\n  \
    \      sum=sum+ceil(i)*ceil(i)\n    end\n    return sum\nend", "    # your code\
    \ here\n    lst = ceil.(lst)\n    return sum(abs2, lst)\nend", "    return sum(lst\
    \ .^ 2) \nend", "    return sum(ceil.(lst).^2)\nend", "    # your code here\n\
    \    y = 0\n    for i in 1:length(lst)\n        y = y + round(Int64, ceil(lst[i]))\
    \ ^ 2\n    end\n    return y\nend\n \n@assert sum_squares([1,2,3]) == 14\n@assert\
    \ sum_squares([1,4,9]) == 98\n@assert sum_squares([1,3,5,7]) == 84\n@assert sum_squares([1.4,4.2,0])\
    \ == 29\n@assert sum_squares([-2.4,1,1]) == 6\n \n \n ", "    s = 0\n    for i\
    \ in 1:length(lst)\n        s += round(Int64,ceil(lst[i]^2))\n    end\n    return\
    \ s\nend\nsum_squares([1,2,3])\nsum_squares([1,4,9])\nsum_squares([1,3,5,7])\n\
    sum_squares([1.4,4.2,0])\nsum_squares([-2.4,1,1])", "    return sum([ceil(x)^2\
    \ for x in lst])\nend \n@testset \"Testing the square\" begin\n    @test sum_squares([1,2,3])\
    \ == 14\n    @test sum_squares([1,4,9]) == 98\n    @test sum_squares([1,3,5,7])\
    \ == 84\n    @test sum_squares([1.4,4.2,0]) == 29\n    @test sum_squares([-2.4,1,1])\
    \ == 6\nend", "    n=length(lst)\n    sum=0\n    for i in 1:n\n        sum+=(ceil(lst[i]))^2\n\
    \    end\n    return sum\nend", "    \n    sum_sqr = 0 \n    #println(lst)\n \
    \   for j in 1:length(lst)\n        sum_sqr += ceil(Int64,lst[j])^2\n    end\n\
    \    \n    return sum_sqr\nend", "    new_lst = [ceil(lst[i]) for i in 1:length(lst)]\n\
    \    return sum(x->x^2, new_lst)\nend", "   lst .= ceil.(lst)\n    return sum(x->x^2,\
    \ lst)\nend\n\"\"\"You are given a list of numbers.\n    You need to return the\
    \ sum of squared numbers in the given list,\n    round each element in the list\
    \ to the lower int(Floor) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 13\n    For lst = [1,4,9] the output should be 80\n    For lst = [1,3,5,7]\
    \ the output should be 63\n    For lst = [1.4,4.2,0] the output should be 16\n\
    \    For lst = [-2.4,1,1] the output should be 3\n    ", "    return sum(ceil.(lst)\
    \ .^ 2)\nend", "    \n    result = 0\n    for i in 1:length(lst)\n        \n \
    \       result += round(Int64,lst[i])^2\n        \n    end\n    \n    return result\n\
    end\n    \n    \n    \n        \n        ", "    sum=0\n    for x in lst\n   \
    \     x=ceil(x)\n        sum += x*x\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for i = 1:length(lst)\n        sum += Int64(ceil(lst[i]^2))\n    end\n\
    \    return sum\nend", "    temp = map(x-> ceil(x)^2, lst)\n    return sum(temp)\n\
    end", "    final_sum = 0\n    for elem in lst\n        final_sum += round(elem)^2\n\
    \    end\n    return final_sum\nend", "    suma = 0\n    for i in lst\n      \
    \  suma += ceil(i)*ceil(i)\n    end\n    return suma\nend", "    sum([ceil(x)^2\
    \ for x in lst])\nend", "    s=0\n    for i in lst\n        s+=ceil(i)^2\n   \
    \ end\n    return s\nend", "    # initialize sum to 0\n    sum_of_squares = 0\n\
    \    # iterate through all the elements in the list\n    for element in lst\n\
    \        # update the sum with the squared value of the elements in the list\n\
    \        sum_of_squares += ceil(element) ^ 2\n    end\n    # return the sum of\
    \ squares\n    return sum_of_squares\nend", "    # In Julia if you need to use\
    \ length you can use the \"length\" function\n    # In Julia you do not need to\
    \ specify a return type\n    # In Julia functions are written as function function_name(arguments)::return_type\n\
    \    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n    return\
    \ sum\nend", "    return sum(map(ceil, lst).^2)\nend", "    for i in eachindex(lst)\n\
    \        lst[i] = ceil(lst[i])\n    end\n    return sum(lst.^2)\nend", "    n::Int64\
    \ = Int64(0)\n    for i in lst\n        n += ceil(i)^2\n    end\n    return n\n\
    end\n\"\"\"Return the distance from the point (x1,y1) to the origin.\n    Example:\n\
    \    For (x1,y1) = (-2,2) the output should be 4\n    For (x1,y1) = (1,-1) the\
    \ output should be 2\n    For (x1,y1) = (2,-2) the output should be 4.47213595499958",
  "    x = 0\n    for i in 1:length(lst)\n        x = x + ceil(lst[i])^2\n    end\n\
    \    return x\nend", "    lst = map(round, lst)\n    return sum(lst.^2)\nend",
  "  tot = 0 \n  for i in lst \n    tot += round(i)^2\n  end\n  return tot\nend",
  "    sum = 0\n    for i in 1:length(lst)\n        sum += ceil(lst[i])^2\n    end\n\
    \    return sum\nend", "    \"\"\"\n    Arguments:\n        lst (vector of float):\
    \ this argument contains values that are going to be \n            squared, rounded\
    \ to the upper integer, and summed.\n    Returns:\n        Int64: sum of the squared\
    \ values.\n    \"\"\"\n    lst = ceil.(lst) # turns all floats into Int64, rounds\
    \ to the upper int\n    squared = map(lst) do x\n        x^2\n    end\n    return\
    \ sum(squared)\nend", "    \n    s = map(round, lst)\n    return sum(s.^2)\n \
    \   \n    \n    \nend", "    total = 0 \n    for x in lst \n        total += ceil(x)^2\n\
    \    end\n    return total\nend", "    return sum(ceil.(x).^2 for x in lst)\n\
    end", "    sum = 0\n    for i in lst\n        sum += round(Int64,i^2)\n    end\n\
    \    return sum\nend", "    answer = 0\n    for i in lst\n        answer += ceil(i)^2\n\
    \    end\n    return answer\nend", "   lst = map(Float64 -> ceil(Float64), lst)\n\
    \   return sum(map(x -> x*x, lst))\nend", "    return  ceil.(lst) |> sumsqr \n\
    end\nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([1,4,9]))\nprintln(sum_squares([1,3,5,7]))\n\
    println(sum_squares([1.4,4.2,0]))\nprintln(sum_squares([-2.4,1,1]))", "    _sum\
    \ = 0\n    for i in lst\n        _sum += round(Int64,ceil(i))^2\n    end\n   \
    \ return _sum\nend", "    sum = 0\n    for val in lst\n        rounded_val = ceil(val)\n\
    \        sum += Int64(rounded_val^2)\n    end\n    return sum\nend", "    # Initialize\
    \ sum \n    sum = 0\n    for i in lst \n        sum += ceil(Int64,i^2)\n    end\n\
    \    return sum\nend", "    lst = ceil.(lst)\n    sum = 0\n    for i in lst\n\
    \        sum = sum + i^2\n    end\n    return sum\nend", "    sum = 0\n    for\
    \ i in lst\n        sum = sum + ceil(i)^2\n    end\n    return sum\nend", "  \
    \  total::Int64 = 0\n    for x::Float64 in lst\n        total += ceil(x)^2\n \
    \   end\n    return total\nend", "    x = 0\n    for i in lst\n        x += ceil(i)^2\n\
    \    end\n    return x\nend", "    # Add your code here\n    suma=0\n    for i\
    \ in lst\n        suma=suma+ceil(i)^2\n    end\n    return suma\nend", "    return\
    \ sum(ceil.(lst).^2)\nend", "    temp = ceil.(lst).^2\n    temp = sum(temp)\n\
    \    return Int64(temp)\nend\nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([1,4,9]))\n\
    println(sum_squares([1,3,5,7]))\nprintln(sum_squares([1.4,4.2,0]))\nprintln(sum_squares([-2.4,1,1]))",
  "    return sum(round.(Int64,lst).^2)\nend", "    \"\"\" (flt)->int\n    Returns\
    \ the sum of the squares of the numbers in the given list\n    Input: lst- a list\
    \ of floats\n    Output: the sum of the squares of the numbers in the given list\n\
    \    \"\"\"\n    sum = 0 #int variable to store the sum\n    for i in lst\n  \
    \      sum += round(Int64, i^2)\n    end\n    return sum\nend", "    # Write your\
    \ code below\n    a=[]\n    for i in lst\n        push!(a,ceil(i))\n    end\n\
    \    return sum(map(x->x^2,a))\nend", "    # convert to positive values\n    positive_lst\
    \ = [ceil(x) for x in lst]\n    # return sum of square of elements\n    return\
    \ sum([x^2 for x in positive_lst])\nend", "    return sum(map(x->round(Int64,\
    \ ceil(x)), map(x->x^2, lst)))\nend", "    sum = 0\n    for i in lst\n       \
    \ sum += Int64(ceil(i)^2)\n    end\n    return sum\nend", "    lst = ceil.(lst)\n\
    \    return sum(lst .^ 2)\nend", "    sum = 0 \n    for i in lst \n        sum\
    \ += round(i)*round(i)\n    end\n    return sum\nend", "    n = length(lst)\n\
    \    ans = 0\n    for i in 1:n\n        ans += trunc(Int64,ceil(lst[i]))^2\n \
    \   end\n    return ans\nend\nprintln(sum_squares([1,2,3]))\nprintln(sum_squares([1,4,9]))\n\
    println(sum_squares([1,3,5,7]))\nprintln(sum_squares([1.4,4.2,0]))\nprintln(sum_squares([-2.4,1,1]))",
  "    sum = 0\n    for i in lst\n        if i < 0\n            sum += ceil(i)^2\n\
    \        else\n            sum += floor(i)^2\n        end\n    end\n    return\
    \ sum\nend", "    \n    # get the squared of each element and round them to upper\
    \ int\n    squared = round.(Int64, lst.^2)\n    \n    # sum up all the elements\
    \ \n    return sum(squared)\n    \nend", "    int_lst = map(x->ceil(x), lst)\n\
    \    return sum(x->x^2, int_lst)\n    \nend\nlst = [1,2,3]", "    newsum = 0\n\
    \    for (index, element) in enumerate(lst)\n        # println(index)\n      \
    \  if element >= 0\n            # println(element)\n            # println(ceil(element))\n\
    \            lst[index] = ceil(element)\n            newsum += lst[index] * lst[index]\n\
    \        else\n            lst[index] = floor(element)\n            newsum +=\
    \ lst[index] * lst[index]\n        end\n    end\n    return newsum\nend\n# println(sum_squares([1,4,9]))\n\
    # println(sum_squares([1,3,5,7]))\n# println(sum_squares([1.4,4.2,0]))\n# println(sum_squares([-2.4,1,1]))",
  "    s = 0\n    for i in 1:length(lst)\n        s += (ceil(lst[i]))^2\n    end\n\
    \    return s\nend", "    sum = 0\n    for item in lst\n        sum += item^2\n\
    \    end\n    return sum\nend", "    @assert lst != nothing\n    return sum(round.(Int64,lst)\
    \ .^ 2)\nend", "    # Put your code here\n    int(ceil(x) for x in lst)\n    for\
    \ x in lst\n        x^2\n        sum(x)\nend\n \nif __name__ == \"__main__\":\
    \ \n    lst = [1, 2, 3] \n    print(sum_squares(lst)) \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    ", "    sum = 0\n    lst = ceil.(lst)\n\
    \    for i in lst\n        sum += i*i\n    end\n    return sum\nend", "    return\
    \ sum(round.(lst).^2)\nend", "    return Int64(sum(map(x->ceil(x)*ceil(x),lst)))\n\
    end", "    return sum(ceil.(x)*ceil.(x) for x in lst)\nend", "    (sum(map(x->ceil(Int64,x)^2,lst)))\n\
    end", "    s = 0\n    for i = 1:length(lst)\n        s += ceil(lst[i])^2\n   \
    \ end\n    return s\nend", "    \n    \n    \nend", "    c = 0\n    for i in lst\n\
    \        c += ceil(i)^2\n    end\n    return c\nend", "    \"\"\"returns the sum\
    \ of squared numbers\"\"\"\n    sum = 0.0\n    for i in lst\n        sum += i^2\n\
    \    end\n    return convert(Int64,ceil(sum))\nend", "   return sum([x^2 for x\
    \ in lst]) |> Int\nend", "    s = sum(map(ceil, lst))\n    return s*s\nend ",
  "    return sum([ceil(i)^2 for i in lst])\nend", "    ceil_lst = map(x->ceil(x),\
    \ lst)\n    sum_sq = 0\n    for i in ceil_lst\n        sum_sq += i^2\n    end\n\
    \    return sum_sq\nend", "    sum = 0\n    for x in lst\n        sum += round(x)^2\n\
    \    end\n    return sum\nend\nsum_squares([1,2,3])\nsum_squares([1,4,9])\nsum_squares([1,3,5,7])\n\
    sum_squares([1.4,4.2,0])\nsum_squares([-2.4,1,1])", "    return sum(lst.^2 |>\
    \ ceil)\nend", "    sum = 0\n    for i in lst\n        x = ceil(Int64, i)\n  \
    \      sum += x^2\n    end\n    return sum\nend", "    return sum(ceil.(lst).^2)\n\
    end", "    lst = map(round, lst)\n    lst = map(x -> x*x, lst)\n    return sum(lst)\n\
    end", "    ceil_sum = 0\n    for i in lst\n        ceil_sum += ceil(i)\n    end\n\
    \    return ceil_sum^2\nend", "    n = length(lst)\n    new_list = zeros(n)\n\
    \    for i in 1:n\n        new_list[i] = lst[i]^2\n    end\n    return sum(new_list)\n\
    end\nsum_squares([1,2,3])\nsum_squares([1,4,9])\nsum_squares([1,3,5,7])\nsum_squares([1.4,4.2,0])\n\
    sum_squares([-2.4,1,1])", "    out = []\n    for x in lst\n        push!(out,\
    \ round(Int64, x)^2)\n    end\n    return sum(out)\nend", "    \"\"\"\n    Function\
    \ that computes the sum of squared numbers, in the given list,\n    round each\
    \ element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    new_lst\
    \ = copy(lst)\n    for i in 1:length(new_lst)\n        new_lst[i] = ceil(new_lst[i])\n\
    \    end\n    return sum(new_lst.^2)\nend", "    \"\"\"Returns the sum of the\
    \ squared ceiled numbers in the list\n    Input: \n        lst (list): list of\
    \ numbers\n    Output:\n        sum_sqr (int): sum of the squared numbers.\n \
    \   \"\"\"\n    sum_sqr = 0\n    for i in lst\n        sum_sqr += ceil(i)^2\n\
    \    end\n    return sum_sqr\nend", "    d = ceil.(lst)\n    d = d.^2\n    return\
    \ sum(d)\nend", "    sum_squares=0\n    for elem in lst\n        sum_squares=sum_squares+ceil(elem)*ceil(elem)\n\
    \    end\n    return sum_squares\nend", "    return sum(ceil.(i)^2 for i in lst)\n\
    end", "    sum_squares = 0\n    for i = 1:length(lst)\n        sum_squares +=\
    \ ceil(lst[i])*ceil(lst[i])\n    end\n    return sum_squares\nend", "    \n  \
    \  res = 0\n    for i in lst\n        res += ceil(i)^2\n    end\n    return res\n\
    end", "    sum(ceil.(lst) .^ 2)\nend", "    \n    \n    \n    ## YOUR CODE HERE\
    \ ##\n    sum = 0\n    for i in lst\n        sum += ceil(i)^2\n    end\n    return\
    \ sum\nend", "    j = 0 \n    for i in lst \n        j += round(Int64,ceil(i)^2)\n\
    \    end\n    return j\nend ", "    s = 0\n    for i in 1:length(lst)\n      \
    \  if(lst[i] < 0)\n            s += ceil(lst[i])^2\n        else\n           \
    \ s += floor(lst[i])^2\n        end\n    end\n    return s\nend", "    total =\
    \ 0\n    for i in lst\n        total += ceil(i)^2\n    end\n    return total\n\
    end", "    res = 0\n    for i in 1:length(lst)\n        res += ceil(lst[i])^2\n\
    \    end\n    return res\nend", "    sum = 0\n    for x in lst\n        sum =\
    \ sum + ceil(x) * ceil(x)\n    end\n    return sum\nend", "    s=0\n    for i=1:length(lst)\n\
    \        s+=round(Int64,ceil(lst[i]))^2\n    end\n    return s\nend", "    return\
    \ sum(Int64(ceil.(lst)) .^ 2)\nend", "    s = 0\n    for i in lst\n        p =\
    \ ceil(i)\n        s += p*p\n    end\n    return s\nend", "    \"\"\"\n    Args:\n\
    \        lst: list of numbers", "    sum = 0\n    for i in lst\n        sum +=\
    \ ceil(i)^2\n    end\n    return sum\nend", "    s = 0\n    for i = lst\n    \
    \    s += ceil(i)^2\n    end\n    return s\nend\nprintln(sum_squares([1,2,3]))\n\
    println(sum_squares([1,4,9]))\nprintln(sum_squares([1,3,5,7]))\nprintln(sum_squares([1.4,4.2,0]))\n\
    println(sum_squares([-2.4,1,1]))", "    \n    \n    sum_total = 0\n    lst = ceil.(lst)\n\
    \    for i in lst\n        square = i^2\n        sum_total += square\n    end\n\
    \    return sum_total\nend", "    \"\"\"\n    Returns the sum of the squares of\
    \ the elements in the list \n    \"\"\"\n    nlst = []\n    for i in lst\n   \
    \     push!(nlst,ceil(i))\n    end\n    return sum(x -> x^2, nlst)\nend", "  \
    \  return sum(ceil.(abs.(lst)).^2)\nend", "    suma = 0\n    for i \u2208 lst\n\
    \        suma +=  round(Int64, ceil(i^2))\n    end\n    return suma\nend", " \
    \   return sum([(ceil(i))^2 for i in lst])\nend", "    sum = 0 \n    for i in\
    \ lst \n        sum += round(i)^2\n    end\n    return sum\nend ", "    lst =\
    \ ceil.(lst)\n    return sum(x->x^2, lst)\nend", "    return sum([ceil(x)^2 for\
    \ x in lst])\nend", "  # Your code here\n  return 0\nend", "    return Int64(ceil(sum(x*x\
    \ for x in lst)))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
