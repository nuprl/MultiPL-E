name: HumanEval_88_sort_array
language: jl
prompt: "\"\"\"\n    Given an array of non-negative integers, return a copy of the\
  \ given array after sorting,\n    you will sort the given array in ascending order\
  \ if the sum( first index value, last index value) is odd,\n    or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n\n    Note:\n\
  \    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n\
  \    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
  \ 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n \
  \   \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4,\
  \ 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6])\
  \ == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
  \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23,\
  \ 11]) == [23, 21, 14, 11])\nend\n"
completions: ["    if length(array) > 0\n        index_sum = array[1] + array[end]\n\
    \        if index_sum % 2 == 0\n            sort(array, rev=true)\n        else\n\
    \            sort(array)\n        end\n    else\n        array\n    end\nend",
  "    if length(array) == 0 || length(array) == 1\n        return array\n    end\n\
    \    if (array[1] + array[end]) % 2 == 0\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend", "    n = length(array)\n\
    \    return ifelse( sum( [array[1], array[n]] ) % 2 == 0, sort(array, rev=true),\
    \ sort(array) )\nend", "    \n    if length(array) == 0\n        return []\n \
    \   end\n    \n    if length(array) == 1\n        return array\n    end\n    \n\
    \    if length(array) > 1\n        \n        if sum(array[1], array[end]) % 2\
    \ == 0\n            return sort(array, rev=true)\n        else\n            return\
    \ sort(array)\n        end\n        \n    end\n    \nend", "    first = array[1]\n\
    \    last = array[end]\n    sum = first + last\n    if isodd(sum)\n        sort(array)\n\
    \    else\n        sort(array, rev=true)\n    end\nend", "    if isempty(array)\
    \ || length(array) == 1\n        return array\n    end\n    if (array[1] + array[end])\
    \ % 2 == 0 \n        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    idx = 2:length(array)\n    if abs(array[1] - array[end])%2\
    \ == 0\n        return sort(array, rev=true)[idx]\n    else\n        return sort(array)[idx]\n\
    \    end\nend", "    \n    sum_array = sum(array[1], array[end])\n    \n    if\
    \ sum_array == 0 || sum_array % 2 == 0\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend", "    # sort the given array\
    \ in ascending order if the sum( first index value, last index value) is odd,\n\
    \    # or sort it in descending order if the sum( first index value, last index\
    \ value) is even.\n    is_even = first(array) + last(array) % 2 == 0\n    if is_even\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    a = copy(array)\n    if a == [] || a == [5] return a end\n\
    \    if sum(1, lastindex(a)) % 2 == 0 \n        sort!(a, rev=true)\n    else\n\
    \        sort!(a)\n    end\n    return a\nend", "    if isempty(array)\n     \
    \   return []\n    end\n    if length(array) == 1\n        return array\n    end\n\
    \    if (array[1] + array[end]) % 2 == 0\n        reverse!(sort(array))\n    else\n\
    \        sort(array)\n    end\nend", "    if length(array) == 0\n        return\
    \ array\n    end\n    if ! isodd(array[1] + array[end])\n        return sort(array,\
    \ rev=true)\n    end\n    return sort(array)\nend", "    # your code here\nend\n\
    \ ", "    array_copy = copy(array)\n    sort!(array_copy)\n    sum = array[1]\
    \ + array[end]\n    if mod(sum, 2) == 0\n        return reverse(array_copy)\n\
    \    else\n        return array_copy\n    end\nend", "    #your code here\nend\n\
    \ ", "    if length(array) == 0\n        return array\n    end\n    if length(array)\
    \ == 1\n        return array\n    end\n    if sum(array[1], array[end]) % 2 ==\
    \ 0\n        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    if length(array) == 0 || length(array) == 1\n        return\
    \ array\n    end\n    sum_index = array[1] + array[end]\n    if sum_index % 2\
    \ == 0\n        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    array_flipped = false\n    i = 1\n    j = length(array)\n\
    \    if (array[i] + array[j]) % 2 == 0 \n        array_flipped = true\n    end\n\
    \    if array_flipped\n        array = sort(array, rev=true)\n    else\n     \
    \   array = sort(array)\n    end\n    return array\nend", "    \n    array_length\
    \ = length(array)\n    left = 1\n    right = array_length\n    \n    while left\
    \ < right\n        \n        sum_of_indices = array[left] + array[right]\n   \
    \     \n        if sum_of_indices % 2 == 0\n            # save the position of\
    \ the smaller value\n            min_index = if array[left] < array[right]\n \
    \               left\n            else\n                right\n            end\n\
    \            # we need to make the swap.\n            # first, save the smaller\
    \ value.\n            min_value = array[min_index]\n            # swap the smaller\
    \ value with the greater value.\n            array[min_index] = array[left]\n\
    \            array[left] = min_value\n            # increase the left pointer.\n\
    \            left += 1\n        else\n            # swap the first value with\
    \ the last value.\n            # first, save the last value.\n            max_value\
    \ = array[right]\n            # swap the first value with the last value.\n  \
    \          array[right] = array[left]\n            array[left] = max_value\n \
    \           # decrease the right pointer.\n            right -= 1\n        end\n\
    \        \n    end\n    \n    return array\nend\n ", "    # your code here\nend",
  "    n = length(array)\n    for i in 1:n\n        for j in 1:n-i\n            if\
    \ (array[j] > array[j+1]) == (n % 2 == 0)\n                tmp = array[j]\n  \
    \              array[j] = array[j+1]\n                array[j+1] = tmp\n     \
    \       end\n        end\n    end\n    return array\nend", "  new_array = copy(array)\n\
    \  if length(new_array) > 0\n    first_element = new_array[1]\n    last_element\
    \ = new_array[end]\n    if isodd(first_element + last_element)\n      sort!(new_array)\n\
    \    else\n      sort!(new_array, rev=true)\n    end\n  end\n  return new_array\n\
    end", "    if length(array) == 0\n        return []\n    end\n    if mod(array[1]\
    \ + array[end], 2) == 0\n        return sort(array, rev=true)\n    else\n    \
    \    return sort(array)\n    end\nend", "    n = length(array)\n    if n == 0\
    \ return [] end\n    is_odd(x) = x % 2 == 1\n    is_even(x) = x % 2 == 0\n   \
    \ if is_odd(array[1] + array[end])\n        sort(array)\n    else\n        sort(array,\
    \ rev=true)\n    end\nend", "    \n    if sum(first(array), last(array)) % 2 ==\
    \ 0\n        sort(array, rev=true)\n    else\n        sort(array)\n    end\n \
    \   \nend", "    array[1], array[end] = (array[1] < array[end] ? (array[1], array[end])\
    \ : (array[end], array[1]))\n    odd = 2:2:length(array)\n    even = odd .- 1\n\
    \    if sum(array[1], array[end]) % 2 == 0\n        array[odd] = sort(array[odd],\
    \ rev=true)\n        array[even] = sort(array[even])\n    else\n        array[odd]\
    \ = sort(array[odd])\n        array[even] = sort(array[even], rev=true)\n    end\n\
    \    return array\nend", "    if isempty(array)\n        return []\n    end\n\
    \    if length(array) == 1\n        return array\n    end\n    if isodd(array[1]\
    \ + array[end])\n        array = sort(array)\n    else\n        array = sort(array,\
    \ rev=true)\n    end\n    return array\nend", "    # @TODO: write your code here\n\
    \    # return []\nend", "    if iseven(length(array))\n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend", "    \n    odd\
    \ = isodd(array[1] + array[end])\n    \n    if odd\n        sort(array)\n    else\n\
    \        sort(array, rev=true)\n    end\nend", "    # write your code here\nend",
  "    if length(array) == 0\n        return array\n    end\n    if sum(array[1],\
    \ array[end]) % 2 == 0\n        return sort(array, rev=true)\n    else\n     \
    \   return sort(array)\n    end\nend", "    n = length(array)\n    if n == 0\n\
    \        return array\n    end\n    s = sum(array[1], array[n])\n    if s % 2\
    \ == 0\n        reverse!(sort!(array))\n    else\n        sort!(array)\n    end\n\
    \    return array\nend", "    \n    # if sum of first and last index is odd return\
    \ an array sorted in ascending order\n    if (array[1] + array[end]) % 2 != 0\n\
    \        return sort(array)\n    # else return an array sorted in descending order\n\
    \    else\n        return sort(array, rev=true)\n    end\nend", "    if iseven(sum(array[1],\
    \ array[end]))\n        return sort(array, rev=true)\n    else\n        return\
    \ sort(array)\n    end\nend", "    sorted_array = sorted(array)\n    if isodd(sorted_array[1]\
    \ + sorted_array[end])\n        return sorted_array\n    else\n        return\
    \ reverse(sorted_array)\n    end\nend", "    left = 1\n    right = lastindex(array)\n\
    \    sum_left_right = array[left] + array[right]\n    if sum_left_right % 2 ==\
    \ 0\n        sort(array, rev=true)\n    else\n        sort(array)\n    end\nend",
  "    array_length = length(array)\n    if array_length == 0\n        return Array{Int64}(0)\n\
    \    elseif array_length == 1\n        return array\n    else\n        first_index\
    \ = array[1]\n        last_index = array[array_length]\n        if mod(first_index\
    \ + last_index, 2) == 0\n            return sort(array, rev=true)\n        else\n\
    \            return sort(array)\n        end\n    end\nend", "    n = size(array,\
    \ 1)\n    if n == 0\n        return []\n    end\n    if n == 1\n        return\
    \ array\n    end\n    if array[1] + array[n] > 0\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend", "    even_array, odd_array\
    \ = [], []\n    for item in array\n        if iseven(item)\n            push!(even_array,\
    \ item)\n        else\n            push!(odd_array, item)\n        end\n    end\n\
    \    even_array = sort(even_array)\n    odd_array = sort(odd_array)\n    if iseven(array[1]\
    \ + array[end])\n        even_array = reverse(even_array)\n    else\n        odd_array\
    \ = reverse(odd_array)\n    end\n    return sort_array_helper(even_array, odd_array)\n\
    end\n    ", "    function compare(x::Int64, y::Int64)::Int64\n        if (x >\
    \ y)\n            return 1\n        elseif (x < y)\n            return -1\n  \
    \      else\n            return 0\n        end\n    end\n    if (isodd(array[1]\
    \ + array[end]))\n        s = sort(array, lt=compare)\n    else\n        s = sort(array,\
    \ gt=compare)\n    end\n    return s\nend", "    if mod(array[1] + array[end],\
    \ 2) == 0\n        sort(array, rev=true)\n    else\n        sort(array)\n    end\n\
    end", "    if size(array)[1]==0\n        return []\n    end\n    array_sum = array[1]\
    \ + array[end]\n    if array_sum % 2 == 0\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend", " \n    # sort the array\n\
    \    sort(array, rev = true)\nend", "    if length(array) <= 1\n        return\
    \ array\n    end\n    if array[1] + array[end] % 2 == 0\n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend\n \ntest_8() =\
    \ begin\n    println(\"test_8:\")\n    @test sort_array([]) == []\n    @test sort_array([5])\
    \ == [5]\n    @test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ @test sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\nend\n \n\"\
    \"\"\n    Given an array of integers, return the index value of the element whose\
    \ value equals to the maximum value of the given array.", "    if sum(first(array),\
    \ last(array)) % 2 == 0\n        return sort(array, rev=true)\n    else\n    \
    \    return sort(array)\n    end\nend", "    # define the sort_array function,\
    \ takes a Vector{Int64} array as the only argument, returns a Vector{Int64} array\n\
    \    if length(array) == 0\n        # base case when array is empty\n        return\
    \ array\n        # return a empty array\n    elseif length(array) == 1\n     \
    \   # base case when array has only one element\n        return array\n      \
    \  # return the same array\n    else\n        if mod(array[1], 2) == 0 && mod(array[end],\
    \ 2) == 0\n            # if the first element and the last element are both even\n\
    \            return sort(array, rev=true)\n            # sort the array in descending\
    \ order, return the sorted array\n        elseif mod(array[1], 2) == 1 && mod(array[end],\
    \ 2) == 1\n            # if the first element and the last element are both odd\n\
    \            return sort(array)\n            # sort the array in ascending order,\
    \ return the sorted array\n        else\n            return sort(array, rev=true)\n\
    \            # when the first element and the last element has a different parity,\
    \ sort the array in descending order, return the sorted array\n        end\n \
    \   end\nend", "    if length(array) == 0\n        return array\n    end\n   \
    \ if array[1] + array[end] % 2 == 0\n        return sort(array, rev=true)\n  \
    \  else\n        return sort(array)\n    end\nend", "    if sum(array[1], array[end])%2==0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend\n    ", "    if length(array) == 0\n        return []\n    end\n\
    \    if sum(array[1], array[end]) % 2 == 0\n        sort(array, rev=true)\n  \
    \  else\n        sort(array)\n    end\nend", "    if(length(array) <= 1)\n   \
    \     return array\n    end\n    if(sum(array[1], array[end]) % 2 == 0)\n    \
    \    return sort(array, rev=true)\n    else\n        return sort(array)\n    end\n\
    end", "    iseven(n::Int64) = (n % 2 == 0)\n    iseven(n::Int64) || return sort(array)\n\
    \    isodd(n::Int64) = (n % 2 != 0)\n    isodd(n::Int64) || return sort(array,\
    \ rev=true)\nend", "    if sum(array[1], array[end]) % 2 == 0\n        return\
    \ sort(array, rev=true)\n    else\n        return sort(array)\n    end\nend\n\"\
    \"\"\n    Given an array of non-negative integers and a number, return a copy\
    \ of the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.",
  "    if (length(array) == 0) return array\n    sort(array, rev = iseven(array[1]\
    \ + array[end]))\nend", "    if length(array) == 0\n        return array\n   \
    \ end\n    if (array[1] + array[end]) % 2 == 0\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend", "    if isempty(array)\n\
    \        return array\n    end\n    if sum(array[1], array[end]) % 2 == 0\n  \
    \      return sort(array, rev=true)\n    else\n        return sort(array)\n  \
    \  end\nend", "    size = length(array)\n    if size == 0 return array end\n \
    \   if size == 1 return array end\n    if (array[1] + array[end]) % 2 == 0\n \
    \       return sort(array, rev=true)\n    else\n        return sort(array)\n \
    \   end\nend", "    if length(array) == 0\n        return []\n    end\n    if\
    \ (array[1] + array[end]) % 2 == 0\n        return sort(array, rev=true)\n   \
    \ else\n        return sort(array)\n    end\nend", "    length = length(array)\n\
    \    if length == 0\n        return array\n    end\n    if mod(array[1] + array[length],\
    \ 2) == 0\n        reverse!(sort(array))\n    else\n        sort(array)\n    end\n\
    end", "    if length(array) < 2 \n        return array\n    end\n    # check odd\
    \ or even\n    if isodd(array[1] + array[end])\n        sorted = sort(array)\n\
    \    else\n        sorted = sort(array, rev=true)\n    end\n    return sorted\n\
    end", "    # your code here\nend", "    sum = array[1] + array[end]\n    if sum\
    \ % 2 == 0\n        sort(array, rev=true)\n    else\n        sort(array)\n   \
    \ end\nend", "    if  length(array) <= 1\n        return array\n    end\n    if\
    \ (array[1] + array[end]) % 2 == 0\n        sort(array, rev=true)\n    else\n\
    \        sort(array)\n    end\nend", "    # first create a copy of the array\n\
    \    sort_array = deepcopy(array)\n    # then just sort that copy using the predefined\
    \ sort function in Julia\n    sort!(sort_array)\n    # now determine whether to\
    \ reverse the sort_array or not\n    if sum(first(sort_array), last(sort_array))\
    \ % 2 == 0\n        reverse!(sort_array)\n    end\n    # return the sorted array\n\
    \    return sort_array\nend", "    a = deepcopy(array)\n    i = 1\n    j = length(a)\n\
    \    while i < j\n        if a[i] > a[j]\n            a[i], a[j] = a[j], a[i]\n\
    \        end\n        i += 1\n        j -= 1\n    end\n    if (i+j) % 2 == 0\n\
    \        return a\n    else\n        return reverse(a)\n    end\nend", "    length\
    \ = size(array)[1]\n    if length == 0 return [] end\n    even = (array[1] + array[length])\
    \ % 2 == 0\n    return sort(array, by = x -> (even ? -x : x))\nend\n ", "    if\
    \ sum(first(array), last(array)) % 2 == 0\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend", "    return isodd(sum(array[1],\
    \ array[end])) ? sort(array) : sort(array, rev=true)\nend", "    sorted_array\
    \ = sort(array)\n    if(sum(array[1], array[end]) % 2 == 0)\n        reverse!(sorted_array)\n\
    \    end\n    return sorted_array\nend", "    if sum(first(array), last(array))\
    \ % 2 == 0 \n        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    n = length(array)\n    if n % 2 == 0\n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend", "    sum(array[1],\
    \ array[end])%2 != 0 ? sort(array) : sort(array, rev=true)\nend", "    if isempty(array)\n\
    \        return []\n    end\n    if length(array) == 1\n        return array\n\
    \    end\n    sum = array[1] + array[end]\n    if sum % 2 == 0\n        sort(array,\
    \ rev=true)\n    else\n        sort(array)\n    end\nend", "    if length(array)\
    \ == 0\n        return array\n    end\n    if length(array) == 1\n        return\
    \ array\n    end\n    if isodd(array[1] + array[end])\n        sort(array)\n \
    \   else\n        sort(array, rev=true)\n    end\nend", "    first_idx = array[1]\n\
    \    last_idx = array[end]\n    if first_idx + last_idx % 2 == 0\n        sort(array)\n\
    \    else\n        sort(array, rev=true)\n    end\nend", "    if length(array)\
    \ == 0 || length(array) == 1\n        return array\n    end\n    array_sum = array[1]\
    \ + array[end]\n    if array_sum % 2 == 0\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend", "    isodd(x) = isodd(x)\
    \ ? false : true\n    x, y = first(array), last(array)\n    if isodd(x + y)\n\
    \        return sort(array)\n    else\n        return sort(array, rev=true)\n\
    \    end\nend", "    sum(array[1], array[end]) % 2 == 0 ? sort(array, rev=true)\
    \ : sort(array)\nend", "    if (sum(first(array), last(array)) % 2 == 0)\n   \
    \     return sort(array, rev=true)\n    else\n        return sort(array)\n   \
    \ end\nend", "    begin\n        return copy(sort(array))\n    end\nend", "  \
    \  if length(array) == 0\n        return []\n    end\n    if (array[1] + array[end])\
    \ % 2 == 0\n        array = sort(array, rev=true)\n    else\n        array = sort(array)\n\
    \    end\n    return array\nend", "    if  length(array) != 0\n        sum_first_last\
    \ = array[1] + array[end]\n        if sum_first_last % 2 == 0\n            # sorting\
    \ in descending order\n            sort(array, rev=true)\n        else\n     \
    \       # sorting in ascending order\n            sort(array)\n        end\n \
    \   else\n        # if length is zero\n        array\n    end\nend", "    # Your\
    \ code here\nend\n ", "    array[(length(array) + 1) \xF7 2] % 2 == 0 ?  sort(array,\
    \ rev=true) : sort(array)\nend", "    # array[1], array[end] -> the beginning\
    \ and the end of the array\n    # sum([array[1], array[end]]) -> add the beginning\
    \ and the end of the array\n    # sum([array[1], array[end]]) % 2 != 0 -> checks\
    \ if it is even or odd\n    #   a % b -> gives the remainder of a/b (the remainder\
    \ is a number between 0 and b)\n    #   a % 2 != 0 -> checks if a is even or odd\
    \ (with a is an int, and not a float)\n    #     -> a%2 == 0 is even,\n    # \
    \    -> a%2 != 0 is odd\n    # end is the last index of the array\n    # sort()\
    \ is used to sort the array\n    # if condition1\n    #   do something\n    #\
    \ elseif condition2\n    #   do something else\n    # else\n    #   do something\
    \ else\n    # end\n    if sum([array[1], array[end]]) % 2 != 0 \n        return\
    \ sort(array)\n    else\n        return sort(array, rev=true)\n    end\nend\n\
    # test with the first example\n# when the sum(first index value, last index value)\
    \ is odd\nsort_array([])", "    sum_first_last = array[1] + array[end]\n    if\
    \ sum_first_last % 2 == 0\n        sort(array, rev=true)\n    else\n        sort(array)\n\
    \    end\nend", "    sum = (array[1] + array[end])\n    if isodd(sum)\n      \
    \  array = sort(array)\n    else\n        array = sort(array, rev=true)\n    end\n\
    \    return array\nend", "    @assert length(array) == 0 || length(array) == 1\
    \ || length(array) > 1\n    if length(array) == 0 || length(array) == 1\n    \
    \    return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n        return\
    \ sort(array, rev=true)\n    else\n        return sort(array)\n    end\nend",
  "    sorted_array = sort(array)\n    if (array[1] + array[end]) % 2 == 0\n     \
    \   sorted_array = reverse(sorted_array)\n    end\n    return sorted_array\nend",
  "    if (sum(array[1:1]) + sum(array[end:end])) % 2 == 0\n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend", "    return\
    \ nothing\nend\nsort_array([2, 4, 3, 0, 1, 5])", "    total = array[1] + array[end]\n\
    \    if total % 2 == 0\n        sort(array, rev=true)\n    else\n        sort(array)\n\
    \    end\nend", "    if !isempty(array) && length(array) != 1\n        sum_first_last\
    \ = array[1] + array[end]\n        if sum_first_last % 2 == 0\n            reverse!(sort(array))\n\
    \        else\n            sort(array)\n        end\n    else\n        array\n\
    \    end\nend", "    length = size(array)[1]\n    if length == 0\n        return\
    \ array\n    end\n    if length == 1\n        return array\n    end\n    if (array[1]\
    \ + array[length]) % 2 == 0\n        return sort(array, rev=true)\n    else\n\
    \        return sort(array)\n    end\nend", "    return sort(array, lt = x->sum(x)%2==0)\n\
    end", "    array_length = length(array)\n    sum_length = array[1] + array[array_length]\n\
    \    if sum_length % 2 == 0\n        sort(array, rev=true)\n    else\n       \
    \ sort(array)\n    end\nend", "    @assert typeof(array) == Vector{Int64}\n  \
    \  @assert all(element -> element >= 0, array)\n    @assert length(array) > 0\n\
    \    return sort(array, by=x->abs(x))\nend", "    if length(array) == 0\n    \
    \    return []\n    end\n    if length(array) == 1\n        return array\n   \
    \ end\n    newarray = copy(array)\n    if isodd(newarray[1] + newarray[end])\n\
    \        sort!(newarray)\n    else\n        sort!(newarray, rev=true)\n    end\n\
    \    return newarray\nend", "    @assert length(array) < 1, \"Invalid input: array\
    \ must be non-empty\"\n    new_array = sort(array)\n    (first_val(new_array)\
    \ + last_val(new_array)) % 2 == 0 ? reverse(new_array) : new_array\nend", "  \
    \ \n    sum,res = 0,array\n    \n    if length(array) == 0 || length(array) ==\
    \ 1\n        return array\n    end\n    \n    sum = array[1] + array[end]\n  \
    \  \n    if sum % 2 == 0\n        res = sort(array,rev=true)\n    else\n     \
    \   res = sort(array)\n    end\n    \n    return res\nend", "    if length(array)\
    \ == 0 || length(array) == 1\n        return array\n    end\n    if sum(array[1],\
    \ array[end]) % 2 == 0\n        return sort(array, rev=true)\n    else\n     \
    \   return sort(array)\n    end\nend", "    if length(array) == 0 || length(array)\
    \ == 1\n        return array\n    end\n    odd = false\n    if (array[1] + array[end])\
    \ % 2 == 1\n        odd = true\n    end\n    if odd\n        sort(array)\n   \
    \ else\n        sort(array, rev=true)\n    end\nend", "    \n    # if vector is\
    \ empty\n    if isempty(array)\n        return array\n    end\n    \n    # if\
    \ vector is a singleton\n    if length(array) == 1\n        return array\n   \
    \ end\n    \n    # if sum of first and last indices is odd\n    if sum(array[1],\
    \ array[end]) % 2 == 1\n        sorted_array = sort(array)\n    else\n       \
    \ sorted_array = sort(array, rev=true)\n    end\n    \n    return sorted_array\n\
    end", "    n = length(array)\n    if n == 0\n        return array\n    end\n \
    \   if mod(array[1] + array[n], 2) == 0\n        # sort it in descending order\n\
    \        return sort(array, rev=true)\n    else\n        # sort it in ascending\
    \ order\n        return sort(array)\n    end\nend", "    total = size(array)[1]\
    \ - 1\n    if isodd(array[1] + array[total])\n        sort(array)\n    else\n\
    \        sort(array, rev=true)\n    end\nend", "    # your solution here\nend",
  "    # your code here\n    sort(array, by=x->sum(x...))\nend\n#Some tests\n@testset\
    \ \"example1\" begin\n    @test sort_array([]) == []\n    @test sort_array([5])\
    \ == [5]\n    @test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ @test sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\nend", "  \
    \  \n    # Make copy\n    copy = copy(array)\n    \n    # Check for even/odd length\n\
    \    length = size(copy)[1] % 2 == 0\n    \n    # Check for even/odd sum of first\
    \ and last element\n    sum = copy[1] + copy[end] % 2 == 0\n    \n    # Check\
    \ if even or odd length\n    if length == sum\n        return sort(copy, rev=true)\n\
    \    else \n        return sort(copy)\n    end\nend", "   \n    # two ways of\
    \ getting the first and last index value\n    # a = array[1]\n    # b = array[end]\n\
    \    a, b = array[1], array[end]\n    \n    # the sum of the first and last index\
    \ value\n    if a + b % 2 == 0\n        sort(array, rev=true)\n    else\n    \
    \    sort(array)\n    end\nend", "    if size(array, 1) == 0\n        return array\n\
    \    end\n    head, tail = array[1], array[end]\n    if rem(head + tail, 2) ==\
    \ 0\n        sort(array, rev=true)\n    else\n        sort(array)\n    end\nend",
  "    new_array = copy(array)\n    if length(new_array) == 0\n        return new_array\n\
    \    end\n    if ((new_array[1] + new_array[end]) % 2 == 0)\n        sort!(new_array,\
    \ rev=true)\n    else\n        sort!(new_array)\n    end\n    return new_array\n\
    end", "    iseven(x) = x % 2 == 0\n    # function to check whether the sum of\
    \ the first and last element of the array is even \n    return iseven(array[1]\
    \ + array[end]) ? sort(array, rev=true) : sort(array)\nend", "    sum = array[1]\
    \ + array[end]\n    if sum % 2 == 0\n        sorted = sort(array, rev=true)\n\
    \    else\n        sorted = sort(array)\n    end\n    return sorted\nend", " \
    \   # create a vector to store result, then fill it with the original array\n\
    \    result = Vector{Int64}(undef, length(array))\n    copy!(result, array)\n\
    \    \n    # find the first and last index of array\n    first, last = 1, length(array)\n\
    \    \n    # check if the sum of first and last index is odd or even\n    if mod(result[first]\
    \ + result[last], 2) == 0\n        # if even, sort the array by reverse order\n\
    \        sort!(result, rev=true)\n    else\n        # if odd, sort the array by\
    \ ascending order\n        sort!(result)\n    end\n    \n    # return the result\n\
    \    return result\nend", "    begin_val = array[1]\n    end_val = array[end]\n\
    \    if mod(begin_val + end_val, 2) == 0 \n        sort(array, rev=true)\n   \
    \ else\n        sort(array)\n    end\nend", "    \n    if isempty(array) || length(array)\
    \ == 1\n        return array\n    end\n    \n    even = sum(array[1], array[end])\
    \ % 2 == 0\n    \n    sort(array, rev=even)\nend", "    if !length(array)==0\n\
    \        s = sum(array[1],array[end])\n        if s%2==0\n            sort(array,rev=true)\n\
    \        else\n            sort(array)\n        end\n    else\n        array\n\
    \    end\nend", "    if length(array) == 0\n        return array\n    end\n  \
    \  if array[1] % 2 == 1 && array[end] % 2 == 1\n        array[1] , array[end]\
    \ = array[end] , array[1]\n    end\n    if length(array) == 1\n        return\
    \ array\n    end\n    if array[1] % 2 == 0 && array[end] % 2 == 0\n        return\
    \ sort(array)\n    end\n    if array[1] % 2 == 1 && array[end] % 2 == 0\n    \
    \    array[1] , array[end] = array[end] , array[1]\n        return sort(array)\n\
    \    end\nend\nsort_array([])", "    #Your code here\nend", "    sum_first_last\
    \ = array[1] + array[end]\n    if sum_first_last % 2 == 0\n        # even\n  \
    \      return sort(array, rev=true)\n    else\n        # odd\n        return sort(array)\n\
    \    end\nend", "    n = length(array)\n    if n > 1\n        if (array[1] + array[n])\
    \ % 2 == 0\n            # even: sort in descending order\n            return sort(array,\
    \ rev=true)\n        else\n            # odd: sort in ascending order\n      \
    \      return sort(array)\n        end\n    else\n        return array\n    end\n\
    end", "    if length(array) == 0 return array end\n    first, last = array[1],\
    \ array[end]\n    sum = first + last\n    if sum % 2 == 0 \n        sort(array,\
    \ rev=true)\n    else\n        sort(array)\n    end\nend", "    if length(array)\
    \ == 0\n        return array\n    end\n    if array[1] + array[end] % 2 == 0\n\
    \        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    first_last_sum = sum(array[1], array[end])\n    sort(array,\
    \ by = x -> first_last_sum % 2 == 0 ? -x : x)\nend", "    if sum(first(array),\
    \ last(array)) % 2 == 0\n        sort(array; rev=true)\n    else\n        sort(array)\n\
    \    end\nend", "    if sum(array[1], array[end]) % 2 == 0 \n        sort(array,\
    \ rev=true)\n    else\n        sort(array)\n    end\nend\n \n    ", "    if length(array)\
    \ == 0\n        return array\n    end\n    sum = array[1] + array[end]\n    if\
    \ sum % 2 == 0\n        return sort(array, rev=true)\n    else\n        return\
    \ sort(array)\n    end\nend", "    i, j = 1, length(array)\n    if i + j == 1\n\
    \        return array\n    end\n    if (i + j) % 2 == 0\n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend", "    n = length(array)\n\
    \    array_sum = array[1] + array[n]\n    sorted_array = sort(array)\n    if array_sum\
    \ % 2 == 0 \n        sorted_array = sorted_array[end:-1:1]\n    end\n    return\
    \ sorted_array\nend\nprintln(sort_array([1, 5, 4, 3, 2, 6]))\nprintln(sort_array([2,\
    \ 4, 3, 0, 1, 5]))\nprintln(sort_array([1, 5, 4, 3, 2, 6, 8]))", "    # Code here!\n\
    end", "    sum_first_last = array[1] + array[end]\n    if sum_first_last % 2 ==\
    \ 0\n        sort(array, rev=true)\n    else\n        sort(array)\n    end\nend",
  "    if length(array)==0\n        return array\n    end\n    if sum(array[1],array[end])%2\
    \ == 0\n        return sort(array,rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    if length(array)==0 || length(array)==1\n        return array\n\
    \    end\n    if array[1]+array[end]%2==0 # if even\n        return sort(array,rev=true)\n\
    \    else \n        return sort(array)\n    end\nend", "    evenodd =  (array[1]\
    \ + array[end]) % 2 == 0\n    iseven = (k -> k % 2 == 0)\n    comp = (iseven(x)\
    \ == evenodd ? x <=> y : y <=> x)\n    sort(array, comp)\nend", "    \n    array_length\
    \ = length(array)\n    if array_length == 0\n        return array\n    end\n \
    \   \n    if array_length == 1\n        return array\n    end\n    \n    if array_length\
    \ == 2\n        if array[1] + array[end] == 1\n            return array\n    \
    \    end\n        if array[1] > array[end]\n            return [array[end], array[1]]\n\
    \        end\n        return array\n    end\n    \n    if (array[1] + array[end])\
    \ % 2 == 0\n        if (array[1] + array[end]) == 0\n            return array\n\
    \        end\n        return sort(array, rev=true)\n    end\n    return sort(array)\n\
    end", "    # YOUR CODE HERE\n    res = copy(array)\n    if sum(res[1], res[end])\
    \ % 2 == 0\n        sort!(res, rev=true)\n    else\n        sort!(res)\n    end\n\
    \    return res\nend", "    if sum(first(array), last(array)) % 2 == 0\n     \
    \   return sort(array, rev=true)\n    else\n        return sort(array)\n    end\n\
    end", "    if length(array) == 0\n        return []\n    end\n    if (array[1]\
    \ + array[end]) % 2 == 0\n        reverse!(sort(array))\n    else\n        sort(array)\n\
    \    end\nend", "    if length(array) == 0\n        return []\n    end\n    if\
    \ length(array) == 1\n        return array\n    end\n    if sum(array[1], array[end])\
    \ % 2 == 0\n        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    # if isempty(array)\n    #     return []\n    # end\n   \
    \ if mod(array[1] + array[end], 2) == 0\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend", "    if sum(first(array),\
    \ last(array)) % 2 == 0\n        sort(array, rev=true)\n    else\n        sort(array)\n\
    \    end\nend", "    if iseven(sum(array[1], array[end]))\n        sort(array,\
    \ rev=true)\n    else\n        sort(array)\n    end\nend", "    n = size(array,\
    \ 1)\n    if n == 0 || n == 1\n        return array\n    end\n    if mod(array[1]\
    \ + array[n], 2) == 0\n        return sort(array, rev=true)\n    else\n      \
    \  return sort(array)\n    end\nend", "    if isempty(array) return [] end\n \
    \   sum = array[1] + array[end]\n    if sum % 2 == 0 \n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend", "    if isempty(array)\n\
    \        return []\n    end\n    if length(array) == 1\n        return array\n\
    \    end\n    head, tail = array[1], array[end]\n    if isodd(head + tail)\n \
    \       return sort(array)\n    else\n        return sort(array, rev=true)\n \
    \   end\nend", "    # if the length of given array is 0, return an empty vector\n\
    \    if length(array) == 0\n        return Vector{Int64}()\n    end\n    # get\
    \ the sum of first and last values of the given array\n    sum_of_first_and_last\
    \ = array[1] + array[end]\n    # if the sum of first and last values of the given\
    \ array is even,\n    # sort the given array in descending order, otherwise sort\
    \ it in ascending order\n    if iseven(sum_of_first_and_last)\n        return\
    \ sort(array, rev=true)\n    else\n        return sort(array)\n    end\nend",
  "    if sum(first(array), last(array)) % 2 == 0\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend", "    n = length(array)\n\
    \    if n == 0 || n == 1\n        return array\n    end\n    if iseven(array[1]\
    \ + array[end])\n        sort(array,rev=true)\n    else\n        sort(array)\n\
    \    end\nend", "    x = sum(array[1], array[end])\n    if x % 2 == 0\n      \
    \  return sort(array, rev=true)\n    else\n        return sort(array)\n    end\n\
    end", "    # Your code goes here\nend", "    if sum(first(array), last(array))\
    \ % 2 == 0\n        sort(array, rev=true)\n    else\n        sort(array)\n   \
    \ end\nend", "    # TODO: validate array\n    N = length(array)\n    is_even =\
    \ (array[1] + array[N]) % 2 == 0 \n    array_sort_order = sortperm(array, rev\
    \ = is_even)\n    return array[array_sort_order]\nend", "    if length(array)\
    \ < 2\n        return array\n    end\n    if (array[1] + array[end]) % 2 == 0\n\
    \        return sort(array,rev=true)\n    else\n        return sort(array)\n \
    \   end\nend", "    array_size = length(array)\n    if (array_size == 0) || (array_size\
    \ == 1)\n        return array\n    end\n    if (array[1] + array[end]) % 2 ==\
    \ 0\n        # the sum is even \n        return sort(array, rev=true)\n    else\n\
    \        # the sum is odd\n        return sort(array)\n    end\nend", "    if\
    \ sum(first(array), last(array)) % 2 == 0\n        sort(array, rev=true)\n   \
    \ else\n        sort(array)\n    end\nend", "    if isempty(array) return [] end\n\
    \    if length(array) == 1 return array end\n    if mod(array[1], 2) == mod(array[end],\
    \ 2) return sort(array) end\n    if mod(array[1], 2) == 1 return sort(array, rev=true)\
    \ end\n    if mod(array[1], 2) == 0 return sort(array) end\nend", "    if isempty(array)\n\
    \        return []\n    end\n    mid = div(length(array), 2)\n    if (array[1]\
    \ + array[end]) % 2 == 0\n        return [array[end-i+1] for i in 1:mid] * [array[i]\
    \ for i in mid+1:end]\n    else\n        return [array[i] for i in 1:mid] * [array[end-i+1]\
    \ for i in mid+1:end]\n    end\nend", "    even = sum(array[1], array[end]) %\
    \ 2 == 0\n    sort!(array, rev=even)\n    return array\nend", "    \n    evens\
    \ = []\n    odds = []\n    \n    for (i, x) in enumerate(array)\n        if x\
    \ % 2 == 0\n            push!(evens, x)\n        else\n            push!(odds,\
    \ x)\n        end\n    end\n    \n    sort!(evens)\n    sort!(odds)\n    \n  \
    \  evens_iterator = Base.Iterators.reverse(evens)\n    odds_iterator = Base.Iterators.reverse(odds)\n\
    \    \n    sorted_array = []\n    \n    for x in array\n        if x % 2 == 0\n\
    \            push!(sorted_array, pop!(evens_iterator))\n        else\n       \
    \     push!(sorted_array, pop!(odds_iterator))\n        end\n    end\n    \n \
    \   return sorted_array\nend", "    if sum(array[1], array[end]) % 2 == 0\n  \
    \      sort(array; rev=true)\n    else\n        sort(array)\n    end\nend", " \
    \   return array[end:-1:1]\nend\n\"\"\"\n    Given an array of integers, return\
    \ an array of the same size with all even integers sorted in descending order\
    \ and\n    all odd integers sorted in ascending order.", "    newarray = copy(array)\n\
    \    isodd(x::Int64) = x % 2 == 1\n    if isodd(length(newarray))\n        return\
    \ sort(newarray)\n    else\n        return sort(newarray, rev=true)\n    end\n\
    end", "    if isempty(array) return array end\n    return sort(array, by=x->(x[1]\
    \ + x[end]) % 2 == 0 ? -1 : 1)\nend", "    if sum(array[1], array[end]) % 2 ==\
    \ 0\n        sort(array, rev=true)\n    else\n        sort(array)\n    end\nend",
  "    \nend", "    # your code here\nend", "    if length(array) == 0\n        return\
    \ array\n    end\n    if length(array) == 1\n        return array\n    end\n \
    \   odd_index = []\n    even_index = []\n    for (index, value) in enumerate(array)\n\
    \        if index % 2 == 0\n            odd_index = push!(odd_index, value)\n\
    \        else\n            even_index = push!(even_index, value)\n        end\n\
    \    end\n    odd_index = sort(odd_index)\n    even_index = sort(even_index, rev=true)\n\
    \    for i in 1:length(array)\n        if i % 2 == 0\n            array[i] = odd_index[i]\n\
    \        else\n            array[i] = even_index[i]\n        end\n    end\n  \
    \  return array\nend", "    if length(array) < 2\n        return array\n    end\n\
    \    tmp = sort(array)\n    if array[1] + array[end] % 2 == 0\n        return\
    \ reverse(tmp)\n    else\n        return tmp\n    end\nend", "  \n  if array ==\
    \ nothing || length(array) == 0\n    return []\n  end\n  \n  if array[1] % 2 ==\
    \ 0\n    array = sort(array, rev=true)\n  else\n    array = sort(array)\n  end\n\
    \  \n  return array\nend", "    if sum(first(array), last(array)) % 2 == 0\n \
    \       return sort(array, rev=true)\n    else\n        return sort(array)\n \
    \   end\nend", "    if length(array) == 0\n        return []\n    end\n    if\
    \ length(array) == 1\n        return array\n    end\n    if (sum(array[1], array[end])\
    \ % 2) == 0\n        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\nend", "    if isempty(array)\n        return array\n    end\n    if\
    \ (array[1] + array[end]) % 2 == 0\n        return sort(array, rev=true)\n   \
    \ else\n        return sort(array)\n    end\nend", "    \n    function isEven(n::Int64)::Bool\n\
    \        return mod(n, 2) == 0 ? true : false\n    end\n    \n    if length(array)\
    \ < 2\n        return array\n    end\n    \n    first = array[1]\n    last = array[end]\n\
    \    \n    if isEven(first + last)\n        sort(array, rev=true)\n    else\n\
    \        sort(array)\n    end\nend", "    if length(array) == 0\n        return\
    \ array\n    end\n    if length(array) == 1\n        return array\n    end\n \
    \   if (array[1] + array[end]) % 2 == 0\n        return sort(array, rev=true)\n\
    \    else\n        return sort(array)\n    end\nend", "    len = length(array)\n\
    \    first = array[1]\n    last = array[len]\n    total = first + last\n    sorted_array\
    \ = sort(array)\n    if total % 2 == 0\n        reverse!(sorted_array)\n    end\n\
    \    return sorted_array\nend", "    first_value = array[1]\n    last_value =\
    \ array[end]\n    sum_value = first_value + last_value\n    if sum_value % 2 ==\
    \ 0\n        sort(array; rev=true)\n    else\n        sort(array)\n    end\nend",
  "    return sort(array, rev = iseven(array[1] + array[end]))\nend", "    if iseven(sum(array[1],\
    \ array[end]))\n        return sort(array, rev=true)\n    else\n        return\
    \ sort(array)\n    end\nend", "    ind = size(array)[1]\n    if (rem(array[1]\
    \ + array[ind], 2) == 0)\n        #sort in descending order\n        sorted_array\
    \ = sort(array, rev=true)\n    else\n        #sort in ascending order\n      \
    \  sorted_array = sort(array)\n    end\n    return sorted_array\nend", "    if\
    \ !isempty(array) && (array[1] + array[end]) % 2 == 0\n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend", "    if sum(first(array),\
    \ last(array)) % 2 == 0\n        return sort(array, rev=true)\n    else\n    \
    \    return sort(array)\n    end\nend\n# Test Cases", "    if length(array) >\
    \ 0\n        first = array[1]\n        last = array[end]\n        if (first +\
    \ last) % 2 == 0\n            reverse!(sort(array))\n        else\n          \
    \  sort(array)\n        end\n    else\n        array\n    end\nend", "  odd_indexed\
    \ = []\n  even_indexed = []\n  sorted_odd_indexed = []\n  sorted_even_indexed\
    \ = []\n  result = []\n  if length(array) == 0\n    return array\n  end\n  if\
    \ length(array) == 1\n    return array\n  end\n  if (array[1] + array[end]) %\
    \ 2 == 0\n    for i in 1:length(array)\n      if i % 2 == 0\n        push!(even_indexed,\
    \ array[i])\n      else\n        push!(odd_indexed, array[i])\n      end\n   \
    \ end\n    sorted_odd_indexed = sort(odd_indexed, rev=true)\n    sorted_even_indexed\
    \ = sort(even_indexed, rev=true)\n    for i in 1:length(array)\n      if i % 2\
    \ == 0\n        push!(result, sorted_even_indexed[i])\n      else\n        push!(result,\
    \ sorted_odd_indexed[i])\n      end\n    end\n    return result\n  else\n    for\
    \ i in 1:length(array)\n      if i % 2 == 0\n        push!(even_indexed, array[i])\n\
    \      else\n        push!(odd_indexed, array[i])\n      end\n    end\n    sorted_odd_indexed\
    \ = sort(odd_indexed)\n    sorted_even_indexed = sort(even_indexed)\n    for i\
    \ in 1:length(array)\n      if i % 2 == 0\n        push!(result, sorted_even_indexed[i])\n\
    \      else\n        push!(result, sorted_odd_indexed[i])\n      end\n    end\n\
    \    return result\n  end\nend", "    if isempty(array) || length(array)==1\n\
    \        return array\n    end\n    total = sum(array[1], array[end])\n    if\
    \ total % 2 == 0\n        return sort(array, rev=true)\n    else\n        return\
    \ sort(array)\n    end\nend", "    sorted_array = copy(array)\n    if (sorted_array[1]\
    \ + sorted_array[end]) % 2 == 0\n        sort!(sorted_array, rev=true)\n    else\n\
    \        sort!(sorted_array)\n    end\n    return sorted_array\nend", "    odd_index\
    \ = get_odd_index(array)\n    even_index = get_even_index(array)\n    return sort_values(odd_index,\
    \ even_index)\nend", "    # check if array is empty or array has 1 element.\n\
    \    if length(array) <= 1\n        return array\n    end\n    \n    # check if\
    \ the sum of array's first and last elements is odd or even.\n    if (array[1]\
    \ + array[end]) % 2 == 0\n        return sort(array, rev=true)\n    else\n   \
    \     return sort(array)\n    end\nend", "    if length(array) == 0\n        return\
    \ []\n    end\n    if length(array) == 1\n        return array\n    end\n    sumIndex\
    \ = array[1] + array[end]\n    if sumIndex % 2 == 0\n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend", "    start =\
    \ length(array) > 0 ? array[1] : 1\n    end = length(array) > 0 ? array[end] :\
    \ 0\n    is_even = (start + end) % 2 == 0\n    tmp = (sort(array, rev=is_even))\n\
    \    tmp \nend", "    if length(array) == 0 || length(array) == 1\n        return\
    \ array\n    end\n    if (array[1] + array[end]) % 2 == 0\n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend", "    if isempty(array)\n\
    \        return array\n    end\n    is_odd = (array[1] + array[end]) % 2 == 1\n\
    \    array = merge_sort(array)\n    if is_odd\n        array = reverse(array)\n\
    \    end\n    return array\nend", "    odd = false\n    if (array[1] + array[end])\
    \ % 2 == 1\n        odd = true\n    end\n    return sort(array, by = x -> abs(odd\
    \ ? x : -x))\nend", "    # good luck\n    # BEGIN\n    if sum(array[1], array[end])\
    \ % 2 == 0\n        return sort(array, rev=true)\n    else\n        return sort(array)\n\
    \    end\n    # END\nend\n ", "    index_sum = sum(array[1], array[end])\n   \
    \ println(index_sum)\n    println(array)\n    if index_sum % 2 == 0\n        println(\"\
    even\")\n        return sort(array, rev=true)\n    else\n        println(\"odd\"\
    )\n        return sort(array)\n    end\nend", "    newarray = copy(array)\n  \
    \  if sum(first(array), last(array))%2==0\n        sort!(newarray,rev=true)\n\
    \    else\n        sort!(newarray)\n    end\n    return newarray\nend", "    if\
    \ sum(array[1], array[end]) % 2 == 0\n        return sort(array, rev=true)\n \
    \   else\n        return sort(array)\n    end\nend", "    if length(array) ==\
    \ 0\n        return []\n    end\n    midpoint = length(array)//2\n    if array[1]\
    \ % 2 == 1 \n        (odds = [i for i in array if i % 2 == 1])\n        (evens\
    \ = [i for i in array if i % 2 == 0])\n        vcat(sort(odds), sort(evens))\n\
    \    else\n        (odds = [i for i in array if i % 2 == 1])\n        (evens =\
    \ [i for i in array if i % 2 == 0])\n        vcat(sort(evens), sort(odds))\n \
    \   end\nend", "    if length(array) == 0\n        return []\n    end\n    if\
    \ length(array) == 1\n        return array\n    end\n    index = length(array)\n\
    \    sum = array[1] + array[index]\n    if sum % 2 == 0\n        return reverse(sort(array))\n\
    \    else\n        return sort(array)\n    end\nend", "    if array == [] || length(array)\
    \ == 1\n        return array\n    end\n    if sum(array[1], array[end]) % 2 ==\
    \ 0\n        # sort in descending order\n        return sort(array, rev=true)\n\
    \    else\n        # sort in ascending order\n        return sort(array)\n   \
    \ end\nend", "    if (sum(array[1], array[end]) % 2 == 0) \n        return sort(array,\
    \ rev=true)\n    else\n        return sort(array)\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
