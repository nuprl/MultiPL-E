name: HumanEval_95_check_dict_case
language: jl
prompt: "\"\"\"\n    Given a dictionary, return True if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return False.\n    The\
  \ function should return False is the given dictionary is empty.\n    Examples:\n\
  \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
  \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
  \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
  apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\"\
  :\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\"\
  :\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction check_dict_case(dict::Dict{String,\
  \ String}>)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\"\
  \ => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
  \ false)\nend\n"
completions: ["    return true\nend", "    # Check if the given dictionary is empty.\
    \ If yes, return False\n    if length(dict) == 0\n        return false\n    end\n\
    \    # Get all keys into a list\n    key_list = [key for key in keys(dict)]\n\
    \    # Get all values into a list\n    val_list = [value for value in values(dict)]\n\
    \    # Check if all keys are lower case\n    if all(key in lowercase(key_list)\
    \ for key in key_list)\n        return true\n    end\n    # Check if all keys\
    \ are upper case\n    if all(key in uppercase(key_list) for key in key_list)\n\
    \        return true\n    end\n    # If none of the above conditions are met,\
    \ return False\n    return false\nend", "    upper_count = 0\n    lower_count\
    \ = 0\n    for (key, value) in dict\n        is_upper(key) ? upper_count += 1\
    \ : lower_count += 1\n    end\n    if upper_count > 0 && lower_count > 0\n   \
    \     return false\n    else\n        return true\n    end\nend", "    upper =\
    \ true\n    lower = true\n    for (key, value) in dict\n        if !isupper(key)\n\
    \            upper = false\n        end\n        if !islower(key)\n          \
    \  lower = false\n        end\n    end\n    upper || lower\nend", "    upper_case_keys\
    \ = 0\n    lower_case_keys = 0\n    for key in keys(dict)\n        if isupper(key)\n\
    \            upper_case_keys += 1\n        elseif islower(key)\n            lower_case_keys\
    \ += 1\n        end\n    end\n    return (lower_case_keys == 0 || upper_case_keys\
    \ == 0)\nend\nprint(check_dict_case(Dict(\"a\"=>\"apple\", \"b\"=>\"banana\")))\n\
    print(check_dict_case(Dict(\"a\"=>\"apple\", \"A\"=>\"banana\", \"B\"=>\"banana\"\
    )))\nprint(check_dict_case(Dict(\"a\"=>\"apple\", \"8\"=>\"banana\", \"a\"=>\"\
    apple\")))\nprint(check_dict_case(Dict(\"Name\"=>\"John\", \"Age\"=>\"36\", \"\
    City\"=>\"Houston\")))\nprint(check_dict_case(Dict(\"STATE\"=>\"NC\", \"ZIP\"\
    =>\"12345\" )))", "    lowercount = 0\n    uppercount = 0\n    for (k,v) in dict\n\
    \        #println(k)\n        if k == string(k)\n            lowercount += 1\n\
    \        elseif k == string(k)\n            uppercount += 1\n        end\n   \
    \ end\n    if lowercount == length(dict) || uppercount == length(dict)\n     \
    \   return true\n    else\n        return false\n    end\nend", "    flag = true\
    \ \n    count = 0 \n    for (key,value) in dict \n        count += 1 \n      \
    \  flag = islower(key)\n        if count > 1\n            if flag != islower(key)\n\
    \                return false \n            end \n        end \n    end \n   \
    \ return flag \nend ", "    keys = collect(keys(dict))\n    return all(string.islower(k)\
    \ for k in keys) || all(string.isupper(k) for k in keys)\nend", "    return false\n\
    end", "    n = length(dict)\n    if n == 0\n        return false\n    end\n  \
    \  flag = false\n    for key in keys(dict)\n        if islower(key[1])\n     \
    \       flag = true\n        elseif isupper(key[1])\n            flag = false\n\
    \        else\n            return false\n        end\n    end\n    flag\nend",
  "    if length(dict) == 0\n        return false\n    end\n    if all(isupper, sort(collect(keys(dict))))\
    \ || all(islower, sort(collect(keys(dict))))\n        return true\n    else\n\
    \        return false\n    end\nend", "    if length(dict) == 0\n        return\
    \ false\n    end\n    if all(key in keys(dict) for key in lowercase(string(keys(dict))))\n\
    \        return true\n    elseif all(key in keys(dict) for key in uppercase(string(keys(dict))))\n\
    \        return true\n    else\n        return false\n    end\nend", "    lower_keys\
    \ = [key in keys(dict) for key in keys(dict)]\n    upper_keys = [key in keys(dict)\
    \ for key in keys(dict)]\n    return all(lower_keys) || all(upper_keys)\nend",
  "  upper = lower = false\n  for k in keys(dict)\n    if isupper(k[1])\n      upper\
    \ = true\n    else\n      lower = true\n    end\n  end\n  return (upper & lower\
    \ == false)\nend", "    if length(dict) == 0\n        return false\n    end\n\
    \    all_values = values(dict)\n    char_arrays = String[]\n    for v in all_values\n\
    \        push!(char_arrays, string(v))\n    end\n    return islower(char_arrays)\
    \ || isupper(char_arrays)\nend", " \n    keys = collect(keys(dict))\n    if length(keys)\
    \ == 0\n      return false\n    end\n    if length(keys) == 1\n      return false\n\
    \    end\n    if isupper(keys[1])\n      for key in keys[2:end]\n        if !isupper(key)\n\
    \          return false\n        end\n      end\n    elseif islower(keys[1])\n\
    \      for key in keys[2:end]\n        if !islower(key)\n          return false\n\
    \        end\n      end\n    else\n      return false\n    end\n    return true\n\
    end", "    if length(dict) == 0\n        return false\n    end\n    i = string(collect(keys(dict))[1])\n\
    \    if islowercase(i)\n        for key in keys(dict)\n            if ! islowercase(string(key))\n\
    \                return false\n            end\n        end\n    else\n      \
    \  for key in keys(dict)\n            if ! isuppercase(string(key))\n        \
    \        return false\n            end\n        end\n    end\n    return true\n\
    end", "    val = false\n    for key in keys(dict)\n        lowercasekey = lowercase(key)\n\
    \        if isequal(key, lowercasekey)\n            val = true\n        else\n\
    \            val = false\n        end\n    end\n    for key in keys(dict)\n  \
    \      uppercasekey = uppercase(key)\n        if isequal(key, uppercasekey)\n\
    \            val = true\n        else\n            val = false\n        end\n\
    \    end\n    return val\nend\nprintln(check_dict_case(dict1))\nprintln(check_dict_case(dict2))\n\
    println(check_dict_case(dict3))\nprintln(check_dict_case(dict4))\nprintln(check_dict_case(dict5))\n\
    println(check_dict_case(dict6))", "    empty_string = \"\"\n    set_lowercase\
    \ = Set(lowercase(empty_string))\n    set_uppercase = Set(uppercase(empty_string))\n\
    \    keys = Set(keys(dict))\n    if (keys \u2286 set_lowercase) || (keys \u2286\
    \ set_uppercase)\n        return true\n    else\n        return false\n    end\n\
    end", "    key_case_type = detect_key_case(dict)\n    if key_case_type == :lower\n\
    \        return true\n    elseif key_case_type == :upper\n        return true\n\
    \    else\n        return false\n    end\nend", "    keys_lower = map(x -> lowercase(x),\
    \ keys(dict))\n    keys_upper = map(x -> uppercase(x), keys(dict))\n    if keys(dict)\
    \ == keys_lower\n        return true\n    elseif keys(dict) == keys_upper\n  \
    \      return true\n    else \n        return false\n    end\nend", "    dict_str_lower::Bool\
    \ = [string(x) in lowercase(string(x)) for x in keys(dict)] == true\n    dict_str_upper::Bool\
    \ = [string(x) in uppercase(string(x)) for x in keys(dict)] == true\n    dict_str_lower\
    \ | dict_str_upper\nend", "    lower_keys = true\n    upper_keys = true\n    for\
    \ key in keys(dict)\n        lower_keys = lower_keys && islower(key)\n       \
    \ upper_keys = upper_keys && isupper(key)\n    end\n    return lower_keys || upper_keys\n\
    end", "    # Dict{String, String} means that the dictionary is going to have strings\
    \ as keys and strings as values.\n    # I want to check all keys and all values.\n\
    \    # I can use the first key to see if it is a lower or upper case string.\n\
    \    # Call the first key k, and the first value v.\n    # For k, check if islower(k)\
    \ is true. If so, it is a lower case string. Otherwise, it is an upper case string.\n\
    \    # For v, check if islower(v) is true. If so, it is a lower case string. Otherwise,\
    \ it is an upper case string.\n    # If the value is lower, check if all the other\
    \ values are lower. If so, return true.\n    # If the value is upper, check if\
    \ all the other values are upper. If so, return true.\n    # If the value is not\
    \ lower or upper, return false.\n    k, v = next(collect(keys(dict)))\n    if\
    \ islower(k) == true\n        #if islower(v) == true\n            for key in keys(dict)\n\
    \                if islower(key) == false\n                    return false\n\
    \                end\n            end\n            for value in values(dict)\n\
    \                if islower(value) == false\n                    return false\n\
    \                end\n            end\n            return true\n        #else\n\
    \        #    return false\n        #end\n    elseif isupper(k) == true\n    \
    \    #if isupper(v) == true\n            for key in keys(dict)\n             \
    \   if isupper(key) == false\n                    return false\n             \
    \   end\n            end\n            for value in values(dict)\n            \
    \    if isupper(value) == false\n                    return false\n          \
    \      end\n            end\n            return true\n        #else\n        #\
    \    return false\n        #end\n    else\n        return false\n    end\nend",
  "    # Check if the dictionary is empty\n    if length(dict) == 0 \n        return\
    \ false\n    end\n    # Check if first character is upper case or lower case\n\
    \    # Assume that all strings follow the same case\n    if isupper(first(keys(dict)))\n\
    \        for (key, value) in dict\n            if !(isupper(key) && islower(value))\n\
    \                return false\n            end\n        end\n    else\n      \
    \  for (key, value) in dict\n            if !(islower(key) && isupper(value))\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    # Your code here\n    return true\nend", "    # Your code goes\
    \ here\n    return true\nend", "    return true\nend", "    check_lower = []\n\
    \    check_upper = []\n    dict_keys = keys(dict)\n    for key in dict_keys\n\
    \        check_lower = append!(check_lower, islower(key))\n        check_upper\
    \ = append!(check_upper, isupper(key))\n    end\n    if isequal(check_lower, ones(length(dict_keys)))\n\
    \        return true\n    elseif isequal(check_upper, ones(length(dict_keys)))\n\
    \        return true\n    else\n        return false\n    end\nend", "    flag=true\n\
    \    for (key, value) in dict\n        if(flag==true)\n            if(lowercase(key)==key)\n\
    \                flag=true\n            elseif(uppercase(key)==key)\n        \
    \        flag=true\n            else\n                flag=false\n           \
    \ end\n        else\n            break\n        end\n    end\n    flag\nend",
  "    lu::Bool = false\n    uu::Bool = false\n    for (k,v) in dict\n        if islower(k)\
    \ == true\n            lu = true\n        elseif isupper(k) == true\n        \
    \    uu = true\n        else\n            return false\n        end\n    end\n\
    \    if lu == true && uu == false\n        return true\n    elseif lu == false\
    \ && uu == true\n        return true\n    else\n        return false\n    end\n\
    end", "    isupper = true\n    islower = true\n    #Check if the dictionary is\
    \ empty\n    if length(dict) == 0\n        return false\n    end\n    #Check if\
    \ all keys are upper case \n    for (key, value) in dict\n        if islower &&\
    \ isupper\n            if islowercase(key)\n                isupper = false\n\
    \            elseif isuppercase(key)\n                islower = false\n      \
    \      else\n                return false\n            end\n        elseif islower\n\
    \            if isuppercase(key)\n                return false\n            end\n\
    \        elseif isupper\n            if islowercase(key)\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend", "    lowerCount\
    \ = 0\n    upperCount = 0\n    for key in keys(dict)\n        if islower(key)\n\
    \            lowerCount += 1\n        else\n            upperCount += 1\n    \
    \    end\n    end\n    if (lowerCount != 0 && upperCount != 0) || length(dict)\
    \ == 0\n        return false\n    else\n        return true\n    end\nend\n\"\"\
    \"\nGiven a dictionary, return True if all values are strings in lower case, else\
    \ return False.\n    The function should return False is the given dictionary\
    \ is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return False.\n\
    \    \"\"\"", "    \nend", "    lower = [char in 'a':'z' for char in keys(dict)]\n\
    \    upper = [char in 'A':'Z' for char in keys(dict)]\n    return all(lower) ||\
    \ all(upper)\nend\n \ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})", " \
    \   lowercase = String[]\n    uppercase = String[]\n    for (k, v) in dict\n \
    \       if k in string(lowercase) && k in string(uppercase)\n            return\
    \ false\n        elseif k in string(lowercase)\n            push!(lowercase, k)\n\
    \        elseif k in string(uppercase)\n            push!(uppercase, k)\n    \
    \    end\n    end\n    if lowercase == [] || uppercase == []\n        return true\n\
    \    else\n        return false\n    end\nend", "    upper_keys = 0\n    lower_keys\
    \ = 0\n    for key in keys(dict)\n        if key in String.uppercase\n       \
    \     upper_keys += 1\n        elseif key in String.lowercase\n            lower_keys\
    \ += 1\n        end\n    end\n    if upper_keys == 0 || lower_keys == 0\n    \
    \    return true\n    else\n        return false\n    end\nend", "    lower =\
    \ true\n    upper = true\n    for (k, v) in dict\n        if lower\n         \
    \   if upper(k) != k\n                lower = false\n            end\n       \
    \ end\n        if upper\n            if upper(k) != k\n                upper =\
    \ false\n            end\n        end\n    end\n    return lower || upper\nend",
  "    all_lower_key = true\n    all_upper_key = true\n    for key in keys(dict)\n\
    \        if !islower(key)\n            all_lower_key = false\n        end\n  \
    \      if !isupper(key)\n            all_upper_key = false\n        end\n    end\n\
    \    return (all_lower_key | all_upper_key)\nend", "    # base case: no key exists\n\
    \    is_all_up = true\n    is_all_down = true\n    for (key, _) in dict\n    \
    \    if isupper(key[1])\n            is_all_down = false\n        else\n     \
    \       is_all_up = false\n        end\n    end\n    return is_all_up || is_all_down\n\
    end", "    #convert keys to lowercase and compare with original dict\n    all_lower(dict)\
    \ === dict ? true : false\nend", "    if length(dict) == 0\n        return false\n\
    \    end\n    lower_case = true\n    upper_case = true\n    for i in keys(dict)\n\
    \        if !islower(i)\n            lower_case = false\n        end\n       \
    \ if !isupper(i)\n            upper_case = false\n        end\n    end\n    if\
    \ lower_case || upper_case\n        return true\n    else\n        return false\n\
    \    end\nend", "    # Check if the dictionary is empty\n    if length(dict) ==\
    \ 0\n        return false\n    end\n    #Check if all keys are lower\n    if islower(collect(keys(dict)))\n\
    \        return true\n    end\n    #Check if all keys are upper\n    if isupper(collect(keys(dict)))\n\
    \        return true\n    end\n    #Else return false\n    return false\nend",
  "    all_upper(dict) || all_lower(dict)\nend", "    \"\"\"\n    Check if all keys\
    \ in dict are in upper or lower case.\n    \"\"\"\n    if length(dict) == 0\n\
    \        return false\n    end\n    keys = collect(keys(dict))\n    if islowercase(keys[1])\
    \ \n        for k in keys \n            if !islowercase(k)\n                return\
    \ false\n            end\n        end\n    elseif isuppercase(keys[1])\n     \
    \   for k in keys \n            if !isuppercase(k)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend", "    if length(dict) == 0 return false end\n    is_lower_case =\
    \ String.(keys(dict)) .== lowercase.(String.(keys(dict)))\n    is_upper_case =\
    \ String.(keys(dict)) .== uppercase.(String.(keys(dict)))\n    all(is_lower_case)\
    \ || all(is_upper_case)\nend", "    #check if dictionary is empty\n    if (length(dict)\
    \ == 0)\n        return false\n    end\n    #if dictionary has only one key \n\
    \    if (length(dict) == 1)\n        if (islower(first(keys(dict))))\n       \
    \     return true\n        else\n            return false\n        end\n    end\n\
    \    #check if all keys are in lower case\n    inlower = true\n    for key in\
    \ keys(dict)\n        if !(islower(key))\n            inlower = false\n      \
    \  end\n    end\n    #check if all keys are in upper case\n    inupper = true\n\
    \    for key in keys(dict)\n        if !(isupper(key))\n            inupper =\
    \ false\n        end\n    end\n    #return true if all keys are in upper or lower\
    \ case\n    if (inlower || inupper)\n        return true\n    else\n        return\
    \ false\n    end\nend", "    # check the length of the dictionary\n    return\
    \ length(dict) > 0 && all(k => islower(k) for k in keys(dict)) || all(k => isupper(k)\
    \ for k in keys(dict))\nend", "    return (length(dict) > 0) && ( all( x in upperCase\
    \ (x) for x in keys(dict)) || all( x in lowerCase (x) for x in keys(dict)) )\n\
    end", "    if length(dict) == 0 return false end\n    dict_keys = keys(dict)\n\
    \    dict_values = values(dict)\n    for (key, value) in zip(dict_keys, dict_values)\n\
    \        if (!isascii(key) || !isascii(value)) return false end\n        if (key\
    \ == string(lowercase(key)) == false) return false end\n        if (key == string(uppercase(key))\
    \ == false) return false end\n    end\n    return true\nend", "    \nend", " \
    \   lower = true\n    upper = true\n    for key in keys(dict)\n        if islower(key)\
    \ == false\n            lower = false\n        end\n        if isupper(key) ==\
    \ false\n            upper = false\n        end\n    end\n    if lower || upper\
    \ == true\n        return true\n    else\n        return false\n    end\nend",
  "    lowerCase = 0\n    upperCase = 0\n    if length(dict) == 0\n        return\
    \ false\n    end\n    for key in keys(dict)\n        if !string(key) in \"QWERTYUIOPASDFGHJKLZXCVBNM\"\
    \n            return false\n        end\n        if string(key) in \"QWERTYUIOPASDFGHJKLZXCVBNM\"\
    \n            upperCase += 1\n        end\n        if string(key) in \"qwertyuiopasdfghjklzxcvbnm\"\
    \n            lowerCase += 1\n        end\n    end\n    return (lowerCase == length(dict)\
    \ || upperCase == length(dict))\nend", "    lower = true\n    upper = true\n \
    \   values = []\n    for (key, value) in dict\n        push!(values, key)\n  \
    \  end\n    if values == []\n        return false\n    end\n    for key in values\n\
    \        lower = lower && islower(key)\n        upper = upper && isupper(key)\n\
    \    end\n    return lower || upper\nend", "    for key in keys(dict)\n      \
    \  if (islower(key) && !isupper(key)) || (isupper(key) && !islower(key))\n   \
    \     return false\n        end\n    end\n    return true\nend\n        ", " \
    \   # TODO: implement this function. \n    # the function should return True if\
    \ all keys are strings in lower case\n    # or all keys are strings in upper case,\
    \ else return False.\n    # it should return False is the given dictionary is\
    \ empty.\n    keys_uppercase = Set([\"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\
    \ \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\"\
    \ \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"])\n    keys_lowercase = Set([\"a\" \"b\"\
    \ \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\"\
    \ \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"])\n    dict_keys\
    \ = Set(keys(dict))\n    if length(dict_keys) == 0\n        return false\n   \
    \ elseif dict_keys <= keys_uppercase\n        return true\n    elseif dict_keys\
    \ <= keys_lowercase\n        return true\n    else\n        return false\n   \
    \ end\nend", "    \"\"\"\n    This function will not check the dictionary if its\
    \ empty\n    \"\"\"\n    if length(dict) == 0\n        return false\n    end\n\
    \    first_key_lower = islower(keys(dict)[1])\n    for k in keys(dict)\n     \
    \   if islower(k) != first_key_lower\n            return false\n        end\n\
    \    end\n    return true\nend\n \n \n \n \n \n \n\"\"\"\nReturn a new dictionary\
    \ containing only the elements which have odd values.\nExamples:\nodd_dict({\"\
    a\":1, \"b\":2, \"c\":3, \"d\":4}) should return {\"a\":1, \"c\":3}.\nodd_dict({\"\
    a\":2, \"b\":2, \"c\":8, \"d\":4}) should return {}.\nodd_dict({\"a\":2, \"b\"\
    :3, \"c\":2, \"d\":4}) should return {\"b\":3}.\n\"\"\"", "    keys_all_upper\
    \ = true\n    keys_all_lower = true\n    for k in keys(dict)\n        #print(k)\n\
    \        if isupper(first(k))\n            keys_all_lower = false\n        elseif\
    \ islower(first(k))\n            keys_all_upper = false\n        else\n      \
    \      keys_all_lower = false\n            keys_all_upper = false\n        end\n\
    \    end\n    keys_all_lower || keys_all_upper\nend", "    lowercase = true\n\
    \    uppercase = true\n    for (key, value) in dict\n        if islower(key) ==\
    \ false\n            lowercase = false\n        end\n        if isupper(key) ==\
    \ false\n            uppercase = false\n        end\n    end\n    return (lowercase\
    \ || uppercase)\nend", "    if length(dict) == 0\n        return false\n    end\n\
    \    if islowercase(collect(keys(dict)))\n        return true\n    elseif isuppercase(collect(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend", "    lower\
    \ = true\n    upper = true\n    for (k,v) in dict\n        if islower(k[1])\n\
    \            upper = false\n        elseif isupper(k[1])\n            lower =\
    \ false\n        else\n            return false\n        end\n    end\n    return\
    \ lower || upper\nend", "    all(s -> islower(s[1]), keys(dict)) || all(s -> isupper(s[1]),\
    \ keys(dict))\nend\n\"\"\"\n    Given a dictionary and a key, return the value\
    \ associated with the key, if the key is present in the dictionary.\n    Else,\
    \ return the default value provided by the caller.\n    Examples:\n    key_exists({\"\
    a\":\"apple\", \"b\":\"banana\"}, \"a\") should return \"apple\".\n    key_exists({\"\
    a\":\"apple\", \"b\":\"banana\"}, \"c\") should return \"None\".\n    key_exists({\"\
    a\":\"apple\", \"b\":\"banana\"}, \"c\", \"orange\") should return \"orange\"\
    .\n    \"\"\"", "    if length(dict) == 0\n        return false\n    end\n   \
    \ if all(x -> x == string(lowercase(x)), keys(dict))\n        return true\n  \
    \  elseif all(x -> x == string(uppercase(x)), keys(dict))\n        return true\n\
    \    else\n        return false\n    end\nend", "    # Iterate over keys:\n  \
    \  lowercase_key = true\n    uppercase_key = true\n    if length(dict) == 0\n\
    \        return false\n    end\n    for key in keys(dict)\n        if islower(key)\
    \ == false\n            lowercase_key = false\n        end\n        if isupper(key)\
    \ == false\n            uppercase_key = false\n        end\n    end\n    return\
    \ lowercase_key || uppercase_key\nend", "    for (key, value) in dict\n      \
    \  if typeof(key) != String || typeof(value) != String\n            return false\n\
    \        end\n        if ((key == uppercase(key)) && (value == uppercase(value)))\
    \ ||\n        ((key == lowercase(key)) && (value == lowercase(value)))\n     \
    \       continue\n        else\n            return false\n        end\n    end\n\
    \    return true\nend", "    if length(dict) == 0\n        return false\n    end\n\
    \    if !is_lowercase(keys(dict)) && !is_uppercase(keys(dict))\n        return\
    \ false\n    end\n    return true\nend", "    if length(dict) == 0\n        return\
    \ false\n    end\n    for (key, value) in dict\n        if key == key & String.uppercase(key)\n\
    \            c1 = true\n        else\n            c1 = false\n        end\n  \
    \      if key == key & String.lowercase(key)\n            c2 = true\n        else\n\
    \            c2 = false\n        end\n        if c1 == false && c2 == false\n\
    \            return false\n        end\n    end\n    if c1 == true\n        return\
    \ true\n    else\n        return false\n    end\nend", "    # Check if the dictionary\
    \ is empty\n    if isempty(dict)\n        return false\n    end\n    # Get all\
    \ the keys\n    keys = collect(keys(dict))\n    # Check if all keys are in lower\
    \ case\n    if all(string.islower.(keys))\n        return true\n    # Check if\
    \ all keys are in upper case\n    elseif all(string.isupper.(keys))\n        return\
    \ true\n    # Else return false\n    else\n        return false\n    end\nend\n\
    \ ", "    if length(dict) == 0\n        return false\n    end\n    lower = all([!ismatch(r\"\
    ^[A-Z]+$\", key) for key in keys(dict)])\n    upper = all([!ismatch(r\"^[a-z]+$\"\
    , key) for key in keys(dict)])\n    return lower || upper\nend", "    lower_case\
    \ = true\n    upper_case = true\n    if length(dict) == 0\n        return false\n\
    \    end\n    for key in keys(dict)\n        if (lower_case)\n            if (isupper(key))\n\
    \                lower_case = false\n            end\n        end\n        if\
    \ (upper_case)\n            if (islower(key))\n                upper_case = false\n\
    \            end\n        end\n    end\n    if (lower_case || upper_case)\n  \
    \      return true\n    else\n        return false\n    end\nend", "    for key\
    \ in keys(dict)\n        if islower(key) == false && isupper(key) == false\n \
    \           return false\n        end\n    end\n    return true\nend", "    #\
    \ TODO: add your code here\nend", "    b1=true\n    b2=true\n    if isempty(dict)\n\
    \        return false\n    end\n    for (k,v) in dict\n        if !(islower(k))\n\
    \            b1=false\n        end\n        if !(isupper(k))\n            b2=false\n\
    \        end\n    end\n    if b1==true || b2==true\n        return true\n    else\n\
    \        return false\n    end\nend\n        ", "    uppercase = all(islower.(keys(dict)))\n\
    \    lowercase = all(isupper.(keys(dict)))\n    if isempty(dict)\n        return\
    \ false\n    elseif uppercase || lowercase\n        return true\n    else\n  \
    \      return false\n    end\nend", "    lowercase = false\n    uppercase = false\n\
    \    for (key, value) in dict\n        if key == upper(key)\n            uppercase\
    \ = true\n        else\n            lowercase = true\n        end\n    end\n \
    \   if lowercase && uppercase\n        return false\n    else\n        return\
    \ true\n    end\nend", "    keys = keys(dict)\n    values = values(dict)\n   \
    \ for i in 1:length(keys)\n        if islower(keys[i])\n            if isupper(values[i])\n\
    \                return false\n            end\n        elseif isupper(keys[i])\n\
    \            if islower(values[i])\n                return false\n           \
    \ end\n        else \n            return false\n        end\n    end\n    return\
    \ true\nend", "    if isempty(dict)\n        return false\n    end\n    if all([isupper(k)\
    \ for k in keys(dict)]) \n        return true\n    elseif all([islower(k) for\
    \ k in keys(dict)])\n        return true\n    else\n        return false\n   \
    \ end\nend\n        ", "    if length(dict) == 0\n        return false\n    end\n\
    \    all_lower = true\n    all_upper = true\n    for key in keys(dict)\n     \
    \   if !islower(key)\n            all_lower = false\n        end\n        if !isupper(key)\n\
    \            all_upper = false\n        end\n    end\n    return all_lower ||\
    \ all_upper\nend", "    # code here\n    pass\nend", "    all_lower_keys = map(lowercase,\
    \ keys(dict)) == keys(dict)\n    all_upper_keys = map(uppercase, keys(dict)) ==\
    \ keys(dict)\n    return !isempty(dict) && (all_lower_keys || all_upper_keys)\n\
    end", "    \"\"\"Compares if dictionary has all keys lower case or all upper case.\"\
    \"\"\n    # if dict is empty return false\n    if length(dict)==0\n        return\
    \ false\n    end\n    # get the keys\n    keys = Dict.keys(dict)\n    # check\
    \ if all keys are lower case\n    all_lower = keys[1] == lowercase(keys[1])\n\
    \    for key in keys\n        # if the key is not lower and the case of lower\
    \ is true, return false\n        if key != lowercase(key) && all_lower\n     \
    \       return false\n        end\n        # else if the key is not upper and\
    \ the case of lower is false, return false\n        if key != uppercase(key) &&\
    \ !all_lower\n            return false\n        end\n    end\n    # if all keys\
    \ are lower case, return true\n    return true\nend", "    flag_lower = true\n\
    \    flag_upper = true\n    if length(dict) == 0\n        return false\n    end\n\
    \    for (key, value) in dict\n        if islower(key) == false\n            flag_lower\
    \ = false\n        end\n        if isupper(key) == false\n            flag_upper\
    \ = false\n        end\n    end\n    if flag_lower == true || flag_upper == true\n\
    \        return true\n    else\n        return false\n    end\nend", "    if dict\
    \ == Dict{String, String}() return false \n    lower_case = Array{Bool}(undef,\
    \ length(dict))\n    upper_case = Array{Bool}(undef, length(dict))\n    for (key,\
    \ val) in dict \n        lower_case[key] = islower(key)\n        upper_case[key]\
    \ = isupper(key)\n    end\n    if all(lower_case) == true || all(upper_case) ==\
    \ true return true\n    else return false\n    end\nend\n\"\"\"\n    Given a dictionary,\
    \ return the frequency of all items in the \n    dictionary in a key-value pair.\
    \ For example:\n    word_count([\"A\", \"A\", \"B\", \"C\", \"A\", \"B\", \"B\"\
    , \"A\"]) should return \n    {\"A\":4, \"B\":3, \"C\":1}\n    \"\"\"", "    #\
    \ base case\n    isupper(keys(dict)[1]) ? isupper_=true : isupper_=false\n   \
    \ if length(keys(dict)) == 1\n        return true\n    end\n    # recursive case\n\
    \    if isupper_\n        check_dict_case(dict[keys(dict)[2:end]]) ? return true\
    \ : return false\n    else\n        check_dict_case(dict[keys(dict)[2:end]]) ?\
    \ return false : return true\n    end\nend\n    \ncheck_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"})\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"})\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    })\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n\
    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })", "    tolower(keys(dict))==toupper(keys(dict))\n\
    end", "    if length(dict) == 0\n        return false\n    end\n    for (key,\
    \ value) in dict\n        if typeof(key) != String\n            return false\n\
    \        end\n        if key != uppercase(key) && key != lowercase(key)\n    \
    \        return false\n        end\n    end\n    return true\nend\n ", "    if\
    \ length(dict) == 0\n        return false\n    end\n    ls = collect(keys(dict))\n\
    \    if isequal(lowercase.(ls), ls) || isequal(uppercase.(ls), ls)\n        return\
    \ true\n    else\n        return false\n    end\nend", "    return\n    # edge\
    \ case\n    if dict == Dict{String, String}()\n        return false\n    end\n\
    \    # find upper and lower keys\n    lowerkeys = []\n    upperkeys = []\n   \
    \ for (key, _) in dict\n        if islower(key)\n            push!(lowerkeys,\
    \ key)\n        else\n            push!(upperkeys, key)\n        end\n    end\n\
    \    # Return false if keys are mixed and true if all keys are either upper or\
    \ lower case\n    length(lowerkeys) == 0 || length(upperkeys) == 0\nend", "  \
    \  lowerCase = 0\n    upperCase = 0\n    for (key, val) in dict\n        if islower(key)\n\
    \            lowerCase += 1\n        elseif isupper(key)\n            upperCase\
    \ += 1\n        end\n    end\n    if lowerCase != 0 && upperCase != 0\n      \
    \  return false\n    else\n        return true\n    end\nend", "    if length(dict)\
    \ == 0\n        return false\n    end\n    return all(islower.(keys(dict))) ||\
    \ all(isupper.(keys(dict)))\nend", "    lower_case_count = 0\n    upper_case_count\
    \ = 0\n    for (k,v) in dict\n        if islower(k)\n            lower_case_count\
    \ += 1\n        elseif isupper(k)\n            upper_case_count += 1\n       \
    \ end\n    end\n    if lower_case_count == length(dict) || upper_case_count ==\
    \ length(dict)\n        return true\n    else\n        return false\n    end\n\
    end", "    all_lower_case_keys = all(k in lowercase(k) for k in keys(dict))\n\
    \    all_upper_case_keys = all(k in uppercase(k) for k in keys(dict))\n    return\
    \ all_lower_case_keys || all_upper_case_keys\nend\ncheck_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"})\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"})\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    })\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n\
    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n ", "    # check if the\
    \ dictionary is empty \n    # return False if it is empty \n    #return false\n\
    \    # otherwise, find out which case (upper or lower) \n    # all keys are in\n\
    \    # return False if mixed cases found\n    # return True if all keys in lower\
    \ case \n    # return True if all keys in upper case \n    # end\nend\n ", " \
    \   dict == dict\nend", "    isupper = true\n    islower = true\n    for key in\
    \ keys(dict)\n        if isupper && islower\n            break\n        end\n\
    \        isupper = isupper && isupper(key)\n        islower = islower && islower(key)\n\
    \    end\n    isupper || islower\nend", "    for key in keys(dict)\n        if\
    \ contains(key, r\"[A-Z]\") && contains(key, r\"[a-z]\")\n            return false\n\
    \        end\n    end\n    return true\nend", "    return length(keys(dict)) !=\
    \ 0 && all(key.islower for key in keys(dict)) || all(key.isupper for key in keys(dict))\n\
    end", "    keys = keys(dict)\n    upper_count = 0\n    lower_count = 0\n    for\
    \ key in keys\n        if key == uppercase(key)\n            upper_count += 1\n\
    \        else\n            lower_count += 1\n        end\n    end\n    if upper_count\
    \ == 0 && lower_count == 0\n        return false\n    elseif upper_count == 0\
    \ || lower_count == 0\n        return true\n    else\n        return false\n \
    \   end\nend\nprintln(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n\
    println(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n\
    println(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\n\
    println(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprintln(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))", "    if\
    \ length(dict) == 0 return false end\n    flag = true\n    for k in keys(dict)\n\
    \        if typeof(k) == String \n            if flag == true\n              \
    \  if isupper(k[1])\n                    flag = true\n                else\n \
    \                   flag = false\n                end\n            else\n    \
    \            if islower(k[1])\n                    flag = true\n             \
    \   else\n                    flag = false\n                end\n            end\n\
    \        else\n            flag = false\n        end\n    end\n    return flag\n\
    end", "    lower_items = filter(key -> islower(key), keys(dict))\n    upper_items\
    \ = filter(key -> isupper(key), keys(dict))\n    (length(lower_items) == length(dict)\
    \ || length(upper_items) == length(dict))\nend", "    keys = collect(keys(dict))\n\
    \    if length(keys) == 0\n        return false\n    end\n    if islower(keys[1])\n\
    \        for i in 1:length(keys)\n            if islower(keys[i]) == false\n \
    \               return false\n            end\n        end\n    elseif isupper(keys[1])\n\
    \        for i in 1:length(keys)\n            if isupper(keys[i]) == false\n \
    \               return false\n            end\n        end\n    else\n       \
    \ return false\n    end\n    return true\nend", "    # find minimum value in the\
    \ first key of the dictionary\n    if length(dict)==0\n        return false\n\
    \    end\n    # find minimum value in the first key of the dictionary\n    k =\
    \ keys(dict)[1]\n    if islower(k[1])\n        for k in keys(dict)\n         \
    \   if isupper(k[1])\n                return false\n            end\n        end\n\
    \    elseif isupper(k[1])\n        for k in keys(dict)\n            if islower(k[1])\n\
    \                return false\n            end\n        end\n    else\n      \
    \  return false\n    end\n    return true\nend", "    keys = collect(keys(dict))\n\
    \    first_char = first(keys)\n    if first_char in lowercase(first_char)\n  \
    \      for key in keys\n            if !(key in lowercase(key))\n            \
    \    return false\n            end\n        end\n    elseif first_char in uppercase(first_char)\n\
    \        for key in keys\n            if !(key in uppercase(key))\n          \
    \      return false\n            end\n        end\n    else\n        return false\n\
    \    end\n    return true\nend", "    return length(dict) == 0 ? false : islower(collect(keys(dict)))\
    \ || isupper(collect(keys(dict)))\nend", "    lower_keys = 0\n    upper_keys =\
    \ 0\n    for k in keys(dict)\n        lower_keys += k in lowercase(k)\n      \
    \  upper_keys += k in uppercase(k)\n    end\n    return lower_keys == length(dict)\
    \ || upper_keys == length(dict)\nend", "    case_type = \"\"\n    count = 0\n\
    \    for (k, v) in dict\n        if count == 0\n            case_type = typeof(k)\n\
    \            count += 1\n        elseif typeof(k) != case_type\n            return\
    \ false\n        end\n    end\n    return true\nend", "    # If the dictionary\
    \ is empty, return False\n    if length(dict) == 0 \n        return false\n  \
    \  end\n    # If the first element is uppercase, then iterate through \n    #\
    \ the keys and check if they are all uppercase\n    if isupper(keys(dict)[1])\n\
    \        for key in keys(dict)\n            if !isupper(key)\n               \
    \ return false\n            end\n        end\n        return true\n    # If the\
    \ first element is lowercase, then iterate through \n    # the keys and check\
    \ if they are all lowercase\n    elseif islower(keys(dict)[1])\n        for key\
    \ in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n        return true\n    # Otherwise return false\
    \ because the first letter is neither\n    # lowercase nor uppercase\n    else\n\
    \        return false\n    end\nend", "    # YOUR CODE HERE\nend\n\"\"\"Grader\"\
    \"\"\nscore = 0\nsolutions = [solution_1, solution_2, solution_3, solution_4,\
    \ solution_5, solution_6, solution_7, solution_8, solution_9, solution_10, solution_11,\
    \ solution_12, solution_13, solution_14, solution_15, solution_16, solution_17,\
    \ solution_18, solution_19, solution_20, solution_21, solution_22, solution_23,\
    \ solution_24, solution_25, solution_26, solution_27, solution_28, solution_29,\
    \ solution_30, solution_31, solution_32, solution_33, solution_34, solution_35,\
    \ solution_36, solution_37, solution_38, solution_39, solution_40, solution_41,\
    \ solution_42, solution_43, solution_44, solution_45, solution_46, solution_47,\
    \ solution_48, solution_49, solution_50, solution_51, solution_52, solution_53,\
    \ solution_54, solution_55, solution_56, solution_57, solution_58, solution_59,\
    \ solution_60, solution_61, solution_62, solution_63, solution_64, solution_65,\
    \ solution_66, solution_67, solution_68, solution_69, solution_70, solution_71,\
    \ solution_72, solution_73, solution_74, solution_75, solution_76, solution_77,\
    \ solution_78, solution_79, solution_80, solution_81, solution_82, solution_83,\
    \ solution_84, solution_85, solution_86, solution_87, solution_88, solution_89,\
    \ solution_90, solution_91, solution_92, solution_93, solution_94, solution_95,\
    \ solution_96, solution_97, solution_98, solution_99, solution_100, solution_101,\
    \ solution_102, solution_103, solution_104, solution_105, solution_106, solution_107,\
    \ solution_108, solution_109, solution_110, solution_111, solution_112, solution_113,\
    \ solution_114, solution_115, solution_116, solution_117, solution_118, solution_119,\
    \ solution_120, solution_121, solution_122, solution", "    print(dict)\nend",
  "    if length(dict) == 0\n        return false\n    end\n    islower(string(collect(keys(dict))))\n\
    end", "    lcount = 0\n    ucount = 0\n    if(size(dict) == 0)\n        return\
    \ false\n    end\n    for (k,v) in dict\n        islower(k) ? lcount += 1 : ucount\
    \ += 1\n    end\n    if(lcount == 0)\n        return true\n    elseif(ucount ==\
    \ 0)\n        return true\n    else\n        return false\n    end\nend", "  \
    \  # your code here\nend\n ", "    uppercount = 0\n    lowercount = 0\n    for\
    \ (key, value) in dict\n        if(isupper(key))\n            uppercount += 1\n\
    \        else\n            lowercount += 1\n        end\n    end\n    if(length(dict)==0)\n\
    \        return false\n    elseif(lowercount == 0)\n        return true\n    elseif(uppercount\
    \ == 0)\n        return true\n    else\n        return false\n    end\nend", " \
    \   lcase = (isascii(key[1]) && key[1] < \"a\") ? true : false\n    ucase = (isascii(key[1])\
    \ && key[1] > \"Z\") ? true : false\n    for key in keys(dict)\n        # lcase\
    \ and ucase are intentionally initialized to false\n        lcase = (isascii(key[1])\
    \ && key[1] < \"a\") ? true : false\n        ucase = (isascii(key[1]) && key[1]\
    \ > \"Z\") ? true : false\n    end\n    return lcase || ucase\nend", "    return\
    \ false\nend", "    uppers = 0\n    lowers = 0\n    length = 0\n    for (key,\
    \ _) in dict\n        length += 1\n        if uppercase(key) == key\n        \
    \    uppers += 1\n        elseif lowercase(key) == key\n            lowers +=\
    \ 1\n        end\n    end\n    return (uppers == length || lowers == length) &&\
    \ length > 0\nend", "    count_upper_case = 0\n    count_lower_case = 0\n    for\
    \ key in keys(dict)\n        if uppercase(key) == key\n            count_upper_case\
    \ += 1\n        elseif lowercase(key) == key\n            count_lower_case +=\
    \ 1\n        end\n    end\n    return count_upper_case == 0 || count_lower_case\
    \ == 0 ? true : false\nend", "    \n    \n    \n    \n    \nend", "    return\
    \ false\nend", "    # if the dictionary is empty return false\n    if isempty(dict)\n\
    \        return false\n    else\n        # sort the keys and store it in a variable\n\
    \        key_list = sort(collect(keys(dict)))\n        # check if all the elements\
    \ of the list are lowercase\n        if all(islower, key_list)\n            return\
    \ true\n        # check if all the elements of the list are uppercase\n      \
    \  elseif all(isupper, key_list)\n            return true\n        else\n    \
    \        return false\n        end\n    end\nend\ncheck_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"})", "    # Empty dict is False:\n    if dict == Dict{String,\
    \ String}()\n        return false\n    end\n    # Check if all lower or all upper:\n\
    \    if all(lowercase.(keys(dict)))\n        return true\n    elseif all(uppercase.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend", "    upper_counter\
    \ = 0\n    lower_counter = 0\n    for key in keys(dict)\n        if key in uppercase(key)\n\
    \            upper_counter += 1\n        else\n            lower_counter += 1\n\
    \        end\n    end\n    if isempty(dict) == true\n        return false\n  \
    \  elseif lower_counter == 0\n        return true\n    elseif upper_counter ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend", "   \
    \ for (x,y) in dict\n        if !(string.islower(x)) || !(string.isupper(x))\n\
    \            return false\n        end\n    end\n    return true\nend", "    upper_flag\
    \ = true\n    lower_flag = true\n    if length(dict)==0\n        return false\n\
    \    end\n    for key in keys(dict)\n        if key == uppercase(key)\n      \
    \      lower_flag = false\n        else\n            upper_flag = false\n    \
    \    end\n    end\n    return upper_flag || lower_flag\nend\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))", "    lower_keys = all(islower(k) for k\
    \ in keys(dict))\n    upper_keys = all(isupper(k) for k in keys(dict))\n    return\
    \ lower_keys || upper_keys \nend", "    return 1 == length(unique(map(string ->\
    \ string(string[1])::Union{Char, Number}, keys(dict))))\nend", "    len_upper\
    \ = length(filter(pair -> isupper(pair[1][1]), keys(dict)))\n    len_lower = length(filter(pair\
    \ -> islower(pair[1][1]), keys(dict)))\n    return len_upper == 0 || len_lower\
    \ == 0\nend", "  for key in keys(dict)\n    if (string(key) != lowercase(key)\
    \ && string(key) != uppercase(key))\n      return false\n    end\n  end\n  return\
    \ true\nend", " \n    lowercase = true\n    uppercase = true\n    \n    for (k,\
    \ v) in dict\n        lowercase &&= k \u2208 'a':'z'\n        uppercase &&= k\
    \ \u2208 'A':'Z'\n    end\n    \n    lowercase || uppercase ? true : false\nend",
  "    \n    if length(dict)==0\n        return false\n    end\n    \n    bools=[]\n\
    \    for (key,value) in dict\n        if all(UpperCase.(key))\n            bools=[bools;true]\n\
    \        elseif all(LowerCase.(key))\n            bools=[bools;true]\n       \
    \ else\n            bools=[bools;false]\n        end\n    end\n    if all(bools)\n\
    \        return true\n    else\n        return false\n    end\nend", "    lower_keys\
    \ = 0\n    upper_keys = 0\n    for key in keys(dict)\n        lower_keys += islower(key)\n\
    \        upper_keys += isupper(key)\n    end\n    lower_keys == 0 && upper_keys\
    \ == 0 ? false : true\nend", "    lower_keys = true\n    upper_keys = true\n \
    \   empty_dict = true\n    for key in keys(dict)\n        if islower(key) == false\n\
    \            lower_keys = false\n        end\n        if isupper(key) == false\n\
    \            upper_keys = false\n        end\n        if isempty(dict) == false\n\
    \            empty_dict = false\n        end\n    end\n    if lower_keys == true\
    \ || upper_keys == true || empty_dict == true\n        return true\n    else\n\
    \        return false\n    end\nend", "    k = collect(keys(dict))\n    if length(k)\
    \ == 0\n        return false\n    end\n    if islowercase(k[1])\n        return\
    \ all(x -> islowercase(x), k)\n    elseif isuppercase(k[1])\n        return all(x\
    \ -> isuppercase(x), k)\n    else\n        return false\n    end\nend", "    if\
    \ length(dict) == 0\n        return false\n    end\n    lowercase = false\n  \
    \  uppercase = false\n    for key in keys(dict)\n        if key == lowercase(key)\n\
    \            lowercase = true\n        elseif key == uppercase(key)\n        \
    \    uppercase = true\n        else\n            return false\n        end\n \
    \   end\n    if lowercase == true && uppercase == true\n        return false\n\
    \    else\n        return true\n    end\nend", "    upper_keys = true\n    lower_keys\
    \ = true\n    for (key, val) in dict\n        if upper_keys\n            if !isupper(key)\n\
    \                upper_keys = false\n            end\n        end\n        if\
    \ lower_keys\n            if !islower(key)\n                lower_keys = false\n\
    \            end\n        end\n    end\n    return (upper_keys || lower_keys)\
    \ && (size(dict) > 0)\nend", "    lowcount = 0\n    uppcount = 0\n    for key\
    \ in keys(dict)\n        if key == lowercase(key)\n            lowcount += 1\n\
    \        elseif key == uppercase(key)\n            uppcount += 1\n        end\n\
    \    end\n    if lowcount == length(dict) || uppcount == length(dict)\n      \
    \  return true\n    else\n        return false\n    end\nend\n\"\"\"\n    Given\
    \ a dictionary, return a new dictionary which contains values \n    of the original\
    \ dictionary converted to lower case.\n    Examples:\n    get_lower_case_dict({\"\
    a\":\"apple\", \"b\":\"Banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"\
    }.\n    get_lower_case_dict({\"cA\":\"carrot\", \"BaNaNa\":\"basket\"}) should\
    \ return {\"ca\":\"carrot\", \"banana\":\"basket\"}.\n    get_lower_case_dict({\"\
    A\":\"APPLE\", \"b\":\"banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"\
    }.\n    get_lower_case_dict({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"cat\"\
    }) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"cat\"}.\n    get_lower_case_dict({\"\
    A\":\"apple\", \"B\":\"banana\", \"C\":\"cat\"}) should return {\"a\":\"apple\"\
    , \"b\":\"banana\", \"c\":\"cat\"}.\n    \"\"\"", "    keys = keys(dict)\n   \
    \ if length(keys) == 0\n        return false\n    end\n    is_upper = isupper(keys[1])\n\
    \    is_lower = islower(keys[1])\n    #println(is_upper, is_lower)\n    for key\
    \ in keys\n        is_upper = is_upper && isupper(key)\n        is_lower = is_lower\
    \ && islower(key)\n    end\n    return is_upper || is_lower\nend", "    if length(dict)\
    \ == 0\n        return false\n    end\n    first = collect(keys(dict))[1]\n  \
    \  if isupper(first)\n        for (k,v) in dict\n            if !isupper(k)\n\
    \                return false\n            end\n        end\n    else\n      \
    \  for (k,v) in dict\n            if !islower(k)\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "    count_upper_case\
    \ = 0\n    count_lower_case = 0\n    for key in keys(dict)\n        if (issubtype(String,\
    \ typeof(key))==false)\n            return false\n        end\n        if (key[1]\
    \ in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n            count_upper_case += 1\n      \
    \  elseif (key[1] in 'abcdefghijklmnopqrstuvwxyz')\n            count_lower_case\
    \ += 1\n        else\n            return false\n        end\n    end\n    if (count_upper_case\
    \ == 0 || count_lower_case == 0)\n        return true\n    else\n        return\
    \ false\n    end\nend", "    all(lowercase, keys(dict)) || all(uppercase, keys(dict))\n\
    end", "    flag = true\n    if length(dict) == 0 \n        return false\n    end\n\
    \    for (k, v) in dict\n        if islower(k) != islower(first(k))\n        \
    \    flag = false\n        end\n    end\n    return flag\nend", "    if length(dict)\
    \ == 0\n        return false\n    end\n    s = false\n    lower = true\n    for\
    \ key in keys(dict)\n        if typeof(key) != String\n            return false\n\
    \        end\n        if (islower(key) && s == false)\n            s = true\n\
    \        elseif (isupper(key) && s == false)\n            s = true\n         \
    \   lower = false\n        elseif (islower(key) && lower == false)\n         \
    \   return false\n        elseif (isupper(key) && lower == true)\n           \
    \ return false\n        end\n    end\n    return true\nend", "    f1 = (x->x==x.lowercase).(collect(keys(dict)))\n\
    \    f2 = (x->x==x.uppercase).(collect(keys(dict)))\n    return all(f1) || all(f2)\
    \ ? true : false\nend", "    if length(dict) == 0\n        return false\n    end\n\
    \    if isall(k -> k == uppercase(k), keys(dict)) \n        return true\n    elseif\
    \ isall(k -> k == lowercase(k), keys(dict))\n        return true\n    else\n \
    \       return false\n    end\nend", "        len = length(keys(dict))\n     \
    \   key_list = keys(dict)\n        if len == 0\n            return false\n   \
    \     end\n        flag = true\n        if islower(key_list[1])\n            for\
    \ i in key_list\n                if !islower(i)\n                    flag = false\n\
    \                end\n            end\n        else\n            for i in key_list\n\
    \                if !isupper(i)\n                    flag = false\n          \
    \      end\n            end\n        end\n        return flag\n    end\n    #\
    \ -- MAIN CODE\n    println(\"Returned value: \", check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\n    println(\"Returned value: \", check_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    println(\"Returned value:\
    \ \", check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\n\
    \    println(\"Returned value: \", check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}))\n    println(\"Returned value: \", check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))", "    bool = true\n    all_lower = true\n\
    \    all_upper = true\n    if length(dict) == 0\n        bool = false\n    else\
    \ \n        for key in keys(dict)\n            if islower(key) == false \n   \
    \             all_lower = false\n            end\n            if isupper(key)\
    \ == false \n                all_upper = false\n            end\n        end\n\
    \        if all_lower == false && all_upper == false\n            bool = false\n\
    \        end\n    end\n    return bool\nend", "    \"\"\"This function should\
    \ return True if the keys are in lower case or all uppercase, \n    else return\
    \ False\n    \"\"\"\n    return all(k in lowercase(k) for k in keys(dict)) ||\
    \ all(k in uppercase(k) for k in keys(dict))\nend", "    # if dict is empty, return\
    \ false\n    if length(dict) == 0\n        return false\n    end\n    # if all\
    \ keys are in lower case\n    if all(isupper.(keys(dict)))\n        return true\n\
    \    # if all keys are in upper case\n    elseif all(islower.(keys(dict)))\n \
    \       return true\n    # else return false\n    else\n        return false\n\
    \    end\nend", "    \n    upper_keys = Set(String.(collect(keys(dict))))\n  \
    \  lower_keys = Set(String.(collect(keys(dict))))\n    \n    if length(upper_keys)\
    \ == 0 || length(lower_keys) == 0\n        return false\n    end\n    \n    if\
    \ length(upper_keys) > 0 && length(lower_keys) > 0\n        return false\n   \
    \ end\n    \n    if length(upper_keys) == 0 && length(lower_keys) == 0\n     \
    \   return true\n    end\nend", "  case_type = all(islower, keys(dict)) || all(isupper,\
    \ keys(dict)) \n  !isempty(dict) && case_type ? true : false\nend", "    keys_lower\
    \ = all(lowercase(key) == key for key in keys(dict))\n    keys_upper = all(uppercase(key)\
    \ == key for key in keys(dict))\n    return keys_lower || keys_upper\nend", " \
    \   AllUpper = true\n    AllLower = true\n    if length(dict) == 0\n        return\
    \ false\n    end\n    for key in keys(dict)\n        if (isupper(key)) \n    \
    \        AllLower = false\n        elseif (islower(key))\n            AllUpper\
    \ = false\n        else\n            return false\n        end\n    end\n    return\
    \ (AllUpper || AllLower)\nend", "    lower_keys = \"a\" <= keys(dict) <= \"z\"\
    \n    upper_keys = \"A\" <= keys(dict) <= \"Z\"\n    return (lower_keys || upper_keys)\
    \ && !isempty(dict)\nend", "    i = 0\n    type = \"\"\n    while i<length(dict)\n\
    \        if contains(keys(dict)[i], \"a-z\")\n            type = \"lower\"\n \
    \       elseif contains(keys(dict)[i], \"A-Z\")\n            type = \"upper\"\n\
    \        else\n            return false\n        end\n        i = i+1\n    end\n\
    \    \n    for i in keys(dict)\n        if type == \"lower\"\n            if contains(i,\
    \ \"A-Z\")\n                return false\n            end\n        elseif type\
    \ == \"upper\"\n            if contains(i, \"a-z\")\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "        return\
    \ false \nend", "    i=0\n    a=true\n    b=true\n    while i<length(dict)\n \
    \       if islowercase(keys(dict)[i])==false\n            a=false\n        end\n\
    \        if isuppercase(keys(dict)[i])==false\n            b=false\n        end\n\
    \        i=i+1\n    end\n    if a==true || b==true\n        return true\n    else\
    \ \n        return false\n    end\nend", "    \nend", "    if length(dict) ==\
    \ 0\n        return false\n    end\n    allUpper = true\n    allLower = true\n\
    \    for k in keys(dict)\n        if k == uppercase(k)\n            allLower =\
    \ false\n        elseif k == lowercase(k)\n            allUpper = false\n    \
    \    else\n            return false\n        end\n    end\n    if allUpper ||\
    \ allLower\n        return true\n    else\n        return false\n    end\nend",
  "    if length(dict) == 0\n        return false\n    end\n    first_key = first(keys(dict))\n\
    \    case = isupper(first_key)\n    all_keys_match_case = true\n    for key in\
    \ keys(dict)\n        if (isupper(key) && !case) || (islower(key) && case)\n \
    \           all_keys_match_case = false\n            break\n        end\n    end\n\
    \    return all_keys_match_case\nend", "    keys(dict) |> \n        map(x -> x\
    \ \u2208 ('a':'z')) |>\n        collect |> \n        reduce(\u2227)\nend\n\"\"\
    \"\n    Given a string s, return all the words in s, which occur more than once.\n\
    \    Examples:\n    words_occur_once(\"How much wood would a woodchuck chuck if\
    \ a woodchuck could chuck wood\") should return the array [\"a\", \"if\", \"woodchuck\"\
    , \"chuck\"].\n    words_occur_once(\"\") should return an empty array.\n    words_occur_once(\"\
    a a b c c a d\") should return the array [\"a\", \"c\"].\n    \"\"\"", "    #\
    \ initialize variables \n    lower_flag = true \n    upper_flag = true \n    key_flag\
    \ = true \n    # check if dictionary is empty \n    if length(dict) == 0 \n  \
    \      return false \n    end \n    # traverse the dictionary and check if all\
    \ keys are lower or upper\n    for (key, value) in dict \n        # check if all\
    \ keys are lowercase \n        if islower(key) == false \n            lower_flag\
    \ = false \n        end \n        # check if all keys are uppercase \n       \
    \ if isupper(key) == false \n            upper_flag = false \n        end \n \
    \       # check if all keys are string \n        if isa(key, String) == false\
    \ \n            key_flag = false \n        end \n    end \n    # return \n   \
    \ if key_flag == false \n        return false \n    elseif lower_flag == true\
    \ \n        return true \n    elseif upper_flag == true \n        return true\
    \ \n    else \n        return false \n    end \nend ", "    upper_count = 0\n\
    \    lower_count = 0\n    for key in keys(dict)\n        is_upper = uppercase(key)\
    \ == key\n        is_lower = lowercase(key) == key\n        if is_upper\n    \
    \        upper_count += 1\n        elseif is_lower\n            lower_count +=\
    \ 1\n        else\n            return false\n        end\n    end\n    return\
    \ upper_count == 0 || lower_count == 0\nend", "    if length(dict) == 0\n    \
    \    return false\n    end\n    mixed = false\n    lowercase = false\n    uppercase\
    \ = false\n    for (key, value) in dict\n        if mixed && lowercase && uppercase\n\
    \            return false\n        end\n        if islower(key)\n            lowercase\
    \ = true\n        elseif isupper(key)\n            uppercase = true\n        else\n\
    \            mixed = true\n        end\n    end\n    return !mixed && lowercase\
    \ != uppercase\nend", "    if length(dict) == 0\n        return false\n    end\n\
    \    for (k,v) in dict\n        if islower(k) || isupper(k)\n            return\
    \ true\n        else\n            return false\n        end\n    end\nend\ncheck_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) ", "    lower = [x for x in dict.keys if\
    \ islower(x)]\n    upper = [x for x in dict.keys if isupper(x)]\n    if length(lower)\
    \ == length(dict) return true\n    elseif length(upper) == length(dict) return\
    \ true\n    else return false\n    end\nend", "  keys = collect(keys(dict))\n\
    \  islower(keys[1]) ? islower(keys) : isupper(keys) ? true : false\nend", "  \
    \  if length(dict) == 0\n        return false\n    end\n    upper = true\n   \
    \ lower = true\n    for (k, v) in dict\n        upper = upper && uppercase(k)\
    \ == k\n        lower = lower && lowercase(k) == k\n    end\n    return upper\
    \ || lower\nend", "    if isempty(dict)\n        return false\n    end\n    if\
    \ length(dict) == 1\n        return true\n    end\n    if uppercase(keys(dict)[1])\
    \ == keys(dict)[1]\n        return all(uppercase(k) == k for k in keys(dict))\n\
    \    else\n        return all(lowercase(k) == k for k in keys(dict))\n    end\n\
    end\n    ", "    # Check for empty dict\n    if length(dict) == 0\n        return\
    \ false\n    end\n    # Check for upper or lower case\n    return all(isascii,\
    \ collect(keys(dict)))\nend", "    upper_keys = [key for key in keys(dict) if\
    \ isupper(key)]\n    lower_keys = [key for key in keys(dict) if islower(key)]\n\
    \    if (lower_keys == []) && (upper_keys == [])\n        return false\n    elseif\
    \ (lower_keys == []) || (upper_keys == [])\n        return true\n    else\n  \
    \      return false\n    end\nend", "    flag = true\n    if isempty(dict)\n \
    \       flag = false\n    else\n        for (key, value) in dict\n           \
    \ if key in uppercase(key)\n                flag = false\n            end\n  \
    \      end\n    end\n    return flag\nend", "    lower_keys = islower(collect(keys(dict)))\n\
    \    upper_keys = isupper(collect(keys(dict)))\n    lower_keys || upper_keys\n\
    end\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    })", "    c_upper::Bool = true\n    c_lower::Bool = true\n    if length(dict)\
    \ == 0\n        return false\n    end\n    for (k,v) in dict\n        if isuppercase(k)\n\
    \            c_lower = false\n        elseif islowercase(k)\n            c_upper\
    \ = false\n        else\n            return false\n        end\n    end\n    if\
    \ c_upper || c_lower\n        return true\n    else\n        return false\n  \
    \  end\nend", "    bool1 = true\n    bool2 = true\n    bool3 = true\n    for key\
    \ in keys(dict)\n        if islowercase(key)\n            bool1 = false\n    \
    \    end\n        if isuppercase(key)\n            bool2 = false\n        end\n\
    \        if isnumeric(key)\n            bool3 = false\n        end\n    end\n\
    \    if bool1 == false && bool2 == false && bool3 == false\n        return false\n\
    \    elseif bool1 == true && bool2 == false && bool3 == false\n        return\
    \ true\n    elseif bool1 == false && bool2 == true && bool3 == false\n       \
    \ return true\n    else\n        return false\n    end\nend", "    \"\"\"\n  \
    \  Given a dictionary, return True if all keys are strings in lower \n    case\
    \ or all keys are strings in upper case, else return False.\n    The function\
    \ should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n   \
    \ check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should\
    \ return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if length(dict) == 0\n\
    \        return false\n    end\n    if all([key == key, key == lowercase(key)\
    \ key = collect(keys(dict))])\n        return true\n    elseif all([key == key,\
    \ key == uppercase(key) key = collect(keys(dict))])\n        return true\n   \
    \ else\n        return false\n    end\nend", "    if size(dict, 1) == 0\n    \
    \    return false\n    end\n    upper = true\n    lower = true\n    for (key,\
    \ value) in dict\n        if upper\n            upper = (key == uppercase(key))\n\
    \        end\n        if lower\n            lower = (key == lowercase(key))\n\
    \        end\n    end\n    return upper || lower\nend", "   \n    for i in dict.keys\n\
    \        if is_uppercase(i)\n            islower = false\n        else\n     \
    \       islower = true\n        end\n    end\n    \n    if islower == true\n \
    \       uppercase = false\n    else\n        uppercase = true\n    end\n    \n\
    \    if islower || uppercase\n        return true\n    else\n        return false\n\
    \    end\nend", "    \n    \nend", "    if isempty(dict)\n        return false\n\
    \    end\n    lower = true\n    upper = true\n    for key in keys(dict)\n    \
    \    if !(islower(key) || isupper(key))\n            return false\n        end\n\
    \        if !islower(key)\n            lower = false\n        end\n        if\
    \ !isupper(key)\n            upper = false\n        end\n    end\n    lower ||\
    \ upper\nend", "    for key in keys(dict)\n        if !isupper(key) && !islower(key)\n\
    \            return false\n        end\n    end\n    return true\nend\n ", " \
    \   len_of_dict = length(dict)\n    if len_of_dict == 0\n        return false\n\
    \    end\n    is_upper_case = true\n    for (key, value) in dict\n        if !all(islower(key))\n\
    \            is_upper_case = false\n            break\n        end\n    end\n\
    \    if is_upper_case\n        return true\n    end\n    is_lower_case = true\n\
    \    for (key, value) in dict\n        if !all(isupper(key))\n            is_lower_case\
    \ = false\n            break\n        end\n    end\n    return is_lower_case\n\
    end", "  dict == Dict([lowercase(key) => value for (key, value) in dict]) || \n\
    \    dict == Dict([uppercase(key) => value for (key, value) in dict])\nend", " \
    \   # Your code here\nend\n \ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) == true\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }) == false\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }) == false\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }) == false\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == true\n\
    \ \n \n \n \n \n \n\"\"\"\n    Given a dictionary, return a new dictionary with\
    \ the same keys, \n    but all the values should be cube of the original value.\
    \ \n    The function should return False is the given dictionary is empty.\n \
    \   Examples:\n    dict_cube({'a':1, 'b':2}) should return {'a':1, 'b':8}\n  \
    \  dict_cube({'a':10, 'b':2}) should return {'a':1000, 'b':8}\n    dict_cube({'Name':'John',\
    \ 'Age':'36', 'City':'Houston'}) should return False\n    dict_cube({'a':'apple',\
    \ 'b':'banana'}) should return False\n    \"\"\"", "    is_string_uppercase =\
    \ true\n    is_string_lowercase = true\n    key_count = 0\n    for (key, value)\
    \ in dict\n        key_count += 1\n        is_string_uppercase = is_string_uppercase\
    \ && isupper(key)\n        is_string_lowercase = is_string_lowercase && islower(key)\n\
    \    end\n    return key_count == 0 ? false : is_string_uppercase || is_string_lowercase\n\
    end", "    keys_are_lower = true\n    keys_are_upper = true\n    for (key, value)\
    \ in dict\n        keys_are_lower &&= (key == string(key))\n        keys_are_upper\
    \ &&= (key == string(key)::uppercase)\n    end\n    return keys_are_lower || keys_are_upper\n\
    end", "    #Set a flag to true so that while loop can be entered.\n    flag =\
    \ true\n    #Empty dictionary cannot have string keys.\n    if length(dict) ==\
    \ 0\n        return false\n    end\n    #Now check if the keys of the dictionary\
    \ are either in upper case or lower case.\n    #If both are present, return false.\n\
    \    while flag == true\n        #set flag to false.\n        flag = false\n \
    \       #get the first key and check if it is upper case. If it is, change the\
    \ flag to true.\n        isupper(keys(dict)[1]) == true ? flag = true : flag =\
    \ false\n        for key in keys(dict)\n            #if flag is set to true and\
    \ the key is not in upper case, return false.\n            if flag == true &&\
    \ isupper(key) == false\n                return false\n            #if flag is\
    \ set to false and the key is not in lower case, return false.\n            elseif\
    \ flag == false && islower(key) == false\n                return false\n     \
    \       end\n        end\n    end\n    #If all keys are lower case or upper case,\
    \ return true.\n    return true\nend", "    if isempty(dict)\n        return false\n\
    \    end\n    for k in keys(dict)\n        if islowercase(k)\n            return\
    \ false\n        end\n    end\n    return true\nend", "    lowercase = true\n\
    \    uppercase = true\n    for (key, value) in dict\n        if !islower(key)\n\
    \            lowercase = false\n        end\n        if !isupper(key)\n      \
    \      uppercase = false\n        end\n    end\n    return (lowercase || uppercase)\n\
    end", "    \n    # check empty dictionary\n    if length(dict) == 0\n        return\
    \ false\n    end\n    \n    # check case\n    if all(k in 'a':'z' for k in keys(dict))\
    \ || \n       all(k in 'A':'Z' for k in keys(dict))\n        return true\n   \
    \ else\n        return false\n    end\nend", "    #check for empty dictionary\n\
    \    if isempty(dict)\n        return false\n    end\n    keys=keys(dict)\n  \
    \  #declare variable to store whether all keys are lower case or not \n    lower_case=islower(keys[1])\n\
    \    #if all keys are lower case or upper case\n    if all(map(islower, keys))\
    \ || all(map(isupper, keys))\n        return true\n    end\n    return false\n\
    end", "    \n    all_upper = true\n    all_lower = true\n    \n    for key in\
    \ keys(dict)\n        all_upper = all_upper && (key == uppercase(key))\n     \
    \   all_lower = all_lower && (key == lowercase(key))\n    end\n    return all_upper\
    \ || all_lower\nend", "    # Code starts here\n    # Counter for lower and upper\
    \ cases\n    lower_cnt = 0\n    upper_cnt = 0\n    for key in keys(dict)\n   \
    \     if islower(key)\n            lower_cnt += 1\n        elseif isupper(key)\n\
    \            upper_cnt += 1\n        end\n    end\n    #checking for both cases\n\
    \    if(lower_cnt==length(dict) || upper_cnt==length(dict))\n        return true\n\
    \    else\n        return false\n    end\n    \nend", "        if length(dict)\
    \ == 0 \n            return false\n        end\n        islowercase = true\n \
    \       isuppercase = true\n        for (key, value) in dict\n            if islowercase\
    \ \n                islowercase = islowercase && islower(key)\n            end\n\
    \            if isuppercase \n                isuppercase = isuppercase && isupper(key)\n\
    \            end\n        end\n        \n        return islowercase || isuppercase\n\
    \    end\nend", "    # size(dict) == 0 && return false\n    lower = []\n    upper\
    \ = []\n    for (key, value) in dict\n        islower(key) && push!(lower, key)\n\
    \        isupper(key) && push!(upper, key)\n    end\n    if size(lower) == size(dict)\n\
    \        return true\n    elseif size(upper) == size(dict)\n        return true\n\
    \    else\n        return false\n    end\nend", "    lower_count = 0\n    upper_count\
    \ = 0\n    for (key, value) in dict\n        if isupper(key)\n            upper_count\
    \ += 1\n        elseif islower(key)\n            lower_count += 1\n        end\n\
    \    end\n    if lower_count == 0 || upper_count == 0\n        return true\n \
    \   else\n        return false\n    end\nend", "    \nend", "    lower_upper_key_dict\
    \ = Dict(:lower => 0, :upper => 0)\n    dict_size = length(dict)\n    if dict_size\
    \ > 0\n        for (key, value) in dict\n            if islower(key)\n       \
    \         lower_upper_key_dict[:lower] += 1\n            elseif isupper(key)\n\
    \                lower_upper_key_dict[:upper] += 1\n            else\n       \
    \         return false\n            end\n        end\n        if lower_upper_key_dict[:lower]\
    \ == dict_size || lower_upper_key_dict[:upper] == dict_size\n            return\
    \ true\n        else\n            return false\n        end\n    else\n      \
    \  return false\n    end\nend", "    \n    \n    \n    \nend", "    lower_keys\
    \ = true\n    upper_keys = true\n    for (key, value) in dict\n        if (string(key)\
    \ != key | key != string(key))\n            return false\n        end\n      \
    \  if (string(key) != lowercase(key))\n            lower_keys = false\n      \
    \  end\n        if (string(key) != uppercase(key))\n            upper_keys = false\n\
    \        end\n    end\n    return lower_keys || upper_keys\nend", "    (lower_count\
    \ == 0) || (upper_count == 0) && (lower_count + upper_count == length(dict))\n\
    \    for (k,v) in dict\n        if typeof(k) == Int\n            return false\n\
    \        end\n        if islower(k)\n            lower_count += 1\n        elseif\
    \ isupper(k)\n            upper_count += 1\n        else\n            return false\n\
    \        end\n    end\n    if (lower_count == 0) || (upper_count == 0) && (lower_count\
    \ + upper_count == length(dict))\n        return true\n    else\n        return\
    \ false\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
