name: HumanEval_159_eat
language: pl
prompt: "# You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
  # you should return an array of [ total number of eaten carrots after your meals,\n\
  # the number of carrots left after your meals ]\n# if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
  # >>> eat(5, 6, 10)\n# [11, 4]\n# >>> eat(4, 8, 9)\n# [12, 1]\n# >>> eat(1, 10,\
  \ 10)\n# [11, 0]\n# >>> eat(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n\
  # the number of carrots that you have eaten.\n# @need : integer\n# the number of\
  \ carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
  \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need\
  \ <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\nsub eat {\n    my($number,\
  \ $need, $remaining) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n  \
  \      if(eq_deeply($candidate->(5, 6, 10),[11, 4])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 10, 10),[11, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(2, 11, 5),[7, 0])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 5, 1),[5, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my @result = ();\n    my $diff = $remaining - $need;\n    if ($diff\
    \ > 0) {\n      @result = [$number + $need, $diff];\n    } else {\n      @result\
    \ = [$number + $remaining, 0];\n    }\n    return @result;\n}", "    my @return\
    \ = ();\n    push @return, $need + $number;\n    if ($remaining < $need) {\n \
    \     push @return, 0;\n    } else {\n      push @return, $remaining - $need;\n\
    \    }\n    return @return;\n}", "    my $total;\n    if($remaining >= $need)\
    \ {\n        $total = $number + $need;\n        $remaining = $remaining - $need;\n\
    \    } else {\n        $total = $number + $remaining;\n        $remaining = 0;\n\
    \    }\n    return [$total, $remaining];\n}", "    \n    if ($remaining < $need)\
    \ {\n      $need = $remaining;\n    }\n    \n    $remaining -= $need;\n    $number\
    \ += $need;\n    \n    return [$number, $remaining];\n}", "    return [$number\
    \ + $remaining, 0] if $remaining >= $need;\n    return [$number + $remaining,\
    \ $need - $remaining];\n}", "    my $total = $number + $need;\n    if ($total\
    \ <= $remaining) {\n        return [$total, $remaining - $total];\n    } else\
    \ {\n        return [$total, 0];\n    }\n}", "    if ($need <= $remaining) {\n\
    \        return [$number + $need, $remaining - $need];\n    }\n    else {\n  \
    \      return [$number + $remaining, 0];\n    }\n}", "    return [$need + $number,\
    \ $remaining - $need] if $remaining >= $need;\n    return [$need + $number, 0];\n\
    }", "    $need -= $number;\n    if ($need <= $remaining) {\n        return [$number\
    \ + $need, $remaining - $need];\n    } else {\n        return [$number + $remaining,\
    \ 0];\n    }\n}", "    my @array = ($number, $need, $remaining);\n    my $number;\n\
    \    my $need;\n    my $remaining;\n    my $eat;\n    my $left;\n    @array =\
    \ sort { $a <=> $b } @array;\n    $number = shift @array;\n    $need = shift @array;\n\
    \    $remaining = shift @array;\n    if ($remaining > 0) {\n        $eat = $number\
    \ + $need;\n        $left = $remaining - $need;\n        return [$eat, $left];\n\
    \    } else {\n        return [$number, 0];\n    }\n}", "    if ($need > $remaining)\
    \ {\n        $number += $remaining;\n        $remaining = 0;\n    }\n    else\
    \ {\n        $number += $need;\n        $remaining -= $need;\n    }\n    return\
    \ [$number, $remaining];\n}", "    $remaining = 0 if $remaining < 0;\n    my $total\
    \ = $remaining + $number;\n    if ($total >= $need) {\n        return [$need,\
    \ $total - $need];\n    } else {\n        return [$total, 0];\n    }\n}", "  \
    \  if($need >= $remaining){\n        return [$number + $remaining, 0];\n    }\n\
    \    else{\n        return [$number + $need, $remaining - $need];\n    }\n}",
  "    ($number+$need)<=$remaining ? [$number+$need, $remaining-$need-$number] : [$number+$remaining,\
    \ 0];\n}", "    if ($need - $number > $remaining) {\n        my $need_remaining\
    \ = $need - $number - $remaining;\n        return [ $need, $need_remaining * -1];\n\
    \    } else {\n        return [ $number + $remaining, 0 ];\n    }\n}", "    $total\
    \ = $number + $need;\n    $total_remaining = $remaining - $need;\n    if ($total_remaining\
    \ >= 0) {\n        return($total, $total_remaining);\n    } else {\n        return($total,\
    \ 0);\n    }\n}", "    my $eaten = $number + $need;\n    my $last = $remaining\
    \ - $need;\n    if ($last < 0) {\n        $eaten = $eaten + $last;\n        $last\
    \ = 0;\n    }\n    return [$eaten, $last];\n}", "    if ($need < $remaining) {\n\
    \        $need += $number;\n        return [$need, $remaining - $need];\n    }\
    \ else {\n        return [$number + $remaining, 0];\n    }\n}", "    $need-=$number;\n\
    \    if($need > $remaining){\n      $need = $remaining;\n    }\n    return [$number+$need,\
    \ $remaining-$need];\n}", "    return [$number + $remaining, 0] if $need > $remaining;\n\
    \    return [$number + $need, $remaining - $need];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
