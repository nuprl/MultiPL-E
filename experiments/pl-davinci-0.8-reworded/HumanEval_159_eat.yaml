name: HumanEval_159_eat
language: pl
prompt: "# You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
  # you should return an array of [ total number of eaten carrots after your meals,\n\
  # the number of carrots left after your meals ]\n# if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
  # >>> eat(5, 6, 10)\n# [11, 4]\n# >>> eat(4, 8, 9)\n# [12, 1]\n# >>> eat(1, 10,\
  \ 10)\n# [11, 0]\n# >>> eat(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n\
  # the number of carrots that you have eaten.\n# @need : integer\n# the number of\
  \ carrots that you need to eat.\n# @remaining : integer\n# the number of remaining\
  \ carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need\
  \ <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\nsub eat {\n    my($number,\
  \ $need, $remaining) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n  \
  \      if(eq_deeply($candidate->(5, 6, 10),[11, 4])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 10, 10),[11, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(2, 11, 5),[7, 0])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 5, 1),[5, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my @result = ();\n    my $diff = $remaining - $need;\n    if ($diff\
    \ > 0) {\n      @result = [$number + $need, $diff];\n    } else {\n      @result\
    \ = [$number + $remaining, 0];\n    }\n    return @result;\n}", "    my @return\
    \ = ();\n    push @return, $need + $number;\n    if ($remaining < $need) {\n \
    \     push @return, 0;\n    } else {\n      push @return, $remaining - $need;\n\
    \    }\n    return @return;\n}", "    my $total;\n    if($remaining >= $need)\
    \ {\n        $total = $number + $need;\n        $remaining = $remaining - $need;\n\
    \    } else {\n        $total = $number + $remaining;\n        $remaining = 0;\n\
    \    }\n    return [$total, $remaining];\n}", "    \n    if ($remaining < $need)\
    \ {\n      $need = $remaining;\n    }\n    \n    $remaining -= $need;\n    $number\
    \ += $need;\n    \n    return [$number, $remaining];\n}", "    return [$number\
    \ + $remaining, 0] if $remaining >= $need;\n    return [$number + $remaining,\
    \ $need - $remaining];\n}", "    my $total = $number + $need;\n    if ($total\
    \ <= $remaining) {\n        return [$total, $remaining - $total];\n    } else\
    \ {\n        return [$total, 0];\n    }\n}", "    if ($need <= $remaining) {\n\
    \        return [$number + $need, $remaining - $need];\n    }\n    else {\n  \
    \      return [$number + $remaining, 0];\n    }\n}", "    return [$need + $number,\
    \ $remaining - $need] if $remaining >= $need;\n    return [$need + $number, 0];\n\
    }", "    $need -= $number;\n    if ($need <= $remaining) {\n        return [$number\
    \ + $need, $remaining - $need];\n    } else {\n        return [$number + $remaining,\
    \ 0];\n    }\n}", "    my @array = ($number, $need, $remaining);\n    my $number;\n\
    \    my $need;\n    my $remaining;\n    my $eat;\n    my $left;\n    @array =\
    \ sort { $a <=> $b } @array;\n    $number = shift @array;\n    $need = shift @array;\n\
    \    $remaining = shift @array;\n    if ($remaining > 0) {\n        $eat = $number\
    \ + $need;\n        $left = $remaining - $need;\n        return [$eat, $left];\n\
    \    } else {\n        return [$number, 0];\n    }\n}", "    if ($need > $remaining)\
    \ {\n        $number += $remaining;\n        $remaining = 0;\n    }\n    else\
    \ {\n        $number += $need;\n        $remaining -= $need;\n    }\n    return\
    \ [$number, $remaining];\n}", "    $remaining = 0 if $remaining < 0;\n    my $total\
    \ = $remaining + $number;\n    if ($total >= $need) {\n        return [$need,\
    \ $total - $need];\n    } else {\n        return [$total, 0];\n    }\n}", "  \
    \  if($need >= $remaining){\n        return [$number + $remaining, 0];\n    }\n\
    \    else{\n        return [$number + $need, $remaining - $need];\n    }\n}",
  "    ($number+$need)<=$remaining ? [$number+$need, $remaining-$need-$number] : [$number+$remaining,\
    \ 0];\n}", "    if ($need - $number > $remaining) {\n        my $need_remaining\
    \ = $need - $number - $remaining;\n        return [ $need, $need_remaining * -1];\n\
    \    } else {\n        return [ $number + $remaining, 0 ];\n    }\n}", "    $total\
    \ = $number + $need;\n    $total_remaining = $remaining - $need;\n    if ($total_remaining\
    \ >= 0) {\n        return($total, $total_remaining);\n    } else {\n        return($total,\
    \ 0);\n    }\n}", "    my $eaten = $number + $need;\n    my $last = $remaining\
    \ - $need;\n    if ($last < 0) {\n        $eaten = $eaten + $last;\n        $last\
    \ = 0;\n    }\n    return [$eaten, $last];\n}", "    if ($need < $remaining) {\n\
    \        $need += $number;\n        return [$need, $remaining - $need];\n    }\
    \ else {\n        return [$number + $remaining, 0];\n    }\n}", "    $need-=$number;\n\
    \    if($need > $remaining){\n      $need = $remaining;\n    }\n    return [$number+$need,\
    \ $remaining-$need];\n}", "    return [$number + $remaining, 0] if $need > $remaining;\n\
    \    return [$number + $need, $remaining - $need];\n}", "    my $eat = $number\
    \ + $need > $remaining ? $remaining : $number + $need;\n    return [$eat, $remaining\
    \ - $eat];\n}", "    my $total = $number + $need;\n    return [$total, $remaining\
    \ - $total] if $remaining >= $total;\n    [$total - $remaining, 0];\n}", "   \
    \ \n    my $total = $number + $need;\n    if ($total > $remaining) {\n       \
    \ return [$remaining, 0];\n    } else {\n        return [$total, $remaining -\
    \ $total];\n    }\n}", "    return [$number + $remaining, 0] if $remaining >=\
    \ $need;\n    return [$number + $remaining, $need - $remaining];\n}", "    $number\
    \ += $need;\n    if ($number > $remaining) {\n        $number = $remaining;\n\
    \    }\n    return [$number, $remaining - $number];\n}", "    return $remaining\
    \ >= $need ? [$number + $need, $remaining - $need] : [$number + $remaining, 0];\n\
    }", "    my $eat = $number + $need;\n    $eat > $remaining ? [$remaining, 0] :\
    \ [$eat, $remaining - $eat];\n}", "    my $eat = $number+$need;\n    my $remaining_carrots\
    \ = $remaining - $eat;\n    return [ $eat, ($remaining_carrots > 0) ? $remaining_carrots\
    \ : 0 ];\n}", "    my $total = $number + $need;\n    if ($total > $remaining)\
    \ {\n        return [$total, $remaining - $total];\n    } else {\n        return\
    \ [$total, 0];\n    }\n}", "    my $total = $number + $need;\n    return ($total,\
    \ $remaining - $total) if $remaining > $total;\n    return ($total, 0);\n}", " \
    \   \n    return [$number + $remaining, 0] if $remaining >= $need;\n    return\
    \ [$number + $need, $remaining - $need];\n}", "    my $eat = $number + $need;\n\
    \    my $left = $remaining - $eat;\n    if ($left < 0) {\n        $eat += $left;\n\
    \        $left = 0;\n    }\n    return [$eat, $left];\n}", "    return [$number\
    \ + ($remaining - $need >= 0 ? $need : $remaining), $remaining - $need >= 0 ?\
    \ $remaining - $need : 0];\n}", "    my $eat = $number + $need;\n    my $left\
    \ = $remaining - $eat;\n    return [$eat, 0] if $left < 0;\n    return [$eat,\
    \ $left];\n}", "    if ($need <= $remaining) {\n        return [$number + $need,\
    \ $remaining - $need];\n    } else {\n        return [$number + $remaining, 0];\n\
    \    }\n}", "    return [$number + $remaining < $need ? $number + $remaining :\
    \ $need,\n        $number + $remaining < $need ? 0 : $remaining - ($need - $number)];\n\
    }", "    my $x = 0;\n    if ($remaining > 0) {\n        $x = ($number + $need\
    \ > $remaining) ? $remaining : $number + $need;\n    }\n    my $left = $remaining\
    \ - $x;\n    return [$x, $left];\n}", "    my $food = $number + $need;\n    my\
    \ $left = $remaining - $food;\n    if ($left >= 0) {\n        return [$food, $left];\n\
    \    } else {\n        return [$food + $left, 0];\n    }\n}", "    if($need >\
    \ $remaining){\n        return ($number + $remaining, 0);\n    }\n    return ($number\
    \ + $need, $remaining - $need);\n}", "    return [(($remaining >= $need) ? $number\
    \ + $need : $number + $remaining), ($remaining >= $need) ? $remaining - $need\
    \ : 0];\n}", "    #your code here\n}", "    my $hungry = 0;\n    $hungry = $remaining\
    \ - $need if $need > $remaining;\n    [$number + $remaining - $hungry, $hungry];\n\
    }\n1;", "    return [$number + $remaining, $need - $remaining] if $remaining <\
    \ $need;\n    return [$number + $need, 0];\n}", "    \n    my $hungry = 0;\n \
    \   my $eat = $number + $need;\n    if ($remaining > $eat) {\n        $remaining\
    \ -= $eat;\n    } else {\n        $eat = $remaining;\n        $remaining = 0;\n\
    \        $hungry = 1;\n    }\n    return [$eat, $remaining, $hungry];\n}", " \
    \   return [0, $remaining] if $number == 0;\n    return [$need, 0] if $number\
    \ >= $need;\n    my $carrotsEaten = $number;\n    my $carrotsLeft = $remaining\
    \ - $number;\n    my $needCarrots = $need - $number;\n    $carrotsEaten += $needCarrots\
    \ if $carrotsLeft >= $needCarrots;\n    $carrotsLeft -= $needCarrots if $carrotsLeft\
    \ >= $needCarrots;\n    return [$carrotsEaten, $carrotsLeft];\n}", "    return\
    \ [( $number+$remaining >= $need ? $need : $number+$remaining),\n            (\
    \ $number+$remaining >= $need ? $remaining+$number-$need : 0)]\n}", "    $number\
    \ += $need;\n    $remaining -= $need;\n    if ($remaining < 0) {\n        $number\
    \ += $remaining;\n        $remaining = 0;\n    }\n    return [$number, $remaining];\n\
    }", "    my $result = $number + $need;\n    my $left = $remaining - $need;\n \
    \   if ($result > $remaining) {\n      $result = $remaining;\n      $left = 0;\n\
    \    }\n    return [$result, $left];\n}\n1;", "    my @eaten = ( $number + $remaining\
    \ - $need, abs($remaining - $need) );\n    return @eaten;\n}", "    my $number_eat\
    \ = $number + $need;\n    my $number_remaining = 0;\n    if ($number_eat > $remaining)\
    \ {\n        $number_remaining = $number_eat - $remaining;\n        $number_eat\
    \ = $remaining;\n    }\n    return [$number_eat, $number_remaining];\n}", "  \
    \  if ($need + $number <= $remaining) {\n        return [$need + $number, $remaining\
    \ - ($need + $number)];\n    }\n    if ($remaining == 0) {\n        return [$number,\
    \ 0];\n    }\n    return [$remaining + $number, 0];\n}", "    # your code goes\
    \ here :)\n    my $res = 0;\n    my $need1 = $need - $number;\n    if ($need1\
    \ < $remaining) {\n        $res = $number + $need1;\n        $remaining = $remaining\
    \ - $need1;\n    } else {\n        $res = $number + $remaining;\n        $remaining\
    \ = 0;\n    }\n    return [$res, $remaining];\n}", "    if(($number + $need) <=\
    \ $remaining){\n        return [($number + $need), ($remaining - ($number + $need))];\n\
    \    }else{\n        return [($number + $remaining), 0];\n    }\n}", "    if($remaining\
    \ >= $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}", "    \n    return [$number\
    \ + ($remaining >= $need ? $need : $remaining), $remaining - ($remaining >= $need\
    \ ? $need : $remaining)];\n}", "    if(($number + $need) > $remaining){\n    \
    \    return [$remaining,0];\n    }\n    return [$number + $need, $remaining -\
    \ ($number + $need)];\n}", "    # $remaining -= $number;\n    if ($remaining >=\
    \ $need){\n        $remaining -= $need;\n        $number += $need;\n    }\n  \
    \  else {\n        $number += $remaining;\n        $remaining = 0;\n    }\n  \
    \  return [$number, $remaining];\n}", "    if ($remaining == 0){\n      return\
    \ [$number, 0];\n    }\n    elsif ($remaining > 0){\n      if ($remaining - $need\
    \ >= 0){\n        return [$number + $need, $remaining - $need];\n      }\n   \
    \   else{\n        return [$number + $remaining, 0];\n      }\n    }\n}", "  \
    \  my $num = $number + $need;\n    if ($num > $remaining) {\n        return [$remaining,\
    \ 0];\n    }\n    return [$num, $remaining - $num];\n}", "    return [$number\
    \ + $remaining, 0] if $remaining >= $need;\n    return [$number + $remaining,\
    \ $need - $remaining];\n}", "    return [$need+$number, $remaining-$need];\n}",
  "    return [$need + $number, $remaining - $need] if $remaining >= $need;\n    return\
    \ [$remaining + $number, 0];\n}", "    if($remaining < $need) {\n        $need\
    \ = $remaining;\n    }\n    my $total = $number + $need;\n    my $remaining_carrots\
    \ = $remaining - $need;\n    return [$total, $remaining_carrots];\n}", "    if($remaining\
    \ < $need){\n        return [$number + $remaining, 0];\n    }\n    else{\n   \
    \     return [$number + $need, $remaining - $need];\n    }\n}", "    # my($already_eaten,\
    \ $need_to_eat, $remaining_carrots) = @_;\n    my $total_eaten = $number + $need;\n\
    \    my $total_left = $remaining - $need;\n    my @return_arr = ($total_eaten,\
    \ $total_left);\n    @return_arr;\n}", "    return $need - $remaining > 0 ? [$remaining\
    \ + $number, 0] : [$need + $number, $remaining - $need];\n}", "    return [$number\
    \ + ($remaining < $need ? $remaining : $need), $remaining - ($remaining < $need\
    \ ? $remaining : $need)];\n}", "    return [0, 0] if not $need or not $remaining;\n\
    \    return [$need, 0] if not $number;\n    return [$number + $remaining, 0] if\
    \ $number + $remaining < $need;\n    return [$number + $need, $remaining - $need];\n\
    }", "    if($need <= $remaining) {\n        return [$number + $need, $remaining\
    \ - $need];\n    }\n    else {\n        return [$number + $remaining, 0];\n  \
    \  }\n}", "    # your code here\n}", "    if($remaining < $need){\n        $need\
    \ = $remaining;\n    }\n    $remaining -= $need;\n    $number += $need;\n    return\
    \ [$number, $remaining];\n}", "    return [$number + $remaining >= $need ? $need\
    \ : $number + $remaining, $remaining - $need >= 0 ? $remaining - $need : 0];\n\
    }", "    $need += $number;\n    $remaining > $need ? [$need, $remaining - $need]\
    \ : [$remaining, 0];\n}", "    if($remaining >= $need) {\n        return [$number\
    \ + $need, $remaining - $need];\n    } else {\n        return [$number + $remaining,\
    \ 0];\n    }\n}", "    if ($remaining > $need) {\n        return [$number + $need,\
    \ $remaining - $need];\n    } else {\n        return [$number + $remaining, 0];\n\
    \    }\n}", "    # your code here\n    return $number + $need > $remaining ? [$remaining,\
    \ 0] : [$number + $need, $remaining - ($number + $need)];\n}", "    my $total\
    \ = $number + $need <= $remaining ? $number + $need : $number + $remaining;\n\
    \    my $left = $remaining - $need;\n    return [$total, $left > 0 ? $left : 0];\n\
    }", "    $remaining = 0 if $remaining < 0;\n    my $eat = $number + $need;\n \
    \   if ($eat <= $remaining) {\n        return [$eat, $remaining - $eat];\n   \
    \ }\n    return [$remaining, 0];\n}", "    my $a = $number + $need;\n    my $b\
    \ = 0;\n    if ($a > $remaining) {\n        $b = $a - $remaining;\n        $a\
    \ = $remaining;\n    }\n    return [$a, $b];\n}", "    if($need - $number <= $remaining){\n\
    \        return [$number + $need, $remaining - ($need - $number)];\n    }else{\n\
    \        return [$number + $remaining, 0];\n    }\n}", "    $remaining-$need>=0\
    \ ? [$number+$need,$remaining-$need] : [$number+$remaining,0];\n}", "    return\
    \ [$number + $remaining, 0] if $remaining > $need;\n    return [$number + $need,\
    \ $remaining - $need];\n}", "    my $total = $number + $need;\n    my $left =\
    \ 0;\n    $left = $remaining - $total;\n    $left = 0 if ($left < 0);\n    my\
    \ @arr = ($total, $left);\n    return @arr;\n}", "    my $total_carrots = $number\
    \ + $remaining;\n    my $remaining_carrots = $total_carrots - $need;\n    if ($total_carrots\
    \ > $need) {\n        $remaining_carrots = $total_carrots - $need;\n    } else\
    \ {\n        $remaining_carrots = 0;\n    }\n    return [$total_carrots, $remaining_carrots];\n\
    }", "    return[($remaining < $need) ? $remaining + $number : $need + $number,\
    \ ($remaining < $need) ? 0 : $remaining - $need];\n}", "    my $total = $number\
    \ + $need;\n    my $left = 0;\n    if ($total > $remaining) {\n        $left =\
    \ $total - $remaining;\n        $total = $remaining;\n    }\n    return [$total,\
    \ $left];\n}", "    $remaining -= $need;\n    $number += $need;\n    if ($remaining\
    \ < 0) {\n        $number += $remaining;\n        $remaining = 0;\n    }\n   \
    \ return [$number, $remaining];\n}", "    my $total = $number + $need;\n    my\
    \ $remaining_carrots = $remaining - $need;\n    my @result = ();\n    if($remaining_carrots\
    \ >= 0){\n        push(@result, $total);\n        push(@result, $remaining_carrots);\n\
    \    }else{\n        push(@result, $total);\n        push(@result, 0);\n    }\n\
    \    return @result;\n}", "    return [$need, 0] if $remaining < $need;\n    return\
    \ [$remaining + $number, 0] if $remaining <= $need - $number;\n    return [$need\
    \ + $number, $remaining - $need];\n}", "    return [ $number + $remaining > $need\
    \ ? $need : $number + $remaining, $remaining - ($need - $number) > 0 ? $remaining\
    \ - ($need - $number) : 0 ];\n}", "    return [$number + $remaining, 0] if $need\
    \ > $remaining;\n    return [$number + $need, $remaining - $need];\n}", "    my\
    \ $eat = $number + $need;\n    if ($eat > $remaining) {\n        return ($remaining,\
    \ 0);\n    }\n    else {\n        return ($eat, $remaining - $eat);\n    }\n}",
  "    return $need >= $remaining ? [$number + $remaining, 0] : [$number + $need,\
    \ $remaining - $need];\n}", "    my $eat = $number + $need;\n    my $left = $remaining\
    \ - $eat;\n    if ($left < 0) {\n        $eat = $number + $remaining;\n      \
    \  $left = 0;\n    }\n    return [$eat, $left];\n}", "    my $eat = $need - $number;\n\
    \    if ($eat <= $remaining) {\n        return [$number + $eat, $remaining - $eat];\n\
    \    } else {\n        return [$number + $remaining, 0];\n    }\n}", "    return\
    \ [$number + $remaining, 0] if $need > $remaining;\n    return [$number + $need,\
    \ $remaining - $need];\n}", "    my $eat = 0;\n    my $left;\n    if($remaining\
    \ > $need){\n        $eat = $number + $need;\n        $left = $remaining - $need;\n\
    \    }else{\n        $eat = $number + $remaining;\n        $left = 0;\n    }\n\
    \    return [$eat, $left];\n}", "    my $total_carrots = $number + $remaining;\n\
    \    my $left_carrots = 0;\n    if($total_carrots >= $need){\n        $left_carrots\
    \ = $total_carrots - $need;\n    }\n    return [$total_carrots, $left_carrots];\n\
    }", "    # Your code comes here\n    $remaining -= $number;\n    if ($remaining\
    \ < $need) {\n        $need = $remaining;\n    }\n    return [$number + $need,\
    \ $remaining - $need];\n}", "    my $diff = $need - $number;\n    if ($diff >\
    \ $remaining) {\n        return [$number + $remaining, 0];\n    }\n    return\
    \ [$number + $diff, $remaining - $diff];\n}", "    \n    return [$number + $remaining,\
    \ 0] if ($need > $remaining);\n    return [$number + $need, $remaining - $need];\n\
    }", "    return [$need+$number, $remaining-$need] if $remaining >= $need;\n  \
    \  return [$remaining+$number, 0];\n}", "    my @result = ();\n    if($remaining\
    \ >= $need){\n        push(@result, ($number + $need));\n        push(@result,\
    \ ($remaining - $need));\n    }else{\n        push(@result, ($number + $remaining));\n\
    \        push(@result, 0);\n    }\n    return @result;\n}\nmy($number, $need,\
    \ $remaining) = (2, 11, 5);\nprint eat($number, $need, $remaining);", "    my\
    \ $eaten = $number + $need;\n    my $left = $remaining - $eaten;\n    if ($left\
    \ < 0) {\n        $eaten += $left;\n        $left = 0;\n    }\n    return [$eaten,\
    \ $left];\n}", "    my $carrots = $number + $remaining;\n    if ($carrots >= $need)\
    \ {\n        return [$need, $carrots - $need];\n    } else {\n        return [$carrots,\
    \ 0];\n    }\n}", "    \n    my $total = $number + $need;\n    my $count = $remaining\
    \ - $need;\n    \n    if ($count < 0) {\n        $count = 0;\n    }\n    \n  \
    \  return [$total, $count];\n}", "    return [$number + $remaining, 0] if $need\
    \ - $number <= $remaining;\n    return [$number + $need, $remaining - $need];\n\
    }", "    if ($remaining < $need) {\n        return [$number + $remaining, 0];\n\
    \    }\n    else {\n        return [$number + $need, $remaining - $need];\n  \
    \  }\n}", "    if ($remaining <= $need) {\n        return [$number + $remaining,\
    \ 0];\n    }\n    else {\n        return [$number + $need, $remaining - $need];\n\
    \    }\n}", "    my $total_number = $number + $need;\n    my $total_remaining\
    \ = $remaining - $need;\n    return [$total_number, $total_remaining] if $total_remaining\
    \ > 0;\n    return [$total_number, 0];\n}", "    if ($need - $number <= $remaining)\
    \ {\n        return [$number + $need, $remaining - ($need - $number)];\n    }\
    \ else {\n        return [$number + $remaining, 0];\n    }\n}", "    # Happy coding\
    \ :)\n    #$number, $need, $remaining = sort {$a <=> $b} ($number, $need, $remaining);\n\
    \    my @ret;\n    if($number == $need){\n        @ret = ($number + $remaining,\
    \ 0);\n    }\n    else{\n        if($remaining == 0){\n            @ret = ($number,\
    \ 0);\n        }\n        else{\n            @ret = ($number + $remaining, 0);\n\
    \        }\n    }\n    return @ret;\n}", "    $remaining < $need ? [$number +\
    \ $remaining, 0] : [$number + $need, $remaining - $need];\n}", "    # Your code\
    \ is here\n}\n```", "    if($need > $remaining){\n        return [$number + $remaining,\
    \ 0];\n    }else{\n        return [$number + $need, $remaining - $need];\n   \
    \ }\n}", "    my $total = $number + $need;\n    if ($total > $remaining) {\n \
    \       $total = $remaining;\n    }\n    return [$total, $remaining - $total];\n\
    }", "    if ($need < $remaining) {\n        return ($number + $need, $remaining\
    \ - $need);\n    } else {\n        return ($number + $remaining, 0);\n    }\n}",
  "    my $total = $number + $need;\n    my $after = $remaining - $need;\n    if ($after\
    \ < 0) {\n        return [$total + $after, 0];\n    }\n    return [$total, $after];\n\
    }", "    my $total = $number + $need;\n    if ($total > $remaining) {\n      \
    \  $total = $remaining;\n    }\n    return [$total, $remaining - $total];\n}",
  "    $need = $remaining if $need > $remaining;\n    return [$number + $need, $remaining\
    \ - $need];\n}", "    if ($need <= $remaining) {\n        return $number + $need,\
    \ $remaining - $need;\n    } else {\n        return $number + $remaining, 0;\n\
    \    }\n}", "    return [0, 0] if $need == 0;\n    return [$number + $remaining,\
    \ 0] if $remaining >= $need;\n    return [$number + $remaining, $need - $remaining];\n\
    }", "    my $eat = $number + $need;\n    my $left = $remaining - $eat;\n    return\
    \ [$eat, $left > 0 ? $left : 0];\n}", "    my $total = $number + $need;\n    my\
    \ $result = ($total >= $remaining) ? ($remaining, 0) : ($total, $remaining - $total);\n\
    \    return $result;\n}", "    # your code here\n}", "    return [$need + $number,\
    \ $remaining - $need];\n}", "    if($remaining < $need) {\n        return [$number\
    \ + $remaining, 0];\n    } else {\n        return [$number + $need, $remaining\
    \ - $need];\n    }\n}", "    my @arr;\n    if($need > $remaining){\n        my\
    \ $total = $remaining + $number;\n        push @arr, $total;\n        push @arr,\
    \ 0;\n    }else{\n        my $total = $need + $number;\n        push @arr, $total;\n\
    \        push @arr, $remaining - $need;\n    }\n    return @arr;\n}", "    $remaining\
    \ >= $need ? [$number + $need, $remaining - $need] : [$number + $remaining, 0];\n\
    }", "    \n    return [$number+$remaining>$need?$need:$number+$remaining,$number+$remaining>$need?$number+$remaining-$need:0];\n\
    }", "    my $r = $number + $need - $remaining;\n    if ($r < 0) {\n        $r\
    \ = 0;\n    }\n    return [$number + $need - $r, $r];\n}", "    my $total = $number\
    \ + $need;\n    return ($total, 0) if $total > $remaining;\n    return ($total,\
    \ $remaining - $total);\n}\nprint \"$_ => @{eat(@$_)}\\n\" for [5, 6, 10], [4,\
    \ 8, 9], [1, 10, 10], [2, 11, 5];", "    my $all = $number + $remaining;\n   \
    \ my $need = $need - $number;\n    if($all < $need){\n        $need = $all - $need;\n\
    \        $remaining = 0;\n    }\n    else{\n        $remaining = $all - $need;\n\
    \    }\n    return [$need, $remaining];\n}", "    my $eat = ($need + $number <=\
    \ $remaining) ? $need : $remaining - $number;\n    return [$number + $eat, $remaining\
    \ - $eat];\n}", "    if ($need > $remaining){\n        return $remaining+$number;\n\
    \    }\n    else{\n        return $need+$number;\n    }\n}", "    return [(($number\
    \ + $need) > $remaining ? $remaining : ($number + $need)), (($number + $need)\
    \ - $remaining)];\n}", "    if($remaining >= $need) {\n      return [$number +\
    \ $need, $remaining - $need];\n    } else {\n      return [$number + $remaining,\
    \ 0];\n    }\n}", "    return [$number + $remaining, 0] if $remaining >= $need;\n\
    \    return [$number + $remaining, $need - $remaining];\n}", "    return [ $need\
    \ + $number, $remaining - $need ] if $remaining >= $need;\n    return [ $remaining\
    \ + $number, 0 ];\n}", "    \n    return [\n        $number + (($remaining > $need)\
    \ ? $need : $remaining),\n        ($remaining > $need) ? $remaining - $need :\
    \ 0\n    ];\n}", "    $remaining >= $need ? [$number + $need, $remaining - $need]\
    \ : [$number + $remaining, 0];\n}", "    # Your code goes here!\n    if ($need<=$remaining)\
    \ {\n        return [$number+$need, $remaining-$need];\n    } else {\n       \
    \ return [$number+$remaining, 0];\n    }\n}", "    $remaining < $need ? return\
    \ [$number + $remaining, 0] : return [$number + $need, $remaining - $need];\n}",
  "    return [$number + $remaining, 0] if $remaining > $need;\n    return [$number\
    \ + $need, $remaining - $need];\n}", "    # Your code here\n    my $total_eaten\
    \ = $number + $need;\n    my $left = $remaining - $need;\n    if ($left < 0) {\n\
    \        $left = 0;\n    }\n    return [$total_eaten, $left];\n}", "    my $carrots\
    \ = $number + $remaining;\n    if ($carrots >= $need) {\n        $carrots -= $need;\n\
    \    } else {\n        $carrots = 0;\n    }\n    return [$number + $remaining\
    \ - $carrots, $carrots];\n}", "    if ($need + $number < $remaining){\n    \t\
    return [$need + $number, $remaining - ($need + $number)];\n    } else {\n    \t\
    return [$remaining + $number, 0];\n    }\n}", "    if ($remaining >= $need){\n\
    \        return [$number + $need, $remaining - $need];\n    } else {\n       \
    \ return [$number + $remaining, 0];\n    }\n}", "    if ($need <= $remaining)\
    \ {\n        return [$number + $need, $remaining - $need];\n    } else {\n   \
    \     return [$number + $remaining, 0];\n    }\n}", "    \n    #return number\
    \ of carrots and remaining carrots in array\n    my @output;\n    my $carrots_eaten\
    \ = $number + $need;\n    my $remaining_carrots = $remaining - $need;\n    #store\
    \ info in an array\n    push(@output, $carrots_eaten);\n    push(@output, $remaining_carrots);\n\
    \    return @output;\n}", "    my $eat = $need + $number;\n    if($eat > $remaining){\n\
    \        return [$remaining, 0];\n    }\n    else{\n        return [$eat, $remaining\
    \ - $eat];\n    }\n}", "    return [($number + $need), ($remaining - $need)];\n\
    }", "    my @res = ();\n    $remaining = $remaining - $number;\n    $res[0] =\
    \ $need + $number;\n    if($remaining < $need){\n        $res[1] = 0;\n    }else{\n\
    \        $res[1] = $remaining - $need;\n    }\n    return @res;\n}", "    \n \
    \   return [($number + $need > $remaining ? $remaining : $number + $need), ($remaining\
    \ - $need < 0 ? 0 : $remaining - $need)];\n}", "    my @result = (0, 0);\n   \
    \ my $diff = $need - $number;\n    if($remaining >= $diff){\n        $result[0]\
    \ = $number + $diff;\n        $result[1] = $remaining - $diff;\n    }else{\n \
    \       $result[0] = $number + $remaining;\n        $result[1] = 0;\n    }\n \
    \   return @result;\n}", "    $remaining < $need ? [$number + $remaining, 0] :\
    \ [$number + $need, $remaining - $need];\n}", "    return [$number + $remaining,\
    \ 0] if ($remaining < $need);\n    return [$number + $need, $remaining - $need];\n\
    }", "    if ($need >= $remaining) {\n        $need -= $remaining;\n        $remaining\
    \ = 0;\n    } else {\n        $remaining -= $need;\n        $need = 0;\n    }\n\
    \    return [$number + $need, $remaining];\n}", "    if ($remaining < $need) {\n\
    \        return [$number + $remaining, 0];\n    }\n    else {\n        return\
    \ [$number + $need, $remaining - $need];\n    }\n}", "    return [\n        $need\
    \ < $remaining ? $number + $need : $number + $remaining,\n        $need < $remaining\
    \ ? $remaining - $need : 0\n    ];\n}", "    return [(min $remaining, $need +\
    \ $number), max $remaining - $need, 0];\n}", "    if($remaining > 0 && $need >\
    \ 0) {\n        $total = $number + $need;\n        if($total > $remaining) {\n\
    \            @results = [$remaining, 0];\n        } else {\n            @results\
    \ = [$total, $remaining - $total];\n        }\n    } else {\n        @results\
    \ = [$number, $remaining];\n    }\n    return @results;\n}", "    if ($remaining\
    \ < $need){\n        return ($number + $remaining, 0);\n    }\n    return ($number\
    \ + $need, $remaining - $need);\n}", "    if($remaining > $need) {\n      return\
    \ [$number + $need, $remaining - $need];\n    } else {\n      return [$number\
    \ + $remaining, 0];\n    }\n}", "    $remaining = ($remaining - $need) < 0 ? 0\
    \ : $remaining - $need;\n    return [$number + $need, $remaining];\n}", "    $remaining\
    \ -= $need;\n    return [$number + $need, $remaining] if $remaining > 0;\n   \
    \ return [$number + $remaining, 0];\n}", "    my $meals = $number + $need;\n \
    \   my $left = $remaining - $meals;\n    if ($left < 0) {\n        $left = 0;\n\
    \    }\n    return [$meals, $left];\n}", "    my $carrots = $number + ($remaining\
    \ >= $need ? $need : $remaining);\n    my $left = $remaining - $need;\n    $left\
    \ = 0 if $left < 0;\n    return [$carrots, $left];\n}", "    if($remaining >=\
    \ $need) {\n        return [$number + $need, $remaining - $need];\n    } else\
    \ {\n        return [$number + $remaining, 0];\n    }\n}", "    $number + $need\
    \ <= $remaining ? [$number + $need, $remaining - $number - $need] : [$remaining\
    \ + $number, 0];\n}", "    return [$number + $remaining > $need ? $need : $number\
    \ + $remaining, $remaining - $need > 0 ? $remaining - $need : 0];\n}", "    $number\
    \ += $need;\n    $remaining = $remaining - $need;\n    $number = $remaining if\
    \ $remaining < $need;\n    return [$number, $remaining]\n}", "    if ($need -\
    \ $number <= $remaining) {\n        return [$number + $need, $remaining - ($need\
    \ - $number)];\n    } else {\n        return [$number + $remaining, 0];\n    }\n\
    }", "    return [$need, 0] if $remaining == 0;\n    return [$number + $remaining,\
    \ 0] if $need - $remaining > 0;\n    return [$number + $need, $remaining - $need];\n\
    }", "    if($need - $number <= $remaining){\n        return $number + $need -\
    \ $number, $remaining - ($need - $number);\n    }\n    return $number + $remaining,\
    \ 0;\n}", "    my $result = $number + $need;\n    if ($result > $remaining) {\n\
    \        $result = $remaining;\n    }\n    return [$result, $remaining - $result];\n\
    }", "    if ($need <= $remaining) {\n      return [$number + $need, $remaining\
    \ - $need];\n    } else {\n      return [$number + $remaining, 0];\n    }\n}",
  "    if ($remaining < $need) {\n        return [$number + $remaining, 0];\n    }\
    \ else {\n        return [$number + $need, $remaining - $need];\n    }\n}", " \
    \   my $eaten = $number + $need;\n    my $left = $remaining - $need;\n    if ($eaten\
    \ > $remaining) {\n        $eaten = $remaining;\n        $left = 0;\n    }\n \
    \   return [$eaten, $left];\n}", "    return [$number + $remaining > $need ? $need\
    \ : $number + $remaining, $remaining > $need ? $remaining - $need : 0];\n}", " \
    \   return [$number + $remaining, 0] if $remaining >= $need;\n    return [$number\
    \ + $remaining, $need - $remaining];\n}", "    my $eat = ($remaining >= $need)\
    \ ? $need : $remaining;\n    return [$number + $eat, $remaining - $eat];\n}",
  "    if ($need >= $remaining) {\n        return [$number + $remaining, 0];\n   \
    \ } else {\n        return [$number + $need, $remaining - $need];\n    }\n}",
  "    if ($remaining + $number >= $need) {\n        return [$need, $remaining - ($need\
    \ - $number)];\n    } else {\n        return [$remaining + $number, 0];\n    }\n\
    }", "    #...\n    my $food = $number + $need;\n    $food = $remaining if $food\
    \ > $remaining;\n    my $left = $remaining - $food;\n    [$food, $left];\n}",
  "    my $total = $number + $need;\n    my $total_remaining = $remaining - $need;\n\
    \    return [$total, 0] if $total_remaining < 0;\n    return [$total, $total_remaining];\n\
    }", "    ($number+$need) > $remaining ? [$remaining,0] : [$number+$need,$remaining-($number+$need)];\n\
    }", "    if ($need <= $remaining){\n        return [$number + $need, $remaining\
    \ - $need];\n    } else {\n        return [$number + $remaining, 0];\n    }\n}",
  "    return [$number + $remaining, 0] if ($remaining + $number >= $need);\n    return\
    \ [$number + $remaining, $need - $remaining - $number];\n}", "    if ($need <=\
    \ $remaining) {\n        return [$number + $need, $remaining - $need];\n    }\
    \ else {\n        return [$number + $remaining, 0];\n    }\n}", "    # Your code\
    \ goes here...\n    $need = $need - $number;\n    $remaining = $remaining - $need;\n\
    \    $remaining = 0 if $remaining < 0;\n    return [$need + $number, $remaining];\n\
    }", "    if ($remaining >= $need) {\n        $remaining -= $need;\n        $number\
    \ += $need;\n    } else {\n        $number += $remaining;\n        $remaining\
    \ = 0;\n    }\n    return [$number, $remaining];\n}", "    if ($remaining < $need){\n\
    \        return [$remaining + $number, 0];\n    } else {\n        return [$need\
    \ + $number, $remaining - $need];\n    }\n}", "    return [$number + min($need,\
    \ $remaining), max(0, $remaining - $need)];\n}", "    my @total;\n    my $sum\
    \ = $number + $need;\n    if ($sum > $remaining) {\n        @total = ($sum - $remaining,\
    \ 0);\n    } else {\n        @total = ($sum, $remaining - $sum);\n    }\n    return\
    \ @total;\n}", "    return [ $number + min($need, $remaining), max(0, $remaining\
    \ - $need) ];\n}", "    return [ $number + ($remaining >= $need ? $need : $remaining),\
    \ $remaining - ($remaining >= $need ? $need : $remaining) ];\n}", "    if($need\
    \ > $remaining) {\n        return [$number + $remaining, 0];\n    } else {\n \
    \       return [$number + $need, $remaining - $need];\n    }\n}", "    my $eat\
    \ = $need + $number;\n    return ($eat, $remaining - $eat);\n}", "    if($need\
    \ - $number >= $remaining){\n        return [$number + $remaining, 0];\n    }else{\n\
    \        return [$number + $need, $remaining - $need];\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
