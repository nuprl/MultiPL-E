name: HumanEval_59_largest_prime_factor
language: pl
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
  sub largest_prime_factor {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n\
  \        if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($largest) = 1;\n    my($p) = 2;\n    my($f) = $n;\n    while($f\
    \ > 1) {\n        if($f % $p == 0) {\n            $largest = $p;\n           \
    \ while($f % $p == 0) {\n                $f /= $p;\n            }\n        }\n\
    \        $p++;\n    }\n    return $largest;\n}", "    my $factor = 2;\n    my\
    \ $last_factor = 1;\n    while ($n > 1) {\n        while ($n % $factor == 0) {\n\
    \            $last_factor = $factor;\n            $n /= $factor;\n        }\n\
    \        $factor += 1;\n    }\n    return $last_factor;\n}", "    return $n if\
    \ $n <= 1;\n    return 2 if $n == 2;\n    return 3 if $n == 3;\n    return 2 if\
    \ $n % 2 == 0;\n    return 3 if $n % 3 == 0;\n    my $f = 5;\n    my $max = sqrt($n);\n\
    \    while ($f <= $max) {\n        return $f if $n % $f == 0;\n        return\
    \ $n / $f if $n % ($f + 2) == 0;\n        $f += 6;\n    }\n    return $n;\n}",
  "    my $factor = 2;\n    while (not is_prime($n)) {\n        if ($n % $factor ==\
    \ 0) {\n            $n /= $factor;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    return $n;\n}", "    my $factor = 2;\n    while ($n > 1)\
    \ {\n        if ($n % $factor == 0) {\n            $n /= $factor;\n        } else\
    \ {\n            $factor++;\n        }\n    }\n    return $factor;\n}", "    my($i)\
    \ = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n            $n /=\
    \ $i;\n        } else {\n            $i++;\n        }\n    }\n    return $n;\n\
    }", "    my $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $n;\n}", "    my($m) = $n;\n    my($i) = 2;\n    while($m > 1) {\n\
    \        if($m % $i == 0) {\n            $m /= $i;\n        } else {\n       \
    \     $i++;\n        }\n    }\n    return $i;\n}", "    my($factor, $largest)\
    \ = (2, 2);\n    # Try every factor.\n    while ($factor <= sqrt($n)) {\n    \
    \    # Is this a factor?\n        if ($n % $factor == 0) {\n            # Is it\
    \ prime?\n            my($is_prime) = 1;\n            my($p) = 2;\n          \
    \  while ($p < $factor) {\n                if ($factor % $p == 0) {\n        \
    \            $is_prime = 0;\n                    last;\n                }\n  \
    \              $p += 1;\n            }\n            if ($is_prime) {\n       \
    \         $largest = $factor;\n            }\n        }\n        $factor += 1;\n\
    \    }\n    return $largest;\n}", "    return undef if !$n;\n    my $prime = 2;\n\
    \    while ($n > 1) {\n        while ($n % $prime == 0) {\n            $n /= $prime;\n\
    \        }\n        $prime++;\n    }\n    return $prime-1;\n}", "    my $f = 2;\n\
    \    while ($n > 1) {\n        while ($n % $f == 0) {\n            $n /= $f;\n\
    \        }\n        $f++;\n    }\n    return $f - 1;\n}", "    my($factor, $last_factor)\
    \ = (1, 1);\n    while ($factor < $n) {\n        $factor = next_prime($factor);\n\
    \        if ($n % $factor == 0) {\n            $last_factor = $factor;\n     \
    \   }\n    }\n    return $last_factor;\n}", "    my $largest = 1;\n    while ($n\
    \ % 2 == 0) {\n        $largest = 2;\n        $n /= 2;\n    }\n    my $test =\
    \ 3;\n    while ($test <= $n) {\n        while ($n % $test == 0) {\n         \
    \   $largest = $test;\n            $n /= $test;\n        }\n        $test += 2;\n\
    \    }\n    return $largest;\n}", "    my $p = 2;\n    my $max = 0;\n    while($p\
    \ < $n) {\n        while($n % $p == 0) {\n            $max = $p;\n           \
    \ $n /= $p;\n        }\n        $p++;\n    }\n    return $max;\n}", "    my($prime)\
    \ = 2;\n    for my $p (primes()) {\n        next if $p < $prime;\n        last\
    \ if $p > $n;\n        if ($n % $p == 0) {\n            $prime = $p;\n       \
    \ }\n    }\n    return $prime;\n}", '    my($p) = 2;', "    my $f = 2;\n    while\
    \ (1) {\n        if ($n % $f == 0) {\n            $n /= $f;\n        } else {\n\
    \            $f++;\n        }\n        if ($n == 1) {\n            return $f;\n\
    \        }\n    }\n}", "    my $x = 2;\n    my $max = 1;\n    while ($x < $n)\
    \ {\n        if ($n % $x == 0) {\n            # We found a factor, check if it's\
    \ prime.\n            my $is_prime = 1;\n            my $y = 2;\n            while\
    \ ($y < $x) {\n                if ($x % $y == 0) {\n                    $is_prime\
    \ = 0;\n                    last;\n                }\n                $y++;\n\
    \            }\n            if ($is_prime) {\n                # Found a prime\
    \ factor. Check if it's the largest one.\n                if ($x > $max) {\n \
    \                   $max = $x;\n                }\n            }\n        }\n\
    \        $x++;\n    }\n    return $max;\n}", "    my($d, $p) = 2;\n    while ($d\
    \ * $d <= $n) {\n        if ($n % $d == 0) {\n            $p = $d;\n         \
    \   $n /= $d;\n        } else {\n            $d = next_prime($d);\n        }\n\
    \    }\n    $p;\n}", "    my $prime_test = is_prime_factor_test(1, $n);\n    my\
    \ $primes = primes_to_n($n);\n    my $largest_prime = pop(@$primes);\n    return\
    \ $largest_prime;\n}", "    $n =~ s/\\s//g;\n    my $factor = 2;\n    if ($n =~\
    \ /[^\\d]/) { return \"Please enter an integer\"; }\n    if ($n < 2) { return\
    \ \"Number must be greater than 1\"; }\n    if (is_prime($n)) { return $n; }\n\
    \    while ($n != 1) {\n        if ($n % $factor == 0) {\n            while ($n\
    \ % $factor == 0) {\n                $n /= $factor;\n            }\n        }\n\
    \        $factor += 1;\n    }\n    return $factor;\n}", "    my($d) = 2;\n   \
    \ while ($n > 1) {\n        if ($n % $d == 0) {\n            while ($n % $d ==\
    \ 0) {\n                $n /= $d;\n            }\n        }\n        $d += 1;\n\
    \    }\n    return $d-1;\n}", "    my($smallest_factor) = smallest_factor($n);\n\
    \    return $n == $smallest_factor ? $n : largest_prime_factor($n / $smallest_factor);\n\
    }", "    my($i, $s) = (3, sqrt($n));\n    while (1) {\n        return $n if $n\
    \ == $i;\n        return $n / $i if $n % $i == 0;\n        return $n / ($n / $i)\
    \ if $n / $i == $i;\n        $i += 2;\n        $i = 2 if $i > $s;\n    }\n}",
  "    my @primes = primes_less_than($n);\n    my @factors = reverse grep { $n % $_\
    \ == 0 } @primes;\n    return $factors[0];\n}", "    for (my $factor = 2; $factor\
    \ < $n; $factor++) {\n        if ($n % $factor == 0) {\n            return $factor;\n\
    \        }\n    }\n}", "    # First, find all the prime factors.\n    my @prime_factors\
    \ = prime_factors($n);\n    # Return the largest.\n    return max(@prime_factors);\n\
    }", "    my @factors = prime_factors($n);\n    return $factors[-1];\n}", "   \
    \ my $factor = 2;\n    while ($n > 1) {\n        if ($n % $factor == 0) {\n  \
    \          $n /= $factor;\n        } else {\n            $factor++;\n        }\n\
    \    }\n    return $factor;\n}", "    if ($n == 1) {\n        return 1;\n    }\n\
    \    my($prime) = next_prime($n);\n    while ($n % $prime != 0) {\n        $prime\
    \ = next_prime($prime);\n    }\n    return $prime;\n}", "    $n = abs $n;\n  \
    \  croak \"largest_prime_factor: invalid argument\" if $n < 2;\n    return $n\
    \ if is_prime($n);\n    my $factor = 2;\n    $factor++ while $n % $factor;\n \
    \   largest_prime_factor($n / $factor);\n}", "    my($r, $f);\n    $r = int(sqrt($n));\n\
    \    $f = 2;\n    while ($f <= $r) {\n        while ($n % $f == 0) {\n       \
    \     $n /= $f;\n            $r = int(sqrt($n));\n        }\n        $f++;\n \
    \   }\n    $n;\n}", "    my $factor = 2;\n    while ($n > 1) {\n        if ($n\
    \ % $factor == 0) {\n            $n /= $factor;\n        } else {\n          \
    \  $factor += 1;\n        }\n    }\n    return $factor;\n}", "    return 2 if\
    \ $n == 2;\n    return 3 if $n == 3;\n    my($factor) = 2;\n    while($n % $factor\
    \ != 0) {\n        $factor += $factor == 2 ? 1 : 2;\n    }\n    return $factor\
    \ if $n / $factor == 1;\n    return largest_prime_factor($n / $factor);\n}", " \
    \   my $factor = 2;\n    while (1) {\n        return $n if is_prime($n);\n   \
    \     $factor = smallest_prime_factor($n);\n        $n /= $factor;\n    }\n}",
  "    my($factor) = smallest_prime_factor($n);\n    if ($factor == $n) {\n      \
    \  return $n;\n    } else {\n        return max(largest_prime_factor($n / $factor),\
    \ $factor);\n    }\n}", "    # TODO: Compute the prime factor with the largest\
    \ exponent\n    return 1;\n}", "    return largest_prime_factor_across($n, 2);\n\
    }", "    my($largest_prime_factor) = 1;\n    my($x) = 0;\n    for (my($i) = 2;\
    \ $i <= sqrt($n); $i++) {\n        next if ($n % $i != 0);\n        $x = largest_prime_factor($n\
    \ / $i);\n        $largest_prime_factor = $x if ($x > $largest_prime_factor);\n\
    \    }\n    return $largest_prime_factor;\n}\nprint \"largest_prime_factor(13195)\
    \ = \", largest_prime_factor(13195), \"\\n\";\nprint \"largest_prime_factor(2048)\
    \ = \", largest_prime_factor(2048), \"\\n\";\nprint \"largest_prime_factor(600851475143)\
    \ = \", largest_prime_factor(600851475143), \"\\n\";", "    my $d = 2;\n    while\
    \ ($n > 1) {\n        if ($n % $d == 0) {\n            $n /= $d;\n        } else\
    \ {\n            $d++;\n        }\n    }\n    return $d;\n}", "    my $highest\
    \ = 2;\n    my $limit = int(sqrt($n));\n    while ($n % 2 == 0) {\n        $n\
    \ /= 2;\n    }\n    my $factor = 3;\n    while ($factor <= $limit) {\n       \
    \ if ($n % $factor == 0) {\n            $n /= $factor;\n            $highest =\
    \ $factor;\n            $limit = int(sqrt($n));\n        } else {\n          \
    \  $factor += 2;\n        }\n    }\n    if ($n != 1) {\n        $highest = $n;\n\
    \    }\n    return $highest;\n}", '    my($p) = 2;', "    my $max;\n    for my\
    \ $i (2..sqrt($n)) {\n        next unless $n % $i == 0;\n        $max = $i;\n\
    \        while ($n % $i == 0) {\n            $n /= $i;\n        }\n    }\n   \
    \ if ($n > 1) {\n        $max = $n;\n    }\n    return $max;\n}", "    return\
    \ 2 if ($n % 2 == 0);\n    my($i) = 3;\n    while ($i < $n / 2) {\n        return\
    \ $i if ($n % $i == 0 && is_prime($i));\n        $i += 2;\n    }\n    return $n;\n\
    }", "    my $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $n /= $i;\n        } else {\n            $i += 1;\n        }\n  \
    \  }\n    return $n;\n}", "    my $factor = $n;\n    while (1) {\n        my $new_factor\
    \ = $factor / smallest_factor($factor);\n        last if $new_factor == $factor;\n\
    \        $factor = $new_factor;\n    }\n    return $factor;\n}", "    my $max\
    \ = 0;\n    for my $x (2..sqrt($n)) {\n        if ($n % $x == 0) {\n         \
    \   $max = $x if $x > $max;\n            $max = largest_prime_factor($n / $x)\
    \ if $x < $max;\n        }\n    }\n    return $max;\n}", "    my $factor = 2;\n\
    \    my $sqrt = sqrt($n);\n    while ($factor <= $sqrt) {\n        if ($n % $factor\
    \ == 0) {\n            while ($n % $factor == 0) {\n                $n /= $factor;\n\
    \            }\n            $sqrt = sqrt($n);\n        }\n        $factor++;\n\
    \    }\n    return $n;\n}", "    # step 1: find divisors and populate %factors\n\
    \    find_divisors($n);\n    # step 2: make a list of primes based on values in\
    \ %factors\n    return primes(keys %factors);\n}", "    my($factor, $i) = (2,\
    \ 3);\n    while($n > 1) {\n        if($n % $factor == 0) {\n            $n /=\
    \ $factor;\n            $factor = 2;\n        }\n        else {\n            $factor\
    \ = get_next_prime($factor);\n        }\n    }\n    return $factor;\n}", "   \
    \ while($n % 2 == 0) {\n        $n = $n / 2;\n    }\n    my $largest = 2;\n  \
    \  my $i = 3;\n    while($i <= $n) {\n        while($n % $i == 0) {\n        \
    \    $n = $n / $i;\n            $largest = $i;\n        }\n        $i += 2;\n\
    \    }\n    return $largest;\n}", "    my $i = 1;\n    my $largest = 1;\n    while\
    \ ($i < $n) {\n        $i++;\n        next unless $n % $i == 0;\n        # Don't\
    \ bother with $i if it's a composite.\n        next unless is_prime($i);\n   \
    \     $largest = $i;\n    }\n    return $largest;\n}", "    my $f = 2;\n    while\
    \ ($n % $f == 0) {\n        $n /= $f;\n    }\n    my $g = $f + 1;\n    while ($g*$g\
    \ <= $n) {\n        while ($n % $g == 0) {\n            $n /= $g;\n        }\n\
    \        $g += 2;\n    }\n    return ($n > 1) ? $n : $g;\n}", "    my $f = 2;\n\
    \    while ($n % $f == 0) {\n        $n /= $f;\n    }\n    if ($n == 1) {\n  \
    \      return $f;\n    } else {\n        return largest_prime_factor($n);\n  \
    \  }\n}", "    my $prime = 2;\n    if ($n <= 2) {\n        return $n;\n    }\n\
    \    while ($n > $prime) {\n        if ($n % $prime == 0) {\n            $n /=\
    \ $prime;\n        } else {\n            $prime++;\n        }\n    }\n    return\
    \ $prime;\n}", "    my $factors = factor($n);\n    return $factors->[-1];\n}",
  "    my($lpf, $i) = (1, 2);\n    for (; $i * $i <= $n; $i++) {\n        if ($n %\
    \ $i == 0) {\n            $lpf = $i;\n            while ($n % $i == 0) {\n   \
    \             $n /= $i;\n            }\n        }\n    }\n    $lpf = $n if $n\
    \ > 1;\n    return $lpf;\n}", "    my $max = sqrt($n);\n    for (my $i = 2; $i\
    \ <= $max; $i++) {\n        if ($n % $i == 0) {\n            my $d = $n / $i;\n\
    \            return $d if is_prime($d);\n        }\n    }\n    return $n;\n}",
  "    my $d = 2;\n    while ($n > 1) {\n        last if $d * $d > $n;\n        if\
    \ ($n % $d == 0) {\n            $n /= $d;\n        } else {\n            $d +=\
    \ 1;\n        }\n    }\n    return $n;\n}", "    $n or croak \"largest_prime_factor\
    \ requires positive integer argument\";\n    $n = Math::BigInt->new($n) unless\
    \ ref($n) eq 'Math::BigInt';\n    my($max) = 2;\n    my($factor) = 2;\n    while\
    \ ($factor * $factor <= $n) {\n        if ($n % $factor == 0) {\n            $max\
    \ = $factor;\n            $n /= $factor;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    $max > $n ? $max : $n;\n}", "    my($prime, $factor);\n\
    \    $prime = 2;\n    while ($n > 1) {\n        while (0 == $n % $prime) {\n \
    \           $factor = $prime;\n            $n /= $prime;\n        }\n        $prime\
    \ = next_prime($prime);\n    }\n    return $factor;\n}", "    my($max) = 1;\n\
    \    foreach my $factor (prime_factors($n)) {\n        $max = $factor if $factor\
    \ > $max;\n    }\n    return $max;\n}", "    my($i, $p) = (2, 1);\n    while ($i*$i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n            $n\
    \ /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return $n\
    \ > $p ? $n : $p;\n}", "    my $i = 2;\n    while ($i * $i <= $n) {\n        last\
    \ if $n % $i;\n        while ($n % $i == 0) {\n            $n /= $i;\n       \
    \ }\n        $i++;\n    }\n    return $n;\n}", "    my $result = 2;\n    while\
    \ ($n > 1) {\n        if ($n % $result == 0) {\n            $n /= $result;\n \
    \       } else {\n            $result++;\n        }\n    }\n    return $result;\n\
    }", "    my($max, $sieve) = factor($n);\n    my($f) = pop @$sieve;\n    return\
    \ $f;\n}", "    if ($n % 2 == 0) {\n        return largest_prime_factor($n / 2);\n\
    \    }\n    my $p = 3;\n    while ($n % $p) {\n        $p += 2;\n    }\n    return\
    \ $p;\n}", "    my($x) = 0;\n    my($p);\n    my($d);\n    my($last) = 0;\n  \
    \  if($n % 2 == 0) {\n        $n /= 2;\n        $last = 2;\n    }\n    $p = 3;\n\
    \    while($n > 1) {\n        $d = $n / $p;\n        if($d != int($d)) {\n   \
    \         $p += 2;\n        } else {\n            $n = $d;\n            $last\
    \ = $p;\n        }\n    }\n    return $last;\n}", "    foreach my $p (prime_factors($n))\
    \ {\n        return $p;\n    }\n}", "    my($prime_factor) = 1;\n    my($divisor)\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $divisor == 0) {\n            $prime_factor\
    \ = $divisor;\n            $n /= $divisor;\n        } else {\n            $divisor++;\n\
    \        }\n    }\n    return $prime_factor;\n}", "    my($i) = $n - 1;\n    while\
    \ (1) {\n        if (is_prime($i) && $n % $i == 0) {\n            return $i;\n\
    \        }\n        $i--;\n    }\n}", "    for (2 .. sqrt($n)) {\n        next\
    \ unless $n % $_ == 0;\n        return largest_prime_factor($n / $_) if is_prime($n\
    \ / $_);\n        return largest_prime_factor($_);\n    }\n    return $n;\n}",
  "    my $answer = 0;\n    my $m = 2;\n    while ($m * $m <= $n) {\n        while\
    \ ($n % $m == 0) {\n            $answer = $m;\n            $n /= $m;\n       \
    \ }\n        $m += 1;\n    }\n    if ($n > 1) {\n        $answer = $n;\n    }\n\
    \    return $answer;\n}", "    my $factor = 2;\n    my $max_factor = 0;\n    while($n\
    \ > 1) {\n        while($n % $factor == 0) {\n            $max_factor = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $max_factor;\n}", "    foreach my $p (prime_factors($n)) {\n        return $p;\n\
    \    }\n}", "    my $i = 2;\n    while ($i < $n) {\n        last if $n % $i !=\
    \ 0;\n        $n /= $i;\n    }\n    return $n;\n}", "    for (reverse 1..int sqrt\
    \ $n) {\n        next unless $n % $_ == 0;\n        return $_ if is_prime($_);\n\
    \    }\n}", "    my($d) = first { $n % $_ == 0 } primes();\n    return $d == $n\
    \ ? $d : largest_prime_factor($n / $d);\n}", "    my $i = 2;\n    while ($i <\
    \ $n) {\n        if ($n % $i == 0) {\n            return largest_prime_factor($n\
    \ / $i);\n        }\n        $i += 1;\n    }\n    return $n;\n}", "    my $i =\
    \ 2;\n    while($i < $n) {\n        if($n % $i == 0) {\n            $n /= $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $n;\n}", " \
    \   my $factor = 2;\n    my $last_factor = 1;\n    my $largest_factor = 1;\n \
    \   while ($n > 1) {\n        if ($n % $factor == 0) {\n            $largest_factor\
    \ = $factor;\n            $n /= $factor;\n            $last_factor = $factor;\n\
    \            $factor = 2;\n        } else {\n            $factor = next_prime($factor);\n\
    \        }\n    }\n    return $largest_factor;\n}", "    my $d = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $d == 0) {\n            $n /= $d;\n        }\n\
    \        $d++;\n    }\n    return $d-1;\n}", "    return $n if is_prime($n);\n\
    \    for my $i (2 .. sqrt($n)) {\n        return largest_prime_factor($n / $i)\
    \ if $n % $i == 0;\n    }\n}", "    my @factors = prime_factors($n);\n    return\
    \ $factors[-1];\n}", "    my($i) = 2;\n    my($f) = 1;\n    while ($i * $i <=\
    \ $n) {\n        if ($n % $i == 0) {\n            $f = $i;\n            $n /=\
    \ $i;\n        } else {\n            $i++;\n        }\n    }\n    return $n >\
    \ $f ? $n : $f;\n}", "    my $prime = 0;\n    while ($n % 2 == 0) {\n        $prime\
    \ = 2;\n        $n /= 2;\n    }\n    my $factor = 3;\n    while ($n > 1) {\n \
    \       if ($n % $factor == 0) {\n            $prime = $factor;\n            $n\
    \ /= $factor;\n        } else {\n            $factor += 2;\n        }\n    }\n\
    \    return $prime;\n}", "    my $prime_factors = all_prime_factors($n);\n   \
    \ return $prime_factors->[-1];\n}", "    my($factor) = 2;\n    while($n != 1)\
    \ {\n        if($n % $factor == 0) {\n            $n /= $factor;\n        } else\
    \ {\n            $factor++;\n        }\n    }\n    return $factor;\n}", "    return\
    \ -1 if $n < 2;\n    return 2 if $n == 2;\n    return 3 if $n == 3;\n    return\
    \ 2 if $n % 2 == 0;\n    return 3 if $n % 3 == 0;\n    my $factor = 5;\n    my\
    \ $factor_increment = 2;\n    while ($factor**2 <= $n) {\n        if ($n % $factor\
    \ == 0) {\n            $n /= $factor;\n            last;\n        }\n        $factor\
    \ += $factor_increment;\n        $factor_increment = 6 - $factor_increment;\n\
    \    }\n    return $n;\n}", "    my $f = 2;\n    while($n > 1) {\n        if ($n\
    \ % $f == 0) {\n            $n /= $f;\n        } else {\n            $f++;\n \
    \       }\n    }\n    return $f;\n}", "    return 2 if $n == 2; # 2 is a special\
    \ case.\n    my $largest = 0;\n    for my $f (2 .. $n) {\n        if ($n % $f\
    \ == 0) {\n            my $m = $n / $f;\n            return $f if is_prime($f);\n\
    \            return $m if is_prime($m);\n            $largest = $f if $f > $largest;\n\
    \        }\n    }\n    return $largest;\n}", "    my($x) = 2;\n    while ( $x\
    \ * $x <= $n ) {\n        if ( $n % $x == 0 ) {\n            $n /= $x;\n     \
    \   } else {\n            $x++;\n        }\n    }\n    return $n;\n}", "    my\
    \ $p = 2;\n    while ($n > 1) {\n        if ($n % $p == 0) {\n            $n /=\
    \ $p;\n        } else {\n            $p++;\n        }\n    }\n    return $p;\n\
    }", "    my($i) = 2;\n    while($i * $i <= $n) {\n        if($n % $i == 0) {\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $n;\n}", "    my $divisor = int(sqrt($n));\n    while( $divisor >\
    \ 1 ) {\n        if( $n % $divisor == 0 ) {\n            if( is_prime($divisor)\
    \ ) {\n                return $divisor;\n            }\n        }\n        $divisor--;\n\
    \    }\n    return 0;\n}", "    for my $factor (reverse 2..$n) {\n        if (is_prime($factor)\
    \ && $n % $factor == 0) {\n            return $factor;\n        }\n    }\n}",
  '    my($p) = 0;', "    my $x = smallest_prime_factor($n);\n    return $x == $n\
    \ ? $x : largest_prime_factor($n / $x);\n}", "    my $prime_factor = 1;\n    my\
    \ $factor = 1;\n    while ($factor < $n) {\n        $factor += 1;\n        if\
    \ (0 == $n % $factor) {\n            $prime_factor = $factor;\n            $n\
    \ /= $factor;\n            $factor = 1;\n        }\n    }\n    return $prime_factor;\n\
    }", "    my($f) = 1;\n    for (; $n % 2 == 0; $n /= 2) {\n        $f = 2;\n  \
    \  }\n    for (my($i) = 3; $i <= $n; $i += 2) {\n        while ($n % $i == 0)\
    \ {\n            $f = $i;\n            $n /= $i;\n        }\n    }\n    return\
    \ $f;\n}", "    my $max;\n    for (my $i = 2; $i <= sqrt($n); $i++) {\n      \
    \  if ($n % $i == 0) {\n            $max = $i;\n            $n /= $i;\n      \
    \      redo;\n        }\n    }\n    $max;\n}", "    my $lpf = 2;\n    while ($n\
    \ > 1) {\n        if ($n % $lpf == 0) {\n            $n /= $lpf;\n        } else\
    \ {\n            $lpf++;\n        }\n    }\n    return $lpf;\n}", "    my($f)\
    \ = 2;\n    my($lpf) = 1;\n    while($f <= $n) {\n        $lpf = $f if $n % $f\
    \ == 0;\n        $f = next_prime($f);\n    }\n    return $lpf;\n}", "    my @primes\
    \ = &primes_upto($n);\n    foreach my $p (reverse @primes) {\n        return $p\
    \ if $n % $p == 0;\n    }\n}", "    for (my $i = $n - 1; $i > 1; $i--) {\n   \
    \     if ($n % $i == 0 && is_prime($i)) {\n            return $i;\n        }\n\
    \    }\n}", "    my($p) = 2;\n    while ($p < $n) {\n        if ($n % $p == 0)\
    \ {\n            $n /= $p;\n        } else {\n            $p++;\n        }\n \
    \   }\n    return $n;\n}", "    my @factors = prime_factors($n);\n    return $factors[-1];\n\
    }", "    my($factor) = 2;\n    my($last_factor) = 1;\n    while ($n > 1) {\n \
    \       if ($n % $factor == 0) {\n            $last_factor = $factor;\n      \
    \      $n /= $factor;\n            while ($n % $factor == 0) {\n             \
    \   $n /= $factor;\n            }\n        }\n        if ($factor == 2) {\n  \
    \          $factor++;\n        } else {\n            $factor += 2;\n        }\n\
    \    }\n    return $last_factor;\n}", "    for my $i (reverse (2 .. $n)) {\n \
    \       if (is_prime($i) && $n % $i == 0) {\n            return $i;\n        }\n\
    \    }\n}", "    return next_prime_factor($n, 1);\n}", "    my $m = $n;\n    my\
    \ $largest = 0;\n    for my $i (2..$n) {\n        if ($m % $i == 0) {\n      \
    \      $m /= $i;\n            $largest = $i;\n        }\n    }\n    return $largest;\n\
    }", "    my($factor) = largest_factor($n);\n    return $factor if is_prime($factor);\n\
    \    return largest_prime_factor($factor);\n}", "    return 2 if $n == 2;\n  \
    \  return 3 if $n == 3;\n    my $sqrt = int(sqrt($n));\n    for my $k (reverse(4..$sqrt))\
    \ {\n        next if $n % $k;\n        my $l = largest_prime_factor($k);\n   \
    \     return $l if $l > 2;\n    }\n    return $n;\n}", "    for my $i (2..$n)\
    \ {\n        if ($n % $i == 0) {\n            if (is_prime($n / $i)) {\n     \
    \           return $n / $i;\n            }\n        }\n    }\n}", "    die unless\
    \ $n > 1 and not is_prime($n);\n    my $i = 2;\n    while ($i <= $n) {\n     \
    \   if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n           \
    \ $i++;\n        }\n    }\n    return $i;\n}", "    my $factors = prime_factors($n);\n\
    \    return $factors->[-1];\n}", "    while($n%2 == 0) {\n        $n /= 2;\n \
    \   }\n    my $largest_prime = 1;\n    my $curr_prime = 3;\n    while($n > 1)\
    \ {\n        while($n%$curr_prime == 0) {\n            $n /= $curr_prime;\n  \
    \          $largest_prime = $curr_prime;\n        }\n        $curr_prime += 2;\n\
    \    }\n    return $largest_prime;\n}", "    my($i) = 2;\n    my($p) = 1;\n  \
    \  while ($i <= $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n   \
    \         $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n \
    \   return $p;\n}", "    my $i = 2;\n    while($i * $i <= $n) {\n        while($n\
    \ % $i == 0) {\n            $n /= $i;\n        }\n        $i += 1;\n    }\n  \
    \  return $n;\n}", "    # We will find the largest prime factor by first finding\
    \ all the\n    # prime factors of n, and then taking the max.\n    my @prime_factors\
    \ = &all_prime_factors($n);\n    return(max(@prime_factors));\n}", "    my($i)\
    \ = 1;\n    while($i < $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $n;\n}", "    my $prime = 2;\n  \
    \  while ($n % $prime == 0) {\n        $n /= $prime;\n    }\n    while ($n > 1)\
    \ {\n        $prime++;\n        while ($n % $prime == 0) {\n            $n /=\
    \ $prime;\n        }\n    }\n    return $prime;\n}", "    my $prime_factor = 2;\n\
    \    while ($n > $prime_factor) {\n        if ($n % $prime_factor == 0) {\n  \
    \          $n /= $prime_factor;\n        } else {\n            $prime_factor++;\n\
    \        }\n    }\n    return $prime_factor;\n}", "    my $factor = 2;\n    my\
    \ $max_factor = $n / $factor;\n    while ($factor <= $max_factor) {\n        if\
    \ ($n % $factor == 0) {\n            $n /= $factor;\n            $max_factor =\
    \ $n / $factor;\n        } else {\n            $factor++;\n        }\n    }\n\
    \    return $n;\n}", "    my($p) = 2;\n    while($p*$p <= $n) {\n        while(\
    \ $n % $p == 0 ) {\n            $n /= $p;\n        }\n        $p++;\n    }\n \
    \   return $n;\n}", "    my($factor) = 2;\n    while($n > 1) {\n        $factor\
    \ = next_prime($factor);\n        while($n % $factor == 0) {\n            $n /=\
    \ $factor;\n        }\n    }\n    return $factor;\n}", "    my $f = 0;\n    while\
    \ ($n % 2 == 0) {\n        $f = 2;\n        $n /= 2;\n    }\n    my $i = 3;\n\
    \    my $imax = sqrt($n);\n    while ($i <= $imax) {\n        while ($n % $i ==\
    \ 0) {\n            $f = $i;\n            $n /= $i;\n            $imax = sqrt($n);\n\
    \        }\n        $i += 2;\n    }\n    if ($n != 1) {\n        $f = $n;\n  \
    \  }\n    return $f;\n}", "    my $next_prime = 2;\n    while ($n > $next_prime)\
    \ {\n        if ($n % $next_prime == 0) {\n            $n /= $next_prime;\n  \
    \      } else {\n            $next_prime = next_prime($next_prime);\n        }\n\
    \    }\n    return $n;\n}", "    my $lpf = 1;\n    my $i = 2;\n    while ($i <=\
    \ $n) {\n        if (is_prime($i) && ($n % $i == 0)) {\n            $lpf = $i;\n\
    \            $n /= $i;\n        }\n        $i++;\n    }\n    return $lpf;\n}",
  "    my($i) = 2;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n         \
    \   return max($i, largest_prime_factor($n / $i));\n        }\n        $i++;\n\
    \    }\n    return $n;\n}", "    my $largest_pf = 1;\n    my $pf = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $pf == 0) {\n            $largest_pf = $pf;\n\
    \            $n /= $pf;\n        }\n        $pf += 1;\n    }\n    return $largest_pf;\n\
    }", "    # All even numbers, except 2, are not prime, so increment by 2\n    #\
    \ (primes are odd)\n    my($factor) = 3;\n    while ($n > 1) {\n        # Fastest\
    \ way to find out whether a number is even is to\n        # bitwise-and with 2\
    \ and check whether it is zero\n        if (($n & 2) == 0) {\n            # n\
    \ is even, so it is divisible by 2\n            $n /= 2;\n        } else {\n \
    \           # n is odd, so it is divisible by odd number only\n            # So,\
    \ increment factor by 2\n            # Does $n modulo $factor == 0?\n        \
    \    if ($n % $factor == 0) {\n                # Divisible, so divide out this\
    \ factor\n                $n /= $factor;\n            } else {\n             \
    \   # Not divisible, so increment factor by 2\n                $factor += 2;\n\
    \            }\n        }\n    }\n    # Since all factors were prime, the largest\
    \ prime factor is $factor\n    return $factor;\n}", "    my($i, $fact);\n    while\
    \ ($n % 2 == 0) {\n        $n /= 2;\n    }\n    $i = 3;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n            $fact = $i;\n\
    \        } else {\n            $i += 2;\n        }\n    }\n    return $fact;\n\
    }", "    for (primes_lt($n)) {\n        $n /= $_ if $n % $_ == 0;\n    }\n   \
    \ return $n;\n}", "    for my $p (@{prime_factors($n)}) {\n        $n = $p;\n\
    \    }\n    return $n;\n}", "    my($factor, $prime_factor) = (2, 2);\n    while\
    \ ($n > 1) {\n        if (is_prime($factor)) {\n            $prime_factor = $factor;\n\
    \            while ($n % $factor == 0) {\n                $n /= $factor;\n   \
    \         }\n        }\n        $factor++;\n    }\n    return $prime_factor;\n\
    }", "    my $factor = 2;\n    while ($n > 1) {\n        if ($n % $factor == 0)\
    \ {\n            $n /= $factor;\n        } else {\n            $factor += 1;\n\
    \        }\n    }\n    return $factor;\n}", "    my($p) = 2;\n    while($p <=\
    \ $n) {\n        if($n % $p == 0) {\n            $n /= $p;\n        } else {\n\
    \            $p++;\n        }\n    }\n    return $p;\n}", "    my $lpf = 2;\n\
    \    for (2..int(sqrt($n))) {\n        next unless $n % $_ == 0;\n        $lpf\
    \ = $_;\n        while ($n % $_ == 0) {\n            $n /= $_;\n        }\n  \
    \  }\n    return $lpf;\n}", "    my $max_factor = 0;\n    my $i = 2;\n    while($i\
    \ <= $n) {\n        if(is_prime($i) && $n % $i == 0) {\n            $max_factor\
    \ = $i;\n            $n /= $i;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $max_factor;\n}", "    # first get all the factors\
    \ in order\n    my @factors = find_factors($n);\n    # now start picking off the\
    \ left\n    my $i = 0;\n    while (1) {\n        last if $factors[$i] == 1;\n\
    \        if ($n % $factors[$i] == 0) {\n            $n /= $factors[$i];\n    \
    \    } else {\n            ++$i;\n        }\n    }\n    return $factors[$i];\n\
    }", "    die \"Invalid input\" if $n <= 1;\n    my $factor = 2;\n    while ($n\
    \ % $factor == 0) {\n        $n /= $factor;\n    }\n    $factor = 3;\n    while\
    \ ($n > 1) {\n        while ($n % $factor == 0) {\n            $n /= $factor;\n\
    \        }\n        $factor += 2;\n    }\n    return $factor - 2;\n}", "    #\
    \ Find a prime that is a factor of n.\n    my $pr = first_prime_factor($n);\n\
    \    my $result = $pr;\n    my $prev_result = $result;\n    # Repeatedly divide\
    \ out all the prime factors of n.\n    while ($n > 1) {\n        $prev_result\
    \ = $result;\n        $n /= $pr;\n        # Find the next prime factor of n.\n\
    \        $pr = first_prime_factor($n);\n        $result = $pr;\n    }\n    return\
    \ $prev_result;\n}", "    my $d = 2;\n    while ($n > 1) {\n        while ($n\
    \ % $d == 0) {\n            $n /= $d;\n        }\n        ++$d;\n    }\n    return\
    \ $d - 1;\n}", "    my $i = 2;\n    my $largest = 0;\n    while ($i < $n) {\n\
    \        if (is_prime($i) && $n % $i == 0) {\n            $largest = $i;\n   \
    \     }\n        $i++;\n    }\n    return $largest;\n}", "    foreach my $f (2..sqrt($n))\
    \ {\n        next unless $n % $f == 0;\n        return max(largest_prime_factor($n/$f),\
    \ $f);\n    }\n    return $n;\n}", "    my $i = 2;\n    my $largest = $i;\n  \
    \  while ($i < $n) {\n        if ($n % $i == 0) {\n            if (is_prime($i))\
    \ {\n                $largest = $i;\n            }\n        }\n        $i++;\n\
    \    }\n    return $largest;\n}", "    my $factor = $n;\n    my $max = 0;\n  \
    \  while ($factor >= 3) {\n        if ($n % $factor == 0) {\n            $max\
    \ = $factor if is_prime($factor);\n        }\n        $factor -= 2;\n    }\n \
    \   return $max;\n}", "    my $d = smallest_divisor($n);\n    if ($d == $n) {\n\
    \        return $n;\n    } else {\n        return largest_prime_factor($n / $d);\n\
    \    }\n}", "    my($i, $max) = (2, 2);\n    while($i * $i <= $n) {\n        if($n\
    \ % $i == 0) {\n            $n /= $i;\n            $max = $i;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return $n > $max ? $n : $max;\n}",
  "    die \"Assume n > 1 and is not a prime.\\n\" unless $n > 1;\n    my $prime_factor\
    \ = $n;\n    my $i = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i ==\
    \ 0) {\n            $prime_factor = $i;\n            while ($n % $i == 0) {\n\
    \                $n /= $i;\n            }\n        }\n        $i++;\n    }\n \
    \   return $prime_factor;\n}", "    my $l = 1;\n    while(1) {\n        if( !($n\
    \ % $l) ) {\n            $n /= $l;\n            $l = 1;\n        }\n        if(\
    \ $n == 1 ) {\n            return $l;\n        }\n        ++$l;\n    }\n}", " \
    \   my @factors = prime_factors($n);\n    return $factors[-1];\n}", "    my $largest\
    \ = 2;\n    for (;;) {\n        if (is_prime($n)) {\n            return $n;\n\
    \        }\n        if (0 == $n % $largest) {\n            $n /= $largest;\n \
    \       } else {\n            $largest = next_prime($largest);\n        }\n  \
    \  }\n}", "    die unless $n > 1;\n    return $n if is_prime($n);\n    my $p =\
    \ 2;\n    until(is_prime($n)) {\n        if($n % $p == 0) {\n            $n /=\
    \ $p;\n        } else {\n            $p++;\n        }\n    }\n    return $n;\n\
    }", "    my($i, $largest);\n    for($i = 2; $i <= sqrt($n); $i++) {\n        if($n\
    \ % $i == 0) {\n            $largest = $i;\n            while($n % $i == 0) {\n\
    \                $n /= $i;\n            }\n        }\n    }\n    return $n > $largest\
    \ ? $n : $largest;\n}", "    my $i = 2;\n    while ($i < $n) {\n        last if\
    \ $n % $i == 0;\n        $i++;\n    }\n    return $i;\n}", "    return 0 if $n\
    \ < 1;\n    my $largest = 0;\n    for my $factor (Math::Prime::Util::factors($n))\
    \ {\n        $largest = $factor if $factor > $largest;\n    }\n    return $largest;\n\
    }", "    my $i = 2;\n    my $largest_prime = 2;\n    while ($i * $i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n            $largest_prime\
    \ = $i;\n        } else {\n            $i++;\n        }\n    }\n    return $n\
    \ > $largest_prime ? $n : $largest_prime;\n}", "    foreach my $p (prime_factors($n))\
    \ {\n        return $p;\n    }\n}", '    my($last_factor, $d);', "    my $r =\
    \ sqrt($n);\n    my $x = 2;\n    while ($x <= $r) {\n        if ($n % $x == 0)\
    \ {\n            $n /= $x;\n            last;\n        }\n        $x++;\n    }\n\
    \    return $n;\n}", "    my $f = smallest_prime_factor($n);\n    return $f ==\
    \ $n ? $f : largest_prime_factor($n / $f);\n}", "    my @factors = prime_factors($n);\n\
    \    return max @factors;\n}", "    my $max = sqrt($n);\n    my $res = $n;\n \
    \   foreach my $f (@primes) {\n        last if $f > $max;\n        next unless\
    \ $res % $f == 0;\n        $res /= $f;\n        while ($res % $f == 0) {\n   \
    \         $res /= $f;\n        }\n    }\n    $res == 1 ? ($max < $n ? $max : $n)\
    \ : $res;\n}", "    my $largest_prime = 1;\n    my $current_divisor = 2;\n   \
    \ while ($n > 1) {\n        if ($n % $current_divisor == 0) {\n            $largest_prime\
    \ = $current_divisor;\n            while ($n % $current_divisor == 0) {\n    \
    \            $n /= $current_divisor;\n            }\n        }\n        $current_divisor\
    \ += 1;\n    }\n    return $largest_prime;\n}", "    my $largest = 0;\n    my\
    \ $factor = 2;\n    while($n > 1) {\n        if($n % $factor == 0) {\n       \
    \     $largest = $factor;\n            while($n % $factor == 0) {\n          \
    \      $n /= $factor;\n            }\n        }\n        $factor++;\n    }\n \
    \   return $largest;\n}", "    while (1) {\n        my $p = smallest_prime_factor($n);\n\
    \        if ($p == $n) {\n            return $p;\n        }\n        $n /= $p;\n\
    \    }\n}", "    my $prime = 2;\n    while (1) {\n        if (is_prime($prime))\
    \ {\n            my $r = $n % $prime;\n            if ($r == 0) {\n          \
    \      if ($n == $prime) {\n                    return $prime;\n             \
    \   }\n                else {\n                    $n /= $prime;\n           \
    \     }\n            }\n            else {\n                $prime++;\n      \
    \      }\n        }\n        else {\n            $prime++;\n        }\n    }\n\
    }", "    my($factor) = 2;\n    my($last_factor) = 0;\n    while ($n > 1) {\n \
    \       if ($n % $factor == 0) {\n            $last_factor = $factor;\n      \
    \      $n /= $factor;\n            while ($n % $factor == 0) {\n             \
    \   $n /= $factor;\n            }\n        }\n        $factor += 1;\n    }\n \
    \   return $last_factor;\n}", "    my $i = 2;\n    while ($i < $n) {\n       \
    \ if ($n % $i == 0) {\n            return largest_prime_factor($n / $i);\n   \
    \     }\n        $i += 1;\n    }\n    return $n;\n}", "    my $largest_prime =\
    \ 2;\n    for (2..sqrt($n)) {\n        if($n % $_ == 0) {\n            $largest_prime\
    \ = $_ if $_ > $largest_prime;\n            $n /= $_;\n        }\n    }\n    return\
    \ $largest_prime;\n}", "    my($i) = 2;\n    my($result) = $n;\n    while (1)\
    \ {\n        if ($result == $i) {\n            return $result;\n        }\n  \
    \      if ($result % $i == 0) {\n            $result = $result / $i;\n       \
    \ } else {\n            $i++;\n        }\n    }\n}", "    my $max = 1;\n    my\
    \ $p = 2;\n    while ($p * $p <= $n) {\n        last if $n % $p;\n        while\
    \ ($n % $p == 0) {\n            $n /= $p;\n            $max = $p;\n        }\n\
    \        $p++;\n    }\n    return $n > $max ? $n : $max;\n}", "    my $factors\
    \ = prime_factors($n);\n    my $largest = 0;\n    foreach my $f (@$factors) {\n\
    \        $largest = $f if $f > $largest;\n    }\n    return $largest;\n}", " \
    \   die if $n < 2;\n    for my $i (2 .. $n-1) {\n        if($n % $i == 0) {\n\
    \            return largest_prime_factor($n/$i);\n        }\n    }\n    return\
    \ $n;\n}", "    my($p) = 2;\n    while ($p < $n) {\n        if ($n % $p == 0)\
    \ {\n            $n /= $p;\n        } else {\n            $p++;\n        }\n \
    \   }\n    return $n;\n}", "    for my $i (2..$n) {\n        if ($n % $i == 0)\
    \ {\n            return $i if is_prime($i);\n        }\n    }\n}", "    my $i\
    \ = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n           \
    \ # We found a divisor. Try dividing $n by that divisor,\n            # then finding\
    \ the largest factor of the result.\n            return largest_prime_factor($n\
    \ / $i);\n        }\n        $i++;\n    }\n    # No divisors were found. $n must\
    \ be prime.\n    return $n;\n}", "    my $p = 2;\n    while($n > 1) {\n      \
    \  my $c = 0;\n        while($n % $p == 0) {\n            $n /= $p;\n        \
    \    $c++;\n        }\n        return $p if $c;\n        $p++;\n    }\n}", " \
    \   my @factors = factor($n);\n    return $factors[-1];\n}", "    my @factors\
    \ = prime_factors($n);\n    return $factors[-1];\n}", "    my $d = 2;\n    my\
    \ $largest = 1;\n    while($n > 1) {\n        while($n % $d == 0) {\n        \
    \    $largest = $d;\n            $n /= $d;\n        }\n        $d++;\n    }\n\
    \    return $largest;\n}", "    my($f) = next_prime_factor($n);\n    while ($f\
    \ != $n) {\n        $n /= $f;\n        $f = next_prime_factor($n);\n    }\n  \
    \  return $f;\n}", "    my($i, $factor);\n    my($divisor) = 2;\n    while($n\
    \ != 1) {\n        $factor = 1;\n        while($n % $divisor == 0) {\n       \
    \     $factor = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $factor;\n}", "    my $prime = 2;\n    for ($n; $n > 1; $n\
    \ /= $prime) {\n        $prime = next_prime($prime);\n    }\n    return $prime;\n\
    }", "    my $i = 2;\n    for ($i; $i < sqrt($n); $i++) {\n        if ($n % $i\
    \ == 0) {\n            return largest_prime_factor($n / $i);\n        }\n    }\n\
    \    return $n;\n}", "    my($i) = 2;\n    my($largest_prime) = 0;\n    while\
    \ ($i < $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n          \
    \  $largest_prime = $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $largest_prime;\n}", "    my($i) = 2;\n    while ($i * $i <= $n) {\n\
    \        while ($n % $i == 0) {\n            $n /= $i;\n        }\n        $i++;\n\
    \    }\n    return $n;\n}", "    my $lpf = 1;\n    while($n % 2 == 0) {\n    \
    \    $lpf = 2;\n        $n /= 2;\n    }\n    my $p = 3;\n    while($n > 1) {\n\
    \        while($n % $p == 0) {\n            $lpf = $p;\n            $n /= $p;\n\
    \        }\n        $p += 2;\n    }\n    return $lpf;\n}", "    my @factor_candidates\
    \ = primes(sqrt($n) + 1);\n    my @factors = grep { $n % $_ == 0 } @factor_candidates;\n\
    \    die \"No prime factors for $n\\n\" unless @factors;\n    my @prime_factors\
    \ = grep { is_prime($_) } @factors;\n    die \"No prime factors for $n\\n\" unless\
    \ @prime_factors;\n    my $p = max(@prime_factors);\n    return $p;\n}", "   \
    \ my $p;\n    for($p = 2; $p < $n/2; $p++) {\n        last if $n % $p;\n    }\n\
    \    return $p;\n}", "    return (grep {$n % $_ == 0} (2..$n))[-1];\n}", "   \
    \ my($factor) = 2;\n    my($last) = $n;\n    while ($factor * $factor <= $last)\
    \ {\n        while ($last % $factor == 0) {\n            $last /= $factor;\n \
    \       }\n        $factor++;\n    }\n    return $last;\n}", "    my @primes =\
    \ primes_up_to($n);\n    my @factors = factors($n);\n    my $last_prime = pop\
    \ @primes;\n    while (@factors) {\n        my $factor = pop @factors;\n     \
    \   if ($factor == $last_prime) {\n            return $factor;\n        }\n  \
    \  }\n}", "    my @primes = prime_sieve($n - 1);\n    my @ans;\n    foreach my\
    \ $p (@primes) {\n        if ($n % $p == 0) {\n            push @ans, $p;\n  \
    \      }\n    }\n    return max(@ans);\n}", "    my($i) = 2;\n    while ($i <=\
    \ $n) {\n        last if $n == $i;\n        while ($n % $i == 0) {\n         \
    \   $n /= $i;\n        }\n        $i++;\n    }\n    return $i;\n}", "    foreach\
    \ my $i (reverse 2..floor(sqrt($n))) {\n        next unless $n % $i == 0;\n  \
    \      if(is_prime($i)) {\n            return $i;\n        }\n    }\n}", "   \
    \ my $x = 3;\n    while($n > 1) {\n        if(is_prime($x) && $n % $x == 0) {\n\
    \            return $x if $n == $x;\n            $n /= $x;\n        }\n      \
    \  $x += 2;\n    }\n}", "    my $i = 2;\n    while ($i < $n) {\n        if ($n\
    \ % $i == 0) {\n            # Return the largest prime factor of $n/$i\n     \
    \       return largest_prime_factor($n/$i);\n        }\n        $i++;\n    }\n\
    \    return $n;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
