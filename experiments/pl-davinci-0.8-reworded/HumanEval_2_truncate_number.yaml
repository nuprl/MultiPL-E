name: HumanEval_2_truncate_number
language: pl
prompt: "# Given a positive floating point number, it can be decomposed into\n# and\
  \ integer part (largest integer smaller than given number) and decimals\n# (leftover\
  \ part always smaller than 1).\n# Return the decimal part of the number.\n# >>>\
  \ truncate_number(3.5)\n# 0.5\nsub truncate_number {\n    my($number) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
  \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $number - int($number);\n}", "    my($int_part) = int($number);\n\
    \    return $number - $int_part;\n}", "    return ($number - int($number));\n}",
  "    return $number - int($number);\n}", "    my $integer = int($number);\n    return\
    \ $number - $integer;\n}", "    my $result = $number;\n    $result =~ s/^\\d+\\\
    .?//;\n    return $result;\n}", "    # get integer part of $number with int()\n\
    \    # subtract from $number to get decimal part\n    # return result", "    return\
    \ $number - int($number);\n}", "    my($integer, $decimal) = split(/\\./, $number);\n\
    \    return $decimal;\n}", "    return $number - int($number);\n}", "    return\
    \ $number - int($number);\n}", "    return int($number);\n}", "    return $number\
    \ - floor($number);\n}", "    my $trucated = int($number);\n    return $number\
    \ - $trucated;\n}", "    return ($number - floor($number));\n}", "    return $number\
    \ - int($number);\n}", "    return $number - int($number);\n}", "    my $integer\
    \ = floor($number);\n    return $number - $integer;\n}", "    return $number -\
    \ int($number);\n}", "    return $number - int($number);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
