name: HumanEval_2_truncate_number
language: pl
prompt: "# Given a positive floating point number, it can be decomposed into\n# and\
  \ integer part (largest integer smaller than given number) and decimals\n# (leftover\
  \ part always smaller than 1).\n# Return the decimal part of the number.\n# >>>\
  \ truncate_number(3.5)\n# 0.5\nsub truncate_number {\n    my($number) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
  \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $number - int($number);\n}", "    my($int_part) = int($number);\n\
    \    return $number - $int_part;\n}", "    return ($number - int($number));\n}",
  "    return $number - int($number);\n}", "    my $integer = int($number);\n    return\
    \ $number - $integer;\n}", "    my $result = $number;\n    $result =~ s/^\\d+\\\
    .?//;\n    return $result;\n}", "    # get integer part of $number with int()\n\
    \    # subtract from $number to get decimal part\n    # return result", "    return\
    \ $number - int($number);\n}", "    my($integer, $decimal) = split(/\\./, $number);\n\
    \    return $decimal;\n}", "    return $number - int($number);\n}", "    return\
    \ $number - int($number);\n}", "    return int($number);\n}", "    return $number\
    \ - floor($number);\n}", "    my $trucated = int($number);\n    return $number\
    \ - $trucated;\n}", "    return ($number - floor($number));\n}", "    return $number\
    \ - int($number);\n}", "    return $number - int($number);\n}", "    my $integer\
    \ = floor($number);\n    return $number - $integer;\n}", "    return $number -\
    \ int($number);\n}", "    return $number - int($number);\n}", "    return $number\
    \ - int($number);\n}", "    return $number - int($number);\n}", "    my $integer_part\
    \ = int($number);\n    return ($number - $integer_part);\n}", "    return $number\
    \ - floor($number);\n}", "    return $number - int($number);\n}", "    my $int_part\
    \ = int($number);\n    my $dec_part = $number - $int_part;\n    return $dec_part;\n\
    }", "    my $integer_part = int($number);\n    return $number - $integer_part;\n\
    }", "    return $number - int($number);\n}", "    return $number - int($number);\n\
    }", "    # return (int($number) - $number);\n    # If int() is not available in\
    \ your system, you can achieve the same result\n    # as follows.\n    return\
    \ ($number - int($number));\n}", "    return $number - int($number);\n}", "  \
    \  my $integer_part = int($number);\n    return ($number - $integer_part);\n}",
  "    if($number <= 0) {\n        die \"Number is not positive\";\n    }\n    my\
    \ $int = int($number);\n    return $number - $int;\n}", "    $number =~ s/(\\\
    d+)\\..*/$1/;\n    return $number;\n}", "    return $number - int($number);\n}",
  "    return ($number - int($number));\n}", "    return 0 unless defined $number;\n\
    \    return $number - int($number);\n}", "    return $number - sprintf(\"%.0f\"\
    , $number);\n}", "    return $number - int($number);\n}", "    return $number\
    \ - int($number);\n}", "    return $number - int($number);\n}", "    return $number\
    \ - int($number);\n}", "    return $number - floor($number);\n}", "    my $i =\
    \ POSIX::floor($number);\n    return $number - $i;\n}", "    return $number -\
    \ int($number);\n}", "    return $number - int($number);\n}", "    return $number\
    \ - int($number);\n}", "    return $number - int($number);\n}", "    return (\
    \ $number % 1 );\n}", "    return $number - int($number);\n}", "    return $number\
    \ - int($number);\n}", "    return $number - int($number);\n}", "    my $truncated\
    \ = sprintf(\"%.0f\", $number);\n    return $number - $truncated;\n}", "    return\
    \ $number - (int($number));\n}", "    return $number - int($number);\n}", "  \
    \  my($i) = floor($number);\n    return $number - $i;\n}", "    my($int) = int($number);\n\
    \    my($trunc) = $number - $int;\n    return $trunc;\n}", "    my $integer =\
    \ int($number);\n    return $number - $integer;\n}", "    return $number - floor($number);\n\
    }", "    return ($number - int($number));\n}", "    return $number - int($number);\n\
    }", "    my $int_part = int($number);\n    return $number - $int_part;\n}", " \
    \   my($n1, $n2) = split(/\\./, $number);\n    return 0 if !$n2;\n    return \"\
    0.$n2\";\n}", "    #$number = $number * 100;\n    #my $result = $number / 100;\n\
    \    my $result = $number - int($number);\n    return $result;\n}", "    return\
    \ int($number) - $number;\n}", "    return $number - int($number);\n}", "    $number\
    \ =~ s/^\\d+\\.//;\n    return $number;\n}", "    return $number - int($number);\n\
    }", "    my($int_part) = int($number);\n    return $number - $int_part;\n}", " \
    \   return $number - int($number);\n}", "    $number -= int($number);\n    return\
    \ $number;\n}", "    return $number - int($number);\n}", "    if ($number =~ /^(\\\
    d+)(\\.\\d+)?$/) {\n        return $2;\n    }\n    return 0;\n}", "    return\
    \ $number - int($number);\n}", "    return $number - int($number);\n}", "    return(($number\
    \ - int($number)));\n}", "    my $integer_part = int($number);\n    my $decimal_part\
    \ = $number - $integer_part;\n    return $decimal_part;\n}", "    $number =~ /^[0-9]*\\\
    .([0-9]*)$/;\n    return \"0.\".$1;\n}", "    return $number - int($number);\n\
    }", "    my $int = int($number);\n    return ($number - $int);\n}", "    return\
    \ $number - int($number);\n}", "    my $integer_part = int($number);\n    return\
    \ $number - $integer_part;\n}", "    return 0 unless defined $number;\n    return\
    \ $number - int($number);\n}", "    return $number - int($number);\n}", "    my\
    \ $integer_part = int($number);\n    return $number - $integer_part;\n}", "  \
    \  return $number - int($number);\n}", "    $number =~ /^[0-9]+(\\.[0-9]+)?$/\n\
    \        or confess \"Invalid number: $number\";\n    return 0.0 if $number ==\
    \ int($number);\n    return $number - int($number);\n}", "    my $integer_part\
    \ = int($number);\n    return $number - $integer_part;\n}", "    $number =~ s/^[0-9]+\\\
    .//;\n    return $number;\n}", "    $number = $number - int($number);\n    return\
    \ $number;\n}", "    my($int_part) = int($number);\n    return $number - $int_part;\n\
    }", "    $number =~ s/^\\d+\\.//;\n    return $number;\n}", "    my($integer_part,\
    \ $decimal_part) = split /\\./, $number;\n    return $decimal_part;\n}", "   \
    \ return $number - int($number);\n}", "    my($part) = POSIX::floor($number);\n\
    \    return $number - $part;\n}", "    return $number - int($number);\n}", " \
    \   my $integer_part = int($number);\n    return $number - $integer_part;\n}",
  "    return 0 if $number == int($number);\n    return $number - int($number);\n}",
  "    my($integral, $decimal) = split(/\\./, $number);\n    $decimal = sprintf(\"\
    0.%s\", $decimal);\n    return($decimal);\n}", "    $number = int($number);\n\
    \    $number = $number / $number;\n    return $number;\n}", "    my($int, $decimal)\
    \ = split /\\./, $number;\n    return $decimal;\n}", "    return($number - floor($number));\n\
    }", "    return $number - int($number);\n}", "    return $number - int($number);\n\
    }", "    if ($number =~ /^\\s*([0-9]*)(\\.)?([0-9]*)\\s*$/) {\n        my $int\
    \ = $1 || 0;\n        my $dec = $3 || 0;\n        if ($dec) {\n            return\
    \ \"0.$dec\";\n        } else {\n            return 0;\n        }\n    } else\
    \ {\n        return $number;\n    }\n}", "    $number =~ s/^\\d+\\.//g;\n    return\
    \ $number;\n}", "    return $number - floor($number);\n}", "    $number =~ s/\\\
    d+\\.//;\n    return $number;\n}", "    return $number - int($number);\n}", " \
    \   $number -= int($number);\n    return $number;\n}", "    my $ipart = int($number);\n\
    \    return $number - $ipart;\n}", "    if ($number > 0) {\n        return $number\
    \ - int($number);\n    } else {\n        return $number - int($number) + 1;\n\
    \    }\n}", "    return $number - int($number);\n}", "    return $number - int($number);\n\
    }", "    $number -= int($number);\n    return $number;\n}", "    return $number\
    \ - int($number);\n}", "    return $number - int($number);\n}", "    my $int =\
    \ int($number);\n    return $number - $int;\n}", "    return $number - int($number);\n\
    }", "    $number -= int($number);\n    return $number;\n}", "    return $number\
    \ - trunc($number);\n}", "    return $number - int($number);\n}", "    return\
    \ $number - int($number);\n}", "    return $number - int($number);\n}", "    my($integer,\
    \ $decimal) = split /\\./, $number;\n    return 0.0 if $integer == $number;\n\
    \    return '0.' . $decimal;\n}", "    return $number - int($number);\n}", " \
    \   return abs($number - abs(int($number)));\n}", "    # Makes integer part by\
    \ doing a floor, then substracts integer part from number.\n    return $number\
    \ - int($number);\n}", "    return $number - int($number);\n}", "    return $number\
    \ - int($number);\n}", "    # TODO\n}", "    return $number - int($number);\n}",
  "    return $number - int($number);\n}", "    my $int = int($number);\n    return\
    \ $number - $int;\n}", "    return $number - floor($number);\n}", "    return\
    \ ($number - int($number));\n}", "    # TODO not really sure about the algorithm\n\
    \    my $int_part = floor($number);\n    return $number - $int_part;\n}", "  \
    \  return $number - int($number);\n}", "    return 0 unless $number > 0;\n   \
    \ return $number - int($number);\n}", "    my($int, $frac) = split /\\./, $number;\n\
    \    my($digits) = length($frac);\n    my($decimal) = \"0.\" . $frac;\n    return\
    \ $decimal;\n}", "    return $number - int($number);\n}", "    $number =~ /^(.*\\\
    .)?(.*)$/;\n    return $2;\n}", "    return $number - int($number);\n}", "   \
    \ my $pow =  10**9;\n    return 0.0 + (  $number - int($number)  )  * $pow / $pow;\n\
    }", "    return $number - int($number);\n}", "    return $number - int($number);\n\
    }", "    my($i) = int($number);\n    return($number - $i);\n}", "    my $ipart\
    \ = int($number);\n    my $dpart = $number - $ipart;\n    return $dpart;\n}",
  "    if($number < 0) {\n        return 0;\n    }\n    my $integral = int($number);\n\
    \    my $decimal = $number - $integral;\n    return $decimal;\n}", "    return\
    \ $number - int($number);\n}", "    return $number - floor($number);\n}", "  \
    \  return $number - trunc($number);\n}", "    my $int_part = int($number);\n \
    \   my $dec_part = $number - $int_part;\n    return $dec_part;\n}", "    return\
    \ 0 if($number == 0);\n    return abs($number - abs(int($number)));\n}", "   \
    \ return $number - POSIX::floor($number);\n}", "    my($decimal_part) = $number\
    \ - int($number);\n    return $decimal_part;\n}", "    my $int_part = int($number);\n\
    \    my $dec_part = $number - $int_part;\n    return $dec_part;\n}", "    return\
    \ $number - int($number);\n}", "    my($truncated_number) = trunc($number);\n\
    \    return($number - $truncated_number);\n}", "    my $integer_part = int($number);\n\
    \    return $number - $integer_part;\n}", "    return $number - int($number);\n\
    }", "    return $number - int($number);\n}", "    if($number < 0) {\n        return\
    \ 0;\n    }\n    my $int_part = int($number);\n    return $number - $int_part;\n\
    }", "    my($int, $dec) = $number =~ /^(\\d+)\\.(.*)$/;\n    return $dec;\n}",
  "    return $number - int($number);\n}", "    my($whole, $decimal) = split /\\./,\
    \ $number;\n    $decimal = 0 unless $decimal;\n    return \"0.$decimal\";\n}",
  "    return $number - int($number);\n}", "    my($truncated_int) = int($number);\n\
    \    return($number - $truncated_int);\n}", "    $number =~ /^(.+)\\.(\\d+)$/;\n\
    \    my $decimal = \"0.$2\";\n    return $decimal;\n}", "    my($integral_part,\
    \ $decimal_part) = split(/\\./, sprintf(\"%.2f\", $number));\n    return 0 if\
    \ $number == $integral_part;\n    return \"0.\" . $decimal_part;\n}", "    return\
    \ $number - int($number);\n}", "    return $number - int($number);\n}", "    return\
    \ $number - int($number);\n}", "    #my($decimals) = $number - int($number);\n\
    \    #$decimals = ($decimals > 0) ? $decimals : 0;\n    return $number - int($number);\n\
    }", "    return $number - int($number);\n}", "    my($integer, $decimal) = split\
    \ /\\./, $number;\n    return $decimal || 0;\n}", "    my $int_part = int($number);\n\
    \    return $number - $int_part;\n}", "    my $int = int($number);\n    my $dec\
    \ = $number - $int;\n    return $dec;\n}", "    return $number - int($number);\n\
    }", "    my($integer, $decimal) = split(/\\./, $number);\n    return \"0.$decimal\"\
    ;\n}", "    my($integer, $decimal) = split /\\./, $number;\n    if(defined $decimal)\
    \ {\n        return \"0.$decimal\";\n    } else {\n        return \"0.0\";\n \
    \   }\n}", "    $number =~ /^[-+]?\\d+\\.?(\\d+)?$/;\n    return $1 / (10 ** length($1));\n\
    }", "    return $number - int($number);\n}", "    return($number - int($number));\n\
    }", "    return abs($number) - floor(abs($number));\n}", "    return $number -\
    \ int($number);\n}", "    my($integer_part, $decimal_part) = split(/\\./, $number);\n\
    \    return $decimal_part;\n}", "    return($number - int($number));\n}", "  \
    \  return $number - int($number);\n}", "    return $number - int($number);\n}",
  "    my($integral, $decimal) = split(/\\./, $number);\n    return '0.' . $decimal;\n\
    }", "    $number = (split('\\.', $number))[1];\n    return $number;\n}", "   \
    \ my($result) = $number - int($number);\n    return $result;\n}", "    return\
    \ $number - int($number);\n}", "    return $number - int($number);\n}", "    $number\
    \ =~ /^(\\d+)\\.(\\d+)$/;\n    my $decimals = \"0.$2\";\n    return $decimals;\n\
    }", "    if ($number < 0) {\n        return 1 + truncate_number(-$number);\n \
    \   }\n    return $number - floor($number);\n}", "    $number = int($number);\n\
    \    return $number;\n}", "    return $number - int($number);\n}", "    my $decimal_part\
    \ = $number - floor($number);\n    return $decimal_part;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
