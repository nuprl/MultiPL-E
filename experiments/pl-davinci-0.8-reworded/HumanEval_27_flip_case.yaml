name: HumanEval_27_flip_case
language: pl
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n    my($string)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    my($i);\n\
    \    my($new_string) = \"\";\n    for($i = 0; $i < length($string); $i++) {\n\
    \        my($char) = substr($string, $i, 1);\n        if($char =~ /[a-z]/) {\n\
    \            $new_string .= uc($char);\n        } elsif($char =~ /[A-Z]/) {\n\
    \            $new_string .= lc($char);\n        } else {\n            $new_string\
    \ .= $char;\n        }\n    }\n    return $new_string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    my @chars = split(//, $string);\n    my @flipped;\n\
    \    for my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n            push\
    \ @flipped, uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n            push\
    \ @flipped, lc($char);\n        } else {\n            push @flipped, $char;\n\
    \        }\n    }\n    return join('', @flipped);\n}", "    return join(\"\",\
    \ map { m/[a-z]/ ? uc : lc } split(//, $string));\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }", "    my $result = \"\";\n    foreach (split //, $string) {\n        $result\
    \ .= tr/a-zA-Z/A-Za-z/;\n    }\n    return $result;\n}", '    # TODO', "    return\
    \ $string if $string eq \"\";\n    if ($string =~ /^[a-z]/) {\n        $string\
    \ =~ s/^([a-z])/\\U$1/;\n    } elsif ($string =~ /^[A-Z]/) {\n        $string\
    \ =~ s/^([A-Z])/\\L$1/;\n    }\n    return $string;\n}", "    my $flipped_string\
    \ = '';\n    foreach my $char (split //, $string) {\n        $flipped_string .=\
    \ lc $char if $char =~ /[[:upper:]]/;\n        $flipped_string .= uc $char if\
    \ $char =~ /[[:lower:]]/;\n    }\n    return $flipped_string;\n}", "    $string\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    my $flipped = '';\n    for my $ch (split //, $string)\
    \ {\n        if ($ch =~ /[a-z]/) {\n            $flipped .= uc $ch;\n        }\n\
    \        elsif ($ch =~ /[A-Z]/) {\n            $flipped .= lc $ch;\n        }\n\
    \        else {\n            $flipped .= $ch;\n        }\n    }\n    return $flipped;\n\
    }", "    my @chars = split //, $string;\n    foreach my $char (@chars) {\n   \
    \     if ($char =~ /[a-z]/) {\n            $char = uc $char;\n        } elsif\
    \ ($char =~ /[A-Z]/) {\n            $char = lc $char;\n        }\n    }\n    return\
    \ join '', @chars;\n}", "    return '' unless defined $string;\n    $string =~\
    \ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    my $output = \"\";\n    foreach\
    \ my $c (split //, $string) {\n        if ($c =~ /[a-z]/) {\n            $output\
    \ .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $output .= lc($c);\n\
    \        } else {\n            $output .= $c;\n        }\n    }\n    return $output;\n\
    }", "    my $flipped = join '', map {\n        $_ =~ /[[:lower:]]/ ? uc($_) :\
    \ lc($_)\n    } split '', $string;\n    return $flipped;\n}", "    $string =~\
    \ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    my($output);\n    my($char);\n\
    \    my($i);"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
