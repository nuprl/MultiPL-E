name: HumanEval_27_flip_case
language: pl
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n    my($string)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return unless defined $string;\n    my $output = '';\n    foreach\
    \ my $char (split //, $string) {\n        if ($char =~ /[a-z]/) {\n          \
    \  $output .= uc $char;\n        } elsif ($char =~ /[A-Z]/) {\n            $output\
    \ .= lc $char;\n        } else {\n            $output .= $char;\n        }\n \
    \   }\n    return $output;\n}", "    my $result = '';\n    for my $char (split\
    \ //, $string) {\n        if($char =~ /[a-z]/) {\n            $result .= uc $char;\n\
    \        } elsif($char =~ /[A-Z]/) {\n            $result .= lc $char;\n     \
    \   } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }", "    my($lc, $uc);\n    $lc = \"[\" . lc($string) . \"]\";\n    $uc = \"[\"\
    \ . uc($string) . \"]\";\n    $string =~ tr/$lc/$uc/;\n    return $string;\n}",
  "    my $flipped = \"\";\n    foreach my $char (split(//, $string)) {\n        if\
    \ (lc($char) eq $char) {\n            $flipped .= uc($char);\n        } else {\n\
    \            $flipped .= lc($char);\n        }\n    }\n    return $flipped;\n}",
  "    my $flipped = \"\";\n    foreach my $char (split(//, $string)) {\n        if\
    \ ($char =~ /[[:lower:]]/) {\n            $flipped .= uc($char);\n        } else\
    \ {\n            $flipped .= lc($char);\n        }\n    }\n    return $flipped;\n\
    }", "    if(defined($string)) {\n        return join('', map { uc($_) } split(//,\
    \ lc($string)));\n    }\n    return undef;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    my($flipped_string) = \"\";\n    my($i);\n    for($i\
    \ = 0; $i < length($string); $i++) {\n        my($character) = substr($string,\
    \ $i, 1);\n        if(is_upper($character)) {\n            $flipped_string .=\
    \ lc($character);\n        }\n        elsif(is_lower($character)) {\n        \
    \    $flipped_string .= uc($character);\n        }\n        else {\n         \
    \   $flipped_string .= $character;\n        }\n    }\n    return $flipped_string;\n\
    }", "    #$string =~ s/([a-z])([A-Z])/$2$1/g;\n    #$string =~ s/([a-z])([A-Z])/$2$1/g;\n\
    \    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    my($flipped)\
    \ = '';\n    my($character);\n    my($character_code);\n    my($test_case);\n\
    \    my($test_code);\n    my($test_char);\n    foreach $character (split(//, $string))\
    \ {\n        $character_code = ord($character);\n        if($character_code >=\
    \ 97 && $character_code <= 122) {\n            $test_case = 'a';\n           \
    \ $test_code = 97;\n        }\n        elsif($character_code >= 65 && $character_code\
    \ <= 90) {\n            $test_case = 'A';\n            $test_code = 65;\n    \
    \    }\n        else {\n            $flipped .= $character;\n            next;\n\
    \        }\n        $test_char = $test_case . ($character_code - $test_code);\n\
    \        $flipped .= uc($test_char);\n    }\n    return $flipped;\n}", "    $string\
    \ =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    my @flipped_chars = ();\n    for my $char (split\
    \ //, $string) {\n        if ($char =~ /[a-z]/) {\n            push @flipped_chars,\
    \ uc $char;\n        }\n        elsif ($char =~ /[A-Z]/) {\n            push @flipped_chars,\
    \ lc $char;\n        }\n        else {\n            push @flipped_chars, $char;\n\
    \        }\n    }\n    return join(\"\", @flipped_chars);\n}", "    return $string;\n\
    }", "    return if (!defined($string));\n    return $string unless ($string =~\
    \ m/[[:alpha:]]/);\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}",
  "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    # OLD, PRE-PERL-5.10:\
    \ my @chars = split //, $string;\n    my @chars = split //, $string;\n    for\
    \ my $char (@chars) {\n        if ($char =~ m/[a-z]/) {\n            $char = uc\
    \ $char;\n        } elsif ($char =~ m/[A-Z]/) {\n            $char = lc $char;\n\
    \        }\n    }\n    my $newstring = join('', @chars);\n    return $newstring;\n\
    }", "    return '' unless defined $string;\n    return $string if $string eq '';\n\
    \    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    # your code here\n    my @characters = split(//,\
    \ $string);\n    foreach my $char (@characters) {\n        if ($char eq lc($char))\
    \ {\n            $char = uc($char);\n        } else {\n            $char = lc($char);\n\
    \        }\n    }\n    return join('', @characters);\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    return(join '', map { $_ =~ /[a-z]/ ? uc($_) :\
    \ lc($_) } split //, $string);\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return\
    \ $string;\n}", "    my($answer);\n    $answer = uc($string);\n    $answer =~\
    \ tr/A-Z/a-z/;\n    return $answer;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }", "    my($char);\n    my($flipped) = \"\";\n    my($ord);\n    foreach $char\
    \ (split(\"\", $string)) {\n        $ord = ord($char);\n        if($ord >= 65\
    \ && $ord <= 90) {\n            $flipped .= chr($ord + 32);\n        } elsif($ord\
    \ >= 97 && $ord <= 122) {\n            $flipped .= chr($ord - 32);\n        }\
    \ else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    return(join(\"\
    \", map(\n        $_ =~ /[a-z]/ ? uc($_) : lc($_), split(\"\", $string)\n    )));\n\
    }", "    my($flipped_string) = \"\";\n    foreach(split(\"\", $string)) {\n  \
    \      if(/[a-z]/) {\n            $flipped_string .= uc($_);\n        } elsif(/[A-Z]/)\
    \ {\n            $flipped_string .= lc($_);\n        } else {\n            $flipped_string\
    \ .= $_;\n        }\n    }\n    return $flipped_string;\n}", "    my @chars =\
    \ split //, $string;\n    my @new_chars;\n    for my $char (@chars) {\n      \
    \  if ($char =~ /[a-z]/) {\n            push @new_chars, uc $char;\n        }\n\
    \        elsif ($char =~ /[A-Z]/) {\n            push @new_chars, lc $char;\n\
    \        }\n        else {\n            push @new_chars, $char;\n        }\n \
    \   }\n    my $new_string = join '', @new_chars;\n    return $new_string;\n}",
  "    my $new_string = '';\n    foreach my $chr (split(//, $string)) {\n        if\
    \ ($chr =~ /[a-z]/) {\n            $new_string .= uc($chr);\n        } elsif ($chr\
    \ =~ /[A-Z]/) {\n            $new_string .= lc($chr);\n        } else {\n    \
    \        $new_string .= $chr;\n        }\n    }\n    return $new_string;\n}",
  "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    # Use swapcase\
    \ to flip case\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", " \
    \   my $result = '';\n    for my $char (split //, $string) {\n        if ($char\
    \ =~ /[a-z]/) {\n            $result .= uc $char;\n        } elsif ($char =~ /[A-Z]/)\
    \ {\n            $result .= lc $char;\n        } else {\n            $result .=\
    \ $char;\n        }\n    }\n    return $result;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    my @chars = map { $_ =~ /[a-z]/ ? uc $_ : lc $_\
    \ } split //, $string;\n    return join '', @chars;\n}", "    return join '',\
    \ map {\n        if (/[[:lower:]]/) {\n            tr/a-z/A-Z/;\n        }\n \
    \       else {\n            tr/A-Z/a-z/;\n        }\n    } split //, $string;\n\
    }", "    my($c);\n    my($flipped_case) = \"\";\n    my($l);\n    foreach $c (split(//,\
    \ $string)) {\n        $l = lc($c);\n        if ($l eq $c) {\n            $flipped_case\
    \ .= uc($c);\n        } else {\n            $flipped_case .= $l;\n        }\n\
    \    }\n    return $flipped_case;\n}", "    my $output = \"\";\n    my @chars\
    \ = split(\"\", $string);\n    for my $char (@chars) {\n        if ($char =~ /[a-z]/)\
    \ {\n            $output .= uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n\
    \            $output .= lc($char);\n        } else {\n            $output .= $char;\n\
    \        }\n    }\n    return $output;\n}", "    my($output) = \"\";\n    for\
    \ my $i (0 .. length($string) - 1) {\n        my($char) = substr($string, $i,\
    \ 1);\n        if ($char =~ /[a-z]/) {\n            $output .= uc($char);\n  \
    \      } elsif ($char =~ /[A-Z]/) {\n            $output .= lc($char);\n     \
    \   } else {\n            $output .= $char;\n        }\n    }\n    return $output;\n\
    }", "    my $ret = \"\";\n    foreach my $letter (split(//, $string)) {\n    \
    \    $ret .= (ord($letter) >= ord('a') && ord($letter) <= ord('z')) ? uc($letter)\
    \ : lc($letter);\n    }\n    return $ret;\n}", "    my $result = '';\n    for\
    \ (my $i = 0; $i < length($string); $i++) {\n        my $c = substr($string, $i,\
    \ 1);\n        $result .= lc($c) if ($c =~ /[A-Z]/);\n        $result .= uc($c)\
    \ if ($c =~ /[a-z]/);\n    }\n    return $result;\n}", "    return undef unless\
    \ defined $string;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}",
  "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    my($reverse_string)\
    \ = \"\";\n    foreach my $char (split(//, $string)) {\n        if (ord($char)\
    \ > 64 && ord($char) < 91) {\n            $reverse_string .= chr(ord($char) +\
    \ 32);\n        } elsif (ord($char) > 96 && ord($char) < 123) {\n            $reverse_string\
    \ .= chr(ord($char) - 32);\n        } else {\n            $reverse_string .= $char;\n\
    \        }\n    }\n    return $reverse_string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    my($new_string);\n\
    \    my($char);\n    $new_string = \"\";\n    foreach $char (split(//, $string))\
    \ {\n        if ($char =~ /[a-z]/) {\n            $new_string .= uc($char);\n\
    \        } else {\n            $new_string .= lc($char);\n        }\n    }\n \
    \   return $new_string;\n}", "    my $result = \"\";\n    foreach my $c (split\
    \ //, $string) {\n        $result .= uc($c) if $c =~ /[[:lower:]]/;\n        $result\
    \ .= lc($c) if $c =~ /[[:upper:]]/;\n    }\n    return $result;\n}", "    my $lowercase\
    \ = 'a-z';\n    my $uppercase = 'A-Z';\n    my $flipped   = \"\";\n    foreach\
    \ my $char (split //, $string) {\n        if ($char =~ /[$lowercase]/) {\n   \
    \         $flipped .= uc($char);\n        }\n        elsif ($char =~ /[$uppercase]/)\
    \ {\n            $flipped .= lc($char);\n        }\n        else {\n         \
    \   $flipped .= $char;\n        }\n    }\n    return $flipped;\n}", "    my $result\
    \ = '';\n    for my $char (split //, $string) {\n        $result .= ($char =~\
    \ /[a-z]/) ? uc $char : lc $char;\n    }\n    return $result;\n}", "    my $flipped_string\
    \ = \"\";\n    for (my $i = 0; $i < length($string); $i++) {\n        my $char\
    \ = substr($string, $i, 1);\n        if ($char eq uc($char)) {\n            $flipped_string\
    \ .= lc($char);\n        } else {\n            $flipped_string .= uc($char);\n\
    \        }\n    }\n    return $flipped_string;\n}", "    my $flipped_string =\
    \ \"\";\n    for (my $i = 0; $i < length($string); $i++) {\n        my $letter\
    \ = substr($string, $i, 1);\n        if (is_upper($letter)) {\n            $flipped_string\
    \ .= lc($letter);\n        } elsif (is_lower($letter)) {\n            $flipped_string\
    \ .= uc($letter);\n        } else {\n            $flipped_string .= $letter;\n\
    \        }\n    }\n    return $flipped_string;\n}", "    return undef unless defined\
    \ $string;\n    return join '', map { $_ =~ /[[:upper:]]/ ? lc $_ : uc $_ } split\
    \ //, $string;\n}", "    my($ret, $c);\n    foreach $c (split(//, $string)) {\n\
    \        if (isupper($c)) {\n            $ret .= lc($c);\n        } else {\n \
    \           $ret .= uc($c);\n        }\n    }\n    return $ret;\n}", "    return\
    \ join('', map {\n        if ($_ =~ /[a-z]/) {\n            uc($_);\n        }\
    \ elsif ($_ =~ /[A-Z]/) {\n            lc($_);\n        } else {\n           \
    \ $_;\n        }\n    } split(//, $string));\n}", "    my @chars = split //, $string;\n\
    \    my @flipped;\n    foreach my $char (@chars) {\n        my $ascii = ord($char);\n\
    \        if($ascii >= 65 && $ascii <= 90) {\n            push @flipped, chr($ascii\
    \ + 32);\n        } elsif($ascii >= 97 && $ascii <= 122) {\n            push @flipped,\
    \ chr($ascii - 32);\n        } else {\n            push @flipped, $char;\n   \
    \     }\n    }\n    return join \"\", @flipped;\n}", "    return unless defined\
    \ $string;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    return undef unless defined\
    \ $string;\n    my @result = ();\n    for my $char (split //, $string) {\n   \
    \     my $new_char = lc $char;\n        if ($new_char eq $char) {\n          \
    \  $new_char = uc $char;\n        }\n        push @result, $new_char;\n    }\n\
    \    return join '', @result;\n}", "    my($retval) = '';\n    for (split(//,\
    \ $string)) {\n        if (/[[:lower:]]/) {\n            $retval .= uc($_);\n\
    \        } elsif (/[[:upper:]]/) {\n            $retval .= lc($_);\n        }\
    \ else {\n            $retval .= $_;\n        }\n    }\n    return $retval;\n}",
  "    return undef unless defined $string;\n    my $new_string = '';\n    foreach\
    \ my $char (split //, $string) {\n        if ($char =~ /[[:upper:]]/) {\n    \
    \        $new_string .= lc $char;\n        } elsif ($char =~ /[[:lower:]]/) {\n\
    \            $new_string .= uc $char;\n        } else {\n            $new_string\
    \ .= $char;\n        }\n    }\n    return $new_string;\n}", "    my $result =\
    \ \"\";\n    for my $character (split //, $string) {\n        if ($character =~\
    \ /[a-z]/) {\n            $result .= uc($character);\n        }\n        elsif\
    \ ($character =~ /[A-Z]/) {\n            $result .= lc($character);\n        }\n\
    \        else {\n            $result .= $character;\n        }\n    }\n    return\
    \ $result;\n}", "    my($flipped) = \"\";\n    foreach my $char (split('', $string))\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n   \
    \     } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n     \
    \   } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }", "    return join(\"\", map {\n        if ($_ =~ /[a-z]/) {\n            tr/a-z/A-Z/;\n\
    \        }\n        elsif ($_ =~ /[A-Z]/) {\n            tr/A-Z/a-z/;\n      \
    \  }\n        else {\n            $_;\n        }\n    } split(\"\", $string));\n\
    }", "    my $flipped = join '', map {tr/a-zA-Z/A-Za-z/} split //, $string;\n \
    \   return $flipped;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }", "    my $flipped = '';\n    for my $char (split //, $string) {\n        $flipped\
    \ .= $char =~ /[a-z]/ ? uc $char : lc $char;\n    }\n    return $flipped;\n}",
  "    # Flip the case of the string.\n    # Set our comparison string.\n    my $comparison\
    \ = 'a';\n    # Iterate through the characters in the string.\n    for (my $i\
    \ = 0; $i < length($string); $i++) {\n        # If the character is the same as\
    \ our comparison string (i.e. lowercase).\n        if (substr($string, $i, 1)\
    \ eq $comparison) {\n            # We convert it to uppercase and set it in the\
    \ string.\n            substr($string, $i, 1) = uc(substr($string, $i, 1));\n\
    \        }\n        # Else if it's the opposite (i.e. uppercase).\n        elsif\
    \ (substr($string, $i, 1) eq uc($comparison)) {\n            # We convert it to\
    \ lowercase and set it in the string.\n            substr($string, $i, 1) = lc(substr($string,\
    \ $i, 1));\n        }\n    }\n    # Return the new string.\n    return $string;\n\
    }", "    my @chars = split //, $string;\n    my @new_chars;\n    foreach my $c\
    \ (@chars) {\n        if (is_lower($c)) {\n            push @new_chars, uc $c;\n\
    \        }\n        elsif (is_upper($c)) {\n            push @new_chars, lc $c;\n\
    \        }\n        else {\n            push @new_chars, $c;\n        }\n    }\n\
    \    return join('', @new_chars);\n}", "    my @chars = split(//, $string);\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /^[a-z]$/) {\n        \
    \    $char = uc($char);\n        } elsif ($char =~ /^[A-Z]$/) {\n            $char\
    \ = lc($char);\n        }\n    }\n    return join('', @chars);\n}", "    $string\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    $string\
    \ =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    my @chars = split(//, $string);\n\
    \    my @flipped;\n    foreach my $char (@chars) {\n        push(@flipped, $char\
    \ =~ /[a-z]/ ? uc($char) : lc($char));\n    }\n    return join('', @flipped);\n\
    }", "    my @result = ();\n    for my $s (split(\"\", $string)) {\n        my\
    \ $l = lc($s);\n        if ($l eq $s) {\n            push @result, uc($s);\n \
    \       } else {\n            push @result, $l;\n        }\n    }\n    return\
    \ join(\"\", @result);\n}", "    my($temp);\n    my($char);\n    my($length) =\
    \ length($string);\n    my($i);\n    for($i=0; $i<$length; $i++) {\n        $char\
    \ = substr($string, $i, 1);\n        if(($char>='a') && ($char<='z')) {\n    \
    \        $temp .= uc($char);\n        } elsif(($char>='A') && ($char<='Z')) {\n\
    \            $temp .= lc($char);\n        } else {\n            $temp .= $char;\n\
    \        }\n    }\n    return $temp;\n}", "    my $result = \"\";\n    my @chars\
    \ = split(//, $string);\n    foreach my $char (@chars) {\n        if ($char =~\
    \ /[a-z]/) {\n            $result .= uc($char);\n        } elsif ($char =~ /[A-Z]/)\
    \ {\n            $result .= lc($char);\n        } else {\n            $result\
    \ .= $char;\n        }\n    }\n    return $result;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    my @chars = split(//, $string);\n    foreach my\
    \ $c (@chars) {\n        if ($c =~ /[a-z]/) {\n            $c = uc($c);\n    \
    \    } elsif ($c =~ /[A-Z]/) {\n            $c = lc($c);\n        }\n    }\n \
    \   my $flipped = join(\"\", @chars);\n    return $flipped;\n}", "    $string\
    \ =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    return map {$_ =~ /[a-z]/\
    \ ? uc($_) : lc($_)} split(//, $string);\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    my @chars = split //, $string;\n    foreach (@chars)\
    \ {\n        if (/[a-z]/) {\n            $_ =~ tr/a-z/A-Z/;\n        }\n     \
    \   else {\n            $_ =~ tr/A-Z/a-z/;\n        }\n    }\n    return join\
    \ \"\", @chars;\n}", "    my($new_string) = \"\";\n    for (my($i) = 0; $i < length($string);\
    \ $i++) {\n        my($char) = substr($string, $i, 1);\n        if (is_upper($char))\
    \ {\n            $new_string .= lc($char);\n        } elsif (is_lower($char))\
    \ {\n            $new_string .= uc($char);\n        } else {\n            $new_string\
    \ .= $char;\n        }\n    }\n    return $new_string;\n}", "    my @results =\
    \ ();\n    @results = map { $_ =~ /[a-z]/ ? uc $_ : lc $_ } split //, $string;\n\
    \    return join(\"\", @results);\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n  \
    \  return $string;\n}", "    return $string if !defined $string;\n    $string\
    \ =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    # <---- SOLUTION --->\n\
    \    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }", "    my $re = qr/[a-z]/;\n    my $re2 = qr/[A-Z]/;\n    $string =~ s/$re/\\\
    U$&/g;\n    $string =~ s/$re2/\\L$&/g;\n    return $string;\n}", "    $string\
    \ =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }", "    return join(\"\", map {\n        if(is_upper($_)) { lower($_) }\n   \
    \     elsif(is_lower($_)) { upper($_) }\n        else { $_ }\n    } split(//,\
    \ $string));\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}",
  "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    return scalar reverse $string;\n}", "    my($retval);\n\
    \    $retval = $string;\n    $retval =~ tr/A-Za-z/a-zA-Z/;\n    return $retval;\n\
    }", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    $string\
    \ =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    return(join('', map { $_ =~ tr/A-Za-z/a-zA-Z/;\
    \ $_ } split(//, $string)));\n}", "    # \u5229\u7528 tr/// \u66FF\u6362\n   \
    \ $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    my $flipped_string = \"\";\n    foreach my $character\
    \ (split(//, $string)) {\n        if($character =~ /[a-z]/) {\n            $flipped_string\
    \ .= uc($character);\n        }\n        elsif($character =~ /[A-Z]/) {\n    \
    \        $flipped_string .= lc($character);\n        }\n        else {\n     \
    \       $flipped_string .= $character;\n        }\n    }\n    return $flipped_string;\n\
    }", "    my $output = '';\n    my @chars = split(//, $string);\n    foreach my\
    \ $char (@chars) {\n        if ($char =~ /[a-z]/) {\n            $output .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $output .= lc($char);\n   \
    \     } else {\n            $output .= $char;\n        }\n    }\n    return $output;\n\
    }", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    my $flipped\
    \ = '';\n    for (my $i = 0; $i < length($string); $i++) {\n        my $char =\
    \ substr($string, $i, 1);\n        if ($char =~ /[a-z]/) {\n            $flipped\
    \ .= uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n            $flipped .=\
    \ lc($char);\n        } else {\n            $flipped .= $char;\n        }\n  \
    \  }\n    return $flipped;\n}", "    my $i = 0;\n    my $flipped = \"\";\n   \
    \ for (; $i < length($string); $i++) {\n        my $char = substr($string, $i,\
    \ 1);\n        if ($char eq uc($char)) {\n            $flipped .= lc($char);\n\
    \        } else {\n            $flipped .= uc($char);\n        }\n    }\n    return\
    \ $flipped;\n}", "    if ($string =~ m/[A-Z]/) {\n        $string =~ tr/A-Z/a-z/;\n\
    \    } else {\n        $string =~ tr/a-z/A-Z/;\n    }\n    return $string;\n}",
  "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }", "    my @char = split(//, $string);\n    foreach (@char) {\n        if (/[a-z]/)\
    \ {\n            $_ = uc($_);\n        } elsif (/[A-Z]/) {\n            $_ = lc($_);\n\
    \        }\n    }\n    return join(\"\", @char);\n}", "    return undef unless\
    \ defined $string;\n    my @chars = split(//, $string);\n    return join(\"\"\
    , map {uc($_) eq $_ ? lc($_) : uc($_)} @chars);\n}", "    my $flipped_string =\
    \ '';\n    my $char;\n    foreach $char (split(//, $string)) {\n        if ($char\
    \ =~ /[a-z]/) {\n            $flipped_string .= uc($char);\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            $flipped_string .= lc($char);\n        } else {\n\
    \            $flipped_string .= $char;\n        }\n    }\n    return $flipped_string;\n\
    }", "    return join(\"\", map {\n        if ($_ =~ /[a-z]/) {\n            return\
    \ uc($_);\n        }\n        if ($_ =~ /[A-Z]/) {\n            return lc($_);\n\
    \        }\n        return $_;\n    } split(\"\", $string));\n}", "    $string\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    # Flip each character in the string.\n    return\
    \ join('', map {\n        # If it's a letter...\n        if(m/[a-zA-Z]/) {\n \
    \           # If it's lowercase...\n            if(m/[a-z]/) {\n             \
    \   # Make it uppercase.\n                return uc $_;\n            }\n     \
    \       # Otherwise, if it's uppercase...\n            elsif(m/[A-Z]/) {\n   \
    \             # Make it lowercase.\n                return lc $_;\n          \
    \  }\n        }\n        # Otherwise, leave it alone.\n        else {\n      \
    \      return $_;\n        }\n    } split(//, $string));\n}", "    my($flipped)\
    \ = '';\n    foreach my $c (split(//, $string)) {\n        if($c =~ /[a-z]/) {\n\
    \            $flipped .= uc($c);\n        } elsif($c =~ /[A-Z]/) {\n         \
    \   $flipped .= lc($c);\n        } else {\n            $flipped .= $c;\n     \
    \   }\n    }\n    return $flipped;\n}", "    my $flipped = join('', map {\n  \
    \      if (/[a-z]/) {\n            uc($_);\n        } else {\n            lc($_);\n\
    \        }\n    } split('', $string));\n    return $flipped;\n}", "    chomp $string;\n\
    \    my $flipped = \"\";\n    for (my $i = 0; $i < length($string); $i++) {\n\
    \        if ($string =~ /[a-z]/) {\n            $flipped .= uc(substr($string,\
    \ $i, 1));\n        }\n        elsif ($string =~ /[A-Z]/) {\n            $flipped\
    \ .= lc(substr($string, $i, 1));\n        }\n        else {\n            $flipped\
    \ .= substr($string, $i, 1);\n        }\n    }\n    return $flipped;\n}", "  \
    \  $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    my @chars = map\
    \ { \n        if (is_lower($_)) { \n            uc($_);\n        } else {\n  \
    \          lc($_);\n        }\n    } split //, $string;\n    return join('', @chars);\n\
    }", "    my @chars = split //, $string;\n    my @result;\n    for (@chars) {\n\
    \        if ($_ =~ /^[a-z]$/) {\n            push @result, uc($_);\n        }\
    \ elsif ($_ =~ /^[A-Z]$/) {\n            push @result, lc($_);\n        } else\
    \ {\n            push @result, $_;\n        }\n    }\n    return join '', @result;\n\
    }", "    my @array = split '', $string;\n    foreach my $char (@array) {\n   \
    \     if ($char =~ /[a-z]/) {\n            $char = uc($char);\n        } elsif\
    \ ($char =~ /[A-Z]/) {\n            $char = lc($char);\n        }\n    }\n   \
    \ return join('', @array);\n}", "    return unless defined $string;\n    return\
    \ $string unless $string =~ /\\w/;\n    my $new_string = \"\";\n    for my $c\
    \ (split //, $string) {\n        if ($c =~ /[a-z]/) {\n            $new_string\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $new_string .= lc\
    \ $c;\n        } else {\n            $new_string .= $c;\n        }\n    }\n  \
    \  return $new_string;\n}", "    my($char);\n    my($ret_string) = \"\";\n   \
    \ my($string_length) = length($string);\n    for (my $i = 0; $i < $string_length;\
    \ $i++) {\n        $char = substr($string, $i, 1);\n        if ($char =~ /[a-z]/)\
    \ {\n            $ret_string .= uc($char);\n        }\n        elsif ($char =~\
    \ /[A-Z]/) {\n            $ret_string .= lc($char);\n        }\n        else {\n\
    \            $ret_string .= $char;\n        }\n    }\n    return $ret_string;\n\
    }", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }", "    for ($string) {\n        s/([a-z])/\\U$1/g;\n        s/([A-Z])/\\L$1/g;\n\
    \    }\n    return $string;\n}", "    my $flipped = \"\";\n    for my $char (split\
    \ //, $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc\
    \ $char;\n        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}",
  "    my $ans = '';\n    for my $char (split //, $string) {\n        if ($char =~\
    \ /[a-z]/) {\n            $ans .= uc $char;\n        }\n        elsif ($char =~\
    \ /[A-Z]/) {\n            $ans .= lc $char;\n        }\n        else {\n     \
    \       $ans .= $char;\n        }\n    }\n    return $ans;\n}", "    my $flipped\
    \ = '';\n    for my $c (split //, $string) {\n        if ($c =~ /[a-z]/) {\n \
    \           $flipped .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n          \
    \  $flipped .= lc $c;\n        } else {\n            $flipped .= $c;\n       \
    \ }\n    }\n    return $flipped;\n}", "    return lc($string) ^ uc($string) ^\
    \ $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", " \
    \   my($index, $length);\n    my($case_array, $case_hash);\n    # \n    $case_array\
    \ = [ 'a' .. 'z', 'A' .. 'Z' ];\n    $case_hash = {};\n    foreach $index (0 ..\
    \ 51) {\n        $case_hash->{$case_array->[$index]} = $case_array->[51 - $index];\n\
    \    }\n    #\n    $length = length($string);\n    for($index = 0; $index < $length;\
    \ $index++) {\n        $string = substr($string, 0, $index) .\n            $case_hash->{substr($string,\
    \ $index, 1)} .\n            substr($string, $index + 1);\n    }\n    #\n    return\
    \ $string;\n}", "    my @chars = split //, $string;\n    @chars = map { $_ =~\
    \ /[a-z]/ ? uc $_ : lc $_ } @chars;\n    return join '', @chars;\n}", "    my\
    \ @chars = split(//, $string);\n    for (my $i = 0; $i < @chars; $i++) {\n   \
    \     if ($chars[$i] =~ /[a-z]/) {\n            $chars[$i] = uc($chars[$i]);\n\
    \        }\n        elsif ($chars[$i] =~ /[A-Z]/) {\n            $chars[$i] =\
    \ lc($chars[$i]);\n        }\n    }\n    return join(\"\", @chars);\n}", "   \
    \ return $string =~ tr/A-Za-z/a-zA-Z/r;\n}", "    my $length = length($string);\n\
    \    my $newString = \"\";\n    my $i = 0;\n    while ($i < $length) {\n     \
    \   if ($string =~ m/[a-z]/) {\n            $newString .= uc($string);\n     \
    \   } elsif ($string =~ m/[A-Z]/) {\n            $newString .= lc($string);\n\
    \        } else {\n            $newString .= $string;\n        }\n        $i++;\n\
    \    }\n    return $newString;\n}", "    my @chars = split(//, $string);\n   \
    \ for (my $i = 0; $i < scalar(@chars); $i++) {\n        if ($chars[$i] =~ /[a-z]/)\
    \ {\n            $chars[$i] = uc($chars[$i]);\n        } elsif ($chars[$i] =~\
    \ /[A-Z]/) {\n            $chars[$i] = lc($chars[$i]);\n        }\n    }\n   \
    \ return join(\"\", @chars);\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return\
    \ $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", " \
    \   # get rid of all other non-alpha characters\n    $string =~ s/[^a-zA-Z]//g;\n\
    \    # flip the case\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }", "    my @chars = split(//, $string);\n    for (my $i = 0; $i < scalar(@chars);\
    \ $i++) {\n        if ($chars[$i] =~ /[a-z]/) {\n            $chars[$i] = uc($chars[$i]);\n\
    \        } elsif ($chars[$i] =~ /[A-Z]/) {\n            $chars[$i] = lc($chars[$i]);\n\
    \        }\n    }\n    return join(\"\", @chars);\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    return $string unless $string =~ /[a-zA-Z]/;\n\
    \    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    my $flipped\
    \ = '';\n    for my $i (0 .. length($string) - 1) {\n        my $char = substr($string,\
    \ $i, 1);\n        if ($char =~ /[[:lower:]]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[[:upper:]]/) {\n            $flipped .= lc($char);\n\
    \        } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}",
  "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    my $flipped =\
    \ '';\n    foreach my $char (split(//, $string)) {\n        if ($char =~ /[a-z]/)\
    \ {\n            $flipped .= uc($char);\n        }\n        elsif ($char =~ /[A-Z]/)\
    \ {\n            $flipped .= lc($char);\n        }\n        else {\n         \
    \   $flipped .= $char;\n        }\n    }\n    return $flipped;\n}", "    $string\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    my($result);\n    my($ch);\n\
    \    my($pos);", "    my($output, $letter);\n    foreach $letter (split(//, $string))\
    \ {\n        if($letter =~ /[a-z]/) {\n            $output .= uc($letter);\n \
    \       }\n        elsif($letter =~ /[A-Z]/) {\n            $output .= lc($letter);\n\
    \        }\n        else {\n            $output .= $letter;\n        }\n    }\n\
    \    return $output;\n}", "    my @chars = split(//, $string);\n    for(@chars)\
    \ {\n        if($_ eq lc $_) {\n            $_ = uc $_;\n        }\n        else\
    \ {\n            $_ = lc $_;\n        }\n    }\n    return join('', @chars);\n\
    }", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string\
    \ =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    # your code here\n    $string =~ tr/[a-z]/[A-Z]/;\n\
    \    $string =~ tr/[A-Z]/[a-z]/;\n    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    if ( $string eq \"\" ) {\n        return \"\";\n\
    \    } else {\n        if ( $string =~ /^[a-z]/ ) {\n            return uc( substr(\
    \ $string, 0, 1 ) ) . flip_case( substr( $string, 1 ) );\n        } elsif ( $string\
    \ =~ /^[A-Z]/ ) {\n            return lc( substr( $string, 0, 1 ) ) . flip_case(\
    \ substr( $string, 1 ) );\n        } else {\n            return $string;\n   \
    \     }\n    }\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}",
  "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    return join('',\
    \ map { $_ eq uc($_) ? lc($_) : uc($_) } split(//, $string));\n}", "    my @array\
    \ = split(//, $string);\n    my @upper = grep (/[A-Z]/, @array);\n    my @lower\
    \ = grep (/[a-z]/, @array);\n    foreach (@upper) {\n        $_ =~ tr/A-Z/a-z/;\n\
    \    }\n    foreach (@lower) {\n        $_ =~ tr/a-z/A-Z/;\n    }\n    return\
    \ join(\"\", @array);\n}", "    my @chars = split //, $string;\n    for (@chars)\
    \ {\n        if ($_ =~ m/[a-z]/) {\n            $_ = uc $_;\n        }\n     \
    \   elsif ($_ =~ m/[A-Z]/) {\n            $_ = lc $_;\n        }\n    }\n    return\
    \ join \"\", @chars;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }", "    my $result = '';\n    $result .= uc($1) if $string =~ /([a-z])/;\n  \
    \  $result .= lc($1) if $string =~ /([A-Z])/;\n    return $result;\n}", "    $string\
    \ =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    my($res) = \"\";\n    for\
    \ (my $i = 0; $i < length($string); $i++) {\n        my($c) = substr($string,\
    \ $i, 1);\n        if ($c =~ /[a-z]/) {\n            $res .= uc($c);\n       \
    \ } elsif ($c =~ /[A-Z]/) {\n            $res .= lc($c);\n        } else {\n \
    \           $res .= $c;\n        }\n    }\n    return $res;\n}", "    $string\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    my @chars = split //, $string;\n    for (@chars)\
    \ {\n        tr/A-Za-z/a-zA-Z/;\n    }\n    return join('', @chars);\n}", "  \
    \  my($output) = '';\n    my($i);\n    for ($i = 0; $i < length($string); $i++)\
    \ {\n        my($char) = substr($string, $i, 1);\n        if ($char =~ /[a-z]/)\
    \ {\n            $output .= uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n\
    \            $output .= lc($char);\n        } else {\n            $output .= $char;\n\
    \        }\n    }\n    return $output;\n}", "    my $flipped_string = \"\";\n\
    \    for (my $i = 0; $i < length($string); $i++) {\n        my $char = substr($string,\
    \ $i, 1);\n        if ($char =~ /[a-z]/) {\n            $flipped_string .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped_string .= lc($char);\n\
    \        } else {\n            $flipped_string .= $char;\n        }\n    }\n \
    \   return $flipped_string;\n}", "    return $string if !defined $string;\n  \
    \  $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    return '' unless $string;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    my $ret = \"\";\n    for (my $i = 0; $i < length($string);\
    \ $i++) {\n        if (substr($string, $i, 1) =~ /[a-z]/) {\n            $ret\
    \ .= uc(substr($string, $i, 1));\n        } else {\n            $ret .= lc(substr($string,\
    \ $i, 1));\n        }\n    }\n    return $ret;\n}", "    my @characters = split(//,\
    \ $string);\n    foreach my $character (@characters) {\n        if ($character\
    \ =~ /[a-z]/) {\n            $character = uc($character);\n        }\n       \
    \ elsif ($character =~ /[A-Z]/) {\n            $character = lc($character);\n\
    \        }\n    }\n    my $flipped_string = join('', @characters);\n    return\
    \ $flipped_string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    my($substring, $substitution);\n\
    \    my(@substrings) = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\"\
    , \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\
    );\n    my(@substitutions) = (\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"\
    , \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\"\
    , \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n    for($i = 0; $i < @substrings; $i++) {\n        $substring = $substrings[$i];\n\
    \        $substitution = $substitutions[$i];\n        $string =~ s/$substring/$substitution/g;\n\
    \    }\n    return $string;\n}", "    if ($string =~ /[a-z]/) {\n        $string\
    \ =~ tr/a-z/A-Z/;\n    }\n    elsif ($string =~ /[A-Z]/) {\n        $string =~\
    \ tr/A-Z/a-z/;\n    }\n    return $string;\n}", "    return join('', map { $_\
    \ =~ /[a-z]/ ? uc $_ : lc $_; } split //, $string);\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $string;\n}", "    return $string if !defined $string;\n    $string\
    \ =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    my($flipped);\n    if($string\
    \ =~ /[a-z]/) {\n        $flipped = uc($string);\n    } else {\n        $flipped\
    \ = lc($string);\n    }\n    return $flipped;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
