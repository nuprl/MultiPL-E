name: HumanEval_49_modp
language: pl
prompt: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n# >>>\
  \ modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100,\
  \ 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n \
  \       if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
  \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
  \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
  \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return 1 if $n == 0;\n    return ($n * modp($n-1, $p)) % $p;\n}",
  "    my $ret = 1;\n    my $pow = $n;\n    while ($pow) {\n        if ($pow & 1)\
    \ {\n            $ret = ($ret * $n) % $p;\n        }\n        $n = ($n * $n) %\
    \ $p;\n        $pow >>= 1;\n    }\n    return $ret;\n}", "    my $r = 1;\n   \
    \ my $b = 2;\n    while ($n > 0) {\n        if ($n % 2) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $n = int($n / 2);\n        $b = ($b * $b) %\
    \ $p;\n    }\n    return $r;\n}", '    my($pow2, $result);', "    my $result =\
    \ 1;\n    $result = ($result * 2) % $p  while  --$n > 0;\n    $result;\n}", " \
    \   if ($n < 0) {\n        return -modp(-$n, $p);\n    }\n    my $ans = 1;\n \
    \   my $x = 2;\n    while ($n) {\n        if ($n & 1) {\n            $ans = ($ans\
    \ * $x) % $p;\n        }\n        $x = ($x * $x) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $ans;\n}", "    my($y, $x) = (0, 1);\n    while ($n > 0) {\n\
    \        my($q, $r) = ($n / $p, $n % $p);\n        $n = $q;\n        ($y, $x)\
    \ = ($x, $y - $q * $x);\n    }\n    $x += $p if $x < 0;\n    return $x;\n}", " \
    \   if ($n == 0) {\n        return 1;\n    }\n    elsif ($n % 2 == 0) {\n    \
    \    return modp(int($n/2), $p)**2 % $p;\n    }\n    else {\n        return modp(int($n/2),\
    \ $p)**2 * 2 % $p;\n    }\n}", "    my $r = 1;\n    while ($n > 0) {\n       \
    \ if ($n % 2 == 1) {\n            $r = ($r * $r) % $p;\n        }\n        $n\
    \ = int($n / 2);\n    }\n    return $r;\n}", "    # YOUR CODE HERE\n    my $result\
    \ = 1;\n    my $k = $n;\n    while ($k > 0) {\n        $result = ($result * 2)\
    \ % $p;\n        $k = $k - 1;\n    }\n    return $result;\n}", "    die \"n must\
    \ be non-negative\" if $n < 0;\n    die \"p must be positive\" if $p <= 0;\n \
    \   return 1 if $n == 0;\n    my $pow = $n;\n    my $acc = 1;\n    while ($pow\
    \ > 0) {\n        if ($pow % 2 == 1) {\n            $acc = $acc * $n % $p;\n \
    \       }\n        $n = $n * $n % $p;\n        $pow = int($pow / 2);\n    }\n\
    \    return $acc;\n}", "    my $res = 1;\n    while($n > 0) {\n        $res =\
    \ ($res * 2) % $p if $n % 2;\n        $n = int($n / 2);\n    }\n    return $res;\n\
    }", "    return 1 if $n == 0;\n    return 0 if $n % $p == 0;\n    my $a = $n %\
    \ $p;\n    if ($n >= $p) {\n        $a = $a * modp($n / $p, $p) % $p;\n    }\n\
    \    return $a;\n}", "    my($r) = 1;\n    while($n) {\n        $r = ($r * $n)\
    \ % $p if $n & 1;\n        $n >>= 1;\n        $n = ($n * $n) % $p if $n;\n   \
    \ }\n    $r;\n}", "    my $m;\n    if(!$n || $n == 1 || $n == -1) {\n        return\
    \ $n;\n    }\n    $m = modp($n>>1, $p);\n    $m = $m*$m % $p;\n    if($n&1) {\n\
    \        $m = $m*$n % $p;\n    }\n    return $m;\n}", "    return 1 if $n == 0;\n\
    \    my $r = modp($n / 2, $p);\n    return $r * $r % $p if $n % 2 == 0;\n    return\
    \ $r * $r * $n % $p;\n}", "    return (1 % $p) if $n == 0;\n    my $nmodp = $n\
    \ % $p;\n    my $result = 1;\n    foreach (1..$nmodp) {\n        $result = ($result\
    \ * 2) % $p;\n    }\n    return $result;\n}", "    if ($n == 0) {\n        return\
    \ 1;\n    }\n    elsif ($n % 2 == 0) {\n        return modp($n/2, $p)**2 % $p;\n\
    \    }\n    else {\n        return modp($n/2, $p)**2 % $p * 2 % $p;\n    }\n}",
  "    return 0 if $n < 0;\n    return 1 if $n == 0;\n    my $r = 1;\n    my $a =\
    \ $r;\n    while ($n > 0) {\n        if ($n % 2) {\n            $r = ($r * $a)\
    \ % $p;\n        }\n        $a = ($a * $a) % $p;\n        $n = $n >> 1;\n    }\n\
    \    return $r;\n}", "    my($r);\n    $r = 1;\n    while ($n) {\n\twhile (!($n\
    \ & 1)) {\n\t    $n >>= 1;\n\t    $p = ($p*$p) % $M;\n\t}\n\t$n--;\n\t$r = ($r*$p)\
    \ % $M;\n    }\n    return $r;\n}", "    return 0 if $n == 0;\n    return 1 if\
    \ $n == 1;\n    my $r = modp($n >> 1, $p);\n    $r = ($r + $r) % $p;\n    if ($n\
    \ & 1) {\n        $r = ($r + 1) % $p;\n    }\n    return $r;\n}", "    $n %= $p;\n\
    \    $n *= 2 while $n < 0;\n    $n < $p ? $n : $n - $p;\n}", "    return 1 if\
    \ $n == 0;\n    return (modp(int($n/2), $p)**2 * ($n%2? 2 : 1)) % $p;\n}", " \
    \   return 1 if $n == 0;\n    my $z = modp($n / 2, $p);\n    $z = $z * $z % $p;\n\
    \    return $z if $n % 2 == 0;\n    return $z * 2 % $p;\n}", "    if ($n == 0)\
    \ {\n        return 1;\n    }\n    elsif ($n % 2 == 0) {\n        return (modp($n\
    \ / 2, $p) ** 2) % $p;\n    }\n    else {\n        return ($n * modp($n - 1, $p))\
    \ % $p;\n    }\n}", "    # your code here\n    my $result = 1;\n    while ($n\
    \ > 0) {\n        $result = ($result * 2) % $p;\n        $n--;\n    }\n    return\
    \ $result;\n}", "    return 1 if $n == 0;\n    return modp($n / 2, $p) ** 2 %\
    \ $p if $n % 2 == 0;\n    return $n % $p * modp($n - 1, $p) % $p;\n}", "    return\
    \ 0 if $n == 0;\n    if ($n & 1) {\n        return ($p - modp(($p - $n) >> 1,\
    \ $p)) % $p;\n    } else {\n        return modp($n >> 1, $p) ** 2 % $p;\n    }\n\
    }", "    my($k) = $n % $p;\n    return 0 if $k == 0;\n    $k = $p - $k if $k >\
    \ $p/2;\n    return $k;\n}", "    my $exp = $n;\n    my $r = 1;\n    $exp = $exp\
    \ % ($p-1);\n    while ($exp) {\n        $r = ($r * 2) % $p;\n        $exp--;\n\
    \    }\n    return $r;\n}", "    return 1 if $n == 0;\n    my $result = &modp($n\
    \ >> 1, $p);\n    $result = ($result * $result) % $p;\n    $result = ($result\
    \ * $n) % $p if $n & 1;\n    return $result;\n}", "    die \"Assertion failed\"\
    \ if $n < 0;\n    return 1 if $n == 0;\n    my $t = modp($n / 2, $p);\n    $t\
    \ = (2 * $t) % $p;\n    $t = ($t + 1) % $p if $n % 2 == 1;\n    return $t;\n}",
  "    my($r) = 1;\n    foreach my $bit (split(//, substr(unpack(\"B32\", pack(\"\
    N\", $n)), -32))) {\n        $r = ($r * $r) % $p;\n        $r = ($r * ($bit ?\
    \ 3 : 1)) % $p if $bit;\n    }\n    return $r;\n}", "    my($v) = 1;\n    my($sq)\
    \ = $n;\n    while ($sq > 0) {\n\t# if (n bit k is set): v = v^2^k (mod p)\n\t\
    if ($sq & 1) {\n\t    $v = ($v * $n) % $p;\n\t}\n\t$sq >>= 1;\n\t$n = ($n * $n)\
    \ % $p;\n    }\n    return $v;\n}", "    $n %= $p;\n    if ($n < 0) {\n      \
    \  $n += $p;\n    }\n    return $n;\n}", "    return 1 if $n == 0;\n    my $x\
    \ = modp($n >> 1, $p);\n    $x = ($x * $x) % $p;\n    $x = ($x * 2) % $p if $n\
    \ & 1;\n    return $x;\n}", "    return 1 if $n == 0;\n    my $c = modp($n >>\
    \ 1, $p);\n    $c = ($c << 1) % $p;\n    return $c if $n & 1 == 0;\n    return\
    \ ($c + 1) % $p;\n}", "    my $i = 0;\n    my $j = 1;\n    while ($n > 0) {\n\
    \        $i = ($i * 2) % $p if ($n % 2 == 1);\n        $n = int($n / 2);\n   \
    \     $j = ($j * 2) % $p;\n    }\n    return $i;\n}", "    my($r) = 1;\n    while\
    \ ($n) {\n\tif ($n & 1) {\n\t    $r = ($r * 2) % $p;\n\t}\n\t$n >>= 1;\n    }\n\
    \    return $r;\n}", "    my $r = 1;\n    my $x = 2;\n    while ($n > 0) {\n \
    \       if ($n % 2 == 1) {\n            $r = ($r * $x) % $p;\n        }\n    \
    \    $x = ($x * $x) % $p;\n        $n /= 2;\n    }\n    return $r;\n}", "    my($z)\
    \ = 1;\n    my($c) = $n;\n    while($c > 0) {\n\tif($c % 2 == 1) {\n\t    $z =\
    \ ($z * $n) % $p;\n\t}\n\t$n = ($n * $n) % $p;\n\t$c = $c / 2;\n    }\n    return\
    \ $z;\n}", "    my($x) = 1;\n    my($k) = 0;\n    my($s) = 0;\n    my($z) = $n;\n\
    \    while ($z) {\n\t$x = ($x * $x) % $p;\n\t$k = $z % 2;\n\t$s = ($s * 2) + $k;\n\
    \t$z = ($z - $k) / 2;\n    }\n    while ($s) {\n\t$x = ($x * $x) % $p;\n\t$k =\
    \ $s % 2;\n\t$s = ($s - $k) / 2;\n\tif ($k) {\n\t    $x = ($x * $n) % $p;\n\t\
    }\n    }\n    return $x;\n}", "    my($a, $b) = (1, 0);\n    my($x, $y) = (0,\
    \ 1);\n    while ($n > 0) {\n        ($a, $b) = (10*$a, 10*$b);\n        ($x,\
    \ $y) = (10*$x, 10*$y);\n        if ($n%2) {\n            ($a, $b) = ($a+1, $b+1);\n\
    \            ($x, $y) = ($x+$p, $y+1);\n        }\n        $n /= 2;\n    }\n \
    \   $a % $p;\n}", "    return 1 if $n == 0;\n    $n %= $p;\n    $n = $p-$n if\
    \ $n < 0;\n    return $n**2 % $p * modp($n-1, $p) % $p if $n % 2;\n    return\
    \ $n * modp($n-1, $p) % $p;\n}", "    die \"modp\" if $n >= $p;\n    my $result\
    \ = 1;\n    for my $bit (split //, substr(unpack(\"B32\", pack(\"N\", $n)), -32))\
    \ {\n        ($result *= $result) %= $p;\n        $result = ($result * $POTENCIAS[$bit])\
    \ % $p if $bit;\n    }\n    return $result;\n}", "    my $r = 1;\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        $r = $r * 2 % $p;\n    }\n    return $r;\n\
    }", "    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if ($n % 2\
    \ == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n /= 2;\n   \
    \     $b = ($b * $b) % $p;\n    }\n    return $r;\n}", '    my($modp, $i);', " \
    \   #\n    # TODO\n    #\n    return modp_acc($n, 1, $p);\n}", "    my $r = 1;\n\
    \    return 1 if ($n == 0);\n    while($n) {\n        $r = ($r * $n) % $p;\n \
    \       $n = $n >> 1;\n    }\n    return $r;\n}", "    return 0 if $n == 0;\n\
    \    my $n1 = $n % $p;\n    my $n2 = ($n - $n1) / $p;\n    if($n2 % 2) {\n   \
    \     return $p - $n1;\n    } else {\n        return $n1;\n    }\n}", "    my\
    \ $ret = 1;\n    my $pow = $n;\n    while ($pow) {\n        if ($pow & 1) {\n\
    \            $ret = ($ret * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n\
    \        $pow >>= 1;\n    }\n    return $ret;\n}", "    $n %= $p;\n    my $ret\
    \ = 1;\n    my $x = $n;\n    my $n0 = $n;\n    while ($x) {\n\tif ($x & 1) {\n\
    \t    $ret *= $n0;\n\t    $ret %= $p;\n\t}\n\t$x /= 2;\n\t$n0 *= $n0;\n\t$n0 %=\
    \ $p;\n    }\n    return $ret;\n}", "    return 1 if $n == 0;\n    my $t = modp($n/2,\
    \ $p);\n    $t = $t*$t % $p;\n    return $t if $n % 2 == 0;\n    return $t*2 %\
    \ $p;\n}", "    my $r = 1;\n    while ($n > 0) {\n        $r = ($r * 2) % $p if\
    \ $n % 2;\n        $n /= 2;\n    }\n    $r;\n}", "    my $m = 1;\n    my $t =\
    \ 2;\n    my $e = $n;\n    while ($e > 0) {\n        if ($e % 2 == 1) {\n    \
    \        $m = ($m * $t) % $p;\n        }\n        $t = ($t * $t) % $p;\n     \
    \   $e = $e / 2;\n    }\n    return $m;\n}", "    my($x) = 1;\n    foreach(split\
    \ //, sprintf(\"%b\", $n)) {\n        $x = ($x * $x) % $p;\n        $x = ($x *\
    \ $p) % $p if $_;\n    }\n    return $x;\n}", "    my($r);\n    if ($n == 0) {\n\
    \t$r = 1;\n    } elsif ($n == 1) {\n\t$r = 2;\n    } else {\n\tmy($x) = 2;\n\t\
    my($i);\n\tfor ($i = 1; $i < $n; $i++) {\n\t    $x = 2 * $x % $p;\n\t}\n\t$r =\
    \ $x;\n    }\n    return $r;\n}", "    my $r = 1;\n    while ($n > 0) {\n    \
    \    $r = ($r * 2) % $p if $n % 2;\n        $n /= 2;\n    }\n    $r;\n}", "  \
    \  my($result) = 1;\n    my($bit) = 1;\n    my($k) = 0;\n    if (0 < $n) {\n\t\
    while ($k < $n) {\n\t    if ($n & $bit) {\n\t\t$result = ($result * $result) %\
    \ $p;\n\t\t$k += 1;\n\t    } else {\n\t\t$result = ($result * $result * 2) % $p;\n\
    \t\t$k += 2;\n\t    }\n\t    $bit <<= 1;\n\t}\n    }\n    return $result;\n}",
  "    die \"n must be non-negative\" if $n < 0;\n    die \"p must be a prime\" if\
    \ $p < 2;\n    my $res = 1;\n    my $e = $n;\n    my $a = 2;\n    while ($e) {\n\
    \        if ($e & 1) {\n            $res = ($res * $a) % $p;\n        }\n    \
    \    $e >>= 1;\n        $a = ($a * $a) % $p;\n    }\n    return $res;\n}", " \
    \   my $r = 1;\n    my $b = 2;\n    my $t = $n;\n    while ($t > 0) {\n      \
    \  if (($t % 2) == 1) {\n            $r = ($r * $b) % $p;\n        }\n       \
    \ $t = $t >> 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}", "  \
    \  my $r = 1;\n    my $b = 2;\n    my $m = $n;\n    while ($m) {\n        if ($m\
    \ & 1) {\n            $r = ($r * $b) % $p;\n        }\n        $m >>= 1;\n   \
    \     $b = ($b * $b) % $p;\n    }\n    return $r;\n}", "    my $bin = Math::BigInt->new(1);\n\
    \    $bin->blsft($n, $p);\n    $bin->bmod($p);\n    return $bin->numify();\n}",
  "    $n %= $p;\n    if ($n < 0) {\n        $n += $p;\n    }\n    return $n;\n}",
  "    my $res = 1;\n    my $bit = 1;\n    my $k = $n;\n    while ($k) {\n       \
    \ if ($k & 1) {\n            $res = ($res * $bit) % $p;\n        }\n        $bit\
    \ = ($bit * $bit) % $p;\n        $k >>= 1;\n    }\n    return $res;\n}", "   \
    \ return 0 if $n == 0;\n    return 1 if $n == 1;\n    return ($n % $p) if $n <\
    \ $p;\n    my $t = 1;\n    while($n) {\n        $t = ($t * 2) % $p if $n % 2;\n\
    \        $n = int($n / 2);\n    }\n    return $t;\n}", "    my $ret = 1;\n   \
    \ my $pow = $n;\n    while($pow > 0) {\n        $ret = $ret * $pow % $p if $pow\
    \ % 2;\n        $pow = int($pow / 2);\n        $pow = $pow * $pow % $p;\n    }\n\
    \    return $ret;\n}", "    return 1 if($n == 0);\n    my $r = modp($n/2, $p);\n\
    \    $r = ($r * $r) % $p;\n    $r = ($r * $n) % $p if($n % 2);\n    return $r;\n\
    }", "    my($e, $m) = (1, 1);\n    for (; $n > 0; $n >>= 1) {\n        $e = ($e\
    \ * $e) % $p if $n & 1;\n        $m = ($m * $e) % $p;\n    }\n    $m;\n}", " \
    \   return 0 if($n == 0);\n    return 1 if($n == 1);\n    my $h = modp($n/2, $p);\n\
    \    my $ret = ($h * $h) % $p;\n    $ret = ($ret * 2) % $p if($n % 2 == 1);\n\
    \    return $ret;\n}", "    return (1 % $p) if $n == 0;\n    my $t = modp($n/2,\
    \ $p);\n    $t = $t*$t % $p;\n    return $t*$n % $p if $n % 2 == 1;\n    return\
    \ $t;\n}", "    return 0 if $n < 0;\n    my $r = 1;\n    my $t = $n;\n    while\
    \ ($t > 0) {\n        $r = ($r * $t) % $p if $t % 2 == 1;\n        $t = $t / 2;\n\
    \        $t = ($t * $t) % $p;\n    }\n    return $r;\n}", "    return $p unless\
    \ $n;\n    return 1 unless $n % 2;\n    my $k = $n / 2;\n    my $t = modp($k,\
    \ $p);\n    $t = ($t * $t) % $p;\n    return $t if $n % 4;\n    return ($t * $n)\
    \ % $p;\n}", "    return 1 if $n == 0;\n    return $n if $n == 1;\n    my $sub\
    \ = modp($n>>1, $p);\n    return $sub*$sub % $p if $n % 2 == 0;\n    return $sub*$sub*$n\
    \ % $p;\n}", "    return modp_1($n, $p) if $n < 2 ** 16;\n    return modp_2($n,\
    \ $p);\n}", "    die \"Negative powers not supported\" if $n < 0;\n    die \"\
    Modulo out of range\" if $p < 1 || $p > $MAX_P;\n    return 1 if $n == 0;\n  \
    \  return power_modp($n % ($p - 1), $p);\n}", "    return $p if $n == 0;\n   \
    \ my $q = modp($n >> 1, $p);\n    $q = modmul($q, $q, $p);\n    return $q if $n\
    \ & 1 == 0;\n    return modmul($q, 2, $p);\n}", '    my $t = $n % $p;', "    return\
    \ 0 if ($n == 0);\n    $n = $n % $p;\n    my($n2, $x) = (1, $n);\n    while ($n2\
    \ < $p) {\n\t$x = ($x * $n) % $p;\n\t$n2 *= 2;\n    }\n    return $x;\n}", " \
    \   my $r = 1;\n    my $b = 2;\n    do {\n        if (($n & 1) == 1) {\n     \
    \       $r = ($r * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n      \
    \  $n = $n >> 1;\n    } while ($n != 0);\n    return $r;\n}", "    return 1 if\
    \ $n == 0;\n    return 0 if $n == 1;\n    return (modp($n - 1, $p) * 2) % $p;\n\
    }", "    return 1 if $n == 0;\n    my $a = modp($n >> 1, $p);\n    $a = $a * $a\
    \ % $p;\n    $a = $a * $n % $p if $n & 1;\n    return $a;\n}", "    $n %= $p;\n\
    \    my $res = 1;\n    while ($n > 0) {\n        $res = ($res * 2) % $p if $n\
    \ % 2;\n        $n /= 2;\n    }\n    $res;\n}", "    my($result, $mod);\n    my($x,\
    \ $y) = (2, $n % $p);\n    for ($result = 1; $n > 0; $n >>= 1) {\n        if ($n\
    \ & 1) {\n            ($x, $y) = (2 * $x * $y % $p, $y ** 2 % $p);\n         \
    \   $result = $result * $x % $p;\n        } else {\n            ($x, $y) = ($x\
    \ ** 2 % $p, 2 * $x * $y % $p);\n        }\n    }\n    return $result;\n}", " \
    \   my $prod = 1;\n    my $i = 0;\n    my $temp = 1;\n    if($n == 0) { return\
    \ 1; }\n    while($i < $n) {\n        $temp = $prod * 2;\n        if($temp >=\
    \ $p) {\n            $prod = $temp % $p;\n        } else {\n            $prod\
    \ = $temp;\n        }\n        $i = $i + 1;\n    }\n    return $prod;\n}", " \
    \   my($x) = 1;\n    my($mod) = $p;\n    my($nbin) = sprintf(\"%b\", $n);\n  \
    \  my($z) = 1;\n    while ($nbin > 0) {\n\tif (($nbin & 1) == 1) {\n\t    $x =\
    \ ($x * $z) % $mod;\n\t}\n\t$z = ($z * $z) % $mod;\n\t$nbin = $nbin >> 1;\n  \
    \  }\n    return $x;\n}", "    if ($n == 0) {\n        return 1;\n    }\n    my\
    \ $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    if ($n & 1) {\n     \
    \   $r = ($r * 2) % $p;\n    }\n    return $r;\n}", "    return 0 if $n == 0;\n\
    \    my $ret = 1;\n    while($n) {\n        $ret = ($ret * $ret) % $p if ($n &\
    \ 1) == 0;\n        $ret = ($ret * $ret * 2) % $p if ($n & 1) == 1;\n        $n\
    \ >>= 1;\n    }\n    return $ret;\n}", "    my $res = 1;\n    foreach (1..$n)\
    \ {\n        $res = ($res * 2) % $p;\n    }\n    return $res;\n}", "    return\
    \ ((2**$n) % $p);\n}", "    return 0 if $n == 0;\n    my $b = 1;\n    my $k =\
    \ 0;\n    while (($n >> $k) > 1) {\n        $k += 1;\n    }\n    for (my $i =\
    \ $k; $i >= 0; $i -= 1) {\n        $b = ($b * $b) % $p;\n        if (($n >> $i)\
    \ & 1) {\n            $b = ($b * 2) % $p;\n        }\n    }\n    return $b;\n}",
  "    my($r) = 1;\n    my($x) = $n % $p;\n    while($n >= $p) {\n\t$r = ($r * $x)\
    \ % $p;\n\t$n = $n / $p;\n    }\n    return $r;\n}", "    my $res = 1;\n    for\
    \ (; $n; $n = int($n / 2)) {\n        $res = ($res * $res) % $p if $n % 2;\n \
    \   }\n    $res;\n}", '    return 1 unless $n;', "    # assert_gt($n, -1);\n \
    \   # assert_gt($p, $n);\n    my $r = 1;\n    while($n > 0) {\n        if ($n\
    \ % 2 == 1) {\n            $r = ($r * 2) % $p;\n        }\n        $n = int($n\
    \ / 2);\n    }\n    return $r;\n}", "    my $r = 1;\n    while ($n > 0) {\n  \
    \      if ($n % 2) {\n            $r = ($r * $p) % BIGINT;\n        }\n      \
    \  $n = int($n / 2);\n        $p = ($p * $p) % BIGINT;\n    }\n    return $r;\n\
    }", "    $n %= $p;\n    return 0 if $n == 0;\n    my($k, $m) = (1, 10 % $p);\n\
    \    for my $i (0 .. length($n) - 2) {\n        $k = ($k * $m) % $p;\n    }\n\
    \    return $k if $n == 1;\n    $k = ($k * $n) % $p;\n    return $k;\n}", "  \
    \  if($n == 0) {\n        return 1;\n    }\n    if($n & 1) {\n        return (modp($n\
    \ >> 1, $p) ** 2 * $p) % $n;\n    } else {\n        return (modp($n >> 1, $p)\
    \ ** 2) % $n;\n    }\n}", "    my($b, $r) = (1, 1);\n    while ($n > 0) {\n  \
    \      my $l = $n % 2;\n        $r = $r * $b % $p;\n        $b = $b * $b % $p;\n\
    \        $n = int($n / 2);\n    }\n    return $r;\n}", "    my($m) = 1;\n    my($i);\n\
    \    for ($i = 0; $i < $n; $i++) {\n\t$m = ($m * 2) % $p;\n    }\n    return $m;\n\
    }", "    my $two = 2;\n    my $pow = 1;\n    while ($n > 0) {\n        $pow =\
    \ ($pow * $two) % $p if $n % 2 == 1;\n        $n = int($n / 2);\n        $two\
    \ = ($two * $two) % $p;\n    }\n    return $pow;\n}", "    return 1 if $n == 0;\n\
    \    return powmod($b, $n, $p) if $n % 2 == 1;\n    my $r = modp($n / 2, $p);\n\
    \    return ($r * $r) % $p;\n}", "    $n %= $p;\n    $n++;\n    return $n;\n}",
  "    return 1 if $n == 0;\n    my $x = modp($n/2, $p);\n    $x = ($x*$x) % $p;\n\
    \    $x = ($x*2) % $p if $n % 2;\n    return $x;\n}", "    return 1 if $n == 0;\n\
    \    my $t = modp($n / 2, $p);\n    $t = ($t * $t) % $p;\n    return $t if $n\
    \ % 2 == 0;\n    return ($t * 2) % $p;\n}", "    my($power, $result) = (1, 1);\n\
    \    while ($n) {\n        if ($n & 1) {\n            $result = ($result * $power)\
    \ % $p;\n        }\n        $power = ($power * $power) % $p;\n        $n >>= 1;\n\
    \    }\n    return $result;\n}", "    return (1) if($n == 0);\n    my $r = 1;\n\
    \    my $s = 2;\n    while($n > 0) {\n\tif($n & 1) { $r = ($r * $s) % $p; }\n\t\
    $s = ($s * $s) % $p;\n\t$n = $n >> 1;\n    }\n    return $r;\n}", "    return\
    \ undef if !defined $n || !defined $p;\n    return undef if $p == 0;\n    return\
    \ undef if $n < 0;\n    return 1 if $n == 0;\n    return $n % $p if $n < $p;\n\
    \    my $r = 1;\n    while($n != 0) {\n        if ($n % 2 == 1) {\n          \
    \  $r = ($r * 2) % $p;\n        }\n        $n = int($n / 2);\n        $r = ($r\
    \ * $r) % $p;\n    }\n    return $r;\n}", "    return 1 if $n == 0;\n    my $r\
    \ = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n\
    \ & 1;\n    return $r;\n}", '    my($res, $x);', "    my $result = 1;\n    my\
    \ $two = 2;\n    my $bit = $n;\n    while ($bit > 0) {\n        if ($bit % 2 ==\
    \ 1) {\n            $result = ($result * $two) % $p;\n        }\n        $two\
    \ = ($two * $two) % $p;\n        $bit = int($bit / 2);\n    }\n    return $result;\n\
    }", "    my $result = 1;\n    my $power = $n;\n    while ($power > 0) {\n    \
    \    # Divide by two and accumulate products\n        if ($power % 2) {\n    \
    \        $result = ($result * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n\
    \        $power = int($power / 2);\n    }\n    return $result;\n}", "    my $k\
    \ = 1;\n    my $result = 1;\n    my $bitmask = 1;\n    while ($n) {\n        $k\
    \ = ($k * $k) % $p if $bitmask & $n;\n        $result = ($result * $k) % $p if\
    \ $bitmask & $n;\n        $bitmask *= 2;\n        $n /= 2;\n    }\n    return\
    \ $result;\n}", "    my $N = $n;\n    my $P = $p;\n    my $ans = 1;\n    while\
    \ ($n > 0) {\n        if ($n & 1) {\n            $ans = ($ans * $P) % $N;\n  \
    \      }\n        $P = ($P * $P) % $N;\n        $n >>= 1;\n    }\n    return $ans;\n\
    }", "    my $ans = 1;\n    my $x = 2;\n    my $i = length($n);\n    for (; $i\
    \ >= 0; $i--) {\n        $ans = ($ans * $ans) % $p;\n        if (substr($n, $i,\
    \ 1) eq '1') {\n            $ans = ($ans * $x) % $p;\n        }\n    }\n    return\
    \ $ans;\n}", "    $n %= $p;\n    return (1, 0)[$n == 0];\n}", "    my $r = 1;\n\
    \    my $k = $n;\n    while ($k > 0) {\n        if ($k % 2) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n        $k = int($k\
    \ / 2);\n    }\n    return $r;\n}", "    my($r) = 1;\n    my($b) = 2;\n    while\
    \ ($n) {\n\tif ($n & 1) {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b\
    \ = ($b * $b) % $p;\n    }\n    return $r;\n}", "    my $res = 1;\n    $res =\
    \ ($res * 2) % $p while $n-- > 0;\n    $res;\n}", "    return 0 if $n == 0;\n\
    \    my($c, $d) = (1, $n % $p);\n    my($e, $f) = (1, $p % $d);\n    while ($f\
    \ != 0) {\n        my($x) = ($d - $f) / $e;\n        $c = -$c + $p * int($d /\
    \ $e);\n        ($d, $e, $f) = ($e, $f, $x);\n    }\n    return ($c % $p + $p)\
    \ % $p;\n}", "    my($r) = 1;\n    while ($n) {\n\t$r = ($r * 2) % $p if $n &\
    \ 1;\n\t$n >>= 1;\n    }\n    $r;\n}", "    return modp_rec($n, $p, 1);\n}", " \
    \   return 0 if $n == 0;\n    my $a = $n % $p;\n    return 1 if $a == 0;\n   \
    \ my $b = $p;\n    my $c = 1;\n    while ($a > 1) {\n        my $t = $a % 2;\n\
    \        if ($t == 1) {\n            $c = ($c * $b) % $p;\n        }\n       \
    \ $a = int($a / 2);\n        $b = ($b * $b) % $p;\n    }\n    $c = ($c * $a) %\
    \ $p;\n    return $c;\n}", "    $n %= $p;\n    return ((2 % $p) * modp($n-1, $p))\
    \ % $p if $n > 1;\n    return 2 % $p if $n == 1;\n    return 1;\n}", "    my $m\
    \ = 1;\n    foreach my $i (1..$n) {\n        $m = ($m * 2) % $p;\n    }\n    return\
    \ $m;\n}", "    $n %= $p;\n    if ($n < 0) {\n\t$n += $p;\n    }\n    $n;\n}",
  "    die unless $n >= 0 && $p > 1;\n    my $s = 1;\n    for my $j (0 .. int(log($n)/log(2)))\
    \ {\n        $s = ($s * $s) % $p;\n        $s = ($s * 2) % $p if $n & (1 << $j);\n\
    \    }\n    return $s;\n}", "    return 1 if ($n == 0);\n    my $pwr = modp($n\
    \ >> 1, $p);\n    $pwr = ($pwr * $pwr) % $p;\n    if ($n & 1) {\n        $pwr\
    \ = ($pwr * 2) % $p;\n    }\n    return $pwr;\n}", "    my($r) = 1;\n    while\
    \ ($n > 0) {\n\t$r = ($r * 2) % $p if ($n & 1);\n\t$n >>= 1;\n    }\n    return\
    \ $r;\n}", "    my $b = 2;\n    my $i = 1;\n    my $m = 1;\n    my $t = $b;\n\
    \    my $j = $n;\n    while ($j > 0) {\n        if ($j % 2) {\n            $m\
    \ = ($m * $t) % $p;\n        }\n        $j = int($j / 2);\n        $t = ($t *\
    \ $t) % $p;\n    }\n    return $m;\n}", "    my $x = 1;\n    foreach my $i (0..$n-1)\
    \ {\n        $x = ($x * 2) % $p;\n    }\n    return $x;\n}", "    if( $n == 0\
    \ ) { return 1 }\n    elsif( $n == 1 ) { return $n % $p }\n    else {\n      \
    \  my $m = modp(int($n/2), $p);\n        $m = ($m*$m) % $p;\n        if( $n %\
    \ 2 ) { $m = ($m*2) % $p }\n        return $m;\n    }\n}", "    return 1 if $n\
    \ == 0;\n    return 0 if $n == 1;\n    my $s = modp($n >> 1, $p);\n    my $r =\
    \ ($s * $s) % $p;\n    return $r if ($n & 1) == 0;\n    return ($r * 2) % $p;\n\
    }", "    my $r = 1;\n    my $i = 0;\n    while($n > 0) {\n        if($n % 2 ==\
    \ 1) {\n            $r = ($r * $p) % 2**$i;\n        }\n        $n = int($n /\
    \ 2);\n        $i++;\n    }\n    return $r;\n}", "    return (2 ** $n) % $p;\n\
    }", "    return 0 if($n == 0);\n    return ((2 * modp($n - 1, $p)) % $p) if($n\
    \ > 1);\n    return 2 % $p;\n}", "    if (ref($n) eq 'Math::BigInt') {\n     \
    \   if ($n->is_neg()) {\n            $n = $n->copy()->babs();\n        }\n   \
    \     my $i = $n->copy();\n        $i->bzero();\n        my $y = Math::BigInt->bone();\n\
    \        my $z = Math::BigInt->new(2);\n        while (!$i->is_zero()) {\n   \
    \         if ($i->is_odd()) {\n                $y->bmul($z);\n               \
    \ $y->bmod($p);\n            }\n            $z->bmul($z);\n            $z->bmod($p);\n\
    \            $i->brsft(1);\n        }\n        return $y;\n    }\n    else {\n\
    \        if ($n < 0) {\n            $n = -$n;\n        }\n        my $i = $n;\n\
    \        my $y = 1;\n        my $z = 2;\n        while ($i) {\n            if\
    \ ($i & 1) {\n                $y = $y * $z % $p;\n            }\n            $z\
    \ = $z * $z % $p;\n            $i >>= 1;\n        }\n        return $y;\n    }\n\
    }", "    while ($n >= $p) {\n        my $k = floor($n / $p);\n        $n -= $k\
    \ * $p;\n    }\n    return $n;\n}", "    my($b, $t) = (1, 0);\n    for (;;) {\n\
    \        $t = 1 & $n;\n        $n = $n >> 1;\n        $b = ($b*$b - 2*$t*$b) %\
    \ $p;\n        last if $n == 0;\n    }\n    $b;\n}", "    return 1 if ($n == 0);\n\
    \    if ($n & 1) {\n\treturn (modp($n-1, $p) * 2) % $p;\n    } else {\n\treturn\
    \ (modp($n/2, $p)**2) % $p;\n    }\n}", "    my $res = 1;\n    foreach (1..$n)\
    \ {\n        $res = ($res * 2) % $p;\n    }\n    return $res;\n}", "    die unless\
    \ $n >= 0;\n    die unless $p > 0;\n    my $n0 = $n;\n    $n = $n % $p;\n    my\
    \ $r = 1;\n    while ($n) {\n\tif ($n & 1) {\n\t    $r = ($r * $n0) % $p;\n\t\
    }\n\t$n0 = ($n0 * $n0) % $p;\n\t$n >>= 1;\n    }\n    return $r;\n}", "    if\
    \ ($n == 0) {\n        return 1;\n    } elsif ($n % 2 == 0) {\n        my $x =\
    \ modp($n/2, $p);\n        return $x * $x % $p;\n    } else {\n        return\
    \ modp($n-1, $p) * $n % $p;\n    }\n}", "    return 1 if $n == 0;\n    return\
    \ 0 if $n == 1 || $p == 1;\n    my $result = 1;\n    my $base = 2;\n    if ($p\
    \ > 2**32) {\n        print \"Warning: modp may not work for p > 2**32\\n\";\n\
    \    }\n    while ($n > 0) {\n        if ($n & 1) {\n            $result = ($result\
    \ * $base) % $p;\n        }\n        $n >>= 1;\n        $base = ($base * $base)\
    \ % $p;\n    }\n    return $result;\n}", "    my($r);\n    $r = 1;\n    while\
    \ ($n) {\n\t$r = ($r * $r) % $p if ($n & 1);\n\t$n >>= 1;\n    }\n    $r;\n}",
  "    my $s = 1;\n    while ($n > 0) {\n        $s = ($s * 2) % $p if $n % 2;\n \
    \       $n = int($n / 2);\n    }\n    return $s;\n}", "    return 0 if $n == 0;\n\
    \    my $r = 1;\n    my $m = $n % $p;\n    while ($n) {\n        if ($n & 1) {\n\
    \            $r = ($r * $m) % $p;\n        }\n        $n >>= 1;\n        $m =\
    \ ($m * $m) % $p;\n    }\n    return $r;\n}", "    die \"modp: p must be prime\"\
    \ unless $p =~ /^[2357]$/;\n    return 0 if $n == 0;\n    return $n if $n < $p;\n\
    \    return 1 if $n == $p;\n    my $t = $n % ($p * $p);\n    return $t*$t % $p\
    \ if $p == 3;\n    my $k = $n % ($p * $p * $p);\n    return ($k * ($k * $k % $p)\
    \ % $p) % $p if $p == 5;\n    my $m = $n % ($p * $p * $p * $p);\n    return ($m\
    \ * ($m * ($m * $m % $p) % $p) % $p) % $p if $p == 7;\n    my $s = $n % ($p *\
    \ $p * $p * $p * $p);\n    return ($s * ($s * ($s * ($s * $s % $p) % $p) % $p)\
    \ % $p) % $p;\n}", "    return 1 if $n == 0;\n    return $factorial[$n % $phi_of_p[$p]]\
    \ * $factorial_of_p[$n % $phi_of_p[$p]] % $p;\n}", "    while ($n > $p) {\n  \
    \      $n -= $p;\n    }\n    return $n;\n}", "    if($n == 0) { return 1; }\n\
    \    my $x = modp($n / 2, $p);\n    my $x2 = ($x * $x) % $p;\n    if($n % 2 ==\
    \ 0) { return $x2; }\n    else { return ($x2 * 2) % $p; }\n}", "    $n = $n %\
    \ $p;\n    my $r = 1;\n    while ($n > 0) {\n        $r = ($r * 2) % $p if $n\
    \ % 2;\n        $n = int($n / 2);\n    }\n    return $r;\n}", "    my $r = 0;\n\
    \    my $two = 2;\n    my $thirty = 30;\n    # 1. Do a normal mod first\n    my\
    \ $bit = $n % $p;\n    $r = $bit;\n    $n = int($n / $p);\n    # 2. Now n is at\
    \ most p-1\n    # Use exponentiation by squaring to speed up the calculation\n\
    \    while ($n) {\n        my $mod = $n % $two;\n        if ($mod == 1) {\n  \
    \          $r = ($r * $bit) % $p;\n        }\n        $bit = ($bit * $bit) % $p;\n\
    \        $n = int($n / $two);\n    }\n    return $r;\n}", "    while ($n >= $p)\
    \ {\n        my $r = 0;\n        my $s = $n;\n        while ($s >= $p) {\n   \
    \         $r += 1;\n            $s -= $p;\n        }\n        $n = $r;\n    }\n\
    \    return $n;\n}", "    my $r = 1;\n    while ($n > 0) {\n        if ($n % 2\
    \ == 1) {\n            $r = ($r * $p) % MODULUS;\n        }\n        $n = int($n\
    \ / 2);\n        $p = ($p * $p) % MODULUS;\n    }\n    return $r;\n}", "    my\
    \ $result = 1;\n    while ($n > 0) {\n        $result = ($result * 2) % $p if\
    \ $n % 2;\n        $n = int($n / 2);\n    }\n    return $result;\n}", "    return\
    \ 0 if ($n == 0);\n    if ($n == 1) {\n\treturn 1;\n    }\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = $r*$r % $p;\n    if ($n & 1) {\n\t$r = $r*2 % $p;\n   \
    \ }\n    return $r;\n}", "    return 1 unless $n;\n    $n %= $p;\n    return $n\
    \ * modp($n-1, $p) % $p;\n}", "    my $result = 1;\n    my $i = $n;\n    while\
    \ ($i) {\n        $result = ($result * $i) % $p if $i & 1;\n        $i >>= 1;\n\
    \        $i = ($i * $i) % $p;\n    }\n    return $result;\n}", "    return 1 if\
    \ $n == 0;\n    return modp($n >> 1, $p) ** 2 % $p if $n & 1 == 0;\n    return\
    \ modp($n >> 1, $p) ** 2 * 2 % $p;\n}", "    return $p if $n == 0;\n    my $result\
    \ = 1;\n    my $power = $n;\n    my $base = 2;\n    while ( $power ) {\n     \
    \   $result = ($result * $base) % $p if $power & 1;\n        $power >>= 1;\n \
    \       $base = ($base * $base) % $p;\n    }\n    return $result;\n}", "    if\
    \ ($n > $p) {\n        $n %= $p;\n    }\n    return $n == 0 ? 1 :\n        $n\
    \ == 1 ? $n :\n        $n == 2 ? ($p+1)/4 :\n        $n % 2 == 0 ? modp($n/2,\
    \ $p)**2 % $p : modp($n-1, $p)*modp($n+1, $p) % $p;\n}", "    my $e = $n;\n  \
    \  my $b = 1;\n    while ($e > 0) {\n        $b = $b * 2 if ($e % 2 == 1);\n \
    \       $b = $b % $p;\n        $e = int($e / 2);\n    }\n    return $b;\n}", " \
    \   my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n        $r = $r * 2 % $p;\n\
    \    }\n    return $r;\n}", "    return 1 if $n == 0;\n    $n %= $p;\n    return\
    \ ((2 * modp($n-1, $p)) % $p) if ($n > 0);\n    return ((2 * modp($n+1, $p)) %\
    \ $p) if ($n < 0);\n}", "    if($n == 0) {\n        return 1;\n    } elsif($n\
    \ == 1) {\n        return $n % $p;\n    } else {\n        my $sum = 1;\n     \
    \   for(my $i = 0; $i < $n; $i++) {\n            $sum = $sum * 2 % $p;\n     \
    \   }\n        return $sum;\n    }\n}", "    return 1 if $n == 0;\n    return\
    \ $n if $n == 1;\n    return $n**2 % $p if $n % 2 == 0;\n    my $mod2 = modp($n/2,\
    \ $p);\n    return $mod2**2 % $p;\n}", "    my $result = 1;\n    my $expo = $n;\n\
    \    while ($expo) {\n        $result = ($result * $expo) % $p if $expo & 1;\n\
    \        $expo >>= 1;\n        $expo = ($expo * $expo) % $p;\n    }\n    return\
    \ $result;\n}", "    return 0 if $n == 0;\n    my $r = $n % $p;\n    return ($r\
    \ * modp(($n - $r) / $p, $p)) % $p;\n}", "    my $f = 1;\n    while ($n) {\n \
    \       $f = ($f * $b[$n & 1]) % $p;\n        $n >>= 1;\n    }\n    return $f;\n\
    }", "    return 0 if $n < $p;\n    my($r) = 1;\n    while ($n > 0) {\n       \
    \ if ($n & 1) {\n            $r = ($r * 2) % $p;\n        }\n        $n >>= 1;\n\
    \    }\n    return $r;\n}", '    my($i, $ret);', "    if ($n < 2*$p) {\n     \
    \   return power_mod($n, 2, $p);\n    }\n    else {\n        return power_mod(2,\
    \ 2*$n, $p);\n    }\n}", '    return ($n % $p) if ($n < $p);', "    return 1 if\
    \ $n == 0;\n    if ($n % 2 == 0) {\n        my $tmp = modp($n / 2, $p);\n    \
    \    return ($tmp * $tmp) % $p;\n    } else {\n        return ((2 * modp($n -\
    \ 1, $p)) % $p);\n    }\n}", "    my($k, $m);\n    $k = 1;\n    $m = 2;\n    while\
    \ ($n > 0) {\n\tif ($n % 2 == 1) {\n\t    $k = ($k * $m) % $p;\n\t}\n\t$n = int($n\
    \ / 2);\n\t$m = ($m * $m) % $p;\n    }\n    return $k;\n}", "    croak \"n must\
    \ be >= 0\" if $n < 0;\n    return 1 unless $n;\n    my $r = modp($n >> 1, $p);\n\
    \    $r = ($r + $r) % $p;\n    if ($n & 1) {\n\t$r = ($r + $p - 1) % $p;\n   \
    \ }\n    return $r;\n}", "    return 1 if ($n == 0);\n    return $p if ($n ==\
    \ 1);\n    return (modp(int($n/2), $p)**2 * (2*$n % 2 + 1)) % $p;\n}", "    my($result)\
    \ = 1;\n    if ($n == 0) {\n\treturn 1;\n    }\n    elsif ($n == 1) {\n\treturn\
    \ $result;\n    }\n    else {\n\t$result = 2;\n\twhile ($n > 1) {\n\t    $result\
    \ = ($result * $result) % $p;\n\t    $n = $n - 1;\n\t}\n\treturn $result;\n  \
    \  }\n}", "    return 1 unless $n;\n    my $c = modp($n >> 1, $p);\n    $c = ($c\
    \ * $c) % $p;\n    $c = ($c * 2) % $p if $n & 1;\n    $c;\n}", "    my $result\
    \ = 1;\n    my $i = 0;\n    for($i = 0; $i < $n; $i++){\n        $result = ($result\
    \ * 2) % $p;\n    }\n    return $result;\n}", "    my $result = 1;\n    for(my\
    \ $i = 0; $i < $n; $i++) {\n        $result = ($result * 2) % $p;\n    }\n   \
    \ return $result;\n}", "    use bignum;\n    my $result = 1;\n    while($n) {\n\
    \        if($n & 1) {\n            $result = ($result * 2) % $p;\n        }\n\
    \        $n >>= 1;\n    }\n    return $result;\n}", "    my $base = \"2\";\n \
    \   my $result = \"1\";\n    while ($n > 0) {\n        if ($n % 2) {\n       \
    \     $result = ($result * $base) % $p;\n        }\n        $base = ($base * $base)\
    \ % $p;\n        $n = int($n / 2);\n    }\n    return $result;\n}", "    my($r);\n\
    \    $r = 1;\n    while($n) {\n\tif($n & 1) {\n\t    $r = ($r * $p) % $MOD;\n\t\
    }\n\t$p = ($p * $p) % $MOD;\n\t$n = $n >> 1;\n    }\n    return $r;\n}", "   \
    \ my $result = 1;\n    while($n > 0) {\n        $result = ($result * 2) % $p;\n\
    \        $n--;\n    }\n    return $result;\n}", "    # modp(2*m, p) == modp(m,\
    \ p)**2 % p\n    return modp(int($n/2), $p)**2 % $p if ($n != int($n/2)*2);\n\
    \    return modp(($n-1)/2, $p)**2 * 2 % $p;\n}", "    return 0 if $n == 0;\n \
    \   my $r = 1;\n    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2 ==\
    \ 1;\n        $n /= 2;\n    }\n    return $r;\n}", "    if($n == 0) {\n      \
    \  return 1;\n    } elsif($n % 2 == 0) {\n        my $t = modp($n/2, $p);\n  \
    \      return ($t*$t) % $p;\n    } else {\n        return (($n % $p) * modp($n-1,\
    \ $p)) % $p;\n    }\n}", "    use bigint;\n    return 0 if $n == 0;\n    return\
    \ 1 if $n == 1;\n    my $a = modp($n >> 1, $p);\n    $a = ($a * $a) % $p;\n  \
    \  $a = ($a * 2) % $p if $n & 1;\n    return $a;\n}", "    return 1 if($n == 0);\n\
    \    return (modp($n-1, $p) * 2) % $p;\n}", "    my $base = 2;\n    my $result\
    \ = 1;\n    my $mod = 0;\n    my $pow = 0;\n    if ($n < 0) {\n        return\
    \ -modp(-$n, $p);\n    }\n    if ($p < 0) {\n        return -modp($n, -$p);\n\
    \    }\n    if ($n == 0) {\n        return 1;\n    }\n    if ($p == 0) {\n   \
    \     return 0;\n    }\n    $mod = $n % $p;\n    while ($n) {\n        $pow =\
    \ $mod % 2;\n        if ($pow) {\n            $result = ($result * $base) % $p;\n\
    \        }\n        $n = int($n / 2);\n        $mod = $n % 2;\n        $base =\
    \ ($base * $base) % $p;\n    }\n    return $result;\n}", "    return 0 if ($n\
    \ == 0);\n    my $a = 1;\n    my $b = 2;\n    my $pow = 2;\n    while ($pow <\
    \ $n) {\n        if ($pow < $n/2) {\n            $a = $a * $b % $p;\n        \
    \    $pow *= 2;\n        }\n        else {\n            $a = $a * modp($n - $pow,\
    \ $p) % $p;\n            last;\n        }\n    }\n    return $a;\n}", "    my($base,\
    \ $res) = (2, 1);\n    while ($n > 0) {\n        $res = ($res * $base) % $p if\
    \ $n & 1;\n        $base = ($base * $base) % $p;\n        $n >>= 1;\n    }\n \
    \   $res % $p;\n}", "    my $m = 1;\n    while($n > 0) {\n        if($n % 2 ==\
    \ 1) {\n            $m = ($m * 2) % $p;\n        }\n        $n = int($n / 2);\n\
    \    }\n    return $m;\n}", "    my $a = 1;\n    my $b = 0;\n    while ($n > 0)\
    \ {\n        if ($n % 2 == 1) {\n            $a = ($a * $p + $b) % $p;\n     \
    \   }\n        $b = ($p * $b + $b) % $p;\n        $n /= 2;\n    }\n    return\
    \ $a;\n}", "    return 1 if $n == 0;\n    my $sq = modp($n>>1, $p);\n    my $ret\
    \ = ($sq * $sq) % $p;\n    $ret = ($ret * 2) % $p if $n & 1;\n    return $ret;\n\
    }", "    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t    $r = ($r\
    \ * 2) % $p;\n\t}\n\t$n = int($n / 2);\n    }\n    return $r;\n}", "    my $r\
    \ = 1;\n    while ($n > 0) {\n        $r = ($r * 2) % $p if $n % 2;\n        $n\
    \ = int($n / 2);\n    }\n    return $r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
