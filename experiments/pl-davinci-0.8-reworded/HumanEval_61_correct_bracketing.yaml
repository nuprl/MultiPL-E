name: HumanEval_61_correct_bracketing
language: pl
prompt: "# brackets is a string of \"(\" and \")\".\n# return 1 if every opening bracket\
  \ has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\")\n# \"\"\n\
  # >>> correct_bracketing(\"()\")\n# 1\n# >>> correct_bracketing(\"(()())\")\n# 1\n\
  # >>> correct_bracketing(\")(()\")\n# \"\"\nsub correct_bracketing {\n    my($brackets)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n\
  \        if(eq_deeply($candidate->(\"()\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()())\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ()()(()())()\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"()()((()()())())(()()(()))\"),1)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ((()())))\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\")(()\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ((((\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\")\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ()()(()())())(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(\"()()(()())()))()\"),\"\")) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    for my $c (split //, $brackets) {\n       \
    \ if ($c eq \"(\") {\n            $count++;\n        } elsif ($c eq \")\") {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ '';\n        }\n    }\n    return $count == 0 ? 1 : '';\n}", "    my $bracket_count\
    \ = 0;\n    for my $char (split(\"\", $brackets)) {\n        $bracket_count++\
    \ if $char eq \"(\";\n        $bracket_count-- if $char eq \")\";\n        return\
    \ \"\" if $bracket_count < 0;\n    }\n    return \"\" if $bracket_count != 0;\n\
    \    return 1;\n}", "    my $return = 1;\n    my $brackets_array = [split('',\
    \ $brackets)];\n    my $opening_brackets = 0;\n    my $closing_brackets = 0;\n\
    \    foreach (@$brackets_array) {\n        if ($_ eq \"(\") {\n            $opening_brackets++;\n\
    \        } elsif ($_ eq \")\") {\n            $closing_brackets++;\n        }\n\
    \    }\n    if ($opening_brackets != $closing_brackets) {\n        $return = \"\
    \";\n    }\n    return $return;\n}", "    my $counter = 0;\n    for my $char (split(//,\
    \ $brackets)) {\n        $counter += ($char eq '(') ? 1 : -1;\n        return\
    \ '' if $counter < 0;\n    }\n    return $counter ? '' : 1;\n}", "    my $count\
    \ = 0;\n    my $max_count = 0;\n    my $i;\n    my $len = length($brackets);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (substr($brackets, $i, 1) eq\
    \ \"(\") {\n            $count++;\n            if ($count > $max_count) {\n  \
    \              $max_count = $count;\n            }\n        } elsif (substr($brackets,\
    \ $i, 1) eq \")\") {\n            $count--;\n            if ($count < 0) {\n \
    \               return \"\";\n            }\n        }\n    }\n    if ($count\
    \ != 0) {\n        return \"\";\n    }\n    return $max_count;\n}", "    my $correct_bracketing\
    \ = 1;\n    my $stack = new Stack();\n    foreach $char (split //, $brackets)\
    \ {\n        if ($char eq \"(\") {\n            $stack->push($char);\n       \
    \ } elsif ($char eq \")\") {\n            my $result = $stack->pop();\n      \
    \      if (!defined $result) {\n                $correct_bracketing = 0;\n   \
    \             last;\n            }\n        }\n    }\n    if ($stack->size() !=\
    \ 0) {\n        $correct_bracketing = 0;\n    }\n    return $correct_bracketing;\n\
    }", "    my @chars = split //, $brackets;\n    my $depth = 0;\n    foreach my\
    \ $char (@chars) {\n        if ($char eq \"(\") {\n            $depth++;\n   \
    \     } elsif ($char eq \")\") {\n            $depth--;\n        }\n        if\
    \ ($depth < 0) {\n            return \"\";\n        }\n    }\n    if ($depth ==\
    \ 0) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", "  \
    \  my $status = 1;\n    my $bracket = 0;\n    if ($brackets =~ /[^()]/) {\n  \
    \      return \"\";\n    }\n    for (my $i = 0; $i < length($brackets); $i++)\
    \ {\n        my $char = substr($brackets, $i, 1);\n        if ($char eq \"(\"\
    ) {\n            $bracket++;\n        } elsif ($char eq \")\") {\n           \
    \ $bracket--;\n        }\n        if ($bracket < 0) {\n            $status = \"\
    \";\n            last;\n        }\n    }\n    if ($bracket != 0) {\n        $status\
    \ = \"\";\n    }\n    return $status;\n}", "    my $ret = 1;\n    my $cnt = 0;\n\
    \    for my $b (split //, $brackets) {\n        if ($b eq \"(\") {\n         \
    \   $cnt++;\n        } elsif ($b eq \")\") {\n            $cnt--;\n        }\n\
    \        if ($cnt < 0) {\n            $ret = \"\";\n            last;\n      \
    \  }\n    }\n    return $ret;\n}", "    return if ($brackets =~ m/\\)\\(/);\n\
    \    return if ($brackets =~ m/^\\)/);\n    return if ($brackets =~ m/^\\($/);\n\
    \    $brackets =~ s/\\(/\\(/g;\n    $brackets =~ s/\\)/\\)/g;\n    return if (scalar(split(//,\
    \ $brackets)) % 2 != 0);\n    my $open = 0;\n    for my $char (split(//, $brackets))\
    \ {\n        if ($char eq '(') {\n            $open++;\n        } elsif ($char\
    \ eq ')') {\n            $open--;\n        }\n        return if ($open < 0);\n\
    \    }\n    return 1;\n}", "    my @bracket_stack = ();\n    for (my $i = 0; $i\
    \ < length($brackets); $i++) {\n        my $b = substr($brackets, $i, 1);\n  \
    \      if ($b eq \"(\") {\n            push(@bracket_stack, $b);\n        } elsif\
    \ ($b eq \")\") {\n            if (scalar(@bracket_stack) == 0) {\n          \
    \      return \"\";\n            } else {\n                pop(@bracket_stack);\n\
    \            }\n        }\n    }\n    if (scalar(@bracket_stack) == 0) {\n   \
    \     return 1;\n    } else {\n        return \"\";\n    }\n}", "    my @stack;\n\
    \    my $type;\n    foreach (split(//, $brackets)) {\n        if ($_ eq \"(\"\
    ) {\n            push(@stack, $_);\n        } elsif ($_ eq \")\") {\n        \
    \    if (pop(@stack) ne \"(\") {\n                return \"\";\n            }\n\
    \        }\n    }\n    return \"\" if @stack;\n    return 1;\n}", "    my $open_count\
    \ = 0;\n    my $close_count = 0;\n    my $start_count = 0;\n    for my $char (split(//,\
    \ $brackets)) {\n        if ($char eq \"(\") {\n            $open_count++;\n \
    \       } elsif ($char eq \")\") {\n            $close_count++;\n        }\n \
    \       if ($start_count > $open_count || $close_count > $open_count) {\n    \
    \        return \"\";\n        }\n    }\n    if ($open_count == $close_count)\
    \ {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my\
    \ $open_cnt = 0;\n    for my $b (split //, $brackets) {\n        if ($b eq '(')\
    \ {\n            $open_cnt++;\n        }\n        elsif ($b eq ')') {\n      \
    \      $open_cnt--;\n        }\n        else {\n            return \"\";\n   \
    \     }\n        if ($open_cnt < 0) {\n            return \"\";\n        }\n \
    \   }\n    return $open_cnt == 0 ? 1 : \"\";\n}", "    my($count) = 0;\n    my($i);\n\
    \    for($i = 0; $i < length($brackets); $i++) {\n\tif(substr($brackets, $i, 1)\
    \ eq \"(\") {\n\t    $count++;\n\t}\n\telsif(substr($brackets, $i, 1) eq \")\"\
    ) {\n\t    $count--;\n\t}\n\tif($count < 0) {\n\t    return \"\";\n\t}\n    }\n\
    \    if($count > 0) {\n\treturn \"\";\n    }\n    return 1;\n}", "    my $brackets_copy\
    \ = $brackets;\n    $brackets_copy =~ s/\\(//g;\n    if ($brackets_copy eq $brackets)\
    \ {\n        return \"\";\n    }\n    $brackets_copy = $brackets;\n    $brackets_copy\
    \ =~ s/\\)//g;\n    if ($brackets_copy eq $brackets) {\n        return \"\";\n\
    \    }\n    $brackets_copy = $brackets;\n    $brackets_copy =~ s/\\(//g;\n   \
    \ my $left = length($brackets) - length($brackets_copy);\n    my $right = length($brackets_copy);\n\
    \    return \"\" if $left != $right;\n    $brackets_copy = $brackets;\n    $brackets_copy\
    \ =~ s/\\(//g;\n    if ($brackets_copy eq $brackets) {\n        return \"\";\n\
    \    }\n    $brackets_copy = $brackets;\n    $brackets_copy =~ s/\\)//g;\n   \
    \ if ($brackets_copy eq $brackets) {\n        return \"\";\n    }\n    $brackets_copy\
    \ = $brackets;\n    $brackets_copy =~ s/\\(//g;\n    $left = length($brackets)\
    \ - length($brackets_copy);\n    $right = length($brackets_copy);\n    return\
    \ \"\" if $left != $right;\n    return 1;\n}", "    my $count = 0;\n    foreach\
    \ my $bracket (split(\"\", $brackets)) {\n        if($bracket eq \"(\") {\n  \
    \          $count++;\n        } elsif($bracket eq \")\") {\n            $count--;\n\
    \        }\n        if($count < 0) {\n            return \"\";\n        }\n  \
    \  }\n    return $count == 0 ? 1 : \"\";\n}", "    my $position = 0;\n    my $top\
    \ = -1;\n    my @bracketstack;\n    for (my $i = 0; $i < length($brackets); $i++)\
    \ {\n        if (substr($brackets, $i, 1) eq \"(\") {\n            $top++;\n \
    \           $bracketstack[$top] = substr($brackets, $i, 1);\n        } elsif (substr($brackets,\
    \ $i, 1) eq \")\") {\n            if ($top == -1) {\n                return \"\
    \";\n            } else {\n                $top--;\n            }\n        }\n\
    \    }\n    if ($top != -1) {\n        return \"\";\n    } else {\n        return\
    \ 1;\n    }\n}", "    my @open_stack = ();\n    my @close_stack = ();\n    my\
    \ @expected_close_stack = ();\n    my $is_correct = 1;\n    for my $bracket (split\
    \ //, $brackets) {\n        if ($bracket eq \"(\") {\n            push @open_stack,\
    \ $bracket;\n            push @expected_close_stack, $bracket;\n        } elsif\
    \ ($bracket eq \")\") {\n            if (scalar @open_stack == 0) {\n        \
    \        $is_correct = \"\";\n                last;\n            } else {\n  \
    \              push @close_stack, $bracket;\n                my $expected_close\
    \ = pop @expected_close_stack;\n                my $open = pop @open_stack;\n\
    \                if ($open ne $expected_close) {\n                    $is_correct\
    \ = \"\";\n                    last;\n                }\n            }\n     \
    \   }\n    }\n    if (scalar @open_stack > 0) {\n        $is_correct = \"\";\n\
    \    }\n    return $is_correct;\n}", "    my $count = 0;\n    for my $bracket\
    \ (split //, $brackets) {\n        if ($bracket eq \"(\") {\n            $count++;\n\
    \        } elsif ($bracket eq \")\") {\n            $count--;\n        }\n   \
    \     if ($count < 0) {\n            return \"\";\n        }\n    }\n    return\
    \ $count == 0 ? 1 : \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
