name: HumanEval_69_search
language: pl
prompt: "# You are given a non-empty array of positive integers. Return the greatest\
  \ integer that is greater than \n# zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n# The frequency of an integer is the number\
  \ of times it appears in the array.\n# If no such a value exist, return -1.\n# Examples:\n\
  # >>> search([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n\
  # 3\n# >>> search([5, 5, 4, 4, 4])\n# -1\nsub search {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n\
  \        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4,\
  \ 1, 4, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([3, 3]),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8,\
  \ 8, 8]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8,\
  \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8,\
  \ 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6,\
  \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 9, 10, 1, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6,\
  \ 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5,\
  \ 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1,\
  \ 10, 3, 6, 1, 8]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1,\
  \ 10, 7, 5, 6, 7, 6, 7, 7, 6]),1)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @a = sort {$a <=> $b} @$lst;\n    my %h;", "    my %counts;\n\
    \    for my $e (@$lst) {\n        $counts{$e}++;\n    }\n    # -1 is the default\
    \ value.\n    # If the first test fails, -1 is returned.\n    # Otherwise, we\
    \ return the last value checked.\n    return -1 if not exists $counts{1};\n  \
    \  return -1 if not exists $counts{2};\n    return -1 if not exists $counts{3};\n\
    \    return -1 if not exists $counts{4};\n    return -1 if not exists $counts{5};\n\
    \    return 5 if $counts{5} >= 5;\n    return 4 if $counts{4} >= 4;\n    return\
    \ 3 if $counts{3} >= 3;\n    return 2 if $counts{2} >= 2;\n    return 1 if $counts{1}\
    \ >= 1;\n    return -1;\n}", "    my %frequencies;\n    for my $x (@$lst) {\n\
    \        $frequencies{$x}++;\n    }\n    my $n = 0;\n    for my $x (sort {$a <=>\
    \ $b} keys %frequencies) {\n        if ($x == $frequencies{$x}) {\n          \
    \  $n = $x;\n        }\n    }\n    if ($n == 0) {\n        $n = -1;\n    }\n \
    \   return $n;\n}", "    my %counts;\n    map{ $counts{$_} += 1 } @$lst;\n   \
    \ foreach my $value (reverse sort{ $a <=> $b } keys %counts){\n        if ($counts{$value}\
    \ >= $value){\n            return $value;\n        }\n    }\n    return -1;\n}",
  "    my %ct = ();\n    foreach (@$lst) {\n        $ct{$_}++;\n    }\n    my $res\
    \ = -1;\n    foreach my $key (keys %ct) {\n        if ($key <= $ct{$key} && $key\
    \ > $res) {\n            $res = $key;\n        }\n    }\n    return $res;\n}",
  "    return -1 if @$lst == 0;\n    my %hash = ();\n    foreach my $number (@$lst)\
    \ {\n        $hash{$number} = 1 if not exists $hash{$number};\n        $hash{$number}++;\n\
    \    }\n    my $greatest_number = 0;\n    foreach my $key (keys %hash) {\n   \
    \     if ($key <= $hash{$key} and $key > $greatest_number) {\n            $greatest_number\
    \ = $key;\n        }\n    }\n    return $greatest_number;\n}", "    my @sorted\
    \ = sort {$a <=> $b} @$lst;\n    my $prev = $sorted[0];\n    my $count = 1;\n\
    \    for my $num (@sorted[1..$#sorted]) {\n        if ($num == $prev) {\n    \
    \        $count += 1;\n        }\n        else {\n            if ($count >= $prev)\
    \ {\n                return $prev;\n            }\n            $prev = $num;\n\
    \            $count = 1;\n        }\n    }\n    if ($count >= $prev) {\n     \
    \   return $prev;\n    }\n    return -1;\n}", "    my $cnt = {};\n    my $max\
    \ = -1;\n    foreach my $item (@$lst) {\n        $cnt->{$item}++;\n        if\
    \ ($cnt->{$item} >= $item && $item > $max) {\n            $max = $item;\n    \
    \    }\n    }\n    return $max;\n}", "    my $hash;\n    my $max = 0;\n    my\
    \ $ret = -1;\n    foreach (@$lst) {\n        if (defined($hash->{$_})) {\n   \
    \         $hash->{$_}++;\n        } else {\n            $hash->{$_} = 1;\n   \
    \     }\n        if ($hash->{$_} >= $_) {\n            if ($_ > $max) {\n    \
    \            $max = $_;\n                $ret = $_;\n            }\n        }\n\
    \    }\n    return $ret;\n}", "    my %counts;\n    foreach my $num (@$lst) {\n\
    \        $counts{$num}++;\n    }\n    my @keys = sort {$a <=> $b} keys %counts;\n\
    \    for my $i (0..$#keys) {\n        my $key = $keys[$i];\n        if ($key <=\
    \ $counts{$key}) {\n            return $key;\n        }\n    }\n    return -1;\n\
    }", "    # Your code here\n}", "    my $i = 0;\n    my $j = 0;\n    for($i = 0;\
    \ $i < @$lst; $i++){\n        $j = $lst->[$i];\n        if($j > 0 && $j <= @$lst){\n\
    \            my $frequency = frequency($lst, $j);\n            if($frequency >=\
    \ $j){\n                return $j;\n            }\n        }\n    }\n    return\
    \ -1;\n}", "    my $num;\n    my $cnt;\n    foreach my $e (@$lst) {\n        $num\
    \ = $e if !defined($num) || $num < $e;\n        $cnt->{$e}++;\n    }\n    return\
    \ -1 if $num > $cnt->{$num};\n    return $num;\n}", "    my %freq;\n    $freq{$_}++\
    \ for @$lst;\n    my @numbers = sort {$b <=> $a} keys %freq;\n    for my $number\
    \ (@numbers) {\n        if ($number <= $freq{$number}) {\n            return $number;\n\
    \        }\n    }\n    return -1;\n}", "    my %hash = ();\n    for (@$lst) {\n\
    \        my $val = $_;\n        $hash{$val}++;\n    }\n    my $max = -1;\n   \
    \ foreach my $k (keys %hash) {\n        if ($k <= $hash{$k} && $k > $max) {\n\
    \            $max = $k;\n        }\n    }\n    return $max;\n}", "    # Place\
    \ your code here\n}", "    my %hash;\n    for my $elem (@$lst) {\n        $hash{$elem}++;\n\
    \    }\n    for my $elem (sort keys %hash) {\n        return $elem if $elem <=\
    \ $hash{$elem};\n    }\n    return -1;\n}\nprint join(\" \", search([4, 1, 2,\
    \ 2, 3, 1])), \"\\n\";\nprint join(\" \", search([1, 2, 2, 3, 3, 3, 4, 4, 4])),\
    \ \"\\n\";\nprint join(\" \", search([5, 5, 4, 4, 4])), \"\\n\";", "    my %cnt;\n\
    \    for my $item (@$lst) {\n        $cnt{$item}++;\n    }\n    my $i = keys %cnt;\n\
    \    for (; $i > 0; $i--) {\n        if ($cnt{$i} >= $i) {\n            return\
    \ $i;\n        }\n    }\n    return -1;\n}", "    my %freq = ();\n    my @lst\
    \ = @$lst;\n    for my $i (@lst) {\n        $freq{$i} += 1;\n    }\n    my @sorted\
    \ = sort {$a <=> $b} keys %freq;\n    my $best = -1;\n    for my $i (@sorted)\
    \ {\n        if ($freq{$i} >= $i) {\n            $best = $i;\n        }\n    }\n\
    \    return $best;\n}", "    my $max = 0;\n    my %tally;\n    foreach my $x (@$lst)\
    \ {\n        if ($x > $max) {\n            $max = $x;\n        }\n        $tally{$x}++;\n\
    \    }\n    for (my $i = $max; $i > 0; $i--) {\n        return $i if ($tally{$i}\
    \ && $tally{$i} >= $i);\n    }\n    return -1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
