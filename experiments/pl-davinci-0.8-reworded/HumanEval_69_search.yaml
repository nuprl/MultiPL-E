name: HumanEval_69_search
language: pl
prompt: "# You are given a non-empty array of positive integers. Return the greatest\
  \ integer that is greater than \n# zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n# The frequency of an integer is the number\
  \ of times it appears in the array.\n# If no such a value exist, return -1.\n# Examples:\n\
  # >>> search([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n\
  # 3\n# >>> search([5, 5, 4, 4, 4])\n# -1\nsub search {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n\
  \        if(eq_deeply($candidate->([5, 5, 5, 5, 1]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 4,\
  \ 1, 4, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([3, 3]),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 8, 8, 8, 8,\
  \ 8, 8]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([2, 3, 3, 2, 2]),2)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 7, 8, 8, 4, 8,\
  \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 8,\
  \ 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([8, 8, 3, 6, 5, 6, 4]),-1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6,\
  \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 9, 10, 1, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6,\
  \ 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]),4)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 4, 1, 5, 1, 5,\
  \ 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]),4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),-1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([5, 4, 10, 2, 1, 1,\
  \ 10, 3, 6, 1, 8]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1,\
  \ 10, 7, 5, 6, 7, 6, 7, 7, 6]),1)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([3, 10, 10, 9, 2]),-1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @a = sort {$a <=> $b} @$lst;\n    my %h;", "    my %counts;\n\
    \    for my $e (@$lst) {\n        $counts{$e}++;\n    }\n    # -1 is the default\
    \ value.\n    # If the first test fails, -1 is returned.\n    # Otherwise, we\
    \ return the last value checked.\n    return -1 if not exists $counts{1};\n  \
    \  return -1 if not exists $counts{2};\n    return -1 if not exists $counts{3};\n\
    \    return -1 if not exists $counts{4};\n    return -1 if not exists $counts{5};\n\
    \    return 5 if $counts{5} >= 5;\n    return 4 if $counts{4} >= 4;\n    return\
    \ 3 if $counts{3} >= 3;\n    return 2 if $counts{2} >= 2;\n    return 1 if $counts{1}\
    \ >= 1;\n    return -1;\n}", "    my %frequencies;\n    for my $x (@$lst) {\n\
    \        $frequencies{$x}++;\n    }\n    my $n = 0;\n    for my $x (sort {$a <=>\
    \ $b} keys %frequencies) {\n        if ($x == $frequencies{$x}) {\n          \
    \  $n = $x;\n        }\n    }\n    if ($n == 0) {\n        $n = -1;\n    }\n \
    \   return $n;\n}", "    my %counts;\n    map{ $counts{$_} += 1 } @$lst;\n   \
    \ foreach my $value (reverse sort{ $a <=> $b } keys %counts){\n        if ($counts{$value}\
    \ >= $value){\n            return $value;\n        }\n    }\n    return -1;\n}",
  "    my %ct = ();\n    foreach (@$lst) {\n        $ct{$_}++;\n    }\n    my $res\
    \ = -1;\n    foreach my $key (keys %ct) {\n        if ($key <= $ct{$key} && $key\
    \ > $res) {\n            $res = $key;\n        }\n    }\n    return $res;\n}",
  "    return -1 if @$lst == 0;\n    my %hash = ();\n    foreach my $number (@$lst)\
    \ {\n        $hash{$number} = 1 if not exists $hash{$number};\n        $hash{$number}++;\n\
    \    }\n    my $greatest_number = 0;\n    foreach my $key (keys %hash) {\n   \
    \     if ($key <= $hash{$key} and $key > $greatest_number) {\n            $greatest_number\
    \ = $key;\n        }\n    }\n    return $greatest_number;\n}", "    my @sorted\
    \ = sort {$a <=> $b} @$lst;\n    my $prev = $sorted[0];\n    my $count = 1;\n\
    \    for my $num (@sorted[1..$#sorted]) {\n        if ($num == $prev) {\n    \
    \        $count += 1;\n        }\n        else {\n            if ($count >= $prev)\
    \ {\n                return $prev;\n            }\n            $prev = $num;\n\
    \            $count = 1;\n        }\n    }\n    if ($count >= $prev) {\n     \
    \   return $prev;\n    }\n    return -1;\n}", "    my $cnt = {};\n    my $max\
    \ = -1;\n    foreach my $item (@$lst) {\n        $cnt->{$item}++;\n        if\
    \ ($cnt->{$item} >= $item && $item > $max) {\n            $max = $item;\n    \
    \    }\n    }\n    return $max;\n}", "    my $hash;\n    my $max = 0;\n    my\
    \ $ret = -1;\n    foreach (@$lst) {\n        if (defined($hash->{$_})) {\n   \
    \         $hash->{$_}++;\n        } else {\n            $hash->{$_} = 1;\n   \
    \     }\n        if ($hash->{$_} >= $_) {\n            if ($_ > $max) {\n    \
    \            $max = $_;\n                $ret = $_;\n            }\n        }\n\
    \    }\n    return $ret;\n}", "    my %counts;\n    foreach my $num (@$lst) {\n\
    \        $counts{$num}++;\n    }\n    my @keys = sort {$a <=> $b} keys %counts;\n\
    \    for my $i (0..$#keys) {\n        my $key = $keys[$i];\n        if ($key <=\
    \ $counts{$key}) {\n            return $key;\n        }\n    }\n    return -1;\n\
    }", "    # Your code here\n}", "    my $i = 0;\n    my $j = 0;\n    for($i = 0;\
    \ $i < @$lst; $i++){\n        $j = $lst->[$i];\n        if($j > 0 && $j <= @$lst){\n\
    \            my $frequency = frequency($lst, $j);\n            if($frequency >=\
    \ $j){\n                return $j;\n            }\n        }\n    }\n    return\
    \ -1;\n}", "    my $num;\n    my $cnt;\n    foreach my $e (@$lst) {\n        $num\
    \ = $e if !defined($num) || $num < $e;\n        $cnt->{$e}++;\n    }\n    return\
    \ -1 if $num > $cnt->{$num};\n    return $num;\n}", "    my %freq;\n    $freq{$_}++\
    \ for @$lst;\n    my @numbers = sort {$b <=> $a} keys %freq;\n    for my $number\
    \ (@numbers) {\n        if ($number <= $freq{$number}) {\n            return $number;\n\
    \        }\n    }\n    return -1;\n}", "    my %hash = ();\n    for (@$lst) {\n\
    \        my $val = $_;\n        $hash{$val}++;\n    }\n    my $max = -1;\n   \
    \ foreach my $k (keys %hash) {\n        if ($k <= $hash{$k} && $k > $max) {\n\
    \            $max = $k;\n        }\n    }\n    return $max;\n}", "    # Place\
    \ your code here\n}", "    my %hash;\n    for my $elem (@$lst) {\n        $hash{$elem}++;\n\
    \    }\n    for my $elem (sort keys %hash) {\n        return $elem if $elem <=\
    \ $hash{$elem};\n    }\n    return -1;\n}\nprint join(\" \", search([4, 1, 2,\
    \ 2, 3, 1])), \"\\n\";\nprint join(\" \", search([1, 2, 2, 3, 3, 3, 4, 4, 4])),\
    \ \"\\n\";\nprint join(\" \", search([5, 5, 4, 4, 4])), \"\\n\";", "    my %cnt;\n\
    \    for my $item (@$lst) {\n        $cnt{$item}++;\n    }\n    my $i = keys %cnt;\n\
    \    for (; $i > 0; $i--) {\n        if ($cnt{$i} >= $i) {\n            return\
    \ $i;\n        }\n    }\n    return -1;\n}", "    my %freq = ();\n    my @lst\
    \ = @$lst;\n    for my $i (@lst) {\n        $freq{$i} += 1;\n    }\n    my @sorted\
    \ = sort {$a <=> $b} keys %freq;\n    my $best = -1;\n    for my $i (@sorted)\
    \ {\n        if ($freq{$i} >= $i) {\n            $best = $i;\n        }\n    }\n\
    \    return $best;\n}", "    my $max = 0;\n    my %tally;\n    foreach my $x (@$lst)\
    \ {\n        if ($x > $max) {\n            $max = $x;\n        }\n        $tally{$x}++;\n\
    \    }\n    for (my $i = $max; $i > 0; $i--) {\n        return $i if ($tally{$i}\
    \ && $tally{$i} >= $i);\n    }\n    return -1;\n}", "    my %hash;\n    foreach(@$lst)\
    \ {\n        ++$hash{$_};\n    }\n    foreach(keys %hash) {\n        return $_\
    \ if $_ <= $hash{$_};\n    }\n    return -1;\n}\nuse Test::More;\nis(search([4,\
    \ 1, 2, 2, 3, 1]), 2);\nis(search([1, 2, 2, 3, 3, 3, 4, 4, 4]), 3);\nis(search([5,\
    \ 5, 4, 4, 4]), -1);\ndone_testing();", "    my $count = 1;\n    # count the frequency\
    \ of each number in the list\n    for my $i (0 .. $#$lst) {\n        for my $j\
    \ (0 .. $#$lst) {\n            if ($lst->[$i] == $lst->[$j]) {\n             \
    \   $count++;\n            }\n        }\n        # if the frequency is greater\
    \ than or equal to the value of the integer\n        # it self, return the value\
    \ of the integer\n        if ($count >= $lst->[$i]) {\n            return $lst->[$i];\n\
    \        }\n        $count = 1;\n    }\n    # else return -1\n    return -1;\n\
    }", "    my %map = ();\n    foreach my $n (@$lst) {\n        $map{$n}++;\n   \
    \ }\n    my $max = -1;\n    foreach my $n (keys %map) {\n        if ($n > $map{$n})\
    \ {\n            next;\n        }\n        if ($n > $max) {\n            $max\
    \ = $n;\n        }\n    }\n    return $max;\n}", "    my %hash;\n    for (@$lst)\
    \ {\n        $hash{$_}++;\n    }\n    my @sort_lst = sort {$a <=> $b} @$lst;\n\
    \    for my $key (@sort_lst) {\n        if ($hash{$key} >= $key) {\n         \
    \   return $key;\n        }\n    }\n    return -1;\n}", "    my %freq;\n    foreach\
    \ my $i ( @$lst ) {\n        $freq{$i}++;\n    }\n    foreach my $i ( @$lst )\
    \ {\n        return $i if ( $i > 0 && $freq{$i} >= $i );\n    }\n    return -1;\n\
    }", "    my $N = scalar(@$lst);\n    my @freq = ();\n    foreach my $i (0..$N-1)\
    \ {\n        $freq[$lst->[$i]]++;\n    }\n    foreach my $i (1..$N) {\n      \
    \  if ($freq[$i] >= $i) {\n            return $i;\n        }\n    }\n    return\
    \ -1;\n}", "    my %ele = ();\n    foreach my $i (@$lst) {\n        if (exists\
    \ $ele{$i}) {\n            $ele{$i} += 1;\n        } else {\n            $ele{$i}\
    \ = 1;\n        }\n    }\n    my $max = -1;\n    foreach my $key (keys %ele) {\n\
    \        if ($key <= $ele{$key} && $key > $max) {\n            $max = $key;\n\
    \        }\n    }\n    return $max;\n}", "    my %lst;\n    foreach (@$lst) {\n\
    \        $lst{$_}++;\n    }\n    for (reverse sort {$a <=> $b} keys %lst) {\n\
    \        return $_ if $_ <= $lst{$_};\n    }\n    return -1;\n}", "    my $max\
    \ = 0;\n    my %freq;\n    foreach my $val (@$lst) {\n        ++$freq{$val};\n\
    \        $max = $val if $val > $max;\n    }\n    for (my $i = $max; $i > 0; --$i)\
    \ {\n        return $i if $freq{$i} >= $i;\n    }\n    return -1;\n}", "    my\
    \ %count;\n    for (@$lst) {\n        $count{$_}++;\n    }\n    for (sort {$a\
    \ <=> $b} keys %count) {\n        return $_ if $count{$_} >= $_;\n    }\n    return\
    \ -1;\n}", "    my %freq = ();\n    foreach my $n (@$lst) {\n        $freq{$n}\
    \ += 1;\n    }\n    my $max = -1;\n    foreach my $n (keys %freq) {\n        if($n\
    \ <= $freq{$n} && $n > $max) {\n            $max = $n;\n        }\n    }\n   \
    \ return $max;\n}", "    my $max = -1;\n    my %map = ();\n    for my $n (@$lst)\
    \ {\n        next if !$n;\n        if(exists $map{$n}) {\n            $map{$n}++;\n\
    \        } else {\n            $map{$n} = 1;\n        }\n        if($map{$n} >=\
    \ $n && $n > $max) {\n            $max = $n;\n        }\n    }\n    return $max;\n\
    }", "    my %count;\n    for my $n (@$lst) {\n        $count{$n}++;\n    }\n \
    \   for my $n (sort {$b <=> $a} keys %count) {\n        return $n if $count{$n}\
    \ >= $n;\n    }\n    return -1;\n}", "    my %count;\n    for my $i (@$lst) {\n\
    \        $count{$i}++;\n    }\n    for my $n (reverse sort {$a <=> $b} keys %count)\
    \ {\n        return $n if $count{$n} >= $n;\n    }\n    return -1;\n}", '    my
    $max = $#$lst;', "    my %freq;\n    for my $x (@$lst) {\n        $freq{$x}++;\n\
    \    }\n    for my $x (reverse sort keys %freq) {\n        if ($freq{$x} >= $x)\
    \ {\n            return $x;\n        }\n    }\n    return -1;\n}", "    my $max\
    \ = 0;\n    my $i;\n    foreach my $el ( @$lst ) {\n        if( $el > $max ) {\n\
    \            $max = $el;\n        }\n    }\n    my @freq = (0) x $max;\n    foreach\
    \ my $el ( @$lst ) {\n        $freq[$el-1]++;\n    }\n    for( $i = $max-1; $i\
    \ >= 0; $i-- ) {\n        if( $freq[$i] >= $i+1 ) {\n            return $i+1;\n\
    \        }\n    }\n    return -1;\n}", "    my $max = 0;\n    my $max_freq = 0;\n\
    \    my %counts;\n    for my $num (@$lst) {\n        $counts{$num}++;\n      \
    \  if ($num > $max) {\n            $max = $num;\n        }\n    }\n    for my\
    \ $i (1..$max) {\n        if ($counts{$i} >= $i) {\n            $max_freq = $i;\n\
    \        }\n    }\n    if ($max_freq == 0) {\n        return -1;\n    }\n    return\
    \ $max_freq;\n}", "    $freq{$_}++ for @$lst;\n    my @sort_keys = sort {$b <=>\
    \ $a} keys %freq;\n    while (@sort_keys) {\n        my $val = shift @sort_keys;\n\
    \        if ($val == $freq{$val}) {\n            return $val;\n        }\n   \
    \ }\n    return -1;\n}", "    # Your code here\n    my %hash = ();\n    foreach\
    \ my $num (@$lst) {\n    \t$hash{$num} = $hash{$num} + 1;\n    }\n    my @sorted\
    \ = sort {$b <=> $a} keys %hash;\n    foreach my $num (@sorted) {\n    \tif ($num\
    \ <= $hash{$num}) {\n    \t\treturn $num;\n    \t}\n    }\n    return -1;\n}",
  "    my $max = max($lst);\n    my $max_times = max(count($lst));\n    return ($max\
    \ >= $max_times) ? -1 : $max_times;\n}", "    my %c;\n    $c{$_}++ for @$lst;\n\
    \    for my $k (keys %c) {\n        return $k if $k <= $c{$k};\n    }\n    return\
    \ -1;\n}", "    my $cnt = 0;\n    my $largest = -1;\n    my %store;\n    for my\
    \ $i (@$lst) {\n        if( exists $store{$i} ) {\n            $store{$i}++;\n\
    \        } else {\n            $store{$i} = 1;\n        }\n    }\n    while(my($k,\
    \ $v) = each %store) {\n        if( $k <= $v ) {\n            if( $k > $largest\
    \ ) {\n                $largest = $k;\n            }\n        }\n    }\n    return\
    \ $largest;\n}", "    my %f;\n    for my $n (@$lst) {\n        $f{$n}++;\n   \
    \ }\n    for my $k (sort {$b <=> $a} keys %f) {\n        return $k if $k <= $f{$k};\n\
    \    }\n    return -1;\n}", "    my $max = 0;\n    my $freq = 0;\n    my %hash\
    \ = ();\n    foreach my $el (@$lst) {\n        $hash{$el} += 1;\n        if($el\
    \ > $max) {\n            $max = $el;\n        }\n    }\n    foreach my $key (sort\
    \ {$a <=> $b} keys %hash) {\n        if ($key > $freq && $hash{$key} >= $key)\
    \ {\n            $freq = $key;\n        }\n    }\n    if ($freq == 0) {\n    \
    \    return -1;\n    }\n    return $freq;\n}", "    my $max = 0;\n    my $result\
    \ = -1;\n    for my $int (@$lst) {\n        if ($int > $max) {\n            $max\
    \ = $int;\n        }\n    }\n    for my $int (1..$max) {\n        my $freq = 0;\n\
    \        for my $target (@$lst) {\n            if ($target == $int) {\n      \
    \          $freq++;\n            }\n        }\n        if ($freq >= $int) {\n\
    \            $result = $int;\n        }\n    }\n    return $result;\n}", "   \
    \ my %counts;\n    for my $num (@$lst) {\n        $counts{$num} = $counts{$num}\
    \ + 1;\n    }\n    my @values = sort { $a <=> $b } keys %counts;\n    my @nums\
    \ = sort { $a <=> $b } @$lst;\n    my $current = 0;\n    for my $num (@nums) {\n\
    \        if ($num > $current) {\n            $current = $num;\n        }\n   \
    \     if ($counts{$current} >= $current) {\n            return $current;\n   \
    \     }\n    }\n    return -1;\n}", "    my %lst;\n    map {$lst{$_}++} @$lst;\n\
    \    my $max = 0;\n    foreach my $key (keys %lst) {\n        if ($lst{$key} >=\
    \ $key && $key > $max) {\n            $max = $key;\n        }\n    }\n    if ($max\
    \ > 0) {\n        return $max;\n    } else {\n        return -1;\n    }\n}", " \
    \   my $max_res = -1;\n    my %count = ();\n    foreach my $i (@$lst) {\n    \
    \    $count{$i}++;\n    }\n    foreach my $i (@$lst) {\n        if ($count{$i}\
    \ >= $i && $i > $max_res) {\n            $max_res = $i;\n        }\n    }\n  \
    \  return $max_res;\n}", "    my $f = frequency($lst);\n    my $i = 0;\n    my\
    \ $j = -1;\n    foreach my $x (sort {$a <=> $b} keys %$f) {\n        if ($f->{$x}\
    \ >= $x) {\n            $j = $x;\n        }\n    }\n    return $j;\n}", "    my\
    \ %hash;\n    foreach my $i (@$lst) {\n        $hash{$i} = $hash{$i} + 1;\n  \
    \  }\n    my $result = -1;\n    foreach my $k (keys %hash) {\n        if ($k <=\
    \ $hash{$k} && $k > $result) {\n            $result = $k;\n        }\n    }\n\
    \    return $result;\n}", "    my $N = @$lst;\n    my @counts = ();\n    for (my\
    \ $i = 0; $i < $N; $i++) {\n        my $val = $lst->[$i];\n        if (!defined($counts[$val]))\
    \ {\n            $counts[$val] = 0;\n        }\n        $counts[$val]++;\n   \
    \ }\n    for (my $i = $N; $i >= 1; $i--) {\n        if (defined($counts[$i]) &&\
    \ $counts[$i] >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n\
    }", "    my($val) = undef;\n    my($i) = 0;\n    my($cnt) = 0;\n    my($j) = 0;\n\
    \    for($i = 0; $i < scalar(@$lst); $i = $i + 1) {\n        $val = $lst->[$i];\n\
    \        $cnt = 0;\n        for($j = 0; $j < scalar(@$lst); $j = $j + 1) {\n \
    \           if($lst->[$j] == $val) {\n                $cnt = $cnt + 1;\n     \
    \       }\n        }\n        if($cnt >= $val) {\n            return $val;\n \
    \       }\n    }\n    return -1;\n}", "    my %counts;\n    foreach my $x (@$lst)\
    \ {\n        $counts{$x} += 1;\n    }\n    my $result = 0;\n    for my $x (reverse(1..$#$lst))\
    \ {\n        if (exists($counts{$x}) && $counts{$x} >= $x) {\n            $result\
    \ = $x;\n            last;\n        }\n    }\n    return $result;\n}", "    my\
    \ $ret = -1;\n    my %count;\n    $count{$_}++ for (@$lst);\n    foreach my $int\
    \ (sort {$a <=> $b} keys %count) {\n        if ($int <= $count{$int}) {\n    \
    \        $ret = $int;\n        }\n    }\n    return $ret;\n}", "    # TODO\n}",
  "    my %count;\n    for my $i (@$lst) {\n        $count{$i}++;\n    }\n    my @sorted\
    \ = sort {$b<=>$a} keys %count;\n    for my $i (@sorted) {\n        if ($count{$i}\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}", "  \
    \  my $ret = -1;\n    my %count;\n    @count{@$lst} = ();\n    # print \"@count{@$lst}\\\
    n\";\n    foreach my $item (@$lst) {\n        my $freq = scalar(keys %count);\n\
    \        # print \"item=$item freq=$freq ret=$ret\\n\";\n        if ($item <=\
    \ $freq && $item > $ret) {\n            $ret = $item;\n        }\n        delete\
    \ $count{$item};\n    }\n    return $ret;\n}", "    my $len = @$lst;\n    my %freq;\n\
    \    for my $i (@$lst) {\n        $freq{$i} += 1;\n    }\n    for my $j (sort\
    \ {$b <=> $a} keys %freq) {\n        if($j <= $freq{$j}) {\n            return\
    \ $j;\n        }\n    }\n    return -1;\n}", "    my @arr = @$lst;\n    my %hash;\n\
    \    for my $el(@arr) {\n        $hash{$el}++;\n    }\n    my $res = -1;\n   \
    \ for my $k(keys %hash) {\n        if ($k <= $hash{$k} && $k > $res) {\n     \
    \       $res = $k;\n        }\n    }\n    return $res;\n}", "    my %hash = ();\n\
    \    foreach my $e (@$lst) {\n        $hash{$e}++;\n    }\n    my $max = -1;\n\
    \    foreach my $k (keys %hash) {\n        if($k >= $hash{$k} && $k > $max) {\n\
    \            $max = $k;\n        }\n    }\n    return $max;\n}", "    my %freq\
    \ = ();\n    foreach my $num (@$lst) {\n        $freq{$num} = 0 if not exists\
    \ $freq{$num};\n        $freq{$num} += 1;\n    }\n    my $out = -1;\n    foreach\
    \ my $num (sort {$a <=> $b} keys %freq) {\n        if ($num <= $freq{$num}) {\n\
    \            $out = $num;\n        }\n    }\n    return $out;\n}", "    my @frequency\
    \ = ();\n    foreach my $item (@$lst) {\n        $frequency[$item] += 1;\n   \
    \ }\n    my $max = 0;\n    foreach my $item (@$lst) {\n        if ($frequency[$item]\
    \ >= $item) {\n            $max = $item;\n        }\n    }\n    if ($max == 0)\
    \ {\n        return -1;\n    }\n    return $max;\n}", "    my($x, $freq, $max);\n\
    \    $max = -1;\n    foreach $x (@$lst) {\n        $freq = scalar(grep($_ == $x,\
    \ @$lst));\n        $max = $x if $x > $max && $freq >= $x;\n    }\n    return\
    \ $max;\n}", "    my %counts;\n    foreach my $val (@$lst) {\n        $counts{$val}++;\n\
    \    }\n    my @sorted = sort {$counts{$b} <=> $counts{$a}} keys %counts;\n  \
    \  foreach my $val (@sorted) {\n        if ($counts{$val} >= $val) {\n       \
    \     return $val;\n        }\n    }\n    return -1;\n}", "    my %count;\n  \
    \  ++$count{$_} for @$lst;\n    my $result = -1;\n    for my $el (@$lst) {\n \
    \       if ($count{$el} >= $el && $el > $result) {\n            $result = $el;\n\
    \        }\n    }\n    return $result;\n}", "    my $max = $#$lst;\n    foreach\
    \ my $t (sort {$b <=> $a} @$lst) {\n        return $t if ($t <= $max && $$lst[$t]\
    \ >= $t);\n    }\n    return -1;\n}", "    my $max = -1;\n    my %freq;\n    foreach\
    \ my $n (@$lst) {\n        ++$freq{$n};\n        if ($freq{$n} >= $n && $n > $max)\
    \ {\n            $max = $n;\n        }\n    }\n    return $max;\n}", "    my $cnt\
    \ = 1;\n    my $max = $lst->[0];\n    #my $max_cnt = 0;\n    my $max_cnt = 1;\n\
    \    my $last = $lst->[0];\n    for (my $i = 1; $i < scalar(@$lst); $i++) {\n\
    \        if ($lst->[$i] == $last) {\n            $cnt++;\n        } else {\n \
    \           $last = $lst->[$i];\n            $cnt = 1;\n        }\n        if\
    \ ($lst->[$i] > $max and $cnt >= $lst->[$i]) {\n            $max = $lst->[$i];\n\
    \            $max_cnt = $cnt;\n        }\n    }\n    if ($max_cnt >= $max) {\n\
    \        return $max;\n    } else {\n        return -1;\n    }\n}", "    my $h\
    \ = {};\n    for(@$lst) {\n        $h->{$_}++\n    }\n    for(@$lst) {\n     \
    \   if($h->{$_} >= $_) {\n            return $_;\n        }\n    }\n    return\
    \ -1;\n}", "    return -1 if @$lst == 0;\n    my $max = max(@$lst);\n    my %count;\n\
    \    $count{$_}++ for @$lst;\n    for my $i (sort {$b <=> $a} keys %count) {\n\
    \        return $i if $i >= $count{$i};\n    }\n    return -1;\n}", "    my %count;\n\
    \    foreach (@$lst) {\n        $count{$_}++;\n    }\n    my $max = -1;\n    foreach\
    \ (keys %count) {\n        if ($count{$_} >= $_) {\n            $max = $_;\n \
    \       }\n    }\n    return $max;\n}", "    my %counts;\n    for my $n (@$lst)\
    \ {\n        $counts{$n}++;\n    }\n    my @keys = sort { $b <=> $a } keys %counts;\n\
    \    for my $k (@keys) {\n        return $k if $k <= $counts{$k};\n    }\n   \
    \ return -1;\n}", "    # Returns a hash whose keys are the frequencies of the\
    \ unique elements of the input.\n    my %frequencies = ();\n    for (@$lst) {\n\
    \        $frequencies{$_}++;\n    }\n    # We return -1 if all the values in the\
    \ hash are equal to 1.\n    return -1 if (all {$_ == 1} values %frequencies);\n\
    \    # Now we return the highest element in the hash\n    # whose frequency is\
    \ greater than or equal to the element itself.\n    my @frequencies = reverse\
    \ sort {$a <=> $b} keys %frequencies;\n    for (@frequencies) {\n        return\
    \ $_ if ($frequencies{$_} >= $_);\n    }\n}\nprint search([4, 1, 2, 2, 3, 1]);\n\
    print \"\\n\";\nprint search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\nprint \"\\n\";\nprint\
    \ search([5, 5, 4, 4, 4]);\nprint \"\\n\";", "    my $n = scalar(@$lst);\n   \
    \ my %count;\n    ++$count{$_} for @$lst;\n    my $m = -1;\n    for my $x (keys\
    \ %count) {\n        if ($count{$x} >= $x && $x > $m) {\n            $m = $x;\n\
    \        }\n    }\n    return $m;\n}", "    my %count;\n    $count{$_}++ for @$lst;\n\
    \    my @freq = grep $_ >= $count{$_}, @$lst;\n    return @freq ? max(@freq) :\
    \ -1;\n}", "    my %lst_hash = map {$_, 1} @$lst;\n    my @lst_unique = keys %lst_hash;\n\
    \    my @lst_sorted = sort {$b <=> $a} @lst_unique;\n    my %lst_cnt = ();\n \
    \   for my $ele (@lst) {\n        $lst_cnt{$ele}++;\n    }\n    my $result = -1;\n\
    \    for my $ele (@lst_sorted) {\n        if ($lst_cnt{$ele} >= $ele) {\n    \
    \        $result = $ele;\n            last;\n        }\n    }\n    return $result;\n\
    }", "    # The number of times a number is seen\n    my %num_counts;\n    # The\
    \ max number seen so far\n    my $max_seen = -1;\n    # Iterate over the list\
    \ and update the counts\n    for my $num (@$lst) {\n        $num_counts{$num}++;\n\
    \        $max_seen = $num if $num > $max_seen;\n    }\n    # Iterate over the\
    \ counts, return the first number with a count equal to the number itself\n  \
    \  for my $num (1..$max_seen) {\n        return $num if $num_counts{$num} >= $num;\n\
    \    }\n    # If we get here, it means that there is no such number\n    return\
    \ -1;\n}", "    my %tbl;\n    for my $i (@$lst) { $tbl{$i}++; }\n    for my $i\
    \ (sort {$b <=> $a} keys %tbl) {\n        if ($i <= $tbl{$i}) { return $i; }\n\
    \    }\n    return -1;\n}\nsay search([4, 1, 2, 2, 3, 1]); # 2\nsay search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]); # 3\nsay search([5, 5, 4, 4, 4]); # -1", "    my @values\
    \ = uniq(@$lst);\n    my @freqs = grep { $lst->{$_} >= $_ } values %$lst;\n  \
    \  my $res = max @freqs;\n    return defined $res ? $res : -1;\n}", "    my @sorted\
    \ = sort {$a <=> $b} @$lst;\n    my $first_value = $sorted[0];\n    my $current_value\
    \ = $first_value;\n    my $current_frequency = 0;\n    for my $i (@sorted) {\n\
    \        if ($i == $current_value) {\n            $current_frequency += 1;\n \
    \       } else {\n            $current_value = $i;\n            $current_frequency\
    \ = 1;\n        }\n        return $current_value if $current_frequency >= $current_value;\n\
    \    }\n    return -1;\n}", "    my @res;\n    foreach (1..scalar(@$lst)) {\n\
    \        my $count = 0;\n        foreach my $i (@$lst) {\n            if ($i ==\
    \ $_) {\n                $count++;\n            }\n        }\n        if ($count\
    \ >= $_) {\n            push(@res, $_);\n        }\n    }\n    if (scalar(@res)\
    \ > 0) {\n        return $res[-1];\n    } else {\n        return -1;\n    }\n}",
  "    my($i);\n    my(%lst_hash);\n    for $i (@$lst) {\n        $lst_hash{$i}++;\n\
    \    }\n    my($max_freq) = 0;\n    my($max_freq_i) = -1;\n    my($lst_hash_k);\n\
    \    for $lst_hash_k (keys %lst_hash) {\n        if($lst_hash{$lst_hash_k} >=\
    \ $lst_hash_k) {\n            if($lst_hash{$lst_hash_k} > $max_freq) {\n     \
    \           $max_freq = $lst_hash{$lst_hash_k};\n                $max_freq_i =\
    \ $lst_hash_k;\n            }\n        }\n    }\n    return $max_freq_i;\n}",
  "    my $size = @$lst;\n    my %counts;\n    for(my $i = 0; $i < $size; $i++) {\n\
    \        $counts{$$lst[$i]}++;\n    }\n    my @keys = sort keys %counts;\n   \
    \ my $k = @keys;\n    while($k-- > 0) {\n        my $num = $keys[$k];\n      \
    \  if ($num <= $counts{$num}) {\n            return $num;\n        }\n    }\n\
    \    return -1;\n}", "    my $largest = -1;\n    my %count;\n    foreach my $n\
    \ (@$lst) {\n        $count{$n}++;\n    }\n    foreach my $n (@$lst) {\n     \
    \   if($count{$n} >= $n && $n > $largest) {\n            $largest = $n;\n    \
    \    }\n    }\n    return $largest;\n}", "    my $len = @$lst;\n    my $max =\
    \ 0;\n    my %hash = ();\n    for my $i (0..$len-1) {\n        $hash{$lst->[$i]}++;\n\
    \        $max = $lst->[$i] if $lst->[$i] > $max;\n    }\n    return -1 if $max\
    \ == 0;\n    for my $i (1..$max) {\n        return $i if $hash{$i} >= $i;\n  \
    \  }\n    return -1;\n}", "    my $max = -1;\n    for my $num (@$lst) {\n    \
    \    my $count = grep { $_ == $num } @$lst;\n        if ($count >= $num) {\n \
    \           $max = $num if $num > $max;\n        }\n    }\n    return $max;\n}",
  "    my %freq = ();\n    $freq{$_}++ for @$lst;\n    my %ok = reverse %freq;\n \
    \   my @non_zero = grep { $_ > 0 } keys %ok;\n    my $max = $ok{ max @non_zero\
    \ };\n    my @max = grep { $freq{$_} >= $_ } keys %freq;\n    if ($max == 0) {\n\
    \        return -1;\n    } else {\n        return $max;\n    }\n}", "    my $max\
    \ = -1;\n    for my $i (@$lst) {\n        $max = $i if $i > $max;\n    }\n   \
    \ my %index;\n    for my $i (@$lst) {\n        ++$index{$i};\n    }\n    for my\
    \ $i (reverse 1..$max) {\n        if (exists $index{$i} && $index{$i} >= $i) {\n\
    \            return $i;\n        }\n    }\n    return -1;\n}", "    my $pos =\
    \ -1;\n    my %seen;\n    my %count;\n    my @temp;\n    foreach(@$lst) {\n  \
    \      $seen{$_} = 1;\n        push @temp, $_;\n    }\n    foreach(keys %seen)\
    \ {\n        my $n = $_;\n        my $c = 0;\n        foreach(@temp) {\n     \
    \       if($_ == $n) {\n                $c++;\n            }\n        }\n    \
    \    $count{$n} = $c;\n    }\n    foreach(keys %count) {\n        my $n = $_;\n\
    \        my $c = $count{$n};\n        if($c >= $n && $n > $pos) {\n          \
    \  $pos = $n;\n        }\n    }\n    return $pos;\n}", "    my %count;\n    $count{$_}++\
    \ for @$lst;\n    my @uniq = sort {$count{$b} <=> $count{$a}} keys %count;\n \
    \   while (@uniq) {\n        my $i = shift @uniq;\n        return $i if $i <=\
    \ $count{$i};\n    }\n    return -1;\n}", "    my %counts;\n    foreach (@$lst)\
    \ {\n        $counts{$_}++;\n    }\n    my $result = 0;\n    for (keys %counts)\
    \ {\n        next if ($_ <= 0);\n        if ($counts{$_} >= $_) {\n          \
    \  $result = $_ if ($_ > $result);\n        }\n    }\n    return $result;\n}",
  "    my($res, $cnt) = (-1, 0);\n    foreach (1..4) {\n        my $val = $_;\n  \
    \      my $f = grep { $_ == $val } @$lst;\n        if ($f >= $val && $f > $cnt)\
    \ {\n            $res = $val;\n            $cnt = $f;\n        }\n    }\n    return\
    \ $res;\n}", "    my %hash;\n    my $result = -1;\n    for my $num (@$lst) {\n\
    \        $hash{$num}++;\n    }\n    for my $num (@$lst) {\n        my $freq =\
    \ $hash{$num};\n        if ($freq >= $num) {\n            $result = $num;\n  \
    \      }\n    }\n    return $result;\n}", "    my $greatest = -1;\n    my %counts;\n\
    \    foreach my $n (@$lst) {\n        $counts{$n}++;\n    }\n    foreach my $n\
    \ (@$lst) {\n        if ($counts{$n} >= $n && $n > $greatest) {\n            $greatest\
    \ = $n;\n        }\n    }\n    return $greatest;\n}", "    my @freq = ();\n  \
    \  my $res = -1;\n    foreach my $x (@$lst) {\n        $freq[$x] += 1;\n    }\n\
    \    foreach my $x (@$lst) {\n        if ($freq[$x] >= $x) {\n            $res\
    \ = $x;\n        }\n    }\n    return $res;\n}", "    my %freq;\n    for my $x\
    \ (@$lst) {\n        $freq{$x}++;\n    }\n    my $ans = -1;\n    for my $k (sort\
    \ {$b <=> $a} keys %freq) {\n        if ($k <= $freq{$k}) {\n            $ans\
    \ = $k;\n            last;\n        }\n    }\n    return $ans;\n}", "    my %freq;\n\
    \    foreach my $elem (@$lst) {\n        $freq{$elem} += 1;\n    }\n    my $max\
    \ = -1;\n    foreach my $elem (sort {$b <=> $a} @$lst) {\n        if ($freq{$elem}\
    \ >= $elem) {\n            $max = $elem;\n            last;\n        }\n    }\n\
    \    return $max;\n}", "    my %cnt;\n    foreach my $n (@$lst) {\n        $cnt{$n}++;\n\
    \    }\n    my @keys = sort {$b <=> $a} keys %cnt;\n    foreach my $key (@keys)\
    \ {\n        return $key if $key <= $cnt{$key};\n    }\n    return -1;\n}", " \
    \   # write your code here\n    my %nums;\n    my $max = -1;\n    my $res = -1;\n\
    \    foreach my $num (@$lst) {\n        if ($nums{$num}) {\n            $nums{$num}\
    \ += 1;\n        } else {\n            $nums{$num} = 1;\n        }\n        if\
    \ ($num > $max) {\n            $max = $num;\n        }\n    }\n    my $i = $max;\n\
    \    while ($i >= 1) {\n        if ($nums{$i} && $nums{$i} >= $i) {\n        \
    \    $res = $i;\n            last;\n        }\n        $i -= 1;\n    }\n    return\
    \ $res;\n}", "    my %counts;\n    my $max = 0;\n    my $value = -1;\n    foreach\
    \ my $num (@$lst) {\n        $counts{$num}++;\n        if ($counts{$num} >= $num\
    \ && $num > $max) {\n            $max = $num;\n            $value = $num;\n  \
    \      }\n    }\n    return $value;\n}", "    my @lst = sort {$a <=> $b} @$lst;\n\
    \    my %freq;\n    foreach my $n (@lst) {\n        $freq{$n}++;\n    }\n    foreach\
    \ my $n (@lst) {\n        if ($freq{$n} >= $n) {\n            return $n;\n   \
    \     }\n    }\n    return -1;\n}", "    my %counts;\n    foreach my $num (@$lst)\
    \ {\n        $counts{$num}++;\n    }\n    my $result = -1;\n    foreach my $key\
    \ (keys %counts) {\n        if ($key <= $counts{$key} && $key > $result) {\n \
    \           $result = $key;\n        }\n    }\n    return $result;\n}", "    my\
    \ %h = ();\n    foreach(@$lst) {\n        $h{$_} += 1;\n    }\n    my $res = 0;\n\
    \    my $freq = 0;\n    foreach(keys %h) {\n        if($_ > $freq && $h{$_} >=\
    \ $_) {\n            $res = $_;\n            $freq = $h{$_};\n        }\n    }\n\
    \    if($res == 0) {\n        return -1;\n    }\n    return $res;\n}", "    my\
    \ $hash = {};\n    foreach my $x (@$lst) {\n        if (exists $hash->{$x}) {\n\
    \            $hash->{$x} += 1;\n        } else {\n            $hash->{$x} = 1;\n\
    \        }\n    }\n    my $ret = -1;\n    foreach my $x (sort {$a <=> $b} keys\
    \ %$hash) {\n        if ($x <= $hash->{$x}) {\n            $ret = $x;\n      \
    \  }\n    }\n    return $ret;\n}\nmy $arr = [4, 1, 2, 2, 3, 1];\nprint search($arr);\n\
    print \"\\n\";\n$arr = [1, 2, 2, 3, 3, 3, 4, 4, 4];\nprint search($arr);\nprint\
    \ \"\\n\";\n$arr = [5, 5, 4, 4, 4];\nprint search($arr);\nprint \"\\n\";", " \
    \   my $max = 0;\n    my $max_cnt = 0;\n    foreach my $i (@$lst) {\n        if\
    \ ($i > $max_cnt) {\n            $max = $i;\n            $max_cnt = $i;\n    \
    \    } else {\n            $max_cnt--;\n        }\n    }\n    return $max;\n}",
  "    my $retval = -1;\n    my $max_freq = 0;\n    my $max_int = 0;\n    foreach\
    \ my $int (sort {$a <=> $b} keys %{{map {$_, 1} @$lst}}) {\n        my $freq =\
    \ 0;\n        $freq++ while $int == shift @$lst;\n        if ($freq >= $int &&\
    \ $freq >= $max_freq) {\n            $max_freq = $freq;\n            $max_int\
    \ = $int;\n        }\n    }\n    return $max_int;\n}", "    my %freq;\n    for\
    \ my $num (@$lst) {\n        $freq{$num}++;\n    }\n    for my $num (reverse sort\
    \ {$a <=> $b} keys %freq) {\n        if ($num <= $freq{$num}) {\n            return\
    \ $num;\n        }\n    }\n    return -1;\n}", "    my @lst = @$lst;\n    my %hash;\n\
    \    my $result = -1;\n    foreach my $i (@lst) {\n        if (defined $hash{$i})\
    \ {\n            $hash{$i} += 1;\n        } else {\n            $hash{$i} = 1;\n\
    \        }\n    }\n    foreach my $i (sort {$b <=> $a} keys %hash) {\n       \
    \ if ($i <= $hash{$i}) {\n            $result = $i;\n            last;\n     \
    \   }\n    }\n    return $result;\n}", "    my %cnt;\n    map { $cnt{$_}++ } @$lst;\n\
    \    foreach my $i (sort { $b <=> $a } keys %cnt) {\n        return $i if $i <=\
    \ $cnt{$i};\n    }\n    return -1;\n}", "    my %map = ();\n    my $max = -1;\n\
    \    for my $i (@$lst) {\n        if (exists $map{$i}) {\n            $map{$i}++;\n\
    \        } else {\n            $map{$i} = 1;\n        }\n        if ($map{$i}\
    \ >= $i && $map{$i} > $max) {\n            $max = $map{$i};\n        }\n    }\n\
    \    return $max;\n}", "    my $max = -1;\n    my %count;\n    for my $x (@$lst)\
    \ {\n        $count{$x}++;\n    }\n    for my $x (@$lst) {\n        if ($count{$x}\
    \ >= $x) {\n            $max = $x if $x > $max;\n        }\n    }\n    return\
    \ $max;\n}", "    my %cnt;\n    for (@$lst) {\n        $cnt{$_}++;\n    }\n  \
    \  my @a = sort {$cnt{$b} <=> $cnt{$a}} keys %cnt;\n    while (@a) {\n       \
    \ my $i = shift @a;\n        if ($i > $cnt{$i}) {\n            return -1;\n  \
    \      }\n        else {\n            return $i;\n        }\n    }\n}", "    my\
    \ %count;\n    for (@$lst) {\n        $count{$_}++;\n    }\n    for (sort {$b\
    \ <=> $a} keys %count) {\n        return $_ if $count{$_} >= $_;\n    }\n    return\
    \ -1;\n}", "    my @result = grep {my $freq = $lst->[$_]; $freq >= $_+1 } (0..$#$lst);\n\
    \    return @result ? $result[-1]+1 : -1;\n}", "    my %m = ();\n    for(@$lst)\
    \ {\n        if(!defined($m{$_})) {\n            $m{$_} = 0;\n        }\n    \
    \    $m{$_} += 1;\n    }\n    my $res = -1;\n    for(sort {$a <=> $b} keys %m)\
    \ {\n        if($_ <= $m{$_}) {\n            $res = $_;\n        }\n    }\n  \
    \  return $res;\n}\nsay search([4, 1, 2, 2, 3, 1]);\nsay search([1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4]);\nsay search([5, 5, 4, 4, 4]);", "    my %hash;\n    my $max =\
    \ -1;\n    for my $i (@$lst) {\n        $hash{$i}++;\n        if ($hash{$i} >=\
    \ $i && $i > $max) {\n            $max = $i;\n        }\n    }\n    return $max;\n\
    }", "    return -1 if (!scalar(@$lst));\n    my $greatest_count = 0;\n    my $greatest_index\
    \ = -1;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        my $cnt = 0;\n\
    \        for (my $j = 0; $j < scalar(@$lst); $j++) {\n            $cnt++ if ($lst->[$i]\
    \ == $lst->[$j]);\n        }\n        if ($cnt >= $lst->[$i] && $cnt > $greatest_count)\
    \ {\n            $greatest_count = $cnt;\n            $greatest_index = $i;\n\
    \        }\n    }\n    return $lst->[$greatest_index];\n}", "    my $result =\
    \ -1;\n    my %freq;\n    foreach my $n (@$lst) {\n        $freq{$n}++;\n    }\n\
    \    my @freq = map { $_->[0] } sort { $b->[1] <=> $a->[1] } map { [$_, $freq{$_}]\
    \ } keys %freq;\n    foreach my $n (@freq) {\n        if($n > $freq{$n}) {\n \
    \           $result = $n;\n            last;\n        }\n    }\n    return $result;\n\
    }", "    my %cnt = ();\n    map { $cnt{$_}++ } @$lst;\n    my @keys = sort { $a\
    \ <=> $b } keys %cnt;\n    my $idx = @keys - 1;\n    while ($idx >= 0) {\n   \
    \     my $key = $keys[$idx];\n        if ($key <= $cnt{$key}) {\n            return\
    \ $key;\n        }\n        $idx--;\n    }\n    return -1;\n}\nuse Test::More;\n\
    use Test::LMU;", "    my %hash;\n    foreach(@$lst) {\n        $hash{$_}++;\n\
    \    }\n    foreach my $key (sort {$a <=> $b} keys %hash) {\n        return $key\
    \ if($key <= $hash{$key});\n    }\n    return -1;\n}", "    my $MAXVAL = 0;\n\
    \    my $MAXCNT = 0;\n    my $cnt = {};\n    for my $i (@$lst) {\n        $cnt->{$i}\
    \ = 0 unless exists $cnt->{$i};\n        $cnt->{$i}++;\n        if ($cnt->{$i}\
    \ >= $i && $i > $MAXVAL) {\n            $MAXVAL = $i;\n            $MAXCNT = $cnt->{$i};\n\
    \        }\n    }\n    return -1 if $MAXVAL == 0;\n    return $MAXVAL;\n}", " \
    \   my($max, %cnt);\n    for (@$lst) {\n        $cnt{$_}++;\n        $max = $_\
    \ if ($_ > $max);\n    }\n    for (1..$max) {\n        return $_ if ($cnt{$_}\
    \ && $cnt{$_} >= $_);\n    }\n    return -1;\n}", "    my $max = -1;\n    foreach\
    \ my $x (@$lst) {\n        if (grep { $_ == $x } @$lst) {\n            if ($x\
    \ > $max) {\n                $max = $x;\n            }\n        }\n    }\n   \
    \ return $max;\n}", "    my $max = -1;\n    my %freq;\n    foreach my $item (@$lst)\
    \ {\n        $freq{$item}++;\n    }\n    foreach my $item (@$lst) {\n        if\
    \ ($freq{$item} >= $item) {\n            $max = $item if $item > $max;\n     \
    \   }\n    }\n    return $max;\n}", "    my $max = -1;\n    for (my $i = 0; $i\
    \ < @$lst; $i++) {\n        my $count = 1;\n        for (my $j = $i + 1; $j <\
    \ @$lst; $j++) {\n            if ($lst->[$i] == $lst->[$j]) {\n              \
    \  $count++;\n            }\n        }\n        if ($count >= $lst->[$i] && $lst->[$i]\
    \ > $max) {\n            $max = $lst->[$i];\n        }\n    }\n    return $max;\n\
    }", "    my %count;\n    foreach my $item (@$lst) {\n        $count{$item}++;\n\
    \    }\n    my $max = -1;\n    foreach my $item (keys %count) {\n        if ($count{$item}\
    \ >= $item && $item > $max) {\n            $max = $item;\n        }\n    }\n \
    \   return $max;\n}", "    my($t,$i);\n    for $i (0..@$lst-1) {\n        my($cnt)\
    \ = grep($lst->[$_]==$lst->[$i],0..@$lst-1);\n        if($cnt >= $lst->[$i]) {\n\
    \            $t = $lst->[$i];\n        }\n    }\n    $t = -1 if !defined($t);\n\
    \    return $t;\n}", "    my $n = @$lst;\n    my $max = 0;\n    my $res = -1;\n\
    \    for my $i (0..$n-1) {\n        my $cur = $$lst[$i];\n        $max = $cur\
    \ if $cur > $max;\n    }\n    my @s = (0) x ($max+1);\n    for my $i (0..$n-1)\
    \ {\n        $s[$$lst[$i]]++;\n    }\n    for my $i (1..$max) {\n        if ($s[$i]\
    \ >= $i) {\n            $res = $i;\n        }\n    }\n    return $res;\n}", " \
    \   my $freq = {};\n    map {$freq->{$_}++} @$lst;\n    my @results = sort {$b\
    \ <=> $a} map {my $c = $freq->{$_}; $c >= $_ ? $_ : -1} keys %$freq;\n    return\
    \ $results[0];\n}", "    my @lst = @$lst;\n    my $result = -1;\n    my %cnt =\
    \ ();\n    my %freq = ();\n    my @lst_sorted = sort {$a <=> $b} @lst;\n    foreach\
    \ my $el (@lst_sorted) {\n        $cnt{$el} += 1;\n    }\n    foreach my $el (@lst_sorted)\
    \ {\n        if ($cnt{$el} >= $el) {\n            $result = $el;\n        }\n\
    \    }\n    return $result;\n}", "    my %counts;\n    for my $v (@$lst) {\n \
    \       $counts{$v}++;\n    }\n    my $max = -1;\n    for my $v (sort {$a <=>\
    \ $b} keys %counts) {\n        $max = $v if $counts{$v} >= $v && $v > $max;\n\
    \    }\n    return $max;\n}", "    my %hash;\n    my @freq;\n    foreach my $item\
    \ (@$lst) {\n        if (exists $hash{$item}) {\n            $hash{$item} += 1;\n\
    \        } else {\n            $hash{$item} = 1;\n        }\n    }\n    foreach\
    \ my $item (keys %hash) {\n        if ($item <= $hash{$item}) {\n            push\
    \ @freq, $item;\n        }\n    }\n    return -1 if scalar @freq == 0;\n    return\
    \ max(@freq);\n}", "    my $len = @$lst;\n    return -1 if $len == 0;\n    my\
    \ %h = ();\n    my $j = -1;\n    foreach my $i (0..$len-1) {\n        $h{$lst->[$i]}++\n\
    \    }\n    foreach my $i (1..$len) {\n        if ($h{$i} && $h{$i} >= $i) {\n\
    \            $j = $i;\n        }\n    }\n    return $j;\n}", '    my %nums;',
  "    my %counts;\n    ++$counts{$_} for @$lst;\n    my $max = 0;\n    for my $count\
    \ (values %counts) {\n        next if $count < $max;\n        $max = $count;\n\
    \    }\n    my @candidates = grep { $counts{$_} >= $_ } keys %counts;\n    return\
    \ -1 unless @candidates;\n    return [ sort { $b <=> $a } @candidates ]->[0];\n\
    }", "    my %hash = ();\n    foreach (@$lst) {\n        $hash{$_}++;\n    }\n\
    \    my $max = 0;\n    foreach (keys %hash) {\n        if ($_ >= $hash{$_} &&\
    \ $_ > $max) {\n            $max = $_;\n        }\n    }\n    return ($max ==\
    \ 0 ? -1 : $max);\n}", "    my $result = -1;\n    my %freq;\n    foreach (@$lst)\
    \ {\n        $freq{$_}++;\n    }\n    foreach (sort {$b <=> $a} keys %freq) {\n\
    \        if ($_ == $freq{$_}) {\n            $result = $_;\n            last;\n\
    \        }\n    }\n    return $result;\n}", "    my $i = 0;\n    my $len = scalar(@$lst);\n\
    \    my $a;\n    my $b;\n    my $i;\n    my $total = 0;\n    my $freq;\n    my\
    \ $cand;\n    my $last;\n    my $cnt;\n    for ($i = 0; $i < $len; $i++) {\n \
    \       $a = $lst->[$i];\n        $b = $lst->[$i + 1];\n        if ($a != $b)\
    \ {\n            $freq = $i + 1 - $total;\n            if ($freq >= $a) {\n  \
    \              $cand = $a;\n            }\n            $total = $i + 1;\n    \
    \    }\n    }\n    return defined($cand) ? $cand : -1;\n}", "    my %counts;\n\
    \    foreach my $v ( @$lst ) {\n        $counts{$v}++;\n    }\n    foreach my\
    \ $v ( @$lst ) {\n        if( $counts{$v} >= $v ) {\n            return $v;\n\
    \        }\n    }\n    return -1;\n}", "    my %freq;\n    for(@$lst) {\n    \
    \    $freq{$_}++;\n    }\n    my @freqKeys = sort {$b <=> $a} keys %freq;\n  \
    \  for my $k (@freqKeys) {\n        return $k if $k <= $freq{$k};\n    }\n   \
    \ return -1;\n}", "    my @lst = sort {$a <=> $b} @$lst;\n    for my $i (1..@lst)\
    \ {\n        my $num = @lst - $i;\n        my $idx = index($lst[$num], $i);\n\
    \        if ($idx >= 0) {\n            return $lst[$num][$idx];\n        }\n \
    \   }\n    return -1;\n}", "    my $max = 0;\n    for my $elem (@$lst) {\n   \
    \     $max = $elem if $elem > $max;\n    }\n    my %frequencies;\n    for my $elem\
    \ (@$lst) {\n        ++$frequencies{$elem};\n    }\n    my @nums = sort { $b <=>\
    \ $a } keys %frequencies;\n    my $max_freq = -1;\n    for my $num (@nums) {\n\
    \        $max_freq = $frequencies{$num} if $frequencies{$num} > $max_freq;\n \
    \   }\n    return -1 if $max_freq == 1;\n    for my $num (@nums) {\n        return\
    \ $num if $frequencies{$num} >= $num && $num < $max_freq;\n    }\n    return -1;\n\
    }", "    my $max = -1;\n    my %freq;\n    foreach my $i (@$lst) {\n        $freq{$i}++;\n\
    \    }\n    foreach my $i (@$lst) {\n        if ($i > $max and $freq{$i} >= $i)\
    \ {\n            $max = $i;\n        }\n    }\n    return $max;\n}", "    my %count;\n\
    \    ++$count{$_} for @$lst;\n    my @keys = sort { $count{$b} <=> $count{$a}\
    \ } keys %count;\n    for my $key (@keys) {\n        return $key if $key <= $count{$key};\n\
    \    }\n    return -1;\n}", '    my %seen;', "    my %count;\n    # Count the\
    \ frequency of each integer.\n    for (@$lst) {\n        $count{$_}++;\n    }\n\
    \    # Check for the greatest integer that is greater than zero,\n    # and has\
    \ a frequency greater than or equal to the value of the integer itself.\n    for\
    \ (sort {$b <=> $a} @$lst) {\n        return $_ if ($_ <= $count{$_});\n    }\n\
    \    # If no such a value exist, return -1.\n    return -1;\n}", "    my $max\
    \ = -1;\n    foreach my $i (1..$#$lst) {\n        my $num = $lst->[$i];\n    \
    \    my $count = 1;\n        for (my $j = $i - 1; $j >= 0; $j--) {\n         \
    \   if ($lst->[$j] == $num) {\n                $count++;\n            }\n    \
    \    }\n        if ($count >= $num) {\n            $max = $num if $num > $max;\n\
    \        }\n    }\n    return $max;\n}", "    my $ret = -1;\n    my $max = 0;\n\
    \    my $max_val = -1;\n    my $i = 0;\n    while($i < scalar(@$lst)) {\n    \
    \    my $cnt = 0;\n        my $curr = $$lst[$i];\n        while($i < scalar(@$lst)\
    \ && $$lst[$i] == $curr) {\n            $cnt++;\n            $i++;\n        }\n\
    \        if($curr > $max_val && $cnt >= $curr) {\n            $max_val = $curr;\n\
    \            $max = $cnt;\n        }\n    }\n    return $max_val;\n}", "    my\
    \ @stack = (1);\n    my $i = 0;\n    while($i < $#{$lst}){\n        my $v = $lst->[$i];\n\
    \        if($v > 0){\n            if($stack[$#stack] == $v){\n               \
    \ pop @stack;\n            } else {\n                push @stack, $v;\n      \
    \      }\n        }\n        $i++;\n    }\n    my $r = $stack[$#stack];\n    my\
    \ $c = grep(/$r/, @{$lst});\n    if($c < $r){\n        return -1;\n    } else\
    \ {\n        return $r;\n    }\n}", "    my %cnt = ();\n    my $t;\n    my $res\
    \ = -1;\n    foreach $t (@$lst) {\n        $cnt{$t}++;\n    }\n    foreach $t\
    \ (@$lst) {\n        if ($cnt{$t} >= $t) {\n            $res = $t;\n        }\n\
    \    }\n    return $res;\n}", "    # create a hash to count occurrences of each\
    \ number\n    my %count = ();\n    for my $x (@$lst) {\n        $count{$x} +=\
    \ 1;\n    }\n    # search for the greatest value that is greater than 0 and has\
    \ a frequency equal or greater than itself\n    my $ans = -1;\n    for my $x (@$lst)\
    \ {\n        if ($x > 0 and $count{$x} >= $x and $x > $ans) {\n            $ans\
    \ = $x;\n        }\n    }\n    return $ans;\n}", "    my $freq = {};\n    for\
    \ my $x (@$lst) {\n        $freq->{$x} += 1;\n    }\n    for my $k (sort {$b <=>\
    \ $a} keys %$freq) {\n        if ($k <= $freq->{$k}) {\n            return $k;\n\
    \        }\n    }\n    return -1;\n}", "    if (!@$lst) {\n        return -1;\n\
    \    }\n    my $min = $lst->[0];\n    my $max = $lst->[0];\n    for my $i (@$lst)\
    \ {\n        $min = $i if $i < $min;\n        $max = $i if $i > $max;\n    }\n\
    \    if ($min < 1) {\n        $min = 1;\n    }\n    my @freq = (0) x ($max - $min\
    \ + 1);\n    for my $i (@$lst) {\n        $freq[$i - $min]++;\n    }\n    for\
    \ my $i (0 .. $#freq) {\n        if ($freq[$i] >= $i + $min) {\n            return\
    \ $i + $min;\n        }\n    }\n    return -1;\n}", "    my %counts;\n    my $ret\
    \ = -1;\n    for my $n (@$lst) {\n        $counts{$n}++;\n        if ($counts{$n}\
    \ >= $n && $n > $ret) {\n            $ret = $n;\n        }\n    }\n    return\
    \ $ret;\n}", "    $ans = -1;\n    foreach my $i (@$lst) {\n        my $count =\
    \ grep { $_ == $i } @$lst;\n        $ans = $i if $count >= $i;\n    }\n    return\
    \ $ans;\n}", "    my %hash = ();\n    foreach my $num (@$lst) {\n        $hash{$num}++;\n\
    \    }\n    my $max = -1;\n    my $value = -1;\n    foreach my $key (keys %hash)\
    \ {\n        if($key <= $hash{$key} && $key > $max) {\n            $max = $key;\n\
    \            $value = $hash{$key};\n        }\n    }\n    return $value;\n}",
  "    my @sort = sort {$a <=> $b} @$lst;\n    foreach my $i (reverse 0..$#sort) {\n\
    \        return $sort[$i] if ($sort[$i] == ($i + 1));\n    }\n    return -1;\n\
    }", "    my @buckets = (0) x max(@$lst);\n    for my $i (@$lst) {\n        $buckets[$i\
    \ - 1] += 1;\n    }\n    for my $i (0 .. $#buckets) {\n        return $i + 1 if\
    \ $buckets[$i] >= $i + 1;\n    }\n    return -1;\n}", "    $lst = [sort{$a <=>\
    \ $b} @$lst];\n    print \"Sorted list: \", join(',', @$lst), \"\\n\";\n    my\
    \ $prev = -1;\n    my $count = 0;\n    my $result = -1;\n    foreach my $i (@$lst)\
    \ {\n        if ($i != $prev) {\n            if ($count >= $prev) {\n        \
    \        $result = $prev;\n            }\n            $prev = $i;\n          \
    \  $count = 1;\n        } else {\n            $count++;\n        }\n    }\n  \
    \  return $result;\n}", "    my $ret = -1;\n    my $freq = 0;\n    foreach my\
    \ $i (@$lst) {\n        my $num = $i;\n        if (grep {$num == $_} @$lst) {\n\
    \            my $count = scalar grep {$num == $_} @$lst;\n            if ($count\
    \ >= $num && $count > $freq) {\n                $ret = $num;\n               \
    \ $freq = $count;\n            }\n        }\n    }\n    return $ret;\n}", "  \
    \  my @lst = @$lst;\n    my %counts;\n    for my $l (@lst) {\n        $counts{$l}++;\n\
    \    }\n    my $max_val = -1;\n    my $max_key = -1;\n    for my $k (keys %counts)\
    \ {\n        if ($k > $max_val and $counts{$k} >= $k) {\n            $max_val\
    \ = $k;\n            $max_key = $counts{$k};\n        }\n    }\n    return $max_val;\n\
    }", "    my $len = @$lst;\n    if ($len == 0) {\n        return -1;\n    }\n \
    \   my $max = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        my $cnt = 1;\n\
    \        for (my $j = $i + 1; $j < $len; $j++) {\n            if ($lst->[$i] ==\
    \ $lst->[$j]) {\n                $cnt++;\n            }\n        }\n        if\
    \ ($cnt >= $lst->[$i] && $lst->[$i] > $max) {\n            $max = $lst->[$i];\n\
    \        }\n    }\n    if ($max == 0) {\n        return -1;\n    }\n    return\
    \ $max;\n}", "    my($item, $count, %count, $freq) = (0, 0, {}, {});\n    while\
    \ ($item = shift @$lst) {\n        $count{$item} += 1;\n        $freq->{$count{$item}}\
    \ ||= [];\n        push @{$freq->{$count{$item}}}, $item;\n    }\n    for my $k\
    \ (sort {$b <=> $a} keys %$freq) {\n        for my $v (@{$freq->{$k}}) {\n   \
    \         return $v if $k >= $v;\n        }\n    }\n    return -1;\n}", "    my\
    \ $res = -1;\n    my $count = 0;\n    for my $i (@$lst) {\n        if ($count\
    \ < $i) {\n            $count = 0;\n        }\n        $count += 1;\n        if\
    \ ($count >= $i) {\n            $res = $i;\n        }\n    }\n    return $res;\n\
    }\nprint(search([4, 1, 2, 2, 3, 1]), \"\\n\");\nprint(search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]), \"\\n\");\nprint(search([5, 5, 4, 4, 4]), \"\\n\");", "    my $max\
    \ = -1;\n    my %counts;\n    map { $counts{$_}++ } @$lst;\n    while (my($k,\
    \ $v) = each %counts) {\n        if ($v >= $k && $k > $max) {\n            $max\
    \ = $k;\n        }\n    }\n    return $max;\n}", "    my %h;\n    for my $num\
    \ (@$lst) {\n        $h{$num} += 1;\n    }\n    my $min_num = $h{(sort {$a <=>\
    \ $b} keys %h)[0]};\n    my $res = -1;\n    while(my($k, $v) = each %h) {\n  \
    \      if($v >= $k && $k >= $min_num) {\n            $res = $k;\n            $min_num\
    \ = $v;\n        }\n    }\n    return $res;\n}", "    my %freq = ();\n    for\
    \ my $e (@$lst) {\n        $freq{$e}++;\n    }\n    for my $e (sort {$b <=> $a}\
    \ keys %freq) {\n        return $e if $e <= $freq{$e};\n    }\n    return -1;\n\
    }", "    my $max = 0;\n    my %freq;\n    for my $x (@$lst) {\n        if ($x\
    \ > $max) {\n            $max = $x;\n        }\n        $freq{$x} += 1;\n    }\n\
    \    for my $x (reverse 1..$max) {\n        if ($freq{$x} && $freq{$x} >= $x)\
    \ {\n            return $x;\n        }\n    }\n    return -1;\n}", "    my $table\
    \ = build_table($lst);\n    my $max_key = 0;\n    foreach my $key (keys %$table)\
    \ {\n        if ($key > $max_key && $$table{$key} >= $key) {\n            $max_key\
    \ = $key;\n        }\n    }\n    if ($max_key > 0) {\n        return $max_key;\n\
    \    } else {\n        return -1;\n    }\n}", "    my %count;\n    for my $v (@$lst)\
    \ {\n        $count{$v}++;\n    }\n    my $max = -1;\n    for my $v (sort {$b\
    \ <=> $a} keys %count) {\n        if ($count{$v} >= $v && $v > $max) {\n     \
    \       $max = $v;\n        }\n    }\n    return $max;\n}", "    my %counts;\n\
    \    foreach my $i (@$lst) {\n        $counts{$i}++;\n    }\n    my @keys = sort\
    \ {$b <=> $a} keys %counts;\n    foreach my $k (@keys) {\n        if ($k <= $counts{$k})\
    \ {\n            return $k;\n        }\n    }\n    return -1;\n}", "    my($count,$max_val,$max_count);\n\
    \    my(%h) = ();\n    foreach $i (@$lst) {\n        $h{$i}++;\n    }\n    for\
    \ $i (keys %h) {\n        if ($h{$i} >= $i) {\n            if ($h{$i} > $max_count)\
    \ {\n                $max_count = $h{$i};\n                $max_val = $i;\n  \
    \          }\n        }\n    }\n    if ($max_count == 0) {\n        return -1;\n\
    \    }\n    return $max_val;\n}", "    my($cnt);\n    my(%cnt);\n    foreach $cnt\
    \ (@$lst) {\n        $cnt{$cnt} += 1;\n    }\n    my($ret) = -1;\n    foreach\
    \ $cnt (sort {$b <=> $a} keys %cnt) {\n        if ($cnt{$cnt} >= $cnt) {\n   \
    \         $ret = $cnt;\n            last;\n        }\n    }\n    return $ret;\n\
    }\nprint \"OK\\n\" if (search([4, 1, 2, 2, 3, 1]) == 2);\nprint \"OK\\n\" if (search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]) == 3);\nprint \"OK\\n\" if (search([5, 5, 4, 4, 4])\
    \ == -1);", "    my %count;\n    for my $i (@$lst) {\n        ++$count{$i};\n\
    \    }\n    for my $i (reverse(1..max(@$lst))) {\n        return $i if $count{$i}\
    \ && $count{$i} >= $i;\n    }\n    return -1;\n}", "    my $len = @$lst;\n   \
    \ if ($len == 0) {\n        return -1;\n    }\n    my %m = map { $_ => 0 } @$lst;\n\
    \    for my $v (@$lst) {\n        $m{$v} += 1;\n    }\n    my $max = -1;\n   \
    \ for my $k (keys %m) {\n        if ($k > $m{$k} && $k > $max) {\n           \
    \ $max = $k;\n        }\n    }\n    return $max;\n}", "    my %count;\n    foreach\
    \ my $i (@$lst) {\n        $count{$i}++;\n    }\n    foreach my $i (sort {$b <=>\
    \ $a} keys %count) {\n        if ($count{$i} >= $i) {\n            return $i;\n\
    \        }\n    }\n    return -1;\n}", "    $freq_of{$_}++ for @$lst;\n    my\
    \ $max_freq = $freq_of{$_} for @$lst;\n    for (sort {$b <=> $a} keys %freq_of)\
    \ {\n        return $_ if $freq_of{$_} >= $_;\n    }\n    return -1;\n}", "  \
    \  my $ans = -1;\n    for my $i (sort {$b <=> $a} keys %{$lst}) {\n        if\
    \ ( $i <= $lst->{$i} ) {\n            $ans = $i;\n            last;\n        }\n\
    \    }\n    return $ans;\n}", "    my %lst_hash = map { $_ => 1 } @$lst;\n   \
    \ my $max = 1;\n    my $max_key = -1;\n    for my $key (sort { $a <=> $b } keys\
    \ %lst_hash) {\n        if ($key > $max) {\n            $max = $lst_hash{$key};\n\
    \            $max_key = $key;\n        }\n    }\n    return $max_key;\n}", " \
    \   if (scalar(@$lst) == 0) { return -1 }\n    my $max = 0;\n    my %h;\n    for\
    \ my $v (@$lst) {\n        $h{$v}++;\n        $max = $v if $v > $max;\n    }\n\
    \    for my $i (1..$max) {\n        return $i if $h{$i} >= $i;\n    }\n    return\
    \ -1;\n}", "    my %hash = ();\n    my $max_int = 0;\n    foreach my $item (@$lst)\
    \ {\n        if ($item > $max_int) {\n            $max_int = $item;\n        }\n\
    \        $hash{$item} += 1;\n    }\n    my $max_freq = 0;\n    my $max_freq_int\
    \ = 0;\n    foreach my $int (sort {$a <=> $b} keys %hash) {\n        my $freq\
    \ = $hash{$int};\n        if ($freq > $max_freq_int) {\n            $max_freq_int\
    \ = $int;\n            $max_freq = $freq;\n        }\n    }\n    if ($max_freq_int\
    \ > $max_freq) {\n        return -1;\n    }\n    return $max_freq_int;\n}", " \
    \   my $max = -1;\n    for my $val ( sort { $a <=> $b } keys %{{ map { $_ => 1\
    \ } @$lst }} ) {\n        if ( $val <= scalar grep { $_ == $val } @$lst ) {\n\
    \            $max = $val;\n        }\n    }\n    return $max;\n}", "    my $result\
    \ = -1;\n    my $max_idx = 0;\n    my $max_val = 0;\n    for my $i (0 .. $#$lst)\
    \ {\n        if ($lst->[$i] > $max_val) {\n            $max_val = $lst->[$i];\n\
    \            $max_idx = $i;\n        }\n    }\n    my $freq = 0;\n    for my $i\
    \ (0 .. $#$lst) {\n        if ($lst->[$i] == $max_val) {\n            $freq++;\n\
    \        }\n    }\n    if ($freq >= $max_val) {\n        $result = $max_val;\n\
    \    }\n    return $result;\n}", "    my %freq;\n    for (@$lst) {\n        $freq{$_}\
    \ += 1;\n    }\n    my @lst = sort {$a <=> $b} @$lst;\n    for my $x (@lst) {\n\
    \        my $f = $freq{$x};\n        if ($f == $x) {\n            return $x;\n\
    \        }\n    }\n    return -1;\n}", "    my $freq = {};\n    for my $x (@$lst)\
    \ {\n        $freq->{$x}++;\n    }\n    my $max = -1;\n    for my $x (keys %$freq)\
    \ {\n        if($x <= $freq->{$x} && $x > $max) {\n            $max = $x;\n  \
    \      }\n    }\n    return $max;\n}", "    my @array = @$lst;\n    my $res =\
    \ -1;\n    my %hash;\n    for (my $i = 0; $i < scalar @array; $i++) {\n      \
    \  $hash{$array[$i]}++;\n    }\n    for (my $j = 0; $j < scalar @array; $j++)\
    \ {\n        if (defined $hash{$array[$j]}) {\n            if ($hash{$array[$j]}\
    \ >= $array[$j]) {\n                $res = $array[$j];\n            }\n      \
    \  }\n    }\n    return $res;\n}", "    my %lst = map {$_, 1} @$lst;\n    my $freq\
    \ = -1;\n    my $val = -1;\n    while (my ($key, $val) = each %lst) {\n      \
    \  if ($key <= $val && $val > $freq) {\n            $freq = $val;\n          \
    \  $val = $key;\n        }\n    }\n    return $val;\n}", "    my %count;\n   \
    \ foreach my $i (@$lst) {\n        $count{$i}++;\n    }\n    my $result = -1;\n\
    \    foreach my $key (keys %count) {\n        if($key == $count{$key} and $key\
    \ > $result) {\n            $result = $key;\n        }\n    }\n    return $result;\n\
    }", "    my $p = 0;\n    my $freq = {};\n    for my $n (@$lst) {\n        $freq->{$n}++;\n\
    \        $p = $n if $n > $p;\n    }\n    return -1 if $freq->{$p} < $p;\n    while($p\
    \ > 0) {\n        return $p if $freq->{$p} >= $p;\n        $p--;\n    }\n    return\
    \ -1;\n}", "    my $max_val = max(@$lst);\n    my $res = 0;\n    my $idx = 0;\n\
    \    for my $i (0..$max_val) {\n        my $count = 0;\n        for my $j (0..@$lst-1)\
    \ {\n            $count++ if $lst->[$j] == $i;\n        }\n        if ($count\
    \ >= $i && $i > $res) {\n            $res = $i;\n            $idx = $count;\n\
    \        }\n    }\n    return $res;\n}", "    my $size = scalar @$lst;\n    my\
    \ $max = -1;\n    foreach my $i (0..$size-1) {\n        my $cnt = 0;\n       \
    \ foreach my $j (0..$size-1) {\n            if ($lst->[$i] == $lst->[$j]) {\n\
    \                $cnt++;\n            }\n        }\n        if ($cnt >= $lst->[$i]\
    \ && $lst->[$i] > $max) {\n            $max = $lst->[$i];\n        }\n    }\n\
    \    return $max;\n}", "    my $r;\n    my $max_freq = -1;\n    for my $i (@$lst)\
    \ {\n        my $freq = $i;\n        for my $j (@$lst) {\n            if ($i ==\
    \ $j) {\n                $freq++;\n            }\n        }\n        if ($freq\
    \ >= $i && $max_freq < $freq) {\n            $max_freq = $freq;\n            $r\
    \ = $i;\n        }\n    }\n    return $r;\n}", "    my($h, $k);\n    my($max)\
    \ = -1;\n    foreach $k (@$lst) {\n        $h->{$k}++;\n    }\n    foreach $k\
    \ (keys %$h) {\n        if (($k <= $h->{$k}) && ($k > $max)) {\n            $max\
    \ = $k;\n        }\n    }\n    return $max;\n}", "    my %h = ();\n    foreach\
    \ (@$lst) {\n        $h{$_}++;\n    }\n    my $max=-1;\n    foreach (keys %h)\
    \ {\n        if ($h{$_} >= $_ && $_ > $max) {\n            $max = $_;\n      \
    \  }\n    }\n    return $max;\n}", "    my %count;\n    for my $e (@$lst) { $count{$e}++\
    \ }\n    my $max = (sort { $b <=> $a } keys %count)[0];\n    return $count{$max}\
    \ >= $max ? $max : -1;\n}", "    my $cnt;\n    foreach (1..(@$lst)) {\n      \
    \  $cnt = grep {$_ == $_[$_ - 1]} @$lst;\n        return $_ if $cnt >= $_;\n \
    \   }\n    return -1;\n}", "    my %count;\n    for (@$lst) {\n        $count{$_}++;\n\
    \    }\n    my @keys = sort { $b <=> $a } keys %count;\n    for my $k (@keys)\
    \ {\n        return $k if $k <= $count{$k};\n    }\n    return -1;\n}", "    my\
    \ %hs;\n    my $max = -1;\n    for(@$lst) {\n        $hs{$_}++;\n        if($hs{$_}\
    \ >= $_ && $_ > $max) {\n            $max = $_;\n        }\n    }\n    return\
    \ $max;\n}", "    my %count;\n    for my $n (@$lst) {\n        $count{$n}++;\n\
    \    }\n    for my $k (sort {$b <=> $a} keys %count) {\n        if ($count{$k}\
    \ >= $k) {\n            return $k;\n        }\n    }\n    return -1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
