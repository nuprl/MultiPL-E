name: HumanEval_160_do_algebra
language: pl
prompt: "# Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n# the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n# expression and return the evaluation of this\
  \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
  \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation (\
  \ ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
  \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator array is equal\
  \ to the length of operand array minus one.\n# Operand is an array of of non-negative\
  \ integers.\n# Operator array has at least one operator, and operand array has at\
  \ least two operands.\nsub do_algebra {\n    my($operator, $operand) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&do_algebra;\n\
  \        if(eq_deeply($candidate->([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  +\", \"*\", \"-\"], [2, 3, 4, 5]),9)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([\"//\", \"*\"], [7, 3, 4]),8))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = pop @$operand;\n    while (my $op = pop @$operator)\
    \ {\n        my $oper = pop @$operand;\n        $result = $oper eq '+' ? $result\
    \ + $oper\n               : $oper eq '-' ? $result - $oper\n               : $oper\
    \ eq '*' ? $result * $oper\n               : $oper eq '//' ? int($result / $oper)\n\
    \               : $oper eq '**' ? $result ** $oper\n               :         \
    \        $result;\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for (my $i = 0; $i < scalar @$operator; $i++) {\n        $result = calculate($result,\
    \ $operator->[$i], $operand->[$i + 1]);\n    }\n    return $result;\n}", "   \
    \ my $result = shift @$operand;\n    while (@$operator) {\n        my $op = shift\
    \ @$operator;\n        my $val = shift @$operand;\n        if ($op eq '+') {\n\
    \            $result += $val;\n        } elsif ($op eq '-') {\n            $result\
    \ -= $val;\n        } elsif ($op eq '*') {\n            $result *= $val;\n   \
    \     } elsif ($op eq '//') {\n            $result //= $val;\n        } elsif\
    \ ($op eq '**') {\n            $result **= $val;\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = 0;\n    my $op_index = 0;\n    foreach my $i\
    \ (0..$#$operand){\n        if($i==0){\n            $result = $operand->[$i];\n\
    \        }\n        else{\n            $result = eval \"$result $operator->[$op_index]\
    \ $operand->[$i]\";\n            $op_index++;\n        }\n    }\n    return $result;\n\
    }", "    my $res = @$operand[0];\n    for (my $i = 0; $i < @$operator; $i++) {\n\
    \        my $op = @$operator[$i];\n        my $n1 = @$operand[$i];\n        my\
    \ $n2 = @$operand[$i + 1];\n        $res = eval $res . $op . $n2;\n    }\n   \
    \ return $res;\n}", "    my $result = @$operand[0];\n    for (my $i = 0; $i <\
    \ @$operator; $i++) {\n        $result = eval \"$result $operator->[$i] $operand->[$i+1]\"\
    ;\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n    for (my\
    \ $i = 0; $i < @$operator; $i++) {\n        my $op = $operator->[$i];\n      \
    \  my $num = $operand->[$i + 1];\n        if ($op eq '+') {\n            $result\
    \ += $num;\n        } elsif ($op eq '-') {\n            $result -= $num;\n   \
    \     } elsif ($op eq '*') {\n            $result *= $num;\n        } elsif ($op\
    \ eq '//') {\n            $result = int($result / $num);\n        } elsif ($op\
    \ eq '**') {\n            $result **= $num;\n        }\n    }\n    return $result;\n\
    }", "    return 0 if !@$operator;\n    return $operand->[0] if !@$operand;\n \
    \   my $res = $operand->[0];\n    for (1..@$operand-1) {\n        $res = eval\
    \ \"$res $operator->[$_-1] $operand->[$_]\";\n    }\n    return $res;\n}", " \
    \   my $result = $operand->[0];\n    for my $i (0..@$operator - 1) {\n       \
    \ my $op = $operator->[$i];\n        my $val = $operand->[$i + 1];\n        if\
    \ ($op eq '+') {\n            $result += $val;\n        } elsif ($op eq '-') {\n\
    \            $result -= $val;\n        } elsif ($op eq '*') {\n            $result\
    \ *= $val;\n        } elsif ($op eq '//') {\n            $result = int($result\
    \ / $val);\n        } elsif ($op eq '**') {\n            $result **= $val;\n \
    \       }\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (1..@$operand-1) {\n        $result = eval \"$result $operator->[$i-1]\
    \ $operand->[$i]\";\n    }\n    return $result;\n}", "    my $output = shift @$operand;\n\
    \    for my $i (0..@$operator-1) {\n        $output = eval \"$output $operator->[$i]\
    \ \\$operand->[$i]\";\n    }\n    return $output;\n}", "    my $result = $operand->[0];\n\
    \    for my $i ( 0 .. $#$operator ) {\n        $result = do_op($result, $operator->[$i],\
    \ $operand->[$i+1]);\n    }\n    return $result;\n}", "    return if scalar @$operator\
    \ + 1 != scalar @$operand;\n    return if scalar @$operator == 0 || scalar @$operand\
    \ == 0;\n    return if grep { /\\D/ } @$operand;", "    return 0 if @$operator\
    \ != @$operand - 1;\n    my $result = shift @$operand;\n    for my $i (0..@$operator-1)\
    \ {\n        my $op = $operator->[$i];\n        my $a = $operand->[$i];\n    \
    \    $result = eval \"$result $op $a\";\n    }\n    return $result;\n}", "   \
    \ my $res = shift @$operand;\n    while (@$operator) {\n        my $op = shift\
    \ @$operator;\n        my $num = shift @$operand;\n        given ($op) {\n   \
    \         when ('+') { $res += $num }\n            when ('-') { $res -= $num }\n\
    \            when ('*') { $res *= $num }\n            when ('//') { $res = int($res\
    \ / $num) }\n            when ('**') { $res **= $num }\n        }\n    }\n   \
    \ return $res;\n}", "    my @expression = map { [ $operator->[$_], $operand->[$_],\
    \ $operand->[$_+1] ] } 0..scalar(@$operator)-1;\n    print \"expression: @$_->[0]\
    \ @$_->[1] @$_->[2]\\n\" for @expression;\n    my $r = $expression[0]->[1];\n\
    \    foreach my $e (@expression) {\n        $r = do { $e->[0] eq '+' ? $r + $e->[2]\
    \ :\n                  $e->[0] eq '-' ? $r - $e->[2] :\n                  $e->[0]\
    \ eq '*' ? $r * $e->[2] :\n                  $e->[0] eq '//' ? int($r / $e->[2])\
    \ :\n                  $e->[0] eq '**' ? $r ** $e->[2] :\n                  die\
    \ \"unknown operator: $e->[0]\";\n        };\n    }\n    return $r;\n}", "   \
    \ my $result = shift @$operand;\n    for my $i (0..$#$operator) {\n        $result\
    \ = $result->${\\$operator->[$i]}($operand->[$i]);\n    }\n    return $result;\n\
    }", "    my $result = $operand->[0];\n    for my $i (1..$#$operand) {\n      \
    \  $result = $result->${\\$operator->[$i-1]}($operand->[$i]);\n    }\n    return\
    \ $result;\n}", "    return 0 if (!$operator || !$operand);\n    my @op = @$operator;\n\
    \    my @oper = @$operand;\n    my $result = shift @oper;\n    while (@op) {\n\
    \        my $op = shift @op;\n        $result = eval \"$result $op \".shift(@oper);\n\
    \    }\n    return $result;\n}", "    my $exp = $operand->[0];\n    for my $i\
    \ (0..@$operator-1) {\n        my $op = $operator->[$i];\n        my $n = $operand->[$i+1];\n\
    \        if ($op eq '+') {\n            $exp += $n;\n        } elsif ($op eq '-')\
    \ {\n            $exp -= $n;\n        } elsif ($op eq '*') {\n            $exp\
    \ *= $n;\n        } elsif ($op eq '//') {\n            $exp = int($exp/$n);\n\
    \        } elsif ($op eq '**') {\n            $exp **= $n;\n        }\n    }\n\
    \    return $exp;\n}", "    my @operator = @$operator;\n    my @operand = @$operand;\n\
    \    my $result = undef;\n    for (my $i = 0; $i < @operator; $i++) {\n      \
    \  my $o = $operator[$i];\n        my $a = $operand[$i];\n        my $b = $operand[$i\
    \ + 1];\n        if ($result) {\n            $result = eval $result . ' ' . $o\
    \ . ' ' . $b;\n        } else {\n            $result = eval $a . ' ' . $o . '\
    \ ' . $b;\n        }\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for (0..$#$operator) {\n        $result = $operator->[$_] eq '+' ? $result\
    \ + $operand->[$_+1] :\n                  $operator->[$_] eq '-' ? $result - $operand->[$_+1]\
    \ :\n                  $operator->[$_] eq '*' ? $result * $operand->[$_+1] :\n\
    \                  $operator->[$_] eq '//' ? int($result / $operand->[$_+1]) :\n\
    \                  $operator->[$_] eq '**' ? $result ** $operand->[$_+1] :\n \
    \                 $result;\n    }\n    return $result;\n}", "    my @arr = map\
    \ { ref($_) eq 'ARRAY' ? do_algebra(@$_) : $_ } @$operand;\n    my $ans = shift\
    \ @arr;\n    my $oper;\n    while(($oper, $operand) = splice(@$operator, 0, 2))\
    \ {\n        $ans = $oper eq '+' ? $ans + $operand\n            : $oper eq '-'\
    \ ? $ans - $operand\n            : $oper eq '*' ? $ans * $operand\n          \
    \  : $oper eq '/' ? int($ans / $operand)\n            : $oper eq '**' ? $ans **\
    \ $operand\n            : '';\n    }\n    return $ans;\n}", "    my $res = shift\
    \ @$operand;\n    while (@$operator) {\n        my $op = shift @$operator;\n \
    \       $res = $op eq '+' ? $res + shift @$operand :\n               $op eq '-'\
    \ ? $res - shift @$operand :\n               $op eq '*' ? $res * shift @$operand\
    \ :\n               $op eq '//' ? int $res / shift @$operand :\n             \
    \  $op eq '**' ? $res ** shift @$operand : 0;\n    }\n    return $res;\n}", " \
    \   my $result = shift @$operand;\n    while (scalar @$operator) {\n        my\
    \ $oper = shift @$operator;\n        my $i = shift @$operand;\n        if ($oper\
    \ eq '+') {\n            $result += $i;\n        } elsif ($oper eq '-') {\n  \
    \          $result -= $i;\n        } elsif ($oper eq '*') {\n            $result\
    \ *= $i;\n        } elsif ($oper eq '//') {\n            $result = int($result\
    \ / $i);\n        } elsif ($oper eq '**') {\n            $result **= $i;\n   \
    \     }\n    }\n    return $result;\n}", "    my $result = shift @$operand;\n\
    \    while (my $op = shift @$operator) {\n        my $op2 = shift @$operand;\n\
    \        $result = $op eq '+' ? $result + $op2 :\n                  $op eq '-'\
    \ ? $result - $op2 :\n                  $op eq '*' ? $result * $op2 :\n      \
    \            $op eq '//' ? int($result / $op2) :\n                  $op eq '**'\
    \ ? $result ** $op2 :\n                  die \"Invalid operator: $op\";\n    }\n\
    \    return $result;\n}", "    my $output = 0;\n    if(scalar @$operator == scalar\
    \ @$operand - 1){\n        my $operand1 = shift @$operand;\n        my $operator1\
    \ = shift @$operator;\n        $output = $operand1;\n        if($operator1 eq\
    \ '+'){\n            $output += $operand->[0];\n        }\n        elsif($operator1\
    \ eq '-'){\n            $output -= $operand->[0];\n        }\n        elsif($operator1\
    \ eq '*'){\n            $output *= $operand->[0];\n        }\n        elsif($operator1\
    \ eq '//'){\n            $output = int($output / $operand->[0]);\n        }\n\
    \        elsif($operator1 eq '**'){\n            $output = $output ** $operand->[0];\n\
    \        }\n        foreach my $i (1..$#{$operator}){\n            if($operator->[$i]\
    \ eq '+'){\n                $output += $operand->[$i];\n            }\n      \
    \      elsif($operator->[$i] eq '-'){\n                $output -= $operand->[$i];\n\
    \            }\n            elsif($operator->[$i] eq '*'){\n                $output\
    \ *= $operand->[$i];\n            }\n            elsif($operator->[$i] eq '//'){\n\
    \                $output = int($output / $operand->[$i]);\n            }\n   \
    \         elsif($operator->[$i] eq '**'){\n                $output = $output **\
    \ $operand->[$i];\n            }\n        }\n    }\n    return $output;\n}", " \
    \   my $result = $operand->[0];\n    for my $i (1..@$operand-1) {\n        $result\
    \ = eval($result . $operator->[$i-1] . $operand->[$i]);\n    }\n    return $result;\n\
    }", "    my $total = shift @$operand;\n    while (@$operator) {\n        my $op\
    \ = shift @$operator;\n        my $n = shift @$operand;\n        if ($op eq '+')\
    \ {\n            $total += $n;\n        } elsif ($op eq '-') {\n            $total\
    \ -= $n;\n        } elsif ($op eq '*') {\n            $total *= $n;\n        }\
    \ elsif ($op eq '//') {\n            $total //= $n;\n        } elsif ($op eq '**')\
    \ {\n            $total **= $n;\n        }\n    }\n    return $total;\n}", " \
    \   my $result = 0;\n    for my $i (0..$#operator) {\n        my $o = $operator->[$i];\n\
    \        my $a = $operand->[$i];\n        my $b = $operand->[$i+1];\n        my\
    \ $part = 0;\n        if ($o eq '+') {\n            $part = $a + $b;\n       \
    \ } elsif ($o eq '-') {\n            $part = $a - $b;\n        } elsif ($o eq\
    \ '*') {\n            $part = $a * $b;\n        } elsif ($o eq '//') {\n     \
    \       $part = int($a / $b);\n        } elsif ($o eq '**') {\n            $part\
    \ = $a ** $b;\n        }\n        if ($i == 0) {\n            $result = $part;\n\
    \        } else {\n            $result = $result + $part;\n        }\n    }\n\
    \    return $result;\n}", "    my $result = shift @$operand;\n    while (@$operator)\
    \ {\n        my $op = shift @$operator;\n        my $val = shift @$operand;\n\
    \        $result = $op eq '+' ? $result + $val :\n                  $op eq '-'\
    \ ? $result - $val :\n                  $op eq '*' ? $result * $val :\n      \
    \            $op eq '//' ? int($result / $val) :\n                  $op eq '**'\
    \ ? $result ** $val : 0;\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (0..$#$operator) {\n        $result = eval \"$result $operator->[$i]\
    \ $operand->[$i+1]\";\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (0..$#$operator) {\n        $result = $result->${\\$operator->[$i]}($operand->[$i+1]);\n\
    \    }\n    return $result;\n}", "    die 'Incorrect length for operand array'\
    \ if scalar(@$operator) != scalar(@$operand) - 1;\n    my $result = $operand->[0];\n\
    \    for (my $i = 0; $i < scalar(@$operator); $i++) {\n        my $op = $operator->[$i];\n\
    \        my $operand = $operand->[$i + 1];\n        $result = do_algebra_step($result,\
    \ $op, $operand);\n    }\n    return $result;\n}", "    my $ans = shift @$operand;\n\
    \    while (@$operator && @$operand) {\n        my $op = shift @$operator;\n \
    \       my $num = shift @$operand;\n        $ans = $op eq '+' ? $ans + $num :\n\
    \               $op eq '-' ? $ans - $num :\n               $op eq '*' ? $ans *\
    \ $num :\n               $op eq '//' ? int($ans / $num) : $ans ** $num;\n    }\n\
    \    return $ans;\n}", "    my $result = $operand->[0];\n    for (my $i = 0; $i\
    \ < scalar @$operator; $i++) {\n        $result = eval($result . $operator->[$i]\
    \ . $operand->[$i + 1]);\n    }\n    return $result;\n}", "    my $last;\n   \
    \ for my $idx (0..$#$operator) {\n        $last = $operand->[$idx+1];\n      \
    \  if ($operator->[$idx] eq '+') {\n            $operand->[$idx+1] += $operand->[$idx];\n\
    \        } elsif ($operator->[$idx] eq '-') {\n            $operand->[$idx+1]\
    \ = $operand->[$idx] - $operand->[$idx+1];\n        } elsif ($operator->[$idx]\
    \ eq '*') {\n            $operand->[$idx+1] *= $operand->[$idx];\n        } elsif\
    \ ($operator->[$idx] eq '//') {\n            $operand->[$idx+1] = int($operand->[$idx]\
    \ / $operand->[$idx+1]);\n        } elsif ($operator->[$idx] eq '**') {\n    \
    \        $operand->[$idx+1] = $operand->[$idx] ** $operand->[$idx+1];\n      \
    \  }\n    }\n    return $last;\n}", "    my $result = 0;\n    my $i = 0;\n   \
    \ my $op = shift @$operator;\n    my $operand1 = shift @$operand;\n    my $operand2\
    \ = shift @$operand;\n    while($i < scalar @$operator) {\n        if($op eq '+')\
    \ {\n            $result = $operand1 + $operand2;\n        }\n        elsif($op\
    \ eq '-') {\n            $result = $operand1 - $operand2;\n        }\n       \
    \ elsif($op eq '*') {\n            $result = $operand1 * $operand2;\n        }\n\
    \        elsif($op eq '//') {\n            $result = int($operand1 / $operand2);\n\
    \        }\n        elsif($op eq '**') {\n            $result = $operand1 ** $operand2;\n\
    \        }\n        $operand1 = $result;\n        $op = shift @$operator;\n  \
    \      $operand2 = shift @$operand;\n        $i++;\n    }\n    return $result;\n\
    }", "    my $eq = \"\";\n    for my $i (0..$#$operator) {\n        $eq .= \"$operand->[$i]\
    \ $operator->[$i] \";\n    }\n    $eq .= $operand->[-1];\n    return eval($eq);\n\
    }", "    my $result = $$operand[0];\n    for my $i (1..scalar(@$operand)-1) {\n\
    \        $result = eval \"$result $$operator[$i-1] $$operand[$i]\";\n    }\n \
    \   return $result;\n}", "    my $result = 0;\n    for my $i (0..$#{$operator})\
    \ {\n        given ($operator->[$i]) {\n            when (\"+\") {\n         \
    \       $result += $operand->[$i] + $operand->[$i+1];\n            }\n       \
    \     when (\"-\") {\n                $result += $operand->[$i] - $operand->[$i+1];\n\
    \            }\n            when (\"*\") {\n                $result += $operand->[$i]\
    \ * $operand->[$i+1];\n            }\n            when (\"//\") {\n          \
    \      $result += int($operand->[$i] / $operand->[$i+1]);\n            }\n   \
    \         when (\"**\") {\n                $result += $operand->[$i] ** $operand->[$i+1];\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my $result = shift\
    \ @$operand;\n    for my $i (0..$#$operator) {\n        $result =\n        $operator->[$i]\
    \ eq '+' ? $result + $operand->[$i] :\n        $operator->[$i] eq '-' ? $result\
    \ - $operand->[$i] :\n        $operator->[$i] eq '*' ? $result * $operand->[$i]\
    \ :\n        $operator->[$i] eq '//' ? int($result / $operand->[$i]) :\n     \
    \   $operator->[$i] eq '**' ? $result ** $operand->[$i] : undef;\n    }\n    return\
    \ $result;\n}", "    my $result = shift @$operand;\n    for my $i (0..@$operator-1)\
    \ {\n        if ($operator->[$i] eq '+') {\n            $result += $operand->[$i];\n\
    \        } elsif ($operator->[$i] eq '-') {\n            $result -= $operand->[$i];\n\
    \        } elsif ($operator->[$i] eq '*') {\n            $result *= $operand->[$i];\n\
    \        } elsif ($operator->[$i] eq '//') {\n            $result = int($result\
    \ / $operand->[$i]);\n        } elsif ($operator->[$i] eq '**') {\n          \
    \  $result **= $operand->[$i];\n        }\n    }\n    return $result;\n}", " \
    \   my @operand = @$operand;\n    my @operator = @$operator;\n    my $expr = shift\
    \ @operand;\n    while (@operator) {\n        my $o = shift @operator;\n     \
    \   my $v = shift @operand;\n        if    ($o eq '+') { $expr += $v }\n     \
    \   elsif ($o eq '-') { $expr -= $v }\n        elsif ($o eq '*') { $expr *= $v\
    \ }\n        elsif ($o eq '/') { $expr /= $v }\n        elsif ($o eq '**') { $expr\
    \ **= $v }\n    }\n    return $expr;\n}\ndo_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]); # 9", "    my $result = @$operand[0];\n    for my $i ( 0 .. @$operator-1\
    \ ) {\n        $result = eval(\"$result @$operator[$i] @$operand[$i+1]\");\n \
    \   }\n    return $result;\n}", "    my $result = shift @$operand;\n    my $i\
    \ = 0;\n    for my $op (@$operator) {\n        $result = \n            $op eq\
    \ '+' ? $result + $operand->[$i] :\n            $op eq '-' ? $result - $operand->[$i]\
    \ :\n            $op eq '*' ? $result * $operand->[$i] :\n            $op eq '//'\
    \ ? int($result / $operand->[$i]) :\n            $op eq '**' ? $result ** $operand->[$i]\
    \ : undef;\n        $i++;\n    }\n    return $result;\n}", "    my $result = shift\
    \ @$operand;\n    for my $i (0..$#$operator) {\n        my $next_operand = $operand->[$i];\n\
    \        my $operation = $operator->[$i];\n        $result = $result + $next_operand\
    \ if $operation eq '+';\n        $result = $result - $next_operand if $operation\
    \ eq '-';\n        $result = $result * $next_operand if $operation eq '*';\n \
    \       $result = int($result / $next_operand) if $operation eq '//';\n      \
    \  $result = $result ** $next_operand if $operation eq '**';\n    }\n    return\
    \ $result;\n}", "    my $result = @$operand[0];\n    for my $i (0..$#$operator)\
    \ {\n        my $j = $i + 1;\n        if ($operator->[$i] eq '+') {\n        \
    \    $result += $operand->[$j];\n        } elsif ($operator->[$i] eq '-') {\n\
    \            $result -= $operand->[$j];\n        } elsif ($operator->[$i] eq '*')\
    \ {\n            $result *= $operand->[$j];\n        } elsif ($operator->[$i]\
    \ eq '//') {\n            $result = int($result / $operand->[$j]);\n        }\
    \ elsif ($operator->[$i] eq '**') {\n            $result **= $operand->[$j];\n\
    \        }\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (0..@$operator-1) {\n        if($operator->[$i] eq '+') {\n   \
    \         $result += $operand->[$i+1];\n        }\n        elsif($operator->[$i]\
    \ eq '-') {\n            $result -= $operand->[$i+1];\n        }\n        elsif($operator->[$i]\
    \ eq '*') {\n            $result *= $operand->[$i+1];\n        }\n        elsif($operator->[$i]\
    \ eq '//') {\n            $result = int($result/$operand->[$i+1]);\n        }\n\
    \        elsif($operator->[$i] eq '**') {\n            $result **= $operand->[$i+1];\n\
    \        }\n    }\n    return $result;\n}", "    my $expr = join(' ', @$operand);\n\
    \    my $i = 0;\n    $expr =~ s/\\d+/$operator->[$i++]/e;\n    eval $expr;\n}",
  "    my $expr = \"($operand->[0] $operator->[0] $operand->[1])\";\n    for my $i\
    \ (2 .. $#$operand) {\n        $expr = \"($expr $operator->[$i-1] $operand->[$i])\"\
    ;\n    }\n    my $result = eval $expr;\n    return $result;\n}", "    my $equation\
    \ = \"\";\n    while (@$operator) {\n        $equation .= shift @$operand;\n \
    \       $equation .= shift @$operator;\n    }\n    $equation .= shift @$operand;\n\
    \    return eval($equation);\n}", "    my $result = shift @$operand;\n    for\
    \ (my $i = 0; $i < @$operator; $i++) {\n        my $operation = $operator->[$i];\n\
    \        my $next_operand = $operand->[$i];\n        $result = \n            $operation\
    \ eq '+' ? $result + $next_operand :\n            $operation eq '-' ? $result\
    \ - $next_operand :\n            $operation eq '*' ? $result * $next_operand :\n\
    \            $operation eq '//' ? int($result / $next_operand) :\n           \
    \ $operation eq '**' ? $result ** $next_operand :\n            die \"unexpected\
    \ operation $operation\";\n    }\n    return $result;\n}\nsay do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]); # 9\nsay do_algebra(['+', '//', '+'], [2, 3, 4, 2]);\
    \ # 4\nsay do_algebra(['+', '*', '-'], [3, 1, 4, 5]); # -4\nsay do_algebra(['+',\
    \ '*', '-'], [3, 1, 4, 3]); # -2\nsay do_algebra(['+', '*', '-'], [1, 1, 1, 1]);\
    \ # -1\nsay do_algebra(['+', '*', '-'], [2, 3, 4, 6]); # 11\nsay do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]); # 9\nsay do_algebra(['+', '*', '-'], [2, 3, 4, 5]);\
    \ # 9\nsay do_algebra(['+', '*', '-'], [3, 1, 4, 6]); # -3\nsay do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]); # 9\nsay do_algebra(['+', '*', '-'], [3, 1, 4, 6]);\
    \ # -3\nsay do_algebra(['+', '*', '-'], [2, 3, 4, 5]); # 9\n", "    my $num_ops\
    \ = scalar @$operator;\n    my $num_opers = scalar @$operand;\n    my $result\
    \ = $operand->[0];\n    my $i = 0;\n    while ($i < $num_ops) {\n        if ($operator->[$i]\
    \ eq '+') {\n            $result += $operand->[$i+1];\n        } elsif ($operator->[$i]\
    \ eq '-') {\n            $result -= $operand->[$i+1];\n        } elsif ($operator->[$i]\
    \ eq '*') {\n            $result *= $operand->[$i+1];\n        } elsif ($operator->[$i]\
    \ eq '//') {\n            $result = int($result / $operand->[$i+1]);\n       \
    \ } elsif ($operator->[$i] eq '**') {\n            $result **= $operand->[$i+1];\n\
    \        }\n        $i++;\n    }\n    return $result;\n}", "    my $result = shift\
    \ @$operand;\n    while (@$operator) {\n        my $o = shift @$operator;\n  \
    \      my $n = shift @$operand;\n        if ($o eq '+') {\n            $result\
    \ += $n;\n        } elsif ($o eq '-') {\n            $result -= $n;\n        }\
    \ elsif ($o eq '*') {\n            $result *= $n;\n        } elsif ($o eq '//')\
    \ {\n            $result //= $n;\n        } elsif ($o eq '**') {\n           \
    \ $result **= $n;\n        }\n    }\n    return $result;\n}", "    return undef\
    \ unless @$operator == @$operand - 1;\n    return undef unless all { /\\A\\+|\\\
    -|\\*|\\/\\/|\\*\\*\\z/ } @$operator;\n    return undef unless all { /\\A\\d+\\\
    z/ } @$operand;\n    my $s = join '', map { $_ } @$operand;\n    $s = join '',\
    \ map { $_, $operator->[$_] } 0 .. $#$operator;\n    my $res = eval $s;\n    return\
    \ $res;\n}", "    my $expr = $operand->[0];\n    my $op_count = scalar @$operator;\n\
    \    for my $i (0..$op_count-1) {\n        my $op = $operator->[$i];\n       \
    \ my $x = $operand->[$i+1];\n        if ($op eq '+') {\n            $expr += $x;\n\
    \        } elsif ($op eq '-') {\n            $expr -= $x;\n        } elsif ($op\
    \ eq '*') {\n            $expr *= $x;\n        } elsif ($op eq '//') {\n     \
    \       $expr //= $x;\n        } elsif ($op eq '**') {\n            $expr **=\
    \ $x;\n        }\n    }\n    return $expr;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (0..$#$operator) {\n        $result = eval($result . $operator->[$i]\
    \ . $operand->[$i+1]);\n    }\n    return $result;\n}", "    my $num = $operand->[0];\n\
    \    for (1..@$operand-1) {\n        my $op = $operator->[$_-1];\n        my $val\
    \ = $operand->[$_];\n        if ($op eq '+') { $num += $val }\n        elsif ($op\
    \ eq '-') { $num -= $val }\n        elsif ($op eq '*') { $num *= $val }\n    \
    \    elsif ($op eq '//') { $num = int($num/$val) }\n        elsif ($op eq '**')\
    \ { $num **= $val }\n    }\n    return $num;\n}", "    my $result = $operand->[0];\n\
    \    my $i = 0;\n    while($i < scalar(@$operator)) {\n        if($operator->[$i]\
    \ eq '+') {\n            $result += $operand->[$i+1];\n        } elsif($operator->[$i]\
    \ eq '-') {\n            $result -= $operand->[$i+1];\n        } elsif($operator->[$i]\
    \ eq '*') {\n            $result *= $operand->[$i+1];\n        } elsif($operator->[$i]\
    \ eq '//') {\n            $result = int($result / $operand->[$i+1]);\n       \
    \ } elsif($operator->[$i] eq '**') {\n            $result **= $operand->[$i+1];\n\
    \        }\n        $i++;\n    }\n    return $result;\n}", "    my $ans = shift\
    \ @$operand;\n    foreach my $i (0..scalar(@$operator)-1) {\n        if ($operator->[$i]\
    \ eq '+') {\n            $ans += $operand->[$i];\n        } elsif ($operator->[$i]\
    \ eq '-') {\n            $ans -= $operand->[$i];\n        } elsif ($operator->[$i]\
    \ eq '*') {\n            $ans *= $operand->[$i];\n        } elsif ($operator->[$i]\
    \ eq '//') {\n            $ans = int($ans / $operand->[$i]);\n        } elsif\
    \ ($operator->[$i] eq '**') {\n            $ans **= $operand->[$i];\n        }\n\
    \    }\n    return $ans;\n}", "    my $result = $operand->[0];\n    for my $i\
    \ (1..scalar(@$operand)-1) {\n        $result = eval(\"$result $operator->[$i-1]\
    \ $operand->[$i]\");\n    }\n    return $result;\n}", "    my $sum = shift @$operand;\n\
    \    while (my $op = shift @$operator) {\n        my $next = shift @$operand;\n\
    \        $sum = ($op eq '+') ? $sum + $next :\n               ($op eq '-') ? $sum\
    \ - $next :\n               ($op eq '*') ? $sum * $next :\n               ($op\
    \ eq '//') ? int($sum / $next) :\n               ($op eq '**') ? $sum ** $next\
    \ :\n               die \"Bad operator: $op\";\n    }\n    return $sum;\n}", " \
    \   my $result = shift @$operand;\n    for (0..$#$operator) {\n        $result\
    \ = $operator->[$_] eq '+' ? $result + $operand->[$_] :\n                  $operator->[$_]\
    \ eq '-' ? $result - $operand->[$_] :\n                  $operator->[$_] eq '*'\
    \ ? $result * $operand->[$_] :\n                  $operator->[$_] eq '//' ? int($result\
    \ / $operand->[$_]) :\n                  $operator->[$_] eq '**' ? $result **\
    \ $operand->[$_] :\n                  die \"Unknown operator $operator->[$_]\"\
    ;\n    }\n    return $result;\n}", "    my $operand_count = @$operand;\n    my\
    \ $operator_count = @$operator;\n    die 'operator and operand size mismatch'\
    \ if $operand_count != $operator_count + 1;\n    # default to 0\n    my $result\
    \ = 0;\n    # this is a hack to avoid js issues with negative numbers\n    my\
    \ $sign = 1;\n    my $last_sign = 1;\n    for my $i (0..$operator_count) {\n \
    \       if ($i < $operator_count) {\n            my $op = $operator->[$i];\n \
    \           if ($op eq '+') {\n                $sign = 1;\n            } elsif\
    \ ($op eq '-') {\n                $sign = -1;\n            } elsif ($op eq '*')\
    \ {\n                $result *= $sign * $operand->[$i];\n                $sign\
    \ = $last_sign;\n            } elsif ($op eq '//') {\n                $result\
    \ = int($result / ($sign * $operand->[$i]));\n                $sign = $last_sign;\n\
    \            } elsif ($op eq '**') {\n                $result = $result ** ($sign\
    \ * $operand->[$i]);\n                $sign = $last_sign;\n            } else\
    \ {\n                die \"unexpected operator: $op\";\n            }\n      \
    \      $last_sign = $sign;\n        } else {\n            $result += $sign * $operand->[$i];\n\
    \        }\n    }\n    return $result;\n}", "    my $operator_count = scalar @$operator;\n\
    \    my $operand_count = scalar @$operand;\n    my $result = 0;\n    for(my $i\
    \ = 0; $i < $operator_count; $i++) {\n        my $operand1 = $operand->[$i];\n\
    \        my $operand2 = $operand->[$i + 1];\n        my $operator = $operator->[$i];\n\
    \        if($operator eq '+') {\n            $result = $operand1 + $operand2;\n\
    \        }\n        elsif($operator eq '-') {\n            $result = $operand1\
    \ - $operand2;\n        }\n        elsif($operator eq '*') {\n            $result\
    \ = $operand1 * $operand2;\n        }\n        elsif($operator eq '//') {\n  \
    \          $result = $operand1 / $operand2;\n        }\n        elsif($operator\
    \ eq '**') {\n            $result = $operand1 ** $operand2;\n        }\n     \
    \   $operand->[$i + 1] = $result;\n    }\n    return $result;\n}", "    return\
    \ undef unless @$operator == @$operand - 1;\n    my $str = '';\n    foreach my\
    \ $i (0..$#$operator) {\n        my $op = $operator->[$i];\n        $str .= \"\
    \ $op \";\n        $str .= $operand->[$i + 1];\n    }\n    my $result = $operand->[0];\n\
    \    $result = eval($result . $str);\n    return $result;\n}", "    my @operator\
    \ = @$operator;\n    my @operand = @$operand;\n    my $result = shift @operand;\n\
    \    my $next;\n    for my $i (0..@operator-1) {\n        $next = shift @operand;\n\
    \        my $op = $operator[$i];\n        if ($op eq '+') {\n            $result\
    \ += $next;\n        } elsif ($op eq '-') {\n            $result -= $next;\n \
    \       } elsif ($op eq '*') {\n            $result *= $next;\n        } elsif\
    \ ($op eq '//') {\n            $result //= $next;\n        } elsif ($op eq '**')\
    \ {\n            $result **= $next;\n        }\n    }\n    return $result;\n}",
  "    my $expression = join \" \", @$operand[0 .. $#$operand - 1], @$operator, @$operand[-1];\n\
    \    return eval $expression;\n}", "    my $temp_value = $operand->[0];\n    for(my\
    \ $i = 0; $i < scalar(@$operator); $i++){\n        if ($operator->[$i] eq '+'){\n\
    \            $temp_value += $operand->[$i+1];\n        }\n        elsif ($operator->[$i]\
    \ eq '-'){\n            $temp_value -= $operand->[$i+1];\n        }\n        elsif\
    \ ($operator->[$i] eq '*'){\n            $temp_value *= $operand->[$i+1];\n  \
    \      }\n        elsif ($operator->[$i] eq '//'){\n            $temp_value //=\
    \ $operand->[$i+1];\n        }\n        elsif ($operator->[$i] eq '**'){\n   \
    \         $temp_value **= $operand->[$i+1];\n        }\n    }\n    return $temp_value;\n\
    }", "    use experimental 'lexical_subs';\n    ## TODO: Your code here\n    ##\
    \ data structure to use: subroutine\n    my $calc;\n    foreach my $i (0..$#{$operator})\
    \ {\n        $calc = sub {\n            my ($x, $y) = @_;\n            if ($operator->[$i]\
    \ eq '+') {\n                return $x + $y;\n            } elsif ($operator->[$i]\
    \ eq '-') {\n                return $x - $y;\n            } elsif ($operator->[$i]\
    \ eq '*') {\n                return $x * $y;\n            } elsif ($operator->[$i]\
    \ eq '//') {\n                return int($x / $y);\n            } elsif ($operator->[$i]\
    \ eq '**') {\n                return $x ** $y;\n            }\n        };\n  \
    \      $operand->[$i+1] = $calc->($operand->[$i], $operand->[$i+1]);\n    }\n\
    \    return $operand->[-1];\n}", "    my $result = shift @$operand;\n    my $o;\n\
    \    while($o = shift @$operator){\n        my $tmp = shift @$operand;\n     \
    \   my $case = {\n            '+' => sub { $result + $tmp },\n            '-'\
    \ => sub { $result - $tmp },\n            '*' => sub { $result * $tmp },\n   \
    \         '/' => sub { $result / $tmp },\n            '**' => sub { $result **\
    \ $tmp },\n        };\n        $result = $case->{$o}->();\n    }\n    return $result;\n\
    }\n ", "    my $result = $operand->[0];\n    for my $i (0..$#$operator) {\n  \
    \      if ($operator->[$i] eq '+') {\n            $result += $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '-') {\n            $result -= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '*') {\n            $result *= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '//') {\n            $result = int($result\
    \ / $operand->[$i+1]);\n        } elsif ($operator->[$i] eq '**') {\n        \
    \    $result **= $operand->[$i+1];\n        }\n    }\n    return $result;\n}",
  "    my $expr = '';\n    for (my $i = 0; $i < @$operator; $i++) {\n        $expr\
    \ .= sprintf '%s %s ', $operand->[$i], $operator->[$i];\n    }\n    $expr .= $operand->[-1];\n\
    \    return eval $expr;\n}", "    my $result = $operand->[0];\n    my $op;\n \
    \   for my $i (1..$#$operand) {\n        $op = $operator->[$i-1];\n        $result\
    \ = $result + $operand->[$i] if $op eq '+';\n        $result = $result - $operand->[$i]\
    \ if $op eq '-';\n        $result = $result * $operand->[$i] if $op eq '*';\n\
    \        $result = int($result / $operand->[$i]) if $op eq '//';\n        $result\
    \ = $result ** $operand->[$i] if $op eq '**';\n    }\n    return $result;\n}",
  "    my $result = 0;\n    my $op = shift @$operator;\n    $result = $operand->[0];\n\
    \    for (my $i = 1; $i < @$operand; $i++) {\n        if ($op eq '+') {\n    \
    \        $result += $operand->[$i];\n        } elsif ($op eq '-') {\n        \
    \    $result -= $operand->[$i];\n        } elsif ($op eq '*') {\n            $result\
    \ *= $operand->[$i];\n        } elsif ($op eq '//') {\n            $result //=\
    \ $operand->[$i];\n        } elsif ($op eq '**') {\n            $result **= $operand->[$i];\n\
    \        }\n        $op = shift @$operator;\n    }\n    return $result;\n}", " \
    \   $operator->[0] eq '//' and return 1;\n    my $result = shift @$operand;\n\
    \    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n       \
    \ $op eq '//' and $op = '/';\n        $result = $result->$op($operand->[$i]);\n\
    \    }\n    return $result;\n}", "    my $result = $operand->[0];\n    for (1..$#$operand)\
    \ {\n        $result = eval \"$result $operator->[$_-1] $operand->[$_]\";\n  \
    \  }\n    return $result;\n}", "    my $result = $operand->[0];\n    foreach my\
    \ $i (1..@$operand-1) {\n        if ($operator->[$i-1] eq '+') {\n           \
    \ $result += $operand->[$i];\n        } elsif ($operator->[$i-1] eq '-') {\n \
    \           $result -= $operand->[$i];\n        } elsif ($operator->[$i-1] eq\
    \ '*') {\n            $result *= $operand->[$i];\n        } elsif ($operator->[$i-1]\
    \ eq '//') {\n            $result //= $operand->[$i];\n        } elsif ($operator->[$i-1]\
    \ eq '**') {\n            $result **= $operand->[$i];\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = $operand->[0];\n    for (my $i = 0; $i < @$operator;\
    \ $i++) {\n        $result = $result - $operand->[$i + 1] if ($operator->[$i]\
    \ eq '-');\n        $result = $result + $operand->[$i + 1] if ($operator->[$i]\
    \ eq '+');\n        $result = $result * $operand->[$i + 1] if ($operator->[$i]\
    \ eq '*');\n        $result = int($result / $operand->[$i + 1]) if ($operator->[$i]\
    \ eq '//');\n        $result = $result ** $operand->[$i + 1] if ($operator->[$i]\
    \ eq '**');\n    }\n    return $result;\n}", "    my $result = shift @$operand;\n\
    \    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n       \
    \ my $n  = $operand->[$i];\n        $result = $op eq '+' ? $result + $n\n    \
    \            : $op eq '-' ? $result - $n\n                : $op eq '*' ? $result\
    \ * $n\n                : $op eq '/' ? int($result / $n)\n                : $op\
    \ eq '**' ? $result ** $n\n                : $result;\n    }\n    return $result;\n\
    }", "    my $result = shift @$operand;\n    while (@$operator) {\n        my $op\
    \ = shift @$operator;\n        my $value = shift @$operand;\n        if ($op eq\
    \ '+') {\n            $result += $value;\n        } elsif ($op eq '-') {\n   \
    \         $result -= $value;\n        } elsif ($op eq '*') {\n            $result\
    \ *= $value;\n        } elsif ($op eq '//') {\n            $result //= $value;\n\
    \        } elsif ($op eq '**') {\n            $result **= $value;\n        }\n\
    \    }\n    return $result;\n}", "    my $result = shift @$operand;\n    while\
    \ ( @$operator ) {\n        my $op = shift @$operator;\n        my $operand =\
    \ shift @$operand;\n        $result = eval(\"$result $op $operand\");\n    }\n\
    \    return $result;\n}", "    return 'NaN' if $#{$operator} != $#{$operand} -\
    \ 1;\n    for(@{$operator}) {\n        return 'NaN' if $_ !~ /^[\\+\\-\\*\\/\\\
    ^]$/;\n    }\n    for(@{$operand}) {\n        return 'NaN' if $_ !~ /^\\d+$/;\n\
    \    }\n    my $result = shift @{$operand};\n    while(scalar @{$operator}) {\n\
    \        my $op = shift @{$operator};\n        my $d = shift @{$operand};\n  \
    \      $result = ($op eq '+') ? $result + $d : \n                  ($op eq '-')\
    \ ? $result - $d : \n                  ($op eq '*') ? $result * $d : \n      \
    \            ($op eq '/') ? int($result / $d) : \n                  $result **\
    \ $d;\n    }\n    return $result;\n}", "    my $res = $operand->[0];\n    my $i\
    \ = 0;\n    foreach my $op(@$operator) {\n        $res = $op eq '+' ? $res + $operand->[$i+1]\
    \ : $res;\n        $res = $op eq '-' ? $res - $operand->[$i+1] : $res;\n     \
    \   $res = $op eq '*' ? $res * $operand->[$i+1] : $res;\n        $res = $op eq\
    \ '//' ? int($res / $operand->[$i+1]) : $res;\n        $res = $op eq '**' ? $res\
    \ ** $operand->[$i+1] : $res;\n        $i++;\n    }\n    return $res;\n}", " \
    \   my $total = shift @$operand;\n    foreach my $idx (0..$#$operator) {\n   \
    \     if($operator->[$idx] eq '+') {\n            $total += $operand->[$idx+1];\n\
    \        }\n        elsif($operator->[$idx] eq '-') {\n            $total -= $operand->[$idx+1];\n\
    \        }\n        elsif($operator->[$idx] eq '*') {\n            $total *= $operand->[$idx+1];\n\
    \        }\n        elsif($operator->[$idx] eq '//') {\n            $total //=\
    \ $operand->[$idx+1];\n        }\n        elsif($operator->[$idx] eq '**') {\n\
    \            $total **= $operand->[$idx+1];\n        }\n    }\n    return $total;\n\
    }", "    my $result = $operand->[0];\n    for my $i (1..$#$operand) {\n      \
    \  my $op = $operator->[$i-1];\n        $result = do_op($result, $op, $operand->[$i]);\n\
    \    }\n    return $result;\n}", "    my $res = shift @$operand;\n    for my $i\
    \ (0..$#$operator) {\n        my $op = $operator->[$i];\n        my $x = $operand->[$i];\n\
    \        if ($op eq '+') {\n            $res += $x;\n        } elsif ($op eq '-')\
    \ {\n            $res -= $x;\n        } elsif ($op eq '*') {\n            $res\
    \ *= $x;\n        } elsif ($op eq '//') {\n            $res = int($res / $x);\n\
    \        } elsif ($op eq '**') {\n            $res **= $x;\n        }\n    }\n\
    \    return $res;\n}", "    my $res = shift @$operand;\n    for my $i (0..$#$operator)\
    \ {\n        $res = (\n            $operator->[$i] eq '+' ? $res + $operand->[$i]\
    \ :\n            $operator->[$i] eq '-' ? $res - $operand->[$i] :\n          \
    \  $operator->[$i] eq '*' ? $res * $operand->[$i] :\n            $operator->[$i]\
    \ eq '/' ? int($res / $operand->[$i]) :\n            $operator->[$i] eq '**' ?\
    \ $res ** $operand->[$i] :\n            die \"Unknown operator $operator->[$i]\"\
    \n        );\n    }\n    return $res;\n}", "    my $calculate;\n    for my $i\
    \ (0..scalar(@$operator)) {\n        $calculate = $operand->[$i] if $i == 0;\n\
    \        $calculate .= $operator->[$i] . $operand->[$i+1] if $i < scalar(@$operator);\n\
    \    }\n    eval $calculate;\n}", "    my @op = @$operator;\n    my @arr = @$operand;\n\
    \    my $result = $arr[0];\n    my $i = 0;\n    for ($i=0; $i<@op; $i++) {\n \
    \       if ($op[$i] eq '+') {\n            $result += $arr[$i+1];\n        }\n\
    \        elsif ($op[$i] eq '-') {\n            $result -= $arr[$i+1];\n      \
    \  }\n        elsif ($op[$i] eq '*') {\n            $result *= $arr[$i+1];\n \
    \       }\n        elsif ($op[$i] eq '//') {\n            $result = int($result/$arr[$i+1]);\n\
    \        }\n        elsif ($op[$i] eq '**') {\n            $result **= $arr[$i+1];\n\
    \        }\n    }\n    return $result;\n}", "    my $len_opr = scalar @$operator;\n\
    \    my $len_opd = scalar @$operand;\n    my $result = 0;\n    my $temp = 0;\n\
    \    my $start = 0;\n    $result = $operand->[0];\n    for (my $i = 0; $i < $len_opr;\
    \ $i++) {\n        if ($operator->[$i] eq '+') {\n            $result += $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '-') {\n            $result -= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '*') {\n            $result *= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '//') {\n            $result = int($result\
    \ / $operand->[$i+1]);\n        } elsif ($operator->[$i] eq '**') {\n        \
    \    $result = $result ** $operand->[$i+1];\n        }\n    }\n    return $result;\n\
    }\nmy $oprator = ['+', '*', '-'];\nmy $oprand = [2, 3, 4, 5];\nprint do_algebra($oprator,\
    \ $oprand);", "    my $exp = \"\";\n    my $result = 0;\n    my $i = 0;\n    while($i\
    \ < scalar(@$operator)) {\n        $exp .= \"$operand->[$i] $operator->[$i] \"\
    ;\n        $i++;\n    }\n    $exp .= \"$operand->[$i]\";\n    $result = eval $exp;\n\
    \    return $result;\n}", "    my $result = shift @$operand;\n    for my $i (0..@$operator-1)\
    \ {\n        my $op = $operator->[$i];\n        my $num = $operand->[$i];\n  \
    \      if ($op eq '+') {\n            $result += $num;\n        } elsif ($op eq\
    \ '-') {\n            $result -= $num;\n        } elsif ($op eq '*') {\n     \
    \       $result *= $num;\n        } elsif ($op eq '//') {\n            $result\
    \ = int($result / $num);\n        } elsif ($op eq '**') {\n            $result\
    \ **= $num;\n        }\n    }\n    return $result;\n}", "    $operator[$#operator]\
    \ = \"\";\n    my $expr = join(\" \", @$operator, @$operand);\n    return eval\
    \ $expr;\n}", "    die \"you will want to implement me\";\n}", "    my $result\
    \ = shift @$operand;\n    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n\
    \        my $arg = $operand->[$i];\n        if ($op eq '+') {\n            $result\
    \ += $arg;\n        } elsif ($op eq '-') {\n            $result -= $arg;\n   \
    \     } elsif ($op eq '*') {\n            $result *= $arg;\n        } elsif ($op\
    \ eq '//') {\n            $result = int($result / $arg);\n        } elsif ($op\
    \ eq '**') {\n            $result **= $arg;\n        }\n    }\n    return $result;\n\
    }", "    my $result = $operand->[0];\n    for (1..$#$operand) {\n        $result\
    \ = $result.$operator->[$_-1].$operand->[$_];\n    }\n    return eval($result);\n\
    }", '    use Data::Dumper;', "    my $result = shift @$operand;\n    while (@$operator)\
    \ {\n        my $sign = shift @$operator;\n        $result = $result->$sign(shift\
    \ @$operand);\n    }\n    return $result;\n}", "    my $result = shift @$operand;\n\
    \    while (@$operator) {\n        my $oper = shift @$operator;\n        my $next\
    \ = shift @$operand;\n        $result = eval \"$result $oper $next\";\n    }\n\
    \    return $result;\n}", "    my $res = shift @$operand;\n    while (@$operator)\
    \ {\n        my $op = shift @$operator;\n        my $op2 = shift @$operand;\n\
    \        $res = ($op eq '+') ? $res + $op2 :\n               ($op eq '-') ? $res\
    \ - $op2 :\n               ($op eq '*') ? $res * $op2 :\n               ($op eq\
    \ '//') ? int($res / $op2) :\n               ($op eq '**') ? $res ** $op2 :\n\
    \               die \"unexpected operator: $op\";\n    }\n    return $res;\n}",
  "    my $result = shift @$operand;\n    while (my $i = shift @$operator) {\n   \
    \     if ($i eq '+') {\n            $result += shift @$operand;\n        } elsif\
    \ ($i eq '-') {\n            $result -= shift @$operand;\n        } elsif ($i\
    \ eq '*') {\n            $result *= shift @$operand;\n        } elsif ($i eq '//')\
    \ {\n            $result //= shift @$operand;\n        } elsif ($i eq '**') {\n\
    \            $result **= shift @$operand;\n        }\n    }\n    return $result;\n\
    }", "    # @operand[1..$#operand] = map $_, @operand[1..$#operand];\n    my $result\
    \ = $operand->[0];\n    for my $i (1..$#$operand) {\n        $result = $operator->[$i-1]->($result,\
    \ $operand->[$i]);\n    }\n    return $result;\n}", "    return $operand->[0]\
    \ if @$operator == 0;\n    my $op = shift @$operator;\n    my $result = do_algebra($operator,\
    \ $operand);\n    for my $operand (@$operand[1..$#$operand]) {\n        if ($op\
    \ eq '+') {\n            $result += $operand;\n        } elsif ($op eq '-') {\n\
    \            $result -= $operand;\n        } elsif ($op eq '*') {\n          \
    \  $result *= $operand;\n        } elsif ($op eq '//') {\n            $result\
    \ = int($result / $operand);\n        } elsif ($op eq '**') {\n            $result\
    \ **= $operand;\n        }\n    }\n    return $result;\n}", "    my $res = shift\
    \ @$operand;\n    while(@$operator) {\n        my $op = shift @$operator;\n  \
    \      my $num = shift @$operand;\n        $res = $op eq '+' ? $res + $num : $op\
    \ eq '-' ? $res - $num : $op eq '*' ? $res * $num : $op eq '//' ? int($res / $num)\
    \ : $res ** $num;\n    }\n    return $res;\n}\ndo_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]); # 9\ndo_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]); # -1\ndo_algebra(['+',\
    \ '-', '*', '//'], [1, 2, 3, 4, 5]); # -5\ndo_algebra(['+', '-', '*', '//'], [2,\
    \ 3, 4, 5, 6]); # -1\ndo_algebra(['+', '-', '*', '//'], [1, 2, 3, 4, 5, 6]); #\
    \ -5\ndo_algebra(['+', '-', '*', '//'], [2, 3, 4, 5, 6, 7]); # -2\ndo_algebra(['+',\
    \ '-', '*', '//'], [2, 3, 4, 5, 6, 7, 8]); # 1\ndo_algebra(['+', '-', '*', '//'],\
    \ [1, 2, 3, 4, 5, 6, 7]); # -2\ndo_algebra(['+', '-', '*', '//'], [2, 3, 4, 5,\
    \ 6, 7, 8, 9]); # 1\ndo_algebra(['+', '-', '*', '//'], [1, 2, 3, 4, 5, 6, 7, 8]);\
    \ # 1\ndo_algebra(['+', '-', '*', '//'], [2, 3, 4, 5, 6, 7, 8, 9, 10]); # -1\n\
    do_algebra(['+', '-',", "    # $operator and $operand are array reference.\n \
    \   # TODO: Your code here\n    my $result = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $temp = 0;\n    while($i < scalar(@$operator)) {\n        if($operator->[$i]\
    \ eq '+') {\n            $temp = $operand->[$j] + $operand->[$j+1];\n        \
    \    splice(@$operand, $j, 2, $temp);\n            splice(@$operator, $i, 1);\n\
    \            $i--;\n        }\n        elsif($operator->[$i] eq '-') {\n     \
    \       $temp = $operand->[$j] - $operand->[$j+1];\n            splice(@$operand,\
    \ $j, 2, $temp);\n            splice(@$operator, $i, 1);\n            $i--;\n\
    \        }\n        elsif($operator->[$i] eq '*') {\n            $temp = $operand->[$j]\
    \ * $operand->[$j+1];\n            splice(@$operand, $j, 2, $temp);\n        \
    \    splice(@$operator, $i, 1);\n            $i--;\n        }\n        elsif($operator->[$i]\
    \ eq '//') {\n            $temp = int($operand->[$j] / $operand->[$j+1]);\n  \
    \          splice(@$operand, $j, 2, $temp);\n            splice(@$operator, $i,\
    \ 1);\n            $i--;\n        }\n        elsif($operator->[$i] eq '**') {\n\
    \            $temp = $operand->[$j] ** $operand->[$j+1];\n            splice(@$operand,\
    \ $j, 2, $temp);\n            splice(@$operator, $i, 1);\n            $i--;\n\
    \        }\n        $i++;\n    }\n    return $operand->[0];\n}", "    # write\
    \ your code here\n    my $result = @$operand[0];\n    for(my $i = 0; $i < @$operator;\
    \ $i++){\n        if($operator->[$i] eq '+'){\n            $result += $operand->[$i+1];\n\
    \        }elsif($operator->[$i] eq '-'){\n            $result -= $operand->[$i+1];\n\
    \        }elsif($operator->[$i] eq '*'){\n            $result *= $operand->[$i+1];\n\
    \        }elsif($operator->[$i] eq '//'){\n            $result = int($result /\
    \ $operand->[$i+1]);\n        }elsif($operator->[$i] eq '**'){\n            $result\
    \ **= $operand->[$i+1];\n        }\n    }\n    return $result;\n}\n1;", "    my\
    \ $result = $$operand[0];\n    my $count_o = scalar @$operator;\n    my $count_p\
    \ = scalar @$operand;\n    for (my $i = 0; $i < $count_o; $i++) {\n        my\
    \ $operation = $$operator[$i];\n        my $integer = $$operand[$i + 1];\n   \
    \     if ($operation eq '+') {\n            $result += $integer;\n        } elsif\
    \ ($operation eq '-') {\n            $result -= $integer;\n        } elsif ($operation\
    \ eq '*') {\n            $result *= $integer;\n        } elsif ($operation eq\
    \ '//') {\n            $result = floor($result / $integer);\n        } elsif ($operation\
    \ eq '**') {\n            $result = $result ** $integer;\n        }\n    }\n \
    \   return $result;\n}", "    my $result = $operand->[0];\n    my $count = @$operator;\n\
    \    for(my $i = 0; $i < $count; $i++) {\n        my $op = $operator->[$i];\n\
    \        my $num = $operand->[$i + 1];\n        if($op eq '+') {\n           \
    \ $result += $num;\n        }\n        elsif($op eq '-') {\n            $result\
    \ -= $num;\n        }\n        elsif($op eq '*') {\n            $result *= $num;\n\
    \        }\n        elsif($op eq '//') {\n            $result = int($result /\
    \ $num);\n        }\n        elsif($op eq '**') {\n            $result **= $num;\n\
    \        }\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for (1..$#$operand) {\n        my $op = $operator->[$_-1];\n        my $num\
    \ = $operand->[$_];\n        if ($op eq '+') {\n            $result += $num;\n\
    \        } elsif ($op eq '-') {\n            $result -= $num;\n        } elsif\
    \ ($op eq '*') {\n            $result *= $num;\n        } elsif ($op eq '//')\
    \ {\n            $result = int($result/$num);\n        } elsif ($op eq '**') {\n\
    \            $result **= $num;\n        }\n    }\n    return $result;\n}", " \
    \   my $i = 0;\n    my $result = 0;\n    my $num_operands = @$operand;\n    my\
    \ $num_operators = @$operator;\n    for( ; $i < $num_operands - 1; $i++ ) {\n\
    \        if( $operator->[$i] eq '+' ) {\n            $result += $operand->[$i]\
    \ + $operand->[$i+1];\n        } elsif( $operator->[$i] eq '-' ) {\n         \
    \   $result += $operand->[$i] - $operand->[$i+1];\n        } elsif( $operator->[$i]\
    \ eq '*' ) {\n            $result += $operand->[$i] * $operand->[$i+1];\n    \
    \    } elsif( $operator->[$i] eq '//' ) {\n            $result += int($operand->[$i]\
    \ / $operand->[$i+1]);\n        } elsif( $operator->[$i] eq '**' ) {\n       \
    \     $result += $operand->[$i] ** $operand->[$i+1];\n        }\n    }\n    return\
    \ $result;\n}", "    my $sum = 0;\n    $sum += $_ for (@$operand);\n    return\
    \ $sum;\n}", "    my $result = $operand->[0];\n    for (my $i = 0; $i < scalar\
    \ @$operator; $i++) {\n        my $o = $operator->[$i];\n        if ($o eq '+')\
    \ {\n            $result += $operand->[$i + 1];\n        } elsif ($o eq '-') {\n\
    \            $result -= $operand->[$i + 1];\n        } elsif ($o eq '*') {\n \
    \           $result *= $operand->[$i + 1];\n        } elsif ($o eq '//') {\n \
    \           $result = int($result / $operand->[$i + 1]);\n        } elsif ($o\
    \ eq '**') {\n            $result **= $operand->[$i + 1];\n        }\n    }\n\
    \    return $result;\n}", "    my $str = \"\";\n    foreach my $i (0..$#$operator)\
    \ {\n        $str .= $operand->[$i] . $operator->[$i];\n    }\n    $str .= $operand->[-1];\n\
    \    eval($str);\n}", "    my $result = $operand->[0];\n    for my $i (0..$#$operator)\
    \ {\n        if ($operator->[$i] eq '+') {\n            $result += $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '-') {\n            $result -= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '*') {\n            $result *= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '//') {\n            $result //= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '**') {\n            $result **= $operand->[$i+1];\n\
    \        }\n    }\n    return $result;\n}", "    my @stack;\n    my $i = 0;\n\
    \    while ($i < @$operator) {\n        my $op = $operator->[$i];\n        if\
    \ ($op eq \"+\") {\n            $stack[-2] += $stack[-1];\n            pop @stack;\n\
    \        } elsif ($op eq \"-\") {\n            $stack[-2] -= $stack[-1];\n   \
    \         pop @stack;\n        } elsif ($op eq \"*\") {\n            $stack[-2]\
    \ *= $stack[-1];\n            pop @stack;\n        } elsif ($op eq \"//\") {\n\
    \            $stack[-2] = int($stack[-2] / $stack[-1]);\n            pop @stack;\n\
    \        } elsif ($op eq \"**\") {\n            $stack[-2] = $stack[-2] ** $stack[-1];\n\
    \            pop @stack;\n        } else {\n            push @stack, $operand->[$i];\n\
    \        }\n        $i++;\n    }\n    return $stack[0];\n}", "    my $result =\
    \ $operand->[0];\n    for (my $i = 0; $i < @$operator; $i++) {\n        $result\
    \ = eval \"$result$operator->[$i]$operand->[$i+1]\";\n    }\n    return $result;\n\
    }", "    my $result = shift @$operand;\n    for my $i (0..$#$operator) {\n   \
    \     if ($operator->[$i] eq '+') {\n            $result += $operand->[$i];\n\
    \        } elsif ($operator->[$i] eq '-') {\n            $result -= $operand->[$i];\n\
    \        } elsif ($operator->[$i] eq '*') {\n            $result *= $operand->[$i];\n\
    \        } elsif ($operator->[$i] eq '//') {\n            $result = int $result\
    \ / $operand->[$i];\n        } elsif ($operator->[$i] eq '**') {\n           \
    \ $result **= $operand->[$i];\n        }\n    }\n    return $result;\n}", "  \
    \  my $result = shift @$operand;\n    for my $i (0..$#$operator) {\n        my\
    \ $current = $operand->[$i];\n        my $operator = $operator->[$i];\n      \
    \  $result = eval(\"$result $operator $current\");\n    }\n    return $result;\n\
    }", "    my $i = 1;\n    my $result = $operand->[0];\n    for my $operator (@$operator)\
    \ {\n        if ($operator eq '+') {\n            $result += $operand->[$i];\n\
    \        } elsif ($operator eq '-') {\n            $result -= $operand->[$i];\n\
    \        } elsif ($operator eq '*') {\n            $result *= $operand->[$i];\n\
    \        } elsif ($operator eq '//') {\n            $result //= $operand->[$i];\n\
    \        } elsif ($operator eq '**') {\n            $result **= $operand->[$i];\n\
    \        }\n        $i++;\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i ( 0 .. @$operator - 1 ) {\n        my $op = $operator->[$i];\n\
    \        my $b = $operand->[$i + 1];\n        if ($op eq '+') {\n            $result\
    \ += $b;\n        } elsif ($op eq '-') {\n            $result -= $b;\n       \
    \ } elsif ($op eq '*') {\n            $result *= $b;\n        } elsif ($op eq\
    \ '//') {\n            $result //= $b;\n        } elsif ($op eq '**') {\n    \
    \        $result **= $b;\n        }\n    }\n    return $result;\n}", "    my $expr\
    \ = '';\n    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n\
    \        my $opd1 = $operand->[$i];\n        my $opd2 = $operand->[$i+1];\n  \
    \      $expr .= \"$opd1 $op $opd2\";\n        if ($i != $#$operator) {\n     \
    \       $expr .= ' ';\n        }\n    }\n    return eval $expr;\n}", "    $operator\
    \ = [reverse @$operator];\n    $operand = [reverse @$operand];\n    my $expr =\
    \ shift @$operand;\n    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n\
    \        my $n = $operand->[$i];\n        if ($op eq '+') {\n            $expr\
    \ += $n;\n        } elsif ($op eq '-') {\n            $expr -= $n;\n        }\
    \ elsif ($op eq '*') {\n            $expr *= $n;\n        } elsif ($op eq '//')\
    \ {\n            $expr = int($expr / $n);\n        } elsif ($op eq '**') {\n \
    \           $expr **= $n;\n        }\n    }\n    return $expr;\n}", "    my $result\
    \ = shift @$operand;\n    while (@$operator) {\n        my $op = shift @$operator;\n\
    \        my $num = shift @$operand;\n        $result = $op eq '+' ? $result +\
    \ $num :\n                  $op eq '-' ? $result - $num :\n                  $op\
    \ eq '*' ? $result * $num :\n                  $op eq '//' ? int($result / $num)\
    \ :\n                  $op eq '**' ? $result ** $num :\n                  $result;\n\
    \    }\n    return $result;\n}", "    my $res = shift @$operand;\n    while(@$operator){\n\
    \        my $op = shift @$operator;\n        my $next = shift @$operand;\n   \
    \     if($op eq '+'){\n            $res += $next;\n        }elsif($op eq '-'){\n\
    \            $res -= $next;\n        }elsif($op eq '*'){\n            $res *=\
    \ $next;\n        }elsif($op eq '//'){\n            $res //= $next;\n        }elsif($op\
    \ eq '**'){\n            $res **= $next;\n        }\n    }\n    return $res;\n\
    }", "    my $i = 0;\n    while ($i < scalar(@$operator)) {\n        if ($operator->[$i]\
    \ eq '**') {\n            $operand->[$i+1] = $operand->[$i] ** $operand->[$i+1];\n\
    \            splice(@$operator, $i, 1);\n            splice(@$operand, $i, 1);\n\
    \            $i = 0;\n        } else {\n            $i++;\n        }\n    }\n\
    \    $i = 0;\n    while ($i < scalar(@$operator)) {\n        if ($operator->[$i]\
    \ eq '*') {\n            $operand->[$i+1] = $operand->[$i] * $operand->[$i+1];\n\
    \            splice(@$operator, $i, 1);\n            splice(@$operand, $i, 1);\n\
    \            $i = 0;\n        } elsif ($operator->[$i] eq '//') {\n          \
    \  $operand->[$i+1] = int($operand->[$i] / $operand->[$i+1]);\n            splice(@$operator,\
    \ $i, 1);\n            splice(@$operand, $i, 1);\n            $i = 0;\n      \
    \  } else {\n            $i++;\n        }\n    }\n    $i = 0;\n    while ($i <\
    \ scalar(@$operator)) {\n        if ($operator->[$i] eq '+') {\n            $operand->[$i+1]\
    \ = $operand->[$i] + $operand->[$i+1];\n            splice(@$operator, $i, 1);\n\
    \            splice(@$operand, $i, 1);\n            $i = 0;\n        } elsif ($operator->[$i]\
    \ eq '-') {\n            $operand->[$i+1] = $operand->[$i] - $operand->[$i+1];\n\
    \            splice(@$operator, $i, 1);\n            splice(@$operand, $i, 1);\n",
  "    return 0 if @$operator == 0;\n    my $total = shift @$operand;\n    for (0..$#$operator)\
    \ {\n        my $op = $operator->[$_];\n        my $next = $operand->[$_];\n \
    \       $total = do {\n            if ($op eq '+') { $total + $next }\n      \
    \      elsif ($op eq '-') { $total - $next }\n            elsif ($op eq '*') {\
    \ $total * $next }\n            elsif ($op eq '/') { $total / $next }\n      \
    \      elsif ($op eq '//') { int($total / $next) }\n            elsif ($op eq\
    \ '**') { $total ** $next }\n            else { die \"Unknown operator: $op\"\
    \ }\n        };\n    }\n    return $total;\n}", "    for(@$operator) {\n     \
    \   next if /\\+/;\n        if(/\\-/) { $operand->[0] -= $operand->[1]; shift\
    \ @$operand; next }\n        if(/\\*/) { $operand->[0] *= $operand->[1]; shift\
    \ @$operand; next }\n        if(/\\//) { $operand->[0] //= $operand->[1]; shift\
    \ @$operand; next }\n        if(/\\^/) { $operand->[0] **= $operand->[1]; shift\
    \ @$operand; next }\n    }\n    return $operand->[0];\n}", "    my $num = shift\
    \ @$operand;\n    my $i = 0;\n    my $res = 0;\n    while($i < @$operator){\n\
    \        $res = eval(\"$num $operator->[$i] $operand->[$i]\");\n        $num =\
    \ $res;\n        $i++;\n    }\n    return $res;\n}", "    return if(!$operator\
    \ || !$operand);\n    return $operand->[0] if(scalar(@$operator) == 0);\n    my\
    \ $result = $operand->[0];\n    for(my $i = 0; $i < scalar(@$operator); $i++)\
    \ {\n        if($operator->[$i] eq '+') {\n            $result += $operand->[$i\
    \ + 1];\n        } elsif($operator->[$i] eq '-') {\n            $result -= $operand->[$i\
    \ + 1];\n        } elsif($operator->[$i] eq '*') {\n            $result *= $operand->[$i\
    \ + 1];\n        } elsif($operator->[$i] eq '//') {\n            $result //= $operand->[$i\
    \ + 1];\n        } elsif($operator->[$i] eq '**') {\n            $result **= $operand->[$i\
    \ + 1];\n        }\n    }\n    return $result;\n}\n1;", "    my $result = shift\
    \ @$operand;\n    while (@$operator) {\n        my $op = shift @$operator;\n \
    \       my $n = shift @$operand;\n        if ($op eq '+') {\n            $result\
    \ += $n;\n        } elsif ($op eq '-') {\n            $result -= $n;\n       \
    \ } elsif ($op eq '*') {\n            $result *= $n;\n        } elsif ($op eq\
    \ '//') {\n            $result = int($result / $n);\n        } elsif ($op eq '**')\
    \ {\n            $result **= $n;\n        }\n    }\n    return $result;\n}", " \
    \   # TODO\n}", "    #your code here\n    my $result = $operand->[0];\n    for\
    \ my $i (1..@$operand-1) {\n        if ($operator->[$i-1] eq '+') {\n        \
    \    $result += $operand->[$i];\n        } elsif ($operator->[$i-1] eq '-') {\n\
    \            $result -= $operand->[$i];\n        } elsif ($operator->[$i-1] eq\
    \ '*') {\n            $result *= $operand->[$i];\n        } elsif ($operator->[$i-1]\
    \ eq '//') {\n            $result //= $operand->[$i];\n        } elsif ($operator->[$i-1]\
    \ eq '**') {\n            $result **= $operand->[$i];\n        }\n    }\n    return\
    \ $result;\n}", "    my $length = scalar @$operator;\n    my $result = $operand->[0];\n\
    \    for(my $i = 0; $i < $length; $i++) {\n        if($operator->[$i] eq '+')\
    \ {\n            $result += $operand->[$i + 1];\n        }\n        elsif($operator->[$i]\
    \ eq '-') {\n            $result -= $operand->[$i + 1];\n        }\n        elsif($operator->[$i]\
    \ eq '*') {\n            $result *= $operand->[$i + 1];\n        }\n        elsif($operator->[$i]\
    \ eq '//') {\n            $result = int($result / $operand->[$i + 1]);\n     \
    \   }\n        elsif($operator->[$i] eq '**') {\n            $result **= $operand->[$i\
    \ + 1];\n        }\n    }\n    return $result;\n}", "    my $r;\n    $r = pop\
    \ @$operand;\n    while(@$operator) {\n        $r = $operand->[-1] = $r->{shift\
    \ @$operator}\n    }\n    return $r;\n}", "    my $result = $operand->[0];\n \
    \   for my $i (0..$#$operator) {\n        my $opr = $operator->[$i];\n       \
    \ my $opd = $operand->[$i+1];\n        $result = eval \"$result $opr $opd\";\n\
    \    }\n    return $result;\n}", "    my $exp = join('', map { @$_ } pairwise\
    \ { $a, $b } $operator, $operand);\n    eval $exp;\n}", "    my $result = shift\
    \ @$operand;\n    while (my $op = shift @$operator) {\n        my $next = shift\
    \ @$operand;\n        if    ($op eq '+') { $result += $next }\n        elsif ($op\
    \ eq '-') { $result -= $next }\n        elsif ($op eq '*') { $result *= $next\
    \ }\n        elsif ($op eq '/') { $result /= $next }\n        elsif ($op eq '^')\
    \ { $result **= $next }\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (1..$#$operand) {\n        my $r = shift @$operator;\n        $result\
    \ = {\n            '+' => sub { $result + $operand->[$i] },\n            '-' =>\
    \ sub { $result - $operand->[$i] },\n            '*' => sub { $result * $operand->[$i]\
    \ },\n            '//' => sub { int($result / $operand->[$i]) },\n           \
    \ '**' => sub { $result ** $operand->[$i] },\n        }->{$r}->();\n    }\n  \
    \  return $result;\n}", "    my $result = $operand->[0];\n    for my $index (\
    \ 1 .. $#$operand ) {\n        my $op = $operator->[$index - 1];\n        $result\
    \ =\n            $op eq '+' ? $result + $operand->[$index] :\n            $op\
    \ eq '-' ? $result - $operand->[$index] :\n            $op eq '*' ? $result *\
    \ $operand->[$index] :\n            $op eq '/' ? int($result / $operand->[$index])\
    \ :\n            $op eq '**' ? $result ** $operand->[$index] :\n             \
    \   undef;\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (1..scalar(@$operand)-1) {\n        $result = calculate( $result,\
    \ $operator->[$i-1], $operand->[$i] );\n    }\n    return $result;\n}", "    my\
    \ $result = $operand->[0];\n    for my $i (0..scalar(@$operator)-1) {\n      \
    \  my $operator = $operator->[$i];\n        my $value = $operand->[$i+1];\n  \
    \      if ($operator eq '+') {\n            $result += $value;\n        } elsif\
    \ ($operator eq '-') {\n            $result -= $value;\n        } elsif ($operator\
    \ eq '*') {\n            $result *= $value;\n        } elsif ($operator eq '//')\
    \ {\n            $result = int($result / $value);\n        } elsif ($operator\
    \ eq '**') {\n            $result **= $value;\n        }\n    }\n    return $result;\n\
    }", "    my $result = $operand->[0];\n    for my $i (0..(@$operator-1)) {\n  \
    \      $result = eval($result . $operator->[$i] . $operand->[$i+1]);\n    }\n\
    \    return $result;\n}", "    my $s = $operand->[0];\n    for my $i (0..$#$operator)\
    \ {\n        if ($operator->[$i] eq '+') {\n            $s += $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '-') {\n            $s -= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '*') {\n            $s *= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '//') {\n            $s = int($s / $operand->[$i+1]);\n\
    \        } elsif ($operator->[$i] eq '**') {\n            $s **= $operand->[$i+1];\n\
    \        }\n    }\n    return $s;\n}", "    $result = $operand->[0];\n    for\
    \ my $i (1..$#$operand){\n        $result = eval($result.$operator->[$i-1].$operand->[$i]);\n\
    \    }\n    return $result;\n}", "    # ...\n    my $res = shift @$operand;\n\
    \    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n       \
    \ my $n = $operand->[$i];\n        if ($op eq '+') {\n            $res += $n;\n\
    \        } elsif ($op eq '-') {\n            $res -= $n;\n        } elsif ($op\
    \ eq '*') {\n            $res *= $n;\n        } elsif ($op eq '//') {\n      \
    \      $res = int($res / $n);\n        } elsif ($op eq '**') {\n            $res\
    \ **= $n;\n        }\n    }\n    return $res;\n}", "    my @result;\n    for my\
    \ $i (0..$#{$operator}) {\n        @result = do_arithmetic($operator->[$i], @result,\
    \ $operand->[$i + 1]);\n    }\n    return $result[0];\n}", "    my $op = shift\
    \ @$operator;\n    my $result = shift @$operand;\n    while (@$operator) {\n \
    \       my $new_op = shift @$operator;\n        my $new_operand = shift @$operand;\n\
    \        $result = $result->$op($new_operand);\n        $op = $new_op;\n    }\n\
    \    return $result;\n}", "    my $exp = $operand->[0];\n    for my $i (1..$#$operand)\
    \ {\n        $exp = eval \"$exp $operator->[$i-1] $operand->[$i]\";\n    }\n \
    \   return $exp;\n}\ndo_algebra(['+', '*', '-'], [2, 3, 4, 5]); # 9\ndo_algebra(['+',\
    \ '*', '-'], [10, 2, 3, 5]); # 15\ndo_algebra(['+', '*', '-'], [1, 2, 3, 4]);\
    \ # 5\ndo_algebra(['//', '*', '-'], [2, 3, 4, 5]); # -8", "    my @operator =\
    \ @$operator;\n    my @operand = @$operand;\n    my $res = shift @operand;\n \
    \   for (my $i = 0; $i < @operator; $i++) {\n        if ($operator[$i] eq '+')\
    \ {\n            $res += $operand[$i];\n        } elsif ($operator[$i] eq '-')\
    \ {\n            $res -= $operand[$i];\n        } elsif ($operator[$i] eq '*')\
    \ {\n            $res *= $operand[$i];\n        } elsif ($operator[$i] eq '//')\
    \ {\n            $res //= $operand[$i];\n        } elsif ($operator[$i] eq '**')\
    \ {\n            $res **= $operand[$i];\n        }\n    }\n    return $res;\n}",
  "    my $result = shift @$operand;\n    for my $i (0..@$operator - 1) {\n      \
    \  $result = do_operator($result, @$operator[$i], @$operand[$i]);\n    }\n   \
    \ return $result;\n}", "    my $result = shift @$operand;\n    for my $i (0..@$operator-1)\
    \ {\n        $result = eval \"$result $operator->[$i] \\$operand->[$i]\";\n  \
    \  }\n    return $result;\n}", "    my $prev_operator = \"+\";\n    my $result\
    \ = 0;\n    for my $idx (0..scalar(@$operand)-1) {\n        my $op = $idx == 0\
    \ ? \"+\" : $operator->[$idx-1];\n        if ($op eq \"*\") {\n            $result\
    \ = $prev_operator eq \"+\" \n                ? $result + $operand->[$idx-1] *\
    \ $operand->[$idx]\n                : $result - $operand->[$idx-1] * $operand->[$idx];\n\
    \        } elsif ($op eq \"/\") {\n            $result = $prev_operator eq \"\
    +\" \n                ? $result + int($operand->[$idx-1] / $operand->[$idx])\n\
    \                : $result - int($operand->[$idx-1] / $operand->[$idx]);\n   \
    \     } elsif ($op eq \"**\") {\n            $result = $prev_operator eq \"+\"\
    \ \n                ? $result + $operand->[$idx-1] ** $operand->[$idx]\n     \
    \           : $result - $operand->[$idx-1] ** $operand->[$idx];\n        } elsif\
    \ ($op eq \"-\") {\n            $result = $prev_operator eq \"+\" \n         \
    \       ? $result + $operand->[$idx-1] - $operand->[$idx]\n                : $result\
    \ - $operand->[$idx-1] - $operand->[$idx];\n        } else {\n            $result\
    \ = $prev_operator eq \"+\" \n                ? $result + $operand->[$idx-1] +\
    \ $operand->[$idx]\n                : $result - $operand->[$idx-1] + $operand->[$idx];\n\
    \        }\n        $prev_operator = $op;\n    }\n    return $result;\n}", " \
    \   my $res = shift @$operand;\n    foreach my $index (0..$#$operator) {\n   \
    \     $res = eval($res . $operator->[$index] . $operand->[$index]);\n    }\n \
    \   return $res;\n}", "    my $result = shift @$operand;\n    for my $index (0..$#$operator)\
    \ {\n        $result = eval $result . $operator->[$index] . $operand->[$index];\n\
    \    }\n    return $result;\n}", "    my $res = $operand->[0];\n    for my $i\
    \ (1..$#$operand) {\n        my $op = $operator->[$i-1];\n        $res = $op eq\
    \ '+' ? $res + $operand->[$i] :\n               $op eq '-' ? $res - $operand->[$i]\
    \ :\n               $op eq '*' ? $res * $operand->[$i] :\n               $op eq\
    \ '//' ? int($res / $operand->[$i]) :\n               $op eq '**' ? $res ** $operand->[$i]\
    \ :\n               die \"Unknown operator $op\";\n    }\n    return $res;\n}",
  "    my $result = $operand->[0];\n    my $n = scalar @$operator;\n    for my $i\
    \ (0..$n-1) {\n        $result = eval \"$result $operator->[$i] $operand->[$i+1]\"\
    ;\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n    foreach\
    \ my $i (1..@$operand-1) {\n        my $op = $operator->[$i-1];\n        $result\
    \ = $result + $operand->[$i] if ($op eq '+');\n        $result = $result - $operand->[$i]\
    \ if ($op eq '-');\n        $result = $result * $operand->[$i] if ($op eq '*');\n\
    \        $result = int($result / $operand->[$i]) if ($op eq '//');\n        $result\
    \ = $result ** $operand->[$i] if ($op eq '**');\n    }\n    return $result;\n}",
  "    my $result = $operand->[0];\n    for my $i (1..@$operand-1) {\n        my $op\
    \ = $operator->[$i-1];\n        if ($op eq '+') {\n            $result += $operand->[$i];\n\
    \        } elsif ($op eq '-') {\n            $result -= $operand->[$i];\n    \
    \    } elsif ($op eq '*') {\n            $result *= $operand->[$i];\n        }\
    \ elsif ($op eq '//') {\n            $result = int($result / $operand->[$i]);\n\
    \        } elsif ($op eq '**') {\n            $result **= $operand->[$i];\n  \
    \      }\n    }\n    return $result;\n}", "    my $res = shift @$operand;\n  \
    \  for my $i (0..$#$operator) {\n        if($operator->[$i] eq '+') {\n      \
    \      $res += $operand->[$i];\n        }\n        elsif($operator->[$i] eq '-')\
    \ {\n            $res -= $operand->[$i];\n        }\n        elsif($operator->[$i]\
    \ eq '*') {\n            $res *= $operand->[$i];\n        }\n        elsif($operator->[$i]\
    \ eq '//') {\n            $res = int($res / $operand->[$i]);\n        }\n    \
    \    elsif($operator->[$i] eq '**') {\n            $res **= $operand->[$i];\n\
    \        }\n    }\n    return $res;\n}", "    my $operator_count = scalar @$operator;\n\
    \    my $operand_count = scalar @$operand;\n    if ($operator_count != $operand_count\
    \ - 1) {\n        return \"Invalid input\";\n    }\n    my $result = $operand->[0];\n\
    \    for (my $i = 0; $i < $operator_count; $i++) {\n        if ($operator->[$i]\
    \ eq '+') {\n            $result += $operand->[$i + 1];\n        } elsif ($operator->[$i]\
    \ eq '-') {\n            $result -= $operand->[$i + 1];\n        } elsif ($operator->[$i]\
    \ eq '*') {\n            $result *= $operand->[$i + 1];\n        } elsif ($operator->[$i]\
    \ eq '//') {\n            $result //= $operand->[$i + 1];\n        } elsif ($operator->[$i]\
    \ eq '**') {\n            $result **= $operand->[$i + 1];\n        } else {\n\
    \            return \"Invalid input\";\n        }\n    }\n    return $result;\n\
    }", "    my $result = shift @$operand;\n    while(@$operator) {\n        my $op\
    \ = shift @$operator;\n        my $num = shift @$operand;\n        if($op eq '+')\
    \ {\n            $result += $num;\n        }\n        elsif($op eq '-') {\n  \
    \          $result -= $num;\n        }\n        elsif($op eq '*') {\n        \
    \    $result *= $num;\n        }\n        elsif($op eq '//') {\n            $result\
    \ = int($result / $num);\n        }\n        elsif($op eq '**') {\n          \
    \  $result **= $num;\n        }\n    }\n    return $result;\n}", "    return eval\
    \ join '', @$operand[0 .. $#$operand - 1], map { @$operator[$_] } 0 .. $#$operator,\
    \ $operand->[-1];\n}", "    my $result = 0;\n    my $calc = 0;\n    if (@$operator\
    \ == (@$operand - 1)) {\n        if (@$operator >= 1) {\n            if (@$operand\
    \ >= 2) {\n                for (my $i = 0; $i < @$operator; $i++) {\n        \
    \            if ($i == 0) {\n                        $result = @$operand[$i];\n\
    \                        if (@$operator[$i] eq '+') {\n                      \
    \      $result += @$operand[$i + 1];\n                        }\n            \
    \            elsif (@$operator[$i] eq '-') {\n                            $result\
    \ -= @$operand[$i + 1];\n                        }\n                        elsif\
    \ (@$operator[$i] eq '*') {\n                            $result *= @$operand[$i\
    \ + 1];\n                        }\n                        elsif (@$operator[$i]\
    \ eq '//') {\n                            $result = int($result / @$operand[$i\
    \ + 1]);\n                        }\n                        elsif (@$operator[$i]\
    \ eq '**') {\n                            $result = $result ** @$operand[$i +\
    \ 1];\n                        }\n                    }\n                    else\
    \ {\n                        if (@$operator[$i] eq '+') {\n                  \
    \          $result += @$operand[$i + 1];\n                        }\n        \
    \                elsif (@$operator[$i] eq '-') {\n                           \
    \ $result -= @$operand[$i + 1];\n                        }\n                 \
    \       elsif (@$operator[$i] eq '*') {\n                            $result *=\
    \ @$operand[$i + 1];\n                        }\n                        elsif\
    \ (@$operator[$i] eq '//') {\n                            $result = int($result\
    \ / @$operand[$i + 1]);\n                        }\n                        elsif\
    \ (@$operator[$i] eq '**') {\n                            $result = $result **\
    \ @$operand[$i + 1];\n                        }\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return $result;\n}", "   \
    \ my $total = $operand->[0];\n    for (my $i = 0; $i < scalar @$operator; $i++)\
    \ {\n        $total = eval \"$total @{$operator}[$i] @{$operand}[$i+1]\";\n  \
    \  }\n    return $total;\n}", "    my $result = @$operand[0];\n    for (my $i\
    \ = 0; $i < @$operator; $i++) {\n        my $op = @$operator[$i];\n        if\
    \ ($op eq '+') {\n            $result += @$operand[$i + 1];\n        } elsif ($op\
    \ eq '-') {\n            $result -= @$operand[$i + 1];\n        } elsif ($op eq\
    \ '*') {\n            $result *= @$operand[$i + 1];\n        } elsif ($op eq '//')\
    \ {\n            $result = int($result / @$operand[$i + 1]);\n        } elsif\
    \ ($op eq '**') {\n            $result = int($result ** @$operand[$i + 1]);\n\
    \        }\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    my $i = 0;\n    for my $op (@$operator) {\n        my $op2 = $operand->[$i+1];\n\
    \        if ($op eq '+') {\n            $result += $op2;\n        } elsif ($op\
    \ eq '-') {\n            $result -= $op2;\n        } elsif ($op eq '*') {\n  \
    \          $result *= $op2;\n        } elsif ($op eq '//') {\n            $result\
    \ = int($result / $op2);\n        } elsif ($op eq '**') {\n            $result\
    \ **= $op2;\n        }\n        $i++;\n    }\n    return $result;\n}", "    my\
    \ $index = 0;\n    my $expression = $operand->[$index];\n    for (my $i = 0; $i\
    \ < scalar @$operator; $i++) {\n        $index++;\n        $expression = calc($expression,\
    \ $operator->[$i], $operand->[$index]);\n    }\n    return $expression;\n}", " \
    \   my $i;\n    my $result = $operand->[0];\n    for ($i = 0; $i < scalar(@$operator);\
    \ $i++) {\n        if ($operator->[$i] eq '+') {\n            $result += $operand->[$i\
    \ + 1];\n        } elsif ($operator->[$i] eq '-') {\n            $result -= $operand->[$i\
    \ + 1];\n        } elsif ($operator->[$i] eq '*') {\n            $result *= $operand->[$i\
    \ + 1];\n        } elsif ($operator->[$i] eq '//') {\n            $result = int($result\
    \ / $operand->[$i + 1]);\n        } elsif ($operator->[$i] eq '**') {\n      \
    \      $result **= $operand->[$i + 1];\n        }\n    }\n    return $result;\n\
    }", "    my @operator = @$operator;\n    my @operand = @$operand;\n    my $result\
    \ = $operand[0];\n    for (my $i = 0; $i < @operator; $i++) {\n        if ($operator[$i]\
    \ eq '+') {\n            $result += $operand[$i + 1];\n        } elsif ($operator[$i]\
    \ eq '-') {\n            $result -= $operand[$i + 1];\n        } elsif ($operator[$i]\
    \ eq '*') {\n            $result *= $operand[$i + 1];\n        } elsif ($operator[$i]\
    \ eq '//') {\n            $result //= $operand[$i + 1];\n        } elsif ($operator[$i]\
    \ eq '**') {\n            $result **= $operand[$i + 1];\n        }\n    }\n  \
    \  return $result;\n}", "    my $result = $operand->[0];\n    for my $idx (1..$#$operand)\
    \ {\n        $result = eval \"$result $operator->[$idx-1] $operand->[$idx]\";\n\
    \    }\n    return $result;\n}\n ", "    my @o = @$operator;\n    my @n = @$operand;\n\
    \    my $answer = shift @n;\n    for my $i (0..$#o) {\n        $answer = $answer->$o[$i](shift\
    \ @n);\n    }\n    return $answer;\n}", "    my @operator = @$operator;\n    my\
    \ @operand = @$operand;\n    my $result = $operand[0];\n    for (my $i = 0; $i\
    \ < scalar @operator; $i++){\n        if ($operator[$i] eq '+'){\n           \
    \ $result += $operand[$i+1];\n        }\n        elsif ($operator[$i] eq '-'){\n\
    \            $result -= $operand[$i+1];\n        }\n        elsif ($operator[$i]\
    \ eq '*'){\n            $result *= $operand[$i+1];\n        }\n        elsif ($operator[$i]\
    \ eq '//'){\n            $result //= $operand[$i+1];\n        }\n        elsif\
    \ ($operator[$i] eq '**'){\n            $result **= $operand[$i+1];\n        }\n\
    \    }\n    return $result;\n}", "    my $result = $operand->[0];\n    for my\
    \ $i (0..@$operator - 1) {\n        my $op1 = $result;\n        my $op2 = $operand->[$i\
    \ + 1];\n        my $op = $operator->[$i];\n        $result = eval \"$op1 $op\
    \ $op2\";\n    }\n    return $result;\n}", "    my $total = $operand->[0];\n \
    \   for my $i (1..$#$operand) {\n        $total = $total->${\\$operator->[$i-1]}($operand->[$i]);\n\
    \    }\n    return $total;\n}", "    my @op_stack = ();\n    my @op_val_stack\
    \ = ();\n    my $op_index = 0;\n    my $op_val_index = 0;\n    my $op_stack_index\
    \ = 0;\n    my $op_val_stack_index = 0;\n    my $op = undef;\n    my $op_a = undef;\n\
    \    my $op_b = undef;\n    my $op_result = undef;\n    my $op_val = undef;\n\
    \    my $op_val_a = undef;\n    my $op_val_b = undef;\n    my $op_val_result =\
    \ undef;\n    # @op_stack = [ $op_index, $op_stack_index, $op, $op_a, $op_b, $op_result\
    \ ]\n    # @op_val_stack = [ $op_val_index, $op_val_stack_index, $op_val, $op_val_a,\
    \ $op_val_b, $op_val_result ]\n    # @op_stack => [ $op_index, $op_stack_index,\
    \ $op, $op_a, $op_b, $op_result ];\n    # @op_val_stack => [ $op_val_index, $op_val_stack_index,\
    \ $op_val, $op_val_a, $op_val_b, $op_val_result ];\n    $op_stack_index = 0;\n\
    \    # @op_stack => [ $op_index, $op_stack_index, $op, $op_a, $op_b, $op_result\
    \ ];\n    # @op_val_stack => [ $op_val_index, $op_val_stack_index, $op_val, $op_val_a,\
    \ $op_val_b, $op_val_result ];\n    while ( $op_index < @$operator || $op_val_index\
    \ < @$operand ) {\n        # @op_stack => [ $op_index, $op_stack_index, $op, $op_a,\
    \ $op_b, $op_result ];", "    my $result = $operand->[0];\n    for my $i (0..$#$operator)\
    \ {\n        my $op = $operator->[$i];\n        my $n = $operand->[$i+1];\n  \
    \      if ($op eq '+') {\n            $result += $n;\n        } elsif ($op eq\
    \ '-') {\n            $result -= $n;\n        } elsif ($op eq '*') {\n       \
    \     $result *= $n;\n        } elsif ($op eq '//') {\n            $result //=\
    \ $n;\n        } elsif ($op eq '**') {\n            $result **= $n;\n        }\n\
    \    }\n    return $result;\n}", "    my $result = shift @$operand;\n    for my\
    \ $index (0..$#$operator) {\n        if ($operator->[$index] eq '+') {\n     \
    \       $result += $operand->[$index];\n        } elsif ($operator->[$index] eq\
    \ '-') {\n            $result -= $operand->[$index];\n        } elsif ($operator->[$index]\
    \ eq '*') {\n            $result *= $operand->[$index];\n        } elsif ($operator->[$index]\
    \ eq '//') {\n            $result = int($result / $operand->[$index]);\n     \
    \   } elsif ($operator->[$index] eq '**') {\n            $result **= $operand->[$index];\n\
    \        }\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (1..scalar(@$operand)-1) {\n        $result = eval \"$result $operator->[$i-1]\
    \ $operand->[$i]\";\n    }\n    return $result;\n}", "    my @op_arr = @$operator;\n\
    \    my @od_arr = @$operand;\n    my $op_total = scalar @op_arr;\n    my $od_total\
    \ = scalar @od_arr;\n    # If no operator, return the first element\n    if ($op_total\
    \ == 0) {\n        return $od_arr[0];\n    }\n    my $result = $od_arr[0];\n \
    \   for (my $i = 0; $i < $op_total; $i++) {\n        my $op = $op_arr[$i];\n \
    \       my $op1 = $od_arr[$i];\n        my $op2 = $od_arr[$i + 1];\n        #\
    \ Addition ( + ) \n        if ($op eq '+') {\n            $result += $op2;\n \
    \       }\n        # Subtraction ( - ) \n        elsif ($op eq '-') {\n      \
    \      $result -= $op2;\n        }\n        # Multiplication ( * ) \n        elsif\
    \ ($op eq '*') {\n            $result *= $op2;\n        }\n        # Floor division\
    \ ( // ) \n        elsif ($op eq '//') {\n            $result = int ($result /\
    \ $op2);\n        }\n        # Exponentiation ( ** ) \n        elsif ($op eq '**')\
    \ {\n            $result = $result ** $op2;\n        }\n    }\n    return $result;\n\
    }", "    my $result = shift @$operand;\n    while (@$operator) {\n        my $op\
    \ = shift @$operator;\n        my $a = shift @$operand;\n        if ($op eq '+')\
    \ {\n            $result += $a;\n        } elsif ($op eq '-') {\n            $result\
    \ -= $a;\n        } elsif ($op eq '*') {\n            $result *= $a;\n       \
    \ } elsif ($op eq '//') {\n            $result //= $a;\n        } elsif ($op eq\
    \ '**') {\n            $result **= $a;\n        }\n    }\n    return $result;\n\
    }", "    my $l = @$operator;\n    for my $i (0..$l-1) {\n        if ($operator->[$i]\
    \ eq '+') {\n            $operand->[$i+1] += $operand->[$i];\n        } elsif\
    \ ($operator->[$i] eq '-') {\n            $operand->[$i+1] = $operand->[$i] -\
    \ $operand->[$i+1];\n        } elsif ($operator->[$i] eq '*') {\n            $operand->[$i+1]\
    \ *= $operand->[$i];\n        } elsif ($operator->[$i] eq '//') {\n          \
    \  $operand->[$i+1] = int($operand->[$i] / $operand->[$i+1]);\n        } elsif\
    \ ($operator->[$i] eq '**') {\n            $operand->[$i+1] = $operand->[$i] **\
    \ $operand->[$i+1];\n        }\n    }\n    return $operand->[-1];\n}", "    #\
    \ TODO: Write code here\n    # print $operator;\n    # print \"\\n\";\n    # print\
    \ @$operand;\n    # print \"\\n\";\n    my $result = $operand->[0];\n    my $i\
    \ = 0;\n    for ($i = 0; $i < scalar @$operator; $i++) {\n        # print $operator->[$i];\n\
    \        if ($operator->[$i] eq '+') {\n            $result += $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '-') {\n            $result -= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '*') {\n            $result *= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '//') {\n            $result //= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '**') {\n            $result **= $operand->[$i+1];\n\
    \        }\n    }\n    return $result;\n}", "    my $res = shift @$operand;\n\
    \    for my $i (0..@$operator-1) {\n        $res = eval(\"$res $operator->[$i]\
    \ \\$operand->[$i]\");\n    }\n    return $res;\n}", "    my $result = $operand->[0];\n\
    \    my $index = 0;\n    while ($index < scalar @$operator) {\n        my $op\
    \ = $operator->[$index];\n        my $oper = $operand->[$index + 1];\n       \
    \ if ($op eq '+') {\n            $result += $oper;\n        } elsif ($op eq '-')\
    \ {\n            $result -= $oper;\n        } elsif ($op eq '*') {\n         \
    \   $result *= $oper;\n        } elsif ($op eq '//') {\n            $result =\
    \ int($result / $oper);\n        } elsif ($op eq '**') {\n            $result\
    \ **= $oper;\n        }\n        $index++;\n    }\n    return $result;\n}", " \
    \   my $x = shift @$operand;\n    for my $y (@$operand) {\n        for my $op\
    \ (@$operator) {\n            $x = eval \"$x $op $y\";\n        }\n    }\n   \
    \ return $x;\n}", "    my @opts = qw{+ - * // **};\n    my $exp = join ' ', map\
    \ {\n        $opts[$_]\n    } @$operator;\n    $exp =~ s/([+-])/ $1 /g;\n    return\
    \ eval \"$exp $operand->[-1]\";\n}", "    my $first = shift @$operand;\n    my\
    \ $total = $first;\n    while(@$operator) {\n        my $op = shift @$operator;\n\
    \        my $number = shift @$operand;\n        if($op eq '+') {\n           \
    \ $total += $number;\n        } elsif($op eq '-') {\n            $total -= $number;\n\
    \        } elsif($op eq '*') {\n            $total *= $number;\n        } elsif($op\
    \ eq '//') {\n            $total //= $number;\n        } elsif($op eq '**') {\n\
    \            $total **= $number;\n        }\n    }\n    return $total;\n}", " \
    \   # ...\n    return $operand->[0];\n}", "    my $result = $operand->[0];\n \
    \   for my $i (0..@$operator-1) {\n        if ($operator->[$i] eq '+') {\n   \
    \         $result += $operand->[$i+1];\n        } elsif ($operator->[$i] eq '-')\
    \ {\n            $result -= $operand->[$i+1];\n        } elsif ($operator->[$i]\
    \ eq '*') {\n            $result *= $operand->[$i+1];\n        } elsif ($operator->[$i]\
    \ eq '//') {\n            $result //= $operand->[$i+1];\n        } elsif ($operator->[$i]\
    \ eq '**') {\n            $result **= $operand->[$i+1];\n        }\n    }\n  \
    \  return $result;\n}", "    while (scalar @$operator > 0) {\n        my $op =\
    \ shift @$operator;\n        my $r = shift @$operand;\n        my $l = shift @$operand;\n\
    \        unshift @$operand, eval $l . $op . $r;\n    }\n    return shift @$operand;\n\
    }", "    my $result = $operand->[0];\n    for my $i (0..$#$operator) {\n     \
    \   my $n = $operand->[$i+1];\n        my $op = $operator->[$i];\n        if ($op\
    \ eq '+') {\n            $result += $n;\n        } elsif ($op eq '-') {\n    \
    \        $result -= $n;\n        } elsif ($op eq '*') {\n            $result *=\
    \ $n;\n        } elsif ($op eq '//') {\n            $result //= $n;\n        }\
    \ elsif ($op eq '**') {\n            $result **= $n;\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = $$operand[0];\n    for my $i (0..@$operator-1)\
    \ {\n        $result = eval \"$result @$operator[$i] $$operand[$i+1]\";\n    }\n\
    \    return $result;\n}", "    my $result = shift @$operand;\n    for my $i (0..$#$operator)\
    \ {\n        my $op = $operator->[$i];\n        if ($op eq '+') {\n          \
    \  $result += $operand->[$i];\n        } elsif ($op eq '-') {\n            $result\
    \ -= $operand->[$i];\n        } elsif ($op eq '*') {\n            $result *= $operand->[$i];\n\
    \        } elsif ($op eq '//') {\n            $result = int($result / $operand->[$i]);\n\
    \        } elsif ($op eq '**') {\n            $result **= $operand->[$i];\n  \
    \      }\n    }\n    return $result;\n}", "    return eval(join('', @$operand,\
    \ @$operator));\n}\ndo_algebra(['+', '*', '-'], [2, 3, 4, 5]);", "    my $total\
    \ = $operand->[0];\n    for my $i (1..@$operand-1) {\n        if ($operator->[$i-1]\
    \ eq '+') {\n            $total += $operand->[$i];\n        } elsif ($operator->[$i-1]\
    \ eq '-') {\n            $total -= $operand->[$i];\n        } elsif ($operator->[$i-1]\
    \ eq '*') {\n            $total *= $operand->[$i];\n        } elsif ($operator->[$i-1]\
    \ eq '//') {\n            $total //= $operand->[$i];\n        } elsif ($operator->[$i-1]\
    \ eq '**') {\n            $total **= $operand->[$i];\n        }\n    }\n    return\
    \ $total;\n}", "    my $length_operator = scalar @$operator;\n    my $result =\
    \ $$operand[0];\n    for (my $i = 0; $i < $length_operator; $i++) {\n        if\
    \ ($$operator[$i] eq '+') {\n            $result += $$operand[$i + 1];\n     \
    \   } elsif ($$operator[$i] eq '-') {\n            $result -= $$operand[$i + 1];\n\
    \        } elsif ($$operator[$i] eq '*') {\n            $result *= $$operand[$i\
    \ + 1];\n        } elsif ($$operator[$i] eq '//') {\n            $result //= $$operand[$i\
    \ + 1];\n        } elsif ($$operator[$i] eq '**') {\n            $result **= $$operand[$i\
    \ + 1];\n        }\n    }\n    return $result;\n}", "    my $res = 0;\n    my\
    \ $op;\n    my $op1;\n    my $op2;\n    my $i = 0;\n    my $j = 0;\n    $res =\
    \ $operand->[$i];\n    for($j = 0; $j < scalar(@$operator); $j++) {\n        $op\
    \ = $operator->[$j];\n        $i++;\n        $op1 = $res;\n        $op2 = $operand->[$i];\n\
    \        $res = calc($op1, $op2, $op);\n    }\n    return $res;\n}", "    my $result\
    \ = $operand->[0];\n    for my $i (0..$#$operator) {\n        my $op = $operator->[$i];\n\
    \        my $num = $operand->[$i+1];\n        if ($op eq '+') {\n            $result\
    \ += $num;\n        } elsif ($op eq '-') {\n            $result -= $num;\n   \
    \     } elsif ($op eq '*') {\n            $result *= $num;\n        } elsif ($op\
    \ eq '//') {\n            $result = int($result / $num);\n        } elsif ($op\
    \ eq '**') {\n            $result **= $num;\n        }\n    }\n    return $result;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
