name: HumanEval_109_move_one_ball
language: pl
prompt: "# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
  # numbers in the array will be randomly ordered. Your task is to determine if\n\
  # it is possible to get an array sorted in non-decreasing order by performing \n\
  # the following operation on the given array:\n# You are allowed to perform right\
  \ shift operation any number of times.\n# One right shift operation means shifting\
  \ all elements of the array by one\n# position in the right direction. The last\
  \ element of the array will be moved to\n# the starting position in the array i.e.\
  \ 0th index. \n# If it is possible to obtain the sorted array by performing the\
  \ above operation\n# then return 1 else return .\n# If the given array is empty\
  \ then return 1.\n# Note: The given array is guaranteed to have unique elements.\n\
  # For Example:\n# >>> move_one_ball([3, 4, 5, 1, 2])\n# 1\n# Explanation: By performin\
  \ 2 right shift operations, non-decreasing order can\n# be achieved for the given\
  \ array.\n# >>> move_one_ball([3, 5, 4, 1, 2])\n# \"\"\n# Explanation:It is not\
  \ possible to get non-decreasing order for the given\n# array by performing any\
  \ number of right shift operations.\nsub move_one_ball {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_one_ball;\n\
  \        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 10,\
  \ 1, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([4, 3, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $n = scalar(@$arr);\n    my $max = 0;\n    my $count = 0;\n\
    \    my $flag = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        if($arr->[$i]\
    \ > $max) {\n            $max = $arr->[$i];\n            $count++;\n        }\n\
    \        if($count > 1) {\n            $flag = 1;\n            last;\n       \
    \ }\n    }\n    return $flag == 1 ? 0 : 1;\n}", "    my $len = scalar @$arr;\n\
    \    return 1 if $len == 0;\n    my $cnt = 0;\n    for (my $i = 0; $i < $len -\
    \ 1; $i++) {\n        $cnt++ if $arr->[$i] > $arr->[$i + 1];\n    }\n    $cnt\
    \ > 1 ? 0 : 1;\n}", "    my $i = 0;\n    my $n = scalar(@$arr);\n    for my $j\
    \ (1..$n) {\n        if ($arr->[$j] < $arr->[$i]) {\n            return $n;\n\
    \        }\n        $i = $j;\n    }\n    return 1;\n}", "    # print \"@{$arr}\\\
    n\";\n    if (@{$arr} == 0) {\n        return 1;\n    }\n    my $i;\n    my $j;\n\
    \    my $min_index = 0;\n    my $max_index = 0;\n    my $min = $arr->[0];\n  \
    \  my $max = $arr->[0];\n    for ($i = 1; $i < @{$arr}; $i++) {\n        if ($arr->[$i]\
    \ < $min) {\n            $min = $arr->[$i];\n            $min_index = $i;\n  \
    \      }\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n \
    \           $max_index = $i;\n        }\n    }\n    # print \"max_index $max_index\
    \ min_index $min_index\\n\";\n    my $left_max = $arr->[0];\n    my $right_min\
    \ = $arr->[0];\n    for ($i = 1; $i < @{$arr}; $i++) {\n        if ($i <= $min_index)\
    \ {\n            if ($arr->[$i] > $left_max) {\n                $left_max = $arr->[$i];\n\
    \            }\n        }\n        if ($i >= $min_index) {\n            if ($arr->[$i]\
    \ < $right_min) {\n                $right_min = $arr->[$i];\n            }\n \
    \       }\n    }\n    # print \"left_max $left_max right_min $right_min\\n\";\n\
    \    if ($left_max > $right_min) {\n        return 0;\n    }\n    return 1;\n}",
  "    my $len = @$arr;\n    my $right_cnt = 0;\n    my $left_cnt = 0;\n    my $l_max\
    \ = $arr->[0];\n    my $r_min = $arr->[$len-1];\n    my $i = 0;\n    my $j = $len\
    \ - 1;\n    my $result = 1;\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr->[$i]\
    \ < $l_max) {\n            $left_cnt++;\n        } else {\n            $l_max\
    \ = $arr->[$i];\n        }\n    }\n    if ($left_cnt > 1) {\n        $result =\
    \ \"\";\n    }\n    for ($j = $len - 1; $j >= 0; $j--) {\n        if ($arr->[$j]\
    \ > $r_min) {\n            $right_cnt++;\n        } else {\n            $r_min\
    \ = $arr->[$j];\n        }\n    }\n    if ($right_cnt > 1) {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my($count) = $#_;\n    my($min,\
    \ $max) = (1, $count);\n    for my $i (0 .. $count) {\n        if ($arr->[$i]\
    \ == $i + 1) {\n            $min = $i + 2;\n        }\n        else {\n      \
    \      $max = $i;\n            last;\n        }\n    }\n    return (1) if ($max\
    \ == $count && $arr->[0] > $arr->[$count]);\n    return ($min <= $count) ? $min\
    \ : 0;\n}", "    # Initialize your code here\n    my $count = 0;\n    my $flag\
    \ = 0;\n    my $i = 0;\n    while ($i < @$arr - 1) {\n        if ($arr->[$i] <\
    \ $arr->[$i + 1]) {\n            $i = $i + 1;\n        } else {\n            $flag\
    \ = 1;\n            $count = $count + 1;\n            $i = $i + 2;\n        }\n\
    \    }\n    return ($flag == 0) ? 1 : $count;\n}", "    my $N = @$arr;\n    if($N\
    \ == 0) {\n        return 1;\n    }", "    my $n = scalar(@$arr);\n    if ($n\
    \ == 0) {\n        return 1;\n    }", "    \n    my @sorted = sort {$a <=> $b}\
    \ @$arr;\n    my $sorted_size = @sorted;\n    my $size = @$arr;\n    for(my $i\
    \ = 0; $i < $size; $i++) {\n        return 1 if($arr->[$i] == $sorted[0]);\n \
    \   }\n    return 0;\n}", "    my $arr_size = scalar @$arr;\n    my $count = 0;\n\
    \    my $last_ele = 0;\n    if($arr_size == 0){\n        return $count;\n    }\n\
    \    for(my $i = 0; $i < $arr_size; $i++){\n        if($arr->[$i] > $last_ele){\n\
    \            $last_ele = $arr->[$i];\n        }\n        else{\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $n = scalar(@$arr);\n    my\
    \ $r = ($n == 0) ? 1 : 0;\n    my $k = 0;\n    my $i = 1;\n    while ($i < $n\
    \ && $arr->[$i] >= $arr->[$i - 1]) {\n        $i++;\n    }\n    while ($i < $n\
    \ && $arr->[$i] <= $arr->[$i - 1]) {\n        $i++;\n    }\n    while ($i < $n)\
    \ {\n        while ($i < $n && $arr->[$i] >= $arr->[$i - 1]) {\n            $i++;\n\
    \        }\n        $k++;\n        while ($i < $n && $arr->[$i] <= $arr->[$i -\
    \ 1]) {\n            $i++;\n        }\n    }\n    if ($k < 2) {\n        $r =\
    \ 1;\n    }\n    return $r;\n}", "    my $curr_max = -1;\n    for(my $i = 0; $i\
    \ < scalar(@$arr); $i++) {\n        if($arr->[$i] > $curr_max) {\n           \
    \ $curr_max = $arr->[$i];\n        }\n        else {\n            return 0;\n\
    \        }\n    }\n    return 1;\n}", "    my $n = scalar(@$arr);\n    my @sorted\
    \ = sort {$a <=> $b} @$arr;\n    my $i = 0;\n    while($i< $n){\n        if ($arr->[$i]\
    \ == $sorted[$i]){\n            $i++;\n        }\n        else{\n            $i++;\n\
    \            if($i == $n){\n                return 0;\n            }\n       \
    \     if($arr->[$i] == $sorted[$i]){\n                $i++;\n            }\n \
    \           else{\n                return 0;\n            }\n        }\n    }\n\
    \    return 1;\n}", "    my $i = 0;\n    while ($i < @$arr) {\n        if ( $i\
    \ == 0 ) {\n            if ($arr->[$i] > $arr->[$i+1]) {\n                my $temp\
    \ = $arr->[$i];\n                $arr->[$i] = $arr->[$i+1];\n                $arr->[$i+1]\
    \ = $temp;\n            }\n        }\n        elsif ( $i == @$arr - 1 ) {\n  \
    \          if ($arr->[$i] < $arr->[$i-1]) {\n                my $temp = $arr->[$i];\n\
    \                $arr->[$i] = $arr->[$i-1];\n                $arr->[$i-1] = $temp;\n\
    \            }\n        }\n        else {\n            if ($arr->[$i] < $arr->[$i-1]\
    \ || $arr->[$i] > $arr->[$i+1]) {\n                my $temp = $arr->[$i];\n  \
    \              $arr->[$i] = $arr->[$i+1];\n                $arr->[$i+1] = $temp;\n\
    \            }\n        }\n        $i++;\n    }\n    my $sorted = 0;\n    my $j\
    \ = 0;\n    while ($j < @$arr) {\n        if ($j == @$arr - 1) {\n           \
    \ $sorted = 1;\n        }\n        elsif ($arr->[$j] > $arr->[$j+1]) {\n     \
    \       $sorted = 0;\n            last;\n        }\n        $j++;\n    }\n   \
    \ return $sorted;\n}", "    my @sort_arr = sort {$a <=> $b} @$arr;\n    my $size\
    \ = scalar @$arr;\n    my $start_index = 0;\n    my $end_index = $size - 1;\n\
    \    my $result = 1;\n    while ($start_index <= $end_index) {\n        my $value\
    \ = shift @sort_arr;\n        if ($value != $arr->[$start_index]) {\n        \
    \    $result = 0;\n            last;\n        }\n        else {\n            $start_index++;\n\
    \        }\n        $value = pop @sort_arr;\n        if ($value != $arr->[$end_index])\
    \ {\n            $result = 0;\n            last;\n        }\n        else {\n\
    \            $end_index--;\n        }\n    }\n    return $result;\n}\n1;", " \
    \   my $len = scalar @$arr;\n    return 1 if $len < 2;\n    my @sorted = sort\
    \ {$a <=> $b} @$arr;\n    # first find the first index that is different \n  \
    \  my $i = 0;\n    while($sorted[$i] == $arr->[$i]) {\n        $i++;\n    }\n\
    \    my $j = $i;\n    while($sorted[$j] == $arr->[$j]) {\n        $j++;\n    }\n\
    \    return $j - $i == 1;\n}", "    my @arr = @$arr;\n    my @temp = sort {$a\
    \ <=> $b} @arr;\n    for (my $i = 0; $i < scalar @arr; $i++) {\n        if (@arr[$i]\
    \ != @temp[$i]) {\n            return '';\n        }\n    }\n    return 1;\n}",
  "    my $result = 1;\n    if (@$arr) {\n        my @sorted = sort {$a <=> $b} @$arr;\n\
    \        my $index = 0;\n        while ($index < @$arr) {\n            if ($arr->[$index]\
    \ == $sorted[$index]) {\n                $index++;\n            }\n          \
    \  else {\n                my $next = $index + 1;\n                if ($next <\
    \ @$arr && $arr->[$next] == $sorted[$index]) {\n                    ($arr->[$index],\
    \ $arr->[$next]) = ($arr->[$next], $arr->[$index]);\n                    $index\
    \ = $next;\n                }\n                else {\n                    $result\
    \ = 0;\n                    last;\n                }\n            }\n        }\n\
    \    }\n    return $result;\n}", "    my $len = scalar @$arr;\n    return 1 if\
    \ $len == 0;\n    my $min_i = -1;\n    my $min = $arr->[0];\n    for (my $i =\
    \ 0; $i < $len; $i++) {\n        if ($arr->[$i] < $min) {\n            $min =\
    \ $arr->[$i];\n            $min_i = $i;\n        }\n    }\n    if ($min_i == 0)\
    \ {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n1;", "    my\
    \ $ret = 0;\n    return 1 if(scalar(@$arr) == 0);\n    for(my $i = 0; $i < scalar(@$arr);\
    \ $i++) {\n        $ret = 1 if($arr->[$i] == $i + 1);\n    }\n    return $ret;\n\
    }", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $count = 0;\n    my $j\
    \ = 0;\n    my $l = -1;\n    while($i < $n) {\n        $count = 0;\n        $j\
    \ = $i + 1;\n        while($j < $n) {\n            if ($arr->[$j] < $arr->[$i])\
    \ {\n                $count++;\n                $l = $j;\n            }\n    \
    \        $j++;\n        }\n        if ($count > 1) {\n            return 0;\n\
    \        }\n        if ($count == 1) {\n            $i = $l;\n        }\n    \
    \    $i++;\n    }\n    return 1;\n}", "    my $len = scalar @$arr;\n    my $len_sorted\
    \ = $len - 1;\n    my $sorted = 0;\n    my $unsorted = 0;\n    for(my $i = 0;\
    \ $i < $len; $i++) {\n        if($i == 0) {\n            $sorted = $$arr[$i];\n\
    \            $unsorted = $$arr[$i+1];\n        } elsif($i < $len_sorted && $i\
    \ != 0) {\n            if($sorted <= $unsorted) {\n                $sorted = $unsorted;\n\
    \                $unsorted = $$arr[$i+1];\n            } else {\n            \
    \    return \"\";\n            }\n        }\n    }\n    return 1;\n}", "    my\
    \ $count = 0;\n    for(my $i = 0; $i < scalar(@$arr) - 1; $i++) {\n        if($arr->[$i]\
    \ > $arr->[$i + 1]) {\n            $count++;\n        }\n    }\n    if($count\
    \ > 1) {\n        return \"\";\n    }\n    return 1;\n}", "    my $sorted = scalar(@$arr)\
    \ ? 1 : 0;\n    my $c = 0;\n    my $swap_with_idx = -1;\n    # in sorted array,\
    \ left elem smaller than right elem.\n    # what if all elems are in decreasing\
    \ order? arr[0] > arr[1] > ... > arr[N-1]\n    # what if the array is sorted in\
    \ increasing order? arr[0] < arr[1] < ... < arr[N-1]\n    # what if the array\
    \ is ordered in non-decreasing order? arr[0] <= arr[1] <= ... <= arr[N-1]\n  \
    \  # in that case, if we do a right shift, after n-1 times, arr[0] will be at\
    \ arr[n-1],\n    # so arr[n-1] <= arr[0] <= arr[1] <= ... <= arr[n-2] in the original\
    \ array.\n    # so if arr[i] > arr[i+1], we need to find a spot to swap with.\n\
    \    # if arr[i+1] == arr[i+2] == ... == arr[n-1], there is no need to swap.\n\
    \    # if arr[i+1] < arr[i+2] < ... < arr[n-1], we need to swap.\n    # so if\
    \ arr[i] > arr[i+1], we need to check if all elems in [i+1] to [n-1] are equal.\n\
    \    #   if so, then no need to swap.\n    #   if not, swap\n    for (my $i =\
    \ 0; $i < scalar(@$arr) - 1; $i++) {\n        if ($arr->[$i] > $arr->[$i+1]) {\n\
    \            $sorted = 0;\n            # check if all elems in [i+1] to [n-1]\
    \ are equal.\n            for (my $j = $i + 1; $j < scalar(@$arr); $j++) {\n \
    \               if ($arr->[$j] != $arr->[$i+1]) {\n                    $swap_with_idx\
    \ = $j", "    my $N = scalar(@$arr);\n    my $count_ones = 0;\n    for(my $i =\
    \ 0; $i < $N; $i++) {\n        if($arr->[$i] == 1) {\n            $count_ones++;\n\
    \        }\n    }\n    return (($count_ones <= 1) ? 1 : 0);\n}", "    my @a =\
    \ @$arr;\n    my @b = sort {$a <=> $b} @a;\n    my $size = @a;\n    my $i = 0;\n\
    \    while(1) {\n        last if($i == $size - 1);\n        if($a[$i] == $b[$i])\
    \ {\n            $i++;\n        } else {\n            my $j = $i + 1;\n      \
    \      for(; $j < $size; $j++) {\n                last if($a[$j] == $b[$i]);\n\
    \            }\n            if($j == $size) {\n                return 0;\n   \
    \         } else {\n                $j--;\n                while($j > $i) {\n\
    \                    ($a[$j], $a[$j-1]) = ($a[$j-1], $a[$j]);\n              \
    \      $j--;\n                }\n                $i++;\n            }\n      \
    \  }\n    }\n    return 1;\n}\n1;", "    my $max = pop @$arr;\n    my $c = 1;\n\
    \    while(@$arr) {\n        my $n = pop @$arr;\n        if($n > $max) {\n   \
    \         $max = $n;\n            $c++;\n        }\n    }\n    return $c;\n}",
  "    return 1 if !@$arr;\n    return 0 if $arr->[0] > $arr->[1];\n    my $size =\
    \ @$arr;\n    my($min_index, $min_value) = (0, $arr->[0]);\n    for(my $i = 1;\
    \ $i < $size; $i++) {\n        if($arr->[$i] < $min_value) {\n            $min_index\
    \ = $i;\n            $min_value = $arr->[$i];\n        }\n    }\n    if($min_index\
    \ < $size-1) {\n        for(my $i = 0; $i < $size-1; $i++) {\n            return\
    \ 0 if $arr->[$i] > $arr->[$i+1];\n        }\n        return 1;\n    } else {\n\
    \        my $first = shift @$arr;\n        if($first < $arr->[0]) {\n        \
    \    push @$arr, $first;\n            return move_one_ball($arr);\n        } else\
    \ {\n            return 0;\n        }\n    }\n}", "    my @sorted = sort {$a <=>\
    \ $b} @$arr;\n    my $shift = 0;\n    for my $i (0..$#$arr) {\n        if ($sorted[$i]\
    \ != $arr->[$i]) {\n            last if $i == $#$arr;\n            if ($sorted[$i]\
    \ == $arr->[$i+1]) {\n                if ($shift) {\n                    return\
    \ 0;\n                }\n                $shift = 1;\n                $i++;\n\
    \            } else {\n                return 0;\n            }\n        }\n \
    \   }\n    return 1;\n}", "    my $size = scalar @$arr;\n    my $i = 0;\n    my\
    \ $j = $size - 1;\n    my $val = $arr->[$j];\n    my $max = max_value($arr);\n\
    \    for (my $k = 0; $k < $size; $k++) {\n        my $index = $j - $k;\n     \
    \   my $temp = $arr->[$index];\n        $arr->[$index] = $val;\n        $val =\
    \ $temp;\n    }\n    # return $arr;\n    print join(',', @$arr), \"\\n\";\n  \
    \  while ($i < $j) {\n        if ($arr->[$i] == $max) {\n            my $k = $i;\n\
    \            while ($k < $j) {\n                my $temp = $arr->[$k];\n     \
    \           $arr->[$k] = $arr->[$k + 1];\n                $arr->[$k + 1] = $temp;\n\
    \                $k++;\n            }\n            $i = 0;\n            $j--;\n\
    \        }\n        else {\n            $i++;\n        }\n    }\n    print join(',',\
    \ @$arr), \"\\n\";\n    my $result = $arr->[0] == $max ? 1 : 0;\n    return $result;\n\
    }", "    my $results = _move_one_ball_helper(@{$arr});\n    return ($results ?\
    \ 1 : 0);\n}", "    my $return = 1;\n    my $start;\n    my $len = scalar @$arr;\n\
    \    my $i = 0;\n    my $min = $$arr[0];\n    my $max = $$arr[$len - 1];\n   \
    \ while ($i < $len) {\n        if ($$arr[$i] > $max) {\n            $max = $$arr[$i];\n\
    \        }\n        if ($$arr[$i] < $min) {\n            $min = $$arr[$i];\n \
    \           $start = $i;\n        }\n        $i++;\n    }\n    $i = $start;\n\
    \    while ($i < $len) {\n        if ($$arr[$i] < $max) {\n            $return\
    \ = \"\";\n            last;\n        }\n        $i++;\n    }\n    return $return;\n\
    }", "    my $low = 0;\n    my $high = $#{$arr};\n    my $mid = int(($low + $high)\
    \ / 2);\n    my $max_arr = 0;\n    foreach my $i ($low..$high) {\n        $max_arr\
    \ = $arr->[$i] if $arr->[$i] > $max_arr;\n    }\n    my $curr_max = $max_arr;\n\
    \    my $i = $high;\n    while ($i >= 0) {\n        if ($arr->[$i] == $curr_max)\
    \ {\n            $curr_max--;\n            $i--;\n        } else {\n         \
    \   last;\n        }\n    }\n    if ($i == -1) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my @a = @$arr;\n    return 1 if scalar\
    \ @a < 2;\n    my @b = @a;\n    my $cnt = 0;\n    my $t;\n    while ($cnt < scalar\
    \ @a) {\n        $t = shift @b;\n        push @b, $t;\n        if (is_sorted(\\\
    @b)) {\n            return 1;\n        }\n        $cnt++;\n    }\n    return 0;\n\
    }", "    my($n);\n    my($i);\n    my($count);\n    $n = @$arr;\n    if($n ==\
    \ 0) {\n        return 1;\n    }\n    $count = 0;\n    for($i = 0; $i < $n - 1;\
    \ $i++) {\n        if($arr->[$i] > $arr->[$i + 1]) {\n            $count++;\n\
    \        }\n    }\n    if($count == 1) {\n        return 1;\n    }\n    else {\n\
    \        return 0;\n    }\n}", "    my @sorted = sort{$a <=> $b} @$arr;\n    my\
    \ %counter;\n    map{$counter{$_}++} @$arr;\n    my @hash = sort{$a <=> $b} keys\
    \ %counter;\n    my @uniq = sort{$a <=> $b} grep{$counter{$_}==1} @hash;\n   \
    \ if(@uniq != @$arr-1){\n        return \"\";\n    }\n    if(@uniq != 0){\n  \
    \      my $index = first_index{$_==$uniq[0]} @$arr;\n        my $curr_index =\
    \ $index;\n        while($curr_index <= $#$arr){\n            return 1 if ($arr->[$curr_index]\
    \ == $sorted[$curr_index]);\n            $curr_index++;\n        }\n        my\
    \ $curr_index = 0;\n        while($curr_index < $index){\n            return 1\
    \ if ($arr->[$curr_index] == $sorted[$curr_index]);\n            $curr_index++;\n\
    \        }\n    }else{\n        my $curr_index = 0;\n        while($curr_index\
    \ <= $#$arr){\n            return 1 if ($arr->[$curr_index] == $sorted[$curr_index]);\n\
    \            $curr_index++;\n        }\n    }\n    return \"\";\n}", "    my $N\
    \ = @$arr;\n    return 1 if($N == 0);\n    my $swaps = 0;\n    for(my $i = 0;\
    \ $i < $N; $i++) {\n        my $j = $i;\n        while($j >= 0 && $arr->[$j] >\
    \ $arr->[$j+1]) {\n            my $temp = $arr->[$j];\n            $arr->[$j]\
    \ = $arr->[$j+1];\n            $arr->[$j+1] = $temp;\n            $j--;\n    \
    \        $swaps++;\n        }\n    }\n    if($swaps <= 1) {\n        return 1;\n\
    \    } else {\n        return 0;\n    }\n}\n1;", "    my $n = scalar(@$arr);\n\
    \    return 1 if $n == 0;\n    for (my $i = 0; $i < $n - 1; $i++) {\n        if\
    \ ($arr->[$i] > $arr->[$i + 1]) {\n            my $min = $arr->[$i + 1];\n   \
    \         for (my $j = $i + 1; $j < $n; $j++) {\n                $min = $arr->[$j]\
    \ if $arr->[$j] < $min;\n            }\n            return 1 if $arr->[0] == $min;\n\
    \        }\n    }\n    return 1;\n}", "    my $len = scalar @$arr;\n    # count\
    \ the number of times we can sort the array by moving 1\n    # element to the\
    \ left\n    my $count = 0;\n    for(my $i = 0; $i < $len; $i++) {\n        my\
    \ $value = $arr->[$i];\n        my $tmp = $value;\n        $tmp--;\n        while($tmp\
    \ >= 0) {\n            my $tmp_val = $arr->[$tmp];\n            # check if the\
    \ tmp_val and value are not the same\n            if($tmp_val != $value) {\n \
    \               # now, we have to check if the tmp_val is closer to value\n  \
    \              # than the current tmp value\n                if(($value - $tmp_val)\
    \ < ($value - $tmp)) {\n                    $tmp = $tmp_val;\n               \
    \ }\n            }\n            $tmp--;\n        }\n        # check if tmp is\
    \ zero, i.e., we can move the element\n        if($tmp == 0) {\n            $count++;\n\
    \        }\n    }\n    # now, check if the count is equal to the length of the\
    \ array\n    if($count == $len) {\n        return 1;\n    }\n    return 0;\n}",
  "    my $n = @$arr;\n    my $break = 0;\n    my $start = 1;\n    my $end = $n;\n\
    \    my $mid = int(($start + $end) / 2);\n    while ($start <= $end) {\n     \
    \   $mid = int(($start + $end) / 2);\n        my $mid_element = $arr->[$mid];\n\
    \        my $prev_element = $arr->[$mid - 1];\n        my $next_element = $arr->[$mid\
    \ + 1];\n        if ($mid_element > $prev_element && $mid_element > $next_element)\
    \ {\n            if ($mid_element > $arr->[0]) {\n                $start = $mid\
    \ + 1;\n            }\n            else {\n                $end = $mid - 1;\n\
    \            }\n        }\n        else {\n            if ($mid_element > $prev_element)\
    \ {\n                $end = $mid - 1;\n            }\n            else {\n   \
    \             $start = $mid + 1;\n            }\n        }\n    }\n    if ($arr->[$mid]\
    \ > $arr->[0]) {\n        return 1;\n    }\n    else {\n        return 0;\n  \
    \  }\n}", "    # set $n to the length of the array\n    my $n = scalar @$arr;\n\
    \    # if the array is empty then return 1\n    return 1 if $n == 0;\n    # set\
    \ $min to the first element in the array\n    my $min = $arr->[0];\n    # set\
    \ $m to the index of the second element in the array\n    my $m = 1;\n    # set\
    \ $prev to the first element in the array\n    my $prev = $arr->[0];\n    # loop\
    \ over all the remaining elements in the array\n    for my $i (1..$n-1) {\n  \
    \      # if the element is less than the minimum so far then set $min to\n   \
    \     # that element and set $m to the index of that element\n        if ($arr->[$i]\
    \ < $min) {\n            $min = $arr->[$i];\n            $m = $i + 1;\n      \
    \  }\n        # if the element is less than the previous element then return \"\
    \"\n        if ($arr->[$i] < $prev) {\n            return \"\";\n        }\n \
    \       # set $prev to the current element\n        $prev = $arr->[$i];\n    }\n\
    \    # otherwise return 1\n    return 1;\n}", "    # Write your code here\n  \
    \  return 1;\n}", "    my @arr = @$arr;\n    if (scalar @arr < 2) {\n        return\
    \ 1;\n    }\n    my $counter = 0;\n    for my $i (0..$#arr) {\n        if ($arr[$i]\
    \ != $i + 1) {\n            $counter++;\n        }\n    }\n    return $counter\
    \ > 1 ? 0 : 1;\n}", "    my $is_sorted = 0;\n    my $prev = -1;\n    my $i = 0;\n\
    \    while($i < scalar(@$arr)) {\n        $is_sorted = 1;\n        if($prev !=\
    \ -1 && $arr->[$i] < $prev) {\n            $is_sorted = 0;\n            last;\n\
    \        }\n        $prev = $arr->[$i];\n        $i++;\n    }\n    return $is_sorted;\n\
    }", "    my %index_of = map {$arr->[$_] => $_} (0..$#$arr);\n    return 1 if $#$arr\
    \ < 0;\n    my $min = $arr->[0];\n    for my $i (1..$#$arr) {\n        return\
    \ 0 if $arr->[$i] < $min;\n        if($arr->[$i] > $min) {\n            #for the\
    \ last element and the second last element\n            #the index cannot be same.\n\
    \            #So if there is a repetition of the min element\n            #or\
    \ if the second last element is the same as the last element\n            #we\
    \ cannot get a non-decreasing array\n            return 0 if $i == $#$arr and\
    \ $arr->[$i] == $arr->[$i-1];\n            return 0 if $i == $#$arr-1 and $arr->[$i]\
    \ == $arr->[$i+1];\n            #if the index of the current element is less than\
    \ the previous\n            #element we cannot get a non-decreasing array\n  \
    \          return 0 if $index_of{$arr->[$i]} < $index_of{$arr->[$i-1]};\n    \
    \        #if the index of the current element is more than the previous\n    \
    \        #element we cannot get a non-decreasing array\n            return 0 if\
    \ $index_of{$arr->[$i]} > $index_of{$arr->[$i-1]};\n            $min = $arr->[$i];\n\
    \        }\n    }\n    return 1;\n}", "    my $n = scalar(@$arr);\n    my $sorted\
    \ = 0;\n    my $last_index = $n - 1;\n    for (my $i = $n - 1; $i >= 0; $i--)\
    \ {\n        if ($arr->[$i] <= $arr->[$last_index]) {\n            $last_index\
    \ = $i;\n        } else {\n            $sorted = 1;\n            $last_index =\
    \ $i;\n        }\n    }\n    return 1 - $sorted;\n}", "    my $arr_size = scalar\
    \ @$arr;\n    # The whole array is in order from start to end\n    return 1 if\
    \ $arr_size == 1;\n    # We have at least 2 elements in the array\n    my $minimum\
    \ = min @$arr;\n    my $minimum_index = first_index { $_ == $minimum } @$arr;\n\
    \    my $right_array = [@$arr[($minimum_index + 1)..($arr_size - 1)]];\n    my\
    \ $left_array = [@$arr[0..($minimum_index - 1)]];\n    # 1st case: The left array\
    \ is empty. So the right array should be sorted\n    # in ascending order\n  \
    \  return 1 if scalar @$left_array == 0;\n    # 2nd case: The right array is empty.\
    \ So the left array should be sorted\n    # in descending order\n    return 1\
    \ if scalar @$right_array == 0;\n    # 3rd case: In this case both the left and\
    \ right arrays are not empty\n    # So the left array should be sorted in descending\
    \ order and the right\n    # array should be sorted in ascending order\n    my\
    \ $left_ascending = _is_ascending($left_array);\n    my $right_ascending = _is_ascending($right_array);\n\
    \    return 1 if !$left_ascending && $right_ascending;\n    return 0;\n}", " \
    \   return 1 if ( ! @$arr );\n    my @seq;\n    for my $i ( 0 .. $#$arr ) {\n\
    \        push @seq, $arr->[$i];\n        my $min = $arr->[$i];\n        my $min_idx\
    \ = $i;\n        for my $j ( $i + 1 .. $#$arr ) {\n            if ( $arr->[$j]\
    \ < $min ) {\n                $min = $arr->[$j];\n                $min_idx = $j;\n\
    \            }\n        }\n        if ( $min_idx != $i ) {\n            if ( @seq\
    \ == 1 ) {\n                @seq = ();\n                $i = $min_idx - 1;\n \
    \           }\n            else {\n                return 0;\n            }\n\
    \        }\n    }\n    return 1;\n}", "    my @arr = @$arr;\n    my $count = @arr;\n\
    \    my $tmp = @arr[$count-1];\n    for (my $i = $count-1; $i >= 0; $i--) {\n\
    \        @arr[$i] = @arr[$i-1];\n    }\n    @arr[0] = $tmp;\n    return @arr;\n\
    }", "    my($i, $j, $k, $b, $c, $count);\n    my($n) = scalar(@$arr);\n    for($i\
    \ = 0; $i < $n; $i++) {\n        for($j = $i + 1; $j < $n; $j++) {\n         \
    \   if($arr->[$i] > $arr->[$j]) {\n                $count = 0;\n             \
    \   $b = $i;\n                $c = $j;\n                while($arr->[$b] > $arr->[$c])\
    \ {\n                    $count++;\n                    $b++;\n              \
    \      $c++;\n                }\n                if($count == $n - $i - 1) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my @A = @$arr;\n    my @shifts = (0) x scalar(@A);\n\
    \    my @sorted = sort {$a <=> $b} @A;\n    for(my $i = 0; $i < scalar(@A); $i++)\
    \ {\n        for(my $j = 0; $j < scalar(@A); $j++) {\n            if ($A[$j] ==\
    \ $sorted[$i]) {\n                my $diff = ($j - $i + scalar(@A)) % scalar(@A);\n\
    \                $shifts[$i] = $diff;\n                last;\n            }\n\
    \        }\n    }\n    #print \"@shifts\\n\";\n    my $gcd = gcd(@shifts);\n \
    \   if ($gcd == 1) {\n        return 1;\n    }\n    return \"\";\n}", "    return\
    \ 1 if @$arr == 0;\n    my $counter = 0;\n    my $index;\n    my $last_index =\
    \ @$arr - 1;\n    my $ball_moved = 0;\n    my $i = 0;\n    while($i < @$arr){\n\
    \        if($i == 0){\n            if($arr->[$i] > $arr->[$i+1]){\n          \
    \      $ball_moved = 1;\n                $counter++;\n                $index =\
    \ $i;\n            }\n        }\n        elsif($i == $last_index){\n         \
    \   if($arr->[$i] < $arr->[$i-1]){\n                $ball_moved = 1;\n       \
    \         $counter++;\n                $index = $i;\n            }\n        }\n\
    \        else{\n            if($arr->[$i] > $arr->[$i+1] && $arr->[$i] < $arr->[$i-1]){\n\
    \                $ball_moved = 1;\n                $counter++;\n             \
    \   $index = $i;\n            }\n        }\n        $i++;\n    }\n    if($counter\
    \ == 1){\n        if($index == 0){\n            if($arr->[$index] > $arr->[$index+1]){\n\
    \                $arr->[$index] = $arr->[$index+1];\n                $arr->[$index+1]\
    \ = $arr->[$index+2];\n                $arr->[$index+2] = $arr->[$index+3];\n\
    \                $arr->[$index+3] = $arr->[$index+4];\n                $arr->[$index+4]\
    \ = $arr->[$index];\n            }\n        }\n        elsif($index == 1){\n \
    \           if($arr->[$index] > $arr->[$index+1]){\n                $arr->[$index]\
    \ = $arr->[$index+1];\n                $arr->[$index+1] = $arr->[$index+2];\n\
    \                $arr->[$index+2] = $arr->[$index+3];\n                $arr->[$",
  "    my $n = scalar(@$arr);\n    my $ans = 0;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = $i+1; $j < $n; $j++) {\n            if ($arr->[$i] >\
    \ $arr->[$j]) {\n                $ans = 1;\n                last;\n          \
    \  }\n        }\n    }\n    return $ans;\n}", "    my $len = scalar @$arr;\n \
    \   if($len == 0){\n        return 1;\n    }\n    my $shift = 0;\n    for(my $i\
    \ = 0; $i < $len - 1; $i++){\n        if($arr->[$i] > $arr->[$i + 1]){\n     \
    \       $shift++;\n        }\n    }\n    if($shift <= 1){\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my $n = scalar(@$arr);\n    if ($n == 0) {\n\
    \        return 1;\n    }\n    my @a = @$arr;\n    my @orig = @a;\n    #print\
    \ \"Given arr: @a\\n\";\n    #print \"Original  : @orig\\n\";\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    # 1. Find the smallest element in the array.\n    my\
    \ $min_index = 0;\n    for (my $k = 1; $k < $n; $k++) {\n        if ($a[$k] <\
    \ $a[$min_index]) {\n            $min_index = $k;\n        }\n    }\n    # If\
    \ the smallest element is not at index 0 then shift the array till\n    # the\
    \ smallest element is at index 0.\n    if ($min_index != 0) {\n        # rotate\
    \ the array to bring $min_index element to the 0th index.\n        my @first =\
    \ splice(@a, 0, $min_index);\n        @a = (@a, @first);\n        #print \"Aftr\
    \ rotat: @a\\n\";\n    }\n    # Check if the array is sorted and if the last element\
    \ is smaller than the\n    # first element\n    my $is_sorted = 1;\n    for (my\
    \ $k = 1; $k < $n; $k++) {\n        if ($a[$k] < $a[$k - 1]) {\n            $is_sorted\
    \ = 0;\n            last;\n        }\n    }\n    if ($is_sorted && $a[0] < $a[$n\
    \ - 1]) {\n        return 1;\n    } else {\n        return 0;\n    }\n}", "  \
    \  my @sorted = sort {$a <=> $b} @$arr;\n    for my $i (0..@$arr-1) {\n      \
    \  if ($arr->[$i] != $sorted[$i]) {\n            return 0;\n        }\n    }\n\
    \    return 1;\n}", "    my %hash;\n    for (my $i = 0; $i < scalar @$arr; $i++)\
    \ {\n        $hash{$arr->[$i]} = $i;\n    }\n    my @copy = @$arr;\n    @copy\
    \ = sort {$a <=> $b} @copy;\n    my $len = scalar @copy;\n    my $max = $copy[-1];\n\
    \    my $i = 0;\n    while ($i < $len) {\n        my $curr = $copy[$i];\n    \
    \    my $target = $hash{$curr};\n        if ($target < $i) {\n            last;\n\
    \        }\n        if ($target == $i) {\n            $i++;\n            next;\n\
    \        }\n        for (my $j = $i; $j < $target; $j++) {\n            my $temp\
    \ = $arr->[$j];\n            $arr->[$j] = $max;\n            $arr->[$target] =\
    \ $temp;\n            $target = $hash{$temp};\n        }\n        $i++;\n    }\n\
    \    return 1;\n}", "    my $n = @$arr;\n    return 1 if $n == 0;\n    my $count\
    \ = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        $count++ if $arr->[$i] <\
    \ $arr->[$i - 1];\n    }\n    return $count == 0 || $count == 1 ? 1 : 0;\n}\n\
    1;", "    return 1 if (!@$arr);\n    my $i = 0;\n    while ($i < $#$arr) {\n \
    \       if ($arr->[$i] > $arr->[$i+1]) {\n            for (my $j = $i; $j >= 0;\
    \ $j--) {\n                $arr->[$j+1] = $arr->[$j];\n            }\n       \
    \     $arr->[0] = $arr->[$i+1];\n            $i = 0;\n        } else {\n     \
    \       $i++;\n        }\n    }\n    return 1;\n}", "    my($i, $p, $max, $cnt);\n\
    \    $max = 0;\n    $cnt = 0;\n    $p = 0;\n    foreach $i (@$arr) {\n       \
    \ if($i > $max) {\n            $max = $i;\n            $cnt++;\n        }\n  \
    \      elsif($i == $max) {\n            $p = 1;\n        }\n    }\n    if($cnt\
    \ == $#$arr + 1) {\n        return 1;\n    }\n    elsif($cnt == $#$arr and $p\
    \ == 1) {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n\
    }", "    return 1 if scalar @$arr == 0;\n    my $max = 0;\n    for(my $i = 0;\
    \ $i < scalar @$arr; $i++) {\n        if ($arr->[$i] > $max) {\n            $max\
    \ = $arr->[$i];\n        } else {\n            return 0;\n        }\n    }\n \
    \   return 1;\n}", "    # TODO: Implement Code Here\n    die \"Not Implemented\"\
    ;\n}", "    my $N = scalar(@$arr);\n    if ($N <= 1) {\n        return 1;\n  \
    \  }\n    # to obtain a sorted array, the biggest value in the array must be in\
    \ the\n    # tail, and all elements before the biggest value must be smaller than\
    \ the\n    # biggest value.\n    my $max = max(@$arr);\n    my $max_pos = -1;\n\
    \    for (my $i = 0; $i < $N; $i++) {\n        if ($arr->[$i] == $max) {\n   \
    \         $max_pos = $i;\n            last;\n        }\n    }\n    my $ok = 1;\n\
    \    for (my $i = 0; $i < $max_pos; $i++) {\n        if ($arr->[$i] > $max) {\n\
    \            $ok = 0;\n            last;\n        }\n    }\n    return $ok;\n}",
  "    my $len = @$arr;\n    my @ball_position;\n    my @ball_in_position;\n    for\
    \ (my $i = 0; $i < $len; $i++) {\n        my $key = $$arr[$i];\n        $ball_position[$key]\
    \ = $i;\n        $ball_in_position[$i] = $key;\n    }\n    my $index = $ball_position[1];\n\
    \    for (my $i = 1; $i < $len; $i++) {\n        my $next_key = $ball_in_position[$index];\n\
    \        $index = $ball_position[$next_key];\n        if ($index != $i) {\n  \
    \          return 0;\n        }\n    }\n    return 1;\n}", "    my @arr = @$arr;\n\
    \    my @sorted = sort {$a <=> $b} @arr;\n    my $count = 0;\n    my $sorted_count\
    \ = 0;\n    while($count < @arr and $sorted_count < @arr) {\n        if($arr[$count]\
    \ == $sorted[$sorted_count]) {\n            $count++;\n            $sorted_count++;\n\
    \        }\n        else {\n            $count++;\n        }\n    }\n    if($sorted_count\
    \ == @arr) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n\
    }", "    my $count = 0;\n    my $len = scalar @$arr;\n    for (my $i = 0; $i <\
    \ $len; $i++) {\n        my $idx = $arr->[$i] - 1;\n        if ($idx >= $len)\
    \ {\n            return 0;\n        }\n        if ($idx < $i) {\n            $count++;\n\
    \        }\n    }\n    return ($count % 2 == 0) ? 1 : 0;\n}", "    my($count)\
    \ = 1;\n    my($i);\n    my($len) = scalar(@$arr);\n    for($i = 0; $i < $len;\
    \ $i++) {\n        if($i+1 < $len && $arr->[$i] > $arr->[$i+1]) {\n          \
    \  $count = 0;\n            last;\n        }\n    }\n    return $count;\n}", " \
    \   $arr = [ sort { $a <=> $b } @$arr ];\n    for (1..$#$arr) {\n        return\
    \ 1 if ($arr->[$_] != $arr->[$_ - 1] + 1);\n    }\n    return 0;\n}", "    return\
    \ 1 if @$arr == 0;\n    my $n = @$arr;\n    # So now we need to see how many right\
    \ shifts we need to do to get\n    # non-decreasing order\n    my $shifts = 0;\n\
    \    my $min = $arr->[0];\n    for(my $i = 1; $i < $n; $i++) {\n        $min =\
    \ $arr->[$i] if $arr->[$i] < $min;\n        $shifts++ if $arr->[$i] < $arr->[$i\
    \ - 1];\n    }\n    return 0 if $shifts > 1;\n    return 0 if $shifts == 1 &&\
    \ $min != $arr->[0];\n    return 1;\n}", "    my @arr = @$arr;\n    my @sorted\
    \ = sort {$a <=> $b} @arr;\n    my $sorted = join '', @sorted;\n    my $curr =\
    \ join '', @arr;\n    while($curr ne $sorted) {\n        my $tmp = pop @arr;\n\
    \        unshift @arr, $tmp;\n        $curr = join '', @arr;\n    }\n    return\
    \ 1;\n}", "    my $count = 0;\n    my $n = scalar @$arr;\n    for (my $i = 1;\
    \ $i < $n; $i++) {\n        my $curr = $arr->[$i];\n        my $prev = $arr->[$i\
    \ - 1];\n        if ($curr < $prev) {\n            $count++;\n        }\n    }\n\
    \    if ($count > 1) {\n        return 0;\n    }\n    return 1;\n}", "    # Base\
    \ case when arr is empty or has 1 element\n    return 1 if (scalar(@$arr) <= 1);\n\
    \    my($max_index) = 0;\n    my($second_max_index) = 0;\n    for (my($i) = 1;\
    \ $i < scalar(@$arr); $i++) {\n        if ($arr->[$i] > $arr->[$max_index]) {\n\
    \            $second_max_index = $max_index;\n            $max_index = $i;\n \
    \       }\n        elsif ($arr->[$i] > $arr->[$second_max_index]) {\n        \
    \    $second_max_index = $i;\n        }\n    }\n    my($max_element) = $arr->[$max_index];\n\
    \    # If max element is at 0th index then\n    # it has to be at 0th index for\
    \ increasing order\n    # If max element is not at 0th index then\n    # atleast\
    \ second max element should be at 0th index\n    if ($max_index == 0) {\n    \
    \    return 1;\n    }\n    elsif ($second_max_index == 0) {\n        return 1;\n\
    \    }\n    else {\n        return 0;\n    }\n}", "    return 0;\n}", "    my\
    \ @sorted = sort {$a <=> $b} @$arr;\n    # my @sorted = sort {$a cmp $b} @$arr;\n\
    \    my $cnt = 0;\n    my $last = $#sorted;\n    my $first = 0;\n    while ($first\
    \ <= $last) {\n        if ($sorted[$first] != $arr->[$first]) {\n            $cnt++;\n\
    \        }\n        $first++;\n    }\n    return ($cnt == 1) ? 1 : 0;\n}", " \
    \   my $result = 1;\n    my $i = 0;\n    while ($i < scalar(@$arr)) {\n      \
    \  # the ball is in position i\n        my $current_i = $i;\n        # the ball\
    \ needs to be in position arr[i] - 1\n        my $goal_i = $arr->[$i] - 1;\n \
    \       #\n        # find the ball that needs to be in position $i (a.k.a. $current_i)\n\
    \        my $current_j = $current_i;\n        while ($arr->[$current_j] != $current_i\
    \ + 1) {\n            $current_j = $arr->[$current_j] - 1;\n        }\n      \
    \  # if it's the same ball, then we can't get the next one in position\n     \
    \   if ($current_i == $current_j) {\n            $result = 0;\n            last;\n\
    \        }\n        # if the ball that needs to be in position $i is already in\
    \ position $i,\n        # then we can move on to the next ball\n        if ($current_i\
    \ == $goal_i) {\n            $i++;\n        }\n        # otherwise, the ball $current_j\
    \ is the one that needs to be in position\n        # $i, so swap the two\n   \
    \     else {\n            ($arr->[$current_i], $arr->[$current_j]) = ($arr->[$current_j],\
    \ $arr->[$current_i]);\n        }\n    }\n    return $result;\n}", "    \n   \
    \ my $tmp = [@$arr];\n    my $flag = 0;\n    my $l = @$arr;\n    while(1) {\n\
    \        my $k = $l;\n        for my $i (0..$k-2) {\n            if($tmp->[$i]\
    \ < $tmp->[$i+1]) {\n                $l--;\n                $flag = 1;\n     \
    \           my $j = $i+1;\n                for my $k ($j..$l-1) {\n          \
    \          $tmp->[$k] = $tmp->[$k+1];\n                }\n                $tmp->[$l]\
    \ = $tmp->[0];\n                for my $k (0..$l-1) {\n                    $tmp->[$k]\
    \ = $tmp->[$k+1];\n                }\n                last;\n            }\n \
    \       }\n        last if $flag == 0;\n        $flag = 0;\n    }\n    return\
    \ $l == 0 ? 1 : 0;\n}", "    my($j, $k, $m) = (1, 1, 0);\n    my(@sorted_arr)\
    \ = sort {$a <=> $b} @$arr;\n    for $j (0..@$arr-1) {\n        for $k (0..@$arr-1)\
    \ {\n            if ($arr->[$k] == $sorted_arr[$j]) {\n                $m = $k\
    \ if ($k < $m);\n            }\n        }\n    }\n    return 1 if ($m == 0);\n\
    \    return \"\";\n}", "    my @num_to_pos = (1..$#{$arr});\n    for my $i (1..$#{$arr})\
    \ {\n        last if $arr->[$i] <= $arr->[$i-1];\n        $num_to_pos[$arr->[$i]]\
    \ = $i-1;\n    }\n    for my $i (0..$#{$arr}-1) {\n        last if $arr->[$i]\
    \ <= $arr->[$i+1];\n        $num_to_pos[$arr->[$i]] = $i+1;\n    }\n    return\
    \ 1 if $arr->[-1] == $#{$arr};\n    my @num_to_pos_copy = @num_to_pos;\n    my\
    \ $count = 0;\n    while (1) {\n        if ($num_to_pos[$arr->[0]] == 0) {\n \
    \           return 0;\n        }\n        else {\n            $num_to_pos[$arr->[0]]--;\n\
    \            $count++;\n        }\n        if ($num_to_pos[$arr->[0]] == 0) {\n\
    \            $count += $#{$arr};\n            return $count;\n        }\n    \
    \    if ($num_to_pos[$arr->[0]] == $num_to_pos[$arr->[$num_to_pos[$arr->[0]]]])\
    \ {\n            $count++;\n            for my $i (1..$#{$arr}) {\n          \
    \      $num_to_pos[$arr->[$i]] = $i;\n            }\n            if ($num_to_pos[$arr->[0]]\
    \ == 0) {\n                $count += $#{$arr};\n                return $count;\n\
    \            }\n        }\n    }\n}", "    my @balls = sort {$a <=> $b} @$arr;\n\
    \    my $len = scalar @balls;\n    if ($len == 0) {\n        return 1;\n    }\n\
    \    my $max = $balls[$len - 1];\n    my $shift = 0;\n    for (my $i = 0; $i <\
    \ $len - 1; $i++) {\n        if ($balls[$i] > $balls[$i + 1]) {\n            $shift++;\n\
    \        }\n    }\n    if ($shift > 1) {\n        return -1;\n    } elsif ($shift\
    \ == 1) {\n        return 1;\n    } else {\n        return 0;\n    }\n}", "  \
    \  my($count, $length, $value, $index);\n    my($count_arr) = [];\n    $length\
    \ = scalar(@{$arr});\n    if( $length == 0 ) {\n        return 1;\n    }\n   \
    \ for( $index = 0; $index < $length; $index++ ) {\n        $value = $arr->[$index];\n\
    \        if( $value > $length ) {\n            return 0;\n        }\n        if(\
    \ defined($count_arr->[$value]) ) {\n            return 0;\n        }\n      \
    \  $count_arr->[$value] = 1;\n    }\n    for( $index = 1; $index < $length; $index++\
    \ ) {\n        if( $arr->[$index] < $arr->[$index - 1] ) {\n            $count++;\n\
    \        }\n    }\n    if( $count > 1 ) {\n        return 0;\n    }\n    return\
    \ 1;\n}", "    my @sorted = sort {$a <=> $b} @$arr;\n    my $total_right_shift\
    \ = 0;\n    for (my $i = 0; $i < @$arr; $i++) {\n        if ($sorted[$i] == $arr->[$i])\
    \ {\n            $total_right_shift++;\n        }\n    }\n    return $total_right_shift\
    \ == @$arr ? 1 : '';\n}", "    if(!@$arr){\n        return 1;\n    }\n    my @arr\
    \ = sort {$a <=> $b} @$arr;\n    my @count = (0) x (@arr);\n    for(my $i = 0;\
    \ $i < scalar(@arr); $i++){\n        my $idx = binary_search(\\@arr, 0, scalar(@arr)-1,\
    \ $arr[$i]);\n        $count[$idx]++;\n    }\n    my $max = $count[0];\n    my\
    \ $flag = 0;\n    for(my $i = 1; $i < scalar(@count); $i++){\n        if($count[$i]\
    \ > $max){\n            $flag = 1;\n            last;\n        }\n        $max\
    \ = $count[$i];\n    }\n    if($flag){\n        return 0;\n    }\n    return 1;\n\
    }", "    return 1 if not $arr or @$arr < 2;\n    my $ball = shift @$arr;\n   \
    \ my $count = 0;\n    for (@$arr) {\n        $count++ if $_ <= $ball;\n    }\n\
    \    return 0 if $count == @$arr;\n    return 1;\n}", "    my($min_elem, $min_index,\
    \ $max_elem, $max_index, $len);\n    # To handle special case when the length\
    \ of array is 1\n    $len = scalar(@$arr);\n    if($len == 1) {\n        return\
    \ 1;\n    }\n    # Get the minimum and maximum values of the array\n    $min_elem\
    \ = $arr->[0];\n    $min_index = 0;\n    $max_elem = $arr->[0];\n    $max_index\
    \ = 0;\n    for(my $i = 1; $i < $len; $i++) {\n        if($arr->[$i] < $min_elem)\
    \ {\n            $min_elem = $arr->[$i];\n            $min_index = $i;\n     \
    \   }\n        if($arr->[$i] > $max_elem) {\n            $max_elem = $arr->[$i];\n\
    \            $max_index = $i;\n        }\n    }\n    # Check if the array is already\
    \ sorted in non-decreasing order\n    if($max_elem == $len) {\n        return\
    \ 1;\n    }\n    # Check if the array is sorted in non-increasing order\n    if($min_elem\
    \ == 1) {\n        return 1;\n    }\n    # Check if the maximum value of the array\
    \ is at the starting position \n    # and the minimum value of the array is at\
    \ the last position.\n    if($max_index == 0 && $min_index == $len - 1) {\n  \
    \      return 1;\n    }\n    return \"\";\n}\n1;", "    my $size = scalar @$arr;\n\
    \    my $mid = ceil($size/2);\n    if ($size == 0 || $size == 1) {\n        return\
    \ 1;\n    }\n    my $sum1 = 0;\n    for (my $i = 0; $i < $mid; $i++) {\n     \
    \   $sum1 += $arr->[$i];\n    }\n    my $sum2 = 0;\n    for (my $i = $mid; $i\
    \ < $size; $i++) {\n        $sum2 += $arr->[$i];\n    }\n    if ($sum1 == $sum2)\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    my $n = scalar(@$arr);\n\
    \    my $flag = 1;\n    for(my $i = 0; $i < $n - 1; $i++) {\n        if($arr->[$i]\
    \ > $arr->[$i + 1]) {\n            if($i == 0) {\n                if($arr->[$i]\
    \ > $arr->[$i + 2]) {\n                    $flag = 0;\n                    last;\n\
    \                }\n            }\n            else {\n                if($arr->[$i\
    \ - 1] > $arr->[$i + 1]) {\n                    $flag = 0;\n                 \
    \   last;\n                }\n            }\n        }\n    }\n    return $flag;\n\
    }", "    for my $i (1..$#$arr) {\n        # Find the leftmost maximum element.\n\
    \        my $max = $arr->[$i-1];\n        my $max_j = $i-1;\n        for my $j\
    \ ($i..$#$arr) {\n            if ($arr->[$j] >= $max) {\n                $max\
    \ = $arr->[$j];\n                $max_j = $j;\n            }\n        }\n    \
    \    # Check if we can put it in the ith spot or in the i-1 spot.\n        if\
    \ ($max_j > $i) {\n            return 0;\n        }\n        # Swap the ith and\
    \ (i-1)th elements.\n        my $temp = $arr->[$i-1];\n        $arr->[$i-1] =\
    \ $arr->[$i];\n        $arr->[$i] = $temp;\n    }\n    return 1;\n}", "    return\
    \ '1' if scalar @$arr == 0;\n    my $max = pop @$arr;\n    while (my $next = pop\
    \ @$arr) {\n        return '' if $next > $max;\n        $max = $next;\n    }\n\
    \    return '1';\n}", "    # check for empty arr\n    if (scalar(@$arr) == 0)\
    \ {\n        return 1;\n    }\n    # check if current order is correct\n    if\
    \ (is_ordered($arr)) {\n        return 1;\n    }\n    # since the arr is not empty,\
    \ we start with the first index 1,\n    # as 0 is already occupied by the last\
    \ element.\n    my $i = 1;\n    while($i < scalar(@$arr)) {\n        if ($arr->[$i]\
    \ < $arr->[$i-1]) {\n            # if the current element is smaller than the\
    \ preceding element,\n            # then swap the two elements.\n            my\
    \ $tmp = $arr->[$i];\n            $arr->[$i] = $arr->[$i-1];\n            $arr->[$i-1]\
    \ = $tmp;\n            $i = 1;\n        } else {\n            # else move to the\
    \ next index\n            $i++;\n        }\n    }\n    # if the arr is still not\
    \ ordered, then return 0.\n    if (is_ordered($arr)) {\n        return 1;\n  \
    \  } else {\n        return 0;\n    }\n}", "    my @sorted = sort{$a <=> $b} @$arr;\n\
    \    my $sorted_str = \"\";\n    foreach my $val (@sorted) {\n\t$sorted_str .=\
    \ $val;\n    }\n    my $flag = 0;\n    my $num_elements = scalar(@$arr);\n   \
    \ my $orig_str = \"\";\n    foreach my $val (@$arr) {\n\t$orig_str .= $val;\n\
    \    }\n    for (my $i = 0; $i < $num_elements - 1; $i++) {\n\tif ($flag) {\n\t\
    \    last;\n\t}\n\tmy $str = $orig_str;\n\tfor (my $j = 0; $j < $i; $j++) {\n\t\
    \    $str = substr($str, 1, $num_elements - 1) . substr($str, 0, 1);\n\t}\n\t\
    if ($str eq $sorted_str) {\n\t    $flag = 1;\n\t}\n    }\n    return $flag;\n}",
  "    my $i = $#{$arr};\n    while ($i > 0 && $$arr[$i] < $$arr[$i-1]) {\n      \
    \  $i--;\n    }\n    return $i == 0 ? 'YES' : 'NO';\n}", "    my $len = scalar\
    \ @$arr;\n    return 1 if !$len;\n    my $c = 0;\n    for(my $i = 0; $i < $len;\
    \ $i++) {\n        $c++ if $arr->[$i] != $i + 1;\n    }\n    return $c <= 1;\n\
    }", "    my $len = scalar @$arr;\n    my $is_sorted = 1;\n    for(my $i = 1; $i\
    \ < $len; $i++) {\n        if($arr->[$i] <= $arr->[$i - 1]) {\n            $is_sorted\
    \ = 0;\n            last;\n        }\n    }\n    return 1 if $is_sorted;\n   \
    \ my $right_shifts = 0;\n    my $max_right_shifts = $len - 1;\n    my $min_right_shifts\
    \ = 1;\n    while($min_right_shifts <= $max_right_shifts) {\n        my $mid =\
    \ int(($min_right_shifts + $max_right_shifts) / 2);\n        my $new_arr = [@$arr];\n\
    \        my $tmp;\n        for(my $i = 0; $i < $mid; $i++) {\n            $tmp\
    \ = pop @$new_arr;\n            unshift @$new_arr, $tmp;\n        }\n        $is_sorted\
    \ = 1;\n        for(my $i = 1; $i < $len; $i++) {\n            if($new_arr->[$i]\
    \ <= $new_arr->[$i - 1]) {\n                $is_sorted = 0;\n                last;\n\
    \            }\n        }\n        if($is_sorted) {\n            $right_shifts\
    \ = $mid;\n            $max_right_shifts = $mid - 1;\n        } else {\n     \
    \       $min_right_shifts = $mid + 1;\n        }\n    }\n    return $right_shifts;\n\
    }", "    #\n    # Write your code here.\n    #\n}", "    # Write your code here\n\
    \    # To print results to the standard output you can use print\n    # Example:\n\
    \    # print \"Hello world!\\n\";\n    my $cnt = 1;\n    for (my $i = 1; $i <\
    \ @$arr; $i++) {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n            $cnt\
    \ = 0;\n            last;\n        }\n    }\n    print $cnt;\n}", "    return\
    \ 1 if not $arr or @$arr == 0;\n    my @mins = map { $arr->[$_] } (0 .. @$arr\
    \ - 1);\n    for my $i (0 .. @$arr - 2) {\n        $mins[$i + 1] = $mins[$i] <\
    \ $mins[$i + 1] ? $mins[$i] : $mins[$i + 1];\n    }\n    my $max = $arr->[0];\n\
    \    for my $i (1 .. @$arr - 1) {\n        return 0 if $arr->[$i] < $max;\n  \
    \      $max = $arr->[$i] if $arr->[$i] > $max;\n        return 1 if $arr->[$i]\
    \ > $mins[$i - 1];\n    }\n    return 0;\n}\nuse Test::More;", "    if ($#$arr\
    \ < 0) {\n        return 1;\n    }\n    my($sorted) = [sort {$a <=> $b} @$arr];\n\
    \    my($i);\n    my($counter) = 0;\n    for ($i = 0; $i <= $#$arr; $i++) {\n\
    \        if ($arr->[$i] != $sorted->[$i]) {\n            $counter++;\n       \
    \ }\n    }\n    if ($counter == 1) {\n        return 1;\n    }\n    return 0;\n\
    }", "    my $length = @$arr;\n    if ($length == 0) {\n        return 1;\n   \
    \ }\n    my $ret = 1;\n    my $max = $arr->[0];\n    for my $i (1..$length - 1)\
    \ {\n        if ($arr->[$i] >= $max) {\n            $max = $arr->[$i];\n     \
    \   }\n        else {\n            $ret = 0;\n            last;\n        }\n \
    \   }\n    return $ret;\n}", "    my $N = @$arr;\n    my $i = 0;\n    my $sorted\
    \ = 1;\n    while($i < $N - 1){\n        my $num = $arr->[$i];\n        if($num\
    \ > $arr->[$i + 1]){\n            $sorted = 0;\n            last;\n        }\n\
    \        $i++;\n    }\n    return $sorted;\n}", "    my $len = scalar @$arr;\n\
    \    return 1 if $len == 0;\n    my $count = 0;\n    foreach my $i (0..$len-2)\
    \ {\n        if ($arr->[$i] > $arr->[$i+1]) {\n            $count++;\n       \
    \ }\n    }\n    return 1 if $count == 1;\n    return 0;\n}", "    my $c = 0;\n\
    \    my $x = -1;\n    for my $i (0 .. $#$arr) {\n        if ($x < $arr->[$i])\
    \ {\n            $x = $arr->[$i];\n        }\n        else {\n            $c++;\n\
    \        }\n    }\n    return ($c <= 1);\n}\n1;", "    my $i = 0;\n    my $n =\
    \ scalar(@$arr);\n    my $prev = $arr->[0];\n    if($n == 0){\n        return\
    \ 1;\n    }\n    for $i (1..$n){\n        my $curr = $arr->[$i%$n];\n        if($curr\
    \ > $prev){\n            $prev = $curr;\n        }\n        else{\n          \
    \  return 0;\n        }\n    }\n    return 1;\n}", "    my($max) = $arr->[0];\n\
    \    my($len) = scalar(@$arr);\n    return 1 if ($len == 0);\n    for(my($i) =\
    \ 1; $i < $len; $i++) {\n        $max = $arr->[$i] if ($arr->[$i] > $max);\n \
    \       return 1 if ($arr->[$i] == $max && $i == $len - 1);\n    }\n    return\
    \ \"\";\n}", "    my($shift) = 0;\n    my($index) = 0;\n    while ($index < scalar(@$arr))\
    \ {\n        if ($arr->[$index] == $index + 1) {\n            $index++;\n    \
    \    } else {\n            $shift++;\n            $index = $arr->[$index] - 1;\n\
    \        }\n    }\n    if ($shift > 1) {\n        return 0;\n    } else {\n  \
    \      return 1;\n    }\n}", "    my $first = 0;\n    my $len = @$arr;\n    for(my\
    \ $i = 0; $i < $len; $i++) {\n        if($$arr[$i] != $first) {\n            return\
    \ 0;\n        }\n        $first++;\n    }\n    return 1;\n}", "    my @sorted\
    \ = sort {$a <=> $b} @$arr;\n    my $sorted_string = join(',', @sorted);\n   \
    \ my $shift_count = 0;\n    while(1) {\n        my $last = pop @$arr;\n      \
    \  unshift @$arr, $last;\n        my $arr_string = join(',', @$arr);\n       \
    \ if ($arr_string eq $sorted_string) {\n            return $shift_count;\n   \
    \     }\n        $shift_count++;\n    }\n}", "    my $i = 0;\n    while ($i <\
    \ scalar(@$arr) && $arr->[$i] == $i + 1) {\n        $i++;\n    }\n    if ($i ==\
    \ scalar(@$arr)) {\n        return 1;\n    }\n    my $next_index = $i + 1;\n \
    \   for (my $j = $i + 1; $j < scalar(@$arr); $j++) {\n        if ($arr->[$j] ==\
    \ $i + 1) {\n            $next_index = $j;\n            last;\n        }\n   \
    \ }\n    if ($next_index == scalar(@$arr)) {\n        return 0;\n    }\n    my\
    \ $temp = $arr->[$next_index];\n    $arr->[$next_index] = $arr->[$i];\n    $arr->[$i]\
    \ = $temp;\n    my $sorted = 1;\n    for (my $j = $i + 1; $j < scalar(@$arr);\
    \ $j++) {\n        if ($arr->[$j] < $arr->[$j - 1]) {\n            $sorted = 0;\n\
    \            last;\n        }\n    }\n    return $sorted;\n}", "    my %map;\n\
    \    my $len = scalar @$arr;\n    #print \"[$len]\\n\";\n    # check if the list\
    \ is empty\n    if ($len == 0) {\n        return 1;\n    }\n    # if it has one\
    \ element then the array is automatically in order\n    if ($len == 1) {\n   \
    \     return 1;\n    }\n    for (my $i = 0; $i < $len; $i++) {\n        #print\
    \ \"i = $i arr[$i] = $arr->[$i]\\n\";\n        $map{$arr->[$i]}++;\n    }\n  \
    \  #print Dumper(\\%map);\n    my $prev = -1;\n    foreach my $k (sort keys %map)\
    \ {\n        #print \"k = $k, prev = $prev\\n\";\n        # if the current value\
    \ is less than the previous value then we cannot\n        # sort this array\n\
    \        if ($k < $prev) {\n            return 0;\n        }\n        $prev =\
    \ $k;\n    }\n    return 1;\n}", "    my $min = $arr->[0];\n    my $last = $arr->[0];\n\
    \    my $last_index = 0;\n    my $start_index = 0;\n    for my $i (1..scalar(@$arr)-1)\
    \ {\n        my $x = $arr->[$i];\n        if ($x > $last) {\n            $last\
    \ = $x;\n            $last_index = $i;\n        }\n        if ($x < $min) {\n\
    \            $min = $x;\n            $start_index = $i;\n        }\n    }\n  \
    \  my $diff = $last_index - $start_index;\n    return ($diff == scalar(@$arr)-1\
    \ || $diff == 0) ? 1 : '';\n}", "    # return 1, if empty\n    return 1 unless\
    \ @$arr;\n    # init vars\n    my $prev = $arr->[0];\n    my $count = 0;\n   \
    \ my $reverse_counter = 0;\n    # Iterate thru the array\n    for my $num (@$arr)\
    \ {\n        # We found reverse order\n        if ($num < $prev) {\n         \
    \   $reverse_counter++;\n        }\n        # Track count\n        $count++;\n\
    \        # Check if we find more than 2 reverse order\n        return 0 if $reverse_counter\
    \ > 2;\n        # reset prev\n        $prev = $num;\n    }\n    # If we have only\
    \ 1 reverse order, return 1\n    if ($reverse_counter == 1) {\n        return\
    \ 1;\n    }\n    # If we have 2 reverse order, check if we are in a loop\n   \
    \ if ($reverse_counter == 2) {\n        # return 0 if not a loop\n        return\
    \ 0 unless $count == 2;\n        # If we reach here, we have a loop\n        return\
    \ 1;\n    }\n    # Otherwise return 0\n    return 0;\n}", "    my @sorted = sort\
    \ {$a <=> $b} @$arr;\n    my $i = 0;\n    my $j = $#$arr;\n    while ($i < $j)\
    \ {\n        my $x = shift @sorted;\n        my $y = pop @sorted;\n        return\
    \ 0 if $x != $arr->[$i++] or $y != $arr->[$j--];\n    }\n    return 1;\n}", " \
    \   my $size = @$arr;\n    return 1 if $size == 0;\n    my $pos_diff = 0;\n  \
    \  my $neg_diff = 0;\n    for(my $i = 0; $i < $size - 1; $i++) {\n        my $diff\
    \ = $arr->[$i + 1] - $arr->[$i];\n        if($diff > 0) {\n            $pos_diff++;\n\
    \        } else {\n            $neg_diff++;\n        }\n    }\n    if($pos_diff\
    \ == 0 or $neg_diff == 0) {\n        return 1;\n    } else {\n        return 0;\n\
    \    }\n}", "    my $flag = 1;\n    for(my $i = 0; $i <= $#{$arr}; $i++) {\n \
    \       if(($i+1) <= $#{$arr}) {\n            if($arr->[$i] > $arr->[$i+1]) {\n\
    \                $flag = 0;\n                last;\n            }\n        }\n\
    \    }\n    return $flag;\n}\n1;", "    my $max = 0;\n    my $min = 1000000000;\n\
    \    foreach my $i (@$arr) {\n        $max = $i if ($i > $max);\n        $min\
    \ = $i if ($i < $min);\n    }\n    return 1 if ($min <= 0);\n    if ($min + $max\
    \ > 0) {\n        return 1;\n    }\n    return 0;\n}", "    my $n = @$arr;\n \
    \   my $max = $arr->[0];\n    for my $i (1..$n-1) {\n        $max = $arr->[$i]\
    \ if $arr->[$i] > $max;\n        return 0 if $arr->[$i] < $max;\n    }\n    return\
    \ 1;\n}", "    my($sz) = scalar(@$arr);\n    if($sz == 0) {\n        return 1;\n\
    \    }\n    my($pos) = 0;\n    for my $i (1..$sz-1) {\n        if($arr->[$i] <\
    \ $arr->[$i-1]) {\n            $pos = $i;\n            last;\n        }\n    }\n\
    \    for my $i ($pos+1..$sz-1) {\n        if($arr->[$i] < $arr->[$i-1]) {\n  \
    \          return \"\";\n        }\n    }\n    return 1;\n}", "    if(!@$arr)\
    \ {\n        return 1;\n    }\n    my $i = 1;\n    for($i = 1; $i < @$arr; $i++)\
    \ {\n        if($arr->[$i] < $arr->[$i - 1]) {\n            return 0;\n      \
    \  }\n    }\n    return 1;\n}", "    # Write your code here\n    my @sort_arr\
    \ = sort {$a <=> $b} @$arr;\n    my $sorted = 0;\n    while(1) {\n        last\
    \ if $sorted == @$arr;\n        if ($arr->[$sorted] == $sort_arr[$sorted]) {\n\
    \            $sorted++;\n        } else {\n            last;\n        }\n    }\n\
    \    my $start = $sorted;\n    my $i = $start + 1;\n    while($i < @$arr) {\n\
    \        my $j = $i;\n        while($j > $start) {\n            if ($arr->[$j]\
    \ < $arr->[$j - 1]) {\n                ($arr->[$j], $arr->[$j - 1]) = ($arr->[$j\
    \ - 1], $arr->[$j]);\n            }\n            $j--;\n        }\n        $i++;\n\
    \    }\n    if ($arr->[0] == $sort_arr[0]) {\n        return 1;\n    } else {\n\
    \        return 0;\n    }\n}", "    my $length = scalar @$arr;\n    my $i;\n \
    \   for($i = 0; $i < $length; $i++) {\n        my $min = $i;\n        for(my $j\
    \ = $i; $j < $length; $j++) {\n            if ($arr->[$j] < $arr->[$min]) {\n\
    \                $min = $j;\n            }\n        }\n        if ($min == $i)\
    \ {\n            if ($i != $length - 1) {\n                return 0;\n       \
    \     }\n        }\n        elsif ($min != $length - 1) {\n            return\
    \ 0;\n        }\n    }\n    return 1;\n}", "    return 1 if !@$arr;\n    my $len\
    \ = scalar @$arr;\n    my $i;\n    # Find the highest ordered ball.\n    for($i\
    \ = 0; $i < $len - 1; $i++) {\n        last if $arr->[$i] > $arr->[$i + 1];\n\
    \    }\n    # If it's in the top position, we're good to go.\n    return 1 if\
    \ $i == 0;\n    # If it's in the second position, we can move it to the top\n\
    \    # and be done.\n    return 1 if $i == 1;\n    # Otherwise, it's not possible\
    \ to move it to the top.\n    return '';\n}", "    my $N = scalar(@$arr);\n  \
    \  my $ret = 1;\n    my $smallest = $arr->[0];\n    my $smallest_idx = 0;\n  \
    \  for(my $i = 1; $i < $N; $i++) {\n        if($arr->[$i] < $smallest) {\n   \
    \         $smallest = $arr->[$i];\n            $smallest_idx = $i;\n        }\n\
    \    }\n    #print \"smallest:$smallest\\n\";\n    if($smallest_idx > 0) {\n \
    \       my $curr = $arr->[0];\n        my $curr_idx = 0;\n        for(my $i =\
    \ 0; $i < $N; $i++) {\n            $arr->[$curr_idx] = $arr->[$i];\n         \
    \   $curr_idx = $i;\n        }\n        $arr->[$curr_idx] = $curr;\n    }\n  \
    \  for(my $i = 1; $i < $N; $i++) {\n        if($arr->[$i] < $arr->[$i - 1]) {\n\
    \            $ret = 0;\n            last;\n        }\n    }\n    return $ret;\n\
    }", "    my @arr = @$arr;\n    my @copy_arr = @arr;\n    my $len = scalar @arr;\n\
    \    if($len == 0){\n        return 1;\n    }\n    for(my $i = 0; $i < $len; $i++){\n\
    \        my $temp = shift @copy_arr;\n        push @copy_arr, $temp;\n       \
    \ if(is_sorted(\\@copy_arr)){\n            return 1;\n        }\n    }\n    return\
    \ \"\";\n}", "    my @sorted = sort {$a <=> $b} @$arr;\n    my $count = 0;\n \
    \   for(my $i = 0; $i < scalar @$arr; $i++) {\n        if($arr->[$i] == $sorted[$i])\
    \ {\n            $count++;\n        }\n    }\n    if($count == scalar @$arr) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    if (!@$arr)\
    \ {\n        return 1;\n    }\n    my @sorted = sort {$a <=> $b} @$arr;\n    my\
    \ $i = 0;\n    my $j = @$arr - 1;\n    while ($i < $j) {\n        return 0 if\
    \ ($sorted[$i] != $arr->[$i]);\n        $i++;\n        return 0 if ($sorted[$j]\
    \ != $arr->[$j]);\n        $j--;\n    }\n    return 1;\n}", "    my $count = 0;\n\
    \    my $n = scalar @$arr;\n    my @new_arr = $arr;\n    @new_arr = sort {$a <=>\
    \ $b} @new_arr;\n    for(my $i = 0; $i < $n; $i++) {\n        if ($arr->[$i] ==\
    \ $new_arr[$i]) {\n            $count++;\n        }\n    }\n    if ($count ==\
    \ $n) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}", " \
    \   my $n = scalar(@$arr);\n    my $count = 1;\n    # print \"@$arr\\n\";\n  \
    \  for(my $i = 1; $i < $n; $i++) {\n        if($arr->[$i] < $arr->[$i - 1]) {\n\
    \            $count--;\n            if($count < 0) {\n                return \"\
    \";\n            }\n        }\n        elsif($arr->[$i] == $arr->[$i - 1]) {\n\
    \            $count++;\n        }\n    }\n    return $count > 0 ? 1 : \"\";\n}",
  '    return 1 if !@$arr;', "    my $shift = 0;\n    my $i = 0;\n    my $direction\
    \ = 'up';\n    while ($i < scalar(@$arr) - 1) {\n        if ($direction eq 'up')\
    \ {\n            if ($arr->[$i] < $arr->[$i + 1]) {\n                $i++;\n \
    \           }\n            else {\n                $direction = 'down';\n    \
    \            $shift = $i + 1;\n            }\n        }\n        else {\n    \
    \        if ($arr->[$i] > $arr->[$i + 1]) {\n                $i++;\n         \
    \   }\n            else {\n                return 0;\n            }\n        }\n\
    \    }\n    return $shift;\n}\nmy $arr = [1, 2, 3, 4, 5];\nsay move_one_ball($arr);\n\
    $arr = [3, 4, 5, 1, 2];\nsay move_one_ball($arr);\n$arr = [3, 5, 4, 1, 2];\nsay\
    \ move_one_ball($arr);\n$arr = [3, 5, 4, 2, 1];\nsay move_one_ball($arr);\n$arr\
    \ = [1, 2, 4, 3, 5];\nsay move_one_ball($arr);\n$arr = [3, 2, 1, 4, 5];\nsay move_one_ball($arr);\n\
    $arr = [2, 3, 4, 5, 1];\nsay move_one_ball($arr);\n$arr = [1, 2, 3, 4, 5];\nsay\
    \ move_one_ball($arr);\n$arr = [5, 4, 3, 2, 1];\nsay move_one_ball($arr);\n$arr\
    \ = [2, 3, 4, 5, 1];\nsay move_one_ball($arr);\n$arr = [1, 2, 3, 4, 5];\nsay move_one_ball($arr);\n\
    $arr = [5, 4, 3, 2, 1];\nsay move_one_ball($arr);\n$arr = [2, 3, 4, 5, 1];\nsay\
    \ move_one_ball($arr);\n$arr = [1, 2, 3, 4, 5];\nsay move", "    my @copy = sort\
    \ {$a <=> $b} @$arr;\n    my @arr = @$arr;\n    my $i = 0;\n    my $flag = 0;\n\
    \    my $matched = 0;\n    my $ct = 0;\n    my $n = scalar @arr;\n    if ($n ==\
    \ 0) {\n        return 1;\n    }\n    for (my $i = 0; $i < $n; $i++) {\n     \
    \   $ct++ if ($arr[$i] == $copy[$i]);\n    }\n    while ($ct < $n) {\n       \
    \ $flag = 0;\n        $ct = 0;\n        for (my $i = 0; $i < $n; $i++) {\n   \
    \         if ($arr[$i] == $copy[$i]) {\n                $ct++;\n            }\n\
    \            else {\n                $flag = 1;\n                my $tmp = $arr[$i];\n\
    \                if ($i == 0) {\n                    $arr[$i] = $arr[$n - 1];\n\
    \                }\n                else {\n                    $arr[$i] = $arr[$i\
    \ - 1];\n                }\n                $arr[$i - 1] = $tmp;\n           \
    \ }\n        }\n        if ($flag == 0) {\n            return 0;\n        }\n\
    \    }\n    return 1;\n}", "    if (not defined $arr) {\n        carp 'Undefined\
    \ argument';\n        return;\n    }\n    if (not scalar @$arr) {\n        return\
    \ 1;\n    }\n    my $min = $arr->[0];\n    for my $idx (1 .. $#$arr) {\n     \
    \   if ($arr->[$idx] < $min) {\n            return 0;\n        }\n        $min\
    \ = $arr->[$idx];\n    }\n    return 1;\n}", "    # If the array is empty, we\
    \ can't move it at all.\n    return 1 if not @$arr;\n    # If the array is sorted,\
    \ we don't need to move it.\n    return 1 if is_sorted($arr);\n    # If the array\
    \ isn't sorted, and the last element is already in the first\n    # position,\
    \ we can't move it.\n    return 0 if $arr->[0] == $arr->[-1];\n    # We're going\
    \ to treat this array as a clock and move the hour hand.\n    # Find the first\
    \ number that's not in the correct position.\n    my $first_off_position = first\
    \ { $arr->[$_] != $_ + 1 } 0 .. @$arr - 1;\n    # The first number greater than\
    \ it is the number that's supposed to be\n    # there.\n    my $first_greater\
    \ = first { $arr->[$_] > $arr->[$first_off_position] }\n                     \
    \  $first_off_position + 1 .. @$arr - 1;\n    # Now, move the first off-position\
    \ element to the right of that one.\n    ($arr->[$first_off_position], $arr->[$first_greater])\
    \ =\n        ($arr->[$first_greater], $arr->[$first_off_position]);\n    # And\
    \ finally, shift everything to the right.\n    my $last = pop @$arr;\n    unshift\
    \ @$arr, $last;\n    # And return the result of sorting it.\n    return is_sorted($arr);\n\
    }", "    return 1 if scalar @$arr == 0;\n    my $i = 0;\n    while($i < scalar\
    \ @$arr-1) {\n        if($arr->[$i] > $arr->[$i+1]) {\n            my $tmp = $arr->[$i];\n\
    \            splice(@$arr, $i, 1);\n            unshift(@$arr, $tmp);\n      \
    \      $i = 0;\n        }\n        else {\n            $i++;\n        }\n    }\n\
    \    return 1;\n}", "    my $n = @$arr;\n    my $i = $n - 1;\n    while ($i -\
    \ 1 >= 0) {\n        if ($arr->[$i - 1] > $arr->[$i]) {\n            $i--;\n \
    \       } else {\n            last;\n        }\n    }\n    return $i == 0 ? 1\
    \ : 0;\n}", "    my $len = scalar @$arr;\n    my @sort = sort {$a <=> $b} @$arr;\n\
    \    my $i = 0;\n    while ($i < $len) {\n        if ($sort[$i] != $arr->[$i])\
    \ {\n            my $j = $i + 1;\n            while ($j < $len) {\n          \
    \      if ($sort[$i] == $arr->[$j]) {\n                    last;\n           \
    \     }\n                $j++;\n            }\n            return 0 if ($j ==\
    \ $len);\n            my $k = $j;\n            while ($k > $i) {\n           \
    \     $arr->[$k] = $arr->[$k - 1];\n                $k--;\n            }\n   \
    \         $arr->[$i] = $sort[$i];\n        }\n        $i++;\n    }\n    return\
    \ 1;\n}", "    \n    # TODO\n}", "    my $non_increasing = 0;\n    my $i;\n  \
    \  for($i = 1; $i < scalar(@$arr); $i++) {\n        if($arr->[$i-1] > $arr->[$i])\
    \ {\n            $non_increasing = 1;\n            last;\n        }\n    }\n \
    \   if($non_increasing == 0) {\n        return 1;\n    }\n    my $j;\n    for($j\
    \ = $i; $j < scalar(@$arr); $j++) {\n        if($arr->[$j-1] < $arr->[$j]) {\n\
    \            return 0;\n        }\n    }\n    return 1;\n}", "    return 1 if\
    \ @$arr == 0;\n    my %flag;\n    for (0..@$arr-1) {\n        my $index = $arr->[$_];\n\
    \        if (!exists $flag{$index}){\n            $flag{$index} = $_;\n      \
    \  }\n        else {\n            $flag{$index} = -1;\n        }\n    }\n    foreach\
    \ my $k (keys %flag) {\n        if ($flag{$k} == -1){\n            return 0;\n\
    \        }\n    }\n    return 1;\n}", "    my $size = scalar @$arr;\n    if($size\
    \ == 0) {\n        return 1;\n    }\n    my $min = $$arr[0];\n    my $max = $$arr[0];\n\
    \    for(my $i = 1; $i < $size; $i++) {\n        $min = $$arr[$i] if $$arr[$i]\
    \ < $min;\n        $max = $$arr[$i] if $$arr[$i] > $max;\n    }\n    if(($max\
    \ - $min) <= ($size - 1)) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   my $size = scalar @$arr;\n    if($size < 1) {\n        return 1;\n    }\n\
    \    my $min = $arr->[0];\n    for(my $i = 1; $i < $size; $i++) {\n        if($arr->[$i]\
    \ < $min) {\n            return 0;\n        }\n        $min = $arr->[$i];\n  \
    \  }\n    return 1;\n}", "    # Write your code here\n    my $correct = 1;\n \
    \   my $cur = $arr->[0];\n    foreach(my $i = 1; $i < scalar @$arr; $i++) {\n\
    \        if($arr->[$i] >= $cur) {\n            $cur = $arr->[$i];\n        } else\
    \ {\n            $correct = 0;\n            last;\n        }\n    }\n    return\
    \ $correct;\n}", "    my $l = scalar @$arr;\n    if ($l == 0) {\n        return\
    \ 1;\n    }\n    if ($l == 1) {\n        return 1;\n    }\n    my @rarr = reverse\
    \ @$arr;\n    my $count = 0;\n    foreach my $x (@rarr) {\n        #print \":$x:\"\
    ;\n        if ($x > $count) {\n            $count++;\n        }\n    }\n    if\
    \ ($count == 1) {\n        return 1;\n    }\n    return -1;\n}", "    my @arr_copy\
    \ = @$arr;\n    my $count = 0;\n    while (!is_sorted(\\@arr_copy)) {\n      \
    \  @arr_copy = rotate_right(\\@arr_copy);\n        $count++;\n    }\n    if ($count\
    \ < scalar(@$arr)) {\n        return 1;\n    }\n    return 0;\n}", "    # No number\
    \ to shift\n    return 1 if(scalar(@$arr) == 0);\n    my $max = $arr->[0];\n \
    \   my $shift = 0;\n    my $zero = -1;\n    my $last = -1;\n    for my $i (0..$#$arr)\
    \ {\n        my $v = $arr->[$i];\n        # Find the number at 0th index\n   \
    \     if ($zero == -1 && $v == 1) {\n            $zero = $i;\n        }\n    \
    \    # Find the last number\n        if ($i > 0 && $arr->[$i-1] > $v) {\n    \
    \        $last = $i;\n        }\n        if ($v > $max) {\n            $max =\
    \ $v;\n        }\n    }\n    # If the last number is the 0th index, then it is\
    \ impossible\n    if ($last == $zero) {\n        return \"\";\n    }\n    # The\
    \ last number is the last digit, then we only need to do one shift\n    if ($last\
    \ == $#$arr) {\n        return 1;\n    }\n    # The last number is not the last\
    \ digit. It cannot go to the 0th index.\n    # But the gap is not large enough.\n\
    \    if ($max - $last > $last - $zero) {\n        return \"\";\n    }\n    # If\
    \ the 0th index number is larger than the last number, it is impossible\n    if\
    \ ($arr->[$zero] > $arr->[$last]) {\n        return \"\";\n    }\n    return 1;\n\
    }", "    my $max = 0;\n    my $max_position = 0;\n    my $min = 100000;\n    my\
    \ $min_position = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n       \
    \ my $curr = $arr->[$i];\n        if($curr > $max) {\n            $max = $curr;\n\
    \            $max_position = $i;\n        }\n        if($curr < $min) {\n    \
    \        $min = $curr;\n            $min_position = $i;\n        }\n    }\n  \
    \  if($max_position > $min_position) {\n        return 1;\n    }\n    return 0;\n\
    }", "    # Implement your solution here\n    my $count=0;\n    my $size=scalar\
    \ @$arr;\n    for(my $i=0;$i<$size;$i++){\n        for(my $j=$i+1;$j<$size;$j++){\n\
    \            if($arr->[$i]>$arr->[$j]){\n                $count++;\n         \
    \   }\n        }\n    }\n    if($count>=2){\n        return '';\n    }\n    else{\n\
    \        return 1;\n    }\n}\n1;", "    my $count = 0;\n    my $size = scalar\
    \ @$arr;\n    #my $arr_ref = $arr;\n    my $ref = $arr;\n    #print \"Size=$size\\\
    n\";\n    my $start = 0;\n    my $end = $size - 1;\n    my $i;\n    while ($end\
    \ > 0 && $arr->[$end] < $arr->[$end - 1]) {\n        $end--;\n    }\n    #print\
    \ \"end=$end\\n\";\n    if ($end == 0) {\n        return 1;\n    }\n    for (my\
    \ $i = 0; $i < $end; $i++) {\n        if ($arr->[$i] > $arr->[$i + 1]) {\n   \
    \         $arr->[$i] = -1;\n            $count++;\n        }\n    }\n    #print\
    \ \"Count=$count\\n\";\n    my $idx = 0;\n    for (my $i = 0; $i < $size; $i++)\
    \ {\n        if ($arr->[$i] != -1) {\n            $ref->[$idx] = $arr->[$i];\n\
    \            $idx++;\n        }\n    }\n    my $size1 = scalar @$ref;\n    #print\
    \ \"Size1=$size1\\n\";\n    my $idx2 = $size1 - 1;\n    for (my $i = $size - 1;\
    \ $i >= 0; $i--) {\n        if ($arr->[$i] != -1) {\n            $ref->[$idx2]\
    \ = $arr->[$i];\n            $idx2--;\n        }\n    }\n    my $sorted = is_sorted($ref);\n\
    \    if ($sorted == 1) {\n        return 1;\n    }\n    return -1;\n}", "    return\
    \ 1 if scalar @$arr == 0;\n    my $right_shift_count = 0;\n    my $max = $arr->[0];\n\
    \    foreach my $i (1..$#$arr) {\n        if ($arr->[$i] < $max) {\n         \
    \   $right_shift_count++;\n        } else {\n            $max = $arr->[$i];\n\
    \        }\n    }\n    return $right_shift_count;\n}", "    my $n = scalar(@$arr);\n\
    \    my @min_arr = $arr->[0];\n    for (my $i = 1; $i < $n; $i++) {\n        if\
    \ ($arr->[$i] < $min_arr[$i - 1]) {\n            return 0;\n        }\n      \
    \  $min_arr[$i] = min($arr->[$i], $min_arr[$i - 1]);\n    }\n    return 1;\n}",
  "    my $arr_size = scalar @$arr;\n    return 1 if $arr_size == 0;\n    my $min\
    \ = $arr->[0];\n    for (my $i = 1; $i < $arr_size; $i++) {\n        return 0\
    \ if $arr->[$i] < $min;\n        $min = $arr->[$i] if $arr->[$i] < $min;\n   \
    \ }\n    return 1;\n}", "    my $len = scalar @$arr;\n    my @temp_arr = sort\
    \ {$a <=> $b} @$arr;\n    my $temp_arr_len = scalar @temp_arr;\n    my $count\
    \ = 0;\n    my @index_arr;\n    for (my $i = 0; $i < $len; $i++) {\n        if\
    \ ($temp_arr[$i] != $arr->[$i]) {\n            push(@index_arr, $i);\n       \
    \     $count++;\n        }\n    }\n    if ($count == 2) {\n        my $diff =\
    \ abs($index_arr[0] - $index_arr[1]);\n        if ($diff == 1) {\n           \
    \ return 1;\n        }\n    }\n    return 0;\n}", "    my($length) = scalar(@$arr);\n\
    \    my($i, $min) = (0, -1);\n    my($valid) = 1;\n    if($length == 0) {\n  \
    \      return 1;\n    }\n    while($i < $length - 1) {\n        if($min == -1\
    \ || $arr->[$i] < $arr->[$min]) {\n            $min = $i;\n        }\n       \
    \ if($arr->[$i] > $arr->[$i + 1]) {\n            $valid = 0;\n        }\n    \
    \    $i++;\n    }\n    if($valid == 1) {\n        return 1;\n    }\n    if($min\
    \ == 0) {\n        return 0;\n    }\n    if($arr->[$min - 1] <= $arr->[$length\
    \ - 1]) {\n        return 1;\n    }\n    return 0;\n}", "    my($i, $len);\n \
    \   $len = scalar(@$arr);\n    for ($i = 0; $i < $len; $i++) {\n        my($left,\
    \ $right);\n        $left = $i - 1;\n        $right = $i + 1;\n        if ($left\
    \ < 0) {\n            $left = $len - 1;\n        }\n        if ($right >= $len)\
    \ {\n            $right = 0;\n        }\n        if ($arr->[$left] > $arr->[$i]\
    \ || $arr->[$right] > $arr->[$i]) {\n            return 0;\n        }\n    }\n\
    \    return 1;\n}", "    my $start = 0;\n    my $tmp = 0;\n    my $move = 0;\n\
    \    my $size = scalar @$arr;\n    my $last = $size - 1;\n    while ($start <\
    \ $last) {\n        if ($arr->[$start] > $arr->[$start + 1]) {\n            $move\
    \ = $start + 1;\n            $tmp = $arr->[$move];\n            $arr->[$move]\
    \ = $arr->[$move - 1];\n            $arr->[$move - 1] = $tmp;\n            $start\
    \ = 0;\n        } else {\n            $start++;\n        }\n    }\n    return\
    \ 1;\n}", "    my $n = scalar(@$arr);\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    #   0                   n-1\n    # |-----|-----|-----|-----|\n   \
    \ #   ^     ^     ^     ^     ^\n    #   0     1     2     3     4\n    #   1\
    \     2     3     4     5\n    #   A     B     C     D     E\n    #  \n    # Position\
    \ 0 can only have value \"A\" which is greater than or equal to\n    # position\
    \ 1.\n    # Position 1 can only have value \"B\" which is greater than or equal\
    \ to\n    # position 2.\n    # If a value is less than the previous value, then\
    \ it cannot be \n    # \"moved\" to be greater than the previous value. Therefore,\
    \ the position\n    # will never be in the right order.\n    for (my $i = 1; $i\
    \ < $n; $i++) {\n        if ($arr->[$i] < $arr->[$i-1]) {\n            return\
    \ 0;\n        }\n    }\n    return 1;\n}", "    \n    my $n = scalar(@$arr);\n\
    \    if($n == 0) {\n        return 1;\n    }\n    my $res = 1;\n    my $zero_cnt\
    \ = 0;\n    my $i = 0;\n    while($i < $n) {\n        if($arr->[$i] == 0) {\n\
    \            ++$zero_cnt;\n        }\n        if($i + 1 < $n && $arr->[$i + 1]\
    \ != 0 && $arr->[$i] > $arr->[$i + 1]) {\n            $res = 0;\n            last;\n\
    \        }\n        ++$i;\n    }\n    if($zero_cnt == $n) {\n        $res = 1;\n\
    \    }\n    return $res;\n}", "    my $num_shifts = 0;\n    my $prev_element =\
    \ undef;\n    my $num_elements = scalar(@$arr);\n    for (my $i = 0; $i < $num_elements;\
    \ $i++) {\n        my $curr_element = $arr->[$i];\n        if (defined($prev_element)\
    \ && $curr_element < $prev_element) {\n            $num_shifts++;\n        }\n\
    \        $prev_element = $curr_element;\n    }\n    if ($num_shifts == 0 || $num_shifts\
    \ == 1) {\n        return 1;\n    }\n    return 0;\n}", "    my %hash;\n    my\
    \ @tracker;\n    my $n = scalar @$arr;\n    return 1 if $n == 0;\n    foreach\
    \ my $x(@$arr) {\n        $hash{$x}++;\n        push @tracker, $x;\n    }\n  \
    \  my $count = 0;\n    foreach my $x(1..$n) {\n        return 0 if exists $hash{$x}\
    \ and $hash{$x} > 1;\n        return 0 if $x != 1 and $hash{$x} == 0;\n      \
    \  $count++ if $hash{$x} == 1;\n    }\n    if($count == $n-1) {\n        my $last\
    \ = pop @tracker;\n        my $first = shift @tracker;\n        return 1 if $last\
    \ == 1 and $first == $n;\n    }\n    return 0;\n}", "    my $len = scalar @$arr;\n\
    \    return 1 if($len == 0);\n    my $max = $arr->[0];\n    my $i = 1;\n    my\
    \ $flag = 0;\n    while($i < $len) {\n        if($arr->[$i] < $max) {\n      \
    \      $flag = 1;\n            last;\n        }\n        $max = $arr->[$i];\n\
    \        $i++;\n    }\n    return 1 if($flag == 0);\n    $flag = 0;\n    $i =\
    \ 0;\n    $max = $arr->[$len - 1];\n    while($i < $len - 1) {\n        if($arr->[$i]\
    \ > $max) {\n            $flag = 1;\n            last;\n        }\n        $max\
    \ = $arr->[$i];\n        $i++;\n    }\n    return 0 if($flag == 1);\n    return\
    \ 1;\n}", "    my $n = scalar(@$arr);\n    my $shifts = 0;\n    my $i = 0;\n \
    \   my $j = 0;\n    my $max = $arr->[0];\n    while ($i < $n) {\n        # find\
    \ the maximum value so far\n        $max = $arr->[$i] if $arr->[$i] > $max;\n\
    \        # move to the next element\n        $i++;\n        # count how many elements\
    \ are to the right of the max so far\n        if ($i < $n and $arr->[$i] < $max)\
    \ {\n            $shifts += ($n - $i);\n        }\n    }\n    return $shifts;\n\
    }", "    my $size = scalar @$arr;\n    my $min_element = $arr->[0];\n    my $min_element_index\
    \ = 0;\n    for (my $i = 1; $i < $size; $i++) {\n        if ($arr->[$i] < $min_element)\
    \ {\n            $min_element = $arr->[$i];\n            $min_element_index =\
    \ $i;\n        }\n    }\n    for (my $i = $min_element_index - 1; $i >= 0; $i--)\
    \ {\n        return 0 if $arr->[$i] > $arr->[$i + 1];\n    }\n    for (my $i =\
    \ $min_element_index + 1; $i < $size; $i++) {\n        return 0 if $arr->[$i]\
    \ < $arr->[$i - 1];\n    }\n    return 1;\n}\n1;", "    my @sorted = sort {$a\
    \ <=> $b} @$arr;\n    my $flag = 0;\n    for(my $i = 0; $i < scalar @$arr; $i++)\
    \ {\n        if($arr->[$i] == $sorted[$i]) {\n            $flag = 1;\n       \
    \ } else {\n            $flag = 0;\n            last;\n        }\n    }\n    if($flag\
    \ == 1) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}\nmy\
    \ @arr = (3, 4, 5, 1, 2);\nmy $res = move_one_ball(\\@arr);\nprint \"After moving\
    \ one ball result is $res\\n\";", "    my $goal = join('', @$arr);\n    my $prev\
    \ = $goal;\n    while (1) {\n        my $new = join('', ($prev =~ /(.).*?(.)$/));\n\
    \        return 1 if $new eq $goal;\n        return '' if $new eq $prev;\n   \
    \     $prev = $new;\n    }\n}", "    my $size = @$arr;\n    my $max_ele = -1;\n\
    \    for (my $i = 0; $i < $size; $i++) {\n        my $cur_ele = $arr->[$i];\n\
    \        if ($cur_ele >= $max_ele) {\n            $max_ele = $cur_ele;\n     \
    \   } else {\n            return \"\";\n        }\n    }\n    return 1;\n}", " \
    \   if (scalar(@$arr) == 0) {\n        return 1;\n    }\n    if (scalar(@$arr)\
    \ == 1) {\n        return 1;\n    }\n    if (scalar(@$arr) == 2) {\n        if\
    \ ($arr->[0] < $arr->[1]) {\n            return 1;\n        }\n        return\
    \ \"\";\n    }\n    # print \"### arr = \" . Dumper($arr);\n    my $i = 0;\n \
    \   my $n = scalar(@$arr);\n    my $m = $n - 1;\n    # my $m = scalar(@$arr) -\
    \ 1;\n    # print \"### n = $n m = $m\\n\";\n    while ($i < $m && $arr->[$i]\
    \ < $arr->[$i + 1]) {\n        $i++;\n    }\n    # print \"### i = $i\\n\";\n\
    \    while ($i < $m && $arr->[$i] == $arr->[$i + 1]) {\n        $i++;\n    }\n\
    \    # print \"### i = $i\\n\";\n    while ($i < $m && $arr->[$i] > $arr->[$i\
    \ + 1]) {\n        $i++;\n    }\n    # print \"### i = $i\\n\";\n    if ($i ==\
    \ $m) {\n        return 1;\n    }\n    return \"\";\n}", "    my $size = scalar\
    \ @$arr;\n    if ($size == 0) {\n        return 1;\n    }\n    my $counter = 0;\n\
    \    for (my $i = 0; $i < $size; $i++) {\n        $counter += $i + 1 if $arr->[$i]\
    \ == $i + 1;\n    }\n    return $counter == 1;\n}", "    my $count = 0;\n    while\
    \ ($count < $#$arr) {\n        return 1 if ($arr->[$count] <= $arr->[$count +\
    \ 1]);\n        $count++;\n    }\n    return -1;\n}", "    return 1 if @$arr ==\
    \ 0;\n    my $count = 0;\n    for my $i (0 .. $#$arr - 1) {\n        if ($arr->[$i]\
    \ >= $arr->[$i + 1]) {\n            $count++;\n        }\n    }\n    return $count\
    \ <= 1;\n}", "    my $correct_arr = [sort {$a <=> $b} @$arr];\n    my $num_shifts\
    \ = 0;\n    while (join(\",\", @$arr) ne join(\",\", @$correct_arr)) {\n     \
    \   push @$arr, shift @$arr;\n        $num_shifts++;\n    }\n    return $num_shifts;\n\
    }", "    my $n = @$arr;\n    my %left;\n    my %right;\n    my %count;\n    foreach\
    \ (@$arr) {\n        $count{$_}++;\n    }\n    my $i = 0;\n    foreach my $key\
    \ (sort {$a <=> $b} keys %count) {\n        if ($left{$key} && $left{$key} ==\
    \ $count{$key}) {\n            next;\n        }\n        $right{$key} = $count{$key};\n\
    \        $i++;\n        my $j = $i;\n        foreach my $key2 (sort {$a <=> $b}\
    \ keys %count) {\n            if ($j > $count{$key2}) {\n                last;\n\
    \            }\n            if ($key != $key2) {\n                $left{$key2}++;\n\
    \            }\n            $j++;\n        }\n    }\n    foreach my $key (sort\
    \ {$a <=> $b} keys %count) {\n        if ($left{$key} && $left{$key} < $count{$key})\
    \ {\n            return 0;\n        }\n    }\n    return 1;\n}", "    my @arr\
    \ = @$arr;\n    my $unsorted_idx = 0;\n    while($unsorted_idx < $#arr && $arr[$unsorted_idx]\
    \ <= $arr[$unsorted_idx+1]) {\n        $unsorted_idx++;\n    }\n    if($unsorted_idx\
    \ == $#arr) {\n        return 1;\n    }\n    my $min_val = $arr[$unsorted_idx+1];\n\
    \    for(my $i = $unsorted_idx+2; $i <= $#arr; $i++) {\n        if($arr[$i] <\
    \ $min_val) {\n            $min_val = $arr[$i];\n        }\n    }\n    while($unsorted_idx\
    \ >= 0 && $arr[$unsorted_idx] > $min_val) {\n        $unsorted_idx--;\n    }\n\
    \    if($unsorted_idx == -1) {\n        return 1;\n    }\n    else {\n       \
    \ return 0;\n    }\n}", "    my $arr_len = scalar @$arr;\n    my @arr_copy = @$arr;\n\
    \    @arr_copy = sort {$a <=> $b} @arr_copy;\n    if( is_permutation($arr, \\\
    @arr_copy) ) {\n        return 1;\n    }\n    return \"\";\n}", "    return 1\
    \ if $#$arr == -1; #empty array\n    my @a = @$arr;\n    @a = sort {$a <=> $b}\
    \ @a;\n    my $flag = 1;\n    my $i = 0;\n    my $j = $#$arr;\n    while( $i <=\
    \ $j){\n        if($a[$i] != $arr->[$i]){\n            $flag = 0;\n          \
    \  last;\n        }\n        $i++;\n    }\n    return $flag;\n}", "    # Write\
    \ your code here\n    my $count = 0;\n    my $size = scalar @$arr;\n    for(my\
    \ $i = 0; $i < $size - 1; $i++) {\n        for(my $j = $i + 1; $j < $size; $j++)\
    \ {\n            if ($arr->[$i] > $arr->[$j]) {\n                $count += $j\
    \ - $i;\n            }\n        }\n    }\n    return $count <= 1 ? 1 : 0;\n}",
  "    return 0 if(@$arr == 0);\n    my @sorted = sort @$arr;\n    my $ball = pop\
    \ @sorted;\n    my $k = @sorted - 1;\n    return 0 if( $ball > $sorted[$k] );\n\
    \    for( my $i = $k; $i >= 0; $i-- ) {\n        if( $sorted[$i] > $ball ) {\n\
    \            $sorted[$i + 1] = $sorted[$i];\n        }\n        else {\n     \
    \       $sorted[$i + 1] = $ball;\n            return 1;\n        }\n    }\n  \
    \  $sorted[0] = $ball;\n    return 1;\n}", "    # Returns the number of balls\
    \ that are moveable in the array, only the\n    # last one can't be moved.", " \
    \   my $size = scalar @$arr;\n    my $cnt = 0;\n    my $max = 0;\n    for(my $i\
    \ = 0; $i < $size; $i++) {\n        if($arr->[$i] < $max) {\n            $cnt++;\n\
    \        }\n        $max = $arr->[$i] if $arr->[$i] > $max;\n    }\n    if($cnt\
    \ == 1) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
  "    my $n = scalar(@$arr);\n    if ($n == 0) {\n        return 1;\n    }", "  \
    \  \n    my @sorted = sort {$a <=> $b} @$arr;\n    my $len = @$arr;\n    my $i\
    \ = 0;\n    my $offset = 0;\n    while ($i < $len) {\n        if ($sorted[$i]\
    \ == $arr->[$i - $offset]) {\n            $i++;\n        } else {\n          \
    \  $offset++;\n        }\n    }\n    return ($offset < $len) ? 1 : 0;\n}", " \
    \   my $len = scalar @$arr;\n    my $count = 0;\n    for (my $i = 1; $i < $len;\
    \ $i++) {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n            $count++;\n\
    \        }\n    }\n    if ($count > 1) {\n        return \"\";\n    }\n    return\
    \ 1;\n}", "    my $result = 1;\n    my $n = scalar @$arr;\n    for (my $i = 0;\
    \ $i < $n; $i++) {\n        if ($i + 1 < $n && $arr->[$i] > $arr->[$i + 1]) {\n\
    \            $result = 0;\n            last;\n        }\n    }\n    return $result;\n\
    }", "    my $arr_len = scalar @$arr;\n    my $shift_count = 0;\n    for (my $i\
    \ = 0; $i < $arr_len; $i++) {\n        if ($i == 0 && $arr->[$i] > $arr->[$i +\
    \ 1]) {\n            return $shift_count if $shift_count != 0;\n            $shift_count++;\n\
    \        }\n        elsif ($i == $arr_len - 1 && $arr->[$i] < $arr->[$i - 1])\
    \ {\n            return $shift_count if $shift_count != 0;\n            $shift_count++;\n\
    \        }\n        elsif ($arr->[$i] > $arr->[$i + 1] && $arr->[$i] < $arr->[$i\
    \ - 1]) {\n            return $shift_count if $shift_count != 0;\n           \
    \ $shift_count++;\n        }\n    }\n    return $shift_count;\n}", "    my $ctr\
    \ = 0;\n    my $res = 1;\n    my $len = scalar @$arr;\n    return 1 if $len ==\
    \ 0;\n    my $idx = 0;\n    while ($idx < $len) {\n        $idx = (2 * $idx) +\
    \ 1;\n        $ctr++;\n    }\n    $idx = 2 ** $ctr;\n    $ctr = $len;\n    while\
    \ ($idx > 1) {\n        $idx = $idx >> 1;\n        $ctr--;\n    }\n    $res =\
    \ 2 ** $ctr;\n    return $res;\n}", "    # TODO: Add your code here.\n}", "  \
    \  my $flag = 0;\n    for(my $i = 0; $i < scalar(@$arr); $i++) {\n        if($i\
    \ == $#$arr) {\n            if($arr->[$i] > $arr->[0]) {\n                return\
    \ 0;\n            }\n        } else {\n            if($arr->[$i] > $arr->[$i+1])\
    \ {\n                return 0;\n            }\n        }\n    }\n    return 1;\n\
    }", "    \n    # First sort the array.\n    my @sorted_arr = sort {$a <=> $b}\
    \ @$arr;\n    \n    # Now make all the elements of arr to 1, if sorted_arr ==\
    \ arr.\n    # Else, make all elements of arr to 0.\n    for (my $i = 0; $i < scalar(@$arr);\
    \ $i++) {\n        if ($sorted_arr[$i] != $arr->[$i]) {\n            $arr->[$i]\
    \ = 0;\n        } else {\n            $arr->[$i] = 1;\n        }\n    }\n    \n\
    \    # Now if arr has 0 then return false. Else return true.\n    if (grep {$_\
    \ == 0} @$arr) {\n        return 0;\n    } else {\n        return 1;\n    }\n}",
  "    my @b = sort {$a <=> $b} @$arr;\n    my @c = sort {$b <=> $a} @$arr;\n    for\
    \ my $i (0..$#$arr) {\n        return 1 if $$arr[$i] != $b[$i] && $$arr[$i] !=\
    \ $c[$i];\n    }\n    return 0;\n}", "    my $len = scalar @$arr;\n    return\
    \ 1 if !$len;\n    my $min = min @$arr;\n    my $min_index = find_index($arr,\
    \ $min);\n    my $max = max @$arr;\n    my $max_index = find_index($arr, $max);\n\
    \    if ($max_index > $min_index) {\n        return 0;\n    }\n    return 1;\n\
    }", "    my $len = scalar @$arr;\n    return 1 if($len == 0);\n    my $curr_max\
    \ = $arr->[0];\n    for my $i (0..$len-1) {\n        return 0 if($arr->[$i] <\
    \ $curr_max);\n        $curr_max = $arr->[$i];\n    }\n    return 1;\n}", "  \
    \  my $n = scalar(@$arr);\n    my $k = 0;\n    my $i = 1;\n    my $temp = $arr->[0];\n\
    \    while($i < $n) {\n        $arr->[$k] = $arr->[$i];\n        if($temp > $arr->[$k])\
    \ {\n            $temp = $arr->[$k];\n        }\n        $k = $i;\n        $i++;\n\
    \    }\n    $arr->[$k] = $temp;\n    return 1;\n}", "    my $i = 0;\n    my $n\
    \ = scalar(@$arr);\n    my $j = $n - 1;\n    while ($i < $j) {\n        if ($arr->[$i]\
    \ > $arr->[$i + 1]) {\n            last;\n        }\n        if ($arr->[$j] <\
    \ $arr->[$j - 1]) {\n            last;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    $i == $j ? 1 : 0;\n}", "    my $original_arr = [@$arr];\n    my $min_idx\
    \ = 0;\n    my $right_shift_count = 0;\n    my $idx = 0;\n    while (1) {\n  \
    \      my $min = $arr->[$min_idx];\n        my $arr_len = scalar @$arr;\n    \
    \    if ($idx == $arr_len - 1) {\n            $idx = 0;\n            next;\n \
    \       }\n        if ($min == $arr->[$idx + 1]) {\n            $idx++;\n    \
    \        next;\n        }\n        if ($min > $arr->[$idx + 1]) {\n          \
    \  $min_idx = $idx + 1;\n            $idx++;\n            next;\n        } else\
    \ {\n            $right_shift_count++;\n            my $temp = shift @$arr;\n\
    \            push @$arr, $temp;\n            if (join(',', @$arr) eq join(',',\
    \ sort {$a <=> $b} @$original_arr)) {\n                return 1;\n           \
    \ }\n            $idx = 0;\n        }\n    }\n    return $right_shift_count;\n\
    }", "    my $len = scalar @$arr;\n    if($len == 0) {\n        return 1;\n   \
    \ }\n    if($len == 1) {\n        return 1;\n    }\n    my $prev = $arr->[0];\n\
    \    my $possible = 1;\n    for(my $i = 1; $i < $len; $i++) {\n        if($arr->[$i]\
    \ < $prev) {\n            $possible = 0;\n            last;\n        }\n     \
    \   $prev = $arr->[$i];\n    }\n    return $possible;\n}", "    #print join(',',@$arr),\
    \ \"\\n\";\n    my $start_idx = 0;\n    my $max = $arr->[0];\n    my $idx = 1;\n\
    \    while($idx < scalar(@$arr)) {\n        if ($arr->[$idx] < $max) {\n     \
    \       return '';\n        }\n        $max = $arr->[$idx] if $arr->[$idx] > $max;\n\
    \        $idx++;\n    }\n    return 1;\n}", "    my($len) = @$arr;\n    my($ball)\
    \ = 0;\n    my($count) = 0;\n    my($pos) = 0;\n    for($i = 0; $i < $len; $i++)\
    \ {\n        if($arr->[$i] > $ball) {\n            $ball = $arr->[$i];\n     \
    \       $pos = $i;\n        }\n    }\n    if($ball == $len) {\n        return\
    \ 1;\n    }\n    for($i = $pos; $i < $len - 1; $i++) {\n        if($arr->[$i]\
    \ > $arr->[$i + 1]) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}", "    my $N = scalar(@$arr);\n    my $stack = [];\n    push(@$stack,\
    \ $arr->[0]);\n    for(my $i = 1; $i < $N; $i++) {\n        while($#$stack >=\
    \ 0 && $arr->[$i] < $stack->[$#$stack]) {\n            pop(@$stack);\n       \
    \ }\n        push(@$stack, $arr->[$i]);\n    }\n    return $#$stack + 1;\n}",
  "    my %count;\n    my $max = 0;\n    my $min = scalar @$arr + 1;\n    for my $num\
    \ (@$arr) {\n        $count{$num}++;\n        $max = $num if $num > $max;\n  \
    \      $min = $num if $num < $min;\n    }\n    return 0 if $count{$max} > 1;\n\
    \    return 1 if $max > $min;\n    return 0;\n}", "    my $n = scalar(@$arr);\n\
    \    return 1 if ($n == 0);\n    my $sorted = 1;\n    for(my $i = 1; $i < $n;\
    \ $i++) {\n        if ($arr->[$i] < $arr->[$i-1]) {\n            $sorted = 0;\n\
    \            last;\n        }\n    }\n    return 1 if ($sorted);\n    my $last\
    \ = $arr->[$n-1];\n    # This is O(n^2) solution.\n    #for(my $i = 0; $i < $n;\
    \ $i++) {\n    #    last if ($last < $arr->[$i]);\n    #    my $moved = 0;\n \
    \   #    for(my $j = $i + 1; $j < $n; $j++) {\n    #        if ($arr->[$j] < $arr->[$j-1])\
    \ {\n    #            my $t = $arr->[$j];\n    #            $arr->[$j] = $arr->[$j-1];\n\
    \    #            $arr->[$j-1] = $t;\n    #            $moved = 1;\n    #    \
    \    }\n    #    }\n    #    return 0 if (!$moved);\n    #}\n    # This is O(n)\
    \ solution.\n    for(my $i = 0; $i < $n; $i++) {\n        last if ($last < $arr->[$i]);\n\
    \        my $moved = 0;\n        for(my $j = $n - 1; $j > $i; $j--) {\n      \
    \      if ($arr->[$j] < $arr->[$j-1]) {\n                my $t = $arr->[$j];\n\
    \                $arr->[$j] = $arr->[$j-1];\n                $arr->[$j-1] = $t;\n\
    \                $moved = 1;\n            }\n        }\n        return 0 if (!$moved);\n\
    \    }\n    return 1;\n}", "    my($l_index, $r_index) = (0, 1);\n    my($min_idx,\
    \ $min_value) = (0, $arr->[0]);\n    my $len = scalar(@$arr);\n    my $flag =\
    \ 1;\n    while ($r_index <= $len) {\n        if ($arr->[$r_index] < $min_value)\
    \ {\n            if ($r_index - $l_index > 1) {\n                $flag = 0;\n\
    \                last;\n            }\n            else {\n                $min_idx\
    \ = $r_index;\n                $min_value = $arr->[$r_index];\n            }\n\
    \        }\n        $r_index++;\n    }\n    return $flag;\n}", "    my $len =\
    \ scalar @$arr;\n    my $count = 0;\n    foreach my $i (0..$len - 1) {\n     \
    \   foreach my $j ($i+1..$len - 1) {\n            if ($arr->[$i] > $arr->[$j])\
    \ {\n                $count = $count + 1;\n            }\n        }\n    }\n \
    \   if ($count >= $len) {\n        return -1;\n    }\n    else {\n        return\
    \ 1;\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
