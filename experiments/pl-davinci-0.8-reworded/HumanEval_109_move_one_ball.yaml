name: HumanEval_109_move_one_ball
language: pl
prompt: "# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
  # numbers in the array will be randomly ordered. Your task is to determine if\n\
  # it is possible to get an array sorted in non-decreasing order by performing \n\
  # the following operation on the given array:\n# You are allowed to perform right\
  \ shift operation any number of times.\n# One right shift operation means shifting\
  \ all elements of the array by one\n# position in the right direction. The last\
  \ element of the array will be moved to\n# the starting position in the array i.e.\
  \ 0th index. \n# If it is possible to obtain the sorted array by performing the\
  \ above operation\n# then return 1 else return ''.\n# If the given array is empty\
  \ then return 1.\n# Note: The given array is guaranteed to have unique elements.\n\
  # For Example:\n# >>> move_one_ball([3, 4, 5, 1, 2])\n# 1\n# Explanation: By performin\
  \ 2 right shift operations, non-decreasing order can\n# be achieved for the given\
  \ array.\n# >>> move_one_ball([3, 5, 4, 1, 2])\n# \"\"\n# Explanation:It is not\
  \ possible to get non-decreasing order for the given\n# array by performing any\
  \ number of right shift operations.\nsub move_one_ball {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_one_ball;\n\
  \        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 10,\
  \ 1, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([4, 3, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min = $arr->[0];\n    my $N = scalar(@$arr);\n    for(my $i\
    \ = 1; $i < $N; $i++) {\n        if($arr->[$i] >= $min) {\n            $min =\
    \ $arr->[$i];\n        } else {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    \n    my @arr = @$arr;\n    my $n = scalar @arr;\n  \
    \  my $flag = 0;\n    my $steps = 0;\n    my $goal = join(',', sort {$a <=> $b}\
    \ @arr);\n    my $curr = join(',', @arr);\n    my %visited;\n    while(1) {\n\
    \        last if $curr eq $goal;\n        if($visited{$curr}) {\n            $flag\
    \ = 1;\n            last;\n        }\n        $visited{$curr} = 1;\n        my\
    \ @temp = @arr;\n        push @temp, shift @temp;\n        $curr = join(',', @temp);\n\
    \        $steps++;\n    }\n    return $flag ? '' : $steps;\n}", "    my $len =\
    \ scalar @$arr;\n    if($len == 0) {\n        return 1;\n    }\n    my $x = $arr->[0];\n\
    \    my $y = $arr->[$len - 1];\n    #If x is not equal to y, then shifting will\
    \ not help\n    if($x != $y) {\n        return \"\";\n    }\n    my $left = 1;\n\
    \    my $right = $len - 2;\n    #Partition such that all elements in [0, left)\
    \ will be less than x and all\n    #elements in [right, len - 2] will be greater\
    \ than x. left will be equal to\n    #right if all elements are equal to x.\n\
    \    while($left <= $right) {\n        while($left <= $right && $arr->[$left]\
    \ == $x) {\n            $left++;\n        }\n        while($left <= $right &&\
    \ $arr->[$right] != $x) {\n            $right--;\n        }\n        if($left\
    \ <= $right) {\n            #Puts all element equal to x to left.\n          \
    \  ($arr->[$left], $arr->[$right]) = ($arr->[$right], $arr->[$left]);\n      \
    \      $left++;\n            $right--;\n        }\n    }\n    my $max = $left;\n\
    \    my $min = 0;\n    #Find the minimum element in the first partition.\n   \
    \ while($min < $max && $arr->[$min] == $x) {\n        $min++;\n    }\n    #Find\
    \ the maximum element in the second partition.\n    my $mid = $len - 1;\n    while($mid\
    \ > $right && $arr->[$mid] == $x) {\n        $mid--;\n    }\n    #If the minimum\
    \ element in the first partition is greater than the maximum\n    #element in\
    \ the second partition then the given array cannot be sorted with\n    #right\
    \ shifts.\n    if($min >= $max || $arr->[$min] > $arr->[$mid]) {\n        return\
    \ \"\";\n    }\n    return 1;\n}", "    # Check for empty array\n    return 1\
    \ if !@$arr;\n    my @array = @$arr;\n    my $min_index = 0;\n    # To find the\
    \ minimum of the array\n    for(my $i = 1; $i < @array; $i++) {\n        if($array[$i]\
    \ < $array[$min_index]) {\n            $min_index = $i;\n        }\n    }\n  \
    \  my $max_index = $min_index;\n    # To find the maximum of the array after the\
    \ minimum of the array\n    for(my $i = $min_index; $i < @array; $i++) {\n   \
    \     if($array[$i] > $array[$max_index]) {\n            $max_index = $i;\n  \
    \      }\n    }\n    # If the index of the maximum element is not equal to the\
    \ size of the\n    # array minus 1, then the array can be sorted in non-decreasing\
    \ order.\n    return 1 if $max_index != @array - 1;\n    my $length = $min_index;\n\
    \    # Check for the elements between the minimum and maximum of the array\n \
    \   for(my $i = $min_index; $i < $max_index; $i++) {\n        if($array[$i] >\
    \ $array[$length]) {\n            $length = $i;\n        }\n    }\n    # If the\
    \ index of the maximum element in the array is equal to the length\n    # of the\
    \ array after the minimum, then the array can be sorted in\n    # non-decreasing\
    \ order.\n    return 1 if $max_index == $length;\n    return \"\";\n}", "    my($l,\
    \ $r, $min, $i);\n    $min = $arr->[0];\n    $l = $r = 0;\n    for ($i = 1; $i\
    \ < @$arr; $i++) {\n        $min = $arr->[$i] if $arr->[$i] < $min;\n        if\
    \ ($arr->[$i] >= $arr->[$i - 1]) {\n            $l = $i;\n        } else {\n \
    \           $r = $i;\n        }\n    }\n    if ($l == $r) {\n        return $arr->[0]\
    \ > $min ? \"\" : 1;\n    }\n    if ($r > 0 && $r == $#$arr) {\n        return\
    \ 1;\n    }\n    if ($l > 0 && $l == $#$arr) {\n        return $arr->[0] >= $arr->[$r]\
    \ ? 1 : \"\";\n    }\n    if ($l == 0) {\n        return $arr->[$r + 1] >= $arr->[$r]\
    \ ? 1 : \"\";\n    }\n    return \"\";\n}", "    my $cnt = 0;\n    for (my $i\
    \ = 1; $i < @$arr; $i++) {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n     \
    \       $cnt++;\n        }\n    }\n    return ($cnt <= 1) ? 1 : \"\";\n}", " \
    \   my $N = scalar(@$arr);\n    my $balls = {};\n    my $group = {};\n    foreach\
    \ my $i (0..$N-1) {\n        if (exists $balls->{$arr->[$i]}) {\n            #\
    \ already seen this ball\n            next;\n        }\n        my $g1 = get_group($group,\
    \ $i);\n        my $k = $arr->[$i];\n        for (my $j = $i + 1; $j < $N; $j++)\
    \ {\n            if ($arr->[$j] > $k) {\n                my $g2 = get_group($group,\
    \ $j);\n                $group->{$g1} = $g2;\n                last;\n        \
    \    }\n        }\n        $balls->{$k} = 1;\n    }\n    my $res = 1;\n    foreach\
    \ my $k (keys %$group) {\n        if ($k != $group->{$k}) {\n            $res\
    \ = '';\n            last;\n        }\n    }\n    return $res;\n}", '    my $i
    = 0;', "    my @sorted_arr = sort {$a <=> $b} @$arr;\n    my $sorted_arr_str =\
    \ join ',', @sorted_arr;\n    my @stored_strings;\n    my @indices_to_shift;\n\
    \    my $flag = 1;\n    my $check_flag = 0;\n    my $final_string = \"\";\n  \
    \  # Handle special case of empty array\n    if(scalar @$arr == 0) {\n       \
    \ return 1;\n    }\n    # Handle special case of one element in array\n    if(scalar\
    \ @$arr == 1) {\n        return 1;\n    }\n    # Handle special case of already\
    \ sorted array\n    if(join(',', @$arr) eq $sorted_arr_str) {\n        return\
    \ 1;\n    }\n    # Loop over elements of array\n    for my $i (0..$#$arr) {\n\
    \        # Initialize variables to store current string\n        my $curr_string\
    \ = \"\";\n        my $shift_index = $i;\n        # Loop till we obtain sorted\
    \ array\n        while($flag == 1) {\n            # Loop over all elements of\
    \ array\n            for my $j (0..$#$arr) {\n                # If index is same\
    \ as shift index, add last element to string\n                if($j == $shift_index)\
    \ {\n                    $curr_string .= $arr->[$#$arr];\n                }\n\
    \                # Otherwise, add element at current index to string\n       \
    \         else {\n                    $curr_string .= $arr->[$j];\n          \
    \      }\n                # If not last element, add comma after element\n   \
    \             if($j != $#$arr) {\n                    $curr_string .= \",\";\n\
    \                }\n            }\n            # Check if string is not present\
    \ in array of stored strings\n            if(!grep {$_ eq $curr_string} @stored_strings)\
    \ {\n                # If not, push current string to array of stored strings\n\
    \                push @stored_strings, $curr_string;\n                # Increment\
    \ shift index by 1\n                $shift_index++;\n                # If shift\
    \ index becomes equal to last index of array,\n               ", "    my %map;\n\
    \    for my $i (@$arr) {\n        $map{$i}++;\n    }\n    for my $i (1..(@$arr))\
    \ {\n        if (!exists $map{$i}) {\n            return \"\";\n        }\n  \
    \  }\n    return 1;\n}", "    \n    return 1 if @$arr == 0;\n    my $min = $arr->[0];\n\
    \    for my $i (1..$#$arr) {\n        if ($arr->[$i] < $min) {\n            return\
    \ \"\";\n        }\n        $min = $arr->[$i] if $arr->[$i] < $min;\n    }\n \
    \   return 1;\n}", '    return 1 if !@$arr; # empty array', "    my $N = scalar(@$arr);\n\
    \    if($N==0) {\n        return 1;\n    }\n    my $min = $arr->[0];\n    my $max\
    \ = $arr->[0];\n    my $max_index = 0;\n    for(my $i=1; $i<$N; $i++) {\n    \
    \    if($arr->[$i] > $max) {\n            $max = $arr->[$i];\n            $max_index\
    \ = $i;\n        }\n        if($arr->[$i] < $min) {\n            $min = $arr->[$i];\n\
    \        }\n    }\n    if($max == $min) {\n        return 1;\n    }\n    if($max_index\
    \ != $N-1) {\n        return \"\";\n    }\n    return 1;\n}", "    if(scalar(@$arr)\
    \ == 0) {\n        return 1;\n    }\n    my $ball_pos = -1;\n    my $max_pos =\
    \ -1;\n    my $max_value = -1;\n    my $n = scalar(@$arr);\n    for(my $i = 0;\
    \ $i < $n; $i++) {\n        if($arr->[$i] == $n) {\n            $ball_pos = $i;\n\
    \        }\n        if($arr->[$i] > $max_value) {\n            $max_value = $arr->[$i];\n\
    \            $max_pos = $i;\n        }\n    }\n    if($ball_pos == $max_pos) {\n\
    \        return 1;\n    } else {\n        return '';\n    }\n}", "    return 1\
    \ if @$arr == 0;\n    my $len = scalar @$arr;\n    my $min = 0;\n    for my $i\
    \ (0..$len-1) {\n        if ( $arr->[$i] < $arr->[$min] ) {\n            $min\
    \ = $i;\n        }\n    }\n    for my $i (1..$len-1) {\n        my $j = $i - 1;\n\
    \        if ( $arr->[$i] < $arr->[$j] ) {\n            return '';\n        }\n\
    \    }\n    if ( $arr->[0] != $arr->[$min] ) {\n        return '';\n    }\n  \
    \  return 1;\n}", "    my $count = 0;\n    # this will contain the index of the\
    \ 'ball' to be moved\n    my $ball = -1;\n    #this will contain the index of\
    \ the position where the ball will be moved\n    my $ball_dest = -1;\n    my $min\
    \ = -1;\n    for (my $i = 0; $i < scalar(@$arr); $i++) {\n        # the value\
    \ at index $i is smallest till now\n        if ($min == -1 || $arr->[$i] < $arr->[$min])\
    \ {\n            $min = $i;\n        }\n        # the value at index $i is not\
    \ equal to $min\n        # and $min occurs again after the index $i.\n       \
    \ if ($arr->[$i] != $arr->[$min] && $min >= $i) {\n            $ball = $i;\n \
    \           $ball_dest = $min;\n        }\n    }\n    # we have ball and ball_dest,\
    \ we need to see if the ball can be moved to\n    # ball_dest or not.\n    if\
    \ ($ball != -1 && $ball_dest != -1) {\n        # need to check if all the elements\
    \ after the ball occur again before\n        # the ball_dest\n        # all the\
    \ elements after ball should occur between ball and ball_dest\n        # or after\
    \ ball_dest.\n        my $check = $ball;\n        for (my $i = $ball+1; $i < scalar(@$arr);\
    \ $i++) {\n            if ($check == $ball && $check > $ball_dest) {\n       \
    \         $check = $ball_dest;\n            }\n            if ($arr->[$i] == $arr->[$check])\
    \ {\n                $check++;\n            }\n            else {\n          \
    \      return \"\";\n            }\n        }\n        # we have passed the check,\
    \ we have a valid ball and ball_dest\n        $count = $ball - $ball_dest;\n \
    \   }\n    return $count;\n}", "    my $size = scalar @$arr;\n    my %valid_array\
    \ = (\n        '1' => 1,\n        '2' => 1,\n        '3' => 1,\n        '4' =>\
    \ 1,\n        '5' => 1,\n        '6' => 1,\n        '7' => 1,\n        '8' =>\
    \ 1,\n        '9' => 1,\n        '10' => 1,\n        '11' => 1,\n        '12'\
    \ => 1,\n        '13' => 1,\n        '14' => 1,\n        '15' => 1,\n        '16'\
    \ => 1,\n        '17' => 1,\n        '18' => 1,\n        '19' => 1,\n        '20'\
    \ => 1,\n        '21' => 1,\n        '22' => 1,\n        '23' => 1,\n        '24'\
    \ => 1,\n        '25' => 1,\n        '26' => 1,\n        '27' => 1,\n        '28'\
    \ => 1,\n        '29' => 1,\n        '30' => 1,\n        '31' => 1,\n        '32'\
    \ => 1,\n        '33' => 1,\n        '34' => 1,\n        '35' => 1,\n        '36'\
    \ => 1,\n        '37' => 1,\n        '38' => 1,\n        '39' => 1,\n        '40'\
    \ => 1,\n        '41' => 1,\n        '42' => 1,\n        '43' => 1,\n        '44'\
    \ => 1,\n        '45' => 1,\n        '46' => 1,\n        '47' => 1,\n        '48'\
    \ => 1,\n        '49' => 1,\n        '50' => 1,\n        '51' => 1,\n        '52'\
    \ => 1,\n        '53' => 1,\n        '54' => 1,\n        '55' => 1,\n        '56'\
    \ => 1,\n        '57' => 1,\n        '58' => 1,\n        '59' => 1,\n        '60'\
    \ => 1,\n        '61' => 1,\n        '", "    my $n = scalar(@$arr);\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    my $max_element = $arr->[0];\n    my\
    \ $max_index = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        if ($arr->[$i]\
    \ > $max_element) {\n            $max_element = $arr->[$i];\n            $max_index\
    \ = $i;\n        }\n    }\n    if ($max_index == $n - 1) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my %frequencies;\n    for my $i (0 .. $#$arr)\
    \ {\n        my $next_index = ($i + 1) % scalar @$arr;\n        if ($arr->[$i]\
    \ < $arr->[$next_index]) {\n            $frequencies{$i}++;\n        }\n    }\n\
    \    for my $i (0 .. $#$arr) {\n        $frequencies{$i} = 0 unless exists $frequencies{$i};\n\
    \    }\n    my @sorted_keys = sort { $frequencies{$a} <=> $frequencies{$b} } keys\
    \ %frequencies;\n    if (scalar @sorted_keys == 0) {\n        return 1;\n    }\n\
    \    if (scalar @sorted_keys == 1) {\n        my $key = $sorted_keys[0];\n   \
    \     if ($frequencies{$key} == 0) {\n            return 1;\n        }\n     \
    \   else {\n            return \"\";\n        }\n    }\n    if (scalar @sorted_keys\
    \ == 2) {\n        my $key1 = $sorted_keys[0];\n        my $key2 = $sorted_keys[1];\n\
    \        if ($frequencies{$key1} == 0 and $frequencies{$key2} == 1) {\n      \
    \      return 1;\n        }\n        else {\n            return \"\";\n      \
    \  }\n    }\n    return \"\";\n}", "    my $count = 0;\n    foreach(@$arr){\n\
    \        my $k = scalar @$arr;\n        if($_ > $arr->[($_+1)%$k]){\n        \
    \    $count++;\n        }\n    }\n    if($count > 1){\n        return \"\";\n\
    \    }else{\n        return 1;\n    }\n}", "    return if !defined $arr;\n   \
    \ if(@$arr == 0) {\n        return 1;\n    }\n    my $size = @$arr;\n    my $left_range\
    \ = $arr->[0];\n    my $right_range = $arr->[0];\n    for(my $i = 1; $i < $size;\
    \ $i++) {\n        if($arr->[$i] < $left_range) {\n            return \"\";\n\
    \        }\n        elsif($arr->[$i] > $right_range) {\n            $right_range\
    \ = $arr->[$i];\n        }\n        elsif($arr->[$i] < $right_range) {\n     \
    \       $left_range = $arr->[$i];\n        }\n    }\n    return 1;\n}", "    #\
    \ First we copy the input array.\n    my(@arr) = @$arr;\n    # Then we sort it.\n\
    \    @arr = sort {$a <=> $b} @arr;\n    # Then we compare the sorted array with\
    \ the input array.\n    my $i = 0;\n    while ($i < @arr) {\n        if ($arr[$i]\
    \ != $arr[$i+1]) {\n            return '';\n        }\n        $i++;\n    }\n\
    \    return 1;\n}", "    return 1 if (scalar(@$arr) == 0);\n    for (my $i = 0;\
    \ $i < scalar(@$arr) - 1; $i++) {\n        my $j = $i + 1;\n        if ($arr->[$i]\
    \ > $arr->[$j]) {\n            return 1 if (scalar(@$arr) == 2);\n           \
    \ my $temp = $arr->[$j];\n            splice(@$arr, $j, 1);\n            unshift(@$arr,\
    \ $temp);\n            return 1 if (move_one_ball($arr));\n            return\
    \ \"\"\n        }\n    }\n    return 1;\n}", "    my @sorted_arr = sort {$a <=>\
    \ $b} @$arr;\n    my $sorted_arr_str = join(',', @sorted_arr);\n    my $sorted_arr_str_rev\
    \ = join(',', reverse @sorted_arr);\n    my $arr_str = join(',', @$arr);\n   \
    \ if ($arr_str eq $sorted_arr_str or $arr_str eq $sorted_arr_str_rev) {\n    \
    \    return 1;\n    } else {\n        return '';\n    }\n}", "    my @sorted_arr\
    \ = sort @$arr;\n    my $sorted_arr_str = join('', @sorted_arr);\n    for my $i\
    \ (0 .. $#$arr) {\n        my $arr_str = join('', @$arr);\n        return 1 if\
    \ $arr_str eq $sorted_arr_str;\n        push @$arr, shift @$arr;\n    }\n    return\
    \ '';\n}", "    my $min = $arr->[0];\n    my $min_pos = 0;\n    for my $i (1..$#$arr)\
    \ {\n        if ($arr->[$i] < $min) {\n            $min = $arr->[$i];\n      \
    \      $min_pos = $i;\n        }\n    }\n    my $res = 0;\n    my $pos = 0;\n\
    \    my $min_cnt = 0;\n    for my $i (0..$#$arr) {\n        $pos = ($i + $min_pos)\
    \ % ($#$arr + 1);\n        if ($arr->[$pos] == $min) {\n            $min_cnt++;\n\
    \        }\n        elsif ($arr->[$pos] > $min) {\n            $res++;\n     \
    \   }\n    }\n    if ($min_cnt == 1 && $res == $#$arr) {\n        return 1;\n\
    \    }\n    return '';\n}", "    my $len = scalar @$arr;\n    my $i = $len - 1;\n\
    \    my $count = 0;\n    my $j = $len - 1;\n    my $k = 0;\n    my $flag = 0;\n\
    \    my $count_1 = 0;\n    while($i > 0) {\n        if($arr->[$i] < $arr->[$i\
    \ - 1]) {\n            $count = $count + 1;\n            if($count > 1) {\n  \
    \              $flag = 1;\n                last;\n            }\n            $j\
    \ = $i - 1;\n            while($j > 0) {\n                if($arr->[$j] > $arr->[$j\
    \ - 1]) {\n                    $count_1 = $count_1 + 1;\n                    if($count_1\
    \ > 1) {\n                        $flag = 1;\n                        last;\n\
    \                    }\n                    $k = $j - 1;\n                   \
    \ while($k > 0) {\n                        if($arr->[$k] > $arr->[$k - 1]) {\n\
    \                            $flag = 1;\n                            last;\n \
    \                       }\n                        $k = $k - 1;\n            \
    \        }\n                    last;\n                }\n                $j =\
    \ $j - 1;\n            }\n        }\n        $i = $i - 1;\n    }\n    if($flag\
    \ == 1) {\n        return \"\";\n    }\n    else {\n        return 1;\n    }\n\
    }", "    return $arr if not @$arr;\n    my $ok = 1;\n    for my $i (0 .. $#$arr\
    \ - 1) {\n        $ok &&= $arr->[$i] < $arr->[$i + 1];\n    }\n    if ($ok) {\n\
    \        return 1;\n    }\n    else {\n        for my $i (1 .. $#$arr) {\n   \
    \         if ($arr->[$i] < $arr->[$i - 1]) {\n                my $tmp = $arr->[$i];\n\
    \                $arr->[$i] = $arr->[$i - 1];\n                $arr->[$i - 1]\
    \ = $tmp;\n                return move_one_ball($arr);\n            }\n      \
    \  }\n    }\n}", "    my $n = @$arr;\n    return 1 if $n == 0;\n    my $result\
    \ = 1;\n    my $max = $arr->[0];\n    my $swap = 0;\n    for my $i (1..$n-1) {\n\
    \        if ($arr->[$i] < $max) {\n            $swap = 1;\n        }\n       \
    \ if ($arr->[$i] < $arr->[$i-1]) {\n            $result = 0;\n        }\n    \
    \    $max = $arr->[$i] if $arr->[$i] > $max;\n    }\n    return $result == 1 &&\
    \ $swap == 1 ? 1 : '';\n}", "    my $len = scalar @$arr;\n    return 1 if $len\
    \ < 2;\n    my $min = $arr->[0];\n    my $max = $arr->[0];\n    my $max_index\
    \ = 0;\n    for my $i (1..$len-1) {\n        if ($arr->[$i] < $min) {\n      \
    \      $min = $arr->[$i];\n        }\n        if ($arr->[$i] > $max) {\n     \
    \       $max = $arr->[$i];\n            $max_index = $i;\n        }\n    }\n \
    \   return '' if $max_index == $len-1;\n    return '' if $min < $arr->[$max_index+1];\n\
    \    return 1;\n}", "    # Write your code here\n    my $n = scalar @$arr;\n \
    \   return 1 if $n < 2;\n    my $i = 0;\n    while ($i < $n-1 and $arr->[$i] <=\
    \ $arr->[$i+1]) {\n        $i++;\n    }\n    my $j = $i + 1;\n    while ($j <\
    \ $n-1 and $arr->[$j] <= $arr->[$j+1]) {\n        $j++;\n    }\n    if ($j ==\
    \ $n-1) {\n        return $arr->[$j] >= $arr->[0] ? 1 : '';\n    }\n    return\
    \ '';\n}", "    my @sorted = sort {$a <=> $b} @$arr;\n    my $b = shift @sorted;\n\
    \    while(@sorted) {\n        my $a = shift @sorted;\n        return '' if $a\
    \ < $b;\n        $b = $a;\n    }\n    return 1;\n}", "    my $n = scalar(@$arr);\n\
    \    return 1 if $n == 0;\n    my $max = $arr->[0];\n    my $cnt = 0;\n    for\
    \ (my $i = 1; $i < $n; $i++) {\n        if ($arr->[$i] < $max) {\n           \
    \ $cnt++;\n        } else {\n            $max = $arr->[$i];\n        }\n    }\n\
    \    return $cnt == 1 ? 1 : '';\n}", "    my $size = scalar @$arr;\n    if ($size\
    \ == 0) {\n        return 1;\n    }\n    my $flag = 1;\n    for (my $i = 0; $i\
    \ < $size; $i++) {\n        my $j = ($i+1) % $size;\n        if ($arr->[$i] >\
    \ $arr->[$j]) {\n            $flag = 0;\n            last;\n        }\n    }\n\
    \    return $flag;\n}", "    my $sorted = join('', sort {$a <=> $b} @$arr);\n\
    \    my $i = 0;\n    while ($sorted ne join('', @$arr)) {\n        push @$arr,\
    \ shift @$arr;\n        $i++;\n    }\n    return $i;\n}", "    my $count = 0;\n\
    \    my $res = 1;\n    my $flag = 0;\n    my $sorted = 0;\n    my $i = 0;\n  \
    \  my $size = @$arr;\n    while ($i < $size-1) {\n        if ($arr->[$i] > $arr->[$i+1])\
    \ {\n            if ($count == 0) {\n                $count = 1;\n           \
    \     $flag = 1;\n            } else {\n                $res = \"\";\n       \
    \         last;\n            }\n        } elsif ($arr->[$i] == $arr->[$i+1]) {\n\
    \            $flag = 1;\n        }\n        $i++;\n    }\n    if ($flag == 0)\
    \ {\n        $res = 1;\n    }\n    return $res;\n}", "    # Write your code here\n\
    }", "    my @arr = @$arr;\n    if(!@arr){\n        return 1;\n    }\n    #return\
    \ 0 if all elements are same;\n    my $i = 0;\n    my $same = 0;\n    while($i\
    \ < $#arr and $arr[$i] == $arr[$i+1]){\n        $i++;\n        $same = 1;\n  \
    \  }\n    return \"\" if $same and $i == $#arr;\n    my $first_element = $arr[0];\n\
    \    my $last_element = $arr[$#arr];\n    my $min_element = $arr[0];\n    for\
    \ my $j (1..$#arr){\n        $min_element = $arr[$j] if $arr[$j] < $min_element;\n\
    \    }\n    my $max_element = $arr[0];\n    for my $j (1..$#arr){\n        $max_element\
    \ = $arr[$j] if $arr[$j] > $max_element;\n    }\n    return \"\" if ($max_element\
    \ - $min_element) > $#arr;\n    return \"\" if $min_element < $first_element;\n\
    \    return \"\" if $last_element > $max_element;\n    return 1;\n}", "    return\
    \ 1 if @$arr == 0;\n    my @indices = sort { $arr->[$a] <=> $arr->[$b] } 0..$#$arr;\n\
    \    return 1 if $indices[0] == 0;\n    for my $i (0..$#indices) {\n        return\
    \ '' if $indices[$i] != $i;\n    }\n    return 1;\n}", "    # Write your code\
    \ here\n    # To print results to the standard output you can use print\n    #\
    \ Example:\n    # print \"Hello world!\\n\";\n    my $sorted_copy = [sort {$a\
    \ <=> $b} @$arr];\n    for my $i (0..@$arr - 1) {\n        if ($arr->[$i] != $sorted_copy->[$i])\
    \ {\n            return \"\" if $i < @$arr - 1 and $arr->[$i] != $sorted_copy->[$i\
    \ + 1];\n            return 1;\n        }\n    }\n    return 1;\n}", "    my $n\
    \ = scalar(@$arr);\n    my $min = $arr->[0];\n    my $i = 1;\n    while ($i <\
    \ $n) {\n        if ($arr->[$i] > $min) {\n            $min = $arr->[$i];\n  \
    \          $i++;\n        } else {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my $count = 0;\n    my $index = 0;\n    my $first = $arr->[0];\n\
    \    while($count < @$arr) {\n        $index = ($index + 1) % @$arr;\n       \
    \ if($first > $arr->[$index]) {\n            return '';\n        }\n        $first\
    \ = $arr->[$index];\n        $count++;\n    }\n    return 1;\n}", "    my @arr\
    \ = @$arr;\n    my $reversed = 0;\n    my $reversed_idx = 0;\n    for(my $i =\
    \ 1; $i < @arr; $i++) {\n        if($arr[$i] < $arr[$i - 1]) {\n            $reversed\
    \ = 1;\n            $reversed_idx = $i;\n            last;\n        }\n    }\n\
    \    return 1 if !$reversed;\n    if($reversed_idx == 1) {\n        $reversed\
    \ = 0;\n        for(my $i = 2; $i < @arr; $i++) {\n            if($arr[$i] < $arr[$i\
    \ - 1]) {\n                $reversed = 1;\n                last;\n           \
    \ }\n        }\n        return 1 if !$reversed;\n    }\n    return '';\n}", " \
    \   return 1 if(scalar(@$arr) == 0);\n    my $left = 0;\n    my $right = scalar(@$arr)\
    \ - 1;\n    my $index = $right;\n    while($right >= $left){\n        if($arr->[$left]\
    \ <= $arr->[$right]){\n            $left++;\n        } else {\n            $index\
    \ = $right;\n            $right--;\n        }\n    }\n    return \"\";\n}", " \
    \   # TODO: Write your code here...\n    if(@$arr==0){\n        return 1;\n  \
    \  }\n    my $max=0;\n    for(my $i=0;$i<@$arr;$i++){\n        if($arr->[$i]>$max){\n\
    \            $max=$arr->[$i];\n        }\n    }\n    my $index=-1;\n    for(my\
    \ $i=0;$i<@$arr;$i++){\n        if($arr->[$i]==$max){\n            $index=$i;\n\
    \            last;\n        }\n    }\n    # my $max=max(@$arr);\n    # my $index=index($arr,$max);\n\
    \    my $right_shift=$index+1;\n    my $left_shift=@$arr-$right_shift;\n    my\
    \ $sorted_arr=[];\n    for(my $i=0;$i<@$arr;$i++){\n        if($i<@$arr-$right_shift){\n\
    \            $sorted_arr->[$i]=$arr->[$i+$right_shift];\n        }\n        else{\n\
    \            $sorted_arr->[$i]=$arr->[$i-$left_shift];\n        }\n    }\n   \
    \ for(my $i=0;$i<@$arr-1;$i++){\n        if($sorted_arr->[$i]>$sorted_arr->[$i+1]){\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    return 1\
    \ if scalar @$arr == 0;\n    my @sorted = sort {$a <=> $b} @$arr;\n    my @idx;\n\
    \    for (my $i = 0; $i < scalar @$arr; $i++) {\n        push @idx, $i;\n    }\n\
    \    my $shift = 0;\n    while (@$arr != @sorted) {\n        my @temp;\n     \
    \   for (my $i = 0; $i < scalar @$arr; $i++) {\n            if ($sorted[$i] !=\
    \ $arr->[$i]) {\n                push @temp, $i;\n            }\n        }\n \
    \       my $flag = 1;\n        for (my $i = 0; $i < scalar @temp; $i++) {\n  \
    \          if (abs($idx[$i] - $temp[$i]) != 1) {\n                $flag = 0;\n\
    \                last;\n            }\n        }\n        if ($flag == 1) {\n\
    \            $shift++;\n            @$arr = shift @$arr;\n            push @$arr,\
    \ $arr->[0];\n            unshift @idx, pop @idx;\n        }\n        else {\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    my $len =\
    \ scalar @$arr;\n    my $l = $len - 1;\n    my $is_cyclic = 0;\n    my $next =\
    \ 0;\n    my $count = 0;\n    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n\
    \    my @visited = ();\n    my @cycle_idx = ();\n    my $k = 0;\n    my $start\
    \ = 0;\n    my $ans = \"\";\n    for ( $i = 0; $i < $len; $i++ ) {\n        $visited[$i]\
    \ = 0;\n    }\n    for ( $i = 0; $i < $len; $i++ ) {\n        $next = ($i + $arr->[$i]\
    \ + 1) % $len;\n        if ( $visited[$i] == 0 ) {\n            $visited[$i] =\
    \ 1;\n            $j = $i;\n            $cycle_idx[$k] = $i;\n            $k++;\n\
    \            while ( $visited[$next] == 0 ) {\n                $visited[$next]\
    \ = 1;\n                $j = $next;\n                $cycle_idx[$k] = $next;\n\
    \                $k++;\n                $next = ($next + $arr->[$next] + 1) %\
    \ $len;\n            }\n            if ( $next == $i ) {\n                if (\
    \ $k != $len ) {\n                    $start = $cycle_idx[$k - 1];\n         \
    \           for ( $j = 0; $j < $k; $j++ ) {\n                        if ( $arr->[$start]\
    \ > $arr->[$cycle_idx[$j]] ) {\n                            $flag = 1;\n     \
    \                       last;\n                        }\n                   \
    \ }\n                    if ( $flag == 0 ) {\n                        $is_cyclic\
    \ = 1;\n                        last;\n                    }\n               \
    \ }\n            }\n            $k = 0;\n        }\n    }\n    if ( $is_cyclic\
    \ == 1 ) {\n        $ans = 1;\n    }\n    return $ans;\n}", "    my $idx = 0;\n\
    \    my $num = $arr->[0];\n    while($idx < scalar(@$arr)) {\n        if($arr->[$idx]\
    \ < $num) {\n            return \"\";\n        }\n        $num = $arr->[$idx];\n\
    \        $idx++;\n    }\n    return 1;\n}", "    my @a = @$arr;\n    my @order\
    \ = sort {$a <=> $b} @a;\n    return 1 if !@a;", "    # Write your code here\n\
    }", "    my $len = @$arr;\n    my $i;\n    my $min = $arr->[0];\n    my $flag\
    \ = 1;\n    my $j = 0;\n    my $k = $len-1;\n    while($flag) {\n      $min =\
    \ $arr->[$j];\n      $i = $j;\n      while($j < $k) {\n        if($arr->[$j] >\
    \ $arr->[$j+1]) {\n          $arr->[$j] = $arr->[$j+1];\n          $arr->[$j+1]\
    \ = $min;\n          $min = $arr->[$j];\n          $j++;\n        } else {\n \
    \         $j++;\n        }\n      }\n      $flag = 0;\n      $k = $i;\n      $j\
    \ = 0;\n    }\n    for($i = 0; $i < $len-1; $i++) {\n      if($arr->[$i] > $arr->[$i+1])\
    \ {\n        return \"\";\n      }\n    }\n    return 1;\n}", "    # Assume the\
    \ input array is sorted in non-decreasing order.\n    my $is_sorted = 1;\n   \
    \ # Go through the array, starting from the second element, looking for any\n\
    \    # element greater than its previous element.\n    for my $i (1 .. $#$arr)\
    \ {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n            # If such an element\
    \ is found, then break out of the loop and set\n            # $is_sorted to 0.\n\
    \            $is_sorted = 0;\n            last;\n        }\n    }\n    # If the\
    \ input array is already sorted in non-decreasing order, then we\n    # return\
    \ 1.\n    return 1 if $is_sorted;\n    # Otherwise, we find the smallest element\
    \ of the array and the index of the\n    # first occurrence of the smallest element\
    \ in the array.\n    my $min = $arr->[0];\n    my $idx = 0;\n    for my $i (1\
    \ .. $#$arr) {\n        if ($arr->[$i] < $min) {\n            $min = $arr->[$i];\n\
    \            $idx = $i;\n        }\n    }\n    # If the smallest element is at\
    \ the starting position of the array, then we\n    # return ''.\n    return ''\
    \ if $idx == 0;\n    # Otherwise, we go through the array, starting from the second\
    \ element,\n    # looking for any element smaller than its previous element.\n\
    \    for my $i (1 .. $#$arr) {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n \
    \           # If such an element is found, then we return ''.\n            return\
    \ '';\n        }\n    }\n    # If no such element is found, then we return 1.\n\
    \    return 1;\n}", "    my $j = 0;\n    my $i = 1;\n    while($i < scalar(@$arr))\
    \ {\n        $j = $i;\n        while($j > 0 && $arr->[$j-1] > $arr->[$j]) {\n\
    \            ($arr->[$j-1], $arr->[$j]) = ($arr->[$j], $arr->[$j-1]);\n      \
    \      $j--;\n        }\n        $i++;\n    }\n    my $flag = 1;\n    for(my $i\
    \ = 0; $i < scalar(@$arr) - 1; $i++) {\n        if($arr->[$i] > $arr->[$i+1])\
    \ {\n            $flag = 0;\n            last;\n        }\n    }\n    return $flag;\n\
    }", "    my $length = scalar @$arr;\n    return 1 if $length == 0;\n    my $answer\
    \ = 1;\n    my $position_of_one = 0;\n    foreach (my $i = 0; $i < $length; $i++)\
    \ {\n        if ($arr->[$i] == 1) {\n            $position_of_one = $i;\n    \
    \        last;\n        }\n    }\n    for (my $i = 0; $i < $length; $i++) {\n\
    \        if ($i == $position_of_one) {\n            next;\n        }\n       \
    \ my $a = ($i+$position_of_one)%$length;\n        if ($a+1 == $length) {\n   \
    \         $a = 0;\n        }\n        elsif ($a == 0) {\n            $a = $length-1;\n\
    \        }\n        else {\n            $a = $a+1;\n        }\n        if ($arr->[$a]\
    \ < $arr->[$i]) {\n            $answer = \"\";\n            last;\n        }\n\
    \    }\n    return $answer;\n}", "    my($nb_elements) = scalar(@$arr);\n    my($elements_already_found)\
    \ = [];\n    my($i);\n    my($curr_elem);\n    my($new_elem);\n    my($ordered_list)\
    \ = 1;\n    my($curr_elem_idx);\n    my($repeated_elem) = 0;\n    # return if\
    \ the array is empty\n    if (0 == $nb_elements) {\n        return 1;\n    }\n\
    \    for ($i = 0; $i < $nb_elements; $i++) {\n        $curr_elem = $arr->[$i];\n\
    \        # check if the current element is already in the already found array.\n\
    \        if (grep {$_ == $curr_elem} @$elements_already_found) {\n           \
    \ $repeated_elem = 1;\n            next;\n        }\n        push @$elements_already_found,\
    \ $curr_elem;\n        # check if there exists a smaller element than the current\
    \ element.\n        $curr_elem_idx = $i;\n        while (1) {\n            $new_elem\
    \ = $arr->[$curr_elem_idx + 1];\n            if ((defined $new_elem) && ($new_elem\
    \ < $curr_elem)) {\n                $ordered_list = 0;\n                last;\n\
    \            }\n            if (++$curr_elem_idx == $nb_elements) {\n        \
    \        last;\n            }\n        }\n        if (0 == $ordered_list) {\n\
    \            last;\n        }\n    }\n    if (1 == $ordered_list) {\n        return\
    \ 1;\n    }\n    # check if the elements are in an ordered way except for the\
    \ repeated ones.\n    if (1 == $repeated_elem) {\n        my($i);\n        my($curr_elem);\n\
    \        my($elements_already_found) = [];\n        my($j);\n        my($ordered_list)\
    \ = 1;\n        my($prev_elem);\n        for ($i", "    my $max = -1;\n    foreach\
    \ my $i (0..$#$arr-1) {\n        $max = max($max, $arr->[$i]);\n        return\
    \ '' if $max > $arr->[$i+1];\n    }\n    return 1;\n}", "    if(scalar(@$arr)\
    \ < 2) {\n        return 1;\n    }\n    for(my $i = 0; $i < scalar(@$arr); $i++)\
    \ {\n        if($arr->[$i] < $arr->[$i+1]) {\n            splice(@$arr, $i, 1);\n\
    \            splice(@$arr, 0, 0, $arr->[-1]);\n            pop(@$arr);\n     \
    \       return 1;\n        }\n    }\n    return '';\n}", "    my $n = scalar(@$arr);\n\
    \    my %elem_to_idx;\n    for my $idx (0..$n-1) {\n        $elem_to_idx{$$arr[$idx]}\
    \ = $idx;\n    }\n    my $idx = $elem_to_idx{1};\n    for my $elem (2..$n) {\n\
    \        if ($elem_to_idx{$elem} <= $idx) {\n            return '';\n        }\n\
    \        $idx = $elem_to_idx{$elem};\n    }\n    return 1;\n}", "    # Your code\
    \ here\n    return 0;\n}", "    my %count;\n    for my $elm (@$arr) {\n      \
    \  # Sanity check: all elements must be unique.\n        if (defined $count{$elm})\
    \ {\n            return \"\";\n        }\n        $count{$elm} = 1;\n    }\n \
    \   my $n = scalar @$arr;\n    # Compute the number of inversions.\n    my $inversions\
    \ = 0;\n    for my $i (0 .. $n - 2) {\n        for my $j ($i + 1 .. $n - 1) {\n\
    \            if ($arr->[$i] > $arr->[$j]) {\n                $inversions++;\n\
    \            }\n        }\n    }\n    # All inversions in the array can be removed\
    \ if and only if the number of\n    # inversions is even.\n    if ($inversions\
    \ % 2 == 0) {\n        return 1;\n    }\n    return \"\";\n}", "    return 1 if\
    \ !@$arr;\n    my $length = @$arr;\n    my $first = $arr->[0];\n    my $smallest_pos\
    \ = $length;\n    my $smallest_val = $arr->[0];\n    for my $i (0..$length-1)\
    \ {\n        if ($arr->[$i] < $smallest_val) {\n            $smallest_val = $arr->[$i];\n\
    \            $smallest_pos = $i;\n        }\n    }\n    my $max_pos = $length\
    \ - 1;\n    my $max_val = $arr->[$length-1];\n    for my $i (0..$length-1) {\n\
    \        if ($arr->[$i] > $max_val) {\n            $max_val = $arr->[$i];\n  \
    \          $max_pos = $i;\n        }\n    }\n    if ($first == $smallest_val)\
    \ {\n        return 1;\n    }\n    elsif ($max_val == $smallest_val) {\n     \
    \   return 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my $length\
    \ = scalar @$arr;\n    my $temp = 0;\n    for (my $k = 0; $k < $length; $k++)\
    \ {\n        if ($arr->[$k] == $k + 1) {\n            $temp++;\n        }\n  \
    \  }\n    return $temp == $length ? 1 : '';\n}\n1;", "    my @arr = @$arr;\n \
    \   my @sorted = sort {$a <=> $b} @arr;\n    my %map;\n    for my $i (0..$#arr)\
    \ {\n        $map{$arr[$i]} = $i;\n    }\n    my @target;\n    for my $i (0..$#arr)\
    \ {\n        push @target, $map{$sorted[$i]};\n    }\n    my $ok = 1;\n    my\
    \ $count = 0;\n    my $i = 0;\n    while ($i < @target && $target[$i] == $i) {\n\
    \        $i++;\n    }\n    if ($i == @target) {\n        return 1;\n    }\n  \
    \  my $j = $i;\n    while ($j < @target && $target[$j] > $i) {\n        $j++;\n\
    \    }\n    if ($j == @target) {\n        return \"\";\n    }\n    my $l = $j;\n\
    \    while ($l < @target && $target[$l] < $j) {\n        $l++;\n    }\n    if\
    \ ($l < @target) {\n        return \"\";\n    }\n    my $res = \"\";\n    for\
    \ my $k ($i..$j-1) {\n        $res .= 'R';\n    }\n    return $res;\n}", "   \
    \ my $size = scalar @$arr;\n    if($size == 0){\n        return 1;\n    }\n  \
    \  for(my $i = 0; $i < $size; $i++){\n        if($i+1 < $size && $arr->[$i] >\
    \ $arr->[$i+1]){\n            return \"\";\n        }\n    }\n    return 1;\n}",
  "    if(!@$arr){\n        return 1;\n    }\n    my $start = 0;\n    my $end = @$arr\
    \ - 1;\n    while($start <= $end){\n        if($arr->[$start] <= $arr->[$end]){\n\
    \            $start++;\n            $end--;\n        }else{\n            return\
    \ '';\n        }\n    }\n    return 1;\n}", "    # your code goes here\n    my\
    \ @sorted = sort {$a <=> $b} @$arr;\n    my @shifted = shift_arr(@$arr);\n   \
    \ my $flag = 0;\n    while(@sorted){\n    \tmy $v = shift @sorted;\n    \tmy $s\
    \ = shift @shifted;\n    \tif($v != $s){\n    \t\t$flag = 1;\n    \t\tlast;\n\
    \    \t}\n    }\n    return $flag == 0 ? 1 : '';\n}", "    my($number_of_balls)\
    \ = scalar(@$arr);\n    my($i);\n    my($max_index);\n    my($max_value);\n  \
    \  my($index_diff);\n    my($index_temp);\n    my($index_new);\n    my($index_diff_array)\
    \ = [];\n    my($index_balls) = [];\n    my($count);\n    my($flag);\n    my($message);\n\
    \    $count = 0;\n    $flag = 0;\n    $max_index = 0;\n    $max_value = 0;\n \
    \   $message = \"\";\n    for($i = 0; $i < $number_of_balls; $i++) {\n       \
    \ if($arr->[$i] > $max_value) {\n            $max_value = $arr->[$i];\n      \
    \      $max_index = $i;\n        }\n    }\n    if($number_of_balls == 0) {\n \
    \       $message = 1;\n    } elsif($number_of_balls == 1) {\n        $message\
    \ = 1;\n    } else {\n        if($max_index == $number_of_balls - 1) {\n     \
    \       $message = 1;\n        } else {\n            $index_diff = $number_of_balls\
    \ - $max_index - 1;\n            $index_temp = $max_index + 1;\n            while($index_temp\
    \ != $max_index) {\n                $index_new = $index_temp - $index_diff;\n\
    \                if($index_new < 0) {\n                    $index_new = $index_new\
    \ + $number_of_balls;\n                }\n                $index_diff_array->[$count]\
    \ = $index_new;\n                $index_balls->[$count] = $arr->[$index_temp];\n\
    \                $count++;\n                $index_temp++;\n                if($index_temp\
    \ == $number_of_balls) {\n                    $index_temp = 0;\n             \
    \   }\n            }\n            for($i = 0; $i < $count; $i++) {\n         \
    \       if($index_balls->[$i] > $arr->[$index_diff_", "    return 1 if !@$arr;\
    \ # empty array\n    my $i = @$arr - 1;\n    my $j = $i - 1;\n    my $min = $arr->[$i];\n\
    \    while($j >= 0) {\n        if($arr->[$j] > $min) {\n            # $min = $arr->[$j];\n\
    \            $j--;\n        } else {\n            $min = $arr->[$j];\n       \
    \     $i = $j;\n            $j--;\n        }\n    }\n    $i == 0 ? 1 : '';\n}",
  "    return 1 if not @$arr;\n    my $min = $arr->[0];\n    for my $i (1..$#$arr)\
    \ {\n        if ($arr->[$i] < $min) {\n            return \"\";\n        }\n \
    \       $min = $arr->[$i] if $arr->[$i] < $min;\n    }\n    return 1;\n}", " \
    \   # Enter your code here\n}", "    my $last_index = $#{$arr};\n    my $result\
    \ = 1;\n    my $right_shifts = 0;\n    my $i = 0;\n    while ($i < $last_index)\
    \ {\n        if ($arr->[$i] > $arr->[$i + 1]) {\n            $right_shifts +=\
    \ $last_index - $i;\n            if ($right_shifts > $last_index) {\n        \
    \        $result = '';\n                last;\n            }\n        }\n    \
    \    $i++;\n    }\n    return $result;\n}\nprint move_one_ball([3, 4, 5, 1, 2]),\
    \ \"\\n\";\nprint move_one_ball([3, 5, 4, 1, 2]), \"\\n\";\nprint move_one_ball([1,\
    \ 2, 3, 4, 5]), \"\\n\";", "    my $N = scalar(@$arr);\n    my $possible = 1;\n\
    \    for (my $i = 0; $i < $N; $i++) {\n        my $j = $i;\n        while ($j\
    \ > 0 && $arr->[$j] < $arr->[$j - 1]) {\n            $possible = 0;\n        \
    \    $j--;\n        }\n    }\n    return $possible;\n}", "    my $size = scalar\
    \ @$arr;\n    my $cnt = 0;\n    my $arr_copy = [@$arr];\n    for (my $i = 0; $i\
    \ < $size; $i++) {\n        if ($arr->[$i] == $i + 1) {\n            $cnt++;\n\
    \        }\n    }\n    if ($cnt == $size) {\n        return 1;\n    }\n    for\
    \ (my $i = 0; $i < $size; $i++) {\n        for (my $j = $i + 1; $j < $size; $j++)\
    \ {\n            ($arr_copy->[$i], $arr_copy->[$j]) = ($arr_copy->[$j], $arr_copy->[$i]);\n\
    \            $cnt = 0;\n            for (my $k = 0; $k < $size; $k++) {\n    \
    \            if ($arr_copy->[$k] == $k + 1) {\n                    $cnt++;\n \
    \               }\n            }\n            if ($cnt == $size) {\n         \
    \       return 1;\n            }\n            ($arr_copy->[$i], $arr_copy->[$j])\
    \ = ($arr_copy->[$j], $arr_copy->[$i]);\n        }\n    }\n    return \"\";\n}",
  "    return 1 if !scalar @$arr;\n    return 0 if scalar @$arr == 1;\n    my $len\
    \ = scalar @$arr;\n    my $min = $arr->[0];\n    my $min_idx = 0;\n    for(my\
    \ $i = 1; $i < $len; $i++) {\n        if($arr->[$i] < $min) {\n            $min\
    \ = $arr->[$i];\n            $min_idx = $i;\n        }\n    }\n    if($min_idx\
    \ == 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}",
  "    if(@$arr == 0){\n        return 1;\n    }elsif(@$arr == 1){\n        return\
    \ 1;\n    }\n    # check if the array is sorted or not\n    my $flag = 1;\n  \
    \  my $temp = $arr->[0];\n    for my $i (1..@$arr-1){\n        if($temp > $arr->[$i]){\n\
    \            $flag = 0;\n            last;\n        }\n        $temp = $arr->[$i];\n\
    \    }\n    if($flag == 1){\n        return 1;\n    }\n    # set start and end\
    \ for the loop\n    my $start = 0;\n    my $end = @$arr - 1;\n    # case 1: if\
    \ start is equal to the min element then we can get the\n    # correct order by\
    \ putting the start at the end\n    if($arr->[$start] == $arr->[$end]){\n    \
    \    return 1;\n    }elsif($arr->[$start] == find_min($arr)){\n        $start\
    \ = $end;\n        $end = $end - 1;\n    }\n    while($end > $start){\n      \
    \  if($arr->[$start] < $arr->[$end]){\n            return '';\n        }\n   \
    \     $start++;\n        $end--;\n    }\n    return 1;\n}", "    # create a hash\
    \ to store the hash number => array index\n    my %hash;\n    my $possible = 0;\n\
    \    # go through the array with the index\n    for my $i (0 .. $#$arr) {\n  \
    \      # if the number in the array already exists in the hash, then add\n   \
    \     # 1 to the array index and store it\n        if (exists $hash{$arr->[$i]})\
    \ {\n            my $val = $hash{$arr->[$i]};\n            $hash{$arr->[$i]} =\
    \ $val + 1;\n        }\n        # otherwise, store the array index\n        else\
    \ {\n            $hash{$arr->[$i]} = 1;\n        }\n    }\n    # go through the\
    \ hash\n    for my $k (keys %hash) {\n        # if the value is 1, then it's possible\n\
    \        if ($hash{$k} == 1) {\n            $possible = 1;\n        }\n      \
    \  # otherwise, it's not possible\n        else {\n            $possible = 0;\n\
    \            last;\n        }\n    }\n    return $possible;\n}", "    my $len\
    \ = scalar @$arr;\n    my $sorted = 0;\n    my $i = 0;\n    my $j = $len - 1;\n\
    \    while($i < $j) {\n        if ($arr->[$i] > $arr->[$i + 1]) {\n          \
    \  return \"\";\n        }\n        $i++;\n    }\n    return 1;\n}", "    my $len\
    \ = @$arr;\n    my $j = 0;\n    while ($j < $len) {\n        last if $arr->[$j]\
    \ == $j + 1;\n        $j++;\n    }\n    if ($j == $len) {\n        return \"\"\
    ;\n    }\n    return 1;\n}", "    my $n = scalar(@$arr);\n    my @dp = (0) x $n;\n\
    \    my $max_index = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        if ($arr->[$i]\
    \ > $arr->[$max_index]) {\n            $dp[$i] = $max_index;\n            $max_index\
    \ = $i;\n        } else {\n            $dp[$i] = $max_index;\n        }\n    }\n\
    \    my $last_index = $max_index;\n    for (my $i = $n - 1; $i >= 0; $i--) {\n\
    \        if ($last_index == $i) {\n            $last_index = $dp[$i];\n      \
    \  } elsif ($last_index < $i) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my $n = @$arr;\n    my $min_element = $arr->[0];\n  \
    \  my $rotation_count = -1;\n    for (my $i = 0; $i < $n; $i++) {\n        if\
    \ ($min_element > $arr->[$i]) {\n            $min_element = $arr->[$i];\n    \
    \        $rotation_count = $i;\n        }\n    }\n    my $min_element_after_rotation\
    \ = \n        $arr->[($rotation_count + 1) % $n];\n    for (my $i = 0; $i < $n;\
    \ $i++) {\n        if ($min_element_after_rotation > $arr->[$i]) {\n         \
    \   return \"\";\n        }\n    }\n    return 1;\n}", "    return 1 if (scalar(@$arr)\
    \ == 0);\n    my @indices = (0 .. scalar(@$arr) - 1);\n    my %val2index;\n  \
    \  @val2index{@$arr} = @indices;\n    my $idx = 0;\n    my $min = $arr->[0];\n\
    \    while ($idx < scalar(@$arr)) {\n        $min = $arr->[$idx] if ($arr->[$idx]\
    \ < $min);\n        $idx++;\n    }\n    my $min_index = $val2index{$min};\n  \
    \  if ($min_index == 0) {\n        return 1;\n    } else {\n        $idx = 0;\n\
    \        while ($idx < $min_index) {\n            if ($arr->[$idx] > $min) {\n\
    \                return \"\";\n            }\n            $idx++;\n        }\n\
    \        $idx = $min_index + 1;\n        while ($idx < scalar(@$arr)) {\n    \
    \        if ($arr->[$idx] < $min) {\n                return \"\";\n          \
    \  }\n            $idx++;\n        }\n        return 1;\n    }\n}", "    my($h,$t,$mid);\n\
    \    my($l,$r) = (0,$#$arr);\n    while ($l < $r) {\n        $mid = ($l + $r)\
    \ / 2;\n        if($arr->[$mid] < $arr->[$r]) { $r = $mid; }\n        else { $l\
    \ = $mid + 1; }\n    }\n    return $arr->[$l] == $arr->[$#$arr] ? \"\" : 1;\n}",
  "    my $shift_cnt = 0;\n    my $N = scalar(@$arr);\n    for(my $i = 0; $i < $N;\
    \ $i++) {\n        my $rotate_cnt = $arr->[$i] - $i;\n        $rotate_cnt = $rotate_cnt\
    \ < 0 ? 0 : $rotate_cnt;\n        $shift_cnt += $rotate_cnt;\n    }\n    if ($shift_cnt\
    \ % $N == 0) {\n        return 1;\n    }\n    return \"\";\n}", "    my($count)\
    \ = 0;\n    for(my $i = 1; $i < @$arr; $i++) {\n        if($arr->[$i] < $arr->[$i\
    \ - 1]) {\n            $count++;\n        }\n    }\n    return $count == 1 ? 1\
    \ : '';\n}", "    return 1 if @$arr == 0;\n    my $r;\n    for my $i (0 .. $#$arr)\
    \ {\n        if ($arr->[$i] > $arr->[$i+1]) {\n            return \"\";\n    \
    \    }\n        $r .= $arr->[$i] if $i < $#$arr;\n    }\n    $r .= $arr->[-1];\n\
    \    for my $i (0 .. $#$arr) {\n        if ($arr->[$i] > $arr->[$i+1]) {\n   \
    \         return \"\";\n        }\n        $r .= $arr->[$i] if $i < $#$arr;\n\
    \    }\n    $r .= $arr->[-1];\n    return 1;\n}", "    my @sorted = sort {$a <=>\
    \ $b} @$arr;\n    my $len = @$arr;\n    my $cnt = 0;\n    while ($len > 0) {\n\
    \        if ($arr->[$len - 1] == $sorted[$len - 1]) {\n            $len--;\n \
    \           $cnt++;\n        } else {\n            last;\n        }\n    }\n \
    \   if ($cnt == @$arr) {\n        return 1;\n    }\n    return '';\n}", "    my\
    \ $n = @$arr;\n    return 1 if $n == 0;\n    my $last = $arr->[0];\n    for my\
    \ $i (1..$n-1) {\n        if ($arr->[$i] < $last) {\n            return '';\n\
    \        }\n        $last = $arr->[$i];\n    }\n    return 1;\n}", "    return\
    \ 1 if @$arr == 0;\n    my @sorted = sort {$a <=> $b} @$arr;\n    my $i = 0;\n\
    \    my $n = scalar @$arr;\n    while ($i < $n) {\n        if ($arr->[$i] == $sorted[$i])\
    \ {\n            $i++;\n        } else {\n            my $j = $i + 1;\n      \
    \      while ($j < $n) {\n                if ($arr->[$j] == $sorted[$i]) {\n \
    \                   my $temp = $arr->[$j];\n                    splice @$arr,\
    \ $j, 1;\n                    unshift @$arr, $temp;\n                    $j =\
    \ $i + 1;\n                } else {\n                    $j++;\n             \
    \   }\n            }\n            return 1 if $arr->[$i] == $sorted[$i];\n   \
    \         return '';\n        }\n    }\n    return 1;\n}", "    my @arr = @$arr;\n\
    \    my $max_idx = $#arr;\n    for (my $i = 0; $i < $max_idx; $i++) {\n      \
    \  if ($arr[$i] > $arr[$i + 1]) {\n            my $tmp = $arr[$i];\n         \
    \   $arr[$i] = $arr[$i + 1];\n            $arr[$i + 1] = $tmp;\n            if\
    \ ($arr[$i] <= $arr[$i - 1]) {\n                return \"\";\n            }\n\
    \        }\n    }\n    return 1;\n}", "    my $flag = 0;\n    my $min = $arr->[0];\n\
    \    for(my $i = 1; $i < scalar @$arr; $i++) {\n        if($arr->[$i] < $min)\
    \ {\n            $flag = 1;\n            last;\n        }\n        $min = $arr->[$i];\n\
    \    }\n    if($flag == 0) {\n        return 1;\n    }\n    else {\n        return\
    \ '';\n    }\n}", "    my $len = scalar @$arr;\n    my $rot = 0;\n    my $idx\
    \ = 0;\n    my $prev = 0;\n    my $steps = 0;\n    my $flag = 0;\n    if ($len\
    \ == 0) {\n        return 1;\n    }\n    for (my $i = 0; $i < $len; $i++) {\n\
    \        if ($arr->[$i] < $prev) {\n            $flag = 1;\n        }\n      \
    \  $prev = $arr->[$i];\n    }\n    if ($flag == 0) {\n        return 1;\n    }\n\
    \    for (my $i = 0; $i < $len; $i++) {\n        if ($arr->[$i] == 1) {\n    \
    \        $idx = $i;\n            last;\n        }\n    }\n    $rot = $len - $idx;\n\
    \    $steps = $rot + 1;\n    if ($steps % 2 == 0) {\n        return \"\";\n  \
    \  }\n    return 1;\n}", '    return 1 if @$arr == 0;', "    my $len = scalar\
    \ @$arr;\n    my $ar = [sort @$arr];\n    my $c = 0;\n    while($c < $len){\n\
    \        if($arr->[$c] == $ar->[$c]){\n            $c++;\n        }\n        else{\n\
    \            last;\n        }\n    }\n    return $len - $c;\n}", "    my @ret\
    \ = @$arr;\n    @ret = sort {$a <=> $b} @ret;\n    my $count = 0;\n    for (my\
    \ $i = 0; $i < @$arr; $i++) {\n        if($arr->[$i] != $ret[$i]) {\n        \
    \    $count++;\n        }\n    }\n    return $count == 1 ? 1 : \"\";\n}", "  \
    \  my $size = @$arr;\n    return 1 if $size == 0;\n    my $min = find_min($arr);\n\
    \    my $i = 0;\n    my $j = $min;\n    while($i < $size) {\n        my $k = $j;\n\
    \        for($k = $j; $k < $size - 1; $k++) {\n            last if $arr->[$k]\
    \ > $arr->[$k + 1];\n        }\n        if($k == $size - 1) {\n            my\
    \ $m = $i;\n            for($m = $i; $m < $j; $m++) {\n                last if\
    \ $arr->[$m] > $arr->[$m + 1];\n            }\n            if($m == $j) {\n  \
    \              return 1;\n            }\n        }\n        $i++;\n        $j\
    \ = ($j + 1) % $size;\n    }\n    return \"\";\n}", "    my $n = @$arr;\n    my\
    \ @s = map $arr->[$_], 0..$n-1;\n    for my $i (0..$n-1) {\n        for my $j\
    \ (0..$n-1) {\n            if ($arr->[$j] == $i+1) {\n                if ($j ==\
    \ $i) {\n                    $s[$i] = 'o';\n                } else {\n       \
    \             $s[$i] = 'x';\n                }\n            }\n        }\n   \
    \ }\n    my $x = 0;\n    my $o = 0;\n    for my $i (0..$n-1) {\n        if ($s[$i]\
    \ eq 'x') {\n            $x++;\n        } elsif ($s[$i] eq 'o') {\n          \
    \  $o++;\n        }\n    }\n    if ($x == $n) {\n        return \"\";\n    } elsif\
    \ ($o == $n) {\n        return 1;\n    } else {\n        my $t = $n - $o;\n  \
    \      if ($t % 2 == 0) {\n            return 1;\n        } else {\n         \
    \   return \"\";\n        }\n    }\n}", '    return 1 if !@$arr;', "    return\
    \ 1 if !@$arr;\n    my $i = @$arr - 1;\n    my $max = $arr->[$i];\n    while ($i\
    \ >= 0) {\n        if ($arr->[$i] > $max) {\n            $max = $arr->[$i];\n\
    \        } elsif ($arr->[$i] < $max) {\n            return \"\";\n        }\n\
    \        $i--;\n    }\n    return 1;\n}", "    my($i, $j, $max);\n    my($res);\n\
    \    my(@arr) = @$arr;\n    if (scalar(@arr) == 0) {\n        return 1;\n    }\n\
    \    $max = $arr[0];\n    $res = 1;\n    for ($i = 1; $i < scalar(@arr); $i++)\
    \ {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n\
    \        else {\n            $res = \"\";\n            last;\n        }\n    }\n\
    \    return $res;\n}", "    my($i);\n    my($n) = @$arr;\n    my($result) = 1;\n\
    \    for($i = 0; $i < $n - 1; $i++) {\n        if($arr->[$i] >= $arr->[$i + 1])\
    \ {\n            $result = '';\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my $last = @$arr - 1;\n    my @indexes = (0..$last);\n  \
    \  my @tindexes = sort {$arr->[$a] <=> $arr->[$b]} @indexes;\n    my $counter\
    \ = 0;\n    for my $i (0..$last) {\n        next if $i == $tindexes[$i];\n   \
    \     $counter++;\n        last if $counter > 1;\n    }\n    return ($counter\
    \ == 1) ? 1 : '';\n}", "    my($n) = @$arr;\n    if( $n == 0 ) { return 1; }\n\
    \    my($min, $max) = ($arr->[0], $arr->[0]);\n    my($start, $end) = (0, $n -\
    \ 1);\n    my($min_pos, $max_pos) = (0, 0);\n    for( my($i) = 1; $i < $n; $i++\
    \ ) {\n        if( $arr->[$i] < $min ) {\n            $min = $arr->[$i];\n   \
    \         $min_pos = $i;\n        }\n        if( $arr->[$i] > $max ) {\n     \
    \       $max = $arr->[$i];\n            $max_pos = $i;\n        }\n    }\n   \
    \ if( $max_pos <= $min_pos ) {\n        $start = $max_pos;\n        $end = $min_pos;\n\
    \    }\n    else {\n        $start = $min_pos;\n        $end = $max_pos;\n   \
    \ }\n    for( my($i) = $start + 1; $i <= $end; $i++ ) {\n        if( $arr->[$i]\
    \ < $arr->[$i - 1] ) {\n            return \"\";\n        }\n    }\n    if( $start\
    \ == 0 ) { return 1; }\n    else { return \"\"; }\n}", "    my $count = 0;\n \
    \   my $len = scalar @$arr;\n    for(my $i = 0; $i < $len - 1; $i++) {\n     \
    \   my $curr = $arr->[$i];\n        my $next = $arr->[$i + 1];\n        my $curr_right\
    \ = $curr % $len;\n        my $next_right = $next % $len;\n        if($curr_right\
    \ > $next_right) {\n            my $diff = $curr_right - $next_right;\n      \
    \      $count += $diff;\n        } else {\n            my $diff = $next_right\
    \ - $curr_right;\n            $count += $diff;\n        }\n    }\n    return $count\
    \ % 2 ? \"\" : 1;\n}", "    my $len = scalar @$arr;\n    if ($len < 1) {\n   \
    \     return 1;\n    }\n    my $shift = 0;\n    my $idx = 0;\n    my $n = $len;\n\
    \    my $prev = -1;\n    while($n--) {\n        if ($idx > $len - 1) {\n     \
    \       $idx = 0;\n        }\n        if ($prev != -1 && $arr->[$idx] < $prev)\
    \ {\n            return \"\";\n        }\n        $prev = $arr->[$idx];\n    \
    \    $idx += $shift + 1;\n        $shift++;\n    }\n    return 1;\n}\n1;", " \
    \   return 1 if scalar @$arr == 0;\n    my $rotations = 0;\n    # We need to find\
    \ the max number in the array and the number of rotations\n    # required to move\
    \ it to the end of the array.\n    my ($max, $max_index) = (0, 0);\n    for my\
    \ $index (0 .. $#$arr) {\n        if ($arr->[$index] > $max) {\n            $max\
    \ = $arr->[$index];\n            $max_index = $index;\n        }\n    }\n    $rotations\
    \ = $#$arr - $max_index;\n    # Now we have the max number and the number of rotations\
    \ needed to move it\n    # to the end of the array. Now we need to check if all\
    \ numbers to the left\n    # of the max number are sorted.\n    # One way to do\
    \ this is to keep rotating the array and comparing the numbers\n    # in the left\
    \ half of the array to see if they are sorted.\n    # The right half of the array\
    \ will always be sorted because, that is how\n    # we moved the max number to\
    \ the end of the array.\n    my $left_half = get_left_half($arr);\n    while ($rotations--)\
    \ {\n        push @$left_half, shift @$left_half;\n        return '' if !is_sorted($left_half);\n\
    \    }\n    return 1;\n}", "    for my $i (0 .. $#$arr) {\n        my $pos = $i;\n\
    \        my $cur = $arr->[$i];\n        while ($pos != $cur-1) {\n           \
    \ my $tmp = $arr->[$cur-1];\n            $arr->[$cur-1] = $cur;\n            $cur\
    \ = $tmp;\n            $pos = $cur-1;\n        }\n    }\n    for my $i (0 .. $#$arr)\
    \ {\n        return '' if $arr->[$i] != $i+1;\n    }\n    return 1;\n}", "   \
    \ my $min = $arr->[0];\n    my $n = scalar @$arr;\n    my $count = 0;\n    for(my\
    \ $i = 1; $i < $n; $i++) {\n        if($arr->[$i] < $min) {\n            $count++;\n\
    \            $min = $arr->[$i];\n        }\n    }\n    return ($count == 1 ? 1\
    \ : '');\n}", "    my $len = scalar @$arr;\n    # Performing right shift operations.\n\
    \    # Logic: Suppose we have an array [1, 2, 4, 5, 3].\n    # Then the right\
    \ shifted array will be [3, 1, 2, 4, 5]. Now, all the\n    # elements between\
    \ arr[0] and arr[len-1] are sorted and the last element\n    # (arr[len-1]) is\
    \ going to be greater than all the elements in the array.\n    # So, we can say\
    \ that after a right shift operation, the first and the last\n    # elements are\
    \ sorted and we can find the index of the sorted first element.\n    # After getting\
    \ the index we again perform right shift on the array till we\n    # get the index\
    \ of the sorted first element as 0. i.e. we perform a right\n    # shift on the\
    \ array till the element at index 0 is sorted.\n    my $pos = 0;\n    my $j =\
    \ 0;\n    while($j < $len) {\n        if($arr->[$j] > $arr->[$pos]) {\n      \
    \      $pos = $j;\n        }\n        $j += 1;\n    }\n    if($pos == 0) {\n \
    \       return 1;\n    }\n    else {\n        return \"\";\n    }\n}\nmy $arr\
    \ = [3, 4, 5, 1, 2];\nmy $ret = move_one_ball($arr);\nprint \"$ret\\n\";\n$arr\
    \ = [3, 5, 4, 1, 2];\n$ret = move_one_ball($arr);\nprint \"$ret\\n\";", "    my\
    \ $l = $#$arr;\n    my $r = 0;\n    my $R = 1;\n    my $max_r = 0;\n    while($l>=0)\
    \ {\n        if ($arr->[$l] < $arr->[$r]) {\n            # left-ball is smaller,\
    \ move to right\n            $r++;\n            $l--;\n            $R++;\n   \
    \         $max_r = max($max_r, $R);\n        } else {\n            # right-ball\
    \ is smaller, move to left\n            $r--;\n            $l--;\n           \
    \ $R--;\n        }\n    }\n    return ($max_r >= 0) ? 1 : '';\n}", "    # @_ =\
    \ @$arr;\n    return 1 if(!@$arr);\n    my $max_value = max @$arr;\n    my @index\
    \ = grep {$arr->[$_] == $max_value} 0..$#$arr;\n    my @new_index = map {$_ %\
    \ @$arr} @index;\n    # print \"index @index new_index @new_index\\n\";\n    foreach\
    \ my $idx (@new_index) {\n        return 1 if $idx == 0 or $arr->[$idx - 1] <=\
    \ $arr->[$idx];\n    }\n    return \"\";\n}", "    my $len = scalar @$arr;\n \
    \   return 1 if $len == 0;\n    for (my $i = 0; $i < $len - 1; $i++) {\n     \
    \   if ($arr->[$i] > $arr->[$i + 1]) {\n            if ($i == 0) {\n         \
    \       # try to move the first ball to the end.\n                if ($arr->[$i\
    \ + 1] == 1) {\n                    $arr->[$i]--;\n                    $arr->[$i\
    \ + 1]++;\n                } else {\n                    return \"\";\n      \
    \          }\n            } else {\n                # try to move the ball at\
    \ the next position to current position.\n                if ($arr->[$i + 1] ==\
    \ $arr->[$i - 1]) {\n                    $arr->[$i]--;\n                    $arr->[$i\
    \ + 1]++;\n                } else {\n                    return \"\";\n      \
    \          }\n            }\n        }\n    }\n    return 1;\n}", "    return\
    \ 1 if @$arr == 0;\n    for (my $i = 0; $i < @$arr - 1; $i++) {\n        return\
    \ \"\" if $arr->[$i] > $arr->[$i + 1];\n    }\n    return 1;\n}", "    my($min);\n\
    \    return 1 if(!@$arr);\n    $min = $arr->[0];\n    foreach(@$arr) {\n     \
    \   return '' if($_ > $min);\n        $min = $_ if($_ < $min);\n    }\n    return\
    \ 1;\n}", "    return 1 if !@$arr;\n    my $min = $$arr[0];\n    for my $i (1..$#$arr)\
    \ {\n        if ($$arr[$i] < $min) {\n            return '';\n        }\n    \
    \    $min = $$arr[$i];\n    }\n    return 1;\n}", "    #YOUR CODE GOES HERE\n}",
  "    my $arr_length = scalar @$arr;\n    if ($arr_length == 0) { return 1; }\n \
    \   my $sorted_arr = [sort {$a <=> $b} @$arr];\n    my $num_mismatches = 0;\n\
    \    for my $index (0..$arr_length-1) {\n        if ($arr->[$index] != $sorted_arr->[$index])\
    \ {\n            $num_mismatches++;\n        }\n    }\n    return ($num_mismatches\
    \ == 1) ? 1 : \"\";\n}", "    my($count, $n, $i, $num, $t, $flag, $p, $r, $l);\n\
    \    $count = 0;\n    $n = @$arr;\n    $i = 0;\n    $num = $n;\n    $t = 1;\n\
    \    $flag = 0;\n    while ($t <= $n) {\n        $num--;\n        $i = $t;\n \
    \       while ($i < $n) {\n            if ($arr->[$i] < $arr->[$i + 1]) {\n  \
    \              $p = $i;\n                $r = $i + 1;\n                $l = $i\
    \ - 1;\n                while ($l >= 0 && $arr->[$l] > $arr->[$l + 1]) {\n   \
    \                 $p = $l;\n                    $l--;\n                }\n   \
    \             $flag = 1;\n                last;\n            }\n            $i++;\n\
    \        }\n        if ($flag == 1) {\n            last;\n        }\n        $t++;\n\
    \    }\n    if ($num != 0) {\n        return \"\";\n    }\n    return 1;\n}\n\
    1;", "    return 1 if !@$arr;\n    my @arr = sort {$a <=> $b} @$arr;\n    my @sorted\
    \ = sort {$a <=> $b} @$arr;\n    my $last = pop @sorted;\n    unshift @sorted,\
    \ $last;\n    return (@arr == @sorted) ? 1 : '';\n}", "    return 1 if not @$arr;\n\
    \    my $step = 0;\n    for my $i (0 .. $#$arr - 1) {\n        my $diff = $arr->[$i\
    \ + 1] - $arr->[$i];\n        if ($diff > 0) {\n            return \"\" if $diff\
    \ % 2 == 0;\n            $step++;\n        }\n    }\n    return \"\" if $step\
    \ > 1;\n    return 1;\n}", "    my $n = scalar(@$arr);\n    my $pos;\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        if ($arr->[$i] == 1) {\n            $pos\
    \ = $i;\n            last;\n        }\n    }\n    my $last = $arr->[$n - 1];\n\
    \    my $i = $n - 1;\n    while ($i > $pos) {\n        if ($arr->[$i - 1] > $last)\
    \ {\n            return '';\n        }\n        $i--;\n    }\n    return 1;\n}",
  "    my $size = @$arr;\n    if ($size < 1) {\n        return 1;\n    }\n    my $curr_min\
    \ = $arr->[0];\n    for (my $i = 1; $i < $size; $i++) {\n        if ($arr->[$i]\
    \ < $curr_min) {\n            return \"\";\n        }\n        $curr_min = $arr->[$i];\n\
    \    }\n    return 1;\n}", "    my $len = scalar @$arr;\n    if($len < 1) {\n\
    \        return 1;\n    }\n    my $i = 0;\n    my $max = $arr->[0];\n    while($i\
    \ < $len) {\n        if($arr->[$i] < $max) {\n            return '';\n       \
    \ }\n        $max = $arr->[$i];\n        $i++;\n    }\n    return 1;\n}", "  \
    \  my $len = @$arr;\n    my $success = 1;\n    my $start = 0;\n    my $end = $len\
    \ - 1;\n    my $cur = $end;\n    while ($cur >= $start) {\n        if ($cur ==\
    \ $end) {\n            # only one remaining ball\n            $cur--;\n      \
    \  } elsif ($arr->[$cur] <= $arr->[$cur+1]) {\n            # valid sequence\n\
    \            $cur--;\n        } elsif ($cur != $start && $arr->[$cur] > $arr->[$cur-1])\
    \ {\n            # try shifting current ball to the left\n            ($arr->[$cur],\
    \ $arr->[$cur-1]) = ($arr->[$cur-1], $arr->[$cur]);\n            $cur--;\n   \
    \     } elsif ($arr->[$cur] > $arr->[$end]) {\n            # try shifting current\
    \ ball to the right\n            ($arr->[$cur], $arr->[$end]) = ($arr->[$end],\
    \ $arr->[$cur]);\n            $end--;\n        } else {\n            # can't make\
    \ progress\n            $success = '';\n            last;\n        }\n    }\n\
    \    return $success;\n}", "    # Write your code here\n    my %ball_color_idx;\n\
    \    for my $i (0..$#$arr) {\n        $ball_color_idx{$arr->[$i]} = $i;\n    }\n\
    \    my @arr_indices = sort { $a <=> $b } keys %ball_color_idx;\n    my $prev_color\
    \ = $arr_indices[0];\n    for my $i (1..$#arr_indices) {\n        if ($ball_color_idx{$arr_indices[$i]}\
    \ < $ball_color_idx{$prev_color}) {\n            return \"\";\n        }\n   \
    \     $prev_color = $arr_indices[$i];\n    }\n    return 1;\n}", "    return 1\
    \ if scalar @$arr == 0;\n    my($n_shifts) = 0;\n    for(my $i = 1; $i < scalar\
    \ @$arr; $i++) {\n        if ($arr->[$i] < $arr->[$i - 1]) {\n            $n_shifts++;\n\
    \        }\n    }\n    return $n_shifts <= 1 ? 1 : '';\n}", "    return 1 if scalar\
    \ @$arr == 0;\n    my $i = 0;\n    my $min = $arr->[0];\n    my $min_i = 0;\n\
    \    while($i < scalar @$arr) {\n        if($arr->[$i] < $min) {\n           \
    \ $min = $arr->[$i];\n            $min_i = $i;\n        }\n        $i++;\n   \
    \ }\n    my $dist = $min_i;\n    my $last = $min;\n    foreach $i (1..$dist) {\n\
    \        if($arr->[$i] < $last) {\n            return \"\";\n        }\n     \
    \   $last = $arr->[$i];\n    }\n    foreach $i ($dist+1..scalar @$arr-1) {\n \
    \       if($arr->[$i] < $last) {\n            return \"\";\n        }\n      \
    \  $last = $arr->[$i];\n    }\n    return 1;\n}", "    if (! @$arr) {\n      \
    \  return 1;\n    }\n    my $max_val = -100;\n    for my $i (0 .. $#$arr) {\n\
    \        # Find the minimum value from the first position i.e. 0th index to the\n\
    \        # current position.\n        my $min_val = min(@$arr[0 .. $i]);\n   \
    \     if ($arr->[$i] < $max_val) {\n            # The maximum value from previous\
    \ positions is greater than the\n            # current value.\n            return\
    \ '';\n        }\n        elsif ($arr->[$i] > $min_val) {\n            # The current\
    \ value is greater than the minimum value from the\n            # previous positions.\n\
    \            $max_val = $arr->[$i];\n        }\n    }\n    return 1;\n}", "  \
    \  my $test_arr = $arr;\n    my $max = 0;\n    my $index = 0;\n    my $len = scalar\
    \ @$arr;\n    if ($len == 0) {\n        return 1;\n    }\n    while ($max < $len)\
    \ {\n        $index = max_index($test_arr);\n        $test_arr = shift_arr($test_arr,\
    \ $index);\n        $max++;\n    }\n    return is_sorted($test_arr) ? 1 : '';\n\
    }", "    # TODO\n}", "    my $result = 1;\n    my $start = 0;\n    my $end = $#{$arr};\n\
    \    for(; $start < $end; $start++){\n        if($arr->[$start] > $arr->[$start+1]){\n\
    \            if($arr->[$start] == $end){\n                $start++;\n        \
    \        $end--;\n            }\n            else{\n                $result =\
    \ '';\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "    my($i, $j, $temp, $res);\n    my($n) = @$arr;\n    $res = 1;\n    for($i\
    \ = 0; $i < $n-1; $i++) {\n        if($arr->[$i] > $arr->[$i+1]) {\n         \
    \   $res = \"\";\n            last;\n        }\n    }\n    if($res ne \"\") {\n\
    \        return $res;\n    }\n    $res = \"\";\n    $i = 0;\n    while($i < $n-1)\
    \ {\n        $j = $i+1;\n        while($j < $n && $arr->[$j] < $arr->[$j-1]) {\n\
    \            $j++;\n        }\n        if($j == $n) {\n            $res = \"\"\
    ;\n            last;\n        }\n        if($arr->[$i] > $arr->[$j]) {\n     \
    \       $temp = $arr->[$i];\n            $arr->[$i] = $arr->[$j];\n          \
    \  $arr->[$j] = $temp;\n            $i = $j;\n        }\n        else {\n    \
    \        $res = 1;\n            last;\n        }\n    }\n    if($res ne \"\")\
    \ {\n        return $res;\n    }\n    for($i = 0; $i < $n-1; $i++) {\n       \
    \ if($arr->[$i] > $arr->[$i+1]) {\n            $res = \"\";\n            last;\n\
    \        }\n    }\n    if($res ne \"\") {\n        return $res;\n    }\n    return\
    \ $res;\n}", "    if (@$arr == 0) {\n        return 1;\n    }\n    my @sorted\
    \ = sort {$a <=> $b} @$arr;\n    my $count = 0;\n    for (my $i = 0; $i < @$arr;\
    \ $i++) {\n        if ($arr->[$i] == $sorted[0]) {\n            my $new_arr =\
    \ [ @$arr[$i .. @$arr - 1], @$arr[0 .. $i - 1] ];\n            if ($new_arr eq\
    \ [ @sorted ]) {\n                $count++;\n            }\n        }\n    }\n\
    \    return $count ? 1 : '';\n}", "    return 1 if @$arr == 0;\n    my @reverse_idx\
    \ = (0 .. $#$arr);\n    my @uniq = sort {$a <=> $b} @$arr;\n    return '' if @uniq\
    \ != @$arr;\n    while (@reverse_idx > 0) {\n        my $pos = shift @reverse_idx;\n\
    \        my $n = $arr->[$pos];\n        my $pos_in_uniq = first_index {$_ == $n}\
    \ @uniq;\n        my $pos_in_reverse = first_index {$_ == $pos} @reverse_idx;\n\
    \        return '' if $pos_in_uniq > $pos_in_reverse;\n    }\n    return 1;\n}",
  "    my $size = @$arr;\n    my $k;\n    return 1 if ($size == 0);\n    for (my $i\
    \ = 0; $i < $size - 1; $i++) {\n        if ($arr->[$i] > $arr->[$i + 1]) {\n \
    \           $k = $i + 1;\n            break;\n        }\n    }\n    if ($arr->[$k]\
    \ > $arr->[$size - 1]) {\n        my $index = $k;\n        while ($index < $size\
    \ - 1 && $arr->[$index] > $arr->[$index + 1]) {\n            $index++;\n     \
    \   }\n        return $index - $k + 1;\n    }\n    else {\n        return \"\"\
    ;\n    }\n}", "    my $count = 0;\n    for (my $i = 0; $i < @$arr; $i++) {\n \
    \       if ($arr->[$i] > $arr->[$i + 1]) {\n            splice(@$arr, $i, 0, splice(@$arr,\
    \ $i + 1, 1));\n            $count++;\n        }\n    }\n    return $count < 2\
    \ ? 1 : '';\n}", "    my @out = sort{$a <=> $b} @$arr;\n    my $i = 0;\n    while($out[$i]\
    \ eq $arr->[$i]){\n        $i++;\n    }\n    my $j = $i;\n    while($out[$i] eq\
    \ $arr->[$j]){\n        $i++;\n        $j++;\n    }\n    return $i eq $j ? 1 :\
    \ '';\n}", "    my $n = scalar(@$arr);\n    my $rshift = 0;\n    my $i = 0;\n\
    \    while($i < $n){\n        my $possible = is_possible($arr, $n, $i, $rshift);\n\
    \        if($possible){\n            return 1;\n        }\n        $i++;\n   \
    \ }\n    return '';\n}", "    my $right_shift_num = get_right_shift_num($arr);\n\
    \    return ($right_shift_num ? 1 : \"\");\n}", "    my @arr = @$arr;\n    my\
    \ $flag = 1;\n    for (my $i = 0; $i < scalar @arr; $i++) {\n        for (my $j\
    \ = $i+1; $j < scalar @arr; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n\
    \                $flag = 0;\n                last;\n            }\n        }\n\
    \    }\n    return $flag;\n}", "    return \"\";\n}", "    my $low = 0;\n    my\
    \ $high = @$arr - 1;\n    while ( $low <= $high ) {\n        my $mid = $low +\
    \ int(($high - $low) / 2);\n        if ( $arr->[$mid] > $arr->[$high] ) {\n  \
    \          $low = $mid + 1;\n        }\n        else {\n            $high = $mid\
    \ - 1;\n        }\n    }\n    my $low2 = $low;\n    $low = 0;\n    $high = @$arr\
    \ - 1;\n    while ( $low <= $high ) {\n        my $mid = $low + int(($high - $low)\
    \ / 2);\n        if ( $arr->[$mid] == $arr->[$low2] ) {\n            $low = $mid\
    \ + 1;\n        }\n        else {\n            $high = $mid - 1;\n        }\n\
    \    }\n    if ( $low == $low2 ) {\n        return 1;\n    }\n    else {\n   \
    \     return '';\n    }\n}", "    my @sorted = sort {$a <=> $b} @$arr;\n    my\
    \ $h = {map { $_ => 1 } @sorted};\n    my $c = shift @$arr;\n    while (scalar\
    \ @$arr) {\n        if (exists $h->{$c}) {\n            $c = shift @$arr;\n  \
    \      } else {\n            return '';\n        }\n    }\n    return 1;\n}",
  "    $arr = [sort @$arr];\n    my @yarr = map { $arr->[$_] } (1..$#$arr);\n    for\
    \ my $i (0..$#$arr) {\n        my $d;\n        for my $j (0..$#$arr) {\n     \
    \       $d = $i - $j if $yarr[$j] == $arr->[$i];\n        }\n        return 1\
    \ if $d == 0 || $d == 1;\n    }\n    return '';\n}", "    return 1 if scalar @$arr\
    \ == 0;\n    my $i;\n    for ($i = 0; $i < scalar @$arr - 1; $i++) {\n       \
    \ if ($arr->[$i] > $arr->[$i + 1]) {\n            last;\n        }\n    }\n  \
    \  if ($i == scalar @$arr - 1) {\n        return 1;\n    } else {\n        if\
    \ ($arr->[$i] > $arr->[$i + 2]) {\n            return \"\";\n        } else {\n\
    \            my $j;\n            for ($j = $i + 2; $j < scalar @$arr - 1; $j++)\
    \ {\n                if ($arr->[$j] > $arr->[$j + 1]) {\n                    return\
    \ \"\";\n                }\n            }\n            return 1;\n        }\n\
    \    }\n}", "    # This is a circular array and so there are many ways to sort\
    \ the array but\n    # we will use the following sorting algorithm, because it\
    \ is easy to\n    # implement:\n    # We will set the first element to the minimum\
    \ element of the array and keep\n    # finding the next minimum element until\
    \ we reach the starting element.\n    # Similarly we will set the last element\
    \ to the maximum element of the array\n    # and keep finding the next maximum\
    \ element until we reach the last element.\n    # Now, we will return 1 if the\
    \ array is sorted else we will return ''\n    # First, let us find the minimum\
    \ element and its index:\n    my($min_index) = 0;\n    my($min_element) = $arr->[0];\n\
    \    for my $index (1 .. $#$arr) {\n        if ($arr->[$index] < $min_element)\
    \ {\n            $min_element = $arr->[$index];\n            $min_index = $index;\n\
    \        }\n    }\n    # Now, let us find the maximum element and its index:\n\
    \    my($max_index) = $#$arr;\n    my($max_element) = $arr->[$#$arr];\n    for\
    \ my $index (reverse 0 .. $#$arr - 1) {\n        if ($arr->[$index] > $max_element)\
    \ {\n            $max_element = $arr->[$index];\n            $max_index = $index;\n\
    \        }\n    }\n    # Now, we have the minimum element and its index and the\
    \ maximum element and\n    # its index. We will check if the array is sorted:\n\
    \    if ($min_index == 0 and $max_index == $#$arr) {\n        # The array is sorted\
    \ if the above condition is true.\n        return 1;\n    } else {\n        #\
    \ Now, the array is not sorted, let us check if it can be sorted:\n        if\
    \ ($min_index < $max_index) {\n            # The array cannot be sorted because\
    \ the minimum element is left of\n            # the maximum element.\n       \
    \     return '';\n        } else {\n            # Now, the array may be sortable.\
    \ Let us check:\n            # First, let us start with $min_index and traverse\
    \ forwards", "    my($len) = scalar(@$arr);\n    my(@a) = ();\n    my($i, $j,\
    \ $c);\n    for ($i = 0; $i < $len; $i++) {\n        push(@a, $arr->[$i]);\n \
    \   }\n    for ($i = 0; $i < $len; $i++) {\n        $c = 0;\n        for ($j =\
    \ 0; $j < $len; $j++) {\n            if ($i != $j) {\n                if ($a[$i]\
    \ > $a[$j]) {\n                    $c++;\n                }\n            }\n \
    \       }\n        if ($c == $len - 1) {\n            return 1;\n        }\n \
    \   }\n    return '';\n}", "    if(!@$arr) {\n        return 1;\n    }\n    my\
    \ @shifted_arr = @$arr;\n    my @sorted_arr = sort {$a <=> $b} @$arr;\n    my\
    \ $count = 0;\n    while(1) {\n        my $last_element = pop @shifted_arr;\n\
    \        unshift @shifted_arr, $last_element;\n        $count++;\n        last\
    \ if(is_same(\\@shifted_arr, \\@sorted_arr));\n    }\n    if($count > scalar @$arr)\
    \ {\n        return \"\";\n    }\n    return 1;\n}", "    my @sorted = sort {$a\
    \ <=> $b} @$arr;\n    my $out = 1;\n    if (join('', @$arr) ne join('', @sorted))\
    \ {\n        $out = '';\n    }\n    return $out;\n}", "    return \"\" if is_decreasing($arr);\n\
    \    # quick sort\n    quick_sort($arr, 0, $#$arr);\n    return 1;\n}", "    #\
    \ Iterate over the array and find the first number which is not less than the\n\
    \    # previous number. Find the position of the smallest number in the array\n\
    \    # which is greater than this number.\n    my $smallest_no = $arr->[0];\n\
    \    my $smallest_no_index = 0;\n    for my $i (0 .. $#$arr) {\n        if ($arr->[$i]\
    \ < $smallest_no) {\n            $smallest_no = $arr->[$i];\n            $smallest_no_index\
    \ = $i;\n        }\n    }\n    my $first_gt_index = -1;\n    for my $i (0 .. $#$arr\
    \ - 1) {\n        if ($arr->[$i] > $arr->[$i + 1]) {\n            $first_gt_index\
    \ = $i;\n            last;\n        }\n    }\n    if ($first_gt_index == -1) {\n\
    \        return 1;\n    }\n    # Find the position of the smallest number in the\
    \ array which is greater than\n    # this number.\n    my $smallest_gt_index =\
    \ -1;\n    for my $i ($first_gt_index + 1 .. $#$arr) {\n        if ($arr->[$i]\
    \ > $arr->[$first_gt_index]) {\n            $smallest_gt_index = $i;\n       \
    \     last;\n        }\n    }\n    if ($smallest_gt_index == -1) {\n        return\
    \ '';\n    }\n    if ($smallest_gt_index - $first_gt_index == 1 and\n        $smallest_no_index\
    \ < $first_gt_index) {\n        return 1;\n    }\n    if ($smallest_gt_index -\
    \ $first_gt_index == 1 and\n        $smallest_no_index > $first_gt_index) {\n\
    \        return '';\n    }\n    return 1;\n}", "    my $n = scalar(@$arr);\n \
    \   my $max = $arr->[0];\n    my $last_max_i = 0;\n    my $last_max_v = $arr->[0];\n\
    \    my $last_min_i = 0;\n    my $last_min_v = $arr->[0];\n    for my $i (1..$n-1)\
    \ {\n        my $v = $arr->[$i];\n        if ($v > $max) {\n            $max =\
    \ $v;\n            $last_max_i = $i;\n            $last_max_v = $v;\n        }\n\
    \        if ($v < $last_min_v) {\n            $last_min_i = $i;\n            $last_min_v\
    \ = $v;\n        }\n    }\n    if ($last_max_i < $last_min_i) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my @sorted = sort {$a <=> $b} @$arr;\n\
    \    return 1 if @$arr == 0;\n    my $size = @$arr;\n    my $flag = 0;\n    for(my\
    \ $i = 0; $i < $size; $i++) {\n        my $count = 0;\n        my $item = $sorted[$i];\n\
    \        for(my $j = 0; $j < $size; $j++) {\n            $count++ if $item ==\
    \ $arr->[$j];\n        }\n        if($count > 1) {\n            $flag = 1;\n \
    \           last;\n        }\n    }\n    return $flag ? \"\" : 1;\n}", "    $arr\
    \ = [1] if(!@$arr);\n    my $c = 0;\n    for my $i (1..$#$arr) {\n        if($arr->[$i]\
    \ < $arr->[$i-1]) {\n            $c++;\n        }\n    }\n    return ($c > 1)\
    \ ? \"\" : 1;\n}", "    my $len = scalar @$arr;\n    my @counts = map { 0 } 1..$len;\n\
    \    $counts[0] = 1;\n    for my $i (0..$len-1) {\n        my $num = $arr->[$i];\n\
    \        for my $j (0..$i-1) {\n            if ($arr->[$j] < $num) {\n       \
    \         $counts[$i] += $counts[$j];\n            }\n        }\n    }\n    my\
    \ $tot = sum(@counts);\n    if ($tot > 1) {\n        return $tot;\n    }\n   \
    \ return \"\";\n}", "    if (!@$arr) {\n        return 1;\n    }\n    my $i =\
    \ 0;\n    while ($i < @$arr) {\n        my $j = $i;\n        while ($j < @$arr)\
    \ {\n            if ($arr->[$j] < $arr->[$i]) {\n                $i = $j;\n  \
    \          }\n            $j++;\n        }\n        my $k = $i + 1;\n        while\
    \ ($k < @$arr) {\n            if ($arr->[$k] < $arr->[$i]) {\n               \
    \ return '';\n            }\n            $k++;\n        }\n        $i++;\n   \
    \ }\n    return 1;\n}", "    \n    return 1 if @$arr < 2;", "    my $len = @$arr;\n\
    \    return 1 if $len < 2;\n    my $i = $len - 1;\n    # Loop over the array except\
    \ last element.\n    while($i > 0) {\n        # Decrement array index.\n     \
    \   $i--;\n        # If first element is equal to last element then we can\n \
    \       # always achieve non-decreasing order by performing right shift\n    \
    \    # operation.\n        if($arr->[0] == $arr->[$len - 1]) {\n            return\
    \ 1;\n        }\n        # If the current element is greater than next element\
    \ then return\n        # false.\n        if($arr->[$i] > $arr->[$i + 1]) {\n \
    \           return \"\";\n        }\n    }\n    return 1;\n}", "    my $n = @$arr;\n\
    \    my $index = 1;\n    my $i = 0;\n    my $flag = 0;\n    while($index < $n)\
    \ {\n        if($i == $n) {\n            $i = 0;\n        }\n        if($arr->[$i]\
    \ < $arr->[$index]) {\n            $index++;\n        }\n        else {\n    \
    \        $flag = 1;\n            last;\n        }\n        $i++;\n    }\n    if($flag\
    \ == 1) {\n        return \"\";\n    }\n    else {\n        return 1;\n    }\n\
    }", "    # Input: Array of length N containing N integers.\n    # Output: '1'\
    \ or ''.\n    # Solution: Check that the min value occurs at the end of the array\
    \ or not.\n    # If it occurs at the end, the array can be made sorted by right\
    \ shifting\n    # the array.\n    # If it does not occur at the end, then the\
    \ array cannot be made sorted.\n    # Time Complexity: O(N).\n    # Space Complexity:\
    \ O(1).\n    my $min_index = 0;\n    for my $i (1 .. $#$arr) {\n        if ($arr->[$i]\
    \ < $arr->[$min_index]) {\n            $min_index = $i;\n        }\n    }\n  \
    \  return $min_index == $#$arr ? 1 : '';\n}", "    my $len = scalar @$arr;\n \
    \   if($len == 0) {\n        return 1;\n    }\n    my $change_count = 0;\n   \
    \ for(my $i = 0; $i < $len - 1; $i++) {\n        if($arr->[$i] > $arr->[$i + 1])\
    \ {\n            $change_count++;\n        }\n    }\n    if($change_count == 0\
    \ || $change_count == 1) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   # We first try to find the maximum value and the position of it. If the\n\
    \    # position of the maximum value is not equal to the last index of the array\n\
    \    # then it means that we can achieve the sorted order by performing the\n\
    \    # required number of right shift operations.\n    my $max_value = $arr->[0];\n\
    \    my $max_value_index = 0;\n    for(my $i = 1; $i < scalar(@$arr); $i++) {\n\
    \        if($arr->[$i] > $max_value) {\n            $max_value = $arr->[$i];\n\
    \            $max_value_index = $i;\n        }\n    }\n    if($max_value_index\
    \ != scalar(@$arr) - 1) {\n        return 1;\n    }\n    # If we reach here, then\
    \ it means that the maximum value of the array is at\n    # the last index of\
    \ the array. This means that we need to find the maximum\n    # value in the subarray\
    \ (0, 1, ..., $arr->[-2]). We perform the same\n    # procedure as before and\
    \ if the maximum value is not at the last index of\n    # the subarray then we\
    \ can achieve the sorted order of the array by\n    # performing the required\
    \ number of right shift operations.\n    $max_value = $arr->[0];\n    $max_value_index\
    \ = 0;\n    for(my $i = 1; $i < scalar(@$arr) - 1; $i++) {\n        if($arr->[$i]\
    \ > $max_value) {\n            $max_value = $arr->[$i];\n            $max_value_index\
    \ = $i;\n        }\n    }\n    if($max_value_index != scalar(@$arr) - 2) {\n \
    \       return 1;\n    }\n    # If we reach here, then it means that we can not\
    \ get the sorted order of\n    # the array by performing any number of right shift\
    \ operations.\n    return \"\";\n}", "    \n    # If no balls\n    return 1 if\
    \ !@$arr;\n    \n    # Move balls, then compare\n    foreach (1..$#$arr) {\n \
    \       my @balls = @$arr;\n        my $ball = splice @balls, -1, 1;\n       \
    \ splice @balls, 0, 0, $ball;\n        return 1 if \"@balls\" eq \"@$arr\";\n\
    \    }\n    return \"\";\n}", "    if(scalar(@$arr) == 0){\n        return 1;\n\
    \    }\n    my $min = min(@$arr);\n    my $index = first_index { $_ == $min }\
    \ @$arr;\n    if($index == scalar(@$arr) - 1){\n        return 1;\n    }\n   \
    \ for(my $i = $index + 1; $i < scalar(@$arr); $i++){\n        if($arr->[$i] <\
    \ $arr->[$i - 1]){\n            return '';\n        }\n    }\n    return 1;\n}",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use print\n    # Example:\n    # print \"Hello world!\\n\";\n}", "    my $count\
    \ = 0;\n    for (my $i = 0; $i < @$arr - 1; $i++) {\n        if ($arr->[$i] >\
    \ $arr->[$i + 1]) {\n            $count++;\n        }\n    }\n    if ($count >\
    \ 1) {\n        return \"\";\n    }\n    return 1;\n}", "    my $n = scalar(@$arr);\n\
    \    my $min_idx = 0;\n    my $max_idx = 0;\n    for(my $i = 1; $i < $n; $i++)\
    \ {\n        if($arr->[$i] < $arr->[$min_idx]) {\n            $min_idx = $i;\n\
    \        }\n        if($arr->[$i] > $arr->[$max_idx]) {\n            $max_idx\
    \ = $i;\n        }\n    }\n    my $output = 0;\n    if($min_idx == 0) {\n    \
    \    $output = 1;\n    } elsif($max_idx != $n - 1) {\n        $output = 1;\n \
    \   }\n    return $output;\n}", "    my $i;\n    my $temp;\n    for($i = 0; $i\
    \ <= $#{$arr}; $i++) {\n        if($arr->[$i] < $arr->[0]) {\n            $temp\
    \ = shift @{$arr};\n            push @{$arr}, $temp;\n        }\n    }\n    if\
    \ (is_sorted($arr)) {\n        return 1;\n    }\n    else {\n        return \"\
    \";\n    }\n}", "    my $length = scalar @$arr;\n    if ($length == 0){\n    \
    \    return 1;\n    }\n    if ($length == 1){\n        return 1;\n    }\n    if\
    \ ($length == 2){\n        if ($arr->[0] < $arr->[1]){\n            return 1;\n\
    \        }\n        else{\n            return \"\";\n        }\n    }\n    if\
    \ ($length == 3){\n        if (($arr->[0] < $arr->[1])&&($arr->[1] < $arr->[2])){\n\
    \            return 1;\n        }\n        if (($arr->[0] < $arr->[2])&&($arr->[2]\
    \ < $arr->[1])){\n            return 1;\n        }\n        if (($arr->[1] < $arr->[0])&&($arr->[0]\
    \ < $arr->[2])){\n            return 1;\n        }\n        if (($arr->[1] < $arr->[2])&&($arr->[2]\
    \ < $arr->[0])){\n            return 1;\n        }\n        if (($arr->[2] < $arr->[0])&&($arr->[0]\
    \ < $arr->[1])){\n            return 1;\n        }\n        if (($arr->[2] < $arr->[1])&&($arr->[1]\
    \ < $arr->[0])){\n            return 1;\n        }\n        else{\n          \
    \  return \"\";\n        }\n    }\n    my $is_sorted = 0;\n    for(my $i = 0;\
    \ $i < $length - 1; $i++){\n        if ($arr->[$i] > $arr->[$i + 1]){\n      \
    \      $is_sorted = 1;\n            last;\n        }\n    }\n    if ($is_sorted\
    \ == 0){\n        return 1;\n    }\n    my $last_value = $arr->[-1];\n    my $first_value\
    \ = $arr->[0];\n    my $ok = 1;\n    for(my $i = 1; $i < $length; $i++){\n", " \
    \   my $n = scalar(@$arr);\n    my $min = $arr->[0];\n    my $count = 0;\n   \
    \ for(my $i = 1; $i < $n; $i++) {\n        if($arr->[$i] < $min) {\n         \
    \   $count += $i;\n            $min = $arr->[$i];\n        }\n    }\n    if($count\
    \ > $n - 1) {\n        return '';\n    }\n    return 1;\n}", "    my $ans = 1;\n\
    \    for (my $i = 0; $i < @$arr - 1; $i++) {\n        if ($arr->[$i] > $arr->[$i\
    \ + 1]) {\n            $ans = '';\n            last;\n        }\n    }\n    return\
    \ $ans;\n}", "    my $N = scalar(@$arr);\n    return 1 if $N <= 1;\n    my $count\
    \ = 0;\n    for(my $i = 0; $i < $N - 1; $i++) {\n        $count++ if $arr->[$i]\
    \ > $arr->[$i + 1];\n    }\n    return $count <= 1 ? 1 : '';\n}", "    # Step1\
    \ - Find the number of shift operations required\n    my $shift_operations = _find_shift_operations($arr);\n\
    \    # Step2 - Validate if the same number of shift operations will ensure\n \
    \   # non-decreasing order\n    my $flag = _validate_shift_operations($arr, $shift_operations);\n\
    \    return $flag;\n}", "    return 1 if scalar @$arr == 0;\n    my $sorted =\
    \ [sort {$a <=> $b} @$arr];\n    my $count = 0;\n    while ($count < scalar @$arr)\
    \ {\n        if ($arr->[$count] == $sorted->[$count]) {\n            $count++;\n\
    \        } else {\n            return '';\n        }\n    }\n    return 1;\n}",
  "    my $n=scalar(@$arr);\n    if($n==0){\n        return 1;\n    }\n    for(my\
    \ $i=0;$i<$n;$i++){\n        my $j=$i+1;\n        while($j<$n){\n            if($arr->[$i]>$arr->[$j]){\n\
    \                my $k=$j+1;\n                while($k<$n){\n                \
    \    if($arr->[$i]>$arr->[$k]){\n                        return \"\";\n      \
    \              }\n                    $k++;\n                }\n             \
    \   $arr->[$i]=$arr->[$j];\n                $arr->[$j]=$arr->[$i];\n         \
    \       return 1;\n            }\n            $j++;\n        }\n    }\n    return\
    \ 1;\n}", "    \n    # Store the count of right shifts to be performed.\n    my\
    \ $count_of_right_shifts = 0;\n    \n    # Loop through the array.\n    foreach\
    \ my $i (0 .. @$arr - 1) {\n        \n        # Increment the count of right shifts\
    \ if the value at the current\n        # index is greater than the value of the\
    \ index + 1.\n        $count_of_right_shifts++ if $arr->[$i] > $arr->[$i + 1];\n\
    \    }\n    \n    # If the count of right shifts is less than 2 then return 1\
    \ else return ''.\n    return $count_of_right_shifts < 2 ? 1 : '';\n}", "    #\
    \ We write the given array in a text file in a new line.\n    my($filename) =\
    \ 'move_one_ball_tmp.txt';\n    my($tmp_fh) = write_array_to_file($arr, $filename);\n\
    \    # We call the perl script 'move_one_ball.pl' which is present in the\n  \
    \  # 'array' directory.\n    my($cmd) = \"perl $FindBin::Bin/array/move_one_ball.pl\
    \ < $filename\";\n    my($output) = qx/$cmd/;\n    # We remove the temporary file\
    \ created.\n    unlink $filename;\n    chomp $output;\n    return $output;\n}",
  "    my($i, $temp);\n    if (scalar(@$arr) <= 1) {\n        return 1;\n    }\n \
    \   for ($i = 0; $i < scalar(@$arr) - 1; $i++) {\n        if ($arr->[$i] > $arr->[$i\
    \ + 1]) {\n            $temp = $arr->[$i];\n            $arr->[$i] = $arr->[$i\
    \ + 1];\n            $arr->[$i + 1] = $temp;\n            return 1;\n        }\n\
    \    }\n    return \"\";\n}", "    my($len) = scalar(@$arr);\n    return 1 if\
    \ $len == 0;\n    my($i, $prev) = (0, $arr->[0]);\n    for($i = 1; $i < $len;\
    \ $i++) {\n        if($arr->[$i] >= $prev) {\n            $prev = $arr->[$i];\n\
    \        } else {\n            last;\n        }\n    }\n    $prev = $arr->[$len\
    \ - 1];\n    for(; $i < $len; $i++) {\n        if($arr->[$i] >= $prev) {\n   \
    \         $prev = $arr->[$i];\n        } else {\n            return \"\";\n  \
    \      }\n    }\n    return 1;\n}", "    my @sorted_arr = sort {$a <=> $b} @$arr;\n\
    \    # if the array is already sorted then return 1\n    return 1 if (is_array_equal($arr,\
    \ \\@sorted_arr));\n    # if the array is already sorted then return \"\"\n  \
    \  return \"\" if (!is_array_equal([@$arr[1..$#$arr], $arr->[0]], \\@sorted_arr));\n\
    \    return \"\";\n}", "    my @arr = @$arr;\n    if (!$arr) {\n        return\
    \ '';\n    }\n    if (!scalar @arr) {\n        return 1;\n    }\n    my @sorted\
    \ = sort {$a <=> $b} @arr;\n    for my $i (0..$#arr) {\n        my @left = @arr[0..$i-1];\n\
    \        my @right = @arr[$i..$#arr];\n        if (is_same_array(\\@left, \\@right))\
    \ {\n            return 1;\n        }\n    }\n    return '';\n}", "    my $MIN_IDX\
    \ = 0;\n    my $MAX_IDX = scalar(@$arr) - 1;\n    my $num_of_balls = $MAX_IDX\
    \ + 1;\n    my $sort_arr = sort {$a <=> $b} @$arr;\n    my $expected_prev_ball\
    \ = $MIN_IDX;\n    foreach my $actual_curr_ball ( @$arr ) {\n        if ( $expected_prev_ball\
    \ > $actual_curr_ball ) {\n            return \"\";\n        }\n        $expected_prev_ball\
    \ = $actual_curr_ball + 1;\n    }\n    return 1;\n}", "    my $N = scalar(@$arr);\n\
    \    my @aux = @$arr;\n    my $swap;\n    if ($N <= 1) {\n        return 1;\n\
    \    }\n    my $ans = 0;\n    my $start_pos = -1;\n    my $end_pos = -1;\n   \
    \ # Find the first non-ascending element from left.\n    for (my $i = 0; $i <\
    \ $N-1; $i++) {\n        if ($arr->[$i] > $arr->[$i+1]) {\n            $start_pos\
    \ = $i;\n            last;\n        }\n    }\n    # Find the first non-descending\
    \ element from right.\n    for (my $i = $N-1; $i > 0; $i--) {\n        if ($arr->[$i]\
    \ < $arr->[$i-1]) {\n            $end_pos = $i;\n            last;\n        }\n\
    \    }\n    # If both the positions are found then they should be adjacent\n \
    \   # or overlap.\n    if ($start_pos != -1 && $end_pos != -1) {\n        if ($start_pos\
    \ == $end_pos-1) {\n            # Simply check if entire array from 0 to N-1 is\
    \ sorted or not.\n            if (check_sorted_range(\\@aux, 0, $N-1)) {\n   \
    \             $ans = 1;\n            }\n        }\n        else {\n          \
    \  # Swap 'start_pos' and 'end_pos' elements.\n            $swap = $aux[$start_pos];\n\
    \            $aux[$start_pos] = $aux[$end_pos];\n            $aux[$end_pos] =\
    \ $swap;\n            # Check if the changed array is sorted or not.\n       \
    \     if (check_sorted_range(\\@aux, 0, $N-1)) {\n                $ans = 1;\n\
    \            }\n        }\n    }\n    else {\n        # Array is already sorted.\n\
    \        $ans = 1;\n    }\n    return $ans;\n}", "    # ...\n}", "    # TODO:\
    \ Your code here!\n    # Check for an empty array.\n    my $length = @$arr;\n\
    \    if ($length == 0) {\n        return 1;\n    }\n    my $temp;\n    my $count\
    \ = 0;\n    # Check for the number of elements in the array.\n    while ($count\
    \ < $length) {\n        # Check if the first element of the array is the largest.\n\
    \        if ($arr->[0] == $length) {\n            $count++;\n            # Shifting\
    \ the array by 1 element.\n            $temp = shift @$arr;\n            push\
    \ @$arr, $temp;\n        }\n        else {\n            return \"\";\n       \
    \ }\n    }\n    return 1;\n}", "    my $len = @$arr;\n    my $count = 0;\n   \
    \ my $i;\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr->[$i] != $i +\
    \ 1) {\n            if ($count) {\n                return \"\";\n            }\n\
    \            $count = 1;\n        }\n    }\n    return $count;\n}", "    my $min\
    \ = shift @$arr;\n    return 0 if ($min != $arr->[0]);\n    return 1 if (!@$arr);\n\
    \    my $i = 0;\n    while ($i < @$arr - 1) {\n        if ($arr->[$i + 1] < $arr->[$i])\
    \ {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
  "    my($arr_len) = scalar(@$arr);\n    if($arr_len == 0) {\n        return 1;\n\
    \    }\n    my($max_idx) = 0;\n    for(my($i) = 1; $i < $arr_len; $i++) {\n  \
    \      if($arr->[$i] > $arr->[$max_idx]) {\n            $max_idx = $i;\n     \
    \   }\n    }\n    if($max_idx == 0) {\n        return 1;\n    }\n    my($min_idx)\
    \ = $max_idx;\n    for(my($i) = $max_idx - 1; $i >= 0; $i--) {\n        if($arr->[$i]\
    \ > $arr->[$min_idx]) {\n            return '';\n        } else {\n          \
    \  $min_idx = $i;\n        }\n    }\n    return 1;\n}", "    my $N = scalar(@$arr);\n\
    \    my $max = 0;\n    for (my $i = 0; $i < $N; $i++) {\n        $max = ($max\
    \ > $arr->[$i]) ? $max : $arr->[$i];\n    }\n    my $imax = 0;\n    for (my $i\
    \ = 0; $i < $N; $i++) {\n        if ($arr->[$i] == $max) {\n            $imax\
    \ = $i;\n            last;\n        }\n    }\n    my $c = 0;\n    for (my $i =\
    \ 0; $i < $N; $i++) {\n        $c += ($i > $imax) ? $max : $arr->[$i];\n    }\n\
    \    return ($c <= $N * $max) ? 1 : '';\n}", "    my @sorted = sort @$arr;\n \
    \   for my $i (1..$#$arr) {\n        my $rotated = shift @$arr;\n        push\
    \ @$arr, $rotated;\n        return 1 if \"@$arr\" eq \"@sorted\";\n    }\n   \
    \ return \"\";\n}", "    # YOUR CODE HERE\n    my $len = @$arr;\n    for (my $i\
    \ = 0; $i < $len; $i++) {\n        my $tmp = $$arr[$i];\n        $$arr[$i] = $$arr[($i\
    \ + 1) % $len];\n        $$arr[($i + 1) % $len] = $tmp;\n        my $j = $i +\
    \ 1;\n        while ($j < $len) {\n            if ($$arr[$j] < $$arr[$j - 1])\
    \ {\n                my $t = $$arr[$j];\n                $$arr[$j] = $$arr[$j\
    \ - 1];\n                $$arr[$j - 1] = $t;\n            }\n            $j++;\n\
    \        }\n    }\n    for (my $i = 0; $i < $len - 1; $i++) {\n        if ($$arr[$i]\
    \ > $$arr[$i + 1]) {\n            return \"\";\n        }\n    }\n    return 1;\n\
    }", "    my @arr_copy = @$arr;\n    my $count = 0;\n    while(1) {\n        my\
    \ $temp = $arr_copy[0];\n        my $i = 0;\n        my $j = 1;\n        while($j\
    \ < scalar(@arr_copy)) {\n            if($arr_copy[$j] < $temp) {\n          \
    \      $count++;\n                $temp = $arr_copy[$j];\n                $arr_copy[$j]\
    \ = $arr_copy[$i];\n                $arr_copy[$i] = $temp;\n                $i++;\n\
    \            }\n            $j++;\n        }\n        $count++;\n        if($arr_copy[0]\
    \ == $arr->[0]) {\n            last;\n        }\n    }\n    return $count;\n}\n\
    1;", "    my $size = scalar @$arr;\n    my $count = 0;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $retval = '';\n    if($size == 0) {\n        return 1;\n   \
    \ }\n    for($i = 0; $i < $size; $i++) {\n        for($j = 0; $j < $size - 1;\
    \ $j++) {\n            if($arr->[$j] > $arr->[$j + 1]) {\n                ($arr->[$j],\
    \ $arr->[$j + 1]) = ($arr->[$j + 1], $arr->[$j]);\n                $count++;\n\
    \            }\n        }\n    }\n    if($count == 0) {\n        $retval = 1;\n\
    \    }\n    return $retval;\n}", "    my $max = -1;\n    foreach my $n (@$arr)\
    \ {\n        if ($n < $max) {\n            return '';\n        }\n        $max\
    \ = $n;\n    }\n    return 1;\n}", "    if ($#$arr == -1) {\n        return 1;\n\
    \    }", "    my($result) = '';\n    my($i) = 0;\n    my($len) = scalar(@$arr);\n\
    \    if($len == 0){\n        return 1;\n    }\n    for($i = 0; $i < $len; $i++){\n\
    \        my($elem) = $$arr[$i];\n        if($elem == $i + 1){\n            next;\n\
    \        }\n        # swap the current element with the element at the next location\n\
    \        $$arr[$i] = $$arr[$i + 1];\n        $$arr[$i + 1] = $elem;\n        $result\
    \ = 1;\n        last;\n    }\n    return $result;\n}", "    my @sorted_arr = sort\
    \ {$a <=> $b} @$arr;\n    my $is_sorted = 1;\n    my $len = scalar @$arr;\n  \
    \  for (my $i = 0; $i < $len; $i++) {\n        if ($sorted_arr[$i] != $$arr[$i])\
    \ {\n            $is_sorted = 0;\n            last;\n        }\n    }\n    if\
    \ ($is_sorted) {\n        return 1;\n    } else {\n        for (my $i = 0; $i\
    \ < $len; $i++) {\n            if ($sorted_arr[$i] != $$arr[$i]) {\n         \
    \       my $temp = $$arr[$i];\n                $$arr[$i] = $$arr[$i + 1];\n  \
    \              $$arr[$i + 1] = $temp;\n                if ($sorted_arr[$i] ==\
    \ $$arr[$i]) {\n                    return 1;\n                } else {\n    \
    \                return \"\";\n                }\n            }\n        }\n \
    \   }\n}", "    \n    my $sorted_arr = [sort {$a <=> $b} @$arr];\n    my $shifted_arr\
    \ = $arr;\n    my $status = \"\";\n    while(1) {\n        if ($sorted_arr eq\
    \ $shifted_arr) {\n            $status = 1;\n            last;\n        } else\
    \ {\n            my $last_element = pop @$shifted_arr;\n            unshift @$shifted_arr,\
    \ $last_element;\n        }\n    }\n    return $status;\n}", "    my $n = scalar(@$arr);\n\
    \    # get the smallest element\n    my $min = $arr->[0];\n    my $min_idx = 0;\n\
    \    for my $i (1..$n-1) {\n        if ($arr->[$i] < $min) {\n            $min\
    \ = $arr->[$i];\n            $min_idx = $i;\n        }\n    }\n    # check if\
    \ right shift operation is possible\n    for my $i (0..$n-1) {\n        if ($i\
    \ < $min_idx) {\n            return \"\" if $arr->[$i] > $arr->[$i+1];\n     \
    \   }\n        elsif ($i > $min_idx) {\n            return \"\" if $arr->[$i]\
    \ < $arr->[$i-1];\n        }\n    }\n    return 1;\n}\n1;", "    my $len = @$arr;\n\
    \    if($len==0) {\n        return 1;\n    }\n    my $i=0;\n    my $flag = 0;\n\
    \    while($i<$len-1) {\n        if($arr->[$i]>$arr->[$i+1]) {\n            $flag\
    \ = 1;\n            last;\n        }\n        $i++;\n    }\n    if($flag==0) {\n\
    \        return 1;\n    }\n    $i = $len-1;\n    while($i>0) {\n        if($arr->[$i]<$arr->[$i-1])\
    \ {\n            return \"\";\n        }\n        $i--;\n    }\n    my $min_index\
    \ = 0;\n    my $min = $arr->[0];\n    $i = 1;\n    while($i<$len) {\n        if($arr->[$i]<$min)\
    \ {\n            $min = $arr->[$i];\n            $min_index = $i;\n        }\n\
    \        $i++;\n    }\n    my $sorted_arr = [sort {$a<=>$b} @$arr];\n    my $j\
    \ = 0;\n    while($j<$len) {\n        if($arr->[$j]!=$sorted_arr->[$j]) {\n  \
    \          return \"\";\n        }\n        $j++;\n    }\n    my $k = 0;\n   \
    \ my $check_arr = [];\n    while($k<$len) {\n        if($k==$min_index) {\n  \
    \          push @$check_arr,$arr->[$len-1];\n        }\n        else {\n     \
    \       push @$check_arr,$arr->[$k];\n        }\n        $k++;\n    }\n    if(move_one_ball($check_arr)\
    \ eq 1) {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n\
    }\n1;", "    my $count = 0;\n    my $rearranged = 0;\n    my $all_count = 0;\n\
    \    my $one_count = 0;\n    my $diff = 0;\n    for(my $i = 1; $i <= scalar(@$arr);\
    \ $i++) {\n        $count = 0;\n        my $ele = $arr->[$i - 1];\n        if($i\
    \ != $ele) {\n            $rearranged = 1;\n            my $new_index = $i - 1;\n\
    \            my $j = $i;\n            while($arr->[$new_index] != $i) {\n    \
    \            $count++;\n                $j = $arr->[$new_index];\n           \
    \     $new_index = $j - 1;\n            }\n            $all_count += $count;\n\
    \            if($one_count == 0) {\n                $one_count = $count;\n   \
    \         }\n            else {\n                $diff = $one_count - $count;\n\
    \                if($diff != 0) {\n                    return \"\";\n        \
    \        }\n            }\n        }\n    }\n    if($rearranged == 0) {\n    \
    \    return 1;\n    }\n    if($all_count % 2 == 0) {\n        return 1;\n    }\n\
    \    else {\n        return \"\";\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
