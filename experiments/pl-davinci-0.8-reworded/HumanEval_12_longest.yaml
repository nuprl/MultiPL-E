name: HumanEval_12_longest
language: pl
prompt: "# Out of array of strings, return the longest one. Return the first one in\
  \ case of multiple\n# strings of the same length. Return undef in case the input\
  \ array is empty.\n# >>> longest([])\n# undef\n# >>> longest([\"a\", \"b\", \"c\"\
  ])\n# \"a\"\n# >>> longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\nsub longest {\n\
  \    my($strings) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n\
  \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"\
  z\"]),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
  abc\"]),\"zzzz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my $maxlen = -1;\n    my $longest = undef;\n    for my $s (@$strings)\
    \ {\n        my $len = length($s);\n        if ($len > $maxlen) {\n          \
    \  $maxlen = $len;\n            $longest = $s;\n        }\n    }\n    return $longest;\n\
    }", "    my $longest = undef;\n    for my $str (@$strings) {\n        $longest\
    \ = $str if (not defined $longest or length($str) > length($longest));\n    }\n\
    \    return $longest;\n}", "    my $max = \"\";\n    foreach my $str (@$strings)\
    \ {\n        if (length($str) > length($max)) {\n            $max = $str;\n  \
    \      }\n    }\n    return $max;\n}", "    return undef unless @$strings;\n \
    \   return reduce { length($a) > length($b) ? $a : $b } @$strings;\n}", "    my\
    \ $longest;\n    for my $string (@$strings) {\n        $longest = $string if !defined($longest)\
    \ || length($string) > length($longest);\n    }\n    return $longest;\n}", " \
    \   my $max = undef;\n    foreach my $str (@$strings) {\n        $max = $str if\
    \ (!defined($max) || length($str) > length($max));\n    }\n    return $max;\n}",
  "    my($longest, $len);\n    foreach (@$strings) {\n        my($l) = length($_);\n\
    \        if(!defined($len) || $l > $len) {\n            $len = $l;\n         \
    \   $longest = $_;\n        }\n    }\n    return $longest;\n}", "    my $longest\
    \ = undef;\n    foreach my $str (@$strings) {\n        if (!defined($longest)\
    \ || length($str) > length($longest)) {\n            $longest = $str;\n      \
    \  }\n    }\n    return $longest;\n}", "    my $l = undef;\n    for (@$strings)\
    \ {\n        if (!defined($l) || length($_) > length($l)) {\n            $l =\
    \ $_;\n        }\n    }\n    return $l;\n}", "    my $max = undef;\n    foreach\
    \ my $str (@$strings) {\n        if (!defined($max) || length($str) > length($max))\
    \ {\n            $max = $str;\n        }\n    }\n    return $max;\n}", "    my\
    \ $longest;\n    my $longest_length = 0;\n    foreach my $s (@$strings) {\n  \
    \      my $length = length($s);\n        if ($length > $longest_length) {\n  \
    \          $longest = $s;\n            $longest_length = $length;\n        }\n\
    \    }\n    return $longest;\n}", "    my $longest;\n    foreach (@$strings) {\n\
    \        $longest = $_ if not defined $longest or length($_) > length($longest);\n\
    \    }\n    return $longest;\n}", "    my $longest = undef;\n    my $longest_length\
    \ = -1;\n    for my $string (@$strings) {\n        my $length = length($string);\n\
    \        if ($length > $longest_length) {\n            $longest = $string;\n \
    \           $longest_length = $length;\n        }\n    }\n    return $longest;\n\
    }", "    if (scalar(@$strings) == 0) {\n        return undef;\n    }\n    my $longest\
    \ = $strings->[0];\n    foreach my $string (@$strings) {\n        if (length($string)\
    \ > length($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}", "    return longest_by($strings, sub {\n        my($str)\
    \ = @_;\n        return length($str);\n    });\n}", "    my $longest = 0;\n  \
    \  my $longest_index = undef;\n    my $i = 0;\n    while ($i < scalar(@$strings))\
    \ {\n        if (length($strings->[$i]) > $longest) {\n            $longest =\
    \ length($strings->[$i]);\n            $longest_index = $i;\n        }\n     \
    \   $i++;\n    }\n    return $longest_index ? $strings->[$longest_index] : undef;\n\
    }", "    return undef unless @$strings;\n    my $longest = $strings->[0];\n  \
    \  for (my $i = 1; $i < @$strings; $i++) {\n        if (length($strings->[$i])\
    \ > length($longest)) {\n            $longest = $strings->[$i];\n        }\n \
    \   }\n    return $longest;\n}", "    return undef unless @$strings;\n    my $longest\
    \ = shift @$strings;\n    for my $s (@$strings) {\n        if (length($s) > length($longest))\
    \ {\n            $longest = $s;\n        }\n    }\n    return $longest;\n}", " \
    \   my($longest_str) = undef;\n    my($longest_len) = -1;\n    foreach my $str\
    \ (@$strings) {\n        my($len) = length($str);\n        if ($len > $longest_len)\
    \ {\n            $longest_len = $len;\n            $longest_str = $str;\n    \
    \    }\n    }\n    return $longest_str;\n}", "    my $longest = undef;\n    my\
    \ $length = -1;\n    foreach my $s (@$strings) {\n        if (length($s) > $length)\
    \ {\n            $longest = $s;\n            $length = length($s);\n        }\n\
    \    }\n    return $longest;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
