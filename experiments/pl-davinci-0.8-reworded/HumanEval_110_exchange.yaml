name: HumanEval_110_exchange
language: pl
prompt: "# In this problem, you will implement a function that takes two arrays of\
  \ numbers,\n# and determines whether it is possible to perform an exchange of elements\n\
  # between them to make lst1 an array of only even numbers.\n# There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n# If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n# all the elements of\
  \ lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n\
  # >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange([1, 2, 3,\
  \ 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\n\
  sub exchange {\n    my($lst1, $lst2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\")) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4], [1, 5, 3, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"\
  YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 7, 3], [2, 6, 4]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200,\
  \ 200]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    # your code here\n    for my $num1 (@$lst1) {\n        my $flag\
    \ = 0;\n        for my $num2 (@$lst2) {\n            if (($num1 % 2 == 0) && ($num2\
    \ % 2 != 0)) {\n                $flag = 1;\n                $num1 = $num2;\n \
    \               last;\n            }\n        }\n        if ($flag == 0) {\n \
    \           return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my\
    \ $len1 = scalar @$lst1;\n    my $len2 = scalar @$lst2;\n    my $i1 = 0;\n   \
    \ my $i2 = 0;\n    while ($i1 < $len1 && $i2 < $len2) {\n        my $val1 = $lst1->[$i1];\n\
    \        my $val2 = $lst2->[$i2];\n        if ($val1 % 2 == 0) {\n           \
    \ $i1++;\n        } elsif ($val2 % 2 == 0) {\n            $lst1->[$i1] = $val2;\n\
    \            $lst2->[$i2] = $val1;\n            $i1++;\n            $i2++;\n \
    \       } else {\n            $i2++;\n        }\n    }\n    $i1 < $len1 ? \"NO\"\
    \ : \"YES\";\n}", "    my $n = scalar(@$lst1);\n    my $m = scalar(@$lst2);\n\
    \    my $odd1 = 0;\n    my $odd2 = 0;\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        if ($lst1->[$i] % 2 == 1) {\n            $odd1 += 1;\n        }\n   \
    \ }\n    for (my $i = 0; $i < $m; $i++) {\n        if ($lst2->[$i] % 2 == 1) {\n\
    \            $odd2 += 1;\n        }\n    }\n    if ($odd1 > $odd2) {\n       \
    \ return \"NO\";\n    } else {\n        return \"YES\";\n    }\n}", "    my $l1\
    \ = @$lst1;\n    my $l2 = @$lst2;\n    my $i = 0;\n    my $j = 0;\n    while ($i\
    \ < $l1) {\n        if ($lst1->[$i] % 2 == 0) {\n            $i = $i + 1;\n  \
    \      }\n        else {\n            $j = 0;\n            while ($j < $l2) {\n\
    \                if ($lst2->[$j] % 2 == 1) {\n                    $lst1->[$i]\
    \ = $lst2->[$j];\n                    $lst2->[$j] = $lst1->[$i];\n           \
    \         $i = $i + 1;\n                    $j = $l2;\n                }\n   \
    \             $j = $j + 1;\n            }\n            if ($j == $l2) {\n    \
    \            return \"NO\";\n            }\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my %odd = ();\n    my %even = ();\n    for my $i (@$lst1) {\n    \
    \    $i % 2 == 0 ? $even{$i}++ : $odd{$i}++;\n    }\n    for my $i (@$lst2) {\n\
    \        $i % 2 == 0 ? $even{$i}++ : $odd{$i}++;\n    }\n    return \"YES\" if\
    \ !keys %odd;\n    return \"NO\" if !keys %even;\n    return \"YES\";\n}", " \
    \   my @lst2_copy = @$lst2;\n    my @lst1_copy = @$lst1;\n    foreach my $i (@lst1_copy)\
    \ {\n        if ($i % 2 != 0) {\n            my $exchange = 0;\n            foreach\
    \ my $j (@lst2_copy) {\n                if ($j % 2 == 0) {\n                 \
    \   $exchange = 1;\n                    last;\n                }\n           \
    \ }\n            if ($exchange == 0) {\n                return \"NO\";\n     \
    \       }\n        }\n    }\n    return \"YES\";\n}", "    my @lst1 = @$lst1;\n\
    \    my @lst2 = @$lst2;\n    my $odd_to_even = 0;\n    for my $v (@lst1) {\n \
    \       $odd_to_even++ if $v % 2;\n    }\n    for my $v (@lst2) {\n        $odd_to_even--\
    \ if $v % 2;\n    }\n    return $odd_to_even ? \"NO\" : \"YES\";\n}", "    my\
    \ $i;\n    my $j;\n    my $num_changed = 0;\n    my $odd1 = 0;\n    my $odd2 =\
    \ 0;\n    for($i = 0; $i < scalar(@$lst1); $i++) {\n        if ($lst1->[$i] %\
    \ 2 != 0) {\n            $odd1 = 1;\n            last;\n        }\n    }\n   \
    \ for($j = 0; $j < scalar(@$lst2); $j++) {\n        if ($lst2->[$j] % 2 != 0)\
    \ {\n            $odd2 = 1;\n            last;\n        }\n    }\n    if ($odd1\
    \ == 0 && $odd2 == 0) {\n        return \"YES\";\n    }\n    if ($odd1 == 1 &&\
    \ $odd2 == 1) {\n        return \"NO\";\n    }\n    if ($odd1 == 1) {\n      \
    \  for($i = 0; $i < scalar(@$lst1); $i++) {\n            if ($lst1->[$i] % 2 !=\
    \ 0) {\n                for($j = 0; $j < scalar(@$lst2); $j++) {\n           \
    \         if ($lst2->[$j] % 2 == 0) {\n                        my $tmp = $lst1->[$i];\n\
    \                        $lst1->[$i] = $lst2->[$j];\n                        $lst2->[$j]\
    \ = $tmp;\n                        $num_changed++;\n                        return\
    \ \"YES\" if($num_changed > 1);\n                    }\n                }\n  \
    \          }\n        }\n    }\n    if ($odd2 == 1) {\n        for($j = 0; $j\
    \ < scalar(@$lst2); $j++) {\n            if ($lst2->[$j] % 2 != 0) {\n       \
    \         for($i = 0; $i < scalar(@$lst1); $i++) {\n                    if ($lst1->[$i]\
    \ % 2 == 0) {\n                        my $tmp = $lst1->[$i];\n              \
    \          $lst1->[$i] =", '    # your solution here', "    my $count = 0;\n \
    \   my $ans = \"NO\";\n    while ($count < scalar(@$lst1)) {\n        if ($lst1->[$count]\
    \ % 2 == 1) {\n            foreach my $element (@$lst2) {\n                if\
    \ ($element % 2 == 0) {\n                    $lst1->[$count] = $element;\n   \
    \                 $ans = \"YES\";\n                    last;\n               \
    \ }\n            }\n        }\n        $count++;\n    }\n    return $ans;\n}",
  "    my @odds = grep {$_ % 2} @$lst1;\n    my @evens = grep {$_ % 2 == 0} @$lst2;\n\
    \    for my $odd (@odds) {\n        for my $even (@evens) {\n            return\
    \ \"YES\" if (($odd - $even) % 2 == 0);\n        }\n    }\n    return \"NO\";\n\
    }", "    my $count1 = 0;\n    my $count2 = 0;\n    for my $i (0..$#$lst1) {\n\
    \        $count1++ if $lst1->[$i] % 2 == 0;\n    }\n    for my $i (0..$#$lst2)\
    \ {\n        $count2++ if $lst2->[$i] % 2 == 1;\n    }\n    return \"YES\" if\
    \ $count1 == $count2;\n    return \"NO\";\n}", "    my @lst1 = @$lst1;\n    my\
    \ @lst2 = @$lst2;\n    my $sum_lst1 = sum_of_list(\\@lst1);\n    my $sum_lst2\
    \ = sum_of_list(\\@lst2);\n    my $pairs = sub { ($sum_lst1 + $sum_lst2) % 2 ==\
    \ 0 };\n    return \"$pairs\";\n}", "    # your code here\n    return \"NO\";\n\
    }", "    # your code goes here\n    foreach my $item (@$lst1) {\n    \tunless\
    \ ($item % 2 == 0) {\n    \t\tforeach my $item2 (@$lst2) {\n    \t\t\tif ($item2\
    \ % 2 == 0) {\n    \t\t\t\t$item = $item2;\n    \t\t\t\tlast;\n    \t\t\t}\n \
    \   \t\t}\n    \t}\n    }\n    my $result = 0;\n    foreach my $item (@$lst1)\
    \ {\n    \tif ($item % 2 == 0) {\n    \t\t$result += 1;\n    \t}\n    }\n    return\
    \ $result == scalar(@$lst1) ? \"YES\" : \"NO\";\n}", "    my %hash;\n    foreach\
    \ my $i (0..@$lst1-1) {\n        $hash{$lst1->[$i]} = $i if ($lst1->[$i] % 2 ==\
    \ 1);\n    }\n    foreach my $j (0..@$lst2-1) {\n        if ($lst2->[$j] % 2 ==\
    \ 0) {\n            foreach my $key (keys %hash) {\n                my $tmp =\
    \ $lst1->[$hash{$key}];\n                $lst1->[$hash{$key}] = $lst2->[$j];\n\
    \                $lst2->[$j] = $tmp;\n                delete $hash{$key};\n  \
    \              last;\n            }\n        }\n    }\n    return scalar(keys\
    \ %hash) == 0 ? \"YES\" : \"NO\";\n}\nmy @lst1 = (1, 2, 3, 4);\nmy @lst2 = (1,\
    \ 2, 3, 4);\nexchange(\\@lst1, \\@lst2);", "    my($odds) = 0;\n    for my $x\
    \ (@$lst1) {\n        if ($x % 2) {\n            $odds += 1;\n        }\n    }\n\
    \    for my $x (@$lst2) {\n        if ($x % 2) {\n            $odds -= 1;\n  \
    \      }\n    }\n    if ($odds == 0) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my($len1, $len2) = (scalar(@$lst1), scalar(@$lst2));\n\
    \    my($i, $j);\n    my(@lst2) = @$lst2;", "    my $e = 0;\n    my $o = 0;\n\
    \    my $cnt1 = 0;\n    my $cnt2 = 0;\n    # Check the input and return NO if\
    \ there is no odd number in $lst2\n    for (my $i = 0; $i < scalar(@$lst1); $i++)\
    \ {\n        if ($lst1->[$i] % 2 == 0) {\n            $e++;\n        } else {\n\
    \            $o++;\n        }\n    }\n    for (my $i = 0; $i < scalar(@$lst2);\
    \ $i++) {\n        if ($lst2->[$i] % 2 == 0) {\n            $cnt1++;\n       \
    \ } else {\n            $cnt2++;\n        }\n    }\n    return \"NO\" if ($o ==\
    \ 0 or $cnt2 == 0);\n    # Make all the elements of $lst1 even\n    for (my $i\
    \ = 0; $i < scalar(@$lst1); $i++) {\n        if ($lst1->[$i] % 2 == 1) {\n   \
    \         for (my $j = 0; $j < scalar(@$lst2); $j++) {\n                if ($lst2->[$j]\
    \ % 2 == 1) {\n                    $lst1->[$i] = $lst2->[$j];\n              \
    \      $lst2->[$j] = $lst1->[$i];\n                    last;\n               \
    \ }\n            }\n        }\n    }\n    return \"YES\";\n}", "    my $exchange_count\
    \ = 0;\n    foreach my $e (@$lst1) {\n        if ($e % 2 == 1) {\n           \
    \ ++$exchange_count;\n        }\n    }\n    my $check_count = 0;\n    foreach\
    \ my $e (@$lst2) {\n        if ($e % 2 == 1) {\n            ++$check_count;\n\
    \        }\n    }\n    if ($exchange_count > $check_count) {\n        return \"\
    NO\";\n    }\n    else {\n        return \"YES\";\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
