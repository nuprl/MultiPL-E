name: HumanEval_110_exchange
language: pl
prompt: "# In this problem, you will implement a function that takes two arrays of\
  \ numbers,\n# and determines whether it is possible to perform an exchange of elements\n\
  # between them to make lst1 an array of only even numbers.\n# There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n# If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n# all the elements of\
  \ lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n\
  # >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange([1, 2, 3,\
  \ 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\n\
  sub exchange {\n    my($lst1, $lst2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&exchange;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\")) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4], [1, 5, 3, 4]),\"NO\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [2, 1, 4, 3]),\"\
  YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 7, 3], [2, 6, 4]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([5, 7, 3], [2, 6, 3]),\"NO\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 200], [200,\
  \ 200]),\"YES\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    # your code here\n    for my $num1 (@$lst1) {\n        my $flag\
    \ = 0;\n        for my $num2 (@$lst2) {\n            if (($num1 % 2 == 0) && ($num2\
    \ % 2 != 0)) {\n                $flag = 1;\n                $num1 = $num2;\n \
    \               last;\n            }\n        }\n        if ($flag == 0) {\n \
    \           return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my\
    \ $len1 = scalar @$lst1;\n    my $len2 = scalar @$lst2;\n    my $i1 = 0;\n   \
    \ my $i2 = 0;\n    while ($i1 < $len1 && $i2 < $len2) {\n        my $val1 = $lst1->[$i1];\n\
    \        my $val2 = $lst2->[$i2];\n        if ($val1 % 2 == 0) {\n           \
    \ $i1++;\n        } elsif ($val2 % 2 == 0) {\n            $lst1->[$i1] = $val2;\n\
    \            $lst2->[$i2] = $val1;\n            $i1++;\n            $i2++;\n \
    \       } else {\n            $i2++;\n        }\n    }\n    $i1 < $len1 ? \"NO\"\
    \ : \"YES\";\n}", "    my $n = scalar(@$lst1);\n    my $m = scalar(@$lst2);\n\
    \    my $odd1 = 0;\n    my $odd2 = 0;\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        if ($lst1->[$i] % 2 == 1) {\n            $odd1 += 1;\n        }\n   \
    \ }\n    for (my $i = 0; $i < $m; $i++) {\n        if ($lst2->[$i] % 2 == 1) {\n\
    \            $odd2 += 1;\n        }\n    }\n    if ($odd1 > $odd2) {\n       \
    \ return \"NO\";\n    } else {\n        return \"YES\";\n    }\n}", "    my $l1\
    \ = @$lst1;\n    my $l2 = @$lst2;\n    my $i = 0;\n    my $j = 0;\n    while ($i\
    \ < $l1) {\n        if ($lst1->[$i] % 2 == 0) {\n            $i = $i + 1;\n  \
    \      }\n        else {\n            $j = 0;\n            while ($j < $l2) {\n\
    \                if ($lst2->[$j] % 2 == 1) {\n                    $lst1->[$i]\
    \ = $lst2->[$j];\n                    $lst2->[$j] = $lst1->[$i];\n           \
    \         $i = $i + 1;\n                    $j = $l2;\n                }\n   \
    \             $j = $j + 1;\n            }\n            if ($j == $l2) {\n    \
    \            return \"NO\";\n            }\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my %odd = ();\n    my %even = ();\n    for my $i (@$lst1) {\n    \
    \    $i % 2 == 0 ? $even{$i}++ : $odd{$i}++;\n    }\n    for my $i (@$lst2) {\n\
    \        $i % 2 == 0 ? $even{$i}++ : $odd{$i}++;\n    }\n    return \"YES\" if\
    \ !keys %odd;\n    return \"NO\" if !keys %even;\n    return \"YES\";\n}", " \
    \   my @lst2_copy = @$lst2;\n    my @lst1_copy = @$lst1;\n    foreach my $i (@lst1_copy)\
    \ {\n        if ($i % 2 != 0) {\n            my $exchange = 0;\n            foreach\
    \ my $j (@lst2_copy) {\n                if ($j % 2 == 0) {\n                 \
    \   $exchange = 1;\n                    last;\n                }\n           \
    \ }\n            if ($exchange == 0) {\n                return \"NO\";\n     \
    \       }\n        }\n    }\n    return \"YES\";\n}", "    my @lst1 = @$lst1;\n\
    \    my @lst2 = @$lst2;\n    my $odd_to_even = 0;\n    for my $v (@lst1) {\n \
    \       $odd_to_even++ if $v % 2;\n    }\n    for my $v (@lst2) {\n        $odd_to_even--\
    \ if $v % 2;\n    }\n    return $odd_to_even ? \"NO\" : \"YES\";\n}", "    my\
    \ $i;\n    my $j;\n    my $num_changed = 0;\n    my $odd1 = 0;\n    my $odd2 =\
    \ 0;\n    for($i = 0; $i < scalar(@$lst1); $i++) {\n        if ($lst1->[$i] %\
    \ 2 != 0) {\n            $odd1 = 1;\n            last;\n        }\n    }\n   \
    \ for($j = 0; $j < scalar(@$lst2); $j++) {\n        if ($lst2->[$j] % 2 != 0)\
    \ {\n            $odd2 = 1;\n            last;\n        }\n    }\n    if ($odd1\
    \ == 0 && $odd2 == 0) {\n        return \"YES\";\n    }\n    if ($odd1 == 1 &&\
    \ $odd2 == 1) {\n        return \"NO\";\n    }\n    if ($odd1 == 1) {\n      \
    \  for($i = 0; $i < scalar(@$lst1); $i++) {\n            if ($lst1->[$i] % 2 !=\
    \ 0) {\n                for($j = 0; $j < scalar(@$lst2); $j++) {\n           \
    \         if ($lst2->[$j] % 2 == 0) {\n                        my $tmp = $lst1->[$i];\n\
    \                        $lst1->[$i] = $lst2->[$j];\n                        $lst2->[$j]\
    \ = $tmp;\n                        $num_changed++;\n                        return\
    \ \"YES\" if($num_changed > 1);\n                    }\n                }\n  \
    \          }\n        }\n    }\n    if ($odd2 == 1) {\n        for($j = 0; $j\
    \ < scalar(@$lst2); $j++) {\n            if ($lst2->[$j] % 2 != 0) {\n       \
    \         for($i = 0; $i < scalar(@$lst1); $i++) {\n                    if ($lst1->[$i]\
    \ % 2 == 0) {\n                        my $tmp = $lst1->[$i];\n              \
    \          $lst1->[$i] =", '    # your solution here', "    my $count = 0;\n \
    \   my $ans = \"NO\";\n    while ($count < scalar(@$lst1)) {\n        if ($lst1->[$count]\
    \ % 2 == 1) {\n            foreach my $element (@$lst2) {\n                if\
    \ ($element % 2 == 0) {\n                    $lst1->[$count] = $element;\n   \
    \                 $ans = \"YES\";\n                    last;\n               \
    \ }\n            }\n        }\n        $count++;\n    }\n    return $ans;\n}",
  "    my @odds = grep {$_ % 2} @$lst1;\n    my @evens = grep {$_ % 2 == 0} @$lst2;\n\
    \    for my $odd (@odds) {\n        for my $even (@evens) {\n            return\
    \ \"YES\" if (($odd - $even) % 2 == 0);\n        }\n    }\n    return \"NO\";\n\
    }", "    my $count1 = 0;\n    my $count2 = 0;\n    for my $i (0..$#$lst1) {\n\
    \        $count1++ if $lst1->[$i] % 2 == 0;\n    }\n    for my $i (0..$#$lst2)\
    \ {\n        $count2++ if $lst2->[$i] % 2 == 1;\n    }\n    return \"YES\" if\
    \ $count1 == $count2;\n    return \"NO\";\n}", "    my @lst1 = @$lst1;\n    my\
    \ @lst2 = @$lst2;\n    my $sum_lst1 = sum_of_list(\\@lst1);\n    my $sum_lst2\
    \ = sum_of_list(\\@lst2);\n    my $pairs = sub { ($sum_lst1 + $sum_lst2) % 2 ==\
    \ 0 };\n    return \"$pairs\";\n}", "    # your code here\n    return \"NO\";\n\
    }", "    # your code goes here\n    foreach my $item (@$lst1) {\n    \tunless\
    \ ($item % 2 == 0) {\n    \t\tforeach my $item2 (@$lst2) {\n    \t\t\tif ($item2\
    \ % 2 == 0) {\n    \t\t\t\t$item = $item2;\n    \t\t\t\tlast;\n    \t\t\t}\n \
    \   \t\t}\n    \t}\n    }\n    my $result = 0;\n    foreach my $item (@$lst1)\
    \ {\n    \tif ($item % 2 == 0) {\n    \t\t$result += 1;\n    \t}\n    }\n    return\
    \ $result == scalar(@$lst1) ? \"YES\" : \"NO\";\n}", "    my %hash;\n    foreach\
    \ my $i (0..@$lst1-1) {\n        $hash{$lst1->[$i]} = $i if ($lst1->[$i] % 2 ==\
    \ 1);\n    }\n    foreach my $j (0..@$lst2-1) {\n        if ($lst2->[$j] % 2 ==\
    \ 0) {\n            foreach my $key (keys %hash) {\n                my $tmp =\
    \ $lst1->[$hash{$key}];\n                $lst1->[$hash{$key}] = $lst2->[$j];\n\
    \                $lst2->[$j] = $tmp;\n                delete $hash{$key};\n  \
    \              last;\n            }\n        }\n    }\n    return scalar(keys\
    \ %hash) == 0 ? \"YES\" : \"NO\";\n}\nmy @lst1 = (1, 2, 3, 4);\nmy @lst2 = (1,\
    \ 2, 3, 4);\nexchange(\\@lst1, \\@lst2);", "    my($odds) = 0;\n    for my $x\
    \ (@$lst1) {\n        if ($x % 2) {\n            $odds += 1;\n        }\n    }\n\
    \    for my $x (@$lst2) {\n        if ($x % 2) {\n            $odds -= 1;\n  \
    \      }\n    }\n    if ($odds == 0) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my($len1, $len2) = (scalar(@$lst1), scalar(@$lst2));\n\
    \    my($i, $j);\n    my(@lst2) = @$lst2;", "    my $e = 0;\n    my $o = 0;\n\
    \    my $cnt1 = 0;\n    my $cnt2 = 0;\n    # Check the input and return NO if\
    \ there is no odd number in $lst2\n    for (my $i = 0; $i < scalar(@$lst1); $i++)\
    \ {\n        if ($lst1->[$i] % 2 == 0) {\n            $e++;\n        } else {\n\
    \            $o++;\n        }\n    }\n    for (my $i = 0; $i < scalar(@$lst2);\
    \ $i++) {\n        if ($lst2->[$i] % 2 == 0) {\n            $cnt1++;\n       \
    \ } else {\n            $cnt2++;\n        }\n    }\n    return \"NO\" if ($o ==\
    \ 0 or $cnt2 == 0);\n    # Make all the elements of $lst1 even\n    for (my $i\
    \ = 0; $i < scalar(@$lst1); $i++) {\n        if ($lst1->[$i] % 2 == 1) {\n   \
    \         for (my $j = 0; $j < scalar(@$lst2); $j++) {\n                if ($lst2->[$j]\
    \ % 2 == 1) {\n                    $lst1->[$i] = $lst2->[$j];\n              \
    \      $lst2->[$j] = $lst1->[$i];\n                    last;\n               \
    \ }\n            }\n        }\n    }\n    return \"YES\";\n}", "    my $exchange_count\
    \ = 0;\n    foreach my $e (@$lst1) {\n        if ($e % 2 == 1) {\n           \
    \ ++$exchange_count;\n        }\n    }\n    my $check_count = 0;\n    foreach\
    \ my $e (@$lst2) {\n        if ($e % 2 == 1) {\n            ++$check_count;\n\
    \        }\n    }\n    if ($exchange_count > $check_count) {\n        return \"\
    NO\";\n    }\n    else {\n        return \"YES\";\n    }\n}", "    # If any member\
    \ of lst1 is even, return \"YES\"\n    if (any { $_ % 2 == 0 } @$lst1) {\n   \
    \     return \"YES\";\n    }\n    # If any member of lst2 is odd, return \"NO\"\
    \n    if (any { $_ % 2 == 1 } @$lst2) {\n        return \"NO\";\n    }\n    #\
    \ If any member of lst2 is even, then it is possible to exchange\n    # elements\
    \ between lst1 and lst2 to make all the elements of lst1 to be even.\n    if (any\
    \ { $_ % 2 == 0 } @$lst2) {\n        return \"YES\";\n    }\n    # Otherwise,\
    \ return \"NO\"\n    return \"NO\";\n}", "    return \"YES\" if(all_even($lst1));\n\
    \    return \"NO\" if(all_odd($lst1));\n    my $size = @$lst1;\n    for(my $i\
    \ = 0; $i < $size; $i++) {\n        for(my $j = 0; $j < $size; $j++) {\n     \
    \       my $temp = $lst1->[$i];\n            $lst1->[$i] = $lst2->[$j];\n    \
    \        $lst2->[$j] = $temp;\n            return \"YES\" if(all_even($lst1));\n\
    \            $temp = $lst1->[$i];\n            $lst1->[$i] = $lst2->[$j];\n  \
    \          $lst2->[$j] = $temp;\n        }\n    }\n    return \"NO\";\n}", " \
    \   my $lst3 = [@$lst1, @$lst2];\n    if (any {$_ % 2} @$lst3) {\n        return\
    \ \"NO\";\n    }\n    else {\n        return \"YES\";\n    }\n}", "    my @lst1\
    \ = @$lst1;\n    my @lst2 = @$lst2;\n    my $original_sum = eval join '+', @lst1;\n\
    \    my $new_sum = eval join '+', map { $_%2 ? $_+1 : $_ } @lst1;\n    if ($new_sum\
    \ > $original_sum) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
  "    my $result = \"NO\";\n    my $odd_cnt = 0;\n    my $even_cnt = 0;\n    foreach\
    \ my $i (@$lst1) {\n        if($i % 2) {\n            $odd_cnt++;\n        } else\
    \ {\n            $even_cnt++;\n        }\n    }\n    my $cnt = 0;\n    foreach\
    \ my $i (@$lst2) {\n        if($i % 2) {\n            $cnt++;\n        }\n   \
    \ }\n    if($cnt >= $odd_cnt) {\n        $result = \"YES\";\n    }\n    return\
    \ $result;\n}", "    return 'YES' if !grep{$_ % 2} @$lst1;\n    for my $i (0..scalar(@$lst1)-1){\n\
    \        next if $lst1->[$i] % 2;\n        return 'YES' if grep{$_ % 2 == 0} @$lst2;\n\
    \    }\n    return 'NO';\n}", "    my $odds = 0;\n    my $evens = 0;\n    foreach\
    \ my $x (@$lst1) {\n        if ($x % 2 == 0) {\n            $evens++;\n      \
    \  } else {\n            $odds++;\n        }\n    }\n    foreach my $x (@$lst2)\
    \ {\n        if ($x % 2 == 0) {\n            $evens++;\n        } else {\n   \
    \         $odds++;\n        }\n    }\n    return $odds % 2 == 0 ? \"YES\" : \"\
    NO\";\n}", "    my($pair, $value) = ([],[]);\n    for my $i (0..$#$lst1) {\n \
    \       if ($lst1->[$i] % 2 == 0) {\n            push @$pair, [$i, $lst1->[$i]];\n\
    \        } else {\n            push @$value, [$i, $lst1->[$i]];\n        }\n \
    \   }\n    for my $i (0..$#$lst2) {\n        if ($lst2->[$i] % 2 == 0) {\n   \
    \         push @$pair, [$i, $lst2->[$i]];\n        } else {\n            push\
    \ @$value, [$i, $lst2->[$i]];\n        }\n    }\n    while (@$pair && @$value)\
    \ {\n        my $x = shift @$pair;\n        my $y = shift @$value;\n        if\
    \ ($x->[1] > $y->[1]) {\n            $lst1->[$x->[0]] = $y->[1];\n           \
    \ $lst2->[$y->[0]] = $x->[1];\n        } else {\n            $lst1->[$x->[0]]\
    \ = $x->[1];\n            $lst2->[$y->[0]] = $y->[1];\n        }\n    }\n    for\
    \ my $x (@$lst1) {\n        return \"NO\" if $x % 2 == 1;\n    }\n    return \"\
    YES\";\n}", "    # your code here\n    my @array = split(/ /, $lst1);\n    my\
    \ @array2 = split(/ /, $lst2);\n    my $counter = 0;\n    my $counter1 = 0;\n\
    \    my $num1 = 0;\n    my $num2 = 0;\n    my $combo1 = 0;\n    my $combo2 = 0;\n\
    \    my $combo3 = 0;\n    my $combo4 = 0;\n    my $combo5 = 0;\n    my $combo6\
    \ = 0;\n    my $combo7 = 0;\n    my $combo8 = 0;\n    my $combo9 = 0;\n    my\
    \ $combo10 = 0;\n    my $combo11 = 0;\n    my $combo12 = 0;\n    my $combo13 =\
    \ 0;\n    my $combo14 = 0;\n    my $combo15 = 0;\n    my $combo16 = 0;\n    my\
    \ $combo17 = 0;\n    my $combo18 = 0;\n    my $combo19 = 0;\n    my $combo20 =\
    \ 0;\n    my $combo21 = 0;\n    my $combo22 = 0;\n    my $combo23 = 0;\n    my\
    \ $combo24 = 0;\n    my $combo25 = 0;\n    my $combo26 = 0;\n    my $combo27 =\
    \ 0;\n    my $combo28 = 0;\n    my $combo29 = 0;\n    my $combo30 = 0;\n    my\
    \ $combo31 = 0;\n    my $combo32 = 0;\n    my $combo33 = 0;\n    my $combo34 =\
    \ 0;\n    my $combo35 = 0;\n    my $combo36 = 0;\n    my $combo37 = 0;\n    my\
    \ $combo38 = 0;\n    my $combo39 = 0;\n    my $combo40 = 0;\n    my $combo41 =\
    \ 0;\n    my $combo42 = 0;\n    my $combo43 = 0;\n    my $combo44 =", "    my\
    \ @odds = grep { $_ % 2 } @$lst1;\n    my @evens = grep { $_ % 2 == 0 } @$lst2;\n\
    \    return @odds == @evens ? \"YES\" : \"NO\";\n}", "    # your code here\n}",
  "    foreach my $i (@$lst1) {\n        if ($i % 2 == 1) {\n            my $j = 0;\n\
    \            my $idx = -1;\n            for (@$lst2) {\n                if ($_\
    \ % 2 == 0) {\n                    $idx = $j;\n                    last;\n   \
    \             }\n                $j++;\n            }\n            if ($idx !=\
    \ -1) {\n                $lst1->[$i] = $lst2->[$idx];\n                $lst2->[$idx]\
    \ = $i;\n            } else {\n                return \"NO\";\n            }\n\
    \        }\n    }\n    return \"YES\";\n}", "    my @lst1 = @$lst1;\n    my @lst2\
    \ = @$lst2;\n    my $answer = \"NO\";\n    my $len = @lst1;\n    my @new_lst1\
    \ = @lst1;\n    my @new_lst2 = @lst2;\n    for my $i (0..$len-1) {\n        if\
    \ ($lst1[$i] % 2 != 0) {\n            for my $j (0..$len-1) {\n              \
    \  if ($lst2[$j] % 2 != 0) {\n                    $new_lst1[$i] = $lst2[$j];\n\
    \                    $new_lst2[$j] = $lst1[$i];\n                    for my $k\
    \ (0..$len-1) {\n                        if ($new_lst1[$k] % 2 != 0) {\n     \
    \                       $answer = \"NO\";\n                            last;\n\
    \                        }\n                        else {\n                 \
    \           $answer = \"YES\";\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return $answer;\n\
    }", "    my $contains_odd = sub {\n        my ($lst) = @_;\n        for my $n\
    \ (@$lst) {\n            return 1 if $n % 2;\n        }\n        return 0;\n \
    \   };\n    my $lst1_odd = $contains_odd->($lst1);\n    my $lst2_odd = $contains_odd->($lst2);\n\
    \    return \"YES\" if !$lst1_odd and !$lst2_odd;\n    return \"NO\" if $lst1_odd\
    \ and $lst2_odd;\n    return \"YES\";\n}", "    my $even_in_lst1 = grep { $_ %\
    \ 2 == 0 } @$lst1;\n    my $odd_in_lst2 = grep { $_ % 2 != 0 } @$lst2;\n    $even_in_lst1\
    \ == $odd_in_lst2 ? \"YES\" : \"NO\";\n}", "    my @lst1 = @$lst1;\n    my @lst2\
    \ = @$lst2;\n    my $number_of_odd_in_lst1 = 0;\n    for my $i (0..$#lst1) {\n\
    \        $number_of_odd_in_lst1++ if $lst1[$i] % 2;\n    }\n    for my $i (0..$#lst2)\
    \ {\n        $number_of_odd_in_lst1-- if $lst2[$i] % 2;\n    }\n    return 'YES'\
    \ if $number_of_odd_in_lst1 == 0;\n    return 'NO';\n}", "    my $lst3 = [];\n\
    \    my $lst4 = [];\n    my $len1 = scalar @$lst1;\n    my $len2 = scalar @$lst2;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $m = 0;\n    for ($i =\
    \ 0; $i < $len1; $i++) {\n        if (@$lst1[$i] % 2 == 0) {\n            @$lst3[$k]\
    \ = @$lst1[$i];\n            $k++;\n        }\n    }\n    for ($j = 0; $j < $len2;\
    \ $j++) {\n        if (@$lst2[$j] % 2 == 1) {\n            @$lst4[$m] = @$lst2[$j];\n\
    \            $m++;\n        }\n    }\n    if ((scalar @$lst3) + (scalar @$lst4)\
    \ == $len1) {\n        return \"YES\";\n    }\n    else {\n        return \"NO\"\
    ;\n    }\n}", "    my $ans = \"NO\";\n    # Your code here\n    my $count = 0;\n\
    \    my $count2 = 0;\n    foreach my $num (@$lst1) {\n        if ($num % 2 ==\
    \ 0) {\n            $count++;\n        }\n    }\n    foreach my $num (@$lst2)\
    \ {\n        if ($num % 2 == 1) {\n            $count2++;\n        }\n    }\n\
    \    if ($count + $count2 == @$lst1) {\n        $ans = \"YES\";\n    }\n    return\
    \ $ans;\n}", "    #YOUR CODE HERE\n    my $num_evens = grep {$_ % 2 == 0} @$lst1;\n\
    \    if ($num_evens == @$lst1) {\n        return \"YES\";\n    }\n    my $num_odds\
    \ = grep {$_ % 2 == 1} @$lst2;\n    if ($num_odds + $num_evens >= @$lst1) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}", "    for my $i (0..$#$lst1)\
    \ {\n        return \"YES\" if $lst1->[$i] % 2 == 0;\n        return \"YES\" if\
    \ $lst2->[$i] % 2 == 0;\n    }\n    return \"NO\";\n}", "    my $exchange = 0;\n\
    \    for my $i (@$lst1) {\n        if ($i % 2 == 1) {\n            $exchange =\
    \ 1;\n            for my $j (@$lst2) {\n                if ($j % 2 == 0) {\n \
    \                   $exchange = 0;\n                    last;\n              \
    \  }\n            }\n        }\n    }\n    if ($exchange) {\n        return \"\
    YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my $count = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    for ($i = 0; $i < scalar(@$lst1); $i++){\n\
    \        if ($lst1->[$i] % 2 == 0){\n            $count++;\n        }\n    }\n\
    \    for ($j = 0; $j < scalar(@$lst2); $j++){\n        if ($lst2->[$j] % 2 ==\
    \ 0){\n            $count++;\n        }\n    }\n    if ($count == scalar(@$lst1)){\n\
    \        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}",
  "    return \"YES\" if is_all_even($lst1);\n    my $result = \"NO\";\n    for my\
    \ $num (@$lst1) {\n        for my $i (0 .. $#$lst2) {\n            my $new = clone($lst1);\n\
    \            $new->[$num] = $lst2->[$i];\n            return \"YES\" if is_all_even($new);\n\
    \        }\n    }\n    return $result;\n}", "    my %hash;\n    my @lst = @$lst1;\n\
    \    foreach my $i (@lst) {\n        $hash{$i} = 1;\n    }\n    foreach my $j\
    \ (@$lst2) {\n        if (exists $hash{$j}) {\n            delete $hash{$j};\n\
    \        }\n    }\n    my @lst_test = keys %hash;\n    if (scalar @lst_test ==\
    \ 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n\
    }", "    if(join(\"\", @$lst1) =~ /[13579]/){\n        return \"NO\";\n    }\n\
    \    else{\n        return \"YES\";\n    }\n}", "    my $answer = \"NO\";\n  \
    \  foreach my $i (@$lst1) {\n        if ($i % 2 == 1) {\n            foreach my\
    \ $j (@$lst2) {\n                if ($j % 2 == 0) {\n                    $answer\
    \ = \"YES\";\n                    last;\n                }\n            }\n  \
    \      }\n    }\n    return $answer;\n}", "    if(grep(!($_ % 2), @$lst1)) {\n\
    \        # Not all of lst1 is even\n        if(!(grep(!($_ % 2), @$lst2))) {\n\
    \            # All of lst2 is even\n            return \"NO\";\n        } else\
    \ {\n            # Not all of lst2 is even\n            return \"YES\";\n    \
    \    }\n    } else {\n        # All of lst1 is even\n        return \"YES\";\n\
    \    }\n}", "    # TODO Write your code here.\n}", "    my $evens = scalar(grep\
    \ $_ % 2 == 0, @$lst1);\n    my $odds = scalar(grep $_ % 2 != 0, @$lst1);\n  \
    \  my $total = scalar(@$lst1);\n    return $evens == $total || $odds == $total\
    \ ? \"YES\" : \"NO\";\n}", "    my $count = 0;\n    foreach my $item (@$lst1)\
    \ {\n        if ($item % 2 == 1) {\n            $count++;\n        }\n    }\n\
    \    my $lst2_count = 0;\n    foreach my $item (@$lst2) {\n        if ($item %\
    \ 2 == 0) {\n            $lst2_count++;\n        }\n    }\n    if ($count == $lst2_count)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\
    print \"$result\\n\";\nprint exchange([1, 2, 3, 4], [1, 2, 3, 4]);\nprint \"\\\
    n\";\nprint exchange([1, 2, 3, 4], [1, 5, 3, 4]);\nprint \"\\n\";\nprint exchange([2,\
    \ 3, 4], [5, 6, 7]);\nprint \"\\n\";\nprint exchange([1, 2, 3, 4], [5, 6, 7, 8]);\n\
    print \"\\n\";", "    my($odd_lst1, $odd_lst2, $even_lst1, $even_lst2) = ([],\
    \ [], [], []);\n    my $res = 'NO';\n    for my $i (0..$#$lst1) {\n        if\
    \ ($lst1->[$i] % 2) {\n            push @$odd_lst1, $lst1->[$i];\n        } else\
    \ {\n            push @$even_lst1, $lst1->[$i];\n        }\n    }\n    for my\
    \ $i (0..$#$lst2) {\n        if ($lst2->[$i] % 2) {\n            push @$odd_lst2,\
    \ $lst2->[$i];\n        } else {\n            push @$even_lst2, $lst2->[$i];\n\
    \        }\n    }\n    if (scalar(@$odd_lst1) == scalar(@$even_lst2)) {\n    \
    \    $res = 'YES';\n    } elsif (scalar(@$odd_lst2) == scalar(@$even_lst1)) {\n\
    \        $res = 'YES';\n    }\n    return $res;\n}", "    my %hash1 = map { $_\
    \ => 1 } @$lst1;\n    my %hash2 = map { $_ => 1 } @$lst2;\n    my @even_list =\
    \ grep{ $_ % 2 == 0 } keys %hash1;\n    my $odd_list = join('', grep{ $_ % 2 ==\
    \ 1 } keys %hash2);\n    my $even_list = join('', @even_list);\n    while ($even_list)\
    \ {\n        last if $odd_list !~ /$even_list/;\n        my $digit = chop $even_list;\n\
    \        $odd_list =~ s/$digit//;\n    }\n    if ($even_list) {\n        return\
    \ \"NO\";\n    } else {\n        return \"YES\";\n    }\n}", "    my $lst1_copy\
    \ = [@$lst1];\n    my $lst2_copy = [@$lst2];\n    $lst1_copy = make_lst_even($lst1_copy,\
    \ $lst2_copy);\n    return \"YES\" if (all_even($lst1_copy));\n    return \"NO\"\
    ;\n}", "    my %lst2_hash = map { $_ => 1 } @$lst2;\n    my $exchanged = 0;\n\
    \    for my $e (@$lst1) {\n        if ($e % 2) {\n            if (exists $lst2_hash{$e\
    \ - 1}) {\n                $exchanged++;\n                $lst2_hash{$e - 1} =\
    \ 0;\n            } elsif (exists $lst2_hash{$e + 1}) {\n                $exchanged++;\n\
    \                $lst2_hash{$e + 1} = 0;\n            }\n        }\n    }\n  \
    \  return $exchanged ? \"YES\" : \"NO\";\n}", "    my $exchange = 0;\n    foreach\
    \ my $num (@$lst1) {\n        if ($num % 2 == 1) {\n            foreach my $num2\
    \ (@$lst2) {\n                if ($num2 % 2 == 0) {\n                    $exchange\
    \ = 1;\n                    last;\n                }\n            }\n        }\n\
    \    }\n    if ($exchange == 1) {\n        return \"YES\";\n    } else {\n   \
    \     return \"NO\";\n    }\n}", "    my $result = 'NO';\n    my $total = scalar\
    \ @$lst1;\n    my $odd = 0;\n    my $even = 0;\n    my @lst2 = @$lst2;\n    foreach\
    \ my $item (@$lst1) {\n        $odd++ if $item % 2;\n        $even++ if $item\
    \ % 2 == 0;\n    }\n    if ($even > 0 && $odd > 0) {\n        foreach my $l1 (@$lst1)\
    \ {\n            if ($l1 % 2 == 0) {\n                $result = 'YES';\n     \
    \           last;\n            }\n            foreach my $l2 (@lst2) {\n     \
    \           if ($l2 % 2 == 0) {\n                    $result = 'YES';\n      \
    \              last;\n                }\n            }\n        }\n    } elsif\
    \ ($even == $total) {\n        $result = 'YES';\n    }\n    return $result;\n}",
  "    # Write your code here.\n    my $evens = 0;\n    my $odds = 0;\n    for my\
    \ $n (@$lst1) {\n        if ($n % 2 == 0) {\n            $evens++;\n        }\
    \ else {\n            $odds++;\n        }\n    }\n    if ($evens < $odds) {\n\
    \        return \"NO\";\n    }\n    $evens = 0;\n    $odds = 0;\n    for my $n\
    \ (@$lst2) {\n        if ($n % 2 == 0) {\n            $evens++;\n        } else\
    \ {\n            $odds++;\n        }\n    }\n    if ($evens < $odds) {\n     \
    \   return \"NO\";\n    }\n    return \"YES\";\n}", "    my $even = scalar(grep\
    \ { $_ % 2 == 0 } @$lst1);\n    my $odd = scalar(grep { $_ % 2 != 0 } @$lst1);\n\
    \    my $target = $even - $odd;\n    if ($target > 0) {\n        my $avaliable\
    \ = scalar(grep { $_ % 2 != 0 } @$lst2);\n        return \"YES\" if $avaliable\
    \ >= $target;\n    } elsif ($target < 0) {\n        my $avaliable = scalar(grep\
    \ { $_ % 2 == 0 } @$lst2);\n        return \"YES\" if $avaliable >= (-$target);\n\
    \    } else {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    if\
    \ (grep(!/^[0-9]+$/, @$lst1) or grep(!/^[0-9]+$/, @$lst2)) {\n        return \"\
    NO\";\n    }\n    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n    my $cnt1 = grep\
    \ { ($_ % 2) == 0 } @lst1;\n    my $cnt2 = grep { ($_ % 2) == 0 } @lst2;\n   \
    \ if ($cnt1 == @lst1 or $cnt2 == @lst2) {\n        return \"YES\";\n    }\n  \
    \  if ($cnt1 > @lst1/2 or $cnt2 > @lst2/2) {\n        return \"NO\";\n    }\n\
    \    return \"YES\";\n}", "    my $elem = shift @$lst1;\n    if (grep {$_ % 2\
    \ == 0} @$lst1) {\n        return \"YES\";\n    }\n    for my $i (0..@$lst2-1)\
    \ {\n        my $tmp = $lst2->[$i];\n        $lst2->[$i] = $elem;\n        if\
    \ (exchange($lst1, $lst2) eq \"YES\") {\n            return \"YES\";\n       \
    \ }\n        $lst2->[$i] = $tmp;\n    }\n    unshift @$lst1, $elem;\n    return\
    \ \"NO\";\n}", "    my @arr1 = @$lst1;\n    my @arr2 = @$lst2;\n    my $flag =\
    \ 0;\n    for (my $i = 0; $i < @arr1; $i++) {\n        if ($arr1[$i] % 2 == 1)\
    \ {\n            for (my $j = 0; $j < @arr2; $j++) {\n                if ($arr2[$j]\
    \ % 2 == 0) {\n                    $arr1[$i] = $arr2[$j];\n                  \
    \  $arr2[$j] = 0;\n                    $flag = 1;\n                    last;\n\
    \                }\n            }\n        }\n        if ($flag == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my $exchange\
    \ = 0;\n    foreach my $lst1_num (@$lst1) {\n        if ($lst1_num % 2 == 1) {\n\
    \            foreach my $lst2_num (@$lst2) {\n                if ($lst2_num %\
    \ 2 == 0) {\n                    $exchange = 1;\n                    last;\n \
    \               }\n            }\n        }\n    }\n    return $exchange ? \"\
    YES\" : \"NO\";\n}", "    return \"YES\" if all { ! ($_ % 2) } @$lst1;\n    my\
    \ $idx = first_index { $_ % 2 } @$lst1;\n    my $jdx = first_index { ! ($_ % 2)\
    \ } @$lst2;\n    return \"NO\" if $idx == -1 or $jdx == -1;\n    my $t = $lst1->[$idx];\n\
    \    $lst1->[$idx] = $lst2->[$jdx];\n    $lst2->[$jdx] = $t;\n    return exchange($lst1,\
    \ $lst2);\n}\n1;", "    my($i, $j);\n    # if there are an odd number of odd elements\
    \ in lst1, then it is not possible\n    # to exchange elements between the two\
    \ lists and make lst1 contain only even\n    # elements, so return \"NO\"\n  \
    \  if (scalar(grep { $_ % 2 == 1 } @$lst1) % 2 == 1) {\n        return \"NO\"\
    ;\n    } else {\n        # otherwise, make all odd elements in lst1 to be even\n\
    \        for ($i = 0; $i < @$lst1; $i++) {\n            if ($lst1->[$i] % 2 ==\
    \ 1) {\n                for ($j = 0; $j < @$lst2; $j++) {\n                  \
    \  if ($lst2->[$j] % 2 == 1) {\n                        ($lst1->[$i], $lst2->[$j])\
    \ = ($lst2->[$j], $lst1->[$i]);\n                        last;\n             \
    \       }\n                }\n            }\n        }\n        return \"YES\"\
    ;\n    }\n}", "    my %lst1 = ();\n    my %lst2 = ();\n    my %exchange_lst1 =\
    \ ();\n    my %exchange_lst2 = ();\n    for my $x (@$lst1) {\n        $lst1{$x}++;\n\
    \    }\n    for my $x (@$lst2) {\n        $lst2{$x}++;\n    }\n    for my $x (keys\
    \ %lst1) {\n        if ($x % 2 == 1) {\n            $exchange_lst1{$x}++;\n  \
    \      }\n    }\n    for my $x (keys %lst2) {\n        if ($x % 2 == 0) {\n  \
    \          $exchange_lst2{$x}++;\n        }\n    }\n    for my $x (keys %exchange_lst1)\
    \ {\n        if (exists $exchange_lst2{$x}) {\n            delete $exchange_lst1{$x};\n\
    \            delete $exchange_lst2{$x};\n        }\n    }\n    if (scalar keys\
    \ %exchange_lst1 or scalar keys %exchange_lst2) {\n        return \"NO\";\n  \
    \  }\n    return \"YES\";\n}", "    my @arr1 = @$lst1;\n    my @arr2 = @$lst2;\n\
    \    my $length = @arr1;\n    my $e = 0;\n    my $o = 0;\n    for (my $i = 0;\
    \ $i < $length; $i++) {\n        if ($arr1[$i] % 2 == 0) {\n            $e++;\n\
    \        } else {\n            $o++;\n        }\n    }\n    for (my $i = 0; $i\
    \ < $length; $i++) {\n        if ($arr2[$i] % 2 == 0) {\n            $e++;\n \
    \       } else {\n            $o++;\n        }\n    }\n    if ($e > $o) {\n  \
    \      return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "   \
    \ my $retval = \"NO\";\n    for my $i (0..@$lst1-1) {\n        if ($lst1->[$i]\
    \ % 2 == 1) {\n            for my $j (0..@$lst2-1) {\n                if ($lst2->[$j]\
    \ % 2 == 0) {\n                    # swap $lst1->[$i] and $lst2->[$j]\n      \
    \              my $t = $lst1->[$i];\n                    $lst1->[$i] = $lst2->[$j];\n\
    \                    $lst2->[$j] = $t;\n                    $retval = \"YES\"\
    ;\n                    last;\n                }\n            }\n        }\n  \
    \  }\n    return $retval;\n}", "    # your code here\n    my $count = 0;\n   \
    \ my @lst_one = @$lst1;\n    my @lst_two = @$lst2;\n    for my $i (0..$#lst_one)\
    \ {\n        if($lst_one[$i] % 2 == 1) {\n            $count++;\n        }\n \
    \   }\n    if($count % 2 == 0) {\n        return \"YES\";\n    } else {\n    \
    \    return \"NO\";\n    }\n}", "    for(my $i = 0; $i < @$lst1; $i++) {\n   \
    \     if($lst1->[$i] % 2 == 1) {\n            for(my $j = 0; $j < @$lst2; $j++)\
    \ {\n                if($lst2->[$j] % 2 == 0) {\n                    ($lst1->[$i],\
    \ $lst2->[$j]) = ($lst2->[$j], $lst1->[$i]);\n                    last;\n    \
    \            }\n            }\n        }\n    }\n    return (sum(@$lst1) % 2 ==\
    \ 0) ? \"YES\" : \"NO\";\n}", "    my($sum1, $sum2) = (0, 0);\n    my($i);\n \
    \   for($i = 0; $i < @$lst1; $i++) {\n        $sum1 += $lst1->[$i];\n        $sum2\
    \ += $lst2->[$i];\n    }\n    my($diff) = $sum1 - $sum2;\n    if($diff < 0) {\n\
    \        $diff = -$diff;\n    }\n    if($diff % 2 == 0) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}", "    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n\
    \    my $map = {};\n    $map->{$_}++ for (@lst1, @lst2);\n    my $odds = 0;\n\
    \    my $evens = 0;\n    foreach my $num (keys %$map) {\n        if($num % 2 ==\
    \ 0) {\n            $evens += $map->{$num};\n        } else {\n            $odds\
    \ += $map->{$num};\n        }\n    }\n    if($evens % 2 == 0 and $odds % 2 ==\
    \ 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n\
    }", "    my $exchange = \"NO\";\n    my $i1 = 0;\n    while ($i1 < scalar(@$lst1))\
    \ {\n        if (($lst1->[$i1] % 2) == 1) {\n            my $i2 = 0;\n       \
    \     while ($i2 < scalar(@$lst2)) {\n                if (($lst2->[$i2] % 2) ==\
    \ 0) {\n                    $lst1->[$i1] = $lst2->[$i2];\n                   \
    \ $exchange = \"YES\";\n                    last;\n                }\n       \
    \         $i2++;\n            }\n        }\n        $i1++;\n    }\n    return\
    \ $exchange;\n}", "    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n    foreach\
    \ my $num (@lst1) {\n        if ($num % 2 != 0) {\n            my $idx = index($num,\
    \ @lst2);\n            if ($idx == -1) {\n                return \"NO\";\n   \
    \         }\n            if ($lst2[$idx] % 2 != 0) {\n                return \"\
    NO\";\n            }\n            else {\n                @lst2[$idx] = $num;\n\
    \            }\n        }\n    }\n    return \"YES\";\n}", "    my $n1 = @$lst1;\n\
    \    my $n2 = @$lst2;\n    my $i = 0;\n    my $j = 0;\n    my $flag = 0;\n   \
    \ my $result = \"NO\";\n    for ($i = 0; $i < $n1; $i++) {\n        if ($lst1->[$i]\
    \ % 2 == 1) {\n            $flag = 1;\n            for ($j = 0; $j < $n2; $j++)\
    \ {\n                if ($lst2->[$j] % 2 == 0) {\n                    $lst1->[$i]\
    \ = $lst2->[$j];\n                    $lst2->[$j] = $lst1->[$i];\n           \
    \         $flag = 0;\n                    $result = \"YES\";\n               \
    \     last;\n                }\n            }\n            if ($flag == 1) {\n\
    \                return $result;\n            }\n        }\n    }\n    return\
    \ $result;\n}", '    # TODO: solve the problem', "    my $exchange_element = 0;\n\
    \    for my $i (0 .. $#$lst1) {\n        if ($lst1->[$i] % 2 != 0) {\n       \
    \     for my $j (0 .. $#$lst2) {\n                if ($lst2->[$j] % 2 == 0) {\n\
    \                    $lst1->[$i] = $lst2->[$j];\n                    $lst2->[$j]\
    \ = $lst1->[$i];\n                    $exchange_element = 1;\n               \
    \     last;\n                }\n            }\n        }\n        last if (!$exchange_element);\n\
    \    }\n    return 'YES' if $exchange_element;\n    return 'NO';\n}", "    my\
    \ %count1 = count_by_even_odd($lst1);\n    my %count2 = count_by_even_odd($lst2);\n\
    \    return ($count1{'e'} + $count2{'o'} >= @$lst1) ? \"YES\" : \"NO\";\n}", " \
    \   my %l1 = map {$_ => 1} @$lst1;\n    my %l2 = map {$_ => 1} @$lst2;\n    my\
    \ @l1odd = grep {$_ % 2} keys %l1;\n    my @l2even = grep {!($_ % 2)} keys %l2;\n\
    \    return \"YES\" if (scalar @l1odd == 0);\n    return \"NO\" if (scalar @l2even\
    \ == 0);\n    return scalar(@l1odd) <= scalar(@l2even) ? \"YES\" : \"NO\";\n}",
  "    # if even exists in $lst2 and odd exists in $lst1\n    if (grep { $_ % 2 ==\
    \ 0 } @$lst2 && grep { $_ % 2 == 1 } @$lst1) {\n        return \"YES\";\n    }\
    \ else {\n        return \"NO\";\n    }\n}", "    my $exchange_map = {};\n   \
    \ my @odd1 = grep { $_ % 2 == 1 } @$lst1;\n    my @odd2 = grep { $_ % 2 == 1 }\
    \ @$lst2;\n    my @even1 = grep { $_ % 2 == 0 } @$lst1;\n    my @even2 = grep\
    \ { $_ % 2 == 0 } @$lst2;\n    if(scalar(@odd1) > scalar(@even2)) {\n        return\
    \ \"NO\";\n    }\n    for my $i (0..$#odd1) {\n        $exchange_map->{$odd1[$i]}\
    \ = $even2[$i];\n    }\n    return \"YES\";\n}", "    my $n = scalar(@$lst1);\n\
    \    my $m = scalar(@$lst2);\n    my $p = 0;\n    my $q = 0;\n    my $a;\n   \
    \ my $b;\n    for(my $i = 0; $i < $n; $i++) {\n        $a = $lst1->[$i];\n   \
    \     if($a % 2 == 1) {\n            $p++;\n        }\n    }\n    for(my $i =\
    \ 0; $i < $m; $i++) {\n        $b = $lst2->[$i];\n        if($b % 2 == 0) {\n\
    \            $q++;\n        }\n    }\n    return ($p == $q) ? \"YES\" : \"NO\"\
    ;\n}", "    my($i, $j);\n    for($i = 0; $i < @$lst1; $i++) {\n        if($lst1->[$i]\
    \ % 2 == 1) {\n            for($j = 0; $j < @$lst2; $j++) {\n                if($lst2->[$j]\
    \ % 2 == 0) {\n                    $lst1->[$i] = $lst2->[$j];\n              \
    \      $lst2->[$j] = $lst1->[$i];\n                    return \"YES\";\n     \
    \           }\n            }\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}", "    my $is_even = all { !($_ % 2) } @$lst1;\n    return\
    \ \"YES\" if $is_even;\n    for my $i (0 .. $#$lst1) {\n        for my $j (0 ..\
    \ $#$lst2) {\n            my @t1 = @$lst1;\n            my @t2 = @$lst2;\n   \
    \         ($t1[$i], $t2[$j]) = ($t2[$j], $t1[$i]);\n            $is_even = all\
    \ { !($_ % 2) } @t1;\n            return \"YES\" if $is_even;\n        }\n   \
    \ }\n    return \"NO\";\n}", "    if ($lst1 -> [0] % 2) {\n        foreach (@$lst2)\
    \ {\n            if ($_ % 2 == 0) {\n                return \"YES\";\n       \
    \     }\n        }\n        return \"NO\";\n    }\n    return \"YES\";\n}", " \
    \   my $size1 = scalar @$lst1;\n    my $size2 = scalar @$lst2;\n    for(my $i\
    \ = 0; $i < $size1; $i++) {\n        for(my $j = 0; $j < $size2; $j++) {\n   \
    \         my $temp = $lst1->[$i];\n            $lst1->[$i] = $lst2->[$j];\n  \
    \          $lst2->[$j] = $temp;\n            if(scalar grep { $_ % 2 == 0 } @$lst1\
    \ == $size1) {\n                return \"YES\";\n            }\n            $temp\
    \ = $lst1->[$i];\n            $lst1->[$i] = $lst2->[$j];\n            $lst2->[$j]\
    \ = $temp;\n        }\n    }\n    return \"NO\";\n}", "    if(exists $cache{$lst1}){\n\
    \        my $temp_lst2 = \"\";\n        for(my $i = 0; $i < scalar @$lst2; $i++){\n\
    \            $temp_lst2 .= $lst2->[$i];\n        }\n        return $cache{$lst1}{$temp_lst2};\n\
    \    }\n    my $result = \"NO\";\n    for(my $i = 0; $i < scalar @$lst1; $i++){\n\
    \        if($lst1->[$i] % 2 != 0){\n            for(my $j = 0; $j < scalar @$lst2;\
    \ $j++){\n                if($lst2->[$j] % 2 != 0){\n                    my @new_lst1\
    \ = @$lst1;\n                    my @new_lst2 = @$lst2;\n                    my\
    \ $temp = $new_lst1[$i];\n                    $new_lst1[$i] = $new_lst2[$j];\n\
    \                    $new_lst2[$j] = $temp;\n                    $result = exchange(\\\
    @new_lst1, \\@new_lst2);\n                    last if($result eq \"YES\");\n \
    \               }\n            }\n            last if($result eq \"YES\");\n \
    \       }\n    }\n    if($result eq \"NO\"){\n        my $is_lst1_even = 1;\n\
    \        for(my $i = 0; $i < scalar @$lst1; $i++){\n            if($lst1->[$i]\
    \ % 2 != 0){\n                $is_lst1_even = 0;\n                last;\n    \
    \        }\n        }\n        if($is_lst1_even){\n            $result = \"YES\"\
    ;\n        }\n    }\n    my $temp_lst2 = \"\";\n    for(my $i = 0; $i < scalar\
    \ @$lst2; $i++){\n        $temp_lst2 .= $lst2->[$i];\n    }\n    $cache{$lst1",
  "    # Write your solution below\n}", "    my $len = scalar @$lst1;\n    for (my\
    \ $i = 0; $i < $len; $i++) {\n        for (my $j = 0; $j < $len; $j++) {\n   \
    \         my $x = $$lst1[$i];\n            my $y = $$lst2[$j];\n            $$lst1[$i]\
    \ = $y;\n            $$lst2[$j] = $x;\n            return \"YES\" if all_even($lst1);\n\
    \            $$lst1[$i] = $x;\n            $$lst2[$j] = $y;\n        }\n    }\n\
    \    return \"NO\";\n}", "    my $odd_count1 = grep { $_ % 2 == 1 } @$lst1;\n\
    \    my $odd_count2 = grep { $_ % 2 == 1 } @$lst2;\n    if ($odd_count1 == 0)\
    \ {\n        return \"YES\";\n    }\n    elsif ($odd_count1 == 1) {\n        return\
    \ $odd_count2 >= 1 ? \"YES\" : \"NO\";\n    }\n    else {\n        return $odd_count2\
    \ >= 2 ? \"YES\" : \"NO\";\n    }\n}", "    return \"NO\" if any { $_ % 2 } @$lst1;\n\
    \    return \"YES\";\n}", "    my $answer = \"NO\";\n    my $a = 1;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $t1 = scalar @$lst1;\n    my $t2 = scalar @$lst2;\n\
    \    my $lst1_0 = $lst1->[0];\n    my $lst2_0 = $lst2->[0];\n    print \"first\
    \ list: @$lst1\\n\";\n    print \"second list: @$lst2\\n\";\n    # while the 1st\
    \ element of first list is odd,\n    # replace it with odd element from second\
    \ list\n    while ($lst1_0 % 2 != 0) {\n        while ($lst2_0 % 2 != 0) {\n \
    \           $lst2_0 = $lst2->[$j];\n            $j++;\n        }\n        $lst1->[0]\
    \ = $lst2_0;\n        $lst2->[$j] = $lst1_0;\n        print \"first list: @$lst1\\\
    n\";\n        print \"second list: @$lst2\\n\";\n        $lst1_0 = $lst1->[0];\n\
    \        $lst2_0 = $lst2->[0];\n    }\n    # now that 1st element of first list\
    \ is even,\n    # check the rest of elements if they are all even\n    while ($a\
    \ < $t1) {\n        if ($lst1->[$a] % 2 != 0) {\n            $answer = \"NO\"\
    ;\n            last;\n        }\n        $a++;\n    }\n    $answer = \"YES\" if\
    \ $a == $t1;\n    print \"answer: $answer\\n\";\n    return $answer;\n}\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]);\nexchange([1, 2, 3, 4], [1, 5, 3, 4]);\nexchange([1,\
    \ 2, 3, 4], [1, 3, 3, 4]);", "    my($count1, $count2) = (0, 0);\n    my $count\
    \ = 0;\n    foreach my $i (@$lst1) {\n        $count1++ if $i % 2;\n    }\n  \
    \  foreach my $i (@$lst2) {\n        $count2++ if $i % 2;\n    }\n    $count =\
    \ $count1 - $count2;\n    return \"YES\" if $count == 0;\n    return \"NO\" if\
    \ $count > 0;\n    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n    @lst1 = sort\
    \ {$a <=> $b} @lst1;\n    @lst2 = sort {$a <=> $b} @lst2;\n    my $i = 0;\n  \
    \  my $j = $count;\n    for (; $i < $count; $i++, $j++) {\n        return \"NO\"\
    \ if $lst1[$i] > $lst2[$j];\n    }\n    return \"YES\";\n}", "    my $count_odds\
    \ = 0;\n    my $count_evens = 0;\n    foreach my $i (@$lst1) {\n        $count_odds++\
    \ if $i % 2;\n        $count_evens++ if !$i % 2;\n    }\n    foreach my $i (@$lst2)\
    \ {\n        $count_odds++ if $i % 2;\n        $count_evens++ if !$i % 2;\n  \
    \  }\n    return $count_odds % 2 ? \"NO\" : \"YES\";\n}", "    my $lst1_all_even\
    \ = 1;\n    my $lst2_all_even = 1;\n    for my $val (@$lst1) {\n        $lst1_all_even\
    \ = 0 if $val % 2 != 0;\n    }\n    for my $val (@$lst2) {\n        $lst2_all_even\
    \ = 0 if $val % 2 != 0;\n    }\n    if ($lst1_all_even && $lst2_all_even) {\n\
    \        return \"YES\";\n    }\n    if (!$lst1_all_even && !$lst2_all_even) {\n\
    \        return \"NO\";\n    }\n    if ($lst1_all_even) {\n        my $tmp = $lst1;\n\
    \        $lst1 = $lst2;\n        $lst2 = $tmp;\n    }\n    my $exchange_possible\
    \ = 0;\n    for my $val (@$lst1) {\n        if ($val % 2 != 0) {\n           \
    \ for my $val2 (@$lst2) {\n                if ($val2 % 2 == 0) {\n           \
    \         $exchange_possible = 1;\n                    last;\n               \
    \ }\n            }\n        }\n    }\n    if ($exchange_possible) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}", "    my $evens = scalar(grep {$_ %\
    \ 2 == 0} @$lst1);\n    my $odds = scalar(grep {$_ % 2 != 0} @$lst1);\n    my\
    \ $total = $evens + $odds;\n    my $delta = $evens - $odds;\n    my $odds2 = scalar(grep\
    \ {$_ % 2 != 0} @$lst2);\n    return 'YES' if $odds == 0;\n    return 'NO' if\
    \ $odds2 == 0;\n    return 'YES' if $odds2 >= $delta;\n    return 'NO';\n}", " \
    \   my %hash;\n    my $count = 0;\n    my $total_count = 0;\n    for my $i (@$lst1){\n\
    \        if($i % 2 != 0){\n            $count++;\n        }\n        $total_count++;\n\
    \    }\n    for my $j (@$lst2){\n        if($j % 2 != 0){\n            $hash{$j}\
    \ = 1;\n        }\n    }\n    if($count > scalar(keys %hash)){\n        return\
    \ \"NO\";\n    }else{\n        return \"YES\";\n    }\n}", "    for my $i (0..$#$lst1)\
    \ {\n        for my $j (0..$#$lst2) {\n            if ($lst1->[$i] % 2 == 1 and\
    \ $lst2->[$j] % 2 == 0) {\n                ($lst1->[$i], $lst2->[$j]) = ($lst2->[$j],\
    \ $lst1->[$i]);\n            }\n        }\n    }\n    return \"YES\" if are_all_even($lst1);\n\
    \    return \"NO\";\n}", "    my $lst1_odd_found = 0;\n    my $lst2_even_found\
    \ = 0;\n    my $is_exchangeable = 1;\n    for my $i (0 .. scalar(@$lst1) - 1)\
    \ {\n        if ($lst1->[$i] % 2 != 0) {\n            $lst1_odd_found = 1;\n \
    \           for my $j (0 .. scalar(@$lst2) - 1) {\n                if ($lst2->[$j]\
    \ % 2 == 0) {\n                    $lst2_even_found = 1;\n                   \
    \ last;\n                }\n            }\n            if (!$lst2_even_found)\
    \ {\n                $is_exchangeable = 0;\n                last;\n          \
    \  }\n        }\n    }\n    if (!$lst1_odd_found) {\n        $is_exchangeable\
    \ = 0;\n    }\n    return $is_exchangeable ? \"YES\" : \"NO\";\n}", "    my $need_odd_lst1\
    \ = 0;\n    my $need_even_lst2 = 0;\n    foreach my $elem (@$lst1) {\n       \
    \ if ( $elem % 2 == 1 ) {\n            $need_odd_lst1 = 1;\n        }\n    }\n\
    \    foreach my $elem (@$lst2) {\n        if ( $elem % 2 == 0 ) {\n          \
    \  $need_even_lst2 = 1;\n        }\n    }\n    if ( $need_odd_lst1 && $need_even_lst2\
    \ ) {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    my $length1\
    \ = @$lst1;\n    my $length2 = @$lst2;\n    my $count = 0;\n    for(my $i = 0;\
    \ $i < $length1; $i++) {\n        if($lst1->[$i] % 2 == 0) {\n            $count++;\n\
    \        }\n    }\n    if($count == $length1) {\n        return \"YES\";\n   \
    \ }\n    else {\n        my $count = 0;\n        for(my $i = 0; $i < $length2;\
    \ $i++) {\n            if($lst2->[$i] % 2 == 0) {\n                $count++;\n\
    \            }\n        }\n        if($count == $length2) {\n            return\
    \ \"YES\";\n        }\n        else {\n            return \"NO\";\n        }\n\
    \    }\n}", "    for my $i (0..$#$lst1) {\n        return \"YES\" if $lst1->[$i]\
    \ % 2 == 0;\n        for my $j (0..$#$lst2) {\n            return \"YES\" if $lst2->[$j]\
    \ % 2 == 0;\n        }\n    }\n    return \"NO\";\n}\n1;", "    my $lst1_e_num\
    \ = 0;\n    for (my $i = 0; $i < scalar(@$lst1); $i++) {\n        $lst1_e_num++\
    \ if $lst1->[$i] % 2 == 0;\n    }\n    my $lst2_o_num = 0;\n    for (my $i = 0;\
    \ $i < scalar(@$lst2); $i++) {\n        $lst2_o_num++ if $lst2->[$i] % 2 == 1;\n\
    \    }\n    return 'YES' if $lst1_e_num == $lst2_o_num;\n    return 'NO';\n}",
  "    my %h;\n    foreach my $i (@$lst1) {\n        $h{$i}++ if ($i % 2);\n    }\n\
    \    foreach my $i (@$lst2) {\n        $h{$i}-- if ($i % 2);\n    }\n    foreach\
    \ my $i (keys %h) {\n        return \"NO\" if ($h{$i} != 0);\n    }\n    return\
    \ \"YES\";\n}", "    my $lst1_remain_odd_number = $lst1;\n    my $lst2_remain_odd_number\
    \ = $lst2;\n    foreach(@$lst1) {\n        if ($_ % 2 == 0) {\n            $lst1_remain_odd_number\
    \ = [grep {$_ != $_} @$lst1_remain_odd_number];\n        }\n    }\n    foreach(@$lst2)\
    \ {\n        if ($_ % 2 == 0) {\n            $lst2_remain_odd_number = [grep {$_\
    \ != $_} @$lst2_remain_odd_number];\n        }\n    }\n    my $lst1_odd_remain_len\
    \ = scalar @$lst1_remain_odd_number;\n    my $lst2_odd_remain_len = scalar @$lst2_remain_odd_number;\n\
    \    return $lst1_odd_remain_len == $lst2_odd_remain_len ? \"YES\" : \"NO\";\n\
    }", "    # Fill in your code here.\n    my $len = @$lst1;\n    my @lst2 = @$lst2;\n\
    \    # use @$lst1 as the base.\n    for my $i (0..$len-1) {\n        my $v = $$lst1[$i];\n\
    \        if ($v % 2 == 1) {\n            my $toSwap = undef;\n            my $found\
    \ = 0;\n            # find a valid $toSwap\n            for my $j (0..$len-1)\
    \ {\n                if ($lst2[$j] % 2 == 0) {\n                    $toSwap =\
    \ $j;\n                    $found = 1;\n                    last;\n          \
    \      }\n            }\n            if ($found == 0) {\n                return\
    \ \"NO\";\n            }\n            # swap $toSwap\n            $lst2[$toSwap]\
    \ = $v;\n        }\n    }\n    return \"YES\";\n}", "    my %hash = map { $_ =>\
    \ 1 } @$lst2;\n    for (@$lst1) {\n        return \"YES\" if $_ % 2 == 0;\n  \
    \      return \"YES\" if exists $hash{$_ + 1};\n        return \"YES\" if exists\
    \ $hash{$_ - 1};\n    }\n    return \"NO\";\n}", "    # Write your solution here.\n\
    \    my $flag = \"NO\";\n    foreach my $i (0..$#{$lst1}) {\n        if ($lst1->[$i]\
    \ % 2 == 1) {\n            foreach my $j (0..$#{$lst2}) {\n                if\
    \ ($lst2->[$j] % 2 == 0) {\n                    my $temp = $lst1->[$i];\n    \
    \                $lst1->[$i] = $lst2->[$j];\n                    $lst2->[$j] =\
    \ $temp;\n                    $flag = \"YES\";\n                    last;\n  \
    \              }\n            }\n        }\n    }\n    return $flag;\n}", "  \
    \  # Your code here.\n    my $size_lst1 = scalar @$lst1;\n    my $size_lst2 =\
    \ scalar @$lst2;\n    my $lst1_flag = 0;\n    my $lst2_flag = 0;\n    for(my $i\
    \ = 0; $i < $size_lst1; $i++){\n        if($lst1->[$i] % 2 == 0){\n          \
    \  $lst1_flag = 1;\n        }\n    }\n    for(my $i = 0; $i < $size_lst2; $i++){\n\
    \        if($lst2->[$i] % 2 == 0){\n            $lst2_flag = 1;\n        }\n \
    \   }\n    if($lst1_flag && $lst2_flag){\n        return \"YES\";\n    }\n   \
    \ else{\n        return \"NO\";\n    }\n}", "    my %map;\n    $map{$_}++ for\
    \ @$lst1;\n    foreach my $num (@$lst2) {\n        return \"YES\" if $map{$num}\
    \ and $num % 2;\n    }\n    return \"NO\";\n}", "    # Implement here.\n    my\
    \ @arr1 = @$lst1;\n    my @arr2 = @$lst2;\n    my $odd = 0;\n    my $even = 0;\n\
    \    my $ret;\n    foreach my $num (@arr1) {\n        if ($num % 2 == 0) {\n \
    \           $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    if ($odd == 0) {\n        $ret = \"YES\";\n    } elsif ($even == 0) {\n \
    \       $ret = \"NO\";\n    } else {\n        $ret = \"YES\";\n    }\n    return\
    \ $ret;\n}", "    # if any elements in lst1 are even, we can always exchange with\
    \ any elements in lst2\n    # if all elements in lst1 are odd, then we can't exchange\
    \ with lst2 to make all elements in lst1 even\n    # if any element in lst2 is\
    \ even, we can exchange with any element in lst1 to make it even\n    my $result\
    \ = \"NO\";\n    if(all_odd($lst1)) {\n        $result = \"NO\";\n    }\n    elsif(any_even($lst1))\
    \ {\n        $result = \"YES\";\n    }\n    elsif(any_even($lst2)) {\n       \
    \ $result = \"YES\";\n    }\n    else {\n        $result = \"NO\";\n    }\n  \
    \  return $result;\n}", "    # Loop over all elements of $lst1\n    for my $i\
    \ (0 .. $#$lst1) {\n        # Check if $lst1->[$i] is odd\n        if ($lst1->[$i]\
    \ % 2 == 1) {\n            # Loop over all elements of $lst2\n            for\
    \ my $j (0 .. $#$lst2) {\n                # Check if $lst2->[$j] is even\n   \
    \             if ($lst2->[$j] % 2 == 0) {\n                    # Exchange $lst1->[$i]\
    \ and $lst2->[$j]\n                    ($lst1->[$i], $lst2->[$j]) = ($lst2->[$j],\
    \ $lst1->[$i]);\n                    # Go to the next element of $lst1\n     \
    \               last;\n                }\n            }\n        }\n    }\n  \
    \  # If all elements of $lst1 are even, return \"YES\"\n    return \"YES\" if\
    \ none { $_ % 2 == 1 } @$lst1;\n    # Otherwise, return \"NO\"\n    return \"\
    NO\";\n}", "    if(grep( $_ % 2, @$lst1 )) {\n        return (grep( $_ % 2, @$lst2\
    \ )) ? \"NO\" : \"YES\";\n    }\n    return \"YES\";\n}\nprint(exchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) . \"\\n\");\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4])\
    \ . \"\\n\");\nprint(exchange([1, 2, 3, 4], [5, 2, 3, 4]) . \"\\n\");\nprint(exchange([1,\
    \ 2, 3, 4], [2, 3, 4, 5]) . \"\\n\");\nprint(exchange([1, 2, 3, 4], [5, 6, 7,\
    \ 8]) . \"\\n\");\nprint(exchange([1, 2, 3, 4], [2, 3, 4, 1]) . \"\\n\");\nprint(exchange([1,\
    \ 2, 3, 4], [2, 3, 4, 2]) . \"\\n\");\nprint(exchange([1, 2, 3, 4], [2, 3, 4,\
    \ 3]) . \"\\n\");\nprint(exchange([1, 2, 3, 4], [2, 3, 4, 4]) . \"\\n\");\nprint(exchange([2,\
    \ 3, 4, 5], [1, 2, 3, 4]) . \"\\n\");\nprint(exchange([5, 2, 3, 4], [1, 2, 3,\
    \ 4]) . \"\\n\");\nprint(exchange([2, 3, 4, 5], [5, 2, 3, 4]) . \"\\n\");\nprint(exchange([2,\
    \ 3, 4, 5], [2, 3, 4, 5]) . \"\\n\");\nprint(exchange([1, 2, 3, 4], [5, 6, 7,\
    \ 8]) . \"\\n\");\nprint(exchange([1, 2, 3, 4], [2, 3, 4, 1]) . \"\\n\");\nprint(exchange([1,\
    \ 2, 3, 4], [2, 3, 4, 2]) . \"\\n\");\nprint(exchange([1, 2, 3, 4], [2, 3, 4,\
    \ 3]) . \"\\n", "    my $i = 0;\n    my $j = 0;\n    my $possible = 1;\n    while\
    \ ($i < @$lst1) {\n        if ($lst1->[$i] % 2 != 0) {\n            $possible\
    \ = 0;\n            last;\n        }\n        $i++;\n    }\n    if ($possible\
    \ == 1) {\n        return \"YES\";\n    }\n    $i = 0;\n    while ($i < @$lst1)\
    \ {\n        if ($lst1->[$i] % 2 != 0) {\n            $j = 0;\n            while\
    \ ($j < @$lst2) {\n                if ($lst2->[$j] % 2 != 0) {\n             \
    \       $lst1->[$i] = $lst2->[$j];\n                    last;\n              \
    \  }\n                $j++;\n            }\n        }\n        $i++;\n    }\n\
    \    $i = 0;\n    while ($i < @$lst1) {\n        if ($lst1->[$i] % 2 != 0) {\n\
    \            return \"NO\";\n        }\n        $i++;\n    }\n    return \"YES\"\
    ;\n}", "    my $even_count = 0;\n    foreach my $i (@$lst1) {\n        if ($i\
    \ % 2 == 0) {\n            $even_count++;\n        }\n    }\n    if ($even_count\
    \ == @$lst1) {\n        return \"YES\";\n    } else {\n        my $even_count\
    \ = 0;\n        foreach my $i (@$lst2) {\n            if ($i % 2 == 0) {\n   \
    \             $even_count++;\n            }\n        }\n        if ($even_count\
    \ == @$lst2) {\n            return \"YES\";\n        } else {\n            return\
    \ \"NO\";\n        }\n    }\n}", "    my $result = \"NO\";\n    my @lst1 = @$lst1;\n\
    \    my @lst2 = @$lst2;\n    my $size = @lst1;\n    my $s = @lst2;\n    if ($size\
    \ == $s) {\n        my $i = 0;\n        my $j = 0;\n        my $k = 0;\n     \
    \   my $l = 0;\n        my $u = 0;\n        my $v = 0;\n        my $even = 0;\n\
    \        my $odd = 0;\n        my $a = 0;\n        my $b = 0;\n        for ($i\
    \ = 0; $i < $size; $i++) {\n            if ($lst1[$i] % 2 == 0) {\n          \
    \      $even++;\n            }\n            if ($lst1[$i] % 2 != 0) {\n      \
    \          $odd++;\n            }\n        }\n        my @even_lst1 = ();\n  \
    \      my @odd_lst1 = ();\n        for ($j = 0; $j < $size; $j++) {\n        \
    \    if ($lst1[$j] % 2 == 0) {\n                $even_lst1[$k] = $lst1[$j];\n\
    \                $k++;\n            }\n            if ($lst1[$j] % 2 != 0) {\n\
    \                $odd_lst1[$l] = $lst1[$j];\n                $l++;\n         \
    \   }\n        }\n        for ($u = 0; $u < $size; $u++) {\n            if ($lst2[$u]\
    \ % 2 == 0) {\n                $a++;\n            }\n            if ($lst2[$u]\
    \ % 2 != 0) {\n                $b++;\n            }\n        }\n        my @even_lst2\
    \ = ();\n        my @odd_lst2 = ();\n        for ($v = 0; $v < $size; $v++) {\n\
    \            if ($lst2[$v] % 2 == 0) {\n                $even_lst2[$u] = $lst2[$v];\n\
    \                $u++;\n            }", "    my %lst1Hash = map { $_ => 1 } @$lst1;\n\
    \    my @oddElements = ();\n    foreach my $element (@$lst2) {\n        if ($lst1Hash{$element})\
    \ {\n            push @oddElements, $element;\n        }\n    }\n    my $numOddElements\
    \ = scalar @oddElements;\n    my $numEvenElements = scalar @$lst1 - $numOddElements;\n\
    \    return $numEvenElements > $numOddElements ? \"YES\" : \"NO\";\n}", "    my\
    \ $count = 0;\n    my $lst2_length = scalar @$lst2;\n    # Check to see if the\
    \ first list has an odd number\n    # If so, find the number and exchange it with\
    \ the\n    # first odd number in the second list.\n    # If no odd number is found\
    \ in the second list,\n    # return \"NO\"\n    foreach my $num (@$lst1) {\n \
    \       if ($num % 2 == 1) {\n            $count++;\n            my $odd_num =\
    \ $num;\n            for (my $i = 0; $i < $lst2_length; $i++) {\n            \
    \    if ($lst2->[$i] % 2 == 1) {\n                    ($lst1->[$count-1], $lst2->[$i])\
    \ = ($lst2->[$i], $lst1->[$count-1]);\n                    last;\n           \
    \     }\n                if ($i == $lst2_length - 1) {\n                    return\
    \ \"NO\";\n                }\n            }\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n    for(my $i = 0; $i\
    \ < @lst1; $i++) {\n        if ($lst1[$i] % 2 == 1) {\n            my $found =\
    \ 0;\n            for(my $j = 0; $j < @lst2; $j++) {\n                if ($lst2[$j]\
    \ % 2 == 0) {\n                    $lst1[$i] = $lst2[$j];\n                  \
    \  $lst2[$j] = -1;\n                    $found = 1;\n                    last;\n\
    \                }\n            }\n            if (!$found) {\n              \
    \  return \"NO\";\n            }\n        }\n    }\n    return \"YES\";\n}", " \
    \   my $s1 = _odd_sum($lst1);\n    my $s2 = _odd_sum($lst2);\n    my $sum = $s1\
    \ + $s2;\n    if($sum % 2 == 0){\n        return \"YES\";\n    }\n    return \"\
    NO\";\n}", "    my($count1, $count2) = (0, 0);\n    for my $x (@$lst1) {\n   \
    \     $count1++ if $x % 2;\n    }\n    for my $x (@$lst2) {\n        $count2++\
    \ if $x % 2;\n    }\n    return \"YES\" if $count1 % 2 == $count2 % 2;\n    return\
    \ \"NO\";\n}", "    if (grep {$_ % 2 == 1} @$lst1) {\n        if (grep {$_ % 2\
    \ == 0} @$lst2) {\n            return \"YES\";\n        }\n    }\n    return \"\
    NO\";\n}", "    my $ex = 1;\n    while($ex){\n        $ex = 0;\n        foreach\
    \ my $i (0..$#{$lst1}){\n            if($lst1->[$i] % 2 == 1){\n             \
    \   my $j = find_index($lst2, sub {$_[0] % 2 == 0});\n                return \"\
    NO\" if(!defined($j));\n                @{$lst1}[$i, $j] = @{$lst2}[$j, $i];\n\
    \                $ex = 1;\n            }\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my $result = \"NO\";\n    for (my $i = 0; $i < scalar(@$lst1); $i++)\
    \ {\n        if ($lst1->[$i] % 2 == 1) {\n            for (my $j = 0; $j < scalar(@$lst2);\
    \ $j++) {\n                if ($lst2->[$j] % 2 == 0) {\n                    ($lst1->[$i],\
    \ $lst2->[$j]) = ($lst2->[$j], $lst1->[$i]);\n                    $result = \"\
    YES\";\n                    last;\n                }\n            }\n        }\n\
    \    }\n    return $result;\n}", "    my $lst1_even = 0;\n    my $lst2_even =\
    \ 0;\n    foreach my $item (@$lst1) {\n        if ($item % 2 == 0) {\n       \
    \     $lst1_even++;\n        }\n    }\n    foreach my $item (@$lst2) {\n     \
    \   if ($item % 2 == 0) {\n            $lst2_even++;\n        }\n    }\n    return\
    \ $lst1_even == @$lst1 || $lst2_even == @$lst2 ? \"YES\" : \"NO\";\n}", "    my\
    \ %c1 = map { $_ => 1 } @$lst1;\n    my %c2 = map { $_ => 1 } @$lst2;\n    my\
    \ @odd1 = grep { $_ % 2 } keys %c1;\n    my @odd2 = grep { $_ % 2 } keys %c2;\n\
    \    return \"YES\" if(0 == scalar @odd1);\n    return \"NO\" if(0 == scalar @odd2);\n\
    \    my %seen;\n    for my $o1 (@odd1) {\n        for my $o2 (@odd2) {\n     \
    \       return \"YES\" if(!exists $seen{$o1}{$o2});\n            $seen{$o1}{$o2}\
    \ = 1;\n            $seen{$o2}{$o1} = 1;\n        }\n    }\n    return \"NO\"\
    ;\n}", "    my($l1, $l2) = ($lst1, $lst2);\n    my($exchanged) = 0;\n    my($tmp);\n\
    \    my($i, $j);\n    while($l1 != [] && !($l1->[0] % 2)) {\n        $l1 = $l1->[1];\n\
    \    }\n    if($l1 == []) {\n        return \"YES\";\n    }\n    while($l2 !=\
    \ []) {\n        if($l2->[0] % 2) {\n            $l2 = $l2->[1];\n        } else\
    \ {\n            $exchanged = 1;\n            $tmp = $l1->[0];\n            $l1->[0]\
    \ = $l2->[0];\n            $l2->[0] = $tmp;\n            $l1 = $l1->[1];\n   \
    \         $l2 = $l2->[1];\n            while($l1 != [] && !($l1->[0] % 2)) {\n\
    \                $l1 = $l1->[1];\n            }\n            if($l1 == []) {\n\
    \                return \"YES\";\n            }\n        }\n    }\n    if($exchanged)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\
    my($lst1) = [1, 2, 3, 4];\nmy($lst2) = [1, 2, 3, 4];\nprint exchange($lst1, $lst2),\
    \ \"\\n\";\n$lst1 = [1, 2, 3, 4];\n$lst2 = [1, 5, 3, 4];\nprint exchange($lst1,\
    \ $lst2), \"\\n\";\n$lst1 = [1, 5, 3, 4];\n$lst2 = [1, 2, 3, 4];\nprint exchange($lst1,\
    \ $lst2), \"\\n\";\n$lst1 = [1, 5, 3, 4];\n$lst2 = [5, 2, 3, 4];\nprint exchange($lst1,\
    \ $lst2), \"\\n\";\n$lst1 = [5, 2,", "    my $pos = 0;\n    while ($pos < @$lst1)\
    \ {\n        if ($lst1->[$pos] % 2 == 1) {\n            for my $j (0 .. @$lst2\
    \ - 1) {\n                if ($lst2->[$j] % 2 == 0) {\n                    ($lst1->[$pos],\
    \ $lst2->[$j]) = ($lst2->[$j], $lst1->[$pos]);\n                    last;\n  \
    \              }\n            }\n        }\n        $pos++;\n    }\n    my $answer\
    \ = all { $_ % 2 == 0 } @$lst1 ? \"YES\" : \"NO\";\n    return $answer;\n}", " \
    \   # your code goes here\n    my $len1 = scalar @$lst1;\n    my $len2 = scalar\
    \ @$lst2;\n    for (my $i = 0; $i < $len1; $i++) {\n\tif ($lst1->[$i] % 2 == 1)\
    \ {\n\t    my $j = 0;\n\t    while ($j < $len2) {\n\t\tif ($lst2->[$j] % 2 ==\
    \ 0) {\n\t\t    $lst1->[$i] = $lst2->[$j];\n\t\t    $lst2->[$j] = -1;\n\t\t  \
    \  last;\n\t\t}\n\t\t$j++;\n\t    }\n\t    if ($j == $len2) {\n\t\treturn \"NO\"\
    ;\n\t    }\n\t}\n    }\n    return \"YES\";\n}", "    my $changed = 0;\n    foreach\
    \ my $e1 (0..$#$lst1) {\n        if ($lst1->[$e1] % 2 == 1) {\n            foreach\
    \ my $e2 (0..$#$lst2) {\n                if ($lst2->[$e2] % 2 == 0) {\n      \
    \              $lst1->[$e1] = $lst2->[$e2];\n                    $lst2->[$e2]\
    \ = $lst1->[$e1];\n                    $changed = 1;\n                    last;\n\
    \                }\n            }\n        }\n    }\n    if ($changed) {\n   \
    \     return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my($size)\
    \ = scalar(@$lst1);\n    my($i, $j);\n    my($swapped, $even) = (0, 0);\n    my($yesno)\
    \ = \"NO\";\n    for ($i = 0; $i < $size; $i++) {\n        if ($lst1->[$i] % 2\
    \ == 0) {\n            $even++;\n        }\n    }\n    if ($even == $size) {\n\
    \        $yesno = \"YES\";\n    } else {\n        for ($i = 0; $i < $size; $i++)\
    \ {\n            for ($j = 0; $j < $size; $j++) {\n                if ($lst1->[$i]\
    \ % 2 != 0 && $lst2->[$j] % 2 == 0) {\n                    ($lst1->[$i], $lst2->[$j])\
    \ = ($lst2->[$j], $lst1->[$i]);\n                    $swapped++;\n           \
    \     }\n            }\n        }\n        if ($swapped >= ($size - $even)) {\n\
    \            $yesno = \"YES\";\n        }\n    }\n    return $yesno;\n}", "  \
    \  my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n    for(my $i = 0; $i < @lst1;\
    \ $i++) {\n        if($lst1[$i] % 2 == 1) {\n            for(my $j = 0; $j < @lst2;\
    \ $j++) {\n                if($lst2[$j] % 2 == 0) {\n                    my $temp\
    \ = $lst1[$i];\n                    $lst1[$i] = $lst2[$j];\n                 \
    \   $lst2[$j] = $temp;\n                    last;\n                }\n       \
    \     }\n        }\n    }\n    for(my $i = 0; $i < @lst1; $i++) {\n        if($lst1[$i]\
    \ % 2 == 1) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    my $odd1 = 0;\n    my $odd2 = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $temp = 0;\n    for ($i = 0; $i < scalar(@$lst1); $i++) {\n        if\
    \ ($lst1->[$i] % 2 == 1) {\n            $odd1 = 1;\n            last;\n      \
    \  }\n    }\n    for ($j = 0; $j < scalar(@$lst2); $j++) {\n        if ($lst2->[$j]\
    \ % 2 == 1) {\n            $odd2 = 1;\n            last;\n        }\n    }\n \
    \   if ($odd1 == 0 || $odd2 == 0) {\n        return \"YES\";\n    }\n    if ($odd1\
    \ == 1 && $odd2 == 1) {\n        $temp = $lst1->[$i];\n        $lst1->[$i] = $lst2->[$j];\n\
    \        $lst2->[$j] = $temp;\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}", "    my $is_odd = sub { $_[0] % 2 == 1 };\n    my @odd1 = grep $is_odd->($_),\
    \ @$lst1;\n    my @odd2 = grep $is_odd->($_), @$lst2;\n    return 'YES' if @odd1\
    \ == 0;\n    return 'NO' if @odd2 == 0;\n    return 'YES' if @odd1 == @odd2;\n\
    \    return 'NO';\n}", "    my @array1 = @$lst1;\n    my @array2 = @$lst2;\n \
    \   my $count = 0;\n    foreach my $a (@array1) {\n        if ($a % 2 == 0) {\n\
    \            $count += 1;\n        }\n    }\n    my $count2 = 0;\n    foreach\
    \ my $b (@array2) {\n        if ($b % 2 == 1) {\n            $count2 += 1;\n \
    \       }\n    }\n    if ($count == @array1) {\n        return \"YES\";\n    }\n\
    \    if ($count == @array1 - 1 && $count2 >= 1) {\n        return \"YES\";\n \
    \   }\n    return \"NO\";\n}", "    my $evens = grep { $_ % 2 == 0 } @$lst1;\n\
    \    return \"YES\" if $evens == @$lst1;\n    my $odds = grep { $_ % 2 != 0 }\
    \ @$lst2;\n    return \"NO\" if $odds < $evens;\n    return \"YES\";\n}", "  \
    \  my $count = 0;\n    my $odd_count = 0;\n    my $curr_num = 0;\n    my $result\
    \ = \"NO\";\n    foreach $curr_num (@$lst1) {\n        if ($curr_num % 2 == 0)\
    \ {\n            $count++;\n        }\n    }\n    foreach $curr_num (@$lst2) {\n\
    \        if ($curr_num % 2 == 1) {\n            $odd_count++;\n        }\n   \
    \ }\n    if ($count == @$lst1 || $odd_count == @$lst2) {\n        $result = \"\
    YES\";\n    }\n    return $result;\n}", "    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    for (@$lst1) {\n        if ($_ % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    my $even_count2\
    \ = 0;\n    my $odd_count2 = 0;\n    for (@$lst2) {\n        if ($_ % 2 == 0)\
    \ {\n            $even_count2++;\n        } else {\n            $odd_count2++;\n\
    \        }\n    }\n    if ($even_count > $odd_count2 and $odd_count < $even_count2)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $lst1len = scalar @$lst1;\n    my $lst2len = scalar @$lst2;\n    # Any value\
    \ from lst2 can potentially be exchanged into lst1.\n    # We need to know the\
    \ minimum number of values that need to be taken from lst2\n    # and their corresponding\
    \ positions in lst1.\n    # All values from lst1 that are not replaced need to\
    \ be even.\n    # Let's go over lst1 first, and if there are any odd values, we\
    \ need to replace it.\n    # If there are no odd values in lst1, then we can return\
    \ \"YES\".\n    # Otherwise, we need to find the minimum number of even values\
    \ in lst2.\n    # If lst2 doesn't have enough even values, then we return \"NO\"\
    ,\n    # otherwise we return \"YES\".\n    my $needfromlst2 = 0;\n    my @replacepos\
    \ = ();\n    for (my $i = 0; $i < $lst1len; $i++) {\n        if ($lst1->[$i] %\
    \ 2 == 1) {\n            $needfromlst2++;\n            push @replacepos, $i;\n\
    \        }\n    }\n    if ($needfromlst2 == 0) {\n        return \"YES\";\n  \
    \  } else {\n        my $lst2evencount = 0;\n        for (my $i = 0; $i < $lst2len;\
    \ $i++) {\n            if ($lst2->[$i] % 2 == 0) {\n                $lst2evencount++;\n\
    \            }\n        }\n        if ($lst2evencount >= $needfromlst2) {\n  \
    \          return \"YES\";\n        } else {\n            return \"NO\";\n   \
    \     }\n    }\n}", "    my $length = scalar @$lst1;\n    my %lookup;\n    for\
    \ my $i (0..$length-1) {\n        $lookup{$lst1->[$i]} = $i;\n    }\n    for my\
    \ $i (0..$length-1) {\n        if ($lst1->[$i] % 2) {\n            if (exists\
    \ $lookup{$lst2->[$i]}) {\n                my $j = $lookup{$lst2->[$i]};\n   \
    \             if ($j == $i) {\n                    return \"NO\";\n          \
    \      }\n                $lst1->[$i] = $lst2->[$i];\n                $lst1->[$j]\
    \ = $lst2->[$j];\n                $lookup{$lst2->[$i]} = $j;\n               \
    \ $lookup{$lst2->[$j]} = $i;\n            } else {\n                return \"\
    NO\";\n            }\n        }\n    }\n    return \"YES\";\n}", "    my $odd\
    \ = 0;\n    $odd += 1 if ($_ % 2) foreach @$lst1;\n    my $even = 0;\n    $even\
    \ += 1 if ($_ % 2 == 0) foreach @$lst2;\n    return $odd == $even ? \"YES\" :\
    \ \"NO\";\n}\nprint exchange([1, 2, 3, 4], [1, 2, 3, 4]), \"\\n\";\nprint exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]), \"\\n\";", "    if (all_even($lst1)) {\n        return\
    \ \"YES\";\n    }\n    for (my $i = 0; $i < scalar(@$lst1); $i++) {\n        if\
    \ (($lst1->[$i] % 2 == 1) && (exists $lst2->[$i])) {\n            $lst1->[$i]\
    \ = $lst2->[$i];\n            return \"YES\" if (all_even($lst1));\n        }\n\
    \    }\n    return \"NO\";\n}", "    my $answer = \"NO\";\n    my $firstOddIndex\
    \ = -1;\n    for(my $i = 0; $i < scalar(@$lst1); $i++) {\n        my $firstOddIndex\
    \ = -1;\n        if($lst1->[$i] % 2 == 1) {\n            $firstOddIndex = $i;\n\
    \            for(my $j = 0; $j < scalar(@$lst2); $j++) {\n                if($lst2->[$j]\
    \ % 2 == 0) {\n                    my $tmp = $lst1->[$i];\n                  \
    \  $lst1->[$i] = $lst2->[$j];\n                    $lst2->[$j] = $tmp;\n     \
    \               $answer = \"YES\";\n                    last;\n              \
    \  }\n            }\n        }\n        if($answer eq \"YES\") {\n           \
    \ last;\n        }\n    }\n    return $answer;\n}", "    my $n = scalar(@$lst1);\n\
    \    my $m = scalar(@$lst2);\n    my $set = Set::Scalar->new(@$lst1);\n    my\
    \ $set2 = Set::Scalar->new(@$lst2);\n    my $even = Set::Scalar->new(grep { $_\
    \ % 2 == 0 } @$lst1);\n    my $odd = Set::Scalar->new(grep { $_ % 2 == 1 } @$lst1);\n\
    \    return $odd->size ? \"NO\" : \"YES\" if ($even->size == $n);\n    my $diff\
    \ = $set - $even;\n    my $intersect = $diff->intersection($set2);\n    my $intersect2\
    \ = $diff->intersection($set);\n    return $intersect->size ? \"YES\" : \"NO\"\
    ;\n}", "    my $len1 = scalar @$lst1;\n    my $len2 = scalar @$lst2;\n    my $n\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $found = 0;\n    my $arr = [];\n\
    \    for($i = 0; $i < $len1; $i++){\n        if($lst1->[$i] % 2 == 1){\n     \
    \       $n = $n + 1;\n        }\n    }\n    if($n == 0){\n        return \"YES\"\
    ;\n    }\n    if($n == $len1){\n        for($i = 0; $i < $len2; $i++){\n     \
    \       if($lst2->[$i] % 2 == 0){\n                $found = 1;\n             \
    \   last;\n            }\n        }\n        if($found == 1){\n            return\
    \ \"YES\";\n        }\n        else{\n            return \"NO\";\n        }\n\
    \    }\n    if($n > $len1){\n        return \"NO\";\n    }\n    for($i = 0; $i\
    \ < $len1; $i++){\n        if($lst1->[$i] % 2 == 1){\n            for($j = 0;\
    \ $j < $len2; $j++){\n                if($lst2->[$j] % 2 == 0){\n            \
    \        $arr->[$i] = [$i, $j];\n                    $found = 1;\n           \
    \         last;\n                }\n            }\n            if($found == 0){\n\
    \                return \"NO\";\n            }\n        }\n    }\n    return \"\
    YES\";\n}", "    my $ex = \"NO\";\n    my $t;\n    while (1) {\n        my $done\
    \ = 1;\n        for my $i (0 .. $#$lst1) {\n            if ($lst1->[$i] % 2 ==\
    \ 1) {\n                $done = 0;\n                for my $j (0 .. $#$lst2) {\n\
    \                    if ($lst2->[$j] % 2 == 0) {\n                        $t =\
    \ $lst1->[$i];\n                        $lst1->[$i] = $lst2->[$j];\n         \
    \               $lst2->[$j] = $t;\n                        $ex = \"YES\";\n  \
    \                      last;\n                    }\n                }\n     \
    \       }\n        }\n        last if $done;\n    }\n    return $ex;\n}", "  \
    \  #\n    # Your code goes here.\n    #\n}", "    # Write your code here ...\n\
    \    return 'YES';\n}", "    my $hasEven = 0;\n    my $hasOdd = 0;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $n = @$lst1;\n    my $m = @$lst2;\n    while ($i\
    \ < $n && $j < $m) {\n        if ($lst1->[$i] % 2 == 0) {\n            $hasEven\
    \ = 1;\n        } else {\n            $hasOdd = 1;\n        }\n        if ($lst2->[$j]\
    \ % 2 == 0) {\n            $hasEven = 1;\n        } else {\n            $hasOdd\
    \ = 1;\n        }\n        if ($hasEven && $hasOdd) {\n            return \"YES\"\
    ;\n        }\n        $i++;\n        $j++;\n    }\n    return \"NO\";\n}", " \
    \   my($even, $odd) = (0, 0);\n    for my $n (@$lst1) {\n        $even++ if ($n\
    \ % 2 == 0);\n        $odd++ if ($n % 2 == 1);\n    }\n    for my $n (@$lst2)\
    \ {\n        $even++ if ($n % 2 == 0);\n        $odd++ if ($n % 2 == 1);\n   \
    \ }\n    return \"YES\" if ($even > $odd);\n    return \"NO\";\n}", "    for my\
    \ $e (@$lst1) {\n        if ($e % 2 == 1) {\n            for my $f (@$lst2) {\n\
    \                if ($f % 2 == 0) {\n                    $e = $f;\n          \
    \          last;\n                }\n            }\n        }\n    }\n    foreach\
    \ my $x (@$lst1) {\n        if ($x % 2 == 1) {\n            return \"NO\";\n \
    \       }\n    }\n    return \"YES\";\n}", "    # @_ is the list of the subroutine\
    \ (or function)'s arguments.\n    # In this case, @_ is ($lst1, $lst2).\n    #\
    \ ($lst1, $lst2) = @_ assigns the first element of @_ to $lst1,\n    # and the\
    \ second element of @_ to $lst2.\n    my $answer = \"NO\";\n    # Note: It's important\
    \ to use the same variable names in your solution as the\n    # ones in the input\
    \ list.\n    return $answer;\n}", "    # You should complete this function (you\
    \ may need to add other subroutines\n    # to help this one).\n    my $sum1 =\
    \ 0;\n    my $sum2 = 0;\n    for my $item (@$lst1) {\n        $sum1 += $item;\n\
    \    }\n    for my $item (@$lst2) {\n        $sum2 += $item;\n    }\n    if ($sum1\
    \ % 2 == 0 && $sum2 % 2 == 0) {\n        return \"YES\";\n    }\n    if ($sum1\
    \ % 2 == 1 && $sum2 % 2 == 1) {\n        return \"NO\";\n    }\n    for my $index\
    \ (0..$#$lst1) {\n        if ($lst1->[$index] % 2 == 1 && $lst2->[$index] % 2\
    \ == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n\
    }", "    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n    my $len = scalar @lst1;\n\
    \    my $sum1 = 0;\n    my $sum2 = 0;\n    for(my $i = 0; $i < $len; $i++) {\n\
    \        $sum1 += $lst1[$i];\n        $sum2 += $lst2[$i];\n    }\n    if ($sum1\
    \ % 2 == 0) {\n        return \"YES\";\n    } elsif ($sum2 % 2 == 0) {\n     \
    \   return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    my\
    \ $exchange_flag = \"NO\";\n    my $lst1_len = @$lst1;\n    my $lst2_len = @$lst2;\n\
    \    my $even_count = 0;\n    my @lst1_copy = @$lst1;\n    my @lst2_copy = @$lst2;\n\
    \    foreach my $item (@lst1_copy) {\n        if ($item % 2 == 0) {\n        \
    \    $even_count = $even_count + 1;\n        }\n    }\n    for (my $i = 0; $i\
    \ < $lst1_len; $i++) {\n        for (my $j = 0; $j < $lst2_len; $j++) {\n    \
    \        if (($lst1_copy[$i] % 2 == 1) && ($lst2_copy[$j] % 2 == 0)) {\n     \
    \           $lst1_copy[$i] = $lst2_copy[$j];\n                $even_count = $even_count\
    \ + 1;\n            }\n        }\n    }\n    if ($even_count == $lst1_len) {\n\
    \        $exchange_flag = \"YES\";\n    }\n    return $exchange_flag;\n}", " \
    \   my $evens = 0;\n    my $odds = 0;\n    for (@$lst1) {\n        if ($_ % 2\
    \ == 0) {\n            $evens++;\n        } else {\n            $odds++;\n   \
    \     }\n    }\n    for (@$lst2) {\n        if ($_ % 2 == 0) {\n            $evens++;\n\
    \        } else {\n            $odds++;\n        }\n    }\n    if ($evens > $odds)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}",
  "    my $odd_num = 0;\n    foreach my $num (@$lst1) {\n        if ($num % 2 == 1)\
    \ {\n            $odd_num++;\n        }\n    }\n    my $even_num = 0;\n    foreach\
    \ my $num (@$lst2) {\n        if ($num % 2 == 0) {\n            $even_num++;\n\
    \        }\n    }\n    if ($odd_num == $even_num) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    my $result = 'NO';\n  \
    \  foreach my $i (0..$#$lst1) {\n        if ($lst1->[$i] % 2 != 0) {\n       \
    \     my $found = 0;\n            foreach my $j (0..$#$lst2) {\n             \
    \   if ($lst2->[$j] % 2 == 0) {\n                    my $tmp = $lst1->[$i];\n\
    \                    $lst1->[$i] = $lst2->[$j];\n                    $lst2->[$j]\
    \ = $tmp;\n                    $found = 1;\n                    last;\n      \
    \          }\n            }\n            if (!$found) {\n                last;\n\
    \            }\n        }\n    }\n    foreach my $i (0..$#$lst1) {\n        if\
    \ ($lst1->[$i] % 2 != 0) {\n            return $result;\n        }\n    }\n  \
    \  return 'YES';\n}", "    my $exchange_possible = 0;\n    for (my $i = 0; $i\
    \ < scalar(@$lst1); $i++) {\n        if ($lst1->[$i] % 2 != 0) {\n           \
    \ for (my $j = 0; $j < scalar(@$lst2); $j++) {\n                if ($lst2->[$j]\
    \ % 2 == 0) {\n                    $lst1->[$i] = $lst2->[$j];\n              \
    \      $lst2->[$j] = $lst1->[$i];\n                    $exchange_possible = 1;\n\
    \                    last;\n                }\n            }\n        }\n    }\n\
    \    return $exchange_possible == 1 ? \"YES\" : \"NO\";\n}", "    my($n_odd1,\
    \ $n_odd2) = (0, 0);\n    foreach my $num (@$lst1) {\n        $n_odd1++ if $num\
    \ % 2 == 1;\n    }\n    foreach my $num (@$lst2) {\n        $n_odd2++ if $num\
    \ % 2 == 1;\n    }\n    return \"YES\" if $n_odd1 == $n_odd2;\n    return \"NO\"\
    ;\n}\nmy $lst1 = [1, 2, 3, 4];\nmy $lst2 = [1, 2, 3, 4];\nprint exchange($lst1,\
    \ $lst2) . \"\\n\";\nmy $lst1 = [1, 2, 3, 4];\nmy $lst2 = [1, 5, 3, 4];\nprint\
    \ exchange($lst1, $lst2) . \"\\n\";", "    my $result = \"NO\";\n    foreach my\
    \ $i (@$lst1) {\n        if ($i % 2 != 0) {\n            foreach my $j (@$lst2)\
    \ {\n                if ($j % 2 == 0) {\n                    $result = \"YES\"\
    ;\n                    last;\n                }\n            }\n        }\n  \
    \  }\n    return $result;\n}", "    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n\
    \    my $count_even = 0;\n    for my $i (0..scalar(@lst1)-1) {\n        if ($lst1[$i]\
    \ % 2 == 0) {\n            $count_even++;\n        }\n    }\n    my $count_odd\
    \ = scalar(@lst1) - $count_even;\n    for my $i (0..scalar(@lst2)-1) {\n     \
    \   if ($lst2[$i] % 2 == 0) {\n            $count_even++;\n        } else {\n\
    \            $count_odd++;\n        }\n    }\n    if ($count_even > 0 && $count_odd\
    \ > 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n\
    }", "    my $count = 0;\n    foreach my $x (@$lst1) {\n        if ($x % 2 == 1)\
    \ {\n            $count++;\n        }\n    }\n    foreach my $x (@$lst2) {\n \
    \       if ($x % 2 == 0) {\n            $count--;\n        }\n    }\n    return\
    \ ($count == 0 ? \"YES\" : \"NO\");\n}", "    my $l1 = @$lst1;\n    my $l2 = @$lst2;\n\
    \    if ($l1 != $l2) { return \"NO\"; }\n    my $cnt = 0;\n    for (my $i = 0;\
    \ $i < $l1; $i++) {\n        if ($lst1->[$i] % 2 == 1) {\n            my $found\
    \ = 0;\n            for (my $j = 0; $j < $l2; $j++) {\n                if ($lst2->[$j]\
    \ % 2 == 0) {\n                    $lst1->[$i] = $lst2->[$j];\n              \
    \      $lst2->[$j] = 1;\n                    $found = 1;\n                   \
    \ last;\n                }\n            }\n            if ($found == 0) { return\
    \ \"NO\"; }\n        }\n    }\n    return \"YES\";\n}", "    my $exchanged = 0;\n\
    \    for (my $i = 0; $i < @$lst1; $i++) {\n        if ($lst1->[$i] % 2 == 1) {\n\
    \            for (my $j = 0; $j < @$lst2; $j++) {\n                if ($lst2->[$j]\
    \ % 2 == 0) {\n                    ($lst1->[$i], $lst2->[$j]) = ($lst2->[$j],\
    \ $lst1->[$i]);\n                    $exchanged = 1;\n                    last;\n\
    \                }\n            }\n            if (!$exchanged) {\n          \
    \      return \"NO\";\n            }\n        }\n    }\n    return \"YES\";\n}",
  "    my $flag = 0;\n    foreach my $i (@$lst1) {\n        if ($i % 2 == 1) {\n \
    \           $flag = 1;\n            last;\n        }\n    }\n    if ($flag ==\
    \ 0) {\n        return \"YES\";\n    } else {\n        my $flag1 = 0;\n      \
    \  foreach my $j (@$lst2) {\n            if ($j % 2 == 0) {\n                $flag1\
    \ = 1;\n                last;\n            }\n        }\n        if ($flag1 ==\
    \ 0) {\n            return \"NO\";\n        } else {\n            return \"YES\"\
    ;\n        }\n    }\n}", "    my $lst_len = @$lst1;\n    my $can_exchange = 0;\n\
    \    for (my $i = 0; $i < $lst_len; $i++) {\n        if ($lst1->[$i] % 2 == 1)\
    \ {\n            for (my $j = 0; $j < $lst_len; $j++) {\n                if ($lst2->[$j]\
    \ % 2 == 0) {\n                    $can_exchange = 1;\n                    my\
    \ $tmp = $lst1->[$i];\n                    $lst1->[$i] = $lst2->[$j];\n      \
    \              $lst2->[$j] = $tmp;\n                    last;\n              \
    \  }\n            }\n        }\n        last if $can_exchange == 0;\n    }\n \
    \   return $can_exchange ? \"YES\" : \"NO\";\n}", "    # 1. get even and odd number\
    \ from 2 lists\n    my @odd1;\n    my @even1;\n    my @odd2;\n    my @even2;\n\
    \    for my $num (@$lst1) {\n        if ($num % 2 == 0) {\n            push @even1,\
    \ $num;\n        } else {\n            push @odd1, $num;\n        }\n    }\n \
    \   for my $num (@$lst2) {\n        if ($num % 2 == 0) {\n            push @even2,\
    \ $num;\n        } else {\n            push @odd2, $num;\n        }\n    }\n \
    \   # 2. exchange odd and even if both lists have enough even and odd numbers\n\
    \    if (scalar(@odd1) <= scalar(@even2) && scalar(@odd2) <= scalar(@even1)) {\n\
    \        # exchange\n        my @even_lst1 = @even1;\n        my @even_lst2 =\
    \ @even2;\n        for (my $i = 0; $i < scalar(@odd1); $i++) {\n            push\
    \ @even_lst1, $odd2[$i];\n            push @even_lst2, $odd1[$i];\n        }\n\
    \        # check if there are odd numbers in lst1\n        for my $num (@even_lst1)\
    \ {\n            if ($num % 2 != 0) {\n                return \"NO\";\n      \
    \      }\n        }\n        return \"YES\";\n    } else {\n        return \"\
    NO\";\n    }\n}", "    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n    my $change\
    \ = 0;\n    for(my $i = 0; $i < @lst1; $i++) {\n        if($lst1[$i] % 2 == 1)\
    \ {\n            $change = 1;\n            last;\n        }\n    }\n    if($change\
    \ == 0) {\n        return \"YES\";\n    }\n    else {\n        for(my $i = 0;\
    \ $i < @lst1; $i++) {\n            for(my $j = 0; $j < @lst2; $j++) {\n      \
    \          if($lst1[$i] % 2 == 1 && $lst2[$j] % 2 == 0) {\n                  \
    \  ($lst1[$i], $lst2[$j]) = ($lst2[$j], $lst1[$i]);\n                    $change\
    \ = 0;\n                    last;\n                }\n            }\n        \
    \    if($change == 0) {\n                last;\n            }\n        }\n   \
    \     if($change == 0) {\n            return \"YES\";\n        }\n        else\
    \ {\n            return \"NO\";\n        }\n    }\n}", "    return \"NO\" if (not\
    \ is_even($lst1));\n    my @even_in_lst2 = grep {is_even($_)} @$lst2;\n    my\
    \ @odd_in_lst1 = grep {not is_even($_)} @$lst1;\n    if (@even_in_lst2 < @odd_in_lst1)\
    \ {\n        return \"NO\";\n    }\n    return \"YES\";\n}", "    my($evens_in_lst1,\
    \ $odds_in_lst2);\n    foreach my $elem (@$lst1) {\n        $evens_in_lst1++ if\
    \ $elem % 2 == 0;\n    }\n    foreach my $elem (@$lst2) {\n        $odds_in_lst2++\
    \ if $elem % 2 == 1;\n    }\n    return $evens_in_lst1 >= $odds_in_lst2 ? \"YES\"\
    \ : \"NO\";\n}", "    # Your code here\n}", "    # TODO: your solution goes here\n\
    \    # ......\n    my $count = 0;\n    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    my @newlst1 = @$lst1;\n    my @newlst2 = @$lst2;\n    for (my $i =\
    \ 0; $i < scalar @newlst1; $i++) {\n        if ($newlst1[$i] % 2 == 0) {\n   \
    \         $even_count++;\n        } else {\n            $odd_count++;\n      \
    \  }\n    }\n    if ($even_count == scalar @newlst1) {\n        return \"YES\"\
    ;\n    }\n    if ($odd_count == scalar @newlst1) {\n        return \"NO\";\n \
    \   }\n    for (my $i = 0; $i < scalar @newlst1; $i++) {\n        for (my $j =\
    \ 0; $j < scalar @newlst2; $j++) {\n            if ($newlst1[$i] % 2 == 0 && $newlst2[$j]\
    \ % 2 != 0) {\n                my $temp = $newlst1[$i];\n                $newlst1[$i]\
    \ = $newlst2[$j];\n                $newlst2[$j] = $temp;\n                $count++;\n\
    \            }\n        }\n    }\n    if ($count > 0) {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }\n}", "    my @ints = grep { $_\
    \ % 2 == 0 } @$lst1;\n    my @odds = grep { $_ % 2 != 0 } @$lst1;\n    return\
    \ length(@ints) == 0 ? \"NO\" : \"YES\";\n}", "    my $result = 'NO';\n    for\
    \ my $i (0 .. @$lst1 - 1) {\n        for my $j (0 .. @$lst2 - 1) {\n         \
    \   if ($lst1->[$i] % 2 == 1 && $lst2->[$j] % 2 == 0) {\n                $lst1->[$i]\
    \ ^= $lst2->[$j];\n                $lst2->[$j] ^= $lst1->[$i];\n             \
    \   $lst1->[$i] ^= $lst2->[$j];\n                $result = 'YES';\n          \
    \  }\n        }\n    }\n    return $result;\n}", "    my %h1 = map { $_ => 1 }\
    \ @$lst1;\n    my %h2 = map { $_ => 1 } @$lst2;\n    my %h1odd = map { $_ => 1\
    \ } grep { $_ % 2 == 1 } @$lst1;\n    my %h2odd = map { $_ => 1 } grep { $_ %\
    \ 2 == 1 } @$lst2;\n    my $h1oddCount = scalar keys %h1odd;\n    my $h2oddCount\
    \ = scalar keys %h2odd;\n    return \"YES\" if $h1oddCount == 0 || $h2oddCount\
    \ == 0;\n    my $h1evenCount = scalar keys %h1 - $h1oddCount;\n    my $h2evenCount\
    \ = scalar keys %h2 - $h2oddCount;\n    if ($h1oddCount == $h2evenCount && $h2oddCount\
    \ == $h1evenCount) {\n        return \"YES\";\n    } else {\n        return \"\
    NO\";\n    }\n}", "    my $count = 0;\n    foreach (@$lst1) {\n        $count++\
    \ if $_ % 2;\n    }\n    return \"YES\" if $count == 0;\n    if ($count > @$lst2)\
    \ {\n        return \"NO\";\n    }\n    foreach (@$lst2) {\n        return \"\
    YES\" if $_ % 2;\n    }\n    return \"NO\";\n}", "    my $exchange = 0;\n    for\
    \ my $i (0..$#$lst1) {\n        next if $lst1->[$i] % 2 == 0;\n        my $j =\
    \ 0;\n        for $j (0..$#$lst2) {\n            last if $lst2->[$j] % 2 == 0;\n\
    \        }\n        last if $j == $#$lst2 + 1;\n        $lst1->[$i] ^= $lst2->[$j];\n\
    \        $lst2->[$j] ^= $lst1->[$i];\n        $lst1->[$i] ^= $lst2->[$j];\n  \
    \      $exchange = 1;\n    }\n    if($exchange) {\n        return \"YES\";\n \
    \   } else {\n        return \"NO\";\n    }\n}", "    my @lst1 = @$lst1;\n   \
    \ my @lst2 = @$lst2;\n    my $res = \"YES\";\n    for my $i (0..scalar(@lst1)-1)\
    \ {\n        if($lst1[$i] % 2 == 1) {\n            for my $j (0..scalar(@lst2)-1)\
    \ {\n                if($lst2[$j] % 2 == 0) {\n                    $lst1[$i] =\
    \ $lst2[$j];\n                    $lst2[$j] = $lst1[$i];\n                   \
    \ last;\n                }\n            }\n        }\n    }\n    for my $i (0..scalar(@lst1)-1)\
    \ {\n        if($lst1[$i] % 2 == 1) {\n            $res = \"NO\";\n          \
    \  last;\n        }\n    }\n    return $res;\n}", "    my $even = 0;\n    for\
    \ my $i (@$lst1) {\n        if ($i % 2 == 0) {\n            $even++;\n       \
    \ }\n    }\n    my $odd = scalar(@$lst1) - $even;\n    my $odd2 = 0;\n    for\
    \ my $i (@$lst2) {\n        if ($i % 2 == 1) {\n            $odd2++;\n       \
    \ }\n    }\n    if ($odd2 >= $odd) {\n        return \"YES\";\n    } else {\n\
    \        return \"NO\";\n    }\n}", "    my $count = 0;\n    for (my $i = 0; $i\
    \ < scalar(@$lst1); $i++) {\n        if ($lst1->[$i] % 2 == 1) {\n           \
    \ for (my $j = 0; $j < scalar(@$lst2); $j++) {\n                if ($lst2->[$j]\
    \ % 2 == 0) {\n                    $lst1->[$i] = $lst2->[$j];\n              \
    \      $lst2->[$j] = $lst1->[$i];\n                    $count++;\n           \
    \         last;\n                }\n            }\n        }\n    }\n    if ($count\
    \ > 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n\
    }", "    my %hash;\n    my $i;\n    my $j;\n    my $pair;\n    my $out;\n    my\
    \ $counter;\n    my $even;\n    my $odd;\n    my $elements;\n    my $flag;\n \
    \   $out = \"NO\";\n    $counter = 0;\n    $even = 0;\n    $odd = 0;\n    $flag\
    \ = 0;\n    $elements = scalar @$lst1;\n    for ($i = 0; $i < $elements; $i++)\
    \ {\n        $pair = $$lst1[$i] . \" \" . $$lst2[$i];\n        if (exists $hash{$pair})\
    \ {\n            $out = \"YES\";\n            $flag = 1;\n            last;\n\
    \        }\n        else {\n            $hash{$pair} = 1;\n        }\n    }\n\
    \    if ($flag == 0) {\n        for ($i = 0; $i < $elements; $i++) {\n       \
    \     if (($$lst1[$i] % 2) == 0) {\n                $even++;\n            }\n\
    \            if (($$lst2[$i] % 2) == 0) {\n                $even++;\n        \
    \    }\n            if (($$lst1[$i] % 2) != 0) {\n                $odd++;\n  \
    \          }\n            if (($$lst2[$i] % 2) != 0) {\n                $odd++;\n\
    \            }\n        }\n        if ($even > $odd) {\n            $out = \"\
    YES\";\n        }\n    }\n    return $out;\n}", "    my $odd = 0;\n    map { $odd\
    \ += 1 if $_ % 2 != 0 } @$lst1;\n    return $odd > scalar(@$lst2) ? \"NO\" : \"\
    YES\";\n}", "    my $l1 = scalar @$lst1;\n    my $l2 = scalar @$lst2;\n    my\
    \ $even1 = 0;\n    my $even2 = 0;\n    for (my $i = 0; $i < $l1; $i++) {\n   \
    \     if ($lst1->[$i] % 2 == 0) {\n            $even1++;\n        }\n    }\n \
    \   for (my $i = 0; $i < $l2; $i++) {\n        if ($lst2->[$i] % 2 == 0) {\n \
    \           $even2++;\n        }\n    }\n    return $even1 + $even2 >= $l1;\n}",
  "    # your code here\n    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n    my $odd_lst1\
    \ = grep{$_ % 2 == 1} @lst1;\n    my $even_lst2 = grep{$_ % 2 == 0} @lst2;\n \
    \   if($odd_lst1 > $even_lst2){\n        return \"NO\";\n    }\n    else{\n  \
    \      return \"YES\";\n    }\n}", "    my %r;\n    foreach my $i (@$lst1) {\n\
    \        $r{$i} += 1;\n    }\n    foreach my $i (@$lst2) {\n        $r{$i} +=\
    \ 1;\n    }\n    foreach my $i (keys %r) {\n        return \"NO\" if $r{$i} %\
    \ 2 != 0;\n    }\n    return \"YES\";\n}", "    my %hash;\n    my $i;\n    # puts\
    \ the value of each element of lst1 as the key of %hash and its count as the value\n\
    \    foreach $i (@$lst1) {\n        if (defined $hash{$i}) {\n            $hash{$i}++;\n\
    \        } else {\n            $hash{$i} = 1;\n        }\n    }\n    # puts the\
    \ value of each element of lst2 as the key of %hash and its count as the value\n\
    \    foreach $i (@$lst2) {\n        if (defined $hash{$i}) {\n            $hash{$i}++;\n\
    \        } else {\n            $hash{$i} = 1;\n        }\n    }\n    # if the\
    \ count of the value of the key is an odd number, the exchange is impossible\n\
    \    foreach $i (keys %hash) {\n        if ($hash{$i} % 2 != 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    my $exchanged\
    \ = 'NO';\n    my %used = ();\n    if (first {$_ % 2} @$lst1) {\n        foreach\
    \ my $idx (0..$#$lst1) {\n            my $lst1_elem = $lst1->[$idx];\n       \
    \     if (!$used{$lst1_elem} && $lst1_elem % 2) {\n                foreach my\
    \ $swap (0..$#$lst2) {\n                    my $lst2_elem = $lst2->[$swap];\n\
    \                    if (!$used{$lst2_elem} && $lst2_elem % 2 == 0) {\n      \
    \                  $lst1->[$idx] = $lst2_elem;\n                        $lst2->[$swap]\
    \ = $lst1_elem;\n                        $used{$lst1_elem} = 1;\n            \
    \            $used{$lst2_elem} = 1;\n                        last;\n         \
    \           }\n                }\n            }\n        }\n        $exchanged\
    \ = all {$_ % 2 == 0} @$lst1 ? 'YES' : 'NO';\n    }\n    return $exchanged;\n}",
  "    my $evens = 0;\n    for (my $i = 0; $i < scalar(@$lst1); $i++) {\n        $evens++\
    \ if $lst1->[$i] % 2 == 0;\n    }\n    if ($evens == scalar(@$lst1)) {\n     \
    \   return \"YES\";\n    }\n    for (my $i = 0; $i < scalar(@$lst1); $i++) {\n\
    \        for (my $j = 0; $j < scalar(@$lst2); $j++) {\n            my $lst1_copy\
    \ = [@$lst1];\n            my $lst2_copy = [@$lst2];\n            if ($lst1_copy->[$i]\
    \ % 2 == 0) {\n                ($lst1_copy->[$i], $lst2_copy->[$j]) = ($lst2_copy->[$j],\
    \ $lst1_copy->[$i]);\n                return \"YES\" if &exchange($lst1_copy,\
    \ $lst2_copy) eq \"YES\";\n            }\n        }\n    }\n    return \"NO\"\
    ;\n}", "    my $ret = \"NO\";\n    # TODO: implement this function\n    for (my\
    \ $i = 0; $i < @$lst1; $i++) {\n        if ($lst1->[$i] % 2 == 1) {\n        \
    \    for (my $j = 0; $j < @$lst2; $j++) {\n                if ($lst2->[$j] % 2\
    \ == 0) {\n                    my $temp = $lst1->[$i];\n                    $lst1->[$i]\
    \ = $lst2->[$j];\n                    $lst2->[$j] = $temp;\n                 \
    \   $ret = \"YES\";\n                    last;\n                }\n          \
    \  }\n        }\n    }\n    return $ret;\n}", "    my $even_cnt = 0;\n    my $odd_cnt\
    \ = 0;\n    map {\n        if ($_ % 2 == 0) {\n            $even_cnt++;\n    \
    \    } else {\n            $odd_cnt++;\n        }\n    } @$lst1;\n    map {\n\
    \        if ($_ % 2 == 0) {\n            $even_cnt--;\n        } else {\n    \
    \        $odd_cnt--;\n        }\n    } @$lst2;\n    if ($even_cnt == 0 && $odd_cnt\
    \ == 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n   \
    \ }\n}", "    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n    my $evens = 0;\n\
    \    for(my $i = 0; $i < @lst1; $i++) {\n        if($lst1[$i] % 2 == 0) {\n  \
    \          $evens++;\n        }\n    }\n    my $evens2 = 0;\n    for(my $i = 0;\
    \ $i < @lst2; $i++) {\n        if($lst2[$i] % 2 == 0) {\n            $evens2++;\n\
    \        }\n    }\n    return ($evens + $evens2 == @lst1) ? \"YES\" : \"NO\";\n\
    }", "    return \"YES\" if (all_even($lst1));\n    foreach my $i (0..scalar(@$lst1)-1)\
    \ {\n        foreach my $j (0..scalar(@$lst2)-1) {\n            my @lst1_copy\
    \ = @$lst1;\n            my @lst2_copy = @$lst2;\n            $lst1_copy[$i] =\
    \ $lst2_copy[$j];\n            $lst2_copy[$j] = $lst1[$i];\n            return\
    \ \"YES\" if (all_even(\\@lst1_copy));\n        }\n    }\n    return \"NO\";\n\
    }", "    my @lst1 = @$lst1;\n    my @lst2 = @$lst2;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $len = @lst1;\n    my $len2 = @lst2;\n    while ($i < $len) {\n\
    \        if ($lst1[$i] % 2 == 0) {\n            $i++;\n        } else {\n    \
    \        $j = 0;\n            while ($j < $len2) {\n                if ($lst2[$j]\
    \ % 2 == 1) {\n                    $lst1[$i] = $lst2[$j];\n                  \
    \  $lst2[$j] = $lst1[$i];\n                    $i++;\n                    $j++;\n\
    \                    last;\n                }\n                $j++;\n       \
    \     }\n            if ($j == $len2) {\n                return \"NO\";\n    \
    \        }\n        }\n    }\n    return \"YES\";\n}", "    my $lst1_even = 1;\n\
    \    for my $el (@$lst1) {\n        if ($el % 2) {\n            $lst1_even = 0;\n\
    \            last;\n        }\n    }\n    if ($lst1_even) {\n        return \"\
    YES\";\n    }\n    my $lst2_even = 1;\n    for my $el (@$lst2) {\n        if ($el\
    \ % 2) {\n            $lst2_even = 0;\n            last;\n        }\n    }\n \
    \   if ($lst2_even) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
  "    my $exchanged = 0;\n    for (my $i = 0; $i < scalar(@$lst1); $i++) {\n    \
    \    if ($lst1->[$i] % 2 == 1) {\n            my $odd = $lst1->[$i];\n       \
    \     for (my $j = 0; $j < scalar(@$lst2); $j++) {\n                if ($lst2->[$j]\
    \ % 2 == 0) {\n                    $lst1->[$i] = $lst2->[$j];\n              \
    \      $lst2->[$j] = $odd;\n                    $exchanged = 1;\n            \
    \        last;\n                }\n            }\n            if (!$exchanged)\
    \ {\n                return \"NO\";\n            }\n        }\n    }\n    return\
    \ \"YES\";\n}", "    return \"YES\" if all_even($lst1);\n    return \"NO\" if\
    \ any_odd($lst2);\n    my($x, $y) = exchange_helper($lst1, $lst2);\n    return\
    \ \"YES\" if $x == 0 && $y == 0;\n    return \"NO\";\n}", "    my $sum = $lst1->[0]\
    \ + $lst2->[0];\n    return $sum % 2 ? \"NO\" : \"YES\";\n}", "    my $lst1_odd_count\
    \ = 0;\n    my $lst2_odd_count = 0;\n    foreach (@$lst1) {\n        if ($_ %\
    \ 2 == 1) {\n            $lst1_odd_count++;\n        }\n    }\n    foreach (@$lst2)\
    \ {\n        if ($_ % 2 == 1) {\n            $lst2_odd_count++;\n        }\n \
    \   }\n    $lst1_odd_count == $lst2_odd_count ? \"YES\" : \"NO\";\n}", "    for\
    \ my $e (@$lst1) {\n        return \"YES\" if ($e % 2 == 0);\n    }\n    for my\
    \ $e (@$lst1) {\n        for my $f (@$lst2) {\n            if (is_exchangeable($e,\
    \ $f)) {\n                return \"YES\";\n            }\n        }\n    }\n \
    \   return \"NO\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
