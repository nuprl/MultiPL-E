name: HumanEval_11_string_xor
language: pl
prompt: "# Input are two strings a and b consisting only of 1s and 0s.\n# Perform\
  \ binary XOR on these inputs and return result also as a string.\n# >>> string_xor(\"\
  010\", \"110\")\n# \"100\"\nsub string_xor {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_xor;\n\
  \        if(eq_deeply($candidate->(\"111000\", \"101010\"),\"010010\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1\", \"1\"),\"0\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"0101\", \"0000\"),\"0101\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $bin_a = unpack('B*', $a);\n    my $bin_b = unpack('B*', $b);\n\
    \    my $ret = '';\n    for (my $i = 0; $i < length($bin_a); $i++) {\n       \
    \ if (substr($bin_a, $i, 1) eq substr($bin_b, $i, 1)) {\n            $ret .= '0';\n\
    \        } else {\n            $ret .= '1';\n        }\n    }\n    return pack('B*',\
    \ $ret);\n}", "    my $result = \"\";\n    my $length = length($a);\n    for (my\
    \ $i = 0; $i < $length; $i++) {\n        my $a1 = substr($a, $i, 1);\n       \
    \ my $b1 = substr($b, $i, 1);\n        $result .= ($a1 xor $b1);\n    }\n    return\
    \ $result;\n}", "    my $res = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        my $char1 = substr($a, $i, 1);\n        my $char2 = substr($b, $i,\
    \ 1);\n        $res .= $char1 ^ $char2;\n    }\n    return $res;\n}", "    my\
    \ $res = \"\";\n    for (my $i = 0; $i < length($a); $i++) {\n        $res .=\
    \ substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $res;\n}", "    my\
    \ $r;\n    my $n = length($a);\n    for (my $i = 0; $i < $n; $i++) {\n       \
    \ $r .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n    return $r;\n}", " \
    \   if ($a eq \"\") { return $b; }\n    if ($b eq \"\") { return $a; }\n    return\
    \ \"\".(($a+0) ^ ($b+0));\n}", "    my $c = \"\";\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        my $aa = substr($a, $i, 1);\n        my $bb = substr($b, $i,\
    \ 1);\n        if ($aa eq $bb) {\n            $c .= \"0\";\n        } else {\n\
    \            $c .= \"1\";\n        }\n    }\n    return $c;\n}", "    return $a\
    \ ^ $b;\n}", "    return '' if length($a) != length($b);\n    my $result = '';\n\
    \    for my $i (0 .. length($a) - 1) {\n        my $a1 = substr($a, $i, 1);\n\
    \        my $b1 = substr($b, $i, 1);\n        $result .= ($a1 ^ $b1);\n    }\n\
    \    return $result;\n}", "    my $result = '';\n    for (my $i = 0; $i < length($a);\
    \ $i++) {\n        $result .= substr($a, $i, 1) ^ substr($b, $i, 1);\n    }\n\
    \    return $result;\n}", "    my $xor = '';\n    my $length = length($a) > length($b)\
    \ ? length($a) : length($b);\n    for (my $i = 0; $i < $length; $i++) {\n    \
    \    my $a_curr = substr($a, $i, 1);\n        my $b_curr = substr($b, $i, 1);\n\
    \        $xor .= $a_curr != $b_curr ? 1 : 0;\n    }\n    return $xor;\n}", " \
    \   return '' if length($a) != length($b);\n    my $result = '';\n    for (my\
    \ $i = 0; $i < length($a); $i++) {\n        $result .= ($a ^ $b) ? 1 : 0;\n  \
    \  }\n    return $result;\n}", "    $a = _bin_to_dec($a);\n    $b = _bin_to_dec($b);\n\
    \    my $res = $a ^ $b;\n    return _dec_to_bin($res);\n}", "    my $r = '';\n\
    \    my @a = split //, $a;\n    my @b = split //, $b;\n    foreach my $i (0..(scalar\
    \ @a - 1)) {\n        $r .= ($a[$i] + $b[$i]) % 2;\n    }\n    return $r;\n}",
  "    my $result = \"\";\n    my $j = length($a) - 1;\n    my $k = length($b) - 1;\n\
    \    my $i = 0;\n    my $x;\n    my $y;\n    for ($i = 0; $i <= $j; $i++) {\n\
    \        $x = substr($a, $i, 1);\n        $y = substr($b, $i, 1);\n        if\
    \ ($x eq $y) {\n            $result = $result . \"0\";\n        } else {\n   \
    \         $result = $result . \"1\";\n        }\n    }\n    return $result;\n}",
  "    return join('', map { $_ == 0 ? 0 : 1 } map { $_ ^= $b } map { unpack('%B*',\
    \ $_) } $a);\n}", "    my $out = \"\";\n    for (my $i = 0; $i < length($a); $i++)\
    \ {\n        $out .= (substr($a, $i, 1) ^ substr($b, $i, 1)) ? \"1\" : \"0\";\n\
    \    }\n    return $out;\n}", '    my($len_a, $len_b, $i, $xor, $result);', " \
    \   if ($a =~ /[^01]/ || $b =~ /[^01]/) {\n        die \"Invalid input!\";\n \
    \   }\n    my $a_bin = unpack(\"B*\", $a);\n    my $b_bin = unpack(\"B*\", $b);\n\
    \    my $out_bin = '';\n    for (my $i = 0; $i < length($a_bin); $i++) {\n   \
    \     $out_bin .= substr($a_bin, $i, 1) ^ substr($b_bin, $i, 1);\n    }\n    return\
    \ pack(\"B*\", $out_bin);\n}", "    my $len = length($a);\n    if ( $len != length($b)\
    \ ) {\n        return \"\";\n    }\n    my $r = \"\";\n    for ( my $i = 0; $i\
    \ < $len; $i++ ) {\n        my $ab = substr($a, $i, 1) . substr($b, $i, 1);\n\
    \        $r .= ( $ab eq \"01\" || $ab eq \"10\" ) ? \"1\" : \"0\";\n    }\n  \
    \  return $r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
