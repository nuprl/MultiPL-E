name: HumanEval_83_starts_one_ends
language: pl
prompt: "# Given a positive integer n, return the count of the numbers of n-digit\n\
  # positive integers that start or end with 1.\nsub starts_one_ends {\n    my($n)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&starts_one_ends;\n\
  \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(2),18)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),180))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1800))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),18000))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    foreach my $i (1 .. $n - 1) {\n        $sum +=\
    \ 9 * 10 ** ($i - 1);\n    }\n    return 10 ** ($n - 1) + $sum;\n}", "    return\
    \ 0 if $n <= 0;\n    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2)\
    \ {\n        return 9;\n    }\n    return 9 * 10**($n-2) + 9;\n}", "    return\
    \ 0 if $n <= 0;\n    return 1 if $n == 1;\n    return starts_one_ends($n - 1)\
    \ + nine_power($n - 1);\n}", "    my $sum = 2;\n    for my $i (2 .. $n) {\n  \
    \      $sum += 9 * 9**($i - 2);\n    }\n    return $sum;\n}", "    my $count =\
    \ 0;\n    $count += (10**($n-1)) - 1 if $n > 1;\n    $count += $n - 1;\n    return\
    \ $count;\n}", "    if($n == 1) {\n        return 2;\n    }\n    return starts_one_ends($n\
    \ - 1) + ends_one_ends($n - 1);\n}", "    my $sum = 0;\n    for (1 .. $n) {\n\
    \        my $num = 10 ** ($_-1);\n        $sum += 1 + $num;\n    }\n    return\
    \ $sum;\n}", '    my($i, $sum);', "    return count_ones($n) + sum_zeros($n-1);\n\
    }", "    return 0 if $n == 0;\n    return 9 if $n == 1;\n    return 45 + 9*(10**($n-2));\n\
    }", "    return [\n        (\n            (\n                power(3, $n-1),\n\
    \                power(3, $n-2),\n            ),\n            (\n            \
    \    power(3, $n-1),\n                power(3, $n-2),\n            ),\n      \
    \  ),\n    ];\n}", "    return 10 if $n == 1;\n    $n--;\n    return 9 * 9 * 8\
    \ * $n;\n}", "    return 1 if $n == 1;\n    return 10*starts_one_ends($n-1) +\
    \ 10**($n-1);\n}", "    my($res);\n    if ($n == 1) {\n        $res = 9;\n   \
    \ } else {\n        $res = starts_one_ends($n - 1) * 8;\n        $res += 10 **\
    \ ($n - 1);\n    }\n    return $res;\n}", "    $n == 1 and return 3;\n    my $sum\
    \ = 0;\n    my $prod = 1;\n    foreach my $i (0 .. $n - 1) {\n        $sum +=\
    \ $prod;\n        $prod *= 10;\n    }\n    return $sum + $sum;\n}", "    my($count);\n\
    \    my($tens);\n    $count = $n;\n    $tens = 1;\n    for (my($i) = 2; $i <=\
    \ $n; $i++) {\n        $tens *= 10;\n        $count += $tens;\n    }\n    return\
    \ $count;\n}", "    return 0 if $n <= 0;\n    return 1 if $n == 1;\n    $starts_one_ends[$n]\
    \ //= starts_one_ends($n - 1) + 2 * ends_one_ends($n - 1);\n}", "    my $i = 0;\n\
    \    my $j = 0;\n    for my $count (1 .. $n) {\n        $i += count_with_limit($count\
    \ - 1, 8);\n        $j += count_with_limit($count - 1, 9);\n    }\n    return\
    \ $i + $j;\n}", "    my $s = 0;\n    my $e = 0;\n    my $n_minus_one = $n - 1;\n\
    \    if ($n_minus_one == 0) {\n        $s = $e = 1;\n    } else {\n        $s\
    \ = $e = 1 + 9*prod(1..$n_minus_one);\n        $s += prod(1..$n_minus_one);\n\
    \        $e += prod(1..$n_minus_one);\n    }\n    return ($s, $e);\n}", "    my\
    \ $start_ends = sub {\n        my($k) = @_;\n        # If the number is less than\
    \ 10, there's only one possibility.\n        return 1 if $k == 1;\n        # Otherwise,\
    \ for each digit that could start the number, there are\n        # $start_ends->($k\
    \ - 1) possibilities for the rest of the number.\n        my $max = 0;\n     \
    \   foreach my $d (1 .. 9) {\n            $max += $start_ends->($k - 1);\n   \
    \     }\n        return $max;\n    };\n    return $start_ends->($n);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
