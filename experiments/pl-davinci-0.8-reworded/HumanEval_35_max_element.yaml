name: HumanEval_35_max_element
language: pl
prompt: "# Return maximum element in the array.\n# >>> max_element([1, 2, 3])\n# 3\n\
  # >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\nsub max_element\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n\
  \        if(eq_deeply($candidate->([1, 2, 3]),3)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3,\
  \ 3, 9, 0, 124, 1, -10]),124)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $max = $l->[0];\n    for my $x (@$l) {\n        $max = $x if\
    \ $x > $max;\n    }\n    return $max;\n}", "    return undef unless ref($l) eq\
    \ 'ARRAY';\n    my $max = $l->[0];\n    for my $i (1 .. $#$l) {\n        if ($l->[$i]\
    \ > $max) {\n            $max = $l->[$i];\n        }\n    }\n    return $max;\n\
    }", "    my $max = $l->[0];\n    foreach my $item (@$l) {\n        $max = $item\
    \ if $item > $max;\n    }\n    return $max;\n}", "    my $res = $l->[0];\n   \
    \ foreach my $el (@$l) {\n        $res = $el if $el > $res;\n    }\n    return\
    \ $res;\n}", "    my($max) = $l->[0];\n    for my $e (@$l) {\n        $max = $e\
    \ if $e > $max;\n    }\n    return $max;\n}", "    my $max = $l->[0];\n    foreach\
    \ my $e (@$l) {\n        $max = $e if $e > $max;\n    }\n    return $max;\n}",
  "    my $max = undef;\n    foreach my $x (@$l) {\n        if (!defined($max) ||\
    \ $x > $max) {\n            $max = $x;\n        }\n    }\n    return $max;\n}",
  "    my $max = $$l[0];\n    for my $i (@$l) {\n        $max = $i if $i > $max;\n\
    \    }\n    return $max;\n}", "    my $m = @$l[0];\n    foreach(@$l) {\n     \
    \   $m = $_ if $_ > $m;\n    }\n    return $m;\n}", "    my $m = $l->[0];\n  \
    \  foreach (@$l) {\n        $m = $_ if $m < $_;\n    }\n    return $m;\n}", " \
    \   my $max = $l->[0];\n    foreach my $e (@$l) {\n        $max = $e if $e > $max;\n\
    \    }\n    return $max;\n}", "    my $max = $l->[0];\n    foreach (@$l) {\n \
    \       $max = $_ if $_ > $max;\n    }\n    return $max;\n}", "    die \"array\"\
    \ unless is_array($l);\n    my $max = $l->[0];\n    for my $e (@$l) {\n      \
    \  $max = $e if $e > $max;\n    }\n    return $max;\n}", "    my $i;\n    my $max\
    \ = -1e9999;\n    for $i (@$l) {\n        $max = $i if $i > $max;\n    }\n   \
    \ return $max;\n}", "    my $result = $l->[0];\n    for my $e (@$l) {\n      \
    \  $result = $e if $e > $result;\n    }\n    return $result;\n}", "    my $max\
    \ = $l->[0];\n    for my $i (1 .. $#$l) {\n        if ($l->[$i] > $max) {\n  \
    \          $max = $l->[$i];\n        }\n    }\n    return $max;\n}", "    my $m\
    \ = undef;\n    for my $i (@$l) {\n        if (!defined($m) || $i > $m) {\n  \
    \          $m = $i;\n        }\n    }\n    return $m;\n}", "    my $max = $l->[0];\n\
    \    for my $e (@$l) {\n        $max = $e if $e > $max;\n    }\n    return $max;\n\
    }", "    my $max = $l->[0];\n    foreach my $x (@$l) {\n        $max = $x if $x\
    \ > $max;\n    }\n    return $max;\n}", "    my $max = -INF;\n    while(@$l >\
    \ 0) {\n        my $e = shift @$l;\n        $max = $e if $e > $max;\n    }\n \
    \   return $max;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
