name: HumanEval_108_count_nums
language: pl
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums([])\n# 0\n# >>> count_nums([-1, 11, -11])\n# 1\n#\
  \ >>> count_nums([1, 1, 2])\n# 3\nsub count_nums {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_nums;\n\
  \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, 0]),0)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 1, 2, -2, 3, 4, 5]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 100, 98, -7, 1, -1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
  \ 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return sum(map {sign_sum($_) > 0} @$arr);\n}", "    my $i = 0;\n\
    \    my $j = 0;\n    my $sum = 0;\n    my $k = 0;\n    my $flag = 0;\n    for($i\
    \ = 0; $i < @$arr; $i++) {\n        if($arr->[$i] < 0) {\n            $arr->[$i]\
    \ = 0 - $arr->[$i];\n            $flag = 1;\n        }\n        while($arr->[$i]\
    \ != 0) {\n            $sum += $arr->[$i] % 10;\n            $arr->[$i] = int\
    \ $arr->[$i] / 10;\n        }\n        if($flag == 1) {\n            $arr->[$i]\
    \ = 0 - $arr->[$i];\n            $flag = 0;\n        }\n        if($sum > 0) {\n\
    \            $k++;\n        }\n        $sum = 0;\n    }\n    return $k;\n}", " \
    \   my $count = 0;\n    foreach my $i (@$arr) {\n        # your code goes here\n\
    \    }\n    return $count;\n}", "    my @res = grep { sum abs(split//) > 0 } @$arr;\n\
    \    return scalar @res;\n}", "    my $count = 0;\n    foreach (@$arr) {\n   \
    \     my $sum = 0;\n        foreach (split(//, abs($_))) {\n            $sum +=\
    \ $_;\n        }\n        $count++ if $sum > 0;\n    }\n    return $count;\n}",
  "    my $count = 0;\n    for (@$arr) {\n        $count++ if sum_digits($_) > 0;\n\
    \    }\n    return $count;\n}", "    my $sum = 0;\n    my $count = 0;\n    foreach\
    \ (@$arr) {\n        if ($_ < 0) {\n            $sum += $_;\n        } else {\n\
    \            $sum += split //, $_;\n        }\n        if ($sum > 0) {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}", "    my $count =\
    \ 0;\n    foreach(@$arr) {\n        $count++ if abs($_) > 9;\n    }\n    return\
    \ $count;\n}", "    return scalar grep {\n        sum(map { abs($_) } $_->signed_digits)\
    \ > 0\n    } @$arr;\n}", "    my $cnt = 0;\n    for my $val (@$arr) {\n      \
    \  my $sum = 0;\n        for my $digit (split //, abs($val)) {\n            $sum\
    \ += $digit;\n        }\n        $cnt++ if $sum > 0;\n    }\n    return $cnt;\n\
    }", "    return 0 unless @$arr;\n    my $count = 0;\n    for my $i (@$arr) {\n\
    \        my $temp = $i < 0 ? -$i : $i;\n        while ($temp > 0) {\n        \
    \    $count += $temp % 10;\n            $temp /= 10;\n        }\n    }\n    return\
    \ $count;\n}", "    my @a = @$arr;\n    my $count = 0;\n    for (my $i = 0; $i\
    \ < scalar @a; $i++) {\n        my $sum = 0;\n        my $num = $a[$i];\n    \
    \    if ($num < 0) {\n            $num = -$num;\n        }\n        while ($num\
    \ > 0) {\n            $sum += $num % 10;\n            $num = int($num / 10);\n\
    \        }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my @arr = @$arr;\n    my $count = 0;\n    for my\
    \ $i (@arr) {\n        my $num = $i;\n        my $sum = 0;\n        if ($num <\
    \ 0) {\n            $num = -$num;\n            $sum += -$i % 10;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = int($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    return 0 if !@$arr;\n    my $sum\
    \ = 0;\n    for (@$arr) {\n        if ($_ < 0) {\n            $sum -= $_;\n  \
    \      } else {\n            $sum += $_;\n        }\n    }\n    return $sum;\n\
    }", "    my $count = 0;\n    for my $num (@$arr) {\n        if ($num == 0) {\n\
    \            $count++;\n        } elsif ($num < 0) {\n            $count++ if\
    \ abs($num) % 10;\n        } else {\n            my $sum = 0;\n            while\
    \ ($num > 0) {\n                $sum += $num % 10;\n                $num /= 10;\n\
    \            }\n            $count++ if $sum;\n        }\n    }\n    return $count;\n\
    }", "    $sum = 0;\n    foreach $i (@$arr) {\n        if ($i >= 0) {\n       \
    \     $sum += $i % 10;\n            $i /= 10;\n        } else {\n            $sum\
    \ += -$i % 10;\n            $i /= 10;\n        }\n    }\n    return $sum;\n}",
  "    return 0 unless @$arr;\n    my $count = 0;\n    for my $num (@$arr) {\n   \
    \     my $sum = 0;\n        $sum += abs($_) for split //, abs($num);\n       \
    \ $count++ if $sum;\n    }\n    return $count;\n}", "    return 0 if scalar(@$arr)\
    \ == 0;\n    my $count = 0;\n    foreach my $num (@$arr) {\n        if ($num <\
    \ 0) {\n            $num = -1 * $num;\n        }\n        my $sum = 0;\n     \
    \   foreach my $digit (split(//, $num)) {\n            $sum += $digit;\n     \
    \   }\n        $count++ if $sum > 0;\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    foreach my $item (@$arr) {\n        my $num = $item;\n        if ($num\
    \ < 0) {\n            $num = -$num;\n        }\n        my $sum = 0;\n       \
    \ while ($num) {\n            $sum += $num % 10;\n            $num /= 10;\n  \
    \      }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n \
    \   return $count;\n}", "    my $nums = 0;\n    for my $i (@$arr) {\n        if\
    \ ($i < 0) {\n            $i = -$i;\n        }\n        my $sum = 0;\n       \
    \ for my $digit (split //, $i) {\n            $sum += $digit;\n        }\n   \
    \     if ($sum > 0) {\n            $nums++;\n        }\n    }\n    return $nums;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
