name: HumanEval_60_sum_to_n
language: pl
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
  # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
  # 55\n# >>> sum_to_n(1)\n# 1\nsub sum_to_n {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_to_n;\n\
  \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(6),21)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),66))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),465))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),5050))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    foreach my $i (1..$n) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}", "    return $n * ($n + 1) / 2;\n}", "    # Check\
    \ the number is positive.\n    my $sum = 0;\n    if ($n > 0) {\n        $sum =\
    \ ($n*($n+1))/2;\n    }\n    return $sum;\n}", "    return $n * ($n + 1) / 2;\n\
    }", "    if ($n == 1) {\n        return 1;\n    }\n    return $n + sum_to_n($n\
    \ - 1);\n}", "    return $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n    for(my\
    \ $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}",
  "    # your code here\n    my $sum = 0;\n    for (1..$n) {\n        $sum += $_;\n\
    \    }\n    return $sum;\n}", "    my($result) = 0;\n    $result = $n * ($n +\
    \ 1) / 2;\n    return $result;\n}", "    my $sum = 0;\n    foreach my $i (1..$n)\
    \ {\n        $sum += $i;\n    }\n    return $sum;\n}", "    return $n*($n+1)/2;\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $sum +=\
    \ $i;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i\
    \ <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}", "    my $sum\
    \ = $n * ($n + 1) / 2;\n    return $sum;\n}", "    my $sum = 0;\n    $sum += $_\
    \ for (1..$n);\n    return $sum;\n}", "    if ($n == 1) {\n        return 1;\n\
    \    }\n    return $n + sum_to_n($n - 1);\n}", "    my $sum = 0;\n    while ($n\
    \ >= 1) {\n        $sum += $n;\n        $n--;\n    }\n    return $sum;\n}", " \
    \   return $n * ($n + 1) / 2;\n}", "    return ($n * ($n + 1)) / 2;\n}", "   \
    \ return $n * ($n + 1) / 2;\n}", "    return $n * ($n + 1) / 2;\n}", "    die\
    \ \"sum_to_n: no n defined\" unless defined $n;\n    die \"sum_to_n: n must be\
    \ >= 1\" unless $n >= 1;\n    return ($n * ($n + 1))/2;\n}", "    my $sum = 0;\n\
    \    for (my $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return\
    \ $sum;\n}", "    return $n * ($n + 1) / 2;\n}", "    return $n * ($n + 1) / 2;\n\
    }", "    my($i, $sum);\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $sum += $i;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    while\
    \ ($n > 0) {\n        $sum += $n;\n        $n--;\n    }\n    return $sum;\n}",
  "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}", "    return $n * ($n + 1) / 2;\n}", "    my $sum\
    \ = 0;\n    foreach my $i (1..$n) {\n        $sum += $i;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    foreach (1..$n) {\n        $sum += $_;\n    }\n   \
    \ return $sum;\n}", "    $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n    $sum +=\
    \ $_ for 1..$n;\n    return $sum;\n}", "    return $n * ($n + 1) / 2;\n}", " \
    \   my $sum = 0;\n    $sum += $_ for 1..$n;\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    foreach my $i (1..$n) {\n        $sum += $i;\n    }\n    return $sum;\n\
    }", "    my $answer = ($n * ($n + 1)) / 2;\n    return $answer;\n}", "    my $sum\
    \ = 0;\n    $sum += $_ for 1..$n;\n    return $sum;\n}", "    my $sum = 0;\n \
    \   foreach my $i (1..$n) {\n        $sum += $i;\n    }\n    return $sum;\n}",
  "    # your code here\n    return $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n  \
    \  while ($n > 0) {\n\t$sum += $n;\n\t$n -= 1;\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    while ($n > 0) {\n        $sum += $n;\n        $n--;\n \
    \   }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $i (1..$n) {\n\
    \        $sum += $i;\n    }\n    return $sum;\n}", "    return 0 if $n <= 0;\n\
    \    return ($n**2 + $n) / 2;\n}", "    my $result = 0;\n    my $i = 1;\n    while\
    \ ($i <= $n) {\n\t$result += $i;\n\t$i++;\n    }\n    return $result;\n}", " \
    \   my $sum = 0;\n    foreach my $i (1..$n) {\n        $sum += $i;\n    }\n  \
    \  return $sum;\n}", "    return ($n*($n+1))/2;\n}", "    my $sum = 0;\n    foreach\
    \ my $i (1..$n) {\n        $sum += $i;\n    }\n    return $sum;\n}", "    my $result\
    \ = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        $result += $i;\n    }\n\
    \    return $result;\n}", "    return $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n\
    \    while ($n > 0) {\n        $sum += $n;\n        $n -= 1;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    $sum += $_ for 1..$n;\n    return $sum;\n}",
  "    return $n * ($n + 1) / 2;\n}", "    return ($n*($n+1))/2;\n}", "    my $sum\
    \ = 0;\n    while ($n > 0) {\n        $sum += $n;\n        $n--;\n    }\n    return\
    \ $sum;\n}", "    $n*($n+1)/2;\n}", "    my $sum = 0;\n    for (my $i = 1; $i\
    \ <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}", "    # print\
    \ the first number in the series\n    print(1);\n    my $sum = 1;\n    # add the\
    \ next number in the series to the previous sum\n    # and print it\n    for (my\
    \ $i = 2; $i <= $n; $i++) {\n        $sum += $i;\n        print(\" + $i\");\n\
    \    }\n    # print the sum\n    print(\" = $sum\\n\");\n    return $sum;\n}",
  "    # You can't use it, as it returns an incorrect value.\n    # You have to write\
    \ this function yourself.\n    #   Hint: It's a good idea to have the following\
    \ line\n    #         in your function.\n    #         use integer;\n    #   \
    \      If you don't know what it means, look up the\n    #         documentation.\
    \ You can find out how to read the\n    #         documentation later.\n    my\
    \ $sum = 0;\n    for (my $i = 0; $i <= $n; $i++) {\n        $sum += $i;\n    }\n\
    \    return $sum;\n}", "    my $accumulator = 0;\n    for my $i (1..$n) {\n  \
    \      $accumulator += $i;\n    }\n    return $accumulator;\n}", "    return int($n\
    \ * ($n + 1) / 2);\n}", "    return $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n\
    \    foreach my $i (1..$n) {\n        $sum += $i;\n    }\n    return $sum;\n}",
  "    return ($n * ($n + 1)) / 2;\n}", "    my $return = $n * ($n + 1) / 2;\n   \
    \ return $return;\n}", "    $sum = 0;\n    for (1..$n) {\n\t$sum += $_;\n    }\n\
    \    return $sum;\n}", "    return $n * ($n + 1) / 2;\n}", "    return (($n *\
    \ ($n + 1)) / 2);\n}", "    # base cases\n    if ( $n == 1 ) { return 1; }\n \
    \   # recursive case\n    return $n + sum_to_n($n-1);\n}", "    return ($n * ($n\
    \ + 1)) / 2;\n}", "    return $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n    my\
    \ $counter = 1;\n    while ($counter <= $n) {\n        $sum += $counter;\n   \
    \     $counter++;\n    }\n    return $sum;\n}", "    return $n * ($n + 1) / 2;\n\
    }\nprint sum_to_n(5);", "    return $n * ($n + 1) / 2;\n}", "    # implement a\
    \ function that returns the sum of numbers\n    # from 1 to n (where n is the\
    \ function parameter)\n    my $sum = 0;\n    while ($n > 0) {\n        $sum +=\
    \ $n;\n        $n -= 1;\n    }\n    return $sum;\n}", "    return ($n * ($n +\
    \ 1)) / 2;\n}", "    if ($n < 0) {\n        return 0;\n    } elsif ($n == 0) {\n\
    \        return 0;\n    } else {\n        return $n + sum_to_n($n - 1);\n    }\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $sum +=\
    \ $i;\n    }\n    return $sum;\n}", "    return $n*($n+1)/2;\n}", "    my $sum\
    \ = 0;\n    while ($n > 0) {\n        $sum += $n;\n        $n--;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    my $i;\n    for ($i = 1; $i <= $n; $i += 1)\
    \ {\n        $sum += $i;\n    }\n    return $sum;\n}", "    my $result = 0;\n\
    \    for(my $i = 1; $i <= $n; $i++) {\n        $result += $i;\n    }\n    return\
    \ $result;\n}", "    return ($n * ($n + 1)) / 2;\n}", "    my $total = 0;\n  \
    \  for (my $i = 1; $i <= $n; $i++) {\n        $total += $i;\n    }\n    return\
    \ $total;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n    \
    \    $sum += $i;\n    }\n    return $sum;\n}", "    my $result = 0;\n    $result\
    \ += $_ for (1..$n);\n    return $result;\n}", "    my $retval = 0;\n    for (my\
    \ $i = 0; $i <= $n; $i++) {\n        $retval += $i;\n    }\n    return $retval;\n\
    }", "    my $result = 0;\n    $result += $_ for (1..$n);\n    return $result;\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n\t$sum += $i;\n\
    \    }\n    return $sum;\n}", "    return $n * ($n + 1) / 2;\n}\nprint sum_to_n(1);\n\
    print \"\\n\";\nprint sum_to_n(5);\nprint \"\\n\";\nprint sum_to_n(10);\nprint\
    \ \"\\n\";\nprint sum_to_n(30);\nprint \"\\n\";\nprint sum_to_n(100);\nprint \"\
    \\n\";", "    return ($n**2 + $n) / 2;\n}", "    my($sum) = 0;\n    my($i) = 1;\n\
    \    while ($i <= $n) {\n        $sum += $i;\n        $i += 1;\n    }\n    return\
    \ $sum;\n}", "    return ($n * ($n + 1)) / 2;\n}", "    return ($n * ($n + 1))\
    \ / 2;\n}", "    # YOUR CODE HERE\n    my $sum = 0;\n    for (my $i = 1; $i <=\
    \ $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}", "    return $n\
    \ * ($n + 1) / 2;\n}", "    if ($n == 1) {\n        return 1;\n    }\n    else\
    \ {\n        return $n + sum_to_n($n - 1);\n    }\n}", "    my($sum) = 0;\n  \
    \  $sum += $_ for (1..$n);\n    return $sum;\n}", "    return $n*($n+1)/2;\n}",
  "    # your code here\n    return ($n*($n+1))/2;\n}", "    my $sum = 0;\n    my\
    \ $i = 1;\n    while ($i <= $n) {\n        $sum += $i;\n        $i++;\n    }\n\
    \    return $sum;\n}", "    my $sum = 0;\n    foreach (1..$n) {\n        $sum\
    \ += $_;\n    }\n    return $sum;\n}", "    if ($n == 1) {\n        return 1;\n\
    \    } else {\n        return $n + sum_to_n($n - 1);\n    }\n}", "    return $n\
    \ * ($n + 1) / 2;\n}", "    return ($n * ($n + 1)) / 2;\n}", "    return ($n *\
    \ ($n + 1)) / 2;\n}", "    return $n*($n+1)/2;\n}", "    my $result = 0;\n   \
    \ my $i = 1;\n    while ($i <= $n) {\n        $result += $i;\n        $i++;\n\
    \    }\n    return $result;\n}", "    return (($n + 1) * $n) / 2;\n}", "    my\
    \ $total = 0;\n    while ($n > 0) {\n        $total += $n;\n        $n--;\n  \
    \  }\n    return $total;\n}", "    # YOUR CODE HERE\n    my $sum = 0;\n    for\
    \ (my $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n\
    }", "    return ($n * ($n + 1)) / 2;\n}", "    return $n*($n+1)/2;\n}", "    #\
    \ your code here\n}", "    my($sum) = 0;\n    for (my($i) = 1; $i <= $n; $i++)\
    \ {\n        $sum += $i;\n    }\n    return $sum;\n}", "    my $sum = 0;\n   \
    \ for (my $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}", "    return ($n * ($n + 1)) / 2;\n}", "    return\
    \ ($n * ($n + 1)) / 2;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        $sum += $i;\n    }\n    return $sum;\n}", "    return($n*($n+1)/2);\n\
    }", "    return $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n    for (my $i = 1;\
    \ $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}", "    if\
    \ ($n < 1) {\n        return 0;\n    } else {\n        return $n + sum_to_n($n\
    \ - 1);\n    }\n}", "    return $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n  \
    \  foreach my $i (1..$n) {\n        $sum += $i;\n    }\n    return $sum;\n}",
  "    return $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <=\
    \ $n; $i++){\n        $sum += $i;\n    }\n    return $sum;\n}", "    # YOUR CODE\
    \ HERE\n    my $sum = 0;\n    for (my $i = 0; $i <= $n; $i++){\n    \t$sum +=\
    \ $i;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for(my $i = 1; $i <=\
    \ $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}", "    my $result\
    \ = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result += $i;\n    }\n\
    \    return $result;\n}", "    return $n + sum_to_n($n - 1) if $n > 1;\n    return\
    \ $n;\n}", "    my $sum = 0;\n    my $i = 1;\n    while ($i <= $n) {\n       \
    \ $sum += $i;\n        $i += 1;\n    }\n    return $sum;\n}", "    return ($n\
    \ * ($n + 1)) / 2;\n}", "    my $sum = 0;\n    my $i = 1;\n    while ($i <= $n)\
    \ {\n        $sum += $i;\n        $i++;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n\
    \    return $sum;\n}", "    return $n * ($n + 1) / 2;\n}", "    return ($n * ($n\
    \ + 1)) / 2;\n}", "    # Base case:\n    if ($n == 1) {\n        return 1;\n \
    \   }\n    # General case:\n    return $n + sum_to_n($n - 1);\n}", "    return\
    \ $n * ($n + 1) / 2;\n}", "    return ( $n*($n+1) )/2;\n}", "    my $sum = 0;\n\
    \    $sum += $_ for (1..$n);\n    return $sum;\n}", "    return ($n * ($n + 1))\
    \ / 2;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n       \
    \ $sum += $i;\n    }\n    return $sum;\n}", "    return ($n * ($n + 1)) / 2;\n\
    }", "    return ($n * ($n + 1)) / 2;\n}", "    return $n*($n+1)/2;\n}", "    return\
    \ $n * ($n + 1) / 2;\n}", "    if ($n == 1) {\n        return 1;\n    }\n    return\
    \ $n + sum_to_n($n - 1);\n}", "    my($sum) = 0;\n    my($i) = 1;\n    while ($i\
    \ <= $n) {\n        $sum += $i;\n        $i += 1;\n    }\n    return $sum;\n}",
  "    my $result = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result +=\
    \ $i;\n    }\n    return $result;\n}", "    my $sum = 0;\n    my $i = 1;\n   \
    \ while($i<=$n){\n        $sum = $sum + $i;\n        $i = $i + 1;\n    }\n   \
    \ return $sum;\n}", "    return (($n * ($n + 1)) / 2);\n}", "    return (($n+1)*$n)/2;\n\
    }", "    my $sum = 0;\n    for(my $i = 1; $i <= $n; $i++){\n        $sum += $i;\n\
    \    }\n    return $sum;\n}", "    my $i;\n    my $sum = 0;\n    for($i = 1; $i\
    \ <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    while($n > 0) {\n        $sum += $n;\n        $n--;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    foreach my $i (1..$n) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}", "    return ($n*($n+1))/2;\n}", "    return $n *\
    \ ($n + 1) / 2;\n}", "    my $result = $n;\n    $result += (sum_to_n($n - 1))\
    \ if ($n > 1);\n    return $result;\n}", "    # YOUR CODE HERE\n    return (1\
    \ + $n) * $n / 2;\n}", "    return (($n + 1) * $n) / 2;\n}", "    return $n *\
    \ ($n + 1) / 2;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n\
    \        $sum += $i;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for\
    \ (my $i = 1; $i <= $n; $i++) {\n\t$sum += $i;\n    }\n    return $sum;\n}", " \
    \   return ($n * ($n + 1)) / 2;\n}", "    my $sum = 0;\n    $sum += $_ for 1..$n;\n\
    \    return $sum;\n}", "    return $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n\
    \    for (my $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return\
    \ $sum;\n}", "    my $ret = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n      \
    \  $ret += $i;\n    }\n    return $ret;\n}", "    my $sum = 0;\n    for (my $i\
    \ = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n\t$sum += $i;\n    }\n\
    \    return $sum;\n}", "    if ($n == 1) {\n        return 1;\n    }\n    elsif\
    \ ($n > 1) {\n        return $n + sum_to_n($n - 1);\n    }\n    else {\n     \
    \   die \"Argument to sum_to_n must be greater than or equal to 1\";\n    }\n}",
  "    my $sum = 0;\n    my $count = 1;\n    while ($count <= $n) {\n        $sum\
    \ += $count;\n        $count += 1;\n    }\n    return $sum;\n}", "    die \"sum_to_n:\
    \ non-positive argument: $n\" unless $n > 0;\n    return $n * ($n + 1) / 2;\n}",
  "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}", "    return $n * ($n + 1) / 2;\n}", "    return\
    \ ($n * ($n + 1)) / 2;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        $sum += $i;\n    }\n    return $sum;\n}", "    my $result = $n *\
    \ ($n + 1) / 2;\n    return $result;\n}", "    my($sum);\n    $sum = 0;\n    foreach\
    \ (1..$n) {\n\t$sum += $_;\n    }\n    return $sum;\n}", "    # sum_to_n(n) =\
    \ n + sum_to_n(n-1)\n    if ($n == 1) {\n        return 1;\n    } else {\n   \
    \     return $n + sum_to_n($n-1);\n    }\n}", "    return 1 if $n == 1;\n    return\
    \ $n + sum_to_n($n - 1);\n}", "    return ($n*($n+1))/2;\n}", "    $sum = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n\t$sum += $i;\n    }\n    return $sum;\n}",
  "    return $n*($n+1)/2;\n}", "    return $n * ($n + 1) / 2;\n}", "    if ($n==1)\
    \ {\n        return 1;\n    }\n    else {\n        return $n + sum_to_n($n-1);\n\
    \    }\n}", "    my $total = 0;\n    for(my $i = 1; $i <= $n; $i++){\n       \
    \ $total += $i;\n    }\n    return $total;\n}", "    my $sum = 0;\n    for (my\
    \ $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}",
  "    my $total = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $total += $i;\n\
    \    }\n    return $total;\n}", "    my $sum = 0;\n    while ($n) {\n        $sum\
    \ += $n;\n        $n--;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for(my\
    \ $i = 1; $i <= $n; $i++){\n        $sum += $i;\n    }\n    return $sum;\n}",
  "    my $total = 0;\n    foreach my $num (1..$n) {\n        $total += $num;\n  \
    \  }\n    return $total;\n}", "    if ($n == 1) {\n        return 1;\n    } else\
    \ {\n        return $n + sum_to_n($n - 1);\n    }\n}", "    return ($n * ($n +\
    \ 1)) / 2;\n}", "    return $n * ($n + 1) / 2;\n}", "    my $sum = ($n * ($n +\
    \ 1)) / 2;\n    return $sum;\n}", "    my $retval = 0;\n    $retval += $_ for\
    \ (1..$n);\n    return $retval;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
