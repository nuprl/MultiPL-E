name: HumanEval_60_sum_to_n
language: pl
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
  # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
  # 55\n# >>> sum_to_n(1)\n# 1\nsub sum_to_n {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_to_n;\n\
  \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(6),21)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),66))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),465))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),5050))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    foreach my $i (1..$n) {\n        $sum += $i;\n\
    \    }\n    return $sum;\n}", "    return $n * ($n + 1) / 2;\n}", "    # Check\
    \ the number is positive.\n    my $sum = 0;\n    if ($n > 0) {\n        $sum =\
    \ ($n*($n+1))/2;\n    }\n    return $sum;\n}", "    return $n * ($n + 1) / 2;\n\
    }", "    if ($n == 1) {\n        return 1;\n    }\n    return $n + sum_to_n($n\
    \ - 1);\n}", "    return $n * ($n + 1) / 2;\n}", "    my $sum = 0;\n    for(my\
    \ $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}",
  "    # your code here\n    my $sum = 0;\n    for (1..$n) {\n        $sum += $_;\n\
    \    }\n    return $sum;\n}", "    my($result) = 0;\n    $result = $n * ($n +\
    \ 1) / 2;\n    return $result;\n}", "    my $sum = 0;\n    foreach my $i (1..$n)\
    \ {\n        $sum += $i;\n    }\n    return $sum;\n}", "    return $n*($n+1)/2;\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $sum +=\
    \ $i;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i\
    \ <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}", "    my $sum\
    \ = $n * ($n + 1) / 2;\n    return $sum;\n}", "    my $sum = 0;\n    $sum += $_\
    \ for (1..$n);\n    return $sum;\n}", "    if ($n == 1) {\n        return 1;\n\
    \    }\n    return $n + sum_to_n($n - 1);\n}", "    my $sum = 0;\n    while ($n\
    \ >= 1) {\n        $sum += $n;\n        $n--;\n    }\n    return $sum;\n}", " \
    \   return $n * ($n + 1) / 2;\n}", "    return ($n * ($n + 1)) / 2;\n}", "   \
    \ return $n * ($n + 1) / 2;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
