language: pl
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if(!@$array);\n    my $first\
    \ = $array->[0];\n    my $last = $array->[$#$array];\n    if($first + $last >\
    \ 0){\n        my @sorted = sort {$a <=> $b} @$array;\n        return \\@sorted;\n\
    \    }else{\n        my @sorted = sort {$b <=> $a} @$array;\n        return \\\
    @sorted;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821537
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    $array = [] if !defined $array;\n\
    \    return $array if @$array < 2;\n    my $fn = ( $array->[0] + $array->[-1]\
    \ ) % 2 == 0 ? sub { $b <=> $a } : sub { $a <=> $b };\n    return [ sort $fn @$array\
    \ ];\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821537
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $length = @$array;\n    if($length\
    \ == 0){\n        return $array;\n    }elsif($length == 1){\n        return $array;\n\
    \    }else{\n        my $first_index = $array->[0];\n        my $last_index =\
    \ $array->[$length-1];\n        my $sum = $first_index + $last_index;\n      \
    \  if($sum % 2 == 0){\n            return [reverse sort {$a <=> $b} @$array];\n\
    \        }else{\n            return [sort {$a <=> $b} @$array];\n        }\n \
    \   }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821537
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $array_size = scalar @$array;\n\
    \    return $array if $array_size == 0 || $array_size == 1;\n    my $odd = $array->[0]\
    \ + $array->[-1] % 2;\n    if ($odd) {\n        return [sort {$a <=> $b} @$array];\n\
    \    } else {\n        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821537
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\n1;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821537
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if(scalar(@$array) == 0) {\n     \
    \   return [];\n    }\n    if(scalar(@$array) == 1) {\n        return [@$array];\n\
    \    }\n    my $s = $array->[0] + $array->[-1];\n    if($s % 2 == 0) {\n     \
    \   @$array = sort {$b <=> $a} @$array;\n    } else {\n        @$array = sort\
    \ {$a <=> $b} @$array;\n    }\n    return $array;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821537
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = 0;\n    $sum += $_ for @$array;\n\
    \    my @sorted_array = sort {$a <=> $b} @$array;\n    @sorted_array = reverse\
    \ @sorted_array if $sum % 2 == 0;\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821537
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if ( @$array == 0 || @$array == 1\
    \ ) {\n        return $array;\n    }\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    my $f_index = $sorted[0];\n    my $l_index = $sorted[-1];\n    my $sum =\
    \ $f_index + $l_index;\n    if ( $sum % 2 == 0 ) {\n        return reverse @sorted;\n\
    \    }\n    else {\n        return @sorted;\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821537
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $len = scalar @$array;\n    my\
    \ $first = $array->[0];\n    my $last = $array->[$len - 1];\n    my $sum = $first\
    \ + $last;\n    if ($sum % 2) {\n        return sort {$a <=> $b} @$array;\n  \
    \  } else {\n        return sort {$b <=> $a} @$array;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821537
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    return\
    \ [sort {$a <=> $b} @$array] if @$array == 1;\n    my($first, $last) = @$array[0,\
    \ -1];\n    if(($first + $last) % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$array];\n    }\n    else {\n        return [sort {$a <=> $b} @$array];\n \
    \   }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821537
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = @$array;\n    if(@sorted_array\
    \ == 0) {\n        return @sorted_array;\n    }\n    my $last_index = @sorted_array\
    \ - 1;\n    my $sum = $sorted_array[0] + $sorted_array[$last_index];\n    my $order\
    \ = $sum % 2 == 0 ? 1 : 0;\n    if($order == 1) {\n        @sorted_array = sort\
    \ {$b <=> $a} @sorted_array;\n    } else {\n        @sorted_array = sort {$a <=>\
    \ $b} @sorted_array;\n    }\n    return @sorted_array;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821537
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array if @$array <= 1;\n \
    \   my @copy = @$array;\n    my $first = shift @copy;\n    my $last = pop @copy;\n\
    \    if ($first + $last) % 2 {\n        return [$first, @{sort_array(\\@copy)},\
    \ $last];\n    } else {\n        return [$last, @{sort_array(\\@copy)}, $first];\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpqnfwp18j.pl line 21, near ") %"

    Execution of /tmp/tmpqnfwp18j.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1659821537
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $len = @$array;\n    if ($len <\
    \ 2) {\n        return $array;\n    }\n    my $first = @$array[0];\n    my $last\
    \ = @$array[$len - 1];\n    if ($first + $last) % 2 == 0 {\n        my @result\
    \ = reverse @$array;\n        return \\@result;\n    }\n    return $array;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'syntax error at /tmp/tmpwbn7edu7.pl line 23, near ") %"

    syntax error at /tmp/tmpwbn7edu7.pl line 28, near "}"

    Execution of /tmp/tmpwbn7edu7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1659821537
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $size = @$array;\n    my @sorted_array\
    \ = ();\n    if ($size > 0) {\n\tif (($array->[0] + $array->[$size - 1]) % 2 ==\
    \ 0) {\n\t    @sorted_array = sort {$b <=> $a} @$array;\n\t} else {\n\t    @sorted_array\
    \ = sort {$a <=> $b} @$array;\n\t}\n    }\n    return @sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821537
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $len = scalar @$array;\n    my\
    \ $i = 0;\n    my $j = $len - 1;\n    my $tmp;\n    if ($len == 0 || $len == 1)\
    \ {\n        return $array;\n    }\n    while ($i <= $j) {\n        if (($array->[$i]\
    \ + $array->[$j]) % 2 == 0) {\n            $tmp = $array->[$i];\n            $array->[$i]\
    \ = $array->[$j];\n            $array->[$j] = $tmp;\n        }\n        $i++;\n\
    \        $j--;\n    }\n    @$array = sort {$a <=> $b} @$array;\n    return $array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821537
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @new_array = ();\n    if(!@$array){\n\
    \        return [];\n    }\n    if(@$array == 1){\n        return [@$array];\n\
    \    }\n    if(($array->[0] + $array->[$#$array]) % 2 == 0){\n        @new_array\
    \ = reverse @$array;\n    }\n    else{\n        @new_array = sort {$a <=> $b}\
    \ @$array;\n    }\n    return [@new_array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821537
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my($first, $last) = @$array[0, -1];\n  \
    \  my($sorted) = $first + $last % 2 ? [sort {$a <=> $b} @$array] : [sort {$b <=>\
    \ $a} @$array];\n    return $sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821537
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my @result = sort { $a <=> $b } @$array;\n\
    \    if (($array->[0] + $array->[-1]) % 2 == 0) {\n        @result = reverse @result;\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821537
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $array_len = scalar @$array;\n\
    \    return [] if $array_len == 0;\n    my @sorted_array = sort { $a <=> $b }\
    \ @$array;\n    if(($sorted_array[0] + $sorted_array[-1]) % 2 == 0) {\n      \
    \  @sorted_array = reverse @sorted_array;\n    }\n    return \\@sorted_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821537
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $length = scalar @$array;\n   \
    \ my @sorted_array = ();\n    if($length == 0) {\n        return $array;\n   \
    \ }\n    if($length == 1) {\n        return $array;\n    }\n    if($length ==\
    \ 2) {\n        if(($array->[0] + $array->[1]) % 2 == 0) {\n            @sorted_array\
    \ = ($array->[1], $array->[0]);\n        }\n        else {\n            @sorted_array\
    \ = ($array->[0], $array->[1]);\n        }\n        return \\@sorted_array;\n\
    \    }\n    if(($array->[0] + $array->[1]) % 2 == 0) {\n        @sorted_array\
    \ = sort {$b <=> $a} @$array;\n    }\n    else {\n        @sorted_array = sort\
    \ {$a <=> $b} @$array;\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821537
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @array_copy = @$array;\n    my\
    \ @return_array;\n    my $sum_index = sum_index($array);\n    if ($sum_index %\
    \ 2 == 0) {\n        @return_array = reverse sort @array_copy;\n    } else {\n\
    \        @return_array = sort @array_copy;\n    }\n    return @return_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_index called at /tmp/tmp36zh_omi.pl line
    19.

    '
  stdout: ''
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [ sort { $a <=> $b } @$array ]\n    } else\
    \ {\n        return [ sort { $b <=> $a } @$array ]\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (@$array == 0) {\n        return\
    \ $array;\n    }\n    if (@$array == 1) {\n        return $array;\n    }\n   \
    \ my $last = @$array - 1;\n    if (@$array[0] + @$array[$last] % 2 == 0) {\n \
    \       return reverse sort @$array;\n    }\n    else {\n        return sort @$array;\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort {$a <=> $b}\
    \ @$array;\n    my $even_or_odd = ($array->[0] + $array->[-1]) % 2;\n    if ($even_or_odd\
    \ == 0) {\n        return [reverse @sorted_array];\n    } else {\n        return\
    \ \\@sorted_array;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return unless(@$array);\n    my $first_index_value\
    \ = $array->[0];\n    my $last_index_value = $array->[-1];\n    my $sum = $first_index_value\
    \ + $last_index_value;\n    if($sum % 2 == 0) {\n        # sort descending order\n\
    \        my @sorted_array = reverse sort {$a <=> $b} @$array;\n        return\
    \ \\@sorted_array;\n    }\n    else {\n        # sort ascending order\n      \
    \  my @sorted_array = sort {$a <=> $b} @$array;\n        return \\@sorted_array;\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (scalar(@$array) < 2) {\n     \
    \   return $array;\n    }\n    my $sum = $$array[0] + $$array[-1];\n    if ($sum\
    \ % 2 == 0) {\n        return [reverse sort {$a <=> $b} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (ref($array) ne 'ARRAY') {\n  \
    \      die \"usage: sort_array(ARRAY).\\n\";\n    }\n    my($sum) = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = [];\n    my $totalsum\
    \ = 0;\n    foreach my $x (@$array) {\n        $totalsum += $x;\n    }\n    if\
    \ ($totalsum % 2 == 0) {\n        @result = reverse @$array;\n    } else {\n \
    \       @result = sort @$array;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort {$a <=> $b} @$array;\n\
    \    if (@$array % 2 == 0) {\n        return reverse @sorted;\n    }\n    return\
    \ @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    return\
    \ [$array->[0]] if @$array == 1;\n    if ($array->[0] + $array->[-1] % 2) {\n\
    \        return [sort {$a <=> $b} @$array];\n    } else {\n        return [sort\
    \ {$b <=> $a} @$array];\n    }\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if(@$array == 0) {\n        return\
    \ [];\n    }\n    my $result = [];\n    my $head = 0;\n    my $tail = $#$array;\n\
    \    my $odd = ($array->[$head] + $array->[$tail]) % 2;\n    while($head <= $tail)\
    \ {\n        if($odd) {\n            push @$result, $array->[$tail];\n       \
    \     $tail--;\n        } else {\n            push @$result, $array->[$head];\n\
    \            $head++;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (scalar(@$array) > 1) {\n     \
    \   if ($array->[0] + $array->[-1] % 2 == 0) {\n            # even\n         \
    \   @$array = sort {$b <=> $a} @$array;\n        } else {\n            # odd\n\
    \            @$array = sort {$a <=> $b} @$array;\n        }\n    }\n    return\
    \ $array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array if scalar @$array ==\
    \ 0;\n    my $first = $array->[0];\n    my $last = $array->[-1];\n    my $sum\
    \ = $first + $last;\n    my $sort_flag = $sum % 2 ? 1 : 0;\n    my @sorted = sort\
    \ {$sort_flag ? $a <=> $b : $b <=> $a} @$array;\n    return \\@sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my $odd_or_even = ($array->[0] + $array->[-1])\
    \ % 2;\n    my @sorted_array = sort { $a <=> $b } @$array;\n    if ($odd_or_even\
    \ == 0) {\n        return [reverse @sorted_array];\n    }\n    return \\@sorted_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @a = @$array;\n    my $i = 0;\n\
    \    my $j = $#a;\n    my $len = @a;\n    my $k = 0;\n    my $sum = $a[$i] + $a[$j];\n\
    \    while ($k < int(($len + 1) / 2)) {\n        if ($sum % 2 == 0) {\n      \
    \      @a[$i, $j] = @a[$j, $i];\n        }\n        $i++;\n        $j--;\n   \
    \     $k++;\n        $sum = $a[$i] + $a[$j];\n    }\n    return @a;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    return\
    \ [$array->[0]] if @$array == 1;\n    if(($array->[0] + $array->[-1]) % 2) {\n\
    \        return [sort {$a <=> $b} @$array];\n    } else {\n        return [sort\
    \ {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (sum(@$array[0, -1]) % 2) {\n \
    \       return [sort {$a <=> $b} @$array];\n    } else {\n        return [sort\
    \ {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmpo4ni45w8.pl line 17.

    '
  stdout: ''
  timestamp: 1660015540
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if( sum( @$array ) % 2 ) {\n     \
    \   return sort { $a <=> $b } @$array;\n    }\n    else {\n        return sort\
    \ { $b <=> $a } @$array;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp51xj26b6.pl line 17.

    '
  stdout: ''
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if (scalar(@$array) == 0);\n\
    \    return [$array->[0]] if (scalar(@$array) == 1);\n    my @result = @$array;\n\
    \    my $first = $result[0];\n    my $last = $result[-1];\n    if (($first + $last)\
    \ % 2 == 0) {\n        @result = sort {$b <=> $a} @result;\n    } else {\n   \
    \     @result = sort {$a <=> $b} @result;\n    }\n    return \\@result;\n}\n1;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @return;\n    if (defined $array\
    \ and scalar @$array) {\n        if (($array->[0] + $array->[-1]) % 2) {\n   \
    \         @return = sort {$a <=> $b} @$array;\n        } else {\n            @return\
    \ = sort {$b <=> $a} @$array;\n        }\n    }\n    return \\@return;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = ();\n    return @sorted\
    \ if not defined $array;\n    return @sorted if ref $array ne 'ARRAY';\n    return\
    \ @sorted if scalar @$array < 1;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    return [ sort { $a <=> $b } @$array ] if $sum % 2 == 1;\n    return [ sort\
    \ { $b <=> $a } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array unless @$array > 1;\n\
    \    my $sum = $array->[0] + $array->[-1];\n    my $cmp = $sum % 2 ? '>' : '<';\n\
    \    my @result = @$array;\n    @result = sort {$a <=> $b} @result if $cmp eq\
    \ '<';\n    @result = sort {$b <=> $a} @result if $cmp eq '>';\n    return \\\
    @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (! @$array) { return $array; }\n\
    \    if (@$array == 1) { return $array; }\n    if (($array->[0] + $array->[-1])\
    \ % 2) {\n        return [sort { $a <=> $b } @$array];\n    } else {\n       \
    \ return [sort { $b <=> $a } @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @A = @$array;\n    my @B = ();\n\
    \    my $bool = (($A[0] + $A[-1]) % 2 == 0);\n    my $n = scalar(@A);\n    if\
    \ ($n == 0) {\n        return [];\n    }\n    if ($n == 1) {\n        return [$A[0]];\n\
    \    }\n    if ($bool) {\n        @B = sort {$b <=> $a} @A;\n    } else {\n  \
    \      @B = sort {$a <=> $b} @A;\n    }\n    return \\@B;\n}\n1;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if (scalar(@$array) == 0);\n\
    \    return [$array->[0]] if (scalar(@$array) == 1);\n    return $array if (($array->[0]\
    \ + $array->[-1]) % 2 == 1);\n    return [reverse @$array];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return () unless @$array;\n    return\
    \ @$array if @$array == 1;\n    my $sum = $array->[0] + $array->[-1];\n    if($sum\
    \ % 2) {\n        return merge_sort($array, sub { $a <=> $b });\n    } else {\n\
    \        return merge_sort($array, sub { $b <=> $a });\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = @$array;\n    if(scalar(@sorted_array)\
    \ == 0) {\n        return @sorted_array;\n    }\n    if(scalar(@sorted_array)\
    \ == 1) {\n        return @sorted_array;\n    }\n    my $left = 0;\n    my $right\
    \ = scalar(@sorted_array) - 1;\n    if($sorted_array[$left] + $sorted_array[$right]\
    \ % 2 == 0) {\n        @sorted_array = sort {$b <=> $a} @sorted_array;\n    }\n\
    \    else {\n        @sorted_array = sort {$a <=> $b} @sorted_array;\n    }\n\
    \    return @sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if(@$array == 0);\n    return\
    \ [$array->[0]] if(@$array == 1);\n    my $first = $array->[0];\n    my $last\
    \ = $array->[-1];\n    my $sorted_array = $first + $last;\n    my $new_array =\
    \ [];\n    if($sorted_array % 2 == 0){\n        @$new_array = sort {$b <=> $a}\
    \ @$array;\n    }else{\n        @$new_array = sort {$a <=> $b} @$array;\n    }\n\
    \    return $new_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    my $first\
    \ = $result[0];\n    my $last = $result[-1];\n    if($first % 2 == $last % 2){\n\
    \        @result = sort {$a <=> $b} @result;\n    }\n    else{\n        @result\
    \ = sort {$b <=> $a} @result;\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $first_index_value = $array->[0];\n\
    \    my $last_index_value = $array->[-1];\n    my $ascending_order = 1;\n    if(($first_index_value\
    \ + $last_index_value) % 2 == 0){\n        $ascending_order = 0;\n    }\n    my\
    \ @sorted_array = ();\n    if($ascending_order){\n        @sorted_array = sort\
    \ {$a <=> $b} @$array;\n    }else{\n        @sorted_array = sort {$b <=> $a} @$array;\n\
    \    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return @$array if @$array == 0;\n\
    \    my @sorted = @$array;\n    if ( ($sorted[0] + $sorted[-1]) % 2 == 0 ) {\n\
    \        @sorted = sort { $b <=> $a } @sorted;\n    } else {\n        @sorted\
    \ = sort { $a <=> $b } @sorted;\n    }\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $i = 0;\n    my $j = $#{$array};\n\
    \    my $temp;\n    my $sum = $array->[$i] + $array->[$j];\n    if ($sum % 2)\
    \ {\n        while ($i < $j) {\n            while ($i < $j && $array->[$i] <=\
    \ $array->[$j]) {\n                $i++;\n            }\n            $temp = $array->[$i];\n\
    \            $array->[$i] = $array->[$j];\n            $array->[$j] = $temp;\n\
    \            while ($i < $j && $array->[$i] <= $array->[$j]) {\n             \
    \   $j--;\n            }\n            $temp = $array->[$i];\n            $array->[$i]\
    \ = $array->[$j];\n            $array->[$j] = $temp;\n        }\n    } else {\n\
    \        while ($i < $j) {\n            while ($i < $j && $array->[$i] >= $array->[$j])\
    \ {\n                $i++;\n            }\n            $temp = $array->[$i];\n\
    \            $array->[$i] = $array->[$j];\n            $array->[$j] = $temp;\n\
    \            while ($i < $j && $array->[$i] >= $array->[$j]) {\n             \
    \   $j--;\n            }\n            $temp = $array->[$i];\n            $array->[$i]\
    \ = $array->[$j];\n            $array->[$j] = $temp;\n        }\n    }\n    return\
    \ $array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = ();\n    my @sorted_array_backwards\
    \ = ();\n    my $sum = 0;\n    my $sum_backwards = 0;\n    my $last_index = 0;\n\
    \    my $last_index_backwards = 0;\n    my $first_index = 0;\n    my $first_index_backwards\
    \ = 0;\n    for(my $i = 0; $i <= $#{$array}; $i++){\n        push(@sorted_array,\
    \ $array->[$i]);\n        push(@sorted_array_backwards, $array->[$i]);\n    }\n\
    \    $last_index = $#sorted_array;\n    $last_index_backwards = $#sorted_array_backwards;\n\
    \    for(my $i = 0; $i <= $#sorted_array; $i++){\n        for(my $j = 0; $j <=\
    \ $#sorted_array - 1; $j++){\n            if($sorted_array[$j] > $sorted_array[$j\
    \ + 1]){\n                my $temp = $sorted_array[$j];\n                $sorted_array[$j]\
    \ = $sorted_array[$j + 1];\n                $sorted_array[$j + 1] = $temp;\n \
    \           }\n        }\n    }\n    for(my $i = 0; $i <= $#sorted_array_backwards;\
    \ $i++){\n        for(my $j = 0; $j <= $#sorted_array_backwards - 1; $j++){\n\
    \            if($sorted_array_backwards[$j] < $sorted_array_backwards[$j + 1]){\n\
    \                my $temp = $sorted_array_backwards[$j];\n                $sorted_array_backwards[$j]\
    \ = $sorted_array_backwards[$j + 1];\n                $sorted_array_backwards[$j\
    \ + 1] = $temp;\n            }\n        }\n    }\n    $sum = $sorted_array[$first_index]\
    \ + $sorted_array[$last\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpldx3ozw2.pl line 50, at end
    of line

    syntax error at /tmp/tmpldx3ozw2.pl line 50, near "$last

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpldx3ozw2.pl line 85, at end of
    line

    syntax error at /tmp/tmpldx3ozw2.pl line 85, at EOF

    Execution of /tmp/tmpldx3ozw2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $len = scalar @$array;\n    my\
    \ $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        while ($i < $j\
    \ && ($array->[$i] + $array->[$j]) % 2 == 1) {\n            $i++;\n        }\n\
    \        while ($i < $j && ($array->[$i] + $array->[$j]) % 2 == 0) {\n       \
    \     $j--;\n        }\n        ($array->[$i], $array->[$j]) = ($array->[$j],\
    \ $array->[$i]);\n    }\n    my @sorted = sort {$a <=> $b} @$array[0..$i];\n \
    \   if ($i < $len - 1) {\n        @sorted = (@sorted, reverse sort {$a <=> $b}\
    \ @$array[$i+1..$len-1]);\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @retval = @$array;\n    if (scalar(@retval)\
    \ < 2) {\n        return @retval;\n    }\n    if (sum(0, scalar(@retval) - 1)\
    \ % 2 == 0) {\n        return sort {$b <=> $a} @retval;\n    }\n    else {\n \
    \       return sort {$a <=> $b} @retval;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if(@$array == 0 || @$array == 1) {\n\
    \        return $array;\n    }\n    elsif($array->[0] + $array->[-1] % 2 == 0)\
    \ {\n        return array_sort($array, '-')\n    }\n    else {\n        return\
    \ array_sort($array, '+')\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::array_sort called at /tmp/tmp38lsexrk.pl line
    24.

    '
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $start = 0;\n    my $end = @$array\
    \ - 1;\n    while ($start < $end) {\n        if (($array->[$start] + $array->[$end])\
    \ % 2 == 0) {\n            ($array->[$start], $array->[$end]) = ($array->[$end],\
    \ $array->[$start]);\n        }\n        $start++;\n        $end--;\n    }\n \
    \   return $array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $pivot = $array->[0] + $array->[-1];\n\
    \    my $compare = $pivot % 2 ? sub { $a <=> $b } : sub { $b <=> $a };\n    @$array\
    \ = sort $compare @$array;\n    return $array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $status = status($array);\n   \
    \ if ($status) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n \
    \       return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::status called at /tmp/tmp1s94izxw.pl line 17.

    '
  stdout: ''
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort{ $a <=> $b\
    \ } @$array;\n    return $array->[0] + $array->[-1] % 2 ? @sorted_array : reverse\
    \ @sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if($sum % 2 == 0) {\n        return $array->sort()->reverse();\n    }\n \
    \   else {\n        return $array->sort();\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "sort" on unblessed reference at /tmp/tmpppk3xdzs.pl
    line 19.

    '
  stdout: ''
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @copy = @$array;\n    if(@copy)\
    \ {\n        if(($copy[0] + $copy[-1]) % 2) {\n            return [ sort { $a\
    \ <=> $b } @copy ];\n        } else {\n            return [ sort { $b <=> $a }\
    \ @copy ];\n        }\n    } else {\n        return [];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if !$array;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my $total = 0;\n    map { $total += $_ }\
    \ @$array;\n    my $sub = $total % 2 ? 'sort { $a <=> $b } @$array' : 'sort {\
    \ $b <=> $a } @$array';\n    eval $sub;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $index = 0;\n    my $index2 = @$array-1;\n\
    \    if (($array->[$index] + $array->[$index2]) % 2 == 0) {\n        return sort{$b\
    \ <=> $a} @$array;\n    }\n    else {\n        return sort{$a <=> $b} @$array;\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $array_size = scalar @$array;\n\
    \    my @copy_array = @$array;\n    if ($array_size > 0) {\n        if (($array->[0]\
    \ + $array->[$array_size - 1]) % 2 == 0) {\n            @copy_array = sort {$b\
    \ <=> $a} @copy_array;\n        } else {\n            @copy_array = sort {$a <=>\
    \ $b} @copy_array;\n        }\n    }\n    return @copy_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (@$array == 0) {\n        return\
    \ $array;\n    } elsif (@$array == 1) {\n        return $array;\n    } else {\n\
    \        if (($array->[0] + $array->[-1]) % 2 == 0) {\n            return (sort\
    \ {$b <=> $a} @$array);\n        } else {\n            return (sort {$a <=> $b}\
    \ @$array);\n        }\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = $array->@*;\n    if ($array->[0]\
    \ + $array->[-1] % 2) {\n        return sort {$a <=> $b} @result;\n    } else\
    \ {\n        return sort {$b <=> $a} @result;\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if(@$array > 1) {\n        if(($$array[0]\
    \ + $$array[-1]) % 2) {\n            return [sort {$a <=> $b} @$array];\n    \
    \    } else {\n            return [sort {$b <=> $a} @$array];\n        }\n   \
    \ }\n    return $array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array unless @$array;\n  \
    \  if(($array->[0] + $array->[-1]) % 2){\n        return [sort{$a <=> $b} @$array];\n\
    \    }else{\n        return [sort{$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array if not @$array;\n  \
    \  if ( $array->[0] + $array->[-1] % 2 ) {\n        return [ sort { $a <=> $b\
    \ } @$array ];\n    }\n    else {\n        return [ sort { $b <=> $a } @$array\
    \ ];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my($start, $end) = (0, $#{$array});\n\
    \    return [] if (!scalar(@{$array}));\n    return [$array->[0]] if ($#{$array}\
    \ == 0);\n    while($start < $end) {\n        if (($array->[$start] + $array->[$end])\
    \ % 2) {\n            ($array->[$start], $array->[$end]) = ($array->[$end], $array->[$start]);\n\
    \        }\n        $start++;\n        $end--;\n    }\n    if (($array->[0] +\
    \ $array->[$#{$array}]) % 2) {\n        @{$array} = sort {$a <=> $b} @{$array};\n\
    \    } else {\n        @{$array} = sort {$b <=> $a} @{$array};\n    }\n    return\
    \ $array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if !@$array;\n    return\
    \ [@$array] if @$array == 1;\n    my $index_sum = $array->[0] + $array->[-1];\n\
    \    if ($index_sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n\
    \    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my($n) = scalar(@$array);\n    # The\
    \ idea is to maintain a sorted sub-array in the first n elements\n    # of the\
    \ given array, and then to sort the rest of the array in\n    # ascending order.\
    \  This can be done with a single pass through the\n    # array.\n    if ($n ==\
    \ 0) {\n        return $array;\n    } elsif ($n == 1) {\n        return $array;\n\
    \    } else {\n        my($index) = $n - 1;\n        while ($index > 0) {\n  \
    \          if ($array->[$index - 1] > $array->[$index]) {\n                # Swap\
    \ values\n                my($value) = $array->[$index - 1];\n               \
    \ $array->[$index - 1] = $array->[$index];\n                $array->[$index] =\
    \ $value;\n                $index--;\n            } else {\n                last;\n\
    \            }\n        }\n        # Sort the rest of the array in ascending order\n\
    \        for my $index (0 .. $n - 2) {\n            if ($array->[$index] > $array->[$index\
    \ + 1]) {\n                # Swap values\n                my($value) = $array->[$index];\n\
    \                $array->[$index] = $array->[$index + 1];\n                $array->[$index\
    \ + 1] = $value;\n            }\n        }\n        # Reverse the whole array\
    \ if the sum of the first and last\n        # indices is even\n        if (($array->[0]\
    \ + $array->[$n - 1]) % 2 == 0) {\n            my($index) = 0;\n            while\
    \ ($index < $n - 1 - $index) {\n                my($value) = $array->[$index];\n\
    \                $array->[$index] = $array->[$n - 1 - $index];\n             \
    \   $array->[$n - 1 - $index] = $value;\n                $index++;\n         \
    \   }\n        }\n        return $array;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if( !@$array) {\n        return $array;\n\
    \    }\n    my $sum = $array->[0] + $array->[-1];\n    if($sum % 2 == 0) {\n \
    \       return [reverse sort {$a <=> $b} @$array];\n    }\n    else {\n      \
    \  return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $i = scalar(@$array) - 1;\n   \
    \ my $j = 0;\n    my $sum = $array->[0] + $array->[$i];\n    while($i > $j) {\n\
    \        while($i > $j && $sum % 2 == 0) {\n            ($array->[$i], $array->[$j])\
    \ = ($array->[$j], $array->[$i]);\n            $i--;\n            $j++;\n    \
    \    }\n        while($i > $j && $sum % 2 == 1) {\n            $i--;\n       \
    \     $j++;\n        }\n        $sum = $array->[0] + $array->[$i];\n    }\n  \
    \  return $array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    # your code goes here\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = ();\n    my @odds = ();\n\
    \    my @evens = ();\n    for my $x (@$array) {\n        my $remainder = $x %\
    \ 2;\n        if($remainder) {\n            push @odds, $x;\n        } else {\n\
    \            push @evens, $x;\n        }\n    }\n    if(@odds && @evens) {\n \
    \       if($odds[0] + $evens[-1] % 2) {\n            @result = (@odds, @evens);\n\
    \        } else {\n            @result = (@evens, @odds);\n        }\n    } elsif(@odds)\
    \ {\n        @result = @odds;\n    } else {\n        @result = @evens;\n    }\n\
    \    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    my\
    \ @result = @$array;\n    my $sum = $result[0] + $result[$#result];\n    if ($sum\
    \ % 2 == 0) {\n        @result = sort {$b <=> $a} @result;\n    } else {\n   \
    \     @result = sort {$a <=> $b} @result;\n    }\n    return \\@result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if scalar @$array == 0;\n\
    \    return [ $array->[0] ] if scalar @$array == 1;\n    my $first = $array->[0];\n\
    \    my $last = $array->[-1];\n    my $sum = $first + $last;\n    if($sum % 2){\n\
    \        @$array = sort {$a <=> $b} @$array;\n    }else{\n        @$array = sort\
    \ {$b <=> $a} @$array;\n    }\n    return $array;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (@$array) {\n        if ($array->[0]\
    \ + $array->[-1] % 2) {\n            # odd\n            my @asc_array = sort {\
    \ $a <=> $b } @$array;\n            return \\@asc_array;\n        } else {\n \
    \           # even\n            my @desc_array = sort { $b <=> $a } @$array;\n\
    \            return \\@desc_array;\n        }\n    } else {\n        return [];\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if !@$array;\n    return\
    \ [@$array] if @$array == 1;\n    return [sort {$a <=> $b} @$array] if @$array[0]\
    \ + @$array[-1] % 2 == 1;\n    return [sort {$b <=> $a} @$array] if @$array[0]\
    \ + @$array[-1] % 2 == 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = sort {\n        my($sum)\
    \ = $a + $b;\n        if ($sum % 2 == 0) {\n            return $b <=> $a;\n  \
    \      } else {\n            return $a <=> $b;\n        }\n    } @$array;\n  \
    \  return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $a_ref = [@$array];\n    if ( (\
    \ $array->[0] + $array->[-1] ) % 2 == 0 ) {\n        @$a_ref = sort { $b <=> $a\
    \ } @$a_ref;\n    }\n    else {\n        @$a_ref = sort { $a <=> $b } @$a_ref;\n\
    \    }\n    return $a_ref;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (scalar(@$array) == 0) {\n    \
    \    return $array;\n    }\n    if (scalar(@$array) == 1) {\n        return $array;\n\
    \    }\n    if ($array->[0] + $array->[-1] % 2 == 0) {\n        my @sorted = sort\
    \ {$b <=> $a} @$array;\n        return \\@sorted;\n    }\n    else {\n       \
    \ my @sorted = sort {$a <=> $b} @$array;\n        return \\@sorted;\n    }\n}\n\
    my $array = [2, 4, 3, 0, 1, 5, 6];\nsay Dumper sort_array($array);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "say" via package "Dumper" (perhaps you forgot
    to load "Dumper"?) at /tmp/tmpzfv9jvcp.pl line 33.

    '
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    # return $array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015540
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [sort { ($a+$b)%2 ? $a <=>\
    \ $b : $b <=> $a } @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = ();\n    my $sum = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2 == 0) {\n        @sorted = sort {$b <=> $a}\
    \ @$array;\n    } else {\n        @sorted = sort {$a <=> $b} @$array;\n    }\n\
    \    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if(scalar(@$array)==0) {\n       \
    \ return $array;\n    }\n    elsif(scalar(@$array)==1) {\n        return $array;\n\
    \    }\n    else {\n        if(($array->[0]+$array->[scalar(@$array)-1])%2==0)\
    \ {\n            return reverse(sort(@$array));\n        }\n        else {\n \
    \           return sort(@$array);\n        }\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = @$array;\n    if ($array->[0]\
    \ + $array->[-1] % 2) {\n        @sorted = sort { $a <=> $b } @sorted;\n    }\
    \ else {\n        @sorted = sort { $b <=> $a } @sorted;\n    }\n    return \\\
    @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (@$array == 0) {\n        return\
    \ $array;\n    }\n    my @array = @$array;\n    if (($array[0] + $array[-1]) %\
    \ 2 == 0) {\n        @array = sort {$b <=> $a} @array;\n    } else {\n       \
    \ @array = sort {$a <=> $b} @array;\n    }\n    return \\@array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @temp_array = @$array;\n    if(($temp_array[0]\
    \ + $temp_array[-1]) % 2) {\n        return sort {$a <=> $b} @temp_array;\n  \
    \  }\n    else {\n        return sort {$b <=> $a} @temp_array;\n    }\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = sort {$a <=> $b} @$array;\n\
    \    if ($$array[0] + $$array[-1] % 2 == 0) {\n        @result = reverse @result;\n\
    \    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @ret = @$array;\n    if (@ret %\
    \ 2) {\n        @ret = sort { $a <=> $b } @ret;\n    } else {\n        @ret =\
    \ sort { $b <=> $a } @ret;\n    }\n    return \\@ret;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if ! scalar @$array;\n \
    \   return [$array->[0]] if scalar @$array == 1;\n    my($sum) = $array->[0] +\
    \ $array->[-1];\n    my($sorted) = $sum % 2 == 0 ? [reverse @$array] : [sort {$a\
    \ <=> $b} @$array];\n    return $sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array if not @$array;\n  \
    \  if ($array->[0] + $array->[-1] % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (@$array == 0) {\n        return\
    \ [];\n    }\n    if ($array->[0] + $array->[-1] % 2 == 0) {\n        return [reverse\
    \ sort {$a <=> $b} @$array];\n    }\n    else {\n        return [sort {$a <=>\
    \ $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    return\
    \ [$array->[0]] if @$array == 1;\n    return $array if @$array == 2 && $array->[0]\
    \ == $array->[1];\n    my $sum = $array->[0] + $array->[-1];\n    if ($sum % 2\
    \ == 0) {\n        my @sorted = sort {$b <=> $a} @$array;\n        return \\@sorted;\n\
    \    } else {\n        my @sorted = sort {$a <=> $b} @$array;\n        return\
    \ \\@sorted;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ($array->[0] + $array->[-1] % 2) {\n        return \\@sorted;\n    }\n\
    \    else {\n        return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array if @$array < 2;\n  \
    \  my $sum = $$array[0] + $$array[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ [sort {$b <=> $a} @$array];\n    } else {\n        return [sort {$a <=> $b}\
    \ @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if !defined $array || !@$array;\n\
    \    my $compare = (sort { $a <=> $b } @$array)[0] + (sort { $b <=> $a } @$array)[0];\n\
    \    $compare & 1 ? sort { $a <=> $b } @$array : sort { $b <=> $a } @$array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $res = [];\n    my $sum = $array->[0]\
    \ + $array->[$#$array];\n    if($sum % 2) {\n        $res = sort {$a <=> $b} @$array;\n\
    \    } else {\n        $res = sort {$b <=> $a} @$array;\n    }\n    return $res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    if ($sorted[0] + $sorted[-1] % 2) {\n        return \\@sorted;\n    }\n \
    \   else {\n        return [reverse @sorted];\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if( $array->[0] + $array->[-1] % 2\
    \ == 0 ) {\n        return sort { $b <=> $a } @$array;\n    }\n    else {\n  \
    \      return sort { $a <=> $b } @$array;\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $i = 0;\n    my $j = $#{$array};\n\
    \    my $sum = ${$array}[$i] + ${$array}[$j];\n    my $sorted_array = ();\n  \
    \  if ($sum % 2 == 0) {\n        @$sorted_array = sort {$b <=> $a} @$array;\n\
    \    } else {\n        @$sorted_array = sort {$a <=> $b} @$array;\n    }\n   \
    \ return $sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @answer = @$array;\n    if (@answer)\
    \ {\n        if (($answer[0] + $answer[-1]) % 2) {\n            @answer = sort\
    \ {$a <=> $b} @answer;\n        } else {\n            @answer = sort {$b <=> $a}\
    \ @answer;\n        }\n    }\n    return \\@answer;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    return\
    \ [ $array->[0] ] if @$array == 1;\n    my($s) = 0;\n    $s += $_ for @$array;\n\
    \    $s % 2 and @$array = sort { $a <=> $b } @$array\n        or @$array = sort\
    \ { $b <=> $a } @$array;\n    return $array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if (scalar(@$array) == 0);\n\
    \    return [$array->[0]] if (scalar(@$array) == 1);\n    my $direction = $array->[0]\
    \ + $array->[-1] % 2 == 0 ? -1 : 1;\n    my @r = sort {$a <=> $b} @$array;\n \
    \   @r = reverse @r if ($direction == -1);\n    return \\@r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = ($array->[0] +\
    \ $array->[-1]) % 2 == 0 ? sort {$b <=> $a} @$array : sort {$a <=> $b} @$array;\n\
    \    return \\@sorted_array;\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my($first, $last) = ($array->[0],\
    \ $array->[-1]);\n    if (($first + $last) % 2 == 0) {\n        return [sort {$b\
    \ <=> $a} @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    if(@result\
    \ == 0 || @result == 1) {\n        return @result;\n    }\n    if(($result[0]\
    \ + $result[-1]) % 2 == 0) {\n        return reverse sort {$a <=> $b} @result;\n\
    \    }\n    else {\n        return sort {$a <=> $b} @result;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (! scalar @$array) {\n        return\
    \ [];\n    }\n    if ( scalar @$array == 1) {\n        return $array;\n    }\n\
    \    if ( sum($array->[0], $array->[-1]) % 2 == 0) {\n        return [reverse\
    \ sort {$a <=> $b} @$array];\n    }\n    else {\n        return [sort {$a <=>\
    \ $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp_2yheb7x.pl line 23.

    '
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my($i, $j, $k, $tmp);\n    my($first,\
    \ $last);\n    my($len) = @$array;\n    if($len < 2) {\n        return $array;\n\
    \    }\n    $first = $array->[0];\n    $last = $array->[$len - 1];\n    $i = 0;\n\
    \    $j = $len - 1;\n    while($i < $j) {\n        if(($first + $last) % 2) {\n\
    \            if($array->[$i] > $array->[$j]) {\n                $tmp = $array->[$i];\n\
    \                $array->[$i] = $array->[$j];\n                $array->[$j] =\
    \ $tmp;\n            }\n            $i++;\n        } else {\n            if($array->[$i]\
    \ < $array->[$j]) {\n                $tmp = $array->[$i];\n                $array->[$i]\
    \ = $array->[$j];\n                $array->[$j] = $tmp;\n            }\n     \
    \       $j--;\n        }\n    }\n    if($i == $j) {\n        return $array;\n\
    \    }\n    return sort_array(sort_array(__get_array_slice($array, 0, $i))->concat(sort_array(__get_array_slice($array,\
    \ $i, $len))));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $array2 = @{$array};\n    return\
    \ [] if $array2 == 0;\n    return $array if $array2 == 1;\n    return sort {$a\
    \ <=> $b} @{$array} if $array->[0] + $array->[-1] % 2 == 1;\n    return sort {$b\
    \ <=> $a} @{$array} if $array->[0] + $array->[-1] % 2 == 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $index_sum = $array->[0] + $array->[-1];\n\
    \    my $sort_order = $index_sum % 2 ? \"-\" : \"+\";\n    return [sort { $a <=>\
    \ $b } @$array] if ($sort_order eq \"-\");\n    return [sort { $b <=> $a } @$array]\
    \ if ($sort_order eq \"+\");\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array if @$array <= 1;\n \
    \   my $sorted_array = [];\n    my $comparator = compare_numbers( $array->[0],\
    \ $array->[-1] );\n    for my $index ( sort { $comparator->($a, $b) } 0 .. $#$array\
    \ ) {\n        push @$sorted_array, $array->[$index];\n    }\n    return $sorted_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::compare_numbers called at /tmp/tmpj7e4lgzt.pl
    line 19.

    '
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $first = $array->[0];\n    my $last\
    \ = $array->[-1];\n    my $sum = $first + $last;\n    if ($sum % 2 == 0) {\n \
    \       return [sort {$b <=> $a} @$array];\n    } else {\n        return [sort\
    \ {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    return @$array unless $sum % 2;\n    my @sorted = sort { $b <=> $a } @$array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if !@$array;\n    if(($array->[0]\
    \ + $array->[-1]) % 2 == 0) {\n        @$array = sort {$b <=> $a} @$array;\n \
    \   }\n    else {\n        @$array = sort {$a <=> $b} @$array;\n    }\n    return\
    \ $array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $size = scalar @$array;\n    my\
    \ @sorted_array = ();\n    if ($size == 0) {\n        return \\@sorted_array;\n\
    \    }\n    elsif ($size == 1) {\n        return $array;\n    }\n    elsif (($array->[0]\
    \ + $array->[$size - 1]) % 2 == 0) {\n        @sorted_array = reverse sort {$a\
    \ <=> $b} @$array;\n    }\n    else {\n        @sorted_array = sort {$a <=> $b}\
    \ @$array;\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $last_index = @$array - 1;\n  \
    \  my $first_index = $array->[0];\n    my $last_index_value = $array->[$last_index];\n\
    \    my $sort_method = $first_index + $last_index_value;\n    my @sorted_array;\n\
    \    if ($sort_method % 2 == 0) {\n        @sorted_array = sort {$b <=> $a} @$array;\n\
    \    } else {\n        @sorted_array = sort {$a <=> $b} @$array;\n    }\n    return\
    \ \\@sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = ();\n    @sorted = _sort_even($array)\
    \ if _check_even($array);\n    @sorted = _sort_odd($array) if _check_odd($array);\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::_check_even called at /tmp/tmp07mscywv.pl line
    18.

    '
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $first = shift @$array;\n    my\
    \ $last = pop @$array;\n    if (($first + $last) % 2 == 0) {\n        return sort\
    \ {$b <=> $a} @$array;\n    } else {\n        return sort {$a <=> $b} @$array;\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $size = @$array;\n    return $array\
    \ if $size == 0;\n    return $array if $size == 1;\n    return $array if ($array->[0]\
    \ + $array->[$size - 1]) % 2 == 0;\n    my $new_array = [@$array];\n    @$new_array\
    \ = reverse @$new_array;\n    return $new_array;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $n = scalar @$array;\n    if ($n\
    \ == 0) {\n        return [];\n    } elsif ($n == 1) {\n        return [$array->[0]];\n\
    \    }\n    if ($array->[0] + $array->[$n - 1] % 2 == 0) {\n        return [reverse\
    \ sort {$a <=> $b} @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = $array->[0] + $array->[-1]\
    \ % 2 ? sort {$a <=> $b} @$array : sort {$b <=> $a} @$array;\n    return \\@sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if (@$array == 0);\n   \
    \ return [5] if (@$array == 1);\n    return [sort {$a <=> $b} @$array] if ($array->[0]\
    \ + $array->[-1]) % 2 == 1;\n    return [sort {$b <=> $a} @$array] if ($array->[0]\
    \ + $array->[-1]) % 2 == 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if !@$array;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my($first, $last) = @$array[0, -1];\n  \
    \  my $sum = $first + $last;\n    my $sorted_array = [sort {$a <=> $b} @$array];\n\
    \    if ($sum % 2 == 0) {\n        $sorted_array = [reverse @$sorted_array];\n\
    \    }\n    return $sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    # Your code here.\n    my $n = @$array;\n\
    \    my @res = ();\n    if ($n == 0) {\n        return @res;\n    }\n    elsif\
    \ ($n == 1) {\n        return @$array;\n    }\n    else {\n        my @A = @$array;\n\
    \        if ( $A[0] + $A[$n-1] % 2 == 0) {\n            @res = sort {$b <=> $a}\
    \ @A;\n        }\n        else {\n            @res = sort {$a <=> $b} @A;\n  \
    \      }\n        return @res;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if scalar @$array == 0;\n\
    \    return [$array->[0]] if scalar @$array == 1;\n    my $sum = $array->[0] +\
    \ $array->[scalar @$array - 1];\n    if($sum % 2 == 0) {\n        return [reverse\
    \ sort {$a <=> $b} @$array];\n    }\n    else {\n        return [sort {$a <=>\
    \ $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return unless @$array;\n    return\
    \ $array if @$array == 1;\n    my $sum = $$array[0] + $$array[-1];\n    my $cmp\
    \ = $sum % 2 ? sub { $b <=> $a } : sub { $a <=> $b };\n    [sort $cmp @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (!@$array) {\n        return [];\n\
    \    }\n    if (@$array <= 1) {\n        return $array;\n    }\n    my $first\
    \ = $array->[0];\n    my $last = $array->[-1];\n    my $sum = $first + $last;\n\
    \    if ($sum % 2 == 0) {\n        @$array = sort {$b <=> $a} @$array;\n    }\
    \ else {\n        @$array = sort {$a <=> $b} @$array;\n    }\n    return $array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @a = @$array;\n    if (@a == 0)\
    \ {\n        return [];\n    }\n    if (@a == 1) {\n        return [$a[0]];\n\
    \    }\n    my $sum = $a[0] + $a[-1];\n    if ($sum % 2 == 0) {\n        return\
    \ [reverse sort {$a <=> $b} @a];\n    }\n    else {\n        return [sort {$a\
    \ <=> $b} @a];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my($first, $last) = ($array->[0],\
    \ $array->[-1]);\n    my($is_odd) = ($first + $last) % 2 == 1;\n    if($is_odd)\
    \ {\n        return [sort {$a <=> $b} @$array];\n    } else {\n        return\
    \ [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if ( @$array ) {\n        if ( ( $array->[0]\
    \ + $array->[-1] ) % 2 ) {\n            @$array = sort { $a <=> $b } @$array;\n\
    \        } else {\n            @$array = sort { $b <=> $a } @$array;\n       \
    \ }\n    }\n    return $array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my($first, $last) = (0, $#$array);\n\
    \    return $array if $last < 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpufp9zd7h.pl line 54, at
    end of line

    syntax error at /tmp/tmpufp9zd7h.pl line 54, at EOF

    Execution of /tmp/tmpufp9zd7h.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $index = 0;\n    my $index_sum\
    \ = $array->[0] + $array->[-1];\n    if ($index_sum % 2 == 0) {\n        my @sorted\
    \ = sort {$b <=> $a} @$array;\n        return \\@sorted;\n    } else {\n     \
    \   my @sorted = sort {$a <=> $b} @$array;\n        return \\@sorted;\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if ! @$array;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    } else\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = ();\n    my @sort_array\
    \ = ();\n    if($array->[0] % 2 == 0 && $array->[$#{$array}] % 2 == 0) {\n   \
    \     @sort_array = sort {$b <=> $a} @{$array};\n    }\n    elsif($array->[0]\
    \ % 2 != 0 && $array->[$#{$array}] % 2 != 0) {\n        @sort_array = sort {$a\
    \ <=> $b} @{$array};\n    }\n    else {\n        @sort_array = @{$array};\n  \
    \  }\n    for(my $i = 0; $i < @sort_array; $i++) {\n        push @result, $sort_array[$i];\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = @$array;\n    if (@result\
    \ == 0 || @result == 1) {\n        return @result;\n    }\n    if (($result[0]\
    \ + $result[-1]) % 2 == 0) {\n        return sort {$b <=> $a} @result;\n    }\n\
    \    else {\n        return sort {$a <=> $b} @result;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    return if $sum == 0;\n    if ($sum % 2 == 0) {\n        return [sort {$b\
    \ <=> $a} @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n\
    \    }\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = sort {$a <=> $b}\
    \ @$array;\n    if (@$array[0] + @$array[-1] % 2) {\n        return @sorted_array;\n\
    \    } else {\n        return reverse @sorted_array;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    return\
    \ [@$array] if @$array == 1;\n    my $r = @$array - 1;\n    my $l = 0;\n    my\
    \ $sum = $array->[$l] + $array->[$r];\n    my $odd = $sum % 2;\n    my @array\
    \ = sort {\n        if ($odd) {\n            $a <=> $b;\n        } else {\n  \
    \          $b <=> $a;\n        }\n    } @$array;\n    return \\@array;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ($sum % 2) {\n        return [sort {$a <=> $b} @$array];\n    } else {\n\
    \        return [sort {$b <=> $a} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sorted_array = [];\n    if ($#{$array}\
    \ >= 0) {\n        if ( ($array->[0] + $array->[$#{$array}]) % 2) {\n        \
    \    @{$sorted_array} = sort {$a <=> $b} @{$array};\n        } else {\n      \
    \      @{$sorted_array} = sort {$b <=> $a} @{$array};\n        }\n    }\n    return\
    \ $sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $array_len = scalar @$array;\n\
    \    if(($array_len == 0) || ($array_len == 1)) {\n        return $array;\n  \
    \  }\n    my $first_index = $array->[0];\n    my $last_index = $array->[$array_len\
    \ - 1];\n    my $sum = $first_index + $last_index;\n    if($sum % 2 == 0) {\n\
    \        return [ sort { $b <=> $a } @$array ];\n    }\n    else {\n        return\
    \ [ sort { $a <=> $b } @$array ];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my($first, $last) = ($array->[0],\
    \ $array->[-1]);\n    if ($first + $last % 2) {\n        return sort { $a <=>\
    \ $b } @$array;\n    } else {\n        return sort { $b <=> $a } @$array;\n  \
    \  }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if (!$array || !@$array);\n\
    \    return [@$array] if (@$array == 1);\n    my($sum) = $array->[0] + $array->[-1];\n\
    \    my($descend) = ($sum % 2 == 0);\n    my(@sorted) = sort {$descend ? $b <=>\
    \ $a : $a <=> $b} @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $len = scalar @$array;\n    my\
    \ $ret = $array;\n    if ($len == 0) {\n        return $ret;\n    }\n    my $first\
    \ = $array->[0];\n    my $last = $array->[$len - 1];\n    if (($first + $last)\
    \ % 2 == 0) {\n        my $lo = 0;\n        my $hi = $len - 1;\n        while\
    \ ($lo < $hi) {\n            my $tmp = $ret->[$lo];\n            $ret->[$lo] =\
    \ $ret->[$hi];\n            $ret->[$hi] = $tmp;\n            $lo ++;\n       \
    \     $hi --;\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    # TODO: implement\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array if scalar @$array <\
    \ 2;\n    my $is_odd = ($array->[0] + $array->[-1]) % 2;\n    my @sorted_array\
    \ = sort {\n        if($is_odd) {\n            return $a - $b;\n        }\n  \
    \      else {\n            return $b - $a;\n        }\n    } @$array;\n    return\
    \ \\@sorted_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my($left, $right) = (0, scalar(@$array)\
    \ - 1);\n    my(@temp);\n    if($left + $right & 1) {\n        @temp = sort {$a\
    \ <=> $b} @$array;\n    } else {\n        @temp = sort {$b <=> $a} @$array;\n\
    \    }\n    return @temp;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = ();\n    if (@$array\
    \ && ($array->[0] + $array->[-1]) % 2) {\n        @result = sort {$a <=> $b} @$array;\n\
    \    }\n    else {\n        @result = sort {$b <=> $a} @$array;\n    }\n    return\
    \ \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if(ref($array) ne 'ARRAY') {\n   \
    \     die 'Input must be an array ref.\\n';\n    }\n    my $length = @$array;\n\
    \    if($length == 0 || $length == 1) {\n        return $array;\n    }\n    if(($array->[0]\
    \ + $array->[-1]) % 2 == 0) {\n        return sort {$b <=> $a} @$array;\n    }\n\
    \    else {\n        return sort {$a <=> $b} @$array;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if ( sum(@$array) % 2) {\n       \
    \ my @a = sort { $a <=> $b } @$array;\n        return \\@a;\n    }\n    else {\n\
    \        my @a = sort { $b <=> $a } @$array;\n        return \\@a;\n    }\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmpf4mytx8a.pl line 17.

    '
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @new_array = @$array;\n    if($array->[0]\
    \ + $array->[-1] % 2 == 0){\n        @new_array = sort{$b <=> $a} @new_array;\n\
    \    }else{\n        @new_array = sort{$a <=> $b} @new_array;\n    }\n    return\
    \ \\@new_array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array if scalar @$array <\
    \ 2;\n    my $order = @$array[0] + @$array[-1] % 2 ? -1 : 1;\n    return [ sort\
    \ { $a <=> $b } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $desc = $sum % 2 ? 1 : 0;\n    my @sorted = sort { $desc ? $b <=> $a :\
    \ $a <=> $b } @$array;\n    return \\@sorted;\n}\n1;\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $first_index = 0;\n    my $last_index\
    \ = 0;\n    if( @$array ) {\n        $first_index = $array->[0];\n        $last_index\
    \ = $array->[-1];\n    }\n    if( $first_index + $last_index % 2 == 0 ) {\n  \
    \      return sort { $b <=> $a } @$array;\n    }\n    else {\n        return sort\
    \ { $a <=> $b } @$array;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (scalar(@$array) < 2) {\n     \
    \   return $array;\n    }\n    my $front = shift @$array;\n    my $end = pop @$array;\n\
    \    if (($front + $end) % 2 == 0) {\n        my @sorted = sort {$b <=> $a} @$array;\n\
    \        return [$front, @sorted, $end];\n    } else {\n        my @sorted = sort\
    \ {$a <=> $b} @$array;\n        return [$front, @sorted, $end];\n    }\n}\nmy\
    \ $result = sort_array([2, 4, 3, 0, 1, 5]);\nprint \"@$result\\n\";\n$result =\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]);\nprint \"@$result\\n\";\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: '2 0 1 3 4 5

    2 5 4 3 1 0 6

    ok!ok!'
  timestamp: 1660015541
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $len = scalar @$array;\n    if($len\
    \ == 0) {\n        return [];\n    }\n    if($len == 1) {\n        return [$array->[0]];\n\
    \    }\n    # compare each element with the value at (begin + end) / 2\n    my\
    \ $begin = 0;\n    my $end = $len - 1;\n    my $middle = ($begin + $end) / 2;\n\
    \    my $half = $array->[$middle];\n    # sort in ascending order if the sum(begin,\
    \ end) is odd, \n    # or sort it in descending order if the sum(begin, end) is\
    \ even.\n    my $asc = ($begin + $end) % 2 ? 1 : 0;\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5ba9_i7t.pl line 67, at
    end of line

    syntax error at /tmp/tmp5ba9_i7t.pl line 67, at EOF

    Execution of /tmp/tmp5ba9_i7t.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $first_element = $array->[0];\n\
    \    my $last_element = $array->[$#{$array}];\n    my $sum = $first_element +\
    \ $last_element;\n    my @sorted;\n    if ($sum % 2) {\n        @sorted = sort\
    \ {$a <=> $b} @{$array};\n    } else {\n        @sorted = sort {$b <=> $a} @{$array};\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @odds;\n    my @evens;\n    my\
    \ @return;\n    if (sum(@$array[0], @$array[-1]) % 2) {\n        foreach my $element\
    \ (@$array) {\n            if ($element % 2) {\n                push @odds, $element;\n\
    \            } else {\n                push @evens, $element;\n            }\n\
    \        }\n        @odds = sort {$a <=> $b} @odds;\n        @evens = sort {$b\
    \ <=> $a} @evens;\n        @return = (@odds, @evens);\n    } else {\n        foreach\
    \ my $element (@$array) {\n            if ($element % 2) {\n                push\
    \ @odds, $element;\n            } else {\n                push @evens, $element;\n\
    \            }\n        }\n        @odds = sort {$b <=> $a} @odds;\n        @evens\
    \ = sort {$a <=> $b} @evens;\n        @return = (@odds, @evens);\n    }\n    return\
    \ \\@return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmpctc62ggh.pl line 20.

    '
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (@$array == 0) {\n        return\
    \ [];\n    }\n    if (@$array == 1) {\n        return [$array->[0]];\n    }\n\
    \    my @sorted = sort {$a <=> $b} @$array;\n    if (($array->[0] + $array->[-1])\
    \ % 2 == 0) {\n        return [reverse @sorted];\n    }\n    return \\@sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $arr_len = scalar @$array;\n  \
    \  return $array if $arr_len < 2;\n    my @odd_pos = grep { $_ % 2 } @$array;\n\
    \    my @even_pos = grep { $_ % 2 == 0 } @$array;\n    if ($array->[0] + $array->[-1]\
    \ % 2 == 0) {\n        @odd_pos = sort { $b <=> $a } @odd_pos;\n        @even_pos\
    \ = sort { $b <=> $a } @even_pos;\n    } else {\n        @odd_pos = sort { $a\
    \ <=> $b } @odd_pos;\n        @even_pos = sort { $a <=> $b } @even_pos;\n    }\n\
    \    my @sort_array;\n    my $index = 0;\n    while ($index < $arr_len) {\n  \
    \      if ($index % 2) {\n            push @sort_array, shift @odd_pos;\n    \
    \    } else {\n            push @sort_array, shift @even_pos;\n        }\n   \
    \     $index++;\n    }\n    return \\@sort_array;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if scalar @$array == 0;\n\
    \    my $total = $array->[0] + $array->[-1];\n    my $flag = $total % 2 == 0 ?\
    \ 0 : 1;\n    my @res = sort {$flag ? $b <=> $a : $a <=> $b} @$array;\n    return\
    \ \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if ! @$array;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    my $sort_type = $sum % 2 == 0 ? 'desc' : 'asc';\n    if ($sort_type eq 'asc')\
    \ {\n        return [sort {$a <=> $b} @$array];\n    }\n    else {\n        return\
    \ [sort {$b <=> $a} @$array];\n    }\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $is_even = _is_even($array);\n\
    \    my @sorted_array = _sort_array($array, $is_even);\n    return @sorted_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::_is_even called at /tmp/tmpd9r7dctw.pl line
    17.

    '
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $first = $array->[0];\n    my $last\
    \ = $array->[$#$array];\n    if (($first + $last) % 2 == 0) {\n        return\
    \ [reverse sort {$a <=> $b} @$array];\n    } else {\n        return [sort {$a\
    \ <=> $b} @$array];\n    }\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    return\n        ($sorted[0] + $sorted[-1]) % 2\n        ? reverse @sorted\n\
    \        : @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $first_last_sum = $array->[0] +\
    \ $array->[-1];\n    my $flag = ( $first_last_sum % 2 == 0 ? -1 : 1 );\n    return\
    \ [ sort { $a <=> $b } @$array ] if $flag == 1;\n    return [ sort { $b <=> $a\
    \ } @$array ] if $flag == -1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array unless @$array;\n  \
    \  my @array = @$array;\n    my $len = scalar @array;\n    my $f = $array[0];\n\
    \    my $l = $array[$len - 1];\n    return $array if $f == $l;\n    if( ($f +\
    \ $l) % 2 == 0 ) {\n        for(my $i = 0; $i < $len / 2; $i++) {\n          \
    \  @array[$i, $len - $i - 1] = @array[$len - $i - 1, $i];\n        }\n    }\n\
    \    return \\@array;\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if not @$array;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my $is_odd = ($array->[0] + $array->[-1])\
    \ % 2;\n    return [sort {$a <=> $b} @$array] if $is_odd;\n    return [sort {$b\
    \ <=> $a} @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array if scalar @$array <\
    \ 2;\n    if (($array->[0] + $array->[-1]) % 2) {\n        return sort {$a <=>\
    \ $b} @$array;\n    } else {\n        return sort {$b <=> $a} @$array;\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (!@$array) {\n        return $array;\n\
    \    }\n    my $is_even = ( $array->[0] + $array->[-1] ) % 2 == 0;\n    my @sorted\
    \ = sort { $is_even ? $b <=> $a : $a <=> $b } @$array;\n    return \\@sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @new_array = @$array;\n    return\
    \ [] if (!@new_array);\n    my $length = @new_array;\n    return [@new_array]\
    \ if ($length == 1);\n    my $sum = 0;\n    $sum = $new_array[0] + $new_array[$length\
    \ - 1];\n    if ($sum % 2) {\n        @new_array = sort {$a <=> $b} @new_array;\n\
    \    } else {\n        @new_array = sort {$b <=> $a} @new_array;\n    }\n    return\
    \ [@new_array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return sort { $a <=> $b } @$array\
    \ if $array->[0] + $array->[-1] % 2 == 0;\n    return sort { $b <=> $a } @$array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $position = int @$array / 2;\n\
    \    my $position_values = 0;\n    my $position_values_end = 0;\n    if (@$array\
    \ == 0 || @$array == 1) {\n        return $array;\n    } elsif (@$array % 2 ==\
    \ 0) {\n        $position_values = $array->[$position];\n        $position_values_end\
    \ = $array->[$position - 1];\n    } else {\n        $position_values = $array->[$position];\n\
    \        $position_values_end = $array->[$position + 1];\n    }\n    if (($position_values\
    \ + $position_values_end) % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n\
    \    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 255
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (scalar(@$array) <= 1) {\n    \
    \    return $array;\n    }\n    if (($array->[0] + $array->[-1]) % 2 == 0) {\n\
    \        $array = merge_sort($array, sub {$b <=> $a});\n    } else {\n       \
    \ $array = merge_sort($array, sub {$a <=> $b});\n    }\n    return $array;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::merge_sort called at /tmp/tmpgzk_sln1.pl line
    23.

    '
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $len = @$array;\n    my $first\
    \ = $array->[0];\n    my $last = $array->[$len - 1];\n    my $sum = $first + $last;\n\
    \    my @res;\n    if($sum % 2 == 0) {\n        @res = reverse sort {$a <=> $b}\
    \ @$array;\n    } else {\n        @res = sort {$a <=> $b} @$array;\n    }\n  \
    \  return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array if scalar @$array <\
    \ 2;\n    my $sum = $$array[0] + $$array[-1];\n    if ($sum % 2 == 0) {\n    \
    \    return [sort {$b <=> $a} @$array];\n    } else {\n        return [sort {$a\
    \ <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $length = scalar @$array;\n   \
    \ if ($length == 0) {\n        return [];\n    } elsif ($length == 1) {\n    \
    \    return [$array->[0]];\n    } else {\n        my @sorted_array = @$array;\n\
    \        if (($array->[0] + $array->[-1]) % 2 == 0) {\n            @sorted_array\
    \ = sort {$b <=> $a} @sorted_array;\n        } else {\n            @sorted_array\
    \ = sort {$a <=> $b} @sorted_array;\n        }\n        return \\@sorted_array;\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    if (! @$array) {\n        return [];\n\
    \    }\n    if (@$array == 1) {\n        return $array;\n    }\n    if (($array->[0]\
    \ + $array->[-1]) % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n  \
    \  }\n    else {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $length = @$array;\n    if ($length\
    \ < 2) {\n        return $array;\n    }\n    if (($array->[0] + $array->[$length\
    \ - 1]) % 2 == 0) {\n        return [reverse sort {$a <=> $b} @$array];\n    }\n\
    \    else {\n        return [sort {$a <=> $b} @$array];\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = ();\n    return @result\
    \ if @$array == 0;\n    return @$array if @$array == 1;\n    my $sum = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2 == 0) {\n        my @reverse = sort {$b <=>\
    \ $a} @$array;\n        @result = @reverse;\n    } else {\n        my @normal\
    \ = sort {$a <=> $b} @$array;\n        @result = @normal;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @ret;\n    my $n = scalar @$array;\n\
    \    if ($n == 0) {\n        return @ret;\n    }\n    if ($n == 1) {\n       \
    \ return $array;\n    }\n    my $sum = $array->[0] + $array->[$n - 1];\n    if\
    \ ($sum % 2 == 0) {\n        @ret = sort {$b <=> $a} @$array;\n    } else {\n\
    \        @ret = sort {$a <=> $b} @$array;\n    }\n    return @ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if ( $sum % 2 == 0 ) {\n        return reverse sort { $a <=> $b } @$array;\n\
    \    }\n    else {\n        return sort { $a <=> $b } @$array;\n    }\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if($sum % 2) {\n        return sort {$a <=> $b} @$array;\n    }\n    else\
    \ {\n        return sort {$b <=> $a} @$array;\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my($sum) = $array->[0] + $array->[-1];\n\
    \    return [] unless scalar @$array;\n    return [@$array] if scalar @$array\
    \ == 1;\n    $sum % 2 ? return [sort {$a <=> $b} @$array] : return [sort {$b <=>\
    \ $a} @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $length = @$array;\n    my @result\
    \ = ();\n    if ($length == 0) {\n        return $array;\n    }\n    elsif ($length\
    \ == 1) {\n        return $array;\n    }\n    else {\n        my $sum = $array->[0]\
    \ + $array->[$length - 1];\n        if ($sum % 2 == 0) {\n            @result\
    \ = reverse sort @$array;\n        }\n        else {\n            @result = sort\
    \ @$array;\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @array = @$array;\n    if ($array[0]\
    \ + $array[-1] % 2 == 0) {\n        return sort {$b <=> $a} @array;\n    } else\
    \ {\n        return sort {$a <=> $b} @array;\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    # \uBC30\uC5F4\uC774 \uBE44\uC5B4\uC788\
    \uC73C\uBA74 \uBC30\uC5F4 \uB9AC\uD134\n    return $array if scalar @$array ==\
    \ 0;\n    # \uBC30\uC5F4\uC758 \uCCAB\uBC88\uC9F8 \uAC12\uACFC \uB9C8\uC9C0\uB9C9\
    \ \uAC12\uC758 \uD569\uC774 \uD640\uC218\uBA74 \uC624\uB984\uCC28\uC21C \uC815\
    \uB82C, \uC9DD\uC218\uBA74 \uB0B4\uB9BC\uCC28\uC21C \uC815\uB82C\n    return scalar\
    \ @$array == 1 ? $array : \n    @$array[0] + @$array[-1] % 2 == 0 ? sort {$b <=>\
    \ $a} @$array : sort {$a <=> $b} @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if @$array == 0;\n    return\
    \ [$array->[0]] if @$array == 1;\n    my $sum = $array->[0] + $array->[-1];\n\
    \    if($sum % 2 == 0) {\n        $array = [reverse @$array];\n    }\n    return\
    \ [sort {$a <=> $b} @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted_array = @$array;\n    my\
    \ $sum = $sorted_array[0] + $sorted_array[-1];\n    if ($sum % 2) {\n        @sorted_array\
    \ = sort {$a <=> $b} @sorted_array;\n    } else {\n        @sorted_array = sort\
    \ {$b <=> $a} @sorted_array;\n    }\n    return \\@sorted_array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @result = sort { $a <=> $b } @$array;\n\
    \    return @result[0] + @result[-1] % 2\n        ? reverse @result\n        :\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return $array unless @$array;\n  \
    \  if (($array->[0] + $array->[-1]) % 2 == 0) {\n        return sort { $b <=>\
    \ $a } @$array;\n    }\n    else {\n        return sort { $a <=> $b } @$array;\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my $length = @$array;\n    return\
    \ [] if $length == 0;\n    my @result = @$array;\n    my $index = 0;\n    my $index_last\
    \ = $length - 1;\n    my $sum = $result[$index] + $result[$index_last];\n    if\
    \ ($sum % 2 == 0) {\n        @result = sort {$b <=> $a} @result;\n    } else {\n\
    \        @result = sort {$a <=> $b} @result;\n    }\n    return \\@result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = @$array;\n    my $sum\
    \ = $array->[0] + $array->[-1];\n    if ($sum % 2 == 0) {\n        @sorted = sort\
    \ {$b <=> $a} @sorted;\n    } else {\n        @sorted = sort {$a <=> $b} @sorted;\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
- exit_code: 1
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    my @sorted = sort {\n        my $ret\
    \ = (($a + $b) % 2) <=> (($b + $a) % 2);\n        if ($ret == 0) {\n         \
    \   $a <=> $b;\n        } else {\n            $ret;\n        }\n    } @$array;\n\
    \    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660015541
- exit_code: 0
  program: "# Given an array of non-negative integers, return a copl of the given\
    \ array after sorting,\n# you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n# or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n# Note:\n#\
    \ * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n#\
    \ >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2,\
    \ 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\
    sub sort_array {\n    my($array) = @_;\n    return [] if not @$array;\n    my\
    \ $left = $array->[0];\n    my $right = $array->[-1];\n    return [sort {$a <=>\
    \ $b} @$array] if ($left + $right) % 2 == 1;\n    return [sort {$b <=> $a} @$array];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
    \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15,\
    \ 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
    \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660015541
