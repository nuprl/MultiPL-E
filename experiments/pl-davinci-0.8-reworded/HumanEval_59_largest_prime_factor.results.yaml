language: pl
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my($largest) = 1;\n    my($p)\
    \ = 2;\n    my($f) = $n;\n    while($f > 1) {\n        if($f % $p == 0) {\n  \
    \          $largest = $p;\n            while($f % $p == 0) {\n               \
    \ $f /= $p;\n            }\n        }\n        $p++;\n    }\n    return $largest;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n\
    \        if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821642
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my $factor = 2;\n    my $last_factor\
    \ = 1;\n    while ($n > 1) {\n        while ($n % $factor == 0) {\n          \
    \  $last_factor = $factor;\n            $n /= $factor;\n        }\n        $factor\
    \ += 1;\n    }\n    return $last_factor;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821642
- exit_code: 1
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    return $n if $n <= 1;\n    return\
    \ 2 if $n == 2;\n    return 3 if $n == 3;\n    return 2 if $n % 2 == 0;\n    return\
    \ 3 if $n % 3 == 0;\n    my $f = 5;\n    my $max = sqrt($n);\n    while ($f <=\
    \ $max) {\n        return $f if $n % $f == 0;\n        return $n / $f if $n %\
    \ ($f + 2) == 0;\n        $f += 6;\n    }\n    return $n;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n      \
    \  if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821642
- exit_code: 255
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my $factor = 2;\n    while (not\
    \ is_prime($n)) {\n        if ($n % $factor == 0) {\n            $n /= $factor;\n\
    \        } else {\n            $factor++;\n        }\n    }\n    return $n;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n\
    \        if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmp7hvw9oks.pl line
    9.

    '
  stdout: ''
  timestamp: 1659821642
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my $factor = 2;\n    while ($n\
    \ > 1) {\n        if ($n % $factor == 0) {\n            $n /= $factor;\n     \
    \   } else {\n            $factor++;\n        }\n    }\n    return $factor;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n\
    \        if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821567
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my($i) = 2;\n    while ($i <\
    \ $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $n;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821567
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my $i = 2;\n    while ($i *\
    \ $i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return $n;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n      \
    \  if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821567
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my($m) = $n;\n    my($i) = 2;\n\
    \    while($m > 1) {\n        if($m % $i == 0) {\n            $m /= $i;\n    \
    \    } else {\n            $i++;\n        }\n    }\n    return $i;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n      \
    \  if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821642
- exit_code: 1
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my($factor, $largest) = (2,\
    \ 2);\n    # Try every factor.\n    while ($factor <= sqrt($n)) {\n        # Is\
    \ this a factor?\n        if ($n % $factor == 0) {\n            # Is it prime?\n\
    \            my($is_prime) = 1;\n            my($p) = 2;\n            while ($p\
    \ < $factor) {\n                if ($factor % $p == 0) {\n                   \
    \ $is_prime = 0;\n                    last;\n                }\n             \
    \   $p += 1;\n            }\n            if ($is_prime) {\n                $largest\
    \ = $factor;\n            }\n        }\n        $factor += 1;\n    }\n    return\
    \ $largest;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821642
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    return undef if !$n;\n    my\
    \ $prime = 2;\n    while ($n > 1) {\n        while ($n % $prime == 0) {\n    \
    \        $n /= $prime;\n        }\n        $prime++;\n    }\n    return $prime-1;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n\
    \        if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821642
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my $f = 2;\n    while ($n >\
    \ 1) {\n        while ($n % $f == 0) {\n            $n /= $f;\n        }\n   \
    \     $f++;\n    }\n    return $f - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821642
- exit_code: 255
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my($factor, $last_factor) =\
    \ (1, 1);\n    while ($factor < $n) {\n        $factor = next_prime($factor);\n\
    \        if ($n % $factor == 0) {\n            $last_factor = $factor;\n     \
    \   }\n    }\n    return $last_factor;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::next_prime called at /tmp/tmpw9enp86g.pl line
    10.

    '
  stdout: ''
  timestamp: 1659821642
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my $largest = 1;\n    while\
    \ ($n % 2 == 0) {\n        $largest = 2;\n        $n /= 2;\n    }\n    my $test\
    \ = 3;\n    while ($test <= $n) {\n        while ($n % $test == 0) {\n       \
    \     $largest = $test;\n            $n /= $test;\n        }\n        $test +=\
    \ 2;\n    }\n    return $largest;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821642
- exit_code: 1
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my $p = 2;\n    my $max = 0;\n\
    \    while($p < $n) {\n        while($n % $p == 0) {\n            $max = $p;\n\
    \            $n /= $p;\n        }\n        $p++;\n    }\n    return $max;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n\
    \        if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821642
- exit_code: 255
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my($prime) = 2;\n    for my\
    \ $p (primes()) {\n        next if $p < $prime;\n        last if $p > $n;\n  \
    \      if ($n % $p == 0) {\n            $prime = $p;\n        }\n    }\n    return\
    \ $prime;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &largest_prime_factor;\n        if(eq_deeply($candidate->(15),5)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::primes called at /tmp/tmp_ntnh054.pl line 9.

    '
  stdout: ''
  timestamp: 1659821642
- exit_code: 255
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my($p) = 2;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n      \
    \  if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqlfr8f1h.pl line 36, at
    end of line

    syntax error at /tmp/tmpqlfr8f1h.pl line 36, at EOF

    Execution of /tmp/tmpqlfr8f1h.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1659821642
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my $f = 2;\n    while (1) {\n\
    \        if ($n % $f == 0) {\n            $n /= $f;\n        } else {\n      \
    \      $f++;\n        }\n        if ($n == 1) {\n            return $f;\n    \
    \    }\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821642
- exit_code: 0
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my $x = 2;\n    my $max = 1;\n\
    \    while ($x < $n) {\n        if ($n % $x == 0) {\n            # We found a\
    \ factor, check if it's prime.\n            my $is_prime = 1;\n            my\
    \ $y = 2;\n            while ($y < $x) {\n                if ($x % $y == 0) {\n\
    \                    $is_prime = 0;\n                    last;\n             \
    \   }\n                $y++;\n            }\n            if ($is_prime) {\n  \
    \              # Found a prime factor. Check if it's the largest one.\n      \
    \          if ($x > $max) {\n                    $max = $x;\n                }\n\
    \            }\n        }\n        $x++;\n    }\n    return $max;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n      \
    \  if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821642
- exit_code: 255
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my($d, $p) = 2;\n    while ($d\
    \ * $d <= $n) {\n        if ($n % $d == 0) {\n            $p = $d;\n         \
    \   $n /= $d;\n        } else {\n            $d = next_prime($d);\n        }\n\
    \    }\n    $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::next_prime called at /tmp/tmp4dda2qvm.pl line
    14.

    '
  stdout: ''
  timestamp: 1659821642
- exit_code: 255
  program: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
    sub largest_prime_factor {\n    my($n) = @_;\n    my $prime_test = is_prime_factor_test(1,\
    \ $n);\n    my $primes = primes_to_n($n);\n    my $largest_prime = pop(@$primes);\n\
    \    return $largest_prime;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&largest_prime_factor;\n        if(eq_deeply($candidate->(15),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime_factor_test called at /tmp/tmp5vu00w59.pl
    line 8.

    '
  stdout: ''
  timestamp: 1659821642
