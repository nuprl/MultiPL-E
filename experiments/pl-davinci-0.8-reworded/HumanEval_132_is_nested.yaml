name: HumanEval_132_is_nested
language: pl
prompt: "# Create a function that takes a string as input which contains only square\
  \ brackets.\n# The function should return 1 if and only if there is a valid subsequence\
  \ of brackets \n# where at least one bracket in the subsequence is nested.\n# >>>\
  \ is_nested(\"[[]]\")\n# 1\n# >>> is_nested(\"[]]]]]]][[[[[]\")\n# \"\"\n# >>> is_nested(\"\
  [][]\")\n# \"\"\n# >>> is_nested(\"[]\")\n# \"\"\n# >>> is_nested(\"[[][]]\")\n\
  # 1\n# >>> is_nested(\"[[]][[\")\n# 1\nsub is_nested {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n\
  \        if(eq_deeply($candidate->(\"[[]]\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  [][]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"[]\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  []]]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  []]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"[[]][[\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @stack;\n    foreach my $char (split //, $string) {\n      \
    \  if ( $char eq '[' ) {\n            push @stack, ']';\n        }\n        elsif\
    \ ( $char eq ']' ) {\n            return 1 if pop @stack;\n        }\n    }\n\
    \    return \"\";\n}", "    $string =~ s/\\[\\]//g;\n    return $string =~ m/(\\\
    [)(\\])/g ? 1 : \"\";\n}", "    my $nest_flag = 0;\n    my $nest_count = 0;\n\
    \    my $left_bracket_count = 0;\n    my $right_bracket_count = 0;\n    my $result\
    \ = 0;\n    my $substring = \"\";\n    for(my $i = 0; $i < length($string); $i++)\
    \ {\n        my $ch = substr($string, $i, 1);\n        if($ch eq \"[\") {\n  \
    \          $left_bracket_count++;\n            if($nest_flag) {\n            \
    \    $nest_count++;\n            }\n        }\n        if($ch eq \"]\") {\n  \
    \          $right_bracket_count++;\n            if($nest_flag) {\n           \
    \     $nest_count--;\n                if($nest_count == 0) {\n               \
    \     $nest_flag = 0;\n                    $substring = \"\";\n              \
    \  }\n            }\n        }\n        if($nest_flag == 0) {\n            $substring\
    \ .= $ch;\n        }\n        if($substring eq \"[]\") {\n            $nest_flag\
    \ = 1;\n            $nest_count = 1;\n            $substring = \"\";\n       \
    \ }\n    }\n    if($left_bracket_count != $right_bracket_count) {\n        return\
    \ \"\";\n    }\n    if($nest_flag) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my @nested;\n    for my $char (split //, $string) {\n        if (is_open($char))\
    \ {\n            push @nested, $char;\n        }\n        else {\n           \
    \ my $current = pop @nested;\n            my $prev = pop @nested;\n          \
    \  if (is_open($prev)) {\n                return 1;\n            }\n         \
    \   push @nested, $prev;\n            push @nested, $current;\n        }\n   \
    \ }\n    return \"\";\n}", "    my $result = 0;\n    my $count = 0;\n    my @array\
    \ = split //, $string;\n    for(my $i = 0; $i < scalar @array; $i++) {\n     \
    \   if ($array[$i] eq '[') {\n            $count++;\n        } elsif ($array[$i]\
    \ eq ']') {\n            $count--;\n        }\n        if ($count < 0) {\n   \
    \         $result = 1;\n            last;\n        }\n    }\n    return $result;\n\
    }", "    my $result = '\"\"';\n    my $left = 0;\n    my $right = 0;\n    my $length\
    \ = length($string);\n    my $counter = 0;\n    my $count = 0;\n    while($counter\
    \ <= $length) {\n        my $next = substr($string, $counter, 1);\n        if($next\
    \ eq '[') {\n            $left += 1;\n        }\n        elsif($next eq ']') {\n\
    \            $right += 1;\n        }\n        if($left < $right) {\n         \
    \   $result = '1';\n            last;\n        }\n        $counter += 1;\n   \
    \ }\n    if($left == $right) {\n        $result = '1';\n    }\n    return $result;\n\
    }", "    my @brackets = split //, $string;\n    my $valid_nesting = 0;\n    my\
    \ $valid_closing = 0;\n    my $bracket_count = 0;\n    for my $bracket(@brackets)\
    \ {\n        if($bracket eq \"[\") {\n            if($valid_closing == 1) {\n\
    \                $valid_nesting = 1;\n            }\n            $bracket_count++;\n\
    \        }\n        if($bracket eq \"]\") {\n            if($bracket_count > 0)\
    \ {\n                $bracket_count--;\n                $valid_closing = 1;\n\
    \            }\n        }\n    }\n    if($valid_nesting == 1) {\n        return\
    \ 1;\n    }\n    else {\n        return 0;\n    }\n}", "    my $nested = 0;\n\
    \    my $stack = [];\n    foreach my $char (split(//, $string)) {\n        if\
    \ ($char eq '[') {\n            push(@$stack, $char);\n        } elsif ($char\
    \ eq ']') {\n            if ($stack->[-1] eq '[') {\n                pop(@$stack);\n\
    \            } else {\n                push(@$stack, $char);\n            }\n\
    \        }\n    }\n    $nested = 1 if (scalar(@$stack) == 0);\n    return $nested;\n\
    }", "    for (my $i = 0; $i < length($string); $i++) {\n        for (my $j = $i\
    \ + 1; $j < length($string); $j++) {\n            return 1 if substr($string,\
    \ $i, 1) eq \"[\" and substr($string, $j, 1) eq \"[\";\n        }\n    }\n   \
    \ return \"\";\n}", "    my $length = length($string);\n    my $is_nested = \"\
    \";\n    my $left_bracket = 0;\n    my $right_bracket = 0;\n    my $nested_counter\
    \ = 0;\n    for (my $i = 0; $i < $length; $i++) {\n        if (substr($string,\
    \ $i, 1) eq \"[\") {\n            $left_bracket++;\n        }\n        if (substr($string,\
    \ $i, 1) eq \"]\") {\n            $right_bracket++;\n        }\n        if ($left_bracket\
    \ == $right_bracket) {\n            if ($left_bracket > 0) {\n               \
    \ $nested_counter++;\n            }\n            $left_bracket = 0;\n        \
    \    $right_bracket = 0;\n        }\n    }\n    if ($nested_counter > 1) {\n \
    \       $is_nested = 1;\n    }\n    return $is_nested;\n}", "    my @array = split\
    \ //, $string;\n    my $nested = 0;\n    my $bracket = 0;\n    foreach(@array)\
    \ {\n        if ($_ eq '[') {\n            $bracket++;\n        } elsif ($_ eq\
    \ ']') {\n            $bracket--;\n        }\n        if ($bracket < 0) {\n  \
    \          $nested = 1;\n        }\n    }\n    if ($nested == 1) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}", "    my $nested = 0;\n  \
    \  my $length = length($string);\n    for (my $i = 0; $i < $length; $i++){\n \
    \       my $char = substr($string, $i, 1);\n        my $next = substr($string,\
    \ $i + 1, 1);\n        if ($char eq \"[\" && $next eq \"[\"){\n            $nested\
    \ = 1;\n        }\n    }\n    return $nested;\n}", "    my $len = length($string);\n\
    \    return 0 if $len % 2;\n    for my $i (1..$len) {\n        return 1 if $string\
    \ =~ /\\[\\]/g;\n    }\n    return 0;\n}", "    my @chars = split //, $string;\n\
    \    my $prev = \"\";\n    for my $c (@chars) {\n        if ($c eq \"[\") {\n\
    \            if ($prev eq \"[\") {\n                return 1;\n            }\n\
    \        }\n        $prev = $c;\n    }\n    return \"\";\n}", "    my @stack;\n\
    \    for my $char (split '', $string) {\n        if ($char eq '[') {\n       \
    \     push @stack, $char;\n        } elsif ($char eq ']') {\n            if (scalar\
    \ @stack == 0) {\n                return \"\";\n            } else {\n       \
    \         my $top = pop @stack;\n                if ($top ne '[') {\n        \
    \            return \"\";\n                }\n            }\n        }\n    }\n\
    \    if (scalar @stack > 0) {\n        return \"\";\n    }\n    return 1;\n}",
  "    my @chars = split //, $string;\n    my $level = 0;\n    for my $i (0..$#chars)\
    \ {\n        $level += $chars[$i] eq '[' ? 1 : -1;\n        return \"\" if $level\
    \ < 0;\n    }\n    return $level ? \"\" : 1;\n}", "    return undef unless ($string\
    \ =~ m/\\[[\\]]/g);\n    my $level = 0;\n    my $last = -1;\n    my $result =\
    \ 0;\n    my $counter = 0;\n    foreach (split //, $string) {\n        if ($_\
    \ eq '[') {\n            $level++;\n        } else {\n            $level--;\n\
    \        }\n        if ($level == 0) {\n            $result = 1 if ($counter -\
    \ $last > 1);\n            $last = $counter;\n        }\n        $counter++;\n\
    \    }\n    return $result;\n}", "    my $length = length($string);\n    my $max;",
  "    my $result = 0;\n    my $counter = 0;\n    foreach my $char (split //, $string)\
    \ {\n        $counter += ($char eq \"[\") ? 1 : -1;\n        if ($counter < 0)\
    \ {\n            $result = 1;\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my $len = length($string);\n    for(my $i = 0; $i < $len;\
    \ $i++) {\n        my $test = substr($string, $i, $len);\n        if($test =~\
    \ /^\\[\\]/) {\n            return 1;\n        }\n    }\n    return \"\";\n}",
  "    my @st = ();\n    my $n = length($string);\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        if ($string->[$i] eq '[') {\n            push(@st, $string->[$i]);\n\
    \        } else {\n            if (scalar(@st) == 0) {\n                return\
    \ \"\";\n            } else {\n                pop(@st);\n            }\n    \
    \    }\n    }\n    if (scalar(@st) > 0) {\n        return \"\";\n    } else {\n\
    \        return 1;\n    }\n}", "    my @char = split(//, $string);\n    my $i\
    \ = 0;\n    my $j = 1;\n    my $nested = 0;\n    my $count = @char;\n    while\
    \ ($j <= $count) {\n        if ($char[$i] eq \"[\" && $char[$j] eq \"]\") {\n\
    \            $nested = 1;\n            last;\n        }\n        $i++;\n     \
    \   $j++;\n    }\n    return $nested;\n}", "    my $number = 0;\n    my $hold\
    \ = \"\";\n    my $i = 0;\n    while ($i < length($string)) {\n        $hold =\
    \ substr($string, $i, 1);\n        if ($hold eq \"[\") {\n            $number++;\n\
    \        }\n        if ($hold eq \"]\") {\n            $number--;\n        }\n\
    \        if ($number < 0) {\n            return \"\";\n        }\n        $i++;\n\
    \    }\n    if ($number > 0) {\n        return \"\";\n    }\n    return 1;\n}",
  "    my @stack;\n    foreach my $c (split(\"\", $string)) {\n        if ($c eq '[')\
    \ {\n            push(@stack, $c);\n        } else {\n            if (scalar(@stack)\
    \ > 0) {\n                pop(@stack);\n            } else {\n               \
    \ return \"\";\n            }\n        }\n    }\n    return (scalar(@stack) >\
    \ 0) ? 1 : \"\";\n}", "    my @chars = split(\"\", $string);\n    my $i = 0;\n\
    \    while($i < $#chars) {\n        if($chars[$i] eq \"[\" && $chars[$i+1] eq\
    \ \"[\") {\n            return 1;\n        }\n        $i++;\n    }\n    return\
    \ \"\";\n}", "    my $open_brackets = 0;\n    for my $i (0..length($string)-1)\
    \ {\n        if(substr($string, $i, 1) eq \"[\") {\n            $open_brackets++;\n\
    \        }\n        elsif(substr($string, $i, 1) eq \"]\") {\n            $open_brackets--;\n\
    \        }\n        if($open_brackets == 0) {\n            return 1;\n       \
    \ }\n    }\n    return 0;\n}", "    my $result = 0;\n    my $cnt = 0;\n    foreach\
    \ my $char (split(//, $string)) {\n        if ($char eq '[') {\n            $cnt++;\n\
    \        }\n        elsif ($char eq ']') {\n            $cnt--;\n        }\n \
    \       if ($cnt == 0) {\n            $result = 1;\n        }\n    }\n    return\
    \ $result;\n}", "    my $count = 0;\n    my $is_nested = 0;\n    foreach my $element\
    \ (@$string) {\n        if ($element eq \"[\") {\n            $count++;\n    \
    \    }\n        elsif ($element eq \"]\") {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            $is_nested = 1;\n        }\n    }\n  \
    \  return $is_nested;\n}", "    # TODO\n}", "    my @chars = split //, $string;\n\
    \    my $nesting = 0;\n    my $last_nesting = 0;\n    my $last_char = \"\";\n\
    \    for my $char (@chars) {\n        if ($char eq '[') {\n            $nesting++;\n\
    \        }\n        elsif ($char eq ']') {\n            $nesting--;\n        }\n\
    \        if ($last_char eq '[' && $char eq ']' && $last_nesting == $nesting) {\n\
    \            return 1;\n        }\n        $last_char = $char;\n        $last_nesting\
    \ = $nesting;\n    }\n    return 0;\n}", "    my $str = $string;\n    my $retval\
    \ = 0;\n    while (length($str) > 0) {\n        if (length($str) % 2 == 0) {\n\
    \            #print \"length odd\\n\";\n            if ($str =~ /^(\\[\\]\\[\\\
    ])/) {\n                $str =~ s/^(\\[\\]\\[\\])//;\n                $retval\
    \ = 1;\n            }\n            elsif ($str =~ /^(\\[\\])/) {\n           \
    \     $str =~ s/^(\\[\\])//;\n            }\n            elsif ($str =~ /^(\\\
    [\\[\\]\\])/) {\n                $str =~ s/^(\\[\\[\\]\\])//;\n              \
    \  $retval = 1;\n            }\n            elsif ($str =~ /^(\\[\\[\\])/) {\n\
    \                $str =~ s/^(\\[\\[\\])//;\n            }\n            elsif ($str\
    \ =~ /^(\\[\\])/) {\n                $str =~ s/^(\\[\\])//;\n            }\n \
    \           else {\n                return \"\";\n            }\n        }\n \
    \       else {\n            #print \"length even\\n\";\n            if ($str =~\
    \ /^(\\[\\])/) {\n                $str =~ s/^(\\[\\])//;\n            }\n    \
    \        elsif ($str =~ /^(\\[\\]\\[\\])/) {\n                $str =~ s/^(\\[\\\
    ]\\[\\])//;\n                $retval = 1;\n            }\n            elsif ($str\
    \ =~ /^(\\[\\[\\])/) {\n                $str =~ s/^(\\[\\[\\])//;\n          \
    \  }\n            elsif ($str =~ /^(\\[\\[\\]\\])/) {\n                $str =~\
    \ s/^(\\[\\[\\]\\])//;\n                $retval = 1;\n            }\n        \
    \    else {\n                return \"\";\n            }\n        }\n    }\n \
    \   return $retval;\n}", "    my $counter = 0;\n    my $is_nested = 0;\n    while\
    \ ($string =~ /(\\[)|(\\])/g) {\n        if ($1) {\n            $counter++;\n\
    \        } else {\n            $counter--;\n        }\n        if ($counter >\
    \ 1) {\n            $is_nested = 1;\n        }\n    }\n    return $is_nested;\n\
    }", "    my @chars = split(//, $string);\n    my $i = 0;\n    my $l = $#chars;\n\
    \    my $stack = [];\n    while($i <= $l) {\n        if($chars[$i] eq '[') {\n\
    \            push(@$stack, $chars[$i]);\n        }\n        elsif($chars[$i] eq\
    \ ']') {\n            if(scalar(@$stack) == 0) {\n                return 0;\n\
    \            }\n            if($stack->[-1] eq '[') {\n                pop(@$stack);\n\
    \            }\n            else {\n                push(@$stack, $chars[$i]);\n\
    \            }\n        }\n        $i++;\n    }\n    if(scalar(@$stack) == 0)\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    my @str = split //, $string;\n\
    \    my $count = 0;\n    my $flag = 0;\n    while (my $char = shift @str) {\n\
    \        if ($char eq '[') {\n            $count++;\n        }\n        elsif\
    \ ($char eq ']') {\n            $count--;\n        }\n        if ($count == 0)\
    \ {\n            $flag = 1;\n        }\n    }\n    if ($flag == 1 && $count ==\
    \ 0) {\n        return 1;\n    }\n    else {\n        return '';\n    }\n}", " \
    \   return undef unless defined $string;\n    return 0 unless $string =~ /^\\\
    [.*\\]$/;\n    return 1 if $string =~ /\\[\\[/;\n    return 0;\n}", "    my @string\
    \ = split //, $string;\n    my @stack;\n    my $top;\n    my $open = 0;\n    my\
    \ $close = 0;\n    for (my $i = 0; $i < @string; $i++) {\n        if ($string[$i]\
    \ eq \"[\") {\n            push @stack, $string[$i];\n            $open++;\n \
    \       }\n        elsif ($string[$i] eq \"]\") {\n            $top = pop @stack;\n\
    \            $close++;\n        }\n    }\n    if ($open != $close) {\n       \
    \ return \"\";\n    }\n    if ($open == $close && @stack != 0) {\n        return\
    \ \"\";\n    }\n    if ($open == $close && @stack == 0) {\n        return 1;\n\
    \    }\n}", "    my $brace_pos = index($string, ']');\n    my $found = '';\n \
    \   while($brace_pos != -1) {\n        my $match_pos = rindex($string, '[', $brace_pos);\n\
    \        if($match_pos != -1) {\n            $found = 1;\n            return $found;\n\
    \        }\n        $brace_pos = index($string, ']', $brace_pos + 1);\n    }\n\
    \    return $found;\n}", "    if($string =~ /\\[\\]/){\n        return 1;\n  \
    \  }\n    else{\n        return \"\";\n    }\n}\nprint is_nested(\"[[]]\").\"\\\
    n\";\nprint is_nested(\"[]]]]]]][[[[[]\").\"\\n\";\nprint is_nested(\"[][]\").\"\
    \\n\";\nprint is_nested(\"[]\").\"\\n\";\nprint is_nested(\"[[][]]\").\"\\n\"\
    ;\nprint is_nested(\"[[]][[\").\"\\n\";", "    my @brackets = split(\"\", $string);\n\
    \    my $nesting_level = 0;\n    foreach my $bracket (@brackets) {\n        if\
    \ ($bracket eq '[') {\n            $nesting_level++;\n        } elsif ($bracket\
    \ eq ']') {\n            $nesting_level--;\n        }\n        if ($nesting_level\
    \ < 0) {\n            return \"\";\n        }\n    }\n    if ($nesting_level >\
    \ 0) {\n        return \"\";\n    }\n    return 1;\n}", "    my $seen = 0;\n \
    \   my $count = 0;\n    my $return = 0;\n    my $char = substr($string, $seen,\
    \ 1);\n    for (;;) {\n        if ($char eq '[') {\n            $count += 1;\n\
    \        }\n        elsif ($char eq ']') {\n            $count -= 1;\n       \
    \ }\n        if ($count < 0) {\n            $return = 1;\n            last;\n\
    \        }\n        $seen += 1;\n        $char = substr($string, $seen, 1);\n\
    \        if ($seen == length($string)) {\n            last;\n        }\n    }\n\
    \    return $return;\n}", "    my $stack = [];\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            push $stack, $char;\n        }\n\
    \        elsif ($char eq ']') {\n            return 1 if !pop $stack;\n      \
    \  }\n    }\n    return '';\n}", "    # your code goes here!\n    my $is_nested\
    \ = \"\";\n    my $in_bracket = 0;\n    my $count = 0;\n    my $in_nested = 0;\n\
    \    my $has_nested = 0;\n    my $has_nested_bracket = 0;\n    my $prev_bracket\
    \ = \"\";\n    while ($string =~ /\\G(\\[|\\])/gsm) {\n        if ($1 eq \"[\"\
    ) {\n            $in_bracket = 1;\n            $count = $count + 1;\n        \
    \    if ($count == 2) {\n                $in_nested = 1;\n            }\n    \
    \    }\n        elsif ($1 eq \"]\") {\n            $in_bracket = 0;\n        \
    \    $count = $count - 1;\n            if ($count == 0) {\n                $in_nested\
    \ = 0;\n            }\n        }\n        if ($in_nested == 1 && $in_bracket ==\
    \ 1) {\n            $has_nested_bracket = 1;\n        }\n        if ($in_nested\
    \ == 1 && $has_nested_bracket == 1 && $1 eq \"]\") {\n            $has_nested\
    \ = 1;\n        }\n        $prev_bracket = $1;\n    }\n    if ($has_nested ==\
    \ 1) {\n        $is_nested = 1;\n    }\n    return $is_nested;\n}", "    my @stack;\n\
    \    for my $char (split //, $string) {\n        if ($char eq '[') {\n       \
    \     push @stack, $char;\n        } elsif ($char eq ']') {\n            return\
    \ 1 if @stack == 0;\n            pop @stack;\n        }\n    }\n    return '';\n\
    }", "    my $value = 1;\n    my $len = length($string);\n    if ($len < 2) {\n\
    \        $value = \"\";\n    } else {\n        my $char = substr($string, 0, 1);\n\
    \        my $remaining = substr($string, 1);\n        if ($char eq '[' && substr($remaining,\
    \ -1) eq ']') {\n            $value = is_nested(substr($remaining, 0, -1));\n\
    \        } else {\n            $value = \"\";\n        }\n    }\n    return $value;\n\
    }", "    my($i, $pos, $len);\n    my(@array);\n    my($prev, $prevpos);\n    my($nest)\
    \ = 0;\n    my($result) = 0;", "    my $count = 0;\n    for my $i (0..length($string)-1)\
    \ {\n        if (substr($string, $i, 1) eq '[') {\n            $count++;\n   \
    \     } elsif (substr($string, $i, 1) eq ']') {\n            $count--;\n     \
    \   }\n        if ($count < 0) {\n            return \"\";\n        }\n    }\n\
    \    if ($count == 0) {\n        return 1;\n    } else {\n        return \"\"\
    ;\n    }\n}", "    my @stack;\n    foreach my $char (split(//, $string)) {\n \
    \       if ($char eq '[') {\n            push @stack, $char;\n        }\n    \
    \    elsif ($char eq ']') {\n            if (@stack > 0 && $stack[-1] eq '[')\
    \ {\n                pop @stack;\n            }\n            else {\n        \
    \        push @stack, $char;\n            }\n        }\n    }\n    return 0 unless\
    \ (scalar @stack);\n    my $len = scalar @stack;\n    for (my $i = 0; $i < $len;\
    \ $i++) {\n        my $last = pop @stack;\n        if ($last eq '[') {\n     \
    \       return 1;\n        }\n    }\n    return 0;\n}", "    my $a_count = 0;\n\
    \    my $b_count = 0;\n    my $ret = 0;\n    for (my $i = 0; $i < length($string);\
    \ $i++) {\n        if (substr($string, $i, 1) eq \"[\") {\n            $a_count\
    \ += 1;\n        } elsif (substr($string, $i, 1) eq \"]\") {\n            $b_count\
    \ += 1;\n        }\n        if ($a_count < $b_count) {\n            $ret = 1;\n\
    \            last;\n        }\n    }\n    return $ret;\n}", "    my @brackets\
    \ = split(//, $string);\n    my $is_valid = 1;\n    my $open_brackets = 0;\n \
    \   for my $bracket (@brackets) {\n        if ($bracket eq \"[\") {\n        \
    \    $open_brackets++;\n        }\n        elsif ($bracket eq \"]\") {\n     \
    \       if ($open_brackets > 0) {\n                $open_brackets--;\n       \
    \     }\n            else {\n                $is_valid = 0;\n                last;\n\
    \            }\n        }\n    }\n    return $is_valid;\n}", "    my @stack;\n\
    \    my @list = split //, $string;\n    while (my $element = shift @list) {\n\
    \        if ($element eq \"[\") {\n            push @stack, $element;\n      \
    \  }\n        elsif ($element eq \"]\") {\n            my $top = pop @stack;\n\
    \            if ($top ne \"[\") {\n                return 0;\n            }\n\
    \        }\n    }\n    return @stack ? 0 : 1;\n}", "    return (1) if($string\
    \ =~ /\\[[^\\]]*\\]/);\n    return(\"\");\n}", "    my @stack;\n    my $count\
    \ = 0;\n    my $last_index = 0;\n    foreach my $i (0..length($string)-1) {\n\
    \        my $curr_char = substr($string, $i, 1);\n        if ($curr_char eq '[')\
    \ {\n            push @stack, $i;\n        }\n        elsif ($curr_char eq ']')\
    \ {\n            if (!@stack) {\n                $last_index = $i;\n         \
    \   }\n            else {\n                my $stack_top = pop @stack;\n     \
    \           if ($stack_top == $last_index + 1) {\n                    $count++;\n\
    \                }\n                $last_index = $i;\n            }\n       \
    \ }\n    }\n    return $count;\n}", "    my $result =\"\";\n    my $string_length\
    \ = length($string);\n    for (my $i=0; $i < $string_length; $i++) {\n       \
    \ if (substr($string, $i, 1) eq '[') {\n            for (my $j=$i+1; $j < $string_length;\
    \ $j++) {\n                if (substr($string, $j, 1) eq ']') {\n            \
    \        $result .= substr($string, $i, $j-$i+1);\n                    $i = $j;\n\
    \                    last;\n                }\n            }\n        }\n    }\n\
    \    if ($result =~ /\\[\\]/) {\n        return 1;\n    }\n    else {\n      \
    \  return \"\";\n    }\n}", "    # Your code here\n    my @str = split //, $string;\n\
    \    my $count = 0;\n    my $result = 0;\n    foreach my $char (@str) {\n    \
    \    if ($char eq '[') {\n            $count++;\n        }\n        if ($char\
    \ eq ']') {\n            $count--;\n        }\n        if ($count == 0) {\n  \
    \          $result = 0;\n        }\n        if ($count == 1) {\n            $result\
    \ = 1;\n        }\n    }\n    return $result;\n}", "    my @stack;\n    my $len\
    \ = length($string);\n    for(my $i = 0; $i < $len; $i++) {\n        my $current_char\
    \ = substr($string, $i, 1);\n        if($current_char eq '[') {\n            push(@stack,\
    \ $current_char);\n        }\n        elsif($current_char eq ']') {\n        \
    \    if(scalar(@stack) == 0) {\n                return \"\";\n            }\n\
    \            if(pop(@stack) eq '[') {\n                return 1;\n           \
    \ }\n        }\n    }\n    return \"\";\n}", "    my @arr = split('', $string);\n\
    \    my $nested = 0;\n    my $count_opened = 0;\n    my $count_closed = 0;\n \
    \   my $is_nested = 0;\n    my $found_nested = 0;\n    for (my $i = 0; $i < scalar\
    \ @arr; $i++) {\n        if ($arr[$i] eq '[') {\n            $count_opened++;\n\
    \            if ($is_nested) {\n                $found_nested = 1;\n         \
    \   }\n        } elsif ($arr[$i] eq ']') {\n            $count_closed++;\n   \
    \         if ($count_closed >= $count_opened) {\n                $is_nested =\
    \ 0;\n            }\n        }\n        if ($count_opened > $count_closed) {\n\
    \            $is_nested = 1;\n        }\n    }\n    if ($found_nested) {\n   \
    \     return 1;\n    }\n    return '';\n}", "    my @stack;\n    for my $i (0..length($string)-1)\
    \ {\n        my $char = substr($string, $i, 1);\n        if ( $char eq \"[\" )\
    \ {\n            push @stack, $char;\n        }\n        elsif ( $char eq \"]\"\
    \ ) {\n            if ( scalar @stack == 0 ) {\n                return \"\";\n\
    \            }\n            else {\n                pop @stack;\n            }\n\
    \        }\n    }\n    return \"1\" if scalar @stack == 0;\n    return \"\";\n\
    }", "    my @chars = split //, $string;\n    my $i = 0;\n    my $j = $#chars;\n\
    \    my $new_string = \"\";\n    while ($i < $j) {\n        $new_string .= $chars[$i];\n\
    \        $new_string .= $chars[$j];\n        $i++;\n        $j--;\n    }\n   \
    \ if (is_valid($new_string)) {\n        return 1;\n    }\n    return \"\";\n}",
  "    my $count = 0;\n    for (my $i = 0; $i < length($string); $i++) {\n       \
    \ if (substr($string, $i, 1) eq '[') {\n            $count++;\n        }\n   \
    \     elsif (substr($string, $i, 1) eq ']') {\n            $count--;\n       \
    \ }\n        if ($count == 0) {\n            return 1;\n        }\n    }\n   \
    \ return \"\";\n}", "    my $char = '';\n    my $open = 0;\n    my $close = 0;\n\
    \    my $counter = 0;\n    my $nested = 0;\n    while($char = chop($string)) {\n\
    \        if($char eq '[') {\n            $open++;\n            $counter++;\n \
    \       }\n        if($char eq ']') {\n            $close++;\n            $counter--;\n\
    \        }\n        if($counter < 0) {\n            $nested = 1;\n        }\n\
    \    }\n    return '' if $open != $close;\n    return '' if $nested == 0;\n  \
    \  return 1;\n}", "    my $result = \"\";\n    my $nested = 0;\n    my $i = 0;\n\
    \    while ($i <= (length($string) - 1)) {\n        my $character = substr($string,\
    \ $i, 1);\n        if ($character eq \"[\") {\n            $nested++;\n      \
    \  }\n        elsif ($character eq \"]\") {\n            $nested--;\n        }\n\
    \        if ($nested < 0) {\n            $result = \"\";\n            last;\n\
    \        }\n        if ($nested > 0) {\n            $result = 1;\n        }\n\
    \        $i++;\n    }\n    return $result;\n}", "    my $flag = 0;\n    my $len\
    \ = length($string);\n    my @arr = split(//, $string);\n    for(my $i = 0; $i\
    \ < $len; $i++){\n        if($arr[$i] eq '['){\n            $flag++;\n       \
    \ }\n        if($arr[$i] eq ']'){\n            $flag--;\n        }\n        if($flag\
    \ < 0){\n            return \"\";\n        }\n    }\n    if($flag > 0){\n    \
    \    return \"\";\n    }\n    return 1;\n}", "    my @stack;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            push @stack,\
    \ $char;\n        }\n        elsif ($char eq ']') {\n            # \uBE44\uC5B4\
    \uC788\uC73C\uBA74 pop \uD560 \uAC8C \uC5C6\uC73C\uBBC0\uB85C\n            # \uADF8\
    \uB0E5 \uC544\uBB34\uAC83\uB3C4 \uD558\uC9C0 \uC54A\uB294\uB2E4.\n           \
    \ if (@stack) {\n                pop @stack;\n            }\n        }\n    }\n\
    \    return @stack ? '' : 1;\n}", "    my @tokens = split(//, $string);\n    my\
    \ $count = 0;\n    foreach (@tokens) {\n        if ($_ eq '[') {\n           \
    \ $count++;\n        }\n        elsif ($_ eq ']') {\n            $count--;\n \
    \       }\n        if ($count < 0) {\n            return \"\";\n        }\n  \
    \  }\n    if ($count == 0) {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    my @stack;\n    my @str = split //, $string;\n    foreach\
    \ my $i (@str) {\n        if ($i eq \"[\") {\n            push @stack, $i;\n \
    \       }\n        elsif ($i eq \"]\") {\n            my $n = $#stack;\n     \
    \       if ($stack[$n] eq \"[\") {\n                pop @stack;\n            }\n\
    \            else {\n                return \"\";\n            }\n        }\n\
    \    }\n    if (@stack > 0) {\n        return \"\";\n    }\n    else {\n     \
    \   return 1;\n    }\n}", "    my $is_nested = 0;\n    my $pos = 0;\n    my $open\
    \ = 0;\n    my $closed = 0;\n    my $ch = undef;\n    my $prev = undef;\n    while\
    \ ($pos < length($string)) {\n        $ch = substr($string, $pos, 1);\n      \
    \  if ($ch eq '[') {\n            if ($open == 0) {\n                $prev = 'open';\n\
    \            } else {\n                $prev = 'closed';\n            }\n    \
    \        $open++;\n        } elsif ($ch eq ']') {\n            if ($prev eq 'open')\
    \ {\n                $is_nested = 1;\n            }\n            $prev = 'closed';\n\
    \            $closed++;\n        }\n        if ($closed > $open) {\n         \
    \   last;\n        }\n        $pos++;\n    }\n    if ($is_nested and $open ==\
    \ $closed) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
  "    while($string =~ s/\\[\\[//g) {\n        return 1 if $string =~ s/\\]\\]//g;\n\
    \    }\n    return '';\n}", "    my $answer = \"\";\n    my $count1 = 0;\n   \
    \ my $count2 = 0;\n    my $stringLength = length($string);\n    if ($stringLength\
    \ % 2 == 0){\n        for(my $i = 0; $i < $stringLength; $i++){\n            if\
    \ (substr($string, $i, 1) eq \"[\"){\n                $count1 += 1;\n        \
    \    }\n            elsif (substr($string, $i, 1) eq \"]\"){\n               \
    \ $count2 += 1;\n            }\n        }\n        if ($count1 == $count2){\n\
    \            $answer = \"\";\n        }\n        else{\n            $answer =\
    \ 1;\n        }\n    }\n    else{\n        $answer = 1;\n    }\n    return $answer;\n\
    }", "    my $nest = 0;\n    for my $i (0..length($string)-1) {\n        if (substr($string,\
    \ $i, 1) eq '[') {\n            $nest++;\n        }\n        if (substr($string,\
    \ $i, 1) eq ']') {\n            $nest--;\n        }\n        if ($nest == 0) {\n\
    \            return 1;\n        }\n    }\n    return \"\";\n}", "    my $result\
    \ = 0;\n    my $count  = 0;\n    my $length = length($string);\n    for(my $i\
    \ = 0; $i < $length; $i++) {\n        my $char = substr($string, $i, 1);\n   \
    \     if ($char eq \"[\") {\n            $count++;\n        }\n        if ($char\
    \ eq \"]\") {\n            $count--;\n        }\n        if ($count == -1) {\n\
    \            return $result;\n        }\n        if ($count > 0) {\n         \
    \   $result = 1;\n        }\n    }\n    return $result;\n}", "    my $counter\
    \ = 0;\n    my $nested = 0;\n    foreach my $char (split(\"\", $string)) {\n \
    \       $counter++ if ($char eq \"[\");\n        $counter-- if ($char eq \"]\"\
    );\n        $nested = 1 if ($counter < 0);\n    }\n    return 1 if ($counter >\
    \ 0 && $nested);\n    return \"\";\n}", "    my $count = 0;\n    while ($string\
    \ =~ s/\\[\\]//) {\n        $count++;\n    }\n    return $count ? 1 : \"\";\n}",
  "    my($count) = 0;\n    for my $i (0..length($string)-1) {\n        if (substr($string,\
    \ $i, 1) eq '[') {\n            $count++;\n        } elsif (substr($string, $i,\
    \ 1) eq ']') {\n            $count--;\n        }\n        return 1 if $count <\
    \ 0;\n    }\n    return '';\n}", "    my $l = length($string);\n    if ($l % 2\
    \ != 0) {\n        return \"\";\n    }\n    my @s = split //, $string;\n    my\
    \ @stack;\n    my $i = 0;\n    my $result = \"\";\n    while ($i < $l) {\n   \
    \     if (@stack && $s[$i] eq $stack[-1]) {\n            pop @stack;\n       \
    \ } else {\n            push @stack, $s[$i];\n        }\n        $i++;\n    }\n\
    \    if (@stack == 0) {\n        $result = 1;\n    }\n    return $result;\n}",
  "    my $nesting = 0;\n    my $length = length($string);\n    my $i = 0;\n    while\
    \ ($i < $length) {\n        if (substr($string, $i, 1) eq \"[\") {\n         \
    \   $nesting++;\n        } else {\n            $nesting--;\n        }\n      \
    \  if ($nesting < 0) {\n            return \"\";\n        }\n        $i++;\n \
    \   }\n    if ($nesting > 0) {\n        return \"\";\n    }\n    return 1;\n}",
  "    my $counter = 0;\n    my $flag = 0;\n    for my $i (0..length($string)-1) {\n\
    \        if(substr($string, $i, 1) eq '[') {\n            $counter++;\n      \
    \  }\n        elsif(substr($string, $i, 1) eq ']') {\n            $counter--;\n\
    \        }\n        if($counter < 0) {\n            $flag = 1;\n        }\n  \
    \  }\n    if($counter != 0 || $flag == 1) {\n        return \"\";\n    }\n   \
    \ else {\n        return 1;\n    }\n}", "    my @stack;\n    my $nested = 0;\n\
    \    my $last;\n    while ($string =~ /\\G([\\[\\]])/g) {\n        my $char =\
    \ $1;\n        if ($char eq '[') {\n            push @stack, $char;\n        }\n\
    \        elsif ($char eq ']') {\n            if (@stack) {\n                $last\
    \ = pop @stack;\n                $nested = 1 if $last eq '[';\n            }\n\
    \            else {\n                $nested = 0;\n                last;\n   \
    \         }\n        }\n    }\n    return $nested;\n}", "    my @stack;\n    for\
    \ my $c (split //, $string) {\n        my $n = $c eq '[' ? 1 : -1;\n        if\
    \ (@stack && $stack[-1] * $n < 0) {\n            pop @stack;\n        } else {\n\
    \            push @stack, $n;\n        }\n    }\n    return @stack ? \"\" : 1;\n\
    }", "    my @stack;\n    foreach my $char (split //, $string) {\n        if ($char\
    \ eq '[') {\n            push @stack, $char;\n        } elsif ($char eq ']') {\n\
    \            return 1 if @stack && pop(@stack) eq '[';\n        }\n    }\n   \
    \ return 0;\n}", "    my $nested = 0;\n    my $length = length($string);\n   \
    \ for (my $i = 0; $i < $length; $i++) {\n        my $char = substr($string, $i,\
    \ 1);\n        if ($char eq \"[\") {\n            $nested++;\n        }\n    \
    \    elsif ($char eq \"]\") {\n            $nested--;\n        }\n        if ($nested\
    \ <= 0) {\n            return 0;\n        }\n    }\n    return $nested;\n}", " \
    \   my @string_array = split('', $string);\n    my $last_bracket = ' ';\n    my\
    \ $last_bracket_was_nested = 0;\n    foreach my $char (@string_array) {\n    \
    \    if ($char eq '[' and $last_bracket eq ']') {\n            $last_bracket_was_nested\
    \ = 1;\n        }\n        $last_bracket = $char;\n    }\n    return $last_bracket_was_nested;\n\
    }", "    my $nested = 0;\n    my $str_length = length($string);\n    my $nest_check\
    \ = 0;\n    for (my $i = 0; $i < $str_length; $i++) {\n        my $char = substr($string,\
    \ $i, 1);\n        $nest_check = $char eq '[' ? $nest_check + 1 : $nest_check\
    \ - 1;\n        if ($nest_check < 0) {\n            $nested = 1;\n           \
    \ last;\n        }\n    }\n    return $nested;\n}", "    my $idx = index $string,\
    \ '[';\n    return 0 if $idx == -1;\n    return _is_nested($string, $idx);\n}",
  "    return 1 if $string =~ /\\[\\]/;\n    return 1 if $string =~ /\\[\\]\\[/;\n\
    \    return 1 if $string =~ /\\]\\]\\[/;\n    return 1 if $string =~ /\\[\\]\\\
    ]/;\n    return 1 if $string =~ /\\[\\[\\]/;\n    return 1 if $string =~ /\\]\\\
    [\\]/;\n    return 1 if $string =~ /\\[\\[\\]\\]/;\n    return 1 if $string =~\
    \ /\\[\\]\\[\\]/;\n    return 1 if $string =~ /\\]\\[\\[\\]/;\n    return 1 if\
    \ $string =~ /\\]\\]\\[\\]/;\n    return 1 if $string =~ /\\]\\]\\[\\]\\]/;\n\
    \    return 1 if $string =~ /\\]\\]\\]\\[\\]/;\n    return 1 if $string =~ /\\\
    ]\\]\\]\\[\\]\\]/;\n    return 1 if $string =~ /\\]\\]\\]\\]\\[\\]/;\n    return\
    \ 1 if $string =~ /\\]\\]\\]\\]\\[\\]\\]/;\n    return 1 if $string =~ /\\]\\\
    ]\\]\\]\\]\\[\\]/;\n    return 1 if $string =~ /\\]\\]\\]\\]\\]\\[\\]\\]/;\n \
    \   return 1 if $string =~ /\\]\\]\\]\\]\\]\\]\\[\\]/;\n    return 1 if $string\
    \ =~ /\\]\\]\\]\\]\\]\\]\\[\\]\\]/;\n    return 1 if $string =~ /\\]\\]\\]\\]\\\
    ]\\]\\]\\[\\]/;\n    return 1 if $string =~ /\\]\\]\\]\\]\\]\\]\\]\\[\\]\\]/;\n\
    \    return 1 if $string =~ /\\]\\]\\]\\]\\]\\]\\]\\]\\[\\]/;\n    return 1",
  "    if(length($string) == 0) {\n        return \"\";\n    }", "    my @chars =\
    \ split(//, $string);\n    my $total = 0;\n    my $open  = 0;\n    my $close =\
    \ 0;\n    my $result = \"\";\n    foreach (@chars) {\n        if($_ eq \"[\")\
    \ {\n            $open++;\n            $total++;\n        }\n        elsif($_\
    \ eq \"]\") {\n            $close++;\n            $total++;\n        }\n    }\n\
    \    if($total % 2 == 0) {\n        if($open == $close) {\n            $result\
    \ = \"\";\n        }\n        else {\n            $result = 1;\n        }\n  \
    \  }\n    else {\n        $result = 1;\n    }\n    return $result;\n}", "    my\
    \ $count = 0;\n    my $result = '';\n    my @array = split('', $string);\n   \
    \ foreach my $bracket (@array) {\n        if ($bracket eq '[') {\n           \
    \ $count++;\n        } elsif ($bracket eq ']') {\n            $count--;\n    \
    \    }\n        if ($count < 0) {\n            $result = '0';\n            last;\n\
    \        }\n    }\n    if ($count == 0 && $result ne '0') {\n        $result =\
    \ '1';\n    }\n    return $result;\n}", "    my @chars = split(//, $string);\n\
    \    my $open_count = 0;\n    my $closed_count = 0;\n    my $nested_count = 0;\n\
    \    my $state = 0;\n    my $i = 0;\n    my $c;\n    my $output = \"\";\n    my\
    \ $open_bracket = ord('[');\n    my $closed_bracket = ord(']');\n    for $c (@chars)\
    \ {\n        if (ord($c) == $open_bracket) {\n            $open_count++;\n   \
    \         if ($state == 0) {\n                $state = 1;\n            }\n   \
    \     } elsif (ord($c) == $closed_bracket) {\n            $closed_count++;\n \
    \           if ($state == 1) {\n                $state = 0;\n                $nested_count++;\n\
    \            }\n        }\n    }\n    if ($open_count == $closed_count && $nested_count\
    \ > 0) {\n        $output = \"1\";\n    }\n    return $output;\n}", "    my $count\
    \ = 0;\n    return \"1\" if $string =~ /\\[\\]/;\n    for my $i (0..length($string)-1)\
    \ {\n        if(substr($string, $i, 1) eq \"[\") {\n            $count++;\n  \
    \      }\n        elsif(substr($string, $i, 1) eq \"]\") {\n            $count--;\n\
    \        }\n        return \"1\" if $count < 0;\n    }\n    return \"\";\n}",
  "    my $empty = 1;\n    while($string =~ s/\\[\\[// || $string =~ s/\\]\\]//){\n\
    \        $empty = 0;\n    }\n    return $empty;\n}", "    my $count = 0;\n   \
    \ my $nested = 0;\n    for my $c (split \"\", $string) {\n        if ($c eq \"\
    [\") {\n            $count++;\n        } elsif ($c eq \"]\") {\n            $count--;\n\
    \        }\n        $nested = 1 if $count < 0;\n    }\n    return $nested;\n}",
  "    # Convert the string to a list\n    my @list = split(\"\", $string);\n    #\
    \ Stack to hold only opening brackets\n    my @stack;\n    # Loop through the\
    \ list of brackets\n    for my $i (0..$#list) {\n        # If the bracket is opening,\
    \ push it to the stack\n        if ($list[$i] eq \"[\") {\n            push(@stack,\
    \ $list[$i]);\n        }\n        # If the bracket is closing\n        elsif ($list[$i]\
    \ eq \"]\") {\n            # If the top of the stack is closing, return an empty\
    \ string\n            if ($stack[-1] eq \"]\") {\n                return \"\"\
    ;\n            }\n            # If the top of the stack is opening, pop it from\
    \ the stack\n            elsif ($stack[-1] eq \"[\") {\n                pop(@stack);\n\
    \            }\n        }\n    }\n    # If the stack is empty, there is no valid\
    \ subsequence, so return an empty string\n    if (scalar(@stack) == 0) {\n   \
    \     return \"\";\n    }\n    # Otherwise, return 1\n    else {\n        return\
    \ 1;\n    }\n}", "    my @string = split(//, $string);\n    my @stack;\n    my\
    \ $c = 0;\n    my $b = 0;\n    my $n = 0;\n    foreach my $char (@string) {\n\
    \        if ($char eq '[') {\n            $c++;\n            $b++;\n         \
    \   push @stack, $char;\n        }\n        if ($char eq ']') {\n            $c++;\n\
    \            $b--;\n            push @stack, $char;\n        }\n        if ($b\
    \ < 0) {\n            $n = 1;\n        }\n    }\n    my $substring = join('',\
    \ @stack);\n    if (($substring =~ /^\\[{$c}$/) && $n == 0) {\n        return\
    \ 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my $nested = 0;\n\
    \    my $start = 0;\n    my $end = length($string) - 1;\n    while($start < $end)\
    \ {\n        if(substr($string, $start, 1) eq '[' && substr($string, $end, 1)\
    \ eq ']') {\n            $nested = 1;\n            last;\n        }\n        $start++;\n\
    \        $end--;\n    }\n    return $nested;\n}", "    my @chars = split //, $string;\n\
    \    my $stack = [];\n    my $top = -1;\n    for my $char (@chars) {\n       \
    \ if($char eq '[') {\n            push @$stack, $char;\n            $top += 1;\n\
    \        }\n        elsif($char eq ']') {\n            if($top < 0) {\n      \
    \          return \"\";\n            }\n            pop @$stack;\n           \
    \ $top -= 1;\n        }\n    }\n    if($top == -1) {\n        return 1;\n    }\n\
    \    return \"\";\n}", "    my $count = 0;\n    for (split '', $string) {\n  \
    \      $count += $_ eq '[' ? 1 : -1;\n        return 0 if $count < 0;\n    }\n\
    \    return $count == 0;\n}", "    my @str = split(//, $string);\n    my $count\
    \ = 0;\n    foreach my $char (@str) {\n        if ($char eq '[') {\n         \
    \   $count++;\n        } elsif ($char eq ']') {\n            $count--;\n     \
    \   }\n        if ($count == -1) {\n            return '';\n        }\n    }\n\
    \    return 1 if $count == 0;\n    return '';\n}", '    my $test_string
  "    my @stack;\n    my $i = 0;\n    my $end_of_string = length($string);\n    my\
    \ $retval = \"\";\n    while($i < $end_of_string) {\n        my $char = substr($string,\
    \ $i, 1);\n        if($char eq \"[\") {\n            push(@stack, $char);\n  \
    \      } elsif($char eq \"]\") {\n            if(scalar(@stack) > 0) {\n     \
    \           pop(@stack);\n            } else {\n                return $retval;\n\
    \            }\n        }\n        $i++;\n    }\n    if(scalar(@stack) > 0) {\n\
    \        return $retval;\n    } else {\n        return \"1\";\n    }\n}", "  \
    \  my @brackets = (\n        ['{','}'],\n        ['[',']'],\n        ['(',')'],\n\
    \    );\n    my $stop = 0;\n    my $nested = 0;\n    my $string_length = length($string);\n\
    \    for (my $i = 0; $i < $string_length; $i++) {\n        my $char = substr($string,\
    \ $i, 1);\n        # find the matching bracket\n        foreach my $bracket (@brackets)\
    \ {\n            my $opening = $bracket->[0];\n            my $closing = $bracket->[1];\n\
    \            if ($char eq $opening) {\n                $nested++;\n          \
    \      # the next char should be a closing bracket\n                # and if so,\
    \ $nested is decreased\n                my $next_char = substr($string, $i+1,\
    \ 1);\n                if ($next_char eq $closing) {\n                    $nested--;\n\
    \                }\n            }\n            elsif ($char eq $closing) {\n \
    \               $nested--;\n            }\n        }\n        if ($nested == 0)\
    \ {\n            $stop = 1;\n            last;\n        }\n    }\n    return $stop;\n\
    }", "    # This is a rather tricky problem, and I still don't completely understand\
    \ how \n    # this is working.  I will try to document it further, but for now,\
    \ here is the \n    # solution, with a little explanation.", "    my $right_count\
    \ = 0;\n    my $left_count = 0;\n    foreach my $char (split //, $string) {\n\
    \        if ($char eq \"[\") {\n            $left_count++;\n        } elsif ($char\
    \ eq \"]\") {\n            $right_count++;\n        }\n        if ($right_count\
    \ == $left_count && $right_count) {\n            return 1;\n        }\n    }\n\
    \    return \"\";\n}", "    my @array = split(//, $string);\n    my $n_open =\
    \ 0;\n    my $n_close = 0;\n    my $nested = 0;\n    foreach my $element (@array)\
    \ {\n        $n_open++ if $element eq '[';\n        $n_close++ if $element eq\
    \ ']';\n        if ($n_open > 0 && $n_close > 0) {\n            $nested = 1;\n\
    \            last;\n        }\n    }\n    return $nested;\n}", "    my $in_bracket\
    \ = 0;\n    for my $c (split //, $string) {\n        if ($c eq '[') {\n      \
    \      $in_bracket++;\n        } elsif ($c eq ']') {\n            $in_bracket--;\n\
    \        } else {\n            die \"input string must contain only square brackets\"\
    ;\n        }\n        return 1 if $in_bracket < 0;\n    }\n    return 0;\n}",
  "    $string =~ s/\\[\\]//g;\n    return $string;\n}", "    my $open = 0;\n    my\
    \ $current_open = 0;\n    for my $char (split //, $string) {\n        if ($char\
    \ eq '[') {\n            $current_open++;\n            $open = $current_open if\
    \ $current_open > $open;\n        } elsif ($char eq ']') {\n            $current_open--;\n\
    \        }\n    }\n    return $open >= 2 ? 1 : '';\n}", "    my $i = 0;\n    my\
    \ $length = length($string);\n    my $open = 0;\n    my $closed = 0;\n    for($i\
    \ = 0; $i < $length; $i++) {\n        my $ch = substr($string, $i, 1);\n     \
    \   if($ch eq \"[\") {\n            $open++;\n        } elsif($ch eq \"]\") {\n\
    \            $closed++;\n        }\n    }\n    return $open == $closed;\n}", " \
    \   $string =~ tr/{}[]()//d;\n    while ($string =~ s/\\[\\]//g) {};\n    return\
    \ length($string) == 0;\n}", "    my @chars = split //, $string;\n    my $bracket_count\
    \ = 0;\n    my $nested_count = 0;\n    for (my $i = 0; $i < scalar @chars; $i++)\
    \ {\n        my $char = $chars[$i];\n        if ($char eq \"[\") {\n         \
    \   $bracket_count++;\n            $nested_count++;\n        }\n        elsif\
    \ ($char eq \"]\") {\n            $bracket_count--;\n            $nested_count--;\n\
    \        }\n        if ($bracket_count < 0) {\n            last;\n        }\n\
    \    }\n    if ($bracket_count == 0 && $nested_count > 0) {\n        return 1;\n\
    \    }\n    else {\n        return \"\";\n    }\n}", "    my $i = 0;\n    my $count\
    \ = 0;\n    my $open_count = 0;\n    my $last_open = 0;\n    my $last_close =\
    \ 0;\n    my $last_index = length($string) - 1;\n    my $too_many_open = 0;\n\
    \    my $too_many_close = 0;\n    while($i <= $last_index) {\n        if(substr($string,\
    \ $i, 1) eq \"[\") {\n            $open_count++;\n            $last_open = $i;\n\
    \        }\n        if(substr($string, $i, 1) eq \"]\") {\n            $open_count--;\n\
    \            $last_close = $i;\n        }\n        if($open_count < 0) {\n   \
    \         $too_many_close = 1;\n        }\n        if($open_count > $count) {\n\
    \            $count = $open_count;\n        }\n        $i++;\n    }\n    if($open_count\
    \ > 0) {\n        $too_many_open = 1;\n    }\n    if($too_many_open) {\n     \
    \   return \"\";\n    }\n    if($too_many_close) {\n        return \"\";\n   \
    \ }\n    if($last_open == 0 && $last_close == $last_index) {\n        return \"\
    \";\n    }\n    return $count;\n}", "    $string =~ s/\\]\\[/] [[/g;\n    my @string\
    \ = split(/\\s+/, $string);\n    my @s = ();\n    for (@string) {\n        if\
    \ (/\\[/) {\n            push @s, $_;\n        } else {\n            if (@s) {\n\
    \                pop @s;\n            } else {\n                return '';\n \
    \           }\n        }\n    }\n    if (@s) {\n        return '';\n    } else\
    \ {\n        return 1;\n    }\n}", "    return $string =~ /(?<!(?>[^\\[\\]]+|\\\
    [[^\\[\\]]*)\\])(?>\\[[^\\[\\]]*])/;\n}", "    my @brackets = split(\"\", $string);\n\
    \    my $open_brackets = 0;\n    my $nested = 0;\n    my $bracket_left = 0;\n\
    \    my $bracket_right = 0;\n    foreach my $bracket (@brackets) {\n        if\
    \ ($bracket eq \"[\") {\n            $open_brackets++;\n            $bracket_left++;\n\
    \        }\n        elsif ($bracket eq \"]\") {\n            $open_brackets--;\n\
    \            $bracket_right++;\n        }\n        $nested = 1 if $open_brackets\
    \ == 1;\n    }\n    if ($open_brackets > 0 or $bracket_left != $bracket_right)\
    \ {\n        return \"\";\n    }\n    return $nested;\n}", "    return 1 if $string\
    \ =~ /(.*)\\[(.*)\\]/;\n    return 0;\n}", "    my($count) = 0;\n    for my $c\
    \ (split(\"\", $string)) {\n        if ($c eq \"[\") {\n            $count +=\
    \ 1;\n        } elsif ($c eq \"]\") {\n            $count -= 1;\n        }\n \
    \       return 0 if $count < 0;\n    }\n    return 0 if $count != 0;\n    return\
    \ 1;\n}", "    my $n = @_-1;\n    my $return = $string;\n    while ($return =~\
    \ /\\[[\\]]+/g) {\n        $return =~ s/\\[[\\]]+//;\n    }\n    if ($return eq\
    \ \"\") {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", " \
    \   my $counter = 0;\n    for my $char (split(//, $string)) {\n        $counter++\
    \ if $char eq '[';\n        $counter-- if $char eq ']';\n        return \"\" if\
    \ $counter < 0;\n    }\n    return \"\" if $counter;\n    return 1;\n}", "   \
    \ my $brackets = [];\n    foreach my $c (split(//, $string)) {\n        if($c\
    \ eq '[') {\n            push(@$brackets, $c);\n        }\n        else {\n  \
    \          if(scalar(@$brackets) == 0) {\n                return \"\";\n     \
    \       }\n            else {\n                my $other = pop(@$brackets);\n\
    \                if($other ne '[') {\n                    return \"\";\n     \
    \           }\n            }\n        }\n    }\n    if(scalar(@$brackets) > 0)\
    \ {\n        return \"\";\n    }\n    return 1;\n}", "    my @chars = split //,\
    \ $string;\n    my $brackets = 0;\n    foreach my $char (@chars) {\n        if\
    \ ($char eq '[') {\n            $brackets++;\n        } elsif ($char eq ']') {\n\
    \            $brackets--;\n        }\n        if ($brackets < 0) {\n         \
    \   return \"\";\n        }\n    }\n    return $brackets ? \"\" : 1;\n}", "  \
    \  my $count = 0;\n    my $nesting = 0;\n    my $valid = 0;\n    foreach my $char\
    \ (split //, $string) {\n        if($char eq '[') {\n            $count++;\n \
    \           $nesting++;\n        } elsif($char eq ']') {\n            $count--;\n\
    \            if($nesting == 1) {\n                $valid = 1;\n            }\n\
    \            $nesting--;\n        }\n        if($count == 0) {\n            $nesting\
    \ = 0;\n        }\n    }\n    if($count == 0 && $valid == 1) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}", "    # Create a stack, so\
    \ push anything that's a closing bracket, or pop if it's an opening bracket\n\
    \    my @stack;\n    for my $i (0..length($string) - 1) {\n        my $char =\
    \ substr($string, $i, 1);\n        if ($char eq ']') {\n            push @stack,\
    \ $char;\n        }\n        elsif ($char eq '[') {\n            # If we can pop,\
    \ then do it\n            if (scalar @stack > 0) {\n                pop @stack;\n\
    \            }\n            # If we can't pop, then it's unbalanced and we should\
    \ return an empty string\n            else {\n                return '';\n   \
    \         }\n        }\n    }\n    # If we have an empty stack at the end, then\
    \ return 1, else empty string\n    if (scalar @stack == 0) {\n        return 1;\n\
    \    }\n    else {\n        return '';\n    }\n}", "    my @stack;\n    for my\
    \ $char (split //, $string) {\n        if ($char eq \"[\") {\n            push\
    \ @stack, $char;\n        }\n        elsif ($char eq \"]\") {\n            if\
    \ (pop @stack eq \"[\") {\n                return 1;\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my $result = \"\";\n    my $open = \"\";\n\
    \    my $clo = \"\";\n    for (my $i = 0; $i < length($string); $i++) {\n    \
    \    if (substr($string, $i, 1) eq \"[\") {\n            $open = $open . substr($string,\
    \ $i, 1);\n        }\n        if (substr($string, $i, 1) eq \"]\") {\n       \
    \     $clo = $clo . substr($string, $i, 1);\n        }\n    }\n    if ($open =~\
    \ m/\\[\\[/ && $clo =~ m/\\]\\]/) {\n        $result = 1;\n    }\n    return $result;\n\
    }", "    my $start = 0;\n    my $end = 0;\n    my $nested = 0;\n    foreach my\
    \ $char (split('', $string)) {\n        if ($char eq '[') {\n            $start++;\n\
    \        } elsif ($char eq ']') {\n            $end++;\n        }\n        if\
    \ ($end > $start) {\n            $nested = 1;\n        }\n    }\n    if ($start\
    \ - $end == 0 && $nested == 1) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my $left_bracket = 0;\n    my $right_bracket = 0;\n \
    \   for (my $i = 0; $i < length($string); $i++) {\n        if (substr($string,\
    \ $i, 1) eq '[') {\n            $left_bracket++;\n        } elsif (substr($string,\
    \ $i, 1) eq ']') {\n            $right_bracket++;\n        }\n        if ($right_bracket\
    \ > $left_bracket) {\n            return \"\";\n        }\n    }\n    if ($left_bracket\
    \ != $right_bracket) {\n        return \"\";\n    }\n    return 1;\n}", "    my\
    \ @stack;\n    foreach my $c (split //, $string) {\n        if ($c eq \"[\") {\n\
    \            push @stack, $c;\n        } elsif ($c eq \"]\") {\n            return\
    \ 1 if @stack;\n            pop @stack;\n        }\n    }\n    return \"\";\n}",
  "    my @chars = split //, $string;\n    my $counter = 0;\n    my $pass = 1;\n \
    \   my $fail = 0;\n    my $flag = $pass;\n    foreach my $char (@chars) {\n  \
    \      if ($char eq \"[\") {\n            $counter++;\n        } elsif ($char\
    \ eq \"]\") {\n            $counter--;\n        }\n        if ($counter < 0) {\n\
    \            $flag = $fail;\n        }\n    }\n    if ($counter != 0) {\n    \
    \    $flag = $fail;\n    }\n    return $flag;\n}", "    my @chars = split //,\
    \ $string;\n    my $index = 0;\n    my $count = 0;\n    while($index <= $#chars){\n\
    \        if ($chars[$index] eq \"[\"){\n            $count++;\n        } elsif\
    \ ($chars[$index] eq \"]\"){\n            if ($count != 0){\n                $count--;\n\
    \            }\n        }\n        $index++;\n    }\n    return $count == 0;\n\
    }", "    my $l = 0;\n    my $r = 0;\n    for my $c (split(//, $string)) {\n  \
    \      if($c eq \"[\") {\n            $l++;\n        }\n        elsif($c eq \"\
    ]\") {\n            $r++;\n        }\n        if($r > $l) {\n            return\
    \ \"\";\n        }\n    }\n    if($l == $r) {\n        return 1;\n    }\n    else\
    \ {\n        return \"\";\n    }\n}", "    my @stack;\n    for my $i (0..length($string)-1)\
    \ {\n        if(substr($string, $i, 1) eq '[') {\n            push @stack, 1;\n\
    \        }\n        else {\n            if(scalar(@stack) > 0) {\n           \
    \     pop @stack;\n            }\n            else {\n                return '';\n\
    \            }\n        }\n    }\n    return scalar(@stack) > 0 ? 1 : '';\n}",
  "    my @chars = split(\"\", $string);\n    my $is_nested = 0;\n    my $cnt_open\
    \ = 0;\n    my $cnt_close = 0;\n    my $cnt_prev_open = 0;\n    my $cnt_prev_close\
    \ = 0;\n    foreach my $char (@chars) {\n        if($char eq '[') {\n        \
    \    $cnt_open++;\n        } elsif($char eq ']') {\n            $cnt_close++;\n\
    \        }\n        if($cnt_open > $cnt_close) {\n            if($cnt_prev_open\
    \ < $cnt_prev_close) {\n                $is_nested = 1;\n            }\n     \
    \   }\n        $cnt_prev_open = $cnt_open;\n        $cnt_prev_close = $cnt_close;\n\
    \    }\n    if($is_nested) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my $nested_brackets_count = 0;\n    my $prev_valid_index\
    \ = 0;\n    for(my $index = 0; $index < length($string); $index++) {\n       \
    \ my $char = substr($string, $index, 1);\n        my $next_char = substr($string,\
    \ $index + 1, 1);\n        if($char eq '[' && $next_char eq ']') {\n         \
    \   $nested_brackets_count++;\n            $prev_valid_index = $index + 1;\n \
    \       }\n    }\n    return $nested_brackets_count;\n}", "    my $count = 0;\n\
    \    for (my $i = 0; $i < length($string); $i++) {\n        if (substr($string,\
    \ $i, 1) eq '[') {\n            $count += 1;\n        }\n        elsif (substr($string,\
    \ $i, 1) eq ']') {\n            $count -= 1;\n        }\n        if ($count <\
    \ 0) {\n            return '';\n        }\n    }\n    if ($count == 0) {\n   \
    \     return '1';\n    }\n    else {\n        return '';\n    }\n}", "    my @stack;\n\
    \    my @string = split(//, $string);\n    for my $i (0..$#string) {\n       \
    \ if ($string[$i] eq '[') {\n            push @stack, $string[$i];\n        }\n\
    \        elsif ($string[$i] eq ']') {\n            if (scalar @stack == 0) {\n\
    \                return \"\";\n            }\n            if ($stack[-1] eq '[')\
    \ {\n                pop @stack;\n            }\n            else {\n        \
    \        return \"\";\n            }\n        }\n    }\n    if (scalar @stack\
    \ == 0) {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n\
    }", "    my $len = length($string);\n    return 0 if $len % 2;\n    my $open =\
    \ 0;\n    my $closed = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        my\
    \ $c = substr($string, $i, 1);\n        if ($c eq '[') {\n            $open++;\n\
    \        } elsif ($c eq ']') {\n            $closed++;\n        }\n        if\
    \ ($closed > $open) {\n            return 0;\n        }\n    }\n    return $open\
    \ == $closed;\n}", "    my @result;\n    foreach my $bracket (split(//, $string))\
    \ {\n        if ($bracket eq \"[\") {\n            push @result, $bracket;\n \
    \       }\n        elsif ($bracket eq \"]\") {\n            if (scalar @result\
    \ > 0) {\n                pop @result;\n            }\n            else {\n  \
    \              return \"\";\n            }\n        }\n    }\n    if (scalar @result\
    \ == 0) {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n\
    }", "    my $is_nested = 0;\n    my $open = 0;\n    my $close = 0;\n    my $index\
    \ = 0;\n    my $string_length = length($string);\n    while($index < $string_length)\
    \ {\n        my $char = substr($string, $index, 1);\n        if ($char eq '[')\
    \ {\n            $open++;\n        }\n        elsif ($char eq ']') {\n       \
    \     $close++;\n        }\n        $index++;\n    }\n    $is_nested = 1 if ($open\
    \ != $close);\n    return $is_nested;\n}", "    my $stack = Array::Stack->new();\n\
    \    $stack->push(0);\n    for my $i (0..length($string)-1) {\n        if(substr($string,\
    \ $i, 1) eq \"[\") {\n            $stack->push(1);\n        } else {\n       \
    \     if($stack->top() == 1) {\n                $stack->pop();\n             \
    \   $stack->pop();\n                $stack->push(0);\n            } else {\n \
    \               $stack->pop();\n                $stack->push(0);\n           \
    \ }\n        }\n    }\n    return $stack->top();\n}", "    my $nest_count = 0;\n\
    \    for (split(\"\", $string)) {\n        if ($_ eq \"[\") {\n            $nest_count++;\n\
    \        } elsif ($_ eq \"]\") {\n            $nest_count--;\n        }\n    \
    \    if ($nest_count < 0) {\n            return \"\";\n        }\n    }\n    return\
    \ $nest_count ? \"\" : 1;\n}", "    my @stack;\n    my $level = 0;\n    my $string_len\
    \ = length($string);\n    my $c;\n    for(my $i = 0; $i < $string_len; $i++) {\n\
    \        $c = substr($string, $i, 1);\n        if($c eq \"[\") {\n           \
    \ if($level == 0) {\n                push(@stack, $i);\n            }\n      \
    \      $level++;\n        } elsif($c eq \"]\") {\n            $level--;\n    \
    \        if($level == 0) {\n                # exclude lone '[]'\n            \
    \    if($i - $stack[-1] > 1) {\n                    return 1;\n              \
    \  }\n                pop(@stack);\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my($count) = 0;\n    for(my($i) = 0; $i < length($string); $i++)\
    \ {\n        if(substr($string, $i, 1) eq \"[\") {\n            $count++;\n  \
    \      }\n        elsif(substr($string, $i, 1) eq \"]\") {\n            $count--;\n\
    \        }\n        if($count < 0) {\n            return \"\";\n        }\n  \
    \  }\n    if($count == 0) {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    my $result = \"\";\n    my $nest_count = 0;\n    my $open_count\
    \ = 0;\n    my $close_count = 0;\n    for(my $i = 0; $i < length($string); $i++)\
    \ {\n        if(substr($string, $i, 1) eq \"[\") {\n            $open_count++;\n\
    \            if($nest_count > 0) {\n                $nest_count++;\n         \
    \   }\n        } elsif(substr($string, $i, 1) eq \"]\") {\n            $close_count++;\n\
    \            if($nest_count > 0) {\n                $nest_count--;\n         \
    \   }\n        }\n        if($open_count > $close_count) {\n            $nest_count++;\n\
    \        }\n    }\n    if($nest_count > 0) {\n        $result = 1;\n    }\n  \
    \  return $result;\n}", "    my @chars = split(//, $string);\n    my $nesting\
    \ = 0;\n    my $valid = 0;\n    my $prev = ' ';\n    foreach my $char (@chars)\
    \ {\n        if ($char eq '[' and $prev eq '[') {\n            $nesting++;\n \
    \       }\n        if ($char eq ']' and $prev eq ']') {\n            $nesting--;\n\
    \        }\n        if ($char eq '[' and $prev eq ']') {\n            $valid =\
    \ 1;\n        }\n        $prev = $char;\n    }\n    return $valid;\n}", "    my\
    \ @list = split //, $string;\n    my $nesting = 0;\n    my $nested = 0;\n    for\
    \ (my $i = 0; $i < @list; $i++) {\n        my $item = $list[$i];\n        if ($item\
    \ eq '[') {\n            $nesting++;\n        } elsif ($item eq ']') {\n     \
    \       $nesting--;\n        }\n        if ($nesting > 1 || $nesting < 0) {\n\
    \            return \"\";\n        }\n        if ($nesting == 1) {\n         \
    \   $nested = 1;\n        }\n    }\n    if ($nesting == 0 && $nested == 1) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my @arr\
    \ = split '', $string;\n    my @stack;\n    foreach my $char (@arr) {\n      \
    \  if ($char eq '[') {\n            push @stack, $char;\n        }\n        elsif\
    \ ($char eq ']') {\n            if (scalar @stack > 0) {\n                pop\
    \ @stack;\n            }\n            else {\n                push @stack, $char;\n\
    \            }\n        }\n    }\n    return scalar @stack == 0 ? 1 : \"\";\n\
    }\n1;", "    my $rc = 0;\n    my $lc = 0;\n    my $r = 0;\n    my $l = 0;\n  \
    \  my $len = length($string);\n    my $i = 0;\n    while ($i < $len) {\n     \
    \   my $c = substr($string, $i, 1);\n        if ($c eq '[') {\n            $r++;\n\
    \            $lc++;\n        }\n        if ($c eq ']') {\n            $l++;\n\
    \            $rc++;\n        }\n        if ($rc > $lc && $r <= $l) {\n       \
    \     return \"\";\n        }\n        $i++;\n    }\n    if ($r == $l) {\n   \
    \     return 1;\n    }\n    return \"\";\n}", "    return 1 if ($string =~ /^([]][]+)$/);\n\
    \    return 0;\n}", "    my $open_brackets = 0;\n    my $closed_brackets = 0;\n\
    \    my $result = \"\";\n    my $is_nested = 0;\n    my $error = 0;\n    my $str_len\
    \ = length($string);\n    for (my $i = 0; $i < $str_len; $i++) {\n        my $char\
    \ = substr($string, $i, 1);\n        if ($char eq '[') {\n            $open_brackets++;\n\
    \        } elsif ($char eq ']') {\n            $closed_brackets++;\n        }\
    \ else {\n            $error = 1;\n        }\n        if ($closed_brackets > $open_brackets)\
    \ {\n            $error = 1;\n        }\n        if ($error == 1) {\n        \
    \    $result = \"\";\n            last;\n        }\n        if ($closed_brackets\
    \ > 0 && $open_brackets > 0) {\n            $is_nested = 1;\n        }\n    }\n\
    \    if ($error == 0 && $open_brackets == $closed_brackets) {\n        $result\
    \ = 1;\n    }\n    if ($is_nested == 1) {\n        $result = 1;\n    }\n    if\
    \ ($result == 1) {\n        return $result;\n    } else {\n        return \"\"\
    ;\n    }\n}", "    my @split_string = split(//, $string);\n    my $open_bracket\
    \ = \"[\";\n    my $close_bracket = \"]\";\n    my $return_value = \"\";\n   \
    \ my $closed_bracket_pos = -1;\n    my $open_bracket_pos = -1;\n    my $return_value\
    \ = \"\";\n    # Compare each character in the string with the open and close\
    \ brackets\n    for(my $index = 0; $index < scalar(@split_string); $index++) {\n\
    \        # If a character is an open bracket, record it's index and \n       \
    \ # then compare it with the index of the next closed bracket\n        if ($split_string[$index]\
    \ eq $open_bracket) {\n            $open_bracket_pos = $index;\n            for(my\
    \ $next_index = $index + 1; $next_index < scalar(@split_string); $next_index++)\
    \ {\n                if ($split_string[$next_index] eq $close_bracket) {\n   \
    \                 $closed_bracket_pos = $next_index;\n                    last;\n\
    \                }\n            }\n            # If the position of the next closed\
    \ bracket is greater than the \n            # current position of the open bracket,\
    \ return 1 and break\n            if ($closed_bracket_pos > $open_bracket_pos)\
    \ {\n                $return_value = 1;\n                last;\n            }\n\
    \        }\n    }\n    return $return_value;\n}", "    my @chars = split(\"\"\
    , $string);\n    my $check_mode = 0; # 0 - nothing checked, 1 - has left br, 2\
    \ - has right br\n    my $last_left = -1;\n    my $first_right = length($string);\n\
    \    my $i = 0;\n    while($i < scalar(@chars)) {\n        if($chars[$i] eq \"\
    [\") {\n            if($check_mode == 0) {\n                $check_mode = 1;\n\
    \                $last_left = $i;\n            } elsif($check_mode == 2) {\n \
    \               if($i > $first_right) {\n                    return 1;\n     \
    \           }\n            }\n        } elsif($chars[$i] eq \"]\") {\n       \
    \     if($check_mode == 0) {\n                $check_mode = 2;\n             \
    \   $first_right = $i;\n            } elsif($check_mode == 1) {\n            \
    \    if($i < $first_right) {\n                    return 1;\n                }\n\
    \            }\n        }\n        $i += 1;\n    }\n    return \"\";\n}", "  \
    \  my $counter = 0;\n    for (my $i = 0; $i < length($string); $i++) {\n     \
    \   if (substr($string, $i, 1) eq \"[\") {\n            $counter++;\n        }\
    \ elsif (substr($string, $i, 1) eq \"]\") {\n            $counter--;\n       \
    \ }\n        if ($counter < 0) {\n            return \"\";\n        }\n    }\n\
    \    if ($counter == 0) {\n        return 1;\n    } else {\n        return \"\"\
    ;\n    }\n}", "    my @brackets = split(//, $string);\n    my $balance = 0;\n\
    \    my $nested = 0;\n    for my $bracket (@brackets) {\n        if ($bracket\
    \ eq '[') {\n            $balance++;\n        }\n        elsif ($bracket eq ']')\
    \ {\n            $balance--;\n        }\n        if ($balance > 0) {\n       \
    \     $nested = 1;\n        }\n    }\n    if ($balance == 0 && $nested == 1) {\n\
    \        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my\
    \ $counter = 0;\n    my $nest = 0;\n    for my $c (split('', $string)) {\n   \
    \     $counter++ if $c eq '[';\n        $counter-- if $c eq ']';\n        $nest++\
    \ if $counter > 1;\n    }\n    if ($counter != 0 || $nest == 0) {\n        return\
    \ \"\";\n    }\n    return $nest;\n}", "    my $parenthesis = 0;\n    my $bracket\
    \ = 0;\n    my $brace = 0;\n    foreach ( split //, $string ) {\n        if (\
    \ $_ eq '(' ) {\n            $parenthesis += 1;\n        }\n        elsif ( $_\
    \ eq ')' ) {\n            $parenthesis -= 1;\n        }\n        elsif ( $_ eq\
    \ '[' ) {\n            $bracket += 1;\n        }\n        elsif ( $_ eq ']' )\
    \ {\n            $bracket -= 1;\n        }\n        elsif ( $_ eq '{' ) {\n  \
    \          $brace += 1;\n        }\n        elsif ( $_ eq '}' ) {\n          \
    \  $brace -= 1;\n        }\n    }\n    if ( $parenthesis > 0 || $bracket > 0 ||\
    \ $brace > 0 ) {\n        return \"\";\n    }\n    else {\n        return 1;\n\
    \    }\n}", "    my $count = 0;\n    my $result = '';\n    my @arr = split //,\
    \ $string;\n    for my $i (@arr) {\n        if ($i eq '[') {\n            $count++;\n\
    \        }\n        if ($i eq ']') {\n            $count--;\n        }\n     \
    \   if ($count == 0) {\n            $result = 1;\n        }\n    }\n    return\
    \ $result;\n}", "    my @nested_array = split('', $string);\n    my $nested_count\
    \ = 0;\n    my $block_open = 0;\n    my $block_close = 0;\n    foreach my $char\
    \ (@nested_array) {\n        if ($char eq \"[\") {\n            $block_open++;\n\
    \        }\n        elsif ($char eq \"]\") {\n            $block_close++;\n  \
    \      }\n        if ($block_open > $block_close) {\n            $nested_count++;\n\
    \        }\n    }\n    return $nested_count;\n}", "    my @chars = split(\"\"\
    , $string);\n    my $count_left = 0;\n    my $count_right = 0;\n    my $count_last_right\
    \ = 0;\n    my $nested = 0;\n    foreach my $c (@chars) {\n        if ($c eq \"\
    [\") {\n            $count_left += 1;\n        }\n        elsif ($c eq \"]\")\
    \ {\n            $count_right += 1;\n            if ($count_right > $count_left)\
    \ {\n                $count_last_right = $count_right;\n            }\n      \
    \  }\n    }\n    if ($count_left == $count_right and $count_left > $count_last_right)\
    \ {\n        $nested = 1;\n    }\n    return $nested;\n}", "    my($i, $j, $count);\n\
    \    my($first_i, $first_j);\n    my($second_i, $second_j);\n    my($is_nested);\n\
    \    my($counter);\n    $count = 0;\n    $first_i = -1;\n    $first_j = -1;\n\
    \    $second_i = -1;\n    $second_j = -1;\n    $is_nested = 0;\n    for ($i =\
    \ 0; $i < length($string); $i = $i + 1) {\n        if (substr($string, $i, 1)\
    \ eq \"[\") {\n            $count = $count + 1;\n            if ($first_i < 0)\
    \ {\n                $first_i = $i;\n            }\n            else {\n     \
    \           $second_i = $i;\n            }\n        }\n        else {\n      \
    \      $count = $count - 1;\n            if ($first_j < 0) {\n               \
    \ $first_j = $i;\n            }\n            else {\n                $second_j\
    \ = $i;\n            }\n        }\n        if ($count < 0) {\n            last;\n\
    \        }\n    }\n    if ($count == 0 && $first_i < $first_j && $second_i < $second_j)\
    \ {\n        $is_nested = 1;\n    }\n    return $is_nested;\n}", "    return 1\
    \ if $string =~ m/\\[{2,}|\\]{2,}/;\n    return $string =~ tr/\\[\\]//cd;\n}",
  "    my @stack;\n    my @brackets = split //, $string;\n    my $nested = 0;\n  \
    \  foreach my $bracket (@brackets) {\n        if (scalar @stack == 0) {\n    \
    \        push @stack, $bracket;\n        } else {\n            my $last = $stack[-1];\n\
    \            if (($last eq \"[\" && $bracket eq \"]\") || ($last eq \"]\" && $bracket\
    \ eq \"[\")) {\n                pop @stack;\n                $nested = 1;\n  \
    \          } else {\n                push @stack, $bracket;\n            }\n \
    \       }\n    }\n    return $nested;\n}", "    my @stack;\n    for my $char (split\
    \ //, $string) {\n        push @stack, $char if $char eq '[';\n        pop @stack\
    \ if $char eq ']';\n    }\n    return ! @stack;\n}", "    # split the string into\
    \ a list\n    my @list = split //, $string;\n    # @count is initialized to 0\n\
    \    my @count = (0);\n    # iterate through the list\n    foreach my $bracket\
    \ (@list) {\n        # if a '[' is encountered\n        if ($bracket eq '[') {\n\
    \            # add 1 to @count\n            $count[-1] += 1;\n        }\n    \
    \    # if a ']' is encountered\n        elsif ($bracket eq ']') {\n          \
    \  # unless the last value in @count is 0\n            unless ($count[-1] == 0)\
    \ {\n                # subtract 1 from @count\n                $count[-1] -= 1;\n\
    \            }\n            # if the last value in @count is 0\n            else\
    \ {\n                # add a new value to @count, initialized to 0\n         \
    \       push @count, 0;\n            }\n        }\n    }\n    # if the last value\
    \ in @count is 0\n    if ($count[-1] == 0) {\n        # return 0\n        return\
    \ \"\";\n    }\n    # else\n    else {\n        # return 1\n        return 1;\n\
    \    }\n}", "    my @stack;\n    my $len = length($string);\n    if($len == 0)\
    \ {\n        return \"\";\n    }\n    for(my $i = 0; $i < $len; $i++) {\n    \
    \    my $char = substr($string, $i, 1);\n        if($char eq \"[\") {\n      \
    \      push(@stack, $char);\n        } else {\n            if(@stack == 0) {\n\
    \                return \"\";\n            }\n            pop(@stack);\n     \
    \   }\n    }\n    if(@stack == 0) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    while($string =~ s/\\[\\]//g) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    my @array = split //, $string;\n    my $length = scalar @array;\n\
    \    my $index = 0;\n    my $nest_count = 0;\n    my $nest_index = -1;\n    for\
    \ my $i (0..$length-1) {\n        my $c = $array[$i];\n        if ($c eq '[')\
    \ {\n            if ($nest_count == 0) {\n                $nest_index = $i;\n\
    \            }\n            $nest_count++;\n        }\n        elsif ($c eq ']')\
    \ {\n            $nest_count--;\n            if ($nest_count == 0) {\n       \
    \         my $subarray = join '', @array[$nest_index..$i];\n                return\
    \ 1 if ($subarray =~ /^\\[\\[\\]\\]$/);\n            }\n        }\n    }\n   \
    \ return '';\n}", "    my $output = 0;\n    my $length = length($string);\n  \
    \  for (my $i = 0; $i < $length; $i++) {\n        if ($string =~ /\\[{2,}/) {\n\
    \            $output = 1;\n        }\n    }\n    return $output;\n}", "    my\
    \ $count = 0;\n    for my $c (split //, $string) {\n        if ($c eq '[') {\n\
    \            $count++;\n        } elsif ($c eq ']') {\n            $count--;\n\
    \        }\n        return 1 if $count < 0;\n    }\n    return 0;\n}", "    my\
    \ @brackets = split \"\", $string;\n    my $num_open_brackets = 0;\n    my $num_closed_brackets\
    \ = 0;\n    foreach my $bracket (@brackets) {\n        if ($bracket eq '[') {\n\
    \            $num_open_brackets++;\n        } elsif ($bracket eq ']') {\n    \
    \        $num_closed_brackets++;\n        }\n    }\n    if ($num_open_brackets\
    \ == $num_closed_brackets) {\n        return 1;\n    } else {\n        return\
    \ '';\n    }\n}", "    my @x = split(//, $string);\n    my $nesting_level = 0;\n\
    \    my $i = 0;\n    while ($i < scalar(@x)) {\n        if ($x[$i] eq \"[\") {\n\
    \            $nesting_level++;\n        } elsif ($x[$i] eq \"]\") {\n        \
    \    $nesting_level--;\n        }\n        if ($nesting_level == 0 && $i < scalar(@x)\
    \ - 1) {\n            return \"\";\n        }\n        $i++;\n    }\n    if ($nesting_level\
    \ == 0) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", " \
    \   my $nesting = 0;\n    my $is_nested = 0;\n    for (my $i = 0; $i < length($string);\
    \ $i++) {\n        my $c = substr($string, $i, 1);\n        if ($c eq \"[\") {\n\
    \            $nesting++;\n        } elsif ($c eq \"]\") {\n            $nesting--;\n\
    \        }\n        if ($nesting == 1 && $c eq \"[\") {\n            $is_nested\
    \ = 1;\n        }\n    }\n    if ($nesting != 0) {\n        return \"\";\n   \
    \ } else {\n        return $is_nested;\n    }\n}", "    my $open  = \"[\";\n \
    \   my $close = \"]\";\n    my $count = 0;\n    my $current;\n    my $previous;\n\
    \    foreach $current (split //, $string) {\n        if ($current eq $open and\
    \ $previous eq $open) {\n            return 1;\n        }\n        if ($current\
    \ eq $open) {\n            $count += 1;\n        }\n        if ($current eq $close)\
    \ {\n            $count -= 1;\n        }\n        $previous = $current;\n    }\n\
    \    return \"\";\n}", "    my $stack = 0;\n    for (my $i = 0; $i < length($string);\
    \ $i++) {\n        my $char = substr($string, $i, 1);\n        if ($char eq '[')\
    \ {\n            $stack++;\n        } elsif ($char eq ']') {\n            $stack--;\n\
    \        } else {\n            die \"Invalid character\";\n        }\n       \
    \ if ($stack < 0) {\n            return '';\n        }\n    }\n    return $stack\
    \ ? '' : 1;\n}", "    my $result = \"\";\n    my $len = length($string);\n   \
    \ my $left = 0;\n    my $right = 0;\n    for (my $i = 0; $i < $len; $i++) {\n\
    \        my $ch = substr($string, $i, 1);\n        if ($ch eq '[') {\n       \
    \     $left++;\n        } elsif ($ch eq ']') {\n            $right++;\n      \
    \  }\n        if ($left != 0 && $right != 0 && $left == $right) {\n          \
    \  $result = 1;\n            last;\n        }\n    }\n    return $result;\n}\n\
    print is_nested(\"[[]]\") . \"\\n\";\nprint is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\nprint is_nested(\"[][]\") . \"\\n\";\nprint is_nested(\"[]\") . \"\\n\"\
    ;\nprint is_nested(\"[[][]]\") . \"\\n\";\nprint is_nested(\"[[]][[\") . \"\\\
    n\";", "    return 1 if $string =~ /\\[\\[/;\n    return \"\";\n}", "    my $result\
    \ = 0;\n    my $counter = 0;\n    my @characters = split //, $string;\n    foreach\
    \ my $character (@characters) {\n        if ($character eq \"[\") {\n        \
    \    $counter++;\n        } elsif ($character eq \"]\") {\n            $counter--;\n\
    \        }\n        if ($counter < 0) {\n            return $result;\n       \
    \ }\n    }\n    if ($counter > 0) {\n        return $result;\n    } else {\n \
    \       $result = 1;\n        return $result;\n    }\n}", "    my $level = 0;\n\
    \    foreach my $char (split //, $string) {\n        if ($char eq \"[\") {\n \
    \           $level++;\n        }\n        elsif ($char eq \"]\") {\n         \
    \   $level--;\n        }\n        elsif ($level < 0) {\n            return \"\"\
    ;\n        }\n    }\n    return ($level == 0) ? \"1\" : \"\";\n}", "    my $cnt\
    \ = 0;\n    for my $char (split //, $string) {\n        $cnt++ if $char eq '[';\n\
    \        $cnt-- if $char eq ']';\n        return 1 if $cnt < 0;\n    }\n    return\
    \ 0;\n}", "    my $stack;\n    foreach my $char (split(\"\", $string)) {\n   \
    \     if ($char eq '[') {\n            push(@$stack, $char);\n        } elsif\
    \ ($char eq ']') {\n            if (!@$stack) {\n                return '';\n\
    \            } else {\n                if ($stack->[-1] eq '[') {\n          \
    \          pop(@$stack);\n                } else {\n                    return\
    \ '';\n                }\n            }\n        }\n    }\n    return @$stack\
    \ ? '' : 1;\n}", "    # TODO\n}", "    my $cnt = 0;\n    for my $c (split //,\
    \ $string) {\n        if ($c eq '[') {\n            $cnt++;\n        } elsif ($c\
    \ eq ']') {\n            if ($cnt > 0) {\n                $cnt--;\n          \
    \  } else {\n                return '';\n            }\n        }\n    }\n   \
    \ return $cnt ? '' : 1;\n}", "    return 1 if $string =~ /\\[\\]/;\n    return;\n\
    }", "    my $nested = 0;\n    my $number_of_left_square_brackets = 0;\n    my\
    \ $number_of_right_square_brackets = 0;\n    for my $i (0 .. length($string) -\
    \ 1) {\n        if (substr($string, $i, 1) eq \"[\") {\n            $number_of_left_square_brackets++;\n\
    \        } elsif (substr($string, $i, 1) eq \"]\") {\n            $number_of_right_square_brackets++;\n\
    \        }\n        if ($number_of_left_square_brackets > 0\n            && $number_of_left_square_brackets\
    \ < $number_of_right_square_brackets) {\n            $nested = 1;\n        }\n\
    \    }\n    return $nested;\n}", "    # If input string is not valid return 0\n\
    \    if(valid_sequence($string) == 0) {\n        return 0;\n    }\n    # If input\
    \ string is valid check if the string contains at least one nested pattern\n \
    \   my $nested = \"[]\";\n    if($string =~ /$nested/) {\n        return 1;\n\
    \    }\n    return 0;\n}", "    my $j = -1;\n    for my $i (0..length($string)-1)\
    \ {\n        my $c = substr($string, $i, 1);\n        if ($c eq \"[\") {\n   \
    \         $j++;\n        } elsif ($c eq \"]\") {\n            if ($j == -1) {\n\
    \                return \"\";\n            }\n            $j--;\n        }\n \
    \   }\n    if ($j == -1) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   my $res;\n    my @a = split(//, $string);\n    my $i = 0;\n    my $n = 0;\n\
    \    while ($i <= $#a){\n        if ($a[$i] eq '['){\n            $n += 1;\n \
    \       }elsif ($a[$i] eq ']'){\n            $n -= 1;\n        }\n        if ($n\
    \ == 0){\n            $res = 1;\n            last;\n        }\n        $i += 1;\n\
    \    }\n    return $res;\n}", "    return 0 if length($string) % 2; # odd length\
    \ strings are not valid subsequences\n    my @stack;\n    for my $c (split //,\
    \ $string) {\n        if ($c eq '[') {\n            push @stack, $c;\n       \
    \ }\n        elsif ($c eq ']') {\n            pop @stack;\n        }\n    }\n\
    \    return @stack ? 0 : 1;\n}", "    my @stack;\n    for my $i (split(//, $string))\
    \ {\n        if ($i eq '[') {\n            push @stack, $i;\n        }\n     \
    \   elsif ($i eq ']') {\n            return 1 if (pop @stack eq '[');\n      \
    \  }\n    }\n    return 0;\n}", "    my @chars = split(\"\", $string);\n    my\
    \ $match = \"\";\n    foreach $char (@chars) {\n        if ($char eq \"[\") {\n\
    \            $match = $match . \"[\";\n        }\n        elsif ($char eq \"]\"\
    ) {\n            $match = substr($match, 1);\n        }\n    }\n    return $match\
    \ eq \"\";\n}", "    my $count = 0;\n    my $nesting = 0;\n    my $depth = 0;\n\
    \    my $close_depth = 0;\n    while ($count < length($string)) {\n        my\
    \ $ch = substr($string, $count, 1);\n        if ($ch eq '[') {\n            $depth++;\n\
    \            if ($nesting) {\n                $nesting = 0;\n            }\n \
    \       }\n        if ($ch eq ']') {\n            $close_depth++;\n          \
    \  if ($depth <= $close_depth) {\n                return '';\n            }\n\
    \            $nesting = 1;\n        }\n        $count++;\n    }\n    if ($nesting)\
    \ {\n        return 1;\n    }\n    return '';\n}", "    my @stack;\n    my $first_match;\n\
    \    my $inner_match;\n    my @string = split('', $string);\n    my $length =\
    \ @string;\n    while (@string) {\n        my $char = shift @string;\n       \
    \ push @stack, $char;\n        my $top = $stack[$#stack];\n        if ($top eq\
    \ '[' and $string[0] eq ']') {\n            pop @stack;\n            $first_match\
    \ = 1;\n            shift @string;\n        }\n        elsif ($top eq '[' and\
    \ $first_match) {\n            $inner_match = 1;\n        }\n    }\n    return\
    \ $length > 0 ? $inner_match : 0;\n}", "    my @stack;\n    my @chars = split('',\
    \ $string);\n    foreach my $char (@chars) {\n        if (scalar(@stack) == 0)\
    \ {\n            push(@stack, $char);\n        } elsif ($char eq '[') {\n    \
    \        push(@stack, $char);\n        } elsif ($char eq ']') {\n            pop(@stack);\n\
    \        }\n    }\n    return scalar(@stack) == 0 ? 1 : \"\";\n}", "    $string\
    \ =~ s/\\[\\]//g;\n    $string =~ s/\\[//;\n    $string =~ s/\\]//;\n    if ($string)\
    \ {\n        return \"\";\n    } else {\n        return 1;\n    }\n}", "    my\
    \ $count = 0;\n    foreach my $c (split //, $string) {\n        if ($c eq '[')\
    \ {\n            $count++;\n        } elsif ($c eq ']') {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return '';\n        }\n   \
    \ }\n    return $count ? '' : 1;\n}", "    return $string =~ /\\[\\[.*\\]\\]/;\n\
    }", "    my($result);\n    my($count);\n    my($i);\n    my($char);\n    my($stack);\n\
    \    my($stack_index);\n    my($stack_length);\n    my($last_index);\n    $result\
    \ = 0;\n    $count = length($string);\n    $stack = '';\n    $stack_index = 0;\n\
    \    $stack_length = 0;\n    $last_index = 0;\n    for($i = 0; $i < $count; $i++)\
    \ {\n        $char = substr($string, $i, 1);\n        if($char eq '[' || $char\
    \ eq ']') {\n            if($char eq '[') {\n                $stack_length = $stack_length\
    \ + 1;\n                $stack = $stack . $char;\n            } else {\n     \
    \           if($stack_length > 0) {\n                    $stack_length = $stack_length\
    \ - 1;\n                    $stack_index = $stack_index + 1;\n               \
    \     if($stack_index < $stack_length) {\n                        $result = 1;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return $result;\n}", "    my @array = split(//, $string);\n    my $count =\
    \ 0;\n    my $last_open = -1;\n    for (my $i = 0; $i < @array; $i++) {\n    \
    \    if ($array[$i] eq \"[\") {\n            $count++;\n            $last_open\
    \ = $i;\n        } else {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return \"\";\n        }\n    }\n    if ($count == 0) {\n\
    \        return \"\";\n    } else {\n        return \"1\";\n    }\n}", "    my\
    \ $length = length($string);\n    return 0 if $length % 2;", "    my $open_brackets\
    \ = 0;\n    my $close_brackets = 0;\n    foreach (split \"\", $string) {\n   \
    \     $open_brackets++ if ($_ eq \"[\");\n        $close_brackets++ if ($_ eq\
    \ \"]\");\n        if ($close_brackets > $open_brackets) {\n            return\
    \ \"\";\n        }\n    }\n    return 1 if ($open_brackets == $close_brackets);\n\
    \    return \"\";\n}", "    my @matches = ();\n    my $substr = '';\n    my $opener\
    \ = 0;\n    my $closer = 0;\n    for (my $i = 0; $i < length($string); $i++) {\n\
    \        if (substr($string, $i, 1) eq '[') {\n            $opener++;\n      \
    \      $substr .= '[';\n        } elsif (substr($string, $i, 1) eq ']') {\n  \
    \          $closer++;\n            $substr .= ']';\n        }\n        if ($opener\
    \ != 0 && $closer != 0 && $opener == $closer) {\n            push @matches, $substr;\n\
    \            $substr = '';\n            $opener = 0;\n            $closer = 0;\n\
    \        }\n    }\n    # check if there's any bracket(s) left unprocessed\n  \
    \  return \"\" if ($opener > 0 || $closer > 0);\n    # check each match\n    my\
    \ $result = '';\n    for (my $i = 0; $i < scalar(@matches); $i++) {\n        $result\
    \ = is_valid($matches[$i]);\n        return 1 if ($result == 1);\n    }\n    return\
    \ \"\";\n}", "    if ($string =~ /\\[\\]/) {\n        return 1;\n    }\n    return\
    \ \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
