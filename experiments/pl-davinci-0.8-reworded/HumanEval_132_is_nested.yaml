name: HumanEval_132_is_nested
language: pl
prompt: "# Create a function that takes a string as input which contains only square\
  \ brackets.\n# The function should return 1 if and only if there is a valid subsequence\
  \ of brackets \n# where at least one bracket in the subsequence is nested.\n# >>>\
  \ is_nested(\"[[]]\")\n# 1\n# >>> is_nested(\"[]]]]]]][[[[[]\")\n# \"\"\n# >>> is_nested(\"\
  [][]\")\n# \"\"\n# >>> is_nested(\"[]\")\n# \"\"\n# >>> is_nested(\"[[][]]\")\n\
  # 1\n# >>> is_nested(\"[[]][[\")\n# 1\nsub is_nested {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n\
  \        if(eq_deeply($candidate->(\"[[]]\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  [][]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"[]\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  []]]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  []]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"[[]][[\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $is_nested = 0;\n    my $hash = {};\n    my $len = length($string);\n\
    \    for (my $i = 0; $i < $len; $i++) {\n        my $b = substr($string, $i, 1);\n\
    \        $hash->{$b} = 0 unless exists $hash->{$b};\n        $hash->{$b} = $hash->{$b}\
    \ + 1;\n    }\n    if ($hash->{'['} && $hash->{']'}) {\n        if ($hash->{'['}\
    \ == $hash->{']'}) {\n            my $s = $string;\n            while (length($s)\
    \ > 0) {\n                $s =~ s/\\[\\]//g;\n                if (length($s) >\
    \ 0) {\n                    $is_nested = 1;\n                    last;\n     \
    \           }\n            }\n        }\n    }\n    if ($is_nested) {\n      \
    \  return 1;\n    } else {\n        return \"\";\n    }\n}", "    my @a = ();\n\
    \    my $is_nested = 0;\n    my $is_valid = 1;\n    for my $i (0..length($string)-1)\
    \ {\n        my $s = substr($string, $i, 1);\n        if ($s eq '[') {\n     \
    \       push @a, $s;\n        }\n        elsif ($s eq ']') {\n            if (scalar(@a)\
    \ > 0) {\n                my $a = pop @a;\n                if ($a eq '[') {\n\
    \                    if (scalar(@a) > 0) {\n                        $is_nested\
    \ = 1;\n                    }\n                }\n                else {\n   \
    \                 $is_valid = 0;\n                    last;\n                }\n\
    \            }\n            else {\n                $is_valid = 0;\n         \
    \       last;\n            }\n        }\n        else {\n            $is_valid\
    \ = 0;\n            last;\n        }\n    }\n    if ($is_valid && !$is_nested\
    \ && scalar(@a) == 0) {\n        return '';\n    }\n    else {\n        return\
    \ 1;\n    }\n}", "    my $nesting_count = 0;\n    my $valid_count = 0;\n    for\
    \ my $bracket (split //, $string) {\n        if($bracket eq '[') {\n         \
    \   $nesting_count++;\n        }\n        elsif($bracket eq ']') {\n         \
    \   if($nesting_count > 0) {\n                $valid_count++;\n              \
    \  $nesting_count--;\n            }\n        }\n    }\n    return $valid_count\
    \ >= 1 ? 1 : '';\n}", "    my $open = 0;\n    my $close = 0;\n    foreach my $char\
    \ (split //, $string) {\n        if ($char eq \"[\") {\n            $open++;\n\
    \        } elsif ($char eq \"]\") {\n            $close++;\n        }\n      \
    \  if ($close > $open) {\n            return \"\";\n        }\n    }\n    if ($open\
    \ == $close && $open > 0) {\n        return 1;\n    } else {\n        return \"\
    \";\n    }\n}", "    if ($string =~ m/(\\[\\])+/) {\n        return 1;\n    }\n\
    \    return \"\";\n}", "    my @stack;\n    for (my $i = 0; $i < length($string);\
    \ $i++) {\n        my $c = substr($string, $i, 1);\n        if ($c eq \"[\") {\n\
    \            push(@stack, $c);\n        } else {\n            my $top = pop(@stack);\n\
    \            if ($top ne \"[\") {\n                return \"\";\n            }\n\
    \        }\n    }\n    return \"1\" if scalar(@stack) == 0;\n    return \"\";\n\
    }", "    my @array = split(//, $string);\n    my $counter = 0;\n    my $nested\
    \ = 0;\n    while ($counter < scalar(@array)) {\n        my $first = $array[$counter];\n\
    \        my $next = $array[$counter + 1];\n        if ($first eq '[' && $next\
    \ eq ']') {\n            return 1;\n        }\n        elsif ($first eq ']' &&\
    \ $next eq '[') {\n            return 1;\n        }\n        $counter++;\n   \
    \ }\n    return \"\";\n}", "    my $len = length($string);\n    if ($len % 2 !=\
    \ 0) {\n        return \"\";\n    }\n    my $left = 0;\n    my $right = 0;\n \
    \   my $flag = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        if (substr($string,\
    \ $i, 1) eq \"[\") {\n            $left++;\n        }\n        elsif (substr($string,\
    \ $i, 1) eq \"]\") {\n            $right++;\n        }\n        if ($left == $right)\
    \ {\n            if ($left == $len / 2) {\n                return 1;\n       \
    \     }\n            else {\n                $left = 0;\n                $right\
    \ = 0;\n            }\n        }\n    }\n    return \"\";\n}", "    my @string\
    \ = split(\"\", $string);\n    my $count = 0;\n    my $nested = 0;\n    for (my\
    \ $i = 0; $i < scalar(@string); $i++) {\n        if ($string[$i] eq \"[\") {\n\
    \            $count++;\n        } elsif ($string[$i] eq \"]\") {\n           \
    \ $count--;\n        }\n        if ($count < 0) {\n            $nested = 1;\n\
    \        }\n    }\n    return $nested;\n}", "    my $result = 0;\n    my $string_length\
    \ = length($string);\n    my $open_bracket_pos = 0;\n    my $close_bracket_pos\
    \ = 0;\n    my $remaining_string = $string;\n    if ( $string =~ m/^[\\[\\]]+$/\
    \ ) {\n        for ( $i = 0; $i < $string_length; $i++ ) {\n            my $char\
    \ = substr($string, $i, 1);\n            if ( $char eq \"[\" ) {\n           \
    \     if ( $open_bracket_pos == 0 && $close_bracket_pos == 0 ) {\n           \
    \         $open_bracket_pos = $i;\n                }\n            }\n        \
    \    elsif ( $char eq \"]\" ) {\n                if ( $open_bracket_pos != 0 &&\
    \ $close_bracket_pos == 0 ) {\n                    $close_bracket_pos = $i;\n\
    \                    $remaining_string = substr($string, $close_bracket_pos+1);\n\
    \                    $remaining_string =~ s/^[\\[\\]]+//;\n                  \
    \  return \"1\" if ( length($remaining_string) == 0 );\n                    return\
    \ \"1\" if ( length($remaining_string) == 1 && substr($remaining_string, 0, 1)\
    \ eq \"[\" );\n                    $open_bracket_pos = 0;\n                  \
    \  $close_bracket_pos = 0;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    $string =~ s/[^\\[\\]]//g;\n    my $count = 0;\n \
    \   for (my $i = 0; $i < length($string); $i++) {\n        if (substr($string,\
    \ $i, 1) eq '[') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return \"\";\n        }\n \
    \   }\n    if ($count > 0) {\n        return \"\";\n    }\n    return 1;\n}",
  "    $string =~ s/\\]\\[//g;\n    $string =~ s/\\]//g;\n    $string =~ s/\\[//g;\n\
    \    if ($string) {\n        return \"\";\n    } else {\n        return 1;\n \
    \   }\n}", "    my $counter = 0;\n    my $symbol;\n    foreach $symbol (split\
    \ //, $string) {\n        if ($symbol eq \"[\") {\n            $counter++;\n \
    \       }\n        elsif ($symbol eq \"]\") {\n            $counter--;\n     \
    \   }\n        if ($counter < 0) {\n            return 0;\n        }\n    }\n\
    \    if ($counter > 0) {\n        return 0;\n    }\n    return 1;\n}", "    my($opening_brackets,\
    \ $closing_brackets) = 0;\n    my($all_closing_brackets_after_opening) = 1;\n\
    \    my($last_closing_bracket_position) = length($string);\n    for(my($index)\
    \ = 0; $index < length($string); $index++) {\n        my($character) = substr($string,\
    \ $index, 1);\n        if($character eq '[') {\n            $opening_brackets++;\n\
    \        } elsif($character eq ']') {\n            $closing_brackets++;\n    \
    \        if($all_closing_brackets_after_opening) {\n                $last_closing_bracket_position\
    \ = $index;\n            }\n            if($opening_brackets < $closing_brackets)\
    \ {\n                $all_closing_brackets_after_opening = 0;\n            }\n\
    \        }\n    }\n    if($opening_brackets > $closing_brackets) {\n        return\
    \ '';\n    } elsif($opening_brackets == $closing_brackets) {\n        return '';\n\
    \    } elsif($all_closing_brackets_after_opening) {\n        return '';\n    }\
    \ else {\n        return 1;\n    }\n}", "    my @string = split //, $string;\n\
    \    my $brackets = 0;\n    for (@string) {\n        if ($_ eq '[') {\n      \
    \      $brackets++;\n        }\n        elsif ($_ eq ']') {\n            $brackets--;\n\
    \        }\n        if ($brackets < 0) {\n            return \"\";\n        }\n\
    \    }\n    return $brackets ? \"\" : 1;\n}", "    my @stack;\n    my $length\
    \ = length($string);\n    my $opened = 0;\n    my $closed = 0;\n    my $flag =\
    \ 0;\n    for(my $i = 0; $i < $length; $i++) {\n        if(substr($string, $i,\
    \ 1) eq \"[\") {\n            push(@stack, \"[\");\n            $opened++;\n \
    \       }\n        else {\n            if(scalar(@stack) > 0) {\n            \
    \    pop(@stack);\n                $closed++;\n            }\n            else\
    \ {\n                if($closed >= $opened) {\n                    $flag = 1;\n\
    \                }\n                else {\n                    $flag = 0;\n \
    \               }\n                last;\n            }\n        }\n    }\n  \
    \  if($opened == $closed) {\n        $flag = 1;\n    }\n    else {\n        $flag\
    \ = 0;\n    }\n    return $flag;\n}", "    my @stack;\n    for (my $i = 0; $i\
    \ < length($string); $i++) {\n        if ($string->[$i] eq '[') {\n          \
    \  push @stack, '['\n        }\n        elsif ($string->[$i] eq ']') {\n     \
    \       if ($stack[-1] eq '[') {\n                pop @stack;\n            }\n\
    \            else {\n                return '';\n            }\n        }\n  \
    \  }\n    return '' if @stack;\n    return 1;\n}", "    if ( $string =~ /\\]/\
    \ && $string =~ /\\[/ ) {\n        my @symbols = split(//, $string);\n       \
    \ my $i = 0;\n        my $j = 0;\n        my $count = 0;\n        for ($i = 0;\
    \ $i < scalar(@symbols); $i++) {\n            if ($symbols[$i] eq '[') {\n   \
    \             $count++;\n            }\n            else {\n                $count--;\n\
    \            }\n            if ($count < 0) {\n                return 0;\n   \
    \         }\n        }\n        return 1;\n    }\n    else {\n        return 0;\n\
    \    }\n}", "    my @array = split //, $string;\n    my $count = 0;\n    for (my\
    \ $i = 0; $i < scalar @array; $i++) {\n        if ($array[$i] eq \"[\") {\n  \
    \          $count++;\n        }\n        elsif ($array[$i] eq \"]\") {\n     \
    \       $count--;\n        }\n        if ($count == 0) {\n            return 1;\n\
    \        }\n    }\n    return \"\";\n}", "    if($string =~ m/\\[\\[\\]\\]/){\n\
    \        return 1;\n    }\n    elsif($string =~ m/\\[\\[\\]\\]\\]\\]\\]\\]\\]\\\
    ]\\[\\[\\[\\[\\[\\]/){\n        return 1;\n    }\n    elsif($string =~ m/\\[\\\
    ]\\[\\]/){\n        return 1;\n    }\n    elsif($string =~ m/\\[\\]/){\n     \
    \   return 1;\n    }\n    elsif($string =~ m/\\[\\[\\]\\]\\[\\[\\]/){\n      \
    \  return 1;\n    }\n    elsif($string =~ m/\\[\\[\\]\\]\\[\\[\\]/){\n       \
    \ return 1;\n    }\n    else{\n        return \"\";\n    }\n}", "    my $result\
    \ = 0;\n    while($string =~ /\\[{2,}/g){\n        if(substr($string,pos($string)-1,1)\
    \ eq '['){\n            $result = 1;\n        }\n    }\n    return $result;\n}",
  "    my $pos = -1;\n    while (my $ch = substr($string, ++$pos, 1)) {\n        $ch\
    \ eq '[' and $pos += 2;\n    }\n    return $pos == length($string);\n}", "   \
    \ my @arr = split(//, $string);\n    my $sum = 0;\n    my $flag = 0;\n    my $first\
    \ = 1;\n    my $last = 0;\n    my $prev = '';\n    my $first_bracket = '';\n \
    \   my $last_bracket = '';\n    my $first_num = 0;\n    foreach my $el(@arr) {\n\
    \        if ($el eq '[') {\n            $sum += 1;\n            if ($first_bracket\
    \ eq '') {\n                $first_bracket = $el;\n                $first_num\
    \ = $sum;\n            }\n        } elsif ($el eq ']') {\n            $sum -=\
    \ 1;\n            if ($sum == $first_num) {\n                $last_bracket = $el;\n\
    \            }\n        }\n        if ($sum < 0) {\n            return '';\n \
    \       }\n        if ($prev eq '[') {\n            if ($el eq ']') {\n      \
    \          $flag = 1;\n            }\n        }\n        $prev = $el;\n    }\n\
    \    if ($sum == 0 and $flag == 1) {\n        return 1;\n    }\n    return '';\n\
    }", "    my $depth = 0;\n    foreach my $char (split(//, $string)) {\n       \
    \ $depth++ if ($char eq '[');\n        $depth-- if ($char eq ']');\n        return\
    \ 1 if ($depth < 0);\n    }\n    return 1 if ($depth > 0);\n    return 0;\n}",
  "    my @indexes = indexes {/\\[/} @{$string};\n    my @indexed = indexes {/\\]/}\
    \ @{$string};\n    my $base = $indexes[0];\n    my $count = 0;\n    foreach my\
    \ $i (@indexed) {\n        if ($i > $base) {\n            $count++;\n        }\n\
    \    }\n    if ($count > 0) {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", '    return 0 if $string !~ /\A\[\]*\]*\[*\Z/;', "    my @stack;\n\
    \    my $result = '';\n    my $flag = 1;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            if ($flag == 1) {\n            \
    \    $flag = 0;\n            }\n            push @stack, $char;\n        }\n \
    \       elsif ($char eq ']') {\n            if (@stack) {\n                pop\
    \ @stack;\n                $result = 1;\n            }\n            else {\n \
    \               $flag = 1;\n            }\n        }\n    }\n    return $result;\n\
    }", "    my @arr = split(//, $string);\n    my @stack;\n    my $left = 0;\n  \
    \  my $right = 0;\n    for my $i (@arr) {\n        if ($i eq '[') {\n        \
    \    $left += 1;\n            push @stack, $i;\n        }\n        if ($i eq ']')\
    \ {\n            $right += 1;\n            if ($left > $right) {\n           \
    \     pop @stack;\n            }\n        }\n    }\n    if ($left == $right &&\
    \ @stack > 0) {\n        return 1;\n    }\n    return \"\";\n}", "    return 0\
    \ if (length($string) % 2 != 0);\n    my @arr = split(//, $string);\n    my $count\
    \ = 0;\n    my $is_nested = 0;\n    for(my $i = 0; $i < @arr; $i++) {\n      \
    \  $count++ if ($arr[$i] eq '[');\n        $count-- if ($arr[$i] eq ']');\n  \
    \      $is_nested = 1 if ($count < 0);\n    }\n    return 0 if ($count != 0);\n\
    \    return $is_nested;\n}", "    my @arr;\n    foreach my $c (split(//, $string))\
    \ {\n        if ($c eq '[') {\n            push @arr, $c;\n        } else {\n\
    \            pop @arr;\n        }\n    }\n    if (scalar @arr == 0) {\n      \
    \  return 1;\n    } else {\n        return \"\";\n    }\n}", "    my $flag = 0;\n\
    \    # TODO\n    my @str = split('', $string);\n    if (scalar(@str) % 2 != 0)\
    \ {\n        return \"\";\n    }\n    my $b = 0;\n    my $e = 0;\n    for (my\
    \ $i = 0; $i < scalar(@str); $i++) {\n        if ($str[$i] eq '[') {\n       \
    \     $b++;\n        }\n        if ($str[$i] eq ']') {\n            $e++;\n  \
    \      }\n        if ($b != 0 && $e != 0 && $b == $e) {\n            return 1;\n\
    \        }\n    }\n    return \"\";\n}", "    my $result = 0;\n    my $open_count\
    \ = 0;\n    my $close_count = 0;\n    foreach my $char (split //, $string) {\n\
    \        if ($char eq '[') {\n            $open_count++;\n        }\n        elsif\
    \ ($char eq ']') {\n            $close_count++;\n        }\n        if ($close_count\
    \ > $open_count) {\n            return \"\";\n        }\n    }\n    if ($open_count\
    \ == $close_count) {\n        return 1;\n    }\n    else {\n        return \"\"\
    ;\n    }\n}", "    my @array = split //, $string;\n    my $depth = 0;\n    my\
    \ $res = \"\";\n    foreach my $element (@array) {\n        if ($element eq \"\
    [\") {\n            $depth += 1;\n        }\n        if ($element eq \"]\") {\n\
    \            $depth -= 1;\n        }\n        if ($depth < 0) {\n            $res\
    \ = \"\";\n            last;\n        }\n        if ($depth > 0) {\n         \
    \   $res = 1;\n        }\n    }\n    if ($depth == 0) {\n        $res = 1;\n \
    \   }\n    return $res;\n}", "    my $ret = 0;\n    my $i;\n    my $len = length($string);\n\
    \    my $left;\n    my $right;\n    my $ret;\n    my $left_pos;\n    my $right_pos;\n\
    \    my $is_inner;\n    my $j;\n    for ($i = 0; $i < $len - 1; $i++) {\n    \
    \    $left = substr($string, $i, 1);\n        if ($left eq \"[\") {\n        \
    \    $left_pos = $i;\n            $ret = 0;\n            $is_inner = 0;\n    \
    \        for ($j = $i + 1; $j < $len; $j++) {\n                $right = substr($string,\
    \ $j, 1);\n                if ($right eq \"]\") {\n                    $right_pos\
    \ = $j;\n                    if ($right_pos > $left_pos) {\n                 \
    \       $ret = 1;\n                        $is_inner = 1;\n                  \
    \      last;\n                    }\n                }\n            }\n      \
    \      if ($is_inner) {\n                last;\n            }\n        }\n   \
    \ }\n    return $ret;\n}", "    my $nested = 0;\n    my $subsequence = 0;\n  \
    \  foreach my $letter (split //, $string) {\n        if ($letter eq \"[\") {\n\
    \            $subsequence++;\n            $nested++;\n        }\n        elsif\
    \ ($letter eq \"]\") {\n            $subsequence--;\n            $nested--;\n\
    \        }\n        if ($subsequence < 0) {\n            $subsequence = 0;\n \
    \       }\n        if ($nested < 0) {\n            $nested = 0;\n        }\n \
    \   }\n    if ($subsequence > 0) {\n        return \"\";\n    }\n    return $nested;\n\
    }", "    my @string = split //, $string;\n    my @stack;\n    foreach my $char\
    \ (@string) {\n        if ($char eq '[') {\n            push @stack, $char;\n\
    \        }\n        elsif ($char eq ']') {\n            if (@stack) {\n      \
    \          if ($stack[-1] eq '[') {\n                    pop @stack;\n       \
    \         }\n                else {\n                    push @stack, $char;\n\
    \                }\n            }\n            else {\n                push @stack,\
    \ $char;\n            }\n        }\n    }\n    return 0 if @stack;\n    return\
    \ 1;\n}", "    my @list = split(/[\\[\\]]/, $string);\n    my @check;\n    for\
    \ my $char(@list) {\n        next if not length $char;\n        if($char eq '[')\
    \ {\n            push @check, 1;\n        } else {\n            if(scalar @check\
    \ > 0) {\n                pop @check;\n            } else {\n                return\
    \ \"\";\n            }\n        }\n    }\n    return scalar @check > 0 ? \"\"\
    \ : 1;\n}", "    my @stack;\n    for (my $i = 0; $i < length($string); $i++) {\n\
    \        if ($string =~ /\\[\\]/) {\n            return 1;\n        }\n      \
    \  if ($string =~ /\\[/) {\n            push @stack, $string;\n        }\n   \
    \     elsif ($string =~ /\\]/) {\n            pop @stack;\n        }\n    }\n\
    \    if (@stack) {\n        return 1;\n    }\n    else {\n        return \"\"\
    ;\n    }\n}", "    # We'll use a stack here.\n    my @stack = ();\n    # Look\
    \ at every character in the string.\n    foreach my $char (split //, $string)\
    \ {\n        # If it's an opening bracket, we'll push it onto the stack.\n   \
    \     if ($char eq '[') {\n            push @stack, $char;\n        }\n      \
    \  # If it's a closing bracket, we'll check that there is a matching opening\n\
    \        # bracket on the stack. If there is, we'll pop it off and move on to\
    \ the\n        # next character.\n        elsif ($char eq ']') {\n           \
    \ if (scalar @stack == 0) {\n                return \"\";\n            }\n   \
    \         pop @stack;\n        }\n    }\n    # If there are brackets left on the\
    \ stack, it's invalid.\n    if (scalar @stack != 0) {\n        return \"\";\n\
    \    }\n    return 1;\n}", "    my @counter = ();\n    for my $i (0..length($string)-1)\
    \ {\n        if (substr($string, $i, 1) eq '[') {\n            push @counter,\
    \ '[';\n        } elsif (substr($string, $i, 1) eq ']') {\n            if (@counter\
    \ > 0) {\n                pop @counter;\n            } else {\n              \
    \  return \"\";\n            }\n        }\n    }\n    if (@counter == 0) {\n \
    \       return 1;\n    } else {\n        return \"\";\n    }\n}", "    my @stack;\n\
    \    for my $bracket (split //, $string) {\n        if ( $bracket eq \"[\" ) {\n\
    \            push @stack, $bracket;\n        }\n        else {\n            if\
    \ ( $stack[$#stack] eq \"[\" ) {\n                pop @stack;\n            }\n\
    \            else {\n                return \"\";\n            }\n        }\n\
    \    }\n    return 1 if ( not @stack );\n    return \"\";\n}", "    my $c = 0;\n\
    \    for (my $i = 0; $i < length($string); $i++) {\n        if (substr($string,\
    \ $i, 1) eq '[') {\n            $c++;\n        } else {\n            $c--;\n \
    \       }\n        if ($c < 0) {\n            return \"\";\n        }\n    }\n\
    \    if ($c > 0) {\n        return \"\";\n    }\n    return 1;\n}", "    my $re\
    \ = qr/\\A \\[ \\] \\z/x;\n    $string =~ s/\\A\\[\\]//g;\n    return ( $string\
    \ eq '' ) ? 1 : 0;\n}", "    my $score = 0;\n    my $is_nested = 0;\n    foreach\
    \ my $i ( 0 .. length($string) - 1 ) {\n        my $c = substr($string, $i, 1);\n\
    \        if($c eq \"[\") {\n            $score++;\n        } else {\n        \
    \    $score--;\n        }\n        if($score < 0) {\n            $is_nested =\
    \ 1;\n        }\n    }\n    return $is_nested;\n}", "    my @chars = split //,\
    \ $string;\n    my $level = 0;\n    my $total = 0;\n    foreach my $c (@chars)\
    \ {\n        $level = $level - 1 if $c eq ']';\n        $level = $level + 1 if\
    \ $c eq '[';\n        return 1 if $level < 0;\n        $total = $total + 1 if\
    \ $level == 0;\n    }\n    return '';\n}", "    my $count = 0;\n    my $last;\n\
    \    my $result = 0;\n    my $final = 0;\n    my $final_count = 0;\n    for my\
    \ $char (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        if ($char eq ']') {\n            $count--;\n        }\n  \
    \      if ($count < 0) {\n            $result = 1;\n        }\n        if ($count\
    \ == 0) {\n            $result = 0;\n        }\n        if ($final_count == 0)\
    \ {\n            $final = $result;\n        }\n        if ($final != $result)\
    \ {\n            $final_count++;\n        }\n    }\n    if ($final_count > 0)\
    \ {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", " \
    \   my $count = 0;\n    for my $char (split //, $string) {\n        if ($char\
    \ eq '[') {\n            $count++;\n        }\n        elsif ($char eq ']') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ 0;\n        }\n    }\n    return $count == 0;\n}\n1;", "    my $expected = 0;\n\
    \    my $count = 0;\n    my $level = 0;\n    while($count < length($string)) {\n\
    \        if(substr($string, $count, 1) eq \"[\") {\n            $level++;\n  \
    \          $expected += 2 ** $level;\n        } elsif(substr($string, $count,\
    \ 1) eq \"]\") {\n            $level--;\n            $expected -= 2 ** $level;\n\
    \        }\n        $count++;\n    }\n    return ($expected == 0) ? 1 : 0;\n}",
  "    my $substring = substr($string, -1, 1);\n    my $substring_length = length($substring);\n\
    \    if ($substring_length > 1) {\n        return is_nested($substring);\n   \
    \ }\n    else {\n        return $substring;\n    }\n}\nmy $string = \"[[]]\";\n\
    say is_nested($string);", "    my $nested = 0;\n    my $brackets = 0;\n    for\
    \ (split //, $string) {\n        if ($_ eq \"[\") {\n            $brackets++;\n\
    \        }\n        elsif ($_ eq \"]\") {\n            $brackets--;\n        }\n\
    \        if ($brackets < 0) {\n            $nested = 1;\n        }\n    }\n  \
    \  if ($brackets > 0) {\n        $nested = 1;\n    }\n    return $nested;\n}",
  "    my @stack;\n    foreach my $char (split //, $string) {\n        if ($char eq\
    \ '[') {\n            push @stack, $char;\n        } elsif ($char eq ']') {\n\
    \            if (scalar @stack) {\n                pop @stack;\n            }\
    \ else {\n                return '';\n            }\n        }\n    }\n    return\
    \ scalar @stack ? '' : 1;\n}", "    my $left_bracket = 0;\n    my $right_bracket\
    \ = 0;\n    foreach my $char (split //, $string) {\n        if ($char eq '[')\
    \ {\n            $left_bracket++;\n        }\n        if ($char eq ']') {\n  \
    \          $right_bracket++;\n        }\n        if ($right_bracket > $left_bracket)\
    \ {\n            return '';\n        }\n    }\n    if ($left_bracket == $right_bracket\
    \ && $left_bracket > 0) {\n        return 1;\n    }\n    return '';\n}", "   \
    \ my $counter = 0;\n    foreach my $char (split //, $string) {\n        $counter\
    \ += $char eq '[' ? 1 : -1;\n        return \"\" if $counter < 0;\n    }\n   \
    \ return $counter ? \"\" : 1;\n}", "    my @chars = split(//, $string);\n    my\
    \ $level = 0;\n    my $return_val = 0;\n    for my $char (@chars) {\n        if\
    \ ($char eq '[') {\n            $level++;\n        }\n        elsif ($char eq\
    \ ']') {\n            $level--;\n        }\n        if ($level < 0) {\n      \
    \      $return_val = 1;\n            last;\n        }\n    }\n    return $return_val;\n\
    }", "    my $counter = 0;\n    foreach my $char (split(//, $string)) {\n     \
    \   if ($char eq \"[\") {\n            $counter++;\n        }\n        elsif ($char\
    \ eq \"]\") {\n            $counter--;\n        }\n        if ($counter < 0) {\n\
    \            return \"\";\n        }\n    }\n    return $counter ? \"\" : 1;\n\
    }", "    my $result = 0;\n    my $open = 0;\n    my $close = 0;\n    my $flag\
    \ = 0;\n    my $i = 0;\n    while($i < length($string)) {\n        if(substr($string,\
    \ $i, 1) eq '[') {\n            $open++;\n            $flag = 1;\n        }\n\
    \        elsif(substr($string, $i, 1) eq ']') {\n            $close++;\n     \
    \       if($open > $close && $flag == 1) {\n                $result = 1;\n   \
    \         }\n        }\n        $i++;\n    }\n    return $result;\n}", '    return
    unless ($string =~ /^[\[\]]+$/);', "    my @stack;\n    my @char = split('', $string);\n\
    \    for my $i (0..$#char) {\n        if ($char[$i] eq '[') {\n            push\
    \ @stack, $char[$i];\n        } elsif ($char[$i] eq ']') {\n            if ($stack[-1]\
    \ eq '[') {\n                pop @stack;\n            } else {\n             \
    \   push @stack, $char[$i];\n            }\n        }\n    }\n    return 1 if\
    \ scalar @stack == 0;\n    return \"\";\n}", "    my @arr = split(//, $string);\n\
    \    my @valid = split(//, '[]');\n    my $count = 0;\n    for my $char (@arr)\
    \ {\n        if (index($char, @valid) == 0) {\n            $count++;\n       \
    \ }\n        if (index($char, @valid) == 1) {\n            $count--;\n       \
    \ }\n        if ($count < 0) {\n            return '';\n        }\n    }\n   \
    \ if ($count != 0) {\n        return '';\n    }\n    return 1;\n}", "    my @arr\
    \ = split //, $string;\n    my $max = $#arr;\n    my $pos = 0;\n    while($pos\
    \ <= $max) {\n        if($arr[$pos] eq '[' and ($pos + 1) <= $max and $arr[$pos\
    \ + 1] eq ']') {\n            splice @arr, $pos, 2;\n            $max = $#arr;\n\
    \            $pos = 0;\n        } else {\n            $pos++;\n        }\n   \
    \ }\n    if($#arr > -1) {\n        return \"\";\n    } else {\n        return\
    \ 1;\n    }\n}", "    my($count) = 0;\n    for my $i (0..length($string)-1) {\n\
    \        $count += 1 if substr($string, $i, 1) eq '[';\n        $count -= 1 if\
    \ substr($string, $i, 1) eq ']';\n        return 1 if $count < 0;\n    }\n   \
    \ return $count > 0 ? 1 : \"\";\n}", "    my $count = 0;\n    my $prev_open =\
    \ 0;\n    my $prev_closed = 0;\n    my $is_nested = 0;\n    for my $i (0..length($string)\
    \ - 1) {\n        if (substr($string, $i, 1) eq \"[\") {\n            $count +=\
    \ 1;\n            $prev_open = 1;\n            $prev_closed = 0;\n        } elsif\
    \ (substr($string, $i, 1) eq \"]\") {\n            $count -= 1;\n            $prev_open\
    \ = 0;\n            $prev_closed = 1;\n        }\n        if ($count == 0 && $prev_open\
    \ == 1 && $prev_closed == 1) {\n            $is_nested = 1;\n        }\n    }\n\
    \    return $is_nested;\n}", "    if ($string =~ /\\[\\]/) {\n        return 1;\n\
    \    } else {\n        return 0;\n    }\n}", "    my $stack = [];\n    for my\
    \ $c (split //, $string) {\n        if ($c eq '[') {\n            push $stack,\
    \ $c;\n        }\n        else {\n            if (@$stack) {\n               \
    \ pop $stack;\n            }\n            else {\n                return '';\n\
    \            }\n        }\n    }\n    return @$stack ? '' : 1;\n}", "    my $count\
    \ = 0;\n    my $max = 0;\n    my $len = length($string);\n    my $status = \"\"\
    ;\n    my $is_nested = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        my\
    \ $char = substr($string, $i, 1);\n        if ($char eq '[') {\n            $count++;\n\
    \            if ($max < $count) {\n                $max = $count;\n          \
    \  }\n        } elsif ($char eq ']') {\n            $count--;\n        }\n   \
    \     if ($count < 0) {\n            $status = 'invalid';\n            last;\n\
    \        }\n    }\n    if ($status eq 'invalid') {\n        return \"\";\n   \
    \ }\n    if ($count != 0) {\n        return \"\";\n    }\n    if ($max == 1) {\n\
    \        return 1;\n    }\n    if ($max % 2 == 0) {\n        $is_nested = 1;\n\
    \    }\n    return $is_nested;\n}", "    my $result = 1;\n    my $stack = [];\n\
    \    for (my $i = 0; $i < length($string); $i++) {\n        my $char = substr($string,\
    \ $i, 1);\n        if ($char eq '[') {\n            push($stack, $char);\n   \
    \     } else {\n            if (scalar(@$stack) == 0) {\n                $result\
    \ = 0;\n                last;\n            } else {\n                pop($stack);\n\
    \            }\n        }\n    }\n    if (scalar(@$stack) != 0) {\n        $result\
    \ = 0;\n    }\n    return $result;\n}\n1;", "    return '' unless $string =~ /^(\\\
    [\\]|\\[\\[\\])*$/;", "    my $count = 0;\n    my $flag = 1;\n    my $i = 0;\n\
    \    while($i < length($string)) {\n        if(substr($string, $i, 1) eq \"[\"\
    ) {\n            $count++;\n        } else {\n            $count--;\n        }\n\
    \        if($count == 0 && $i != length($string) - 1) {\n            $flag = 0;\n\
    \        }\n        $i++;\n    }\n    if($count != 0) {\n        $flag = 0;\n\
    \    }\n    return $flag;\n}", "    return 0 if $string eq '';\n    my @stack\
    \ = ();\n    foreach my $ch (split //, $string) {\n        if ($ch eq '[') {\n\
    \            push @stack, $ch;\n        } elsif ($ch eq ']') {\n            my\
    \ $ch2 = pop @stack;\n            if (!defined $ch2 || $ch2 ne '[') {\n      \
    \          return 0;\n            }\n        } else {\n            die \"Input\
    \ string must contain only square brackets\";\n        }\n    }\n    return scalar\
    \ @stack == 0;\n}", "    my @arr = split('', $string);\n    my $cnt = 0;\n   \
    \ my $is_nested = 0;\n    my $len = @arr;\n    foreach(@arr) {\n        $cnt ++\
    \ if ($_ eq '[');\n        $cnt -- if ($_ eq ']');\n        if ($cnt < 0) {\n\
    \            return '';\n        } elsif ($cnt > 0) {\n            $is_nested\
    \ = 1;\n        }\n    }\n    return '' if ($cnt != 0);\n    return $is_nested;\n\
    }", "    my $count = 0;\n    my $last_count = 0;\n    my $result = \"\";\n   \
    \ for my $char (split //, $string) {\n        if ($char eq \"[\") {\n        \
    \    $count++;\n        }\n        elsif ($char eq \"]\") {\n            $count--;\n\
    \        }\n        if ($count == 0 && $last_count < 0) {\n            $result\
    \ = 1;\n        }\n        $last_count = $count;\n    }\n    return $result;\n\
    }", "    my $counter = 0;\n    foreach my $char (split(//, $string)) {\n     \
    \   if ($char eq '[') {\n            $counter++;\n        }\n        elsif ($char\
    \ eq ']') {\n            $counter--;\n        }\n        if ($counter < 0) {\n\
    \            return '';\n        }\n    }\n    return ($counter == 0) ? 1 : '';\n\
    }", "    my $i = 0;\n    my $j = 0;\n    while ($i < length($string)) {\n    \
    \    if (substr($string, $i, 1) eq \"[\") {\n            $j++;\n        } elsif\
    \ (substr($string, $i, 1) eq \"]\") {\n            $j--;\n        }\n        $i++;\n\
    \    }\n    if ($j > 0) {\n        return 1;\n    } else {\n        return \"\"\
    ;\n    }\n}", "    my @chars = split //, $string;\n    my $is_open = 0;\n    my\
    \ $open_count = 0;\n    my $close_count = 0;\n    foreach my $c (@chars) {\n \
    \       if ($c eq '[') {\n            $is_open = 1;\n            $open_count++;\n\
    \        }\n        elsif ($c eq ']') {\n            $close_count++;\n       \
    \ }\n    }\n    if ($is_open && $open_count == $close_count) {\n        return\
    \ 1;\n    }\n    return 0;\n}", "    my @stack;\n    for my $c (split '', $string)\
    \ {\n        if($c eq '[') {\n            push @stack, $c;\n        } elsif($c\
    \ eq ']') {\n            if(@stack and $stack[-1] eq '[') {\n                pop\
    \ @stack;\n            } else {\n                push @stack, $c;\n          \
    \  }\n        }\n    }\n    return join '', @stack;\n}", "    my @chars = split\
    \ //, $string;\n    my $count = 0;\n    foreach my $c (@chars) {\n        if ($c\
    \ eq '[') {\n            $count++;\n        }\n        if ($c eq ']') {\n    \
    \        $count--;\n        }\n        if ($count < 0) {\n            return \"\
    \";\n        }\n    }\n    if ($count > 0) {\n        return \"\";\n    }\n  \
    \  return 1;\n}", "    my $valid = 0;\n    my $i = 0;\n    my $nest = 0;\n   \
    \ my $len = length($string);\n    while ($i < $len) {\n        if ($string[$i]\
    \ eq '[') {\n            $nest++;\n        } elsif ($string[$i] eq ']') {\n  \
    \          $nest--;\n        }\n        if ($nest < 0) {\n            $valid =\
    \ 1;\n            $nest = 0;\n        }\n        $i++;\n    }\n    return $valid;\n\
    }", "    # check to see if it is a valid sequence of brackets\n    if (has_valid_brackets($string))\
    \ {\n        my @arr = split(//, $string);\n        my $nested = 0;\n        my\
    \ $i = 0;\n        # go through array of chars\n        while($i < @arr) {\n \
    \           # start with a bracket\n            if ($arr[$i] eq '[') {\n     \
    \           # look for the next unclosed bracket\n                my $j = $i +\
    \ 1;\n                while($j < @arr) {\n                    if ($arr[$j] eq\
    \ '[') {\n                        $nested = 1;\n                        last;\n\
    \                    }\n                    if ($arr[$j] eq ']') {\n         \
    \               last;\n                    }\n                    $j++;\n    \
    \            }\n            }\n            $i++;\n        }\n        if ($nested)\
    \ {\n            return 1;\n        }\n    }\n    return \"\";\n}", "    my $count\
    \ = 0;\n    my $is_valid = 0;\n    my $current_char;\n    my $stack = Deque->new();\n\
    \    for (my $i = 0; $i < length($string); $i++) {\n        $current_char = substr($string,\
    \ $i, 1);\n        if ($current_char eq \"[\") {\n            $stack->push_front($current_char);\n\
    \        } else {\n            if ($stack->is_empty()) {\n                return\
    \ \"\";\n            } else {\n                $stack->pop_front();\n        \
    \    }\n        }\n    }\n    if ($stack->size() == 0) {\n        return 1;\n\
    \    } else {\n        return \"\";\n    }\n}", '    my $m = 0;', "    my @chars\
    \ = split(\"\", $string);\n    my $counter = 0;\n    for my $char (@chars) {\n\
    \        if ($char eq \"[\") {\n            $counter++;\n        } elsif ($char\
    \ eq \"]\") {\n            $counter--;\n        }\n        if ($counter < 0) {\n\
    \            return \"\";\n        }\n    }\n    if ($counter == 0) {\n      \
    \  return \"1\";\n    } else {\n        return \"\";\n    }\n}", "    my $count_left\
    \ = 0;\n    my $count_right = 0;\n    my $left_index;\n    my $right_index;\n\
    \    for(my $i = 0; $i < length($string); $i++) {\n        if(substr($string,\
    \ $i, 1) eq \"[\") {\n            $count_left++;\n            $left_index = $i;\n\
    \        } elsif(substr($string, $i, 1) eq \"]\") {\n            $count_right++;\n\
    \            $right_index = $i;\n        }\n    }\n    # There are an equal number\
    \ of left and right brackets\n    if($count_left == $count_right) {\n        return\
    \ \"\";\n    }\n    # There are more left brackets than right brackets\n    elsif($count_left\
    \ > $count_right) {\n        my $l = $left_index;\n        while($l <= length($string)\
    \ && substr($string, $l, 1) ne \"]\") {\n            $l++;\n        }\n      \
    \  if($l <= length($string)) {\n            my $l_str = substr($string, 0, $l+1);\n\
    \            my $r_str = substr($string, $l+1);\n            if(is_nested($l_str)\
    \ ne \"\" || is_nested($r_str) ne \"\") {\n                return 1;\n       \
    \     }\n        }\n    }\n    # There are more right brackets than left brackets\n\
    \    elsif($count_right > $count_left) {\n        my $r = $right_index;\n    \
    \    while($r >= 0 && substr($string, $r, 1) ne \"[\") {\n            $r--;\n\
    \        }\n        if($r >= 0) {\n            my $l_str = substr($string, 0,\
    \ $r);\n            my $r_str = substr($string, $r);\n            if(is_nested($l_str)\
    \ ne \"\" || is_nested($r_str) ne \"\") {\n                return 1;\n       \
    \     }\n        }\n    }\n    return \"\";\n}", "    my $state = 0;\n    my $depth\
    \ = 0;\n    my $length = length($string);\n    for(my $i = 0; $i < $length; $i++)\
    \ {\n        if(substr($string, $i, 1) eq '[') {\n            $depth++;\n    \
    \    }\n        else {\n            $depth--;\n        }\n        if($depth >\
    \ 1) {\n            $state = 1;\n        }\n    }\n    return $state;\n}", " \
    \   my @subseqs = get_subseqs($string);\n    foreach my $subseq (@subseqs) {\n\
    \        return 1 if is_valid($subseq);\n    }\n    return '';\n}", "    my $opening_bracket\
    \ = 0;\n    my $closing_bracket = 0;\n    my $nested_bracket = 0;\n    # Write\
    \ code here\n    # Check input string\n    if ($string !~ /^\\[\\]*$/) {\n   \
    \ \treturn 0;\n    }\n    else {\n    \t# Count the number of opening bracket\n\
    \    \twhile ($string =~ /\\[/g) {\n    \t\t$opening_bracket++;\n    \t}\n   \
    \ \t# Count the number of closing bracket\n    \twhile ($string =~ /\\]/g) {\n\
    \    \t\t$closing_bracket++;\n    \t}\n    \t# Check if have nested bracket\n\
    \    \twhile ($string =~ /\\[\\]/g) {\n    \t\t$nested_bracket++;\n    \t}\n \
    \   \tif ($opening_bracket == $closing_bracket && $nested_bracket > 0) {\n   \
    \ \t\treturn 1;\n    \t}\n    \telse {\n    \t\treturn 0;\n    \t}\n    }\n}",
  "    my @l = split //, $string;\n    my @h = ();\n    foreach my $char (@l) {\n\
    \        my $t = pop @h;\n        if(defined $t) {\n            if($t eq '[' &&\
    \ $char eq ']') {\n                next;\n            } else {\n             \
    \   return '';\n            }\n        } else {\n            push @h, $char;\n\
    \        }\n    }\n    return 1 if scalar @h == 0;\n    return '';\n}", "    my\
    \ @stack;\n    my $res;\n    for my $b (split(\"\", $string)) {\n        if($b\
    \ eq \"[\") {\n            push @stack, $b;\n        } elsif($b eq \"]\") {\n\
    \            if(scalar @stack > 0) {\n                $res = 1;\n            \
    \    pop @stack;\n            } else {\n                $res = 0;\n          \
    \      last;\n            }\n        }\n    }\n    return $res;\n}", "    # Type\
    \ your code here\n    my @stack;\n    my @chars = split(\"\", $string);\n    for\
    \ my $c (@chars) {\n        if ($c eq '[') {\n            push @stack, $c;\n \
    \       } elsif ($c eq ']') {\n            if (@stack && $stack[-1] eq '[') {\n\
    \                pop @stack;\n            } else {\n                push @stack,\
    \ $c;\n            }\n        }\n    }\n    return 1 if scalar @stack == 0;\n\
    \    return \"\";\n}", "    $string =~ s/\\[\\]//g;\n    if($string) {\n     \
    \   return '';\n    }\n    return 1;\n}", "    return(\n        0,\n        1\n\
    \    )[(() = $string =~ /([\\[\\]]+)/g) > 1];\n}", "    my @arr = split('', $string);\n\
    \    my $count = 0;\n    for (my $i = 0; $i < scalar @arr; $i++) {\n        if\
    \ ($arr[$i] eq \"[\") {\n            $count++;\n        } elsif ($arr[$i] eq \"\
    ]\") {\n            $count--;\n        }\n        return \"\" if $count < 0;\n\
    \    }\n    return $count == 0 ? 1 : \"\";\n}", "    my($s);\n    my($n);\n  \
    \  for ($s = \"\", $n = 0, split(\"\", $string)) {\n        $s .= $_;\n      \
    \  $n++ if ($_ eq '[');\n        $n-- if ($_ eq ']');\n        last if ($n ==\
    \ 0);\n    }\n    return ($n == 0) ? substr($s, 1, length($s) - 2) : \"\";\n}",
  "    return 0 if (length($string) % 2 != 0);\n    my $match = 0;\n    my @stack\
    \ = ();\n    for my $char (split(//, $string)) {\n        if ($char eq '[') {\n\
    \            push(@stack, $char);\n        } else {\n            if ($#stack ==\
    \ -1) {\n                return 0;\n            }\n            pop(@stack);\n\
    \            if ($#stack != -1) {\n                $match = 1;\n            }\n\
    \        }\n    }\n    return $match;\n}", "    my $result = 0;\n    if ($string\
    \ =~ m/\\[(?!\\])/) {\n        $result = 1;\n    }\n    return $result;\n}", " \
    \   my $l_count = 0;\n    my $r_count = 0;\n    my $num_nested = 0;\n    my $prev_is_l\
    \ = 0;\n    my $prev_is_r = 0;\n    foreach my $char (split //, $string) {\n \
    \       if ($char eq \"[\") {\n            $l_count++;\n            if ($prev_is_l\
    \ == 1) {\n                $num_nested++;\n            }\n            $prev_is_l\
    \ = 1;\n            $prev_is_r = 0;\n        }\n        elsif ($char eq \"]\"\
    ) {\n            $r_count++;\n            if ($prev_is_r == 1) {\n           \
    \     $num_nested++;\n            }\n            $prev_is_l = 0;\n           \
    \ $prev_is_r = 1;\n        }\n    }\n    if ($l_count != $r_count) {\n       \
    \ return \"\";\n    }\n    if ($num_nested > 0) {\n        return 1;\n    }\n\
    \    else {\n        return \"\";\n    }\n}", "    my @brackets = split //, $string;\n\
    \    my $level = 0;\n    foreach (@brackets) {\n        $level++ if $_ eq '[';\n\
    \        $level-- if $_ eq ']';\n        return 1 if $level < 0;\n    }\n    return\
    \ '';\n}", "    my @arr = split('', $string);\n    my $flag = 0;\n    my $open\
    \ = 0;\n    my $close = 0;\n    foreach my $elem (@arr) {\n        if ($elem eq\
    \ '[') {\n            $open++;\n        } elsif ($elem eq ']') {\n           \
    \ $close++;\n        }\n        if ($open > 0 && $close > 0) {\n            $flag\
    \ = 1;\n        }\n    }\n    return $flag;\n}", "    return $string =~ /\\[.*\\\
    ]/ ? 1 : '';\n}", "    my $is_nested = 0;\n    my $count = 0;\n    my @chars =\
    \ split(\"\", $string);\n    for my $char (@chars) {\n        if ($char eq \"\
    [\") {\n            $count++;\n        } elsif ($char eq \"]\") {\n          \
    \  $count--;\n        }\n        if ($count < 0) {\n            $is_nested = 1;\n\
    \            last;\n        }\n    }\n    return $is_nested;\n}", "    $string\
    \ =~ s/\\[\\]//g;\n    $string eq '' ? 1 : '';\n}", "    my $count = 0;\n    my\
    \ $open = 0;\n    my $closed = 0;\n    my $success = 0;\n    my $fail = 0;\n \
    \   foreach(split(//, $string)) {\n        $count++;\n        if ($_ eq \"[\"\
    ) {\n            $open++;\n        } elsif ($_ eq \"]\") {\n            $closed++;\n\
    \        }\n        if ($closed > $open) {\n            $fail = 1;\n         \
    \   last;\n        }\n        if ($closed > 0 and $open > 0) {\n            $success\
    \ = 1;\n        }\n    }\n    if ($fail == 1) {\n        return \"\";\n    }\n\
    \    if ($open != $closed) {\n        return \"\";\n    }\n    if ($success ==\
    \ 1) {\n        return 1;\n    }\n    return \"\";\n}", "    my $stack = new Stack;\n\
    \    for (my $i = 0; $i < length($string); $i++) {\n        if (substr($string,\
    \ $i, 1) eq '[') {\n            $stack->push(1);\n        } else {\n         \
    \   if ($stack->pop) {\n                next;\n            } else {\n        \
    \        return 1;\n            }\n        }\n    }\n    return \"\" if ($stack->size);\n\
    \    return 1;\n}", "    my $flag = 0;\n    my $n_flag = 0;\n    my $depth = 0;\n\
    \    for (my $i = 0; $i < length($string); $i++) {\n        my $c = substr($string,\
    \ $i, 1);\n        $depth += 1 if ($c eq '[');\n        $depth -= 1 if ($c eq\
    \ ']');\n        $flag = 1 if ($depth == 0 && $n_flag == 1);\n        $n_flag\
    \ = 1 if ($depth == 1);\n    }\n    $flag;\n}", "    my($pos, $stack, $pass);\n\
    \    for ($pos = 0; $pos < length($string); $pos++) {\n        if ( substr($string,\
    \ $pos, 1) eq '[' ) {\n            $stack++;\n        } else {\n            if\
    \ ($stack) {\n                $stack--;\n                $pass = 1;\n        \
    \    } else {\n                return \"\";\n            }\n        }\n    }\n\
    \    return $pass;\n}", "    # (1) check if $string is a valid string of brackets\n\
    \    # (2) check if $string has nested brackets", "    # Your code here\n}", " \
    \   my $stack = new Stack;\n    my @array = split //, $string;\n    my $bracket;\n\
    \    while (my $char = shift @array) {\n        if ($char eq \"[\") {\n      \
    \      $stack->push($char);\n        } elsif ($char eq \"]\") {\n            $bracket\
    \ = $stack->pop;\n            if ($bracket eq \"[\") {\n                return\
    \ 1;\n            }\n        }\n    }\n    return \"\";\n}\nprint \"is_nested(\\\
    \"[[]]\\\") => \", is_nested(\"[[]]\"), \"\\n\";\nprint \"is_nested(\\\"[]]]]]]][[[[[]\\\
    \") => \", is_nested(\"[]]]]]]][[[[[]\"), \"\\n\";\nprint \"is_nested(\\\"[][]\\\
    \") => \", is_nested(\"[][]\"), \"\\n\";\nprint \"is_nested(\\\"[]\\\") => \"\
    , is_nested(\"[]\"), \"\\n\";\nprint \"is_nested(\\\"[[][]]\\\") => \", is_nested(\"\
    [[][]]\"), \"\\n\";\nprint \"is_nested(\\\"[[]][[\\\") => \", is_nested(\"[[]][[\"\
    ), \"\\n\";\nprint \"\\n\";", "    my $nest = 0;\n    foreach my $char (split('',\
    \ $string)) {\n        if ($char eq '[') {\n            $nest++;\n        }\n\
    \        if ($char eq ']') {\n            $nest--;\n        }\n        if ($nest\
    \ < 0) {\n            return 0;\n        }\n    }\n    return 0 if $nest;\n  \
    \  return 1;\n}", "    my $valid = 1;\n    my $stack = Stack->new();\n    my $l\
    \ = length($string);\n    my $i = 0;\n    my $s = 0;\n    my $j = 0;\n    my $c\
    \ = 0;\n    for ($i = 0; $i < $l; $i++){\n        if (substr($string, $i, 1) eq\
    \ \"[\"){\n            $stack->push(1);\n        } else {\n            if (!$stack->is_empty()){\n\
    \                $stack->pop();\n            } else {\n                $valid\
    \ = 0;\n                last;\n            }\n        }\n    }\n    if ($stack->is_empty()){\n\
    \        return $valid;\n    } else {\n        return \"\";\n    }\n}", "    my\
    \ @s = split //, $string;\n    my $count = 0;\n    for my $char (@s) {\n     \
    \   if ($char eq \"[\") {\n            $count++;\n        } elsif ($char eq \"\
    ]\") {\n            $count--;\n        }\n        if ($count < 0) {\n        \
    \    return \"\";\n        }\n    }\n    return $count ? \"\" : 1;\n}", "    my\
    \ @stack;\n    for my $char (split //, $string) {\n        if ($char eq '[') {\n\
    \            push @stack, $char;\n        } elsif ($char eq ']') {\n         \
    \   if (@stack) {\n                my $prev = pop @stack;\n                if\
    \ ($prev ne '[') {\n                    return \"\";\n                }\n    \
    \        } else {\n                return \"\";\n            }\n        }\n  \
    \  }\n    return @stack ? \"\" : 1;\n}", "    my @chars = split(\"\", $string);\n\
    \    my $count = 0;\n    foreach my $char (@chars) {\n        if($char eq \"[\"\
    ) {\n            $count += 1;\n        }\n        if($char eq \"]\") {\n     \
    \       $count -= 1;\n        }\n        if($count < 0) {\n            return\
    \ \"\";\n        }\n    }\n    if($count == 0) {\n        return 1;\n    }\n \
    \   return \"\";\n}", "    my @letters = split(//, $string);\n    my $lefts =\
    \ 0;\n    my $rights = 0;\n    my $exists = 0;\n    foreach my $letter (@letters)\
    \ {\n        if($letter eq \"[\") {\n            $lefts += 1;\n        }\n   \
    \     elsif($letter eq \"]\") {\n            $rights += 1;\n        }\n      \
    \  if($lefts >= $rights) {\n            $exists = 1;\n        }\n    }\n    return\
    \ $exists;\n}", "    my @chars = split //, $string;\n    my $count = 0;\n    my\
    \ $result = 0;\n    foreach my $char (@chars) {\n        if ($char eq \"[\") {\n\
    \            $count++;\n        }\n        elsif ($char eq \"]\") {\n        \
    \    $count--;\n        }\n        if ($count < 0) {\n            return 0;\n\
    \        }\n        elsif ($count == 0) {\n            $result = 1;\n        }\n\
    \    }\n    return $result;\n}", "    my $max_length = 0;\n    my $open_brackets\
    \ = 0;\n    my $max_open_brackets = 0;\n    for my $character (split(//, $string))\
    \ {\n        if ($character eq '[') {\n            $open_brackets++;\n       \
    \     $max_open_brackets = $open_brackets if $open_brackets > $max_open_brackets;\n\
    \        }\n        elsif ($character eq ']') {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets == 0) {\n            $max_length = $max_open_brackets\
    \ if $max_open_brackets > $max_length;\n            $max_open_brackets = 0;\n\
    \        }\n    }\n    return ($max_length > 0) ? $max_length : \"\";\n}", " \
    \   my $result = 0;\n    my $open_brackets = 0;\n    my $close_brackets = 0;\n\
    \    foreach my $char (split('', $string)) {\n        if ($char eq '[') {\n  \
    \          $open_brackets++;\n        }\n        if ($char eq ']') {\n       \
    \     $close_brackets++;\n        }\n        if ($open_brackets < $close_brackets)\
    \ {\n            return $result;\n        }\n    }\n    if ($open_brackets > $close_brackets)\
    \ {\n        return $result;\n    }\n    return 1;\n}", "    # the stack is to\
    \ be used to track nested brackets\n    my @stack = (0);\n    # itr through the\
    \ entire string\n    for (my $i = 0; $i < length($string); $i++) {\n        #\
    \ if a open bracket is seen, then push it to the stack\n        if (substr($string,\
    \ $i, 1) eq \"[\") {\n            push(@stack, 1);\n        }\n        # if a\
    \ close bracket is seen, then pop it from the stack\n        if (substr($string,\
    \ $i, 1) eq \"]\") {\n            pop(@stack);\n        }\n    }\n    # if the\
    \ stack is empty, then there is a nested bracket (return 1)\n    if (@stack ==\
    \ 0) {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n}",
  "    my @stack;\n    for my $c (split //, $string) {\n        if($c eq '[') {\n\
    \            push @stack, $c;\n        }\n        elsif ($c eq ']') {\n      \
    \      if(@stack == 0 || pop(@stack) ne '[') {\n                return 0;\n  \
    \          }\n        }\n    }\n    return 0 if @stack;\n    return 1;\n}", " \
    \   my $depth = 0;\n    for my $c (split //, $string) {\n        if ($c eq \"\
    [\") {\n            $depth++;\n        } elsif ($c eq \"]\") {\n            if\
    \ ($depth) {\n                $depth--;\n            } else {\n              \
    \  return;\n            }\n        }\n    }\n    return 1 if $depth;\n}", "  \
    \  my @arr = split('', $string);\n    my $n = scalar @arr;\n    my $is_nested\
    \ = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        if ( $arr[$i] eq '[' ) {\n\
    \            if ( $i < $n - 1 ) {\n                if ( $arr[$i+1] eq '[' ) {\n\
    \                    $is_nested = 1;\n                    last;\n            \
    \    }\n            }\n        }\n    }\n    return $is_nested;\n}", "    my $val\
    \ = 0;\n    my $count = 0;\n    foreach(split('', $string)) {\n\tif ($_ eq \"\
    [\") {\n\t    $count++;\n\t} elsif ($_ eq \"]\") {\n\t    $count--;\n\t}\n\tif\
    \ ($count < 0) {\n\t    $val = 1;\n\t}\n    }\n    return $val;\n}", "    my @stack;\n\
    \    my @str = split(\"\", $string);\n    for my $i (0..$#str) {\n        if ($str[$i]\
    \ eq \"[\") {\n            push @stack, $str[$i];\n        } elsif ($str[$i] eq\
    \ \"]\") {\n            if (@stack) {\n                pop @stack;\n         \
    \   } else {\n                return \"\";\n            }\n        }\n    }\n\
    \    if (@stack) {\n        return \"\";\n    } else {\n        return 1;\n  \
    \  }\n}", "    my @chars = split(//, $string);\n    my $result = 1;\n    my $count\
    \ = 0;\n    my $is_nested = 0;\n    foreach my $char (@chars) {\n        if($char\
    \ eq '[') {\n            $count++;\n        } elsif($char eq ']') {\n        \
    \    $count--;\n        } else {\n            $result = 0;\n            last;\n\
    \        }\n        if($count < 0) {\n            $result = 0;\n            last;\n\
    \        }\n        if($count > 1) {\n            $is_nested = 1;\n        }\n\
    \    }\n    if($count != 0) {\n        $result = 0;\n    }\n    if($result ==\
    \ 1 && $is_nested == 0) {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    if ($string =~ /\\[\\]/) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my $l = 0;\n    my $r = 0;\n    for (my $i = 0; $i < length($string);\
    \ $i++) {\n        my $c = substr($string, $i, 1);\n        if ($c eq '[') {\n\
    \            $l++;\n        }\n        elsif ($c eq ']') {\n            $r++;\n\
    \        }\n        if ($r > $l) {\n            return '';\n        }\n    }\n\
    \    return ($l != $r) ? '' : 1;\n}", "    my @stack;\n    my $count = 0;\n  \
    \  foreach my $char (split //, $string) {\n        if($char eq \"[\") {\n    \
    \        push @stack, $char;\n        } elsif($char eq \"]\") {\n            my\
    \ $p = pop @stack;\n            if(defined $p) {\n                $count++;\n\
    \            }\n        }\n    }\n    if($count > 0) {\n        return \"1\";\n\
    \    } else {\n        return \"\";\n    }\n}", "    while ($string =~ s/\\[\\\
    ](?!\\])//g){ }\n    return $string eq \"\";\n}", "    my($counter) = 0;\n   \
    \ my($result) = \"\";\n    my($c);\n    for $c (split //, $string) {\n       \
    \ if ($c eq '[') {\n            ++$counter;\n        } elsif ($c eq ']') {\n \
    \           --$counter;\n        }\n        if ($counter < 0) {\n            $result\
    \ = 1;\n            last;\n        }\n    }\n    return $result;\n}", "    my\
    \ @stack;\n    foreach my $i (0..length($string)-1) {\n        if ( $string =~\
    \ /\\[/ ) {\n            push(@stack, $i);\n        }\n        elsif ( $string\
    \ =~ /\\]/ ) {\n            if ( @stack ) {\n                pop(@stack);\n  \
    \          }\n            else {\n                return \"\";\n            }\n\
    \        }\n    }\n    if ( @stack ) {\n        return \"\";\n    }\n    else\
    \ {\n        return 1;\n    }\n}", "    my @opening_brackets = (\"[\", \"{\",\
    \ \"(\");\n    my @closing_brackets = (\"]\", \"}\", \")\");\n    my %brackets\
    \ = ();\n    for (my $i = 0; $i < scalar(@opening_brackets); $i++) {\n       \
    \ $brackets{$opening_brackets[$i]} = $closing_brackets[$i];\n    }\n    my @stack\
    \ = ();\n    my @string = split(//, $string);\n    my $i = 0;\n    while ($i <\
    \ scalar(@string)) {\n        if (grep(/^$string[$i]$/, @opening_brackets)) {\n\
    \            push(@stack, $string[$i]);\n        }\n        if (grep(/^$string[$i]$/,\
    \ @closing_brackets)) {\n            if ($brackets{$stack[-1]} eq $string[$i])\
    \ {\n                pop(@stack);\n            }\n            else {\n       \
    \         return 0;\n            }\n        }\n        $i++;\n    }\n    if (scalar(@stack)\
    \ != 0) {\n        return 0;\n    }\n    return 1;\n}", "    my $stack = Array::Stack->new();\n\
    \    my $res = '';\n    my $open = 1;\n    my $close = 0;\n    my $last_open =\
    \ 0;\n    foreach my $char (split('', $string)) {\n        if ($char eq '[') {\n\
    \            $stack->push($open);\n            $last_open = $open;\n         \
    \   $open += 1;\n        } elsif ($char eq ']') {\n            if ($stack->pop()\
    \ == $last_open) {\n                $res = 1;\n            }\n            $close\
    \ += 1;\n        }\n    }\n    if (defined $res && $res == 1) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my @square_brackets = ($string =~ /\\\
    [|\\]/g);\n    my $score = 0;\n    my $nested = 0;\n    for(my $i = 0; $i < scalar\
    \ @square_brackets; $i++) {\n        if($square_brackets[$i] eq \"[\") {\n   \
    \         $score++;\n        }\n        else {\n            $score--;\n      \
    \  }\n        if($score < 0) {\n            $nested = 1;\n        }\n    }\n \
    \   return $nested;\n}", "    my $result = 1;\n    my $length = length($string);\n\
    \    for(my $i = 0; $i < $length; $i++) {\n        if($string =~ m/\\[/) {\n \
    \           if($string =~ m/\\]/) {\n                $string =~ s/\\[//;\n   \
    \             $string =~ s/\\]//;\n            } else {\n                $result\
    \ = 0;\n                last;\n            }\n        } else {\n            $result\
    \ = 0;\n            last;\n        }\n    }\n    if($string =~ m/\\[/ || $string\
    \ =~ m/\\]/) {\n        $result = 0;\n    }\n    if($result == 1) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}\n1;", "    my $open = my $close\
    \ = 0;\n    my $result = 0;\n    my @tokens = split //, $string;\n    while (my\
    \ $token = shift @tokens) {\n        if ($token eq '[') {\n            $open++;\n\
    \        } elsif ($token eq ']') {\n            $close++;\n        }\n       \
    \ if ($open > 0 && $close > 0) {\n            $result = 1;\n            last;\n\
    \        }\n    }\n    return $result;\n}", "    if ($string =~ /(\\[\\]|\\[\\\
    [|\\]\\])/) {\n        return 1;\n    }\n    return \"\";\n}", "    # Enter your\
    \ code here.\n    #my $string = '[][]';\n    my @list = split(//, $string);\n\
    \    #print Dumper @list;\n    #print scalar @list;\n    my $total_brackets =\
    \ scalar @list;\n    if ($total_brackets % 2 == 0) {\n        my $count = 0;\n\
    \        foreach my $char (@list) {\n            if ($char eq '[') {\n       \
    \         $count++;\n            }\n            elsif ($char eq ']') {\n     \
    \           $count--;\n            }\n            if ($count == -1) {\n      \
    \          return 1;\n            }\n        }\n        return \"\";\n    }\n\
    \    else {\n        return \"\";\n    }\n}", "    my($stack) = [];\n    for my\
    \ $char (split(//, $string)) {\n        if ($char eq '[') {\n            push\
    \ @$stack, $char;\n        } elsif ($char eq ']') {\n            if ($stack->[-1]\
    \ eq '[') {\n                pop @$stack;\n            } else {\n            \
    \    push @$stack, $char;\n            }\n        }\n    }\n    return (grep {$_\
    \ eq '['} @$stack) ? 1 : '';\n}", "    my @stack;\n    foreach my $char (split(//,\
    \ $string)) {\n        if($char eq '[') {\n            push(@stack, $char);\n\
    \        }\n        else {\n            if(scalar(@stack) > 0) {\n           \
    \     pop(@stack);\n            }\n            else {\n                push(@stack,\
    \ $char);\n            }\n        }\n    }\n    return (scalar(@stack) == 0) ?\
    \ 1 : \"\";\n}", "    return ($string =~ /\\[[^\\]]*\\]/)\n}", "    my @stack;\n\
    \    my $count = 0;\n    my $prev_char = \"\";\n    while (my $char = chop $string)\
    \ {\n        if ($char eq \"[\") {\n            if ($prev_char eq \"]\") {\n \
    \               $count += 1;\n            }\n            push @stack, $char;\n\
    \        } else {\n            if (@stack) {\n                pop @stack;\n  \
    \          } else {\n                $count += 1;\n            }\n        }\n\
    \        $prev_char = $char;\n    }\n    if ($count == 0) {\n        return 1;\n\
    \    } else {\n        return \"\";\n    }\n}", "    my $count = 0;\n    my $len\
    \ = length($string);\n    for (my $i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ eq '[') {\n            $count++;\n        } elsif ($string[$i] eq ']') {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ \"\";\n        }\n    }\n    if ($count == 0) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    # your code here...\n}", "    my $count\
    \ = 0;\n    for my $letter (split //, $string) {\n        if ($letter eq '[')\
    \ {\n            $count++;\n        } elsif ($letter eq ']') {\n            $count--;\n\
    \        }\n        return 0 if $count < 0;\n    }\n    return $count == 0;\n}",
  "    my $num_open_square_brackets = 0;\n    my $num_close_square_brackets = 0;\n\
    \    my $num_nested_square_brackets = 0;\n    my $string_len = length($string);\n\
    \    for (my $i = 0; $i < $string_len; $i++) {\n        my $char = substr($string,\
    \ $i, 1);\n        if ($char eq '[') {\n            $num_open_square_brackets++;\n\
    \        } elsif ($char eq ']') {\n            $num_close_square_brackets++;\n\
    \        }\n        if ($num_open_square_brackets > 0 and $num_close_square_brackets\
    \ > 0) {\n            if ($num_open_square_brackets > $num_close_square_brackets)\
    \ {\n                $num_nested_square_brackets++;\n            }\n        }\n\
    \    }\n    if ($num_nested_square_brackets > 0) {\n        return 1;\n    } else\
    \ {\n        return '';\n    }\n}", "    my $length = length($string);\n    if($length\
    \ < 2) {\n        return \"\";\n    }\n    my @string_array = split //, $string;\n\
    \    my $counter = 0;\n    my $max_counter = 0;\n    for(my $i = 0; $i < $length;\
    \ $i++) {\n        if($string_array[$i] eq '[') {\n            $counter++;\n \
    \       } else {\n            $counter--;\n        }\n        if($counter > $max_counter)\
    \ {\n            $max_counter = $counter;\n        }\n    }\n    if($max_counter\
    \ > 1) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", " \
    \   my @brackets = split(//, $string);\n    my $counter = 0;\n    my $i = 0;\n\
    \    while($i < @brackets) {\n        if($brackets[$i] eq '[') {\n           \
    \ $counter += 1;\n        } elsif($brackets[$i] eq ']') {\n            $counter\
    \ -= 1;\n        }\n        if($counter < 0) {\n            return \"\";\n   \
    \     }\n        $i += 1;\n    }\n    if($counter != 0) {\n        return \"\"\
    ;\n    }\n    return 1;\n}", "    my $cnt = 0;\n    for (split //, $string) {\n\
    \        if($_ eq '[') {\n            $cnt++;\n        }\n        elsif($_ eq\
    \ ']') {\n            $cnt--;\n        }\n        if($cnt == -1) {\n         \
    \   return '';\n        }\n    }\n    return 1 if $cnt;\n    return '';\n}", " \
    \   my $nest = 0;\n    my $str = $string;\n    if( $str =~ /\\]/){\n        while(\
    \ $str =~ /\\]/){\n            $str =~ s/\\[[^\\[\\]]*\\]//;\n            $nest++;\n\
    \        }\n    }\n    if ($nest > 0) {\n        return 1;\n    }\n    else {\n\
    \        return;\n    }\n}", "    my $num_open = 0;\n    my $num_close = 0;\n\
    \    for my $c (split //, $string) {\n        if ($c eq \"[\") {\n           \
    \ ++$num_open;\n        } elsif ($c eq \"]\") {\n            ++$num_close;\n \
    \       }\n        if ($num_close > $num_open) {\n            return \"\";\n \
    \       }\n    }\n    if ($num_open == $num_close && $num_open > 0) {\n      \
    \  return 1;\n    }\n    return \"\";\n}", "    my $open_count = 0;\n    my $closed_count\
    \ = 0;\n    my $output = \"\";\n    foreach my $letter (split(//, $string)) {\n\
    \        if ($letter eq \"[\") {\n            $open_count++;\n        } elsif\
    \ ($letter eq \"]\") {\n            $closed_count++;\n        }\n        if ($closed_count\
    \ > $open_count) {\n            return $output;\n        }\n    }\n    if ($open_count\
    \ == $closed_count && $open_count > 0) {\n        $output = 1;\n    }\n    return\
    \ $output;\n}", "    my @stack;\n    my @chars = split //, $string;\n    my $nest\
    \ = 0;\n    my $not_nest = 0;\n    my $nested = 0;\n    foreach my $char (@chars)\
    \ {\n        if ($char eq \"[\") {\n            push @stack, $char;\n        \
    \    if (@stack == 1) {\n                $nest = 1;\n            }\n        }\n\
    \        if ($char eq \"]\") {\n            if ($nest) {\n                if (@stack\
    \ == 1) {\n                    $nested = 1;\n                }\n             \
    \   pop @stack;\n            }\n            else {\n                $not_nest\
    \ = 1;\n            }\n        }\n    }\n    if ($nested || $not_nest) {\n   \
    \     return \"\";\n    }\n    else {\n        return 1;\n    }\n}", "    my $brack_count\
    \ = 0;\n    for my $i (0..length($string)-1) {\n        if(substr($string, $i,\
    \ 1) eq \"[\") {\n            $brack_count++;\n        }\n        if(substr($string,\
    \ $i, 1) eq \"]\") {\n            $brack_count--;\n        }\n        if($brack_count\
    \ < 0) {\n            return \"\";\n        }\n    }\n    if($brack_count == 0)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my @stack;\n    for\
    \ my $char (split(//, $string)) {\n        if ($char eq '[') {\n            push\
    \ @stack, $char;\n        } elsif ($char eq ']') {\n            # can't pop from\
    \ empty stack\n            return \"\" if @stack < 1;\n            pop @stack;\n\
    \        }\n    }\n    return @stack > 0 ? \"\" : 1;\n}", "    my $flag = 0;\n\
    \    my $prev = \"\";\n    my $curr = \"\";\n    my $i = 0;\n    while($i < length($string))\
    \ {\n        $curr = substr($string, $i, 1);\n        if($curr eq \"[\") {\n \
    \           if($prev eq \"[\") {\n                $flag = 1;\n            }\n\
    \        }\n        $prev = $curr;\n        $i++;\n    }\n    if($flag) {\n  \
    \      return 1;\n    }\n    return \"\";\n}", "    my @stack;\n    foreach my\
    \ $element (split(//, $string)) {\n        if (is_bracket($element)) {\n     \
    \       if ($element eq \"[\") {\n                push(@stack, \"]\");\n     \
    \       } else {\n                if (pop(@stack) ne \"]\") {\n              \
    \      return \"\";\n                }\n            }\n        }\n    }\n    return\
    \ $#stack == -1 ? 1 : \"\";\n}", "    my @arr = split('', $string);\n    my $last_bracket;\n\
    \    my $count_open = 0;\n    my $count_close = 0;\n    foreach my $bracket (@arr)\
    \ {\n        if ($bracket eq '[') {\n            $count_open++;\n        }\n \
    \       if ($bracket eq ']') {\n            $count_close++;\n        }\n     \
    \   if (($count_open > 0) && ($count_close > 0)) {\n            if (($bracket\
    \ eq ']') && ($last_bracket eq '[')) {\n                return 1;\n          \
    \  }\n        }\n        $last_bracket = $bracket;\n    }\n    return \"\";\n}",
  "    my $str = $string;\n    $str =~ s/\\[\\]//g;\n    while($str =~ /\\[\\]/g){\n\
    \        $str =~ s/\\[\\]//g;\n    }\n    return $str eq '' ? 1 : '';\n}", " \
    \   my @stack;\n    my @chars = split //, $string;\n    foreach my $char (@chars)\
    \ {\n        if ($char eq '[') {\n            push @stack, $char;\n        }\n\
    \        elsif (scalar @stack && $char eq ']') {\n            pop @stack;\n  \
    \      }\n        else {\n            return \"\";\n        }\n    }\n    return\
    \ (scalar @stack ? \"\" : 1);\n}", "    my $count_start_bracket = 0;\n    my $count_end_bracket\
    \ = 0;\n    for my $i (0..length($string) - 1) {\n        my $char = substr($string,\
    \ $i, 1);\n        if ($char eq '[') {\n            $count_start_bracket++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count_end_bracket++;\n\
    \        }\n        if ($count_end_bracket > $count_start_bracket) {\n       \
    \     return 0;\n        }\n    }\n    return ($count_start_bracket == $count_end_bracket);\n\
    }\n1;", "    my $string_2 = $string;\n    my $valid_subsequence = 0;\n    my $found_valid_subsequence\
    \ = 0;\n    my $ch_found;\n    my $i;\n    my $max_len;\n    my $len;\n    my\
    \ $ind;\n    my $ch;\n    my $counter;\n    my $pos_2;\n    my $found_nested;\n\
    \    my $add_str;\n    my $add_str_2;\n    my $current_string;\n    my $current_string_2;\n\
    \    my $str_len;\n    my $str_len_2;\n    my $ind_2;\n    my $ch_2;\n    my $len_2;\n\
    \    my $i_2;\n    my $ch_found_2;\n    my $pos_found_2;\n    my $valid_subsequence_2;\n\
    \    my $ch_3;\n    my $i_3;\n    my $j;\n    my $ch_found_3;\n    my $pos_found_3;\n\
    \    my $pos_3;\n    my $counter_3;\n    my $counter_2;\n    my $found_valid_subsequence_2;\n\
    \    my $ind_3;\n    my $max_len_2;\n    my $add_str_3;\n    my $add_str_4;\n\
    \    my $found_nested_2;\n    my $current_string_3;\n    my $current_string_4;\n\
    \    my $str_len_3;\n    my $str_len_4;\n    my $ind_4;\n    my $ind_5;\n    my\
    \ $ch_4;\n    my $ch_5;\n    my $len_3;\n    my $len_4;\n    my $i_4;\n    my\
    \ $i_5;\n    my $max_len_3;\n    my $max_len_4;\n    my $pos_found_4;\n    my\
    \ $pos_found_5;\n    my $ch_found_4;\n    my $ch_found_5;\n    my $pos", "   \
    \ my $counter = 0;\n    for (my $i = 0; $i < length($string); $i++) {\n      \
    \  my $sub = substr($string, $i, 1);\n        if ($sub eq '[') {\n           \
    \ $counter++;\n        } elsif ($sub eq ']') {\n            $counter--;\n    \
    \    }\n        if ($counter < 0) {\n            return \"\";\n        }\n   \
    \ }\n    if ($counter > 0) {\n        return \"\";\n    }\n    return 1;\n}",
  "    my @stack;\n    my @arr = split //, $string;\n    my @open_brackets = grep\
    \ { $_ eq '[' } @arr;\n    my @close_brackets = grep { $_ eq ']' } @arr;\n   \
    \ return if $#open_brackets != $#close_brackets;\n    for (@arr) {\n        if\
    \ ($_ eq '[') {\n            push @stack, $_;\n        } elsif ($_ eq ']') {\n\
    \            return unless @stack;\n            my $last = pop @stack;\n     \
    \       return if $last ne '[';\n        }\n    }\n    return if @stack;\n   \
    \ return 1;\n}", "    my $depth = 0;\n    foreach my $char (split //, $string)\
    \ {\n        if ($char eq \"[\") {\n            $depth++;\n        }\n       \
    \ elsif ($char eq \"]\") {\n            $depth--;\n        }\n        if ($depth\
    \ < 0) {\n            return 0;\n        }\n    }\n    return 1;\n}", "    my\
    \ @stack;\n    foreach my $char (split //, $string) {\n        if ($char eq '[')\
    \ {\n            push @stack, $char;\n        } elsif ($char eq ']') {\n     \
    \       if (@stack) {\n                my $top = pop @stack;\n               \
    \ if ($top ne '[') {\n                    push @stack, $top;\n               \
    \     push @stack, $char;\n                }\n            } else {\n         \
    \       push @stack, $char;\n            }\n        }\n    }\n    return @stack\
    \ ? \"\" : 1;\n}", "    my $nest = 0;\n    for my $char (split('', $string)) {\n\
    \        if($char eq '[') {\n            $nest++;\n        } else {\n        \
    \    $nest--;\n        }\n        if($nest < 0) {\n            return \"\";\n\
    \        }\n    }\n    return $nest ? \"\" : 1;\n}", "    my @brackets = split(\"\
    \", $string);\n    my $nested = 0;\n    my $found = 0;\n    foreach my $bracket\
    \ (@brackets) {\n        if ($bracket eq '[') {\n            $nested = 1;\n  \
    \      } elsif ($bracket eq ']') {\n            $found = 1;\n        }\n    }\n\
    \    return $nested && $found;\n}", "    my $nesting = 0;\n    foreach my $char\
    \ (split(\"\", $string)) {\n        if($char eq '[') {\n            $nesting++;\n\
    \        } elsif($char eq ']') {\n            $nesting--;\n        }\n       \
    \ if($nesting < 0) {\n            return 0;\n        }\n    }\n    return 1;\n\
    }", "    my $count = 0;\n    my $nested = 0;\n    foreach my $c (split //, $string)\
    \ {\n        if ($c eq '[') {\n            $count++;\n        } elsif ($c eq ']')\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ $nested = 1;\n        }\n    }\n    if ($count == 0 && $nested == 1) {\n   \
    \     return 1;\n    } else {\n        return \"\";\n    }\n}", "    return 1\
    \ if $string =~ /\\[\\]/;\n    return;\n}", "    my $result = \"\";\n    for (my\
    \ $i = 0; $i < length($string); $i++) {\n        my $char = substr($string, $i,\
    \ 1);\n        if ($char eq '[') {\n            $result .= $char;\n        } elsif\
    \ ($char eq ']') {\n            my $last_result = chop($result);\n           \
    \ if ($last_result ne '[') {\n                return \"\";\n            }\n  \
    \      }\n    }\n    if ($result eq \"\") {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    my $nest_count = 0;\n    my $not_nest_count\
    \ = 0;\n    my $valid_count = 0;\n    my $all_count = 0;\n    while($string =~\
    \ /\\[/g){\n        $nest_count += 1;\n        $all_count += 1;\n    }\n    while($string\
    \ =~ /\\]/g){\n        $not_nest_count += 1;\n        $all_count += 1;\n    }\n\
    \    if($nest_count != $not_nest_count){\n        return \"\"\n    }\n    while($nest_count\
    \ != 0){\n        while($string =~ /\\[\\]/g){\n            $valid_count += 1;\n\
    \        }\n        $nest_count -= 1;\n    }\n    if($all_count == $valid_count){\n\
    \        return \"\"\n    }else{\n        return 1\n    }\n}", "    my @brackets\
    \ = split(//, $string);\n    my $count = 0;\n    foreach (@brackets) {\n     \
    \   if ($_ eq '[') {\n            $count++;\n        }\n        elsif ($_ eq ']')\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return 0;\n        }\n    }\n    return $count;\n}", "    my $status = 0;\n\
    \    my $open_bracket_count = 0;\n    my $current_level = 0;\n    for my $char\
    \ (split(//, $string)) {\n        if($char eq \"[\") {\n            $open_bracket_count++;\n\
    \            $current_level++;\n        } elsif($char eq \"]\") {\n          \
    \  if($current_level > 0) {\n                $status = 1;\n            }\n   \
    \         $current_level--;\n        }\n    }\n    if($open_bracket_count == 0)\
    \ {\n        return $status;\n    } else {\n        return \"\";\n    }\n}", " \
    \   my @characters = split(//, $string);\n    my $bracket_counter = 0;\n    my\
    \ $previous_bracket = ']';\n    foreach my $character (@characters) {\n      \
    \  if ($character eq '[') {\n            $bracket_counter++;\n        } elsif\
    \ ($character eq ']') {\n            if ($previous_bracket eq '[') {\n       \
    \         $bracket_counter--;\n            }\n        }\n        $previous_bracket\
    \ = $character;\n    }\n    return ($bracket_counter > 0) ? 1 : '';\n}", "   \
    \ my @brackets = split(//, $string);\n    my $nested = 0;\n    my $open = 0;\n\
    \    foreach my $bracket (@brackets) {\n        if ($bracket eq \"[\") {\n   \
    \         $open++;\n        } elsif ($bracket eq \"]\") {\n            if ($open\
    \ > 0) {\n                $nested = 1;\n            }\n            $open--;\n\
    \        }\n    }\n    return $nested;\n}", "    #$string =~ s/\\[{2,}/\\[/g;\n\
    \    #$string =~ s/\\]{2,}/\\]/g;\n    my $n = length($string);\n    my $i = 0;\n\
    \    my $prev = -1;\n    while ($i < $n) {\n        my $c = substr($string, $i,\
    \ 1);\n        if ($c eq \"[\") {\n            $prev = $i;\n        } elsif ($c\
    \ eq \"]\") {\n            if ($prev == -1) {\n                return \"\";\n\
    \            }\n            $prev = -1;\n        }\n        $i++;\n    }\n   \
    \ if ($prev != -1) {\n        return \"\";\n    }\n    return 1;\n}", "    my\
    \ @stack;\n    foreach my $char (split //, $string) {\n        if ($char eq '[')\
    \ {\n            push @stack, $char;\n        }\n        elsif ($char eq ']')\
    \ {\n            if (@stack) {\n                pop @stack;\n            }\n \
    \           else {\n                push @stack, $char;\n            }\n     \
    \   }\n    }\n    if (@stack) {\n        return \"\";\n    }\n    else {\n   \
    \     return 1;\n    }\n}", "    my @chars = split('', $string);\n    my $count\
    \ = 0;\n    for my $i (0..$#chars) {\n        if ($chars[$i] eq '[') {\n     \
    \       $count++;\n        } elsif ($chars[$i] eq ']') {\n            if ($count\
    \ <= 0) {\n                return '';\n            }\n            $count--;\n\
    \        }\n    }\n    if ($count > 0) {\n        return '';\n    }\n    return\
    \ '1';\n}", "    my $return = \"\";\n    my $open = 0;\n    my $nested = 0;\n\
    \    my @chars = split \"\", $string;\n    for my $c (@chars) {\n        if ($c\
    \ eq '[') {\n            $open++;\n        }\n        elsif ($c eq ']') {\n  \
    \          if ($open > 0) {\n                $open--;\n                $nested\
    \ = 1;\n            }\n            else {\n                return $return;\n \
    \           }\n        }\n    }\n    return $nested;\n}", "    my $count = 0;\n\
    \    for (my $i = 0; $i < length($string); $i++) {\n        if (substr($string,\
    \ $i, 1) eq \"[\") {\n            $count++;\n        }\n        elsif (substr($string,\
    \ $i, 1) eq \"]\") {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            return \"\";\n        }\n    }\n    if ($count == 0) {\n    \
    \    return 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my @result;\n\
    \    my $result;\n    while ($string =~ /\\[([\\[\\]]*)\\]/g) {\n        push\
    \ @result, $1;\n    }\n    if (grep /\\[/, @result) {\n        print \"1\\n\"\
    ;\n    } else {\n        print \"\\\"\\\"\\n\";\n    }\n}", "    return 1 if $string\
    \ =~ /\\[\\]/g;\n    return \"\";\n}", "    my @stack;\n    my @input = split(//,\
    \ $string);\n    my $output = \"\";\n    my $token;\n    for $token (@input) {\n\
    \        if($token eq '[') {\n            push(@stack, $token);\n        }\n \
    \       if($token eq ']') {\n            if(scalar(@stack) == 0) {\n         \
    \       $output = \"\";\n                last;\n            } else {\n       \
    \         pop(@stack);\n                $output = 1;\n            }\n        }\n\
    \    }\n    if(scalar(@stack) == 0 && $output == 1) {\n        return $output;\n\
    \    } else {\n        return \"\";\n    }\n}", "    return 1 if(length($string)\
    \ == 0);\n    return 1 if(substr($string,0,1) eq '[' and substr($string,-1,1)\
    \ eq ']');\n    return 1 if(substr($string,0,1) eq '[' and substr($string,-1,1)\
    \ eq '[');\n    return 1 if(substr($string,0,1) eq ']' and substr($string,-1,1)\
    \ eq ']');\n    return 1 if(substr($string,0,1) eq ']' and substr($string,-1,1)\
    \ eq '[');\n    return 1 if(substr($string,0,1) eq '[' and substr($string,-1,1)\
    \ eq ']');\n    return 0;\n}", "    my $count = 0;\n    my $flag = 0;\n    for(my\
    \ $i = 0; $i < length($string); $i++) {\n        if(substr($string, $i, 1) eq\
    \ '[') {\n            $count++;\n        }\n        elsif(substr($string, $i,\
    \ 1) eq ']') {\n            $count--;\n        }\n        if($count < 0) {\n \
    \           $flag = 1;\n            last;\n        }\n    }\n    if($count ==\
    \ 0 && $flag == 0) {\n        return 1;\n    }\n    else {\n        return \"\"\
    ;\n    }\n}", "    my $nested = 0;\n    for my $i (0..length($string)-1) {\n \
    \       my $char = substr($string, $i, 1);\n        if ($char eq '[') {\n    \
    \        $nested++;\n        } elsif ($char eq ']') {\n            $nested--;\n\
    \        }\n        if ($nested < 0) {\n            return 0;\n        }\n   \
    \ }\n    return 1;\n}", "    my $count = 0;\n    my $ans = 0;\n    foreach my\
    \ $char (split(\"\", $string)) {\n        if ($char eq \"[\") {\n            $count++;\n\
    \        }\n        elsif ($char eq \"]\") {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            $ans = 1;\n        }\n    }\n    if ($count\
    \ > 0) {\n        $ans = 1;\n    }\n    return $ans;\n}", "    my $level = 0;\n\
    \    foreach my $letter (split //, $string) {\n        if ($letter eq '[') {\n\
    \            $level++;\n        }\n        elsif ($letter eq ']') {\n        \
    \    $level--;\n        }\n        if ($level < 0) {\n            return 0;\n\
    \        }\n    }\n    return 1;\n}", "    my @array = split(/\\W+/, $string);\n\
    \    my $count = 1;\n    for my $i (0..$#array) {\n        if ($array[$i] eq \"\
    [\") {\n            if ($array[$i+1] eq \"[\") {\n                $count++;\n\
    \            }\n        }\n    }\n    return ($count > 1 ? 1 : \"\");\n}", " \
    \   my @stack;\n    for (split //, $string) {\n        if ($_ eq '[') {\n    \
    \        push @stack, $_;\n        } elsif ($_ eq ']') {\n            unless (pop\
    \ @stack) {\n                return '';\n            }\n        }\n    }\n   \
    \ return 1 if @stack;\n    return '';\n}", "    my($open_bracket) = 0;\n    my($close_bracket)\
    \ = 0;\n    my($nested) = 0;\n    foreach my $char (split //, $string) {\n   \
    \     if ($char eq '[') {\n            $open_bracket++;\n        } elsif ($char\
    \ eq ']') {\n            $close_bracket++;\n        }\n        if ($open_bracket\
    \ < $close_bracket) {\n            $nested = 1;\n        }\n    }\n    return\
    \ $nested;\n}\nprint is_nested(\"[[]]\") . \"\\n\";\nprint is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\nprint is_nested(\"[][]\") . \"\\n\";\nprint is_nested(\"[]\") .\
    \ \"\\n\";\nprint is_nested(\"[[][]]\") . \"\\n\";\nprint is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    my($count) = 0;\n    my($i);\n    for($i = 0; $i < length($string);\
    \ $i++) {\n        if(substr($string, $i, 1) eq '[') {\n            $count++;\n\
    \        }\n        elsif(substr($string, $i, 1) eq ']') {\n            $count--;\n\
    \        }\n        if($count < 0) {\n            return \"\";\n        }\n  \
    \  }\n    if($count == 0) {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    my $count = 0;\n    for my $n ( split //, $string ) {\n\
    \        if ( $n eq '[' ) {\n            $count++;\n        }\n        elsif (\
    \ $n eq ']' ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n\
    \            return '';\n        }\n    }\n    return $count ? '' : 1;\n}", " \
    \   my $is_nested = 0;\n    my $left = 0;\n    my $right = 0;\n    my $length\
    \ = length($string);\n    for (my $i = 0; $i < $length; $i++) {\n        if ($string\
    \ =~ /^\\[/) {\n            $left++;\n        }\n        if ($string =~ /^\\]/)\
    \ {\n            $right++;\n        }\n        $string =~ s/^.//;\n    }\n   \
    \ if ($left != $right) {\n        return \"\";\n    }\n    $string =~ s/\\[//g;\n\
    \    $string =~ s/\\]//g;\n    if ($string ne \"\") {\n        return \"\";\n\
    \    }\n    return 1;\n}", "    my $count = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        } elsif ($char\
    \ eq ']') {\n            $count--;\n        }\n        return \"\" if $count <\
    \ 0;\n    }\n    return \"\" if $count != 0;\n    return 1;\n}", "    my $stack\
    \ = [];\n    my $nested = 0;\n    for my $char (split '', $string) {\n       \
    \ if ($char eq '[') {\n            unshift @$stack, $char;\n        }\n      \
    \  elsif ($char eq ']') {\n            if (scalar @$stack > 0) {\n           \
    \     shift @$stack;\n                $nested = 1;\n            }\n          \
    \  else {\n                $nested = 0;\n            }\n        }\n    }\n   \
    \ if ($nested == 1 && scalar @$stack == 0) {\n        return 1;\n    }\n    else\
    \ {\n        return \"\";\n    }\n}", "    my @stack;\n    my $idx = 0;\n    while\
    \ ($idx < length($string)) {\n        my $c = substr($string, $idx, 1);\n    \
    \    if ($c eq \"[\") {\n            push @stack, $c;\n        } elsif ($c eq\
    \ \"]\") {\n            if (scalar(@stack) == 0) {\n                return \"\"\
    ;\n            }\n            my $top = pop @stack;\n            if ($top ne \"\
    [\") {\n                return \"\";\n            }\n        }\n        $idx++;\n\
    \    }\n    if (scalar(@stack) == 0) {\n        return 1;\n    }\n    return \"\
    \";\n}", "    my @stack;\n    push @stack, $_ for split //, $string;\n    while(@stack){\n\
    \        my @tmp = @stack;\n        if(pop @tmp ne \"]\"){ return \"\" }\n   \
    \     if(pop @tmp ne \"[\"){ return \"\" }\n        @stack = @tmp;\n    }\n  \
    \  return 1;\n}", "    my $open = 0;\n    my $nested = 0;\n    for (my $i = 0;\
    \ $i < length($string); $i++) {\n        if (substr($string, $i, 1) eq '[') {\n\
    \            $open++;\n        } elsif (substr($string, $i, 1) eq ']') {\n   \
    \         if ($open > 0) {\n                $open--;\n            } else {\n \
    \               return '';\n            }\n        }\n        if ($open > $nested)\
    \ {\n            $nested = $open;\n        }\n    }\n    if ($open == 0 && $nested\
    \ > 0) {\n        return 1;\n    } else {\n        return '';\n    }\n}", "  \
    \  my @stack;\n    foreach my $char (split(//, $string)) {\n        if ($char\
    \ eq \"[\") {\n            push(@stack, $char);\n        } elsif ($char eq \"\
    ]\") {\n            if (@stack == 0) {\n                return \"\";\n       \
    \     } else {\n                my $last = pop(@stack);\n                if ($last\
    \ ne \"[\") {\n                    return \"\";\n                }\n         \
    \   }\n        }\n    }\n    if (@stack == 0) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
