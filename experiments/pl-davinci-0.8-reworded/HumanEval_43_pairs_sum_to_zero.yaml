name: HumanEval_43_pairs_sum_to_zero
language: pl
prompt: "# pairs_sum_to_zero takes an array of integers as an input.\n# it returns\
  \ 1 if there are two distinct elements in the array that\n# sum to zero, and  otherwise.\n\
  # >>> pairs_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> pairs_sum_to_zero([1, 3, -2,\
  \ 1])\n# \"\"\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> pairs_sum_to_zero([2,\
  \ 4, -5, 3, 5, 7])\n# 1\n# >>> pairs_sum_to_zero([1])\n# \"\"\nsub pairs_sum_to_zero\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2,\
  \ 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5,\
  \ 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
  \ 9, -1, 3, 2, 30]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
  \ 9, -1, 4, 2, 30]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\")) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $ret = \"\";\n    my $min = $l->[0];\n    my $max = $l->[0];\n\
    \    for(my $i = 0; $i < scalar(@$l); $i++) {\n        $min = $l->[$i] if $l->[$i]\
    \ < $min;\n        $max = $l->[$i] if $l->[$i] > $max;\n    }\n    my $size =\
    \ $max - $min + 1;\n    my @hash = (1..$size);\n    for(my $i = 0; $i < scalar(@$l);\
    \ $i++) {\n        if(0 != $hash[-$l->[$i] - $min]) {\n            $ret = 1;\n\
    \            last;\n        }\n        $hash[$l->[$i] - $min] = 1;\n    }\n  \
    \  return $ret;\n}", "    my $sum = 0;\n    my $sum1 = 0;\n    my $i = 1;\n  \
    \  my $k = 0;\n    foreach my $z (@$l) {\n\t$sum += $z;\n\tif ($z == 0) {\n\t\
    \    if ($i == 1) {\n\t\t$sum1 = $z;\n\t\t$i++;\n\t    }\n\t    else {\n\t\t$k\
    \ = 1;\n\t    }\n\t}\n    }\n    return \"1\" if $sum1 == 0 && $k == 1;\n    return\
    \ \"\" if $sum == 0;\n    return \"\" if $sum1 == 0 && $k == 0;\n    return \"\
    1\";\n}", "    my $i, $j;\n    for ($i = 0; $i < scalar(@$l); $i++) {\n      \
    \  for ($j = $i + 1; $j < scalar(@$l); $j++) {\n            if ($l->[$i] + $l->[$j]\
    \ == 0) {\n                return 1;\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my %h = ();\n    foreach (@$l) {\n        if (exists $h{-$_})\
    \ {\n            return 1;\n        }\n        $h{$_} = 1;\n    }\n    return\
    \ 0;\n}", "    my %seen = ();\n    foreach my $x (@$l) {\n        if (defined($seen{$x}))\
    \ {\n            return \"\"\n        }\n        $seen{-$x} = 1;\n    }\n    return\
    \ 1;\n}", "    my $count = 0;\n    my $i;\n    my $j;\n    for ($i = 0; $i < $#$l;\
    \ $i++) {\n        for ($j = $i + 1; $j <= $#$l; $j++) {\n            if ($l->[$i]\
    \ + $l->[$j] == 0) {\n                $count++;\n            }\n        }\n  \
    \  }\n    return $count;\n}", "    # Store a list of seen values in this hash.\n\
    \    my %seen;\n    # Go through each value.\n    foreach my $v (@$l) {\n    \
    \    # If this value is seen, we have a pair.\n        if ($seen{$v}) {\n    \
    \        return 1;\n        }\n        # If the negative of this value is seen,\
    \ we have a pair.\n        if ($seen{-$v}) {\n            return 1;\n        }\n\
    \        # Remember that we've seen this value.\n        $seen{$v} = 1;\n    }\n\
    \    # If we didn't see a pair, return 0.\n    return 0;\n}", "    my(%h);\n \
    \   foreach $i (@$l) {\n        $h{$i} = 1;\n    }\n    foreach $i (@$l) {\n \
    \       return 1 if (exists($h{-$i}));\n    }\n    return 0;\n}", "    my $result\
    \ = 0;\n    # iterate through the input list, setting each one as the value that\
    \ we\n    # are looking for.\n    for (my $i = 0; $i < $#$l; $i++) {\n       \
    \ # number we are looking for is in $l->[$i]\n        my $num = $l->[$i];\n  \
    \      # iterate through the remaining part of the list, looking for the\n   \
    \     # value that matches.\n        for (my $j = $i + 1; $j <= $#$l; $j++) {\n\
    \            if ($l->[$j] == -$num) {\n                $result = 1;\n        \
    \        last;\n            }\n        }\n    }\n    return $result;\n}", "  \
    \  #@l = ([1, 3, 5, 0])\n    my %h = ();\n    #1->1\n    #3->1\n    #5->1\n  \
    \  #0->1\n    foreach $item (@$l) {\n        #$item = 1\n        #$item = 3\n\
    \        #$item = 5\n        #$item = 0\n        if (exists $h{-$item}) {\n  \
    \          #$h{-$item} = undef\n            #$h{-$item} = undef\n            #$h{-$item}\
    \ = undef\n            #$h{-$item} = undef\n            return 1;\n        }\n\
    \        #$h{-$item} = undef\n        #$h{-$item} = undef\n        #$h{-$item}\
    \ = undef\n        #$h{-$item} = undef\n        else {\n            $h{$item}\
    \ = 1;\n            #$h{$item} = 1\n            #$h{$item} = 1\n            #$h{$item}\
    \ = 1\n            #$h{$item} = 1\n        }\n    }\n    return 0;\n    #return\
    \ 0\n    #return 0\n    #return 0\n    #return 0\n}", "    my $len = scalar(@$l);\n\
    \    if($len < 2) {\n        return \"\";\n    }\n    # let's assume that $l is\
    \ sorted.\n    # then we can check to see if there are pairs that sum to zero.\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    while($i < $j) {\n        my $cur_sum\
    \ = $l->[$i] + $l->[$j];\n        if($cur_sum == 0) {\n            return 1;\n\
    \        }\n        elsif($cur_sum < 0) {\n            # we need to make the sum\
    \ larger\n            $i++;\n        }\n        else {\n            # we need\
    \ to make the sum smaller\n            $j--;\n        }\n    }\n    return \"\"\
    ;\n}", "    $l->@* > 1 or return 0;\n    my $x = 0;\n    my $z = $l->[$x];\n \
    \   my $y = $x + 1;\n    my $w = $l->[$y];\n    my $b = $z + $w;\n    while ($y\
    \ < $l->@*) {\n        if ($b == 0) {\n            return 1;\n        }\n    \
    \    $y++;\n        $w = $l->[$y];\n        $b = $z + $w;\n    }\n    $x++;\n\
    \    $z = $l->[$x];\n    $y = $x + 1;\n    $w = $l->[$y];\n    $b = $z + $w;\n\
    \    while ($y < $l->@*) {\n        if ($b == 0) {\n            return 1;\n  \
    \      }\n        $y++;\n        $w = $l->[$y];\n        $b = $z + $w;\n    }\n\
    \    return 0;\n}", "    my @list = @$l;\n    my $N = scalar(@list);\n    for\
    \ (my $i = 0; $i < $N; $i++) {\n        for (my $j = $i + 1; $j < $N; $j++) {\n\
    \            if ($list[$i] + $list[$j] == 0) {\n                return 1;\n  \
    \          }\n        }\n    }\n    return 0;\n}", "    my(%sums, @sorted, $last);\n\
    \    foreach my $e (@$l) {\n        if (exists $sums{-$e}) {\n            return\
    \ 1;\n        }\n        $sums{$e} = 1;\n    }\n    return 0;\n}", "    # YOUR\
    \ CODE HERE!\n    my %t = ();\n    my $result = \"\";\n    foreach my $item (@$l)\
    \ {\n        $t{$item} = $item;\n    }\n    foreach my $item (@$l) {\n       \
    \ if (exists $t{-1 * $item}) {\n            $result = 1;\n            last;\n\
    \        }\n    }\n    return $result;\n}", "    my(%q);\n    for my $e (@$l)\
    \ {\n        if (defined($q{$e})) {\n            return 1;\n        }\n      \
    \  $q{-$e} = 1;\n    }\n    return \"\";\n}", "    my $n = scalar(@$l);\n    return\
    \ 0 if $n < 2;\n    my $i = 0;\n    while ($i < $n) {\n        my $j = $i + 1;\n\
    \        while ($j < $n) {\n            if ($l->[$i] + $l->[$j] == 0) {\n    \
    \            return 1;\n            }\n            $j++;\n        }\n        $i++;\n\
    \    }\n    return 0;\n}\nprint pairs_sum_to_zero([1, 3, 5, 0])\nprint pairs_sum_to_zero([1,\
    \ 3, -2, 1])\nprint pairs_sum_to_zero([1, 2, 3, 7])\nprint pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])\nprint pairs_sum_to_zero([1])", "    my %hash = ();\n    foreach\
    \ (@$l) {\n        my $temp = -$_;\n        if (exists $hash{$temp}) {\n     \
    \       return 1;\n        }\n        $hash{$_} = 1;\n    }\n    return 0;\n}",
  "    my @l = @$l;\n    # the solution below will not work if there are more than\
    \ one\n    # pair summing to zero. it is left to the student to correct\n    #\
    \ this solution.\n    my %sums;\n    for(my $i = 0; $i < scalar(@l); $i++) {\n\
    \        my $l1 = $l[$i];\n        if(defined($sums{$l1})) {\n            return\
    \ 1;\n        }\n        my $s = -1 * $l1;\n        $sums{$s} = 1;\n    }\n  \
    \  return 0;\n}", "    my(%h);\n    my($x);\n    my($y);\n    foreach $x (@$l)\
    \ {\n        if(exists($h{-$x})) {\n            return 1;\n        }\n       \
    \ $h{$x} = 1;\n    }\n    return \"\";\n}", "    my @l = @$l;\n    my $length\
    \ = scalar @l;\n    for (my $i = 0; $i < $length; $i++) {\n        for (my $j\
    \ = $i + 1; $j < $length; $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n \
    \               return 1;\n            }\n        }\n    }\n    return 0;\n}",
  "    return undef unless defined $l;\n    my $len = scalar @$l;\n    return undef\
    \ unless $len > 0;\n    return undef if $len == 1;\n    my $found = undef;\n \
    \   for(my $i = 0; $i < $len; $i++) {\n        my $e = $l->[$i];\n        for(my\
    \ $j = $i + 1; $j < $len; $j++) {\n            my $f = $l->[$j];\n           \
    \ if ($e + $f == 0) {\n                $found = 1;\n                last;\n  \
    \          }\n        }\n    }\n    return $found;\n}", "    for my $i (0..scalar(@$l)-2)\
    \ {\n        for my $j ($i+1..scalar(@$l)-1) {\n            if (($l->[$i] + $l->[$j])\
    \ == 0) {\n                return 1;\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my $sum = 0;\n    my $sum1 = 0;\n    my $r = 0;\n    my @list =\
    \ ();\n    my $num = 0;\n    my $x = 0;\n    my $y = 0;\n    my $i = 0;\n    my\
    \ $j = 0;\n    @list = @$l;\n    for ($i = 0; $i < scalar(@list); $i++) {\n  \
    \      for ($j = 0; $j < scalar(@list); $j++) {\n            if ($i != $j) {\n\
    \                $sum = $list[$i] + $list[$j];\n                if ($sum == 0)\
    \ {\n                    $r = 1;\n                }\n            }\n        }\n\
    \    }\n    return $r;\n}", "    my %seen;\n    foreach my $e (@$l) {\n      \
    \  return 1 if ($seen{-$e});\n        $seen{$e} = 1;\n    }\n    return 0;\n}",
  "    my @list = sort {$a <=> $b} @$l;\n    my $n = scalar @list;\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    while ($i < $j) {\n        my $v = $list[$i] + $list[$j];\n\
    \        if ($v == 0) {\n            return 1;\n        } elsif ($v < 0) {\n \
    \           $i++;\n        } else {\n            $j--;\n        }\n    }\n   \
    \ return \"\";\n}", "    my @numbers = sort(@$l);\n    my $i = 0;\n    my $j =\
    \ $#numbers;\n    while($i < $j) {\n        my $sum = $numbers[$i] + $numbers[$j];\n\
    \        if($sum == 0) {\n            return 1;\n        } elsif($sum < 0) {\n\
    \            $i++;\n        } else {\n            $j--;\n        }\n    }\n  \
    \  return '';\n}", "    # TODO: implement me\n    my %hash;\n    my @arr = @$l;\n\
    \    foreach my $i (@arr) {\n        if (exists $hash{$i}) {\n            return\
    \ 1;\n        }\n        $hash{-$i} = 1;\n    }\n    return \"\";\n}", "    if\
    \ (scalar(@$l) < 2) {\n        return \"\";\n    }\n    my %hash;\n    foreach\
    \ (@$l) {\n        if (exists $hash{-$_}) {\n            return 1;\n        }\n\
    \        $hash{$_} = 1;\n    }\n    return \"\";\n}", "    my @l = @$l;\n    my\
    \ $i = 0;\n    my %m;\n    while ($i <= $#l) {\n        my $k = $l[$i];\n    \
    \    my $r = -$k;\n        if (exists $m{$r}) {\n            return 1;\n     \
    \   }\n        else {\n            $m{$k} = 1;\n        }\n        $i = $i + 1;\n\
    \    }\n    return \"\";\n}", "    my $i = 0;\n    my $j = scalar(@$l) - 1;\n\
    \    # print(\"i: $i  j: $j\\n\");\n    while($i < $j) {\n        my $p1 = $l->[$i];\n\
    \        my $p2 = $l->[$j];\n        my $sum = $p1 + $p2;\n        # print(\"\
    i: $i  j: $j  p1: $p1  p2: $p2  sum: $sum\\n\");\n        if($sum == 0) {\n  \
    \          return 1;\n        }\n        elsif($sum > 0) {\n            $j--;\n\
    \        }\n        else {\n            $i++;\n        }\n    }\n    return \"\
    \";\n}", "    my $size = scalar(@$l);\n    for (my $i = 0; $i < $size; $i++) {\n\
    \        for (my $j = $i + 1; $j < $size; $j++) {\n            if ($l->[$i] +\
    \ $l->[$j] == 0) {\n                return 1;\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    my @a = @$l;\n    my %h;\n    for(@a) {\n        return\
    \ 1 if exists $h{-$_};\n        $h{$_} = 1;\n    }\n    return '';\n}", "    my\
    \ $e = [];\n    my $n = scalar(@$l);\n    for(my $i = 0; $i < $n; $i++) {\n  \
    \      for(my $j = $i + 1; $j < $n; $j++) {\n            if ($l->[$i] + $l->[$j]\
    \ == 0) {\n                return \"Yes\";\n            }\n        }\n    }\n\
    \    return \"No\";\n}", "    my %hash;\n    for(my $i = 0; $i <= $#$l; $i++)\
    \ {\n        my $num = $l->[$i];\n        if (exists $hash{-$num}) {\n       \
    \     return 1;\n        }\n        $hash{$num} = 1;\n    }\n    return 0;\n}",
  "    foreach $x (@$l) {\n        foreach $y (@$l) {\n            if ($x != $y &&\
    \ $x + $y == 0) {\n                return 1;\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $n = @$l;\n    if ($n < 2) {\n        return 0;\n\
    \    }\n    my @s = sort {$a <=> $b} @$l;\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $s = $s[$i] + $s[$j];\n        if ($s < 0)\
    \ {\n            $i++;\n        } elsif ($s > 0) {\n            $j--;\n      \
    \  } else {\n            return 1;\n        }\n    }\n    return 0;\n}", "   \
    \ my(%hash, $k, $v);\n    for $k (@$l) {\n        if (defined($hash{-$k})) {\n\
    \            return 1;\n        }\n        else {\n            $hash{$k} = 1;\n\
    \        }\n    }\n    return 0;\n}", "    return 0 if @$l < 2;\n    @$l = sort\
    \ {$a <=> $b} @$l;\n    my($min, $max) = ($l->[0], $l->[$#$l]);\n    my($lof,\
    \ $hif) = (0, $#$l);\n    while ($lof <= $hif) {\n        my($sum) = $l->[$lof]\
    \ + $l->[$hif];\n        if ($sum == 0) {\n            return 1;\n        } elsif\
    \ ($sum < 0) {\n            $lof++;\n        } else {\n            $hif--;\n \
    \       }\n    }\n    return 0;\n}", "    my %h;\n    for my $i (@$l) {\n    \
    \    return 1 if $h{-$i};\n        $h{$i} = 1;\n    }\n    return 0;\n}", "  \
    \  my $sum = 0;\n    foreach my $i (0..$#{$l}) {\n\tforeach my $j ($i+1..$#{$l})\
    \ {\n\t    if ($l->[$i] + $l->[$j] == 0) {\n\t\treturn 1;\n\t    }\n\t}\n    }\n\
    \    return 0;\n}", "    my @l = @$l;\n    # write your answer here\n    my $ret\
    \ = 0;\n    for (my $i = 0; $i < scalar(@l); $i++) {\n\tfor (my $j = $i + 1; $j\
    \ < scalar(@l); $j++) {\n\t    if ($l[$i] + $l[$j] == 0) {\n\t\t$ret = 1;\n\t\
    \    }\n\t}\n    }\n    return $ret;\n}", "    my $c = 0;\n    foreach my $i (0..($#$l-1))\
    \ {\n        foreach my $j (($i+1)..$#$l) {\n            if ($l->[$i] + $l->[$j]\
    \ == 0) {\n                $c++;\n            }\n        }\n    }\n    return\
    \ $c;\n}", "    return(0) if(!defined($l) || ref($l) ne \"ARRAY\");\n    my %m\
    \ = ();\n    my $i;\n    for $i (@$l) {\n\tmy $j = $i * -1;\n\treturn(1) if(exists($m{$j}));\n\
    \t$m{$i} = 1;\n    }\n    return(0);\n}", "    my @l = @$l;\n    my %h;\n    my\
    \ $count = 0;\n    foreach my $x (@l) {\n        my $s = -$x;\n        if(exists\
    \ $h{$s}) {\n            return 1;\n        }\n        $h{$x}++;\n    }\n    return\
    \ '';\n}", "    my $s = \"\";\n    my %h = ();\n    for my $i (@$l) {\n      \
    \  if (defined $h{-$i}) {\n            $s = \"1\";\n            last;\n      \
    \  }\n        $h{$i} = 1;\n    }\n    return $s;\n}", "    #print \"pairs_sum_to_zero:\
    \ $l\\n\";\n    my %ls = ();\n    foreach my $i (@$l) {\n        #print \"  i:\
    \ $i, l[i]: \", $ls{$i}, \"\\n\";\n        if (!defined($ls{$i})) {\n        \
    \    $ls{$i} = 1;\n        } else {\n            $ls{$i}++;\n        }\n    }\n\
    \    #print \"  ls: \", Dumper(\\%ls), \"\\n\";\n    foreach my $i (@$l) {\n \
    \       if ($i != 0) {\n            if (defined($ls{0-$i})) {\n              \
    \  return 1;\n            }\n        } else {\n            if ($ls{0} > 1) {\n\
    \                return 1;\n            }\n        }\n    }\n    return 0;\n}",
  "    # @l: array of integers.\n    # Returns 1 if there exists two distinct integers\
    \ in\n    # the array $l that sum to zero.\n    # Returns 0 otherwise.\n    #my\
    \ @l = @{$l};\n    my %hash;\n    my $num;\n    foreach my $num(@$l){\n\t$hash{$num}\
    \ = $num;\n    }\n    foreach my $key(keys %hash){\n\tif (exists $hash{- $key}\
    \ && ($key ne $hash{- $key})){\n\t    return 1;\n\t}\n    }\n    return 0;\n}",
  "    my %h;\n    foreach $i (@$l) {\n        if ($h{-$i}) {\n            return\
    \ 1;\n        }\n        $h{$i} = 1;\n    }\n    return 0;\n}", "    my %indices;\n\
    \    foreach my $i (0..$#$l) {\n        my $val = $l->[$i];\n        $indices{-$val}\
    \ = $i;\n    }\n    foreach my $i (0..$#$l) {\n        my $val = $l->[$i];\n \
    \       if ($indices{$val} != $i) {\n            return 1;\n        }\n    }\n\
    \    return 0;\n}", "    my(%hash, $i, $j);\n    my($z) = 0;\n    foreach $i (@$l)\
    \ {\n        foreach $j (@$l) {\n            if (($i + $j) == 0) {\n         \
    \       $z = 1;\n            }\n        }\n    }\n    return $z;\n}", "    my\
    \ %map;\n    foreach my $n (@$l) {\n        my $p = -1 * $n;\n        return 1\
    \ if exists $map{$p};\n        $map{$n} = 1;\n    }\n    return 0;\n}", "    my\
    \ @a = @$l;\n    for my $i (0..scalar(@a)-1) {\n        for my $j ($i+1..scalar(@a)-1)\
    \ {\n            if ($a[$i] + $a[$j] == 0) {\n                return 1;\n    \
    \        }\n        }\n    }\n    return 0;\n}", "    my $x;\n    my $y;\n   \
    \ my $z;\n    my $i;\n    my $j;\n    my $k;\n    my $success;\n    $success =\
    \ 0;\n    for ($i = 0;$i < scalar(@$l);$i++) {\n        $x = $l->[$i];\n     \
    \   for ($j = $i + 1;$j < scalar(@$l);$j++) {\n            $y = $l->[$j];\n  \
    \          $z = $x + $y;\n            if ($z == 0) {\n                $success\
    \ = 1;\n            }\n        }\n    }\n    return $success;\n}", "    my $rv\
    \ = 0;\n    my @sorted = sort {$a <=> $b} @$l;\n    my ($low, $high) = (0, scalar(@sorted)\
    \ - 1);\n    while ($low < $high) {\n        if ($sorted[$low] + $sorted[$high]\
    \ == 0) {\n            $rv = 1;\n            last;\n        } elsif ($sorted[$low]\
    \ + $sorted[$high] < 0) {\n            $low += 1;\n        } else {\n        \
    \    $high -= 1;\n        }\n    }\n    return $rv;\n}", "    my(%hash);\n   \
    \ foreach my $i (@$l) {\n        $hash{$i} = 1;\n    }\n    foreach my $i (@$l)\
    \ {\n        if ($hash{-$i}) {\n            return 1;\n        }\n    }\n    return\
    \ 0;\n}", "    my @list = @$l;\n    my %seen;\n    my $value;\n    foreach my\
    \ $item (@list) {\n        $value = -$item;\n        if (exists $seen{$value})\
    \ {\n            return 1;\n        }\n        $seen{$item} = 1;\n    }\n    return\
    \ 0;\n}", "    if (scalar(@$l) < 2) {\n        return \"\";\n    } else {\n  \
    \      my %ht = ();\n        for my $i (@$l) {\n            $ht{$i} = $i;\n  \
    \      }\n        for my $i (@$l) {\n            my $j = $i * -1;\n          \
    \  if (exists $ht{$j}) {\n                return 1;\n            }\n        }\n\
    \        return \"\";\n    }\n}", "    my @a = sort {$a <=> $b} @$l;\n    my $i\
    \ = 0;\n    my $j = $#a;\n    my $count = 0;\n    while ($i < $j) {\n        my\
    \ $sum = $a[$i] + $a[$j];\n        if ($sum == 0) {\n            return 1;\n \
    \       }\n        elsif ($sum < 0) {\n            $i++;\n        }\n        else\
    \ {\n            $j--;\n        }\n    }\n    return \"\";\n}", "    my @arr =\
    \ sort {$a <=> $b} @$l;\n    my $start = 0;\n    my $end = $#arr;\n    my $mid\
    \ = 0;\n    my $found = 0;\n    my $start_val = $arr[$start];\n    my $end_val\
    \ = $arr[$end];\n    my $mid_val = 0;\n    while (($end - $start) >= 1) {\n  \
    \      $mid = int(($start + $end) / 2);\n        $mid_val = $arr[$mid];\n    \
    \    if (($mid_val > 0) && ($start_val > 0)) {\n            $start = $mid + 1;\n\
    \            $start_val = $arr[$start];\n        } elsif (($mid_val < 0) && ($end_val\
    \ < 0)) {\n            $end = $mid - 1;\n            $end_val = $arr[$end];\n\
    \        } elsif ($mid_val == 0) {\n            return 1;\n        } elsif ($mid_val\
    \ + $end_val == 0) {\n            return 1;\n        } elsif ($mid_val + $start_val\
    \ == 0) {\n            return 1;\n        } elsif ($mid_val + $end_val < 0) {\n\
    \            $start = $mid + 1;\n            $start_val = $arr[$start];\n    \
    \    } elsif ($mid_val + $start_val > 0) {\n            $end = $mid - 1;\n   \
    \         $end_val = $arr[$end];\n        }\n    }\n    return 0;\n}", "    my\
    \ $n = scalar(@$l);\n    if ($n <= 1) {\n        return \"\";\n    }\n    my %h\
    \ = ();\n    for (my $i = 0; $i < $n; $i++) {\n        my $key = $l->[$i];\n \
    \       if ($h{$key}) {\n            return 1;\n        }\n        $h{-$key} =\
    \ 1;\n    }\n    return \"\";\n}", "    my @arr = @$l;\n    my %arr_hash = ();\n\
    \    my $res = 0;\n    foreach my $el (@arr) {\n        if ($arr_hash{$el}) {\n\
    \            return 0;\n        } else {\n            $arr_hash{-$el} = 1;\n \
    \       }\n    }\n    return 1;\n}\nmy $t1 = time;\nmy $l = [1, 2, 3, 7];\nmy\
    \ $r = pairs_sum_to_zero($l);\nprint $r . \"\\n\";\nmy $t2 = time;\nmy $dt = $t2\
    \ - $t1;\nprint \"Time elapsed: $dt\\n\";", "    my @list = @$l;\n    my %hash;\n\
    \    for (@list) {\n        $hash{$_}++;\n    }\n    for my $i (@list) {\n   \
    \     if ($hash{-$i} > 0) {\n            return 1;\n        }\n    }\n    return\
    \ 0;\n}", "    # your code goes here, replace the next line with your code\n \
    \   return 0;\n}", "    my @a = split(',', $l);\n    my $i = 0;\n    my %h = ();\n\
    \    for ($i = 0; $i < @a; $i++) {\n        $h{$a[$i]}++;\n    }\n    for ($i\
    \ = 0; $i < @a; $i++) {\n        if ($h{-$a[$i]} > 0) {\n            if ($a[$i]\
    \ != 0 || $h{-$a[$i]} > 1) {\n                return 1;\n            }\n     \
    \   }\n    }\n    return 0;\n}", "    my $chunk;\n    my %hash;\n    foreach $chunk\
    \ (@$l) {\n\t\treturn 1 if ($hash{-$chunk});\n\t\t$hash{$chunk} = 1;\n    }\n\
    \    return 0;\n}", "    my $count = 0;\n    for(my $i = 0; $i < scalar(@$l);\
    \ $i++){\n        for(my $j = $i+1; $j < scalar(@$l); $j++){\n            if(($l->[$i]\
    \ + $l->[$j]) == 0){\n                $count++;\n            }\n        }\n  \
    \  }\n    if($count != 0){\n        return 1;\n    }\n    else{\n        return\
    \ \"\";\n    }\n}", "    my @list = @$l;\n    my $num_elements = @list;\n    my\
    \ %counts;\n    my $i;\n    my $num_zeros = 0;\n    for($i = 0; $i < $num_elements;\
    \ $i++) {\n        if($list[$i] == 0) {\n            $num_zeros += 1;\n      \
    \  }\n        else {\n            $counts{$list[$i]} += 1;\n        }\n    }\n\
    \    if($num_zeros >= 2) {\n        return 1;\n    }\n    for($i = 0; $i < $num_elements;\
    \ $i++) {\n        if($list[$i] != 0) {\n            if($counts{-$list[$i]} ==\
    \ 1) {\n                return 1;\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    if (ref($l) ne \"ARRAY\") {\n        die \"pairs_sum_to_zero: argument\
    \ must be an array reference.\\n\";\n    }\n    if (@$l < 2) {\n        return\
    \ \"\";\n    }\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e}++;\n   \
    \ }\n    foreach my $e (@$l) {\n        if ($h{-1 * $e} > 0) {\n            return\
    \ 1;\n        }\n    }\n    return \"\";\n}", "    return 0 if scalar(@$l) <=\
    \ 1;\n    my %pos;\n    my %neg;\n    for my $x (@$l) {\n        if ($x > 0) {\n\
    \            $pos{$x} = 1;\n        } else {\n            $neg{$x} = 1;\n    \
    \    }\n    }\n    for my $x (@$l) {\n        my $y = -$x;\n        if ($x > 0)\
    \ {\n            return 1 if $neg{$y};\n        } else {\n            return 1\
    \ if $pos{$y};\n        }\n    }\n    return 0;\n}", "    # ...\n}", "    my(%exists);\n\
    \    foreach (@$l) {\n        if (defined($exists{-$_})) {\n            return\
    \ 1;\n        }\n        $exists{$_} = 1;\n    }\n    return \"\";\n}", "    my(%h)\
    \ = ();\n    for (@$l) {\n        if (exists $h{-$_}) {\n            return 1;\n\
    \        }\n        $h{$_} = 1;\n    }\n    return 0;\n}", "    my $hash = {};\n\
    \    my $result = \"\";\n    foreach my $i (@$l) {\n        if (exists $hash->{-$i})\
    \ {\n            $result = 1;\n            last;\n        }\n        $hash->{$i}\
    \ = 1;\n    }\n    return $result;\n}", "    my $size = $#$l + 1;\n    if ($size\
    \ < 2) {\n        return 0;\n    }", "    my %h = ();\n    foreach (@$l) {\n \
    \       $h{$_} = 1;\n    }\n    my @ret = ();\n    foreach (@$l) {\n        if(exists\
    \ $h{-$_}) {\n            push @ret, $_;\n        }\n    }\n    return @ret;\n\
    }", "    my @s = sort(@$l);\n    my $i = 0;\n    my $j = scalar(@s) - 1;\n   \
    \ while($i < $j) {\n        my $sum = $s[$i] + $s[$j];\n        if($sum == 0)\
    \ {\n            return 1;\n        }\n        elsif($sum < 0) {\n           \
    \ $i += 1;\n        }\n        else {\n            $j -= 1;\n        }\n    }\n\
    \    return \"\";\n}", "    my $s = 0;\n    my $sz = scalar(@$l);\n    my $i =\
    \ 0;\n    my $j = 0;\n    while($i < $sz) {\n        $j = $i + 1;\n        while($j\
    \ < $sz) {\n            if($l->[$i] + $l->[$j] == 0) {\n                $s = 1;\n\
    \                return $s;\n            }\n            $j++;\n        }\n   \
    \     $i++;\n    }\n    return $s;\n}", "    my $in;\n    my $n = scalar(@$l);\n\
    \    # $in is a hash of values in @$l\n    $in = {};\n    for (my $i = 0; $i <\
    \ $n; $i++) {\n        my $v = $l->[$i];\n        if (exists($in->{$v})) {\n \
    \           $in->{$v}++;\n        } else {\n            $in->{$v} = 1;\n     \
    \   }\n    }\n    # Go through each element of @$l. See if it has an opposite\
    \ (zero-sum\n    # partner) in $in.\n    for (my $i = 0; $i < $n; $i++) {\n  \
    \      my $v = $l->[$i];\n        my $opp = -1 * $v;\n        if (exists($in->{$opp}))\
    \ {\n            if ($opp == $v) {\n                # Both halves of the pair\
    \ are the same, so there must be at\n                # least two instances of\
    \ this value in the input.\n                if ($in->{$opp} >= 2) {\n        \
    \            return 1;\n                }\n            } else {\n            \
    \    # $opp is a distinct value, so there only needs to be one\n             \
    \   # instance of it in the input.\n                return 1;\n            }\n\
    \        }\n    }\n    return \"\";\n}", "    my @a = @$l;\n    for(my $i = 0;\
    \ $i < scalar(@a); $i++) {\n        for(my $j = $i + 1; $j < scalar(@a); $j++)\
    \ {\n            if($a[$i] + $a[$j] == 0) {\n                return 1;\n     \
    \       }\n        }\n    }\n    return \"\";\n}", "    my $i;\n    my $j;\n \
    \   my $pairfound = 0;\n    my $lsize = scalar(@$l);\n    # print @$l[1];\n  \
    \  #print @$l[0];\n    #print \"size \";\n    #print $lsize;\n    #print \"\\\
    n\";\n    #print \"1 \";\n    #print \"0 \";\n    #print \"\\n\";\n    #print\
    \ $l;\n    for ($i = 0; $i < $lsize; $i = $i + 1) {\n        for ($j = $i + 1;\
    \ $j < $lsize; $j = $j + 1) {\n            # print @$l[$i];\n            # print\
    \ @$l[$j];\n            # print \"\\n\";\n            if (@$l[$i] + @$l[$j] ==\
    \ 0) {\n                $pairfound = 1;\n            }\n        }\n    }\n   \
    \ if ($pairfound == 1) {\n        return 1;\n    }\n    else {\n        return\
    \ 0;\n    }\n}", "    # initialize the same-length array\n    my @ret = (0) x\
    \ (1 + @$l);\n    # go through the input array\n    for my $i (0 .. $#$l) {\n\
    \        # skip the 0\n        next if $l->[$i] == 0;\n        # if the opposite\
    \ value exists in the input array, return 1\n        if (exists $ret[$l->[$i]])\
    \ {\n            return 1;\n        }\n        # otherwise, set the value to 1\n\
    \        $ret[-$l->[$i]] = 1;\n    }\n    # return 0 if we couldn't find any pairs\n\
    \    return 0;\n}", "    my $ret = 1;\n    return 0 if scalar(@$l) < 2;\n    my\
    \ $hash_ref = {};\n    for my $v (@$l) {\n        if (exists $hash_ref->{-$v})\
    \ {\n            return $ret;\n        }\n        $hash_ref->{$v} = 1;\n    }\n\
    \    return 0;\n}", "    my %hash = ();\n    foreach my $elem (@$l) {\n      \
    \  if(exists $hash{-$elem}) {\n            return 1;\n        }\n        else\
    \ {\n            $hash{$elem} = 1;\n        }\n    }\n    return 0;\n}", "   \
    \ my(%h);\n    foreach my $i (@$l) {\n        if (not exists $h{$i}) {\n     \
    \       $h{$i} = 1;\n        }\n        else {\n            $h{$i}++;\n      \
    \  }\n    }\n    foreach my $i (@$l) {\n        if ((($i == 0) and ($h{$i} > 1))\
    \ or\n            (($i != 0) and (exists $h{-$i}))) {\n            return 1;\n\
    \        }\n    }\n    return 0;\n}", "    my %negatives;\n    my $h = {};\n \
    \   foreach my $n (@$l) {\n        if ($n >= 0) {\n            $h->{$n}++;\n \
    \       } else {\n            $negatives{$n}++;\n        }\n    }\n    my $found\
    \ = 0;\n    foreach my $n (@$l) {\n        if ($n < 0 && $h->{-$n}) {\n      \
    \      $found = 1;\n            last;\n        }\n    }\n    return $found;\n}",
  "    my @nums = @$l;\n    my %f;\n    for my $n (@nums) {\n        if ($f{$n}) {\n\
    \            return 1;\n        }\n        $f{-$n} = 1;\n    }\n    return 0;\n\
    }", "    my %seen;\n    foreach my $x (@$l) {\n        if (defined $seen{-$x})\
    \ {\n            return 1;\n        }\n        $seen{$x} = 1;\n    }\n    return\
    \ \"\";\n}", "    my $s = 0;\n    foreach my $i (@$l) {\n        foreach my $j\
    \ (@$l) {\n            if ($i != $j) {\n                $s += $i + $j;\n     \
    \       }\n        }\n    }\n    if ($s == 0) {\n        return 1;\n    } else\
    \ {\n        return 0;\n    }\n}", "    for (my $i = 0; $i < scalar(@$l); $i++)\
    \ {\n        for (my $j = $i + 1; $j < scalar(@$l); $j++) {\n            if ($l->[$i]\
    \ + $l->[$j] == 0) {\n                return 1;\n            }\n        }\n  \
    \  }\n    return 0;\n}", "    # TODO\n}", "    my @a = @$l;\n    my $i;\n    my\
    \ $j;\n    my $res = 0;\n    for($i = 0; $i < scalar(@a) - 1; $i++) {\n      \
    \  for($j = $i + 1; $j < scalar(@a); $j++) {\n            if($a[$i] + $a[$j] ==\
    \ 0) {\n                $res = 1;\n            }\n        }\n    }\n    return\
    \ $res;\n}", "    my @list = @$l;\n    return 0;\n}", "    my $ret = 0;\n    my\
    \ %dict;\n    foreach my $i (@$l) {\n        if(defined($dict{-$i})) {\n     \
    \       $ret = 1;\n            last;\n        }\n        $dict{$i} = 1;\n    }\n\
    \    return $ret;\n}", "    my(%seen, $i, $seenZero);\n    for ($i = 0; $i < @$l;\
    \ $i++) {\n        if ($l->[$i] == 0) {\n            $seenZero++;\n        }\n\
    \        else {\n            $seen{-$l->[$i]}++;\n        }\n    }\n    return\
    \ ($seenZero > 1) || (grep { $seen{$_} } keys %seen);\n}", "    # ...\n}", " \
    \   if (@$l <= 1) {\n        return \"\";\n    }\n    my %h;\n    foreach my $item\
    \ (@$l) {\n        if (exists $h{-$item}) {\n            return 1;\n        }\n\
    \        $h{$item} = 1;\n    }\n    return \"\";\n}", "    if (scalar(@$l) < 2)\
    \ {\n        return \"\";\n    }\n    if (scalar(@$l) == 2) {\n        if ($l->[0]\
    \ + $l->[1] == 0) {\n            return 1;\n        } else {\n            return\
    \ \"\";\n        }\n    }\n    my $left = 0;\n    my $right = scalar(@$l) - 1;\n\
    \    while ($left < $right) {\n        if ($l->[$left] + $l->[$right] == 0) {\n\
    \            return 1;\n        } elsif ($l->[$left] + $l->[$right] < 0) {\n \
    \           $left++;\n        } else {\n            $right--;\n        }\n   \
    \ }\n    return \"\";\n}", "    my $s = 0;\n    for (my $i = 0; $i < length($l);\
    \ $i++) {\n        for (my $j = $i+1; $j < length($l); $j++) {\n            if\
    \ ($l[$i] + $l[$j] == 0) {\n                $s = 1;\n            }\n        }\n\
    \    }\n    return $s;\n}", "    my %h;\n    foreach my $e (@$l) {\n        return\
    \ 1 if exists $h{-$e};\n        $h{$e} = 1;\n    }\n    return 0;\n}", "    my\
    \ $flag = 0;\n    for my $i (0..($#{$l} - 1)) {\n        for my $j (($i + 1)..$#{$l})\
    \ {\n            if ($l->[$i] + $l->[$j] == 0) {\n                $flag = 1;\n\
    \                last;\n            }\n        }\n    }\n    return $flag;\n}",
  "    my $ret = 0;\n    for (my $i = 0; $i < @$l; $i++) {\n        for (my $j = $i\
    \ + 1; $j < @$l; $j++) {\n            if ($l->[$i] + $l->[$j] == 0) {\n      \
    \          $ret = 1;\n                last;\n            }\n        }\n    }\n\
    \    return $ret;\n}\nprint pairs_sum_to_zero([1, 3, 5, 0]), \"\\n\";\nprint pairs_sum_to_zero([1,\
    \ 3, -2, 1]), \"\\n\";\nprint pairs_sum_to_zero([1, 2, 3, 7]), \"\\n\";\nprint\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7]), \"\\n\";\nprint pairs_sum_to_zero([1]),\
    \ \"\\n\";\nprint \"\\n\";", "    my(%h);\n    foreach $i (@$l) {\n        if\
    \ (defined($h{-$i})) {\n            return 1;\n        }\n        $h{$i} = 1;\n\
    \    }\n    return \"\";\n}", "    my %sums;\n    for my $i (@$l) {\n        if\
    \ ($sums{$i}) {\n            return 1;\n        }\n        $sums{-$i} = 1;\n \
    \   }\n    return 0;\n}", "    my(%h) = ();\n    my(@a) = @$l;\n    for(my($i)\
    \ = 0; $i < scalar(@a); $i++) {\n        if(exists($h{-$a[$i]})) {\n         \
    \   return 1;\n        }\n        $h{$a[$i]} = 1;\n    }\n    return 0;\n}", " \
    \   my %h = ();\n    for my $x (@$l) {\n        if ($h{-$x}) {\n            return\
    \ 1;\n        }\n        $h{$x} = 1;\n    }\n    return 0;\n}", "    my(%h);\n\
    \    my($x);\n    my($found) = 0;\n    foreach $x (@$l) {\n\t$h{$x} = 1;\n   \
    \ }\n    foreach $x (@$l) {\n\tif ($h{- $x}) {\n\t    $found = 1;\n\t    last;\n\
    \t}\n    }\n    if ($found) {\n\treturn 1;\n    } else {\n\treturn \"\";\n   \
    \ }\n}", "    return \"\";\n}", "    my @list = @$l;\n    my %hash = ();\n   \
    \ foreach my $item (@list) {\n        if ($hash{$item}) {\n            return\
    \ 1;\n        }\n        if ($hash{-1 * $item}) {\n            return 1;\n   \
    \     }\n        $hash{$item} = 1;\n    }\n    return \"\";\n}", "    my(%h);\n\
    \    my($e, $g);\n    foreach $e (@$l) {\n        if(exists($h{-$e})) {\n    \
    \        return 1;\n        }\n        $h{$e} = 1;\n    }\n    return 0;\n}",
  "    my @a = @$l;\n    my %s;\n    my %d;\n    my $found = 0;\n    foreach my $e\
    \ (@a) {\n        $s{$e} = 1;\n        $d{-1 * $e} = 1;\n    }\n    foreach my\
    \ $e (@a) {\n        if (exists $d{$e}) {\n            $found = 1;\n         \
    \   last;\n        }\n    }\n    if ($found) {\n        return \"1\";\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my $result = \"\";\n    my %hash;\n\
    \    foreach my $element (@$l) {\n        $hash{$element}++;\n    }\n    foreach\
    \ my $element (@$l) {\n        my $p = -$element;\n        if ($hash{$p} && $element\
    \ != $p) {\n            $result = 1;\n            last;\n        }\n    }\n  \
    \  return $result;\n}", "    # REPLACE ME\n    return '';\n}", "    return \"\"\
    \ if @$l < 2;\n    my %m;\n    foreach my $v (@$l) {\n        return 1 if exists\
    \ $m{-$v};\n        $m{$v} = 1;\n    }\n    return \"\";\n}", "    my @l = @$l;\n\
    \    if (scalar(@l) == 1) {\n        return \"\";\n    }\n    my $hash_ref = hoh(@l);\n\
    \    for (my $i = 0; $i < scalar(@l); $i++) {\n        my $i_val = $l[$i];\n \
    \       if (exists $hash_ref->{$i_val}) {\n            return $i_val;\n      \
    \  }\n    }\n    return \"\";\n}", "    if (@$l < 2) {\n        return 0;\n  \
    \  }\n    my @s = sort {$a <=> $b} @$l;\n    my $i = 0;\n    my $j = $#s;\n  \
    \  while ($i < $j) {\n        my $sum = $s[$i] + $s[$j];\n        if ($sum < 0)\
    \ {\n            $i += 1;\n        } elsif ($sum > 0) {\n            $j -= 1;\n\
    \        } else {\n            return 1;\n        }\n    }\n    return 0;\n}",
  "    my(%h) = ();\n    for my $e (@$l) {\n        my($neg) = $e<0?-1*$e:$e;\n  \
    \      if (exists $h{$neg}) {\n            return 1;\n        }\n        else\
    \ {\n            $h{$e} = 1;\n        }\n    }\n    return 0;\n}", "    my $result\
    \ = \"\";\n    my $len = length($l);\n    if ($len == 1) {\n        $result =\
    \ 0;\n    } else {\n        my $first = substr($l, 0, 1);\n        my $tail =\
    \ substr($l, 1);\n        if ($first == 0) {\n            $result = 1;\n     \
    \   } else {\n            $result = pairs_sum_to_zero($tail);\n        }\n   \
    \ }\n    return $result;\n}", "    my $i, my $j;\n    my $n = @$l;\n    for($i\
    \ = 0; $i < $n; $i = $i + 1) {\n        for($j = $i + 1; $j < $n; $j = $j + 1)\
    \ {\n            if($l->[$i] + $l->[$j] == 0) {\n                return 1;\n \
    \           }\n        }\n    }\n    return 0;\n}", "    my @l = @$l;\n    my\
    \ %number;\n    my %number2;\n    # TODO\n    foreach my $n (@l) {\n        $number{$n}\
    \ = 1;\n    }\n    foreach my $n (@l) {\n        if(exists $number{-1*$n}) {\n\
    \            if((!exists $number2{$n}) && (!exists $number2{-1*$n})) {\n     \
    \           return 1;\n            }\n        }\n        $number2{$n} = 1;\n \
    \   }\n    return \"\";\n}", "    my(%hash);\n    foreach my $e (@$l) {\n    \
    \    if (defined($hash{-$e})) {\n            return 1;\n        }\n        $hash{$e}\
    \ = 1;\n    }\n    return 0;\n}", "    if(defined($l) && @$l > 1) {\n        if(&find_pair($l,\
    \ 0)) {\n            return 1;\n        }\n    }\n    return \"\";\n}", "    my\
    \ $pairs_sum_to_zero_result = &pairs_sum_to_zero_not_efficient($l);\n    return\
    \ $pairs_sum_to_zero_result;\n}", "    my $r = 0;\n    my $i;\n    my $j;\n  \
    \  my $n = scalar(@$l);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n; $j++) {\n            if ($l->[$i] + $l->[$j] == 0) {\n  \
    \              $r = 1;\n                last;\n            }\n        }\n    }\n\
    \    return $r;\n}", "    if(not(@$l)) { return 0; }\n    my @ls = sort { $a <=>\
    \ $b } @$l;\n    my $x = 0;\n    my $y = $#ls;\n    while($x < $y) {\n       \
    \ my $sum = $ls[$x] + $ls[$y];\n        if($sum == 0) { return 1; }\n        elsif($sum\
    \ < 0) { $x++; }\n        else { $y--; }\n    }\n    return 0;\n}\n1;", "    my(%memo);\n\
    \    foreach my $i ( @$l ) {\n        if ( $memo{$i} ) {\n            return 1;\n\
    \        } else {\n            $memo{-$i} = 1;\n        }\n    }\n    return 0;\n\
    }", "    my %h = ();\n    foreach my $i (@$l) {\n        $h{$i} = 1;\n    }\n\
    \    foreach my $i (@$l) {\n        if (exists $h{-$i}) {\n            return\
    \ 1;\n        }\n    }\n    return 0;\n}", "    foreach my $i (@$l) {\n      \
    \  my $inv = -1 * $i;\n        foreach my $j (@$l) {\n            if ($i != $j\
    \ && $inv == $j) {\n                return 1;\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $i = 0;\n    my $j = 0;\n    for($i = 0; $i < scalar(@$l);\
    \ $i++) {\n        for($j = $i + 1; $j < scalar(@$l); $j++) {\n            if($l->[$i]\
    \ + $l->[$j] == 0) {\n                return 1;\n            }\n        }\n  \
    \  }\n    return 0;\n}", "    my @nonzero;\n    for my $n (@$l) {\n        if($n)\
    \ {\n            push @nonzero, $n;\n        } else {\n            if(@nonzero)\
    \ {\n                return 1;\n            }\n        }\n    }\n    my %is_neg;\n\
    \    for my $n (@nonzero) {\n        if($n < 0) {\n            $is_neg{-$n} =\
    \ 1;\n        } else {\n            if($is_neg{$n}) {\n                return\
    \ 1;\n            }\n        }\n    }\n    return 0;\n}", "    my @a = @$l;\n\
    \    my $i = 0;\n    my %seen;\n    for my $n (@a) {\n        $seen{$n} = 1;\n\
    \    }\n    for my $n (@a) {\n        if ($seen{-1 * $n}) {\n            return\
    \ 1;\n        }\n    }\n    return \"\";\n}", "    return '' if ! defined $l ||\
    \ $#$l < 1;", "    my $ml = -1 * $l;\n    my @ml = map { -1 * $_ } @$l;\n    my\
    \ %a;\n    @a{@$l} = @$l;\n    my @ret;\n    for my $v (@ml) {\n        if (exists\
    \ $a{$v}) {\n            return 1;\n        }\n    }\n    return 0;\n}", "   \
    \ my $res = '';\n    my $len = scalar(@$l);\n    if($len > 1) {\n        my @result;\n\
    \        for (my $i = 0; $i < $len; $i++) {\n            for (my $j = $i + 1;\
    \ $j < $len; $j++) {\n                if ($l->[$i] + $l->[$j] == 0) {\n      \
    \              $res = '1';\n                    last;\n                }\n   \
    \         }\n        }\n    }\n    return $res;\n}", "    my $n = @$l;\n    my\
    \ @l_minus = map{-$_}@$l;\n    # your code here...\n}", "    my %h = ();\n   \
    \ foreach my $x (@$l) {\n        if(defined($h{$x})) {\n            return 1;\n\
    \        } else {\n            $h{-$x} = 1;\n        }\n    }\n    return 0;\n\
    }", "    return pairs_sum_to_x($l, 0);\n}", "    my %comp;\n    my $i;\n    foreach\
    \ $i (@$l) {\n        if (defined($comp{$i})) {\n            return \"1\";\n \
    \       } else {\n            $comp{-$i} = 1;\n        }\n    }\n    return \"\
    \";\n}", "    if ($l == 1) {\n        return '';\n    }\n    elsif ($l == 2) {\n\
    \        return ($$_[0] == -($$_[1])) ? 1 : '';\n    }\n    else {\n        my\
    \ $m = $l/2;\n        my @left = @$_[0..$m-1];\n        my @right = @$_[$m..$l-1];\n\
    \        my $a = pairs_sum_to_zero(\\@left);\n        my $b = pairs_sum_to_zero(\\\
    @right);\n        my $c = pairs_sum_to_zero_merge_sort(\\@left, \\@right);\n \
    \       return ($a | $b | $c);\n    }\n}", "    my(%h);\n    foreach my $i (@$l)\
    \ {\n        return 1 if defined($h{-$i});\n        $h{$i} = 1;\n    }\n    return\
    \ 0;\n}", "    my %h;\n    for(@$l) {\n        return 1 if exists $h{-$_};\n \
    \       $h{$_}++;\n    }\n    return 0;\n}", "    my $v;\n    my $result = '';\n\
    \    my %h;\n    my $found;\n    # code here\n    foreach $v (@$l) {\n       \
    \ $h{$v} = 1;\n    }\n    foreach $v (@$l) {\n        if (defined($h{-$v})) {\n\
    \            $found = 1;\n            last;\n        }\n    }\n    if ($found)\
    \ {\n        $result = 1;\n    }\n    return $result;\n}", "    my %hash = ();\n\
    \    foreach my $elem (@$l) {\n        if ($hash{-$elem}) {\n            return\
    \ 1;\n        }\n        $hash{$elem} = 1;\n    }\n    return 0;\n}", "    foreach\
    \ my $i (@$l) {\n        foreach my $j (@$l) {\n            if ($i != $j && $i\
    \ + $j == 0) {\n                return 1;\n            }\n        }\n    }\n \
    \   return \"\";\n}", "    my @input = @$l;\n    my %hash = ();\n    my $flag\
    \ = 0;\n    foreach my $element (@input) {\n        my $n = 0 - $element;\n  \
    \      if (exists $hash{$n}) {\n            $flag = 1;\n            last;\n  \
    \      }\n        $hash{$element} = 1;\n    }\n    if ($flag == 1) {\n       \
    \ return 1;\n    }\n    return \"\";\n}", "    my %hash;\n    for my $e (@$l)\
    \ {\n        return \"1\" if $hash{-$e};\n        $hash{$e} = 1;\n    }\n    return\
    \ \"\";\n}", "    my(%h);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n  \
    \  }\n    foreach my $e (@$l) {\n        if(exists($h{-$e})) {\n            return\
    \ 1;\n        }\n    }\n    return 0;\n}", "    foreach my $i (0..@$l-1) {\n \
    \       foreach my $j ($i+1..@$l-1) {\n            if ($l->[$i] + $l->[$j] ==\
    \ 0) {\n                return 1;\n            }\n        }\n    }\n    return\
    \ '';\n}", "    my $a = [];\n    for my $i ( 0 .. $#$l ) {\n        my $x = $l->[$i];\n\
    \        if ( exists( $a->[-$x] ) ) {\n            return 1;\n        }\n    \
    \    $a->[$x] = $i;\n    }\n    return 0;\n}", "    my @list = @$l;\n    my %hash\
    \ = ();\n    for my $element (@list) {\n        $hash{$element} = 0;\n    }\n\
    \    for my $element (@list) {\n        $hash{$element} = 1;\n    }\n    my $return_value\
    \ = 0;\n    for my $element (@list) {\n        if (exists $hash{-$element}) {\n\
    \            if ($hash{-$element} == 1) {\n                $return_value = 1;\n\
    \            }\n        }\n    }\n    return $return_value;\n}", "    my %hash\
    \ = ();\n    foreach my $a (@$l) {\n        if (defined($hash{-$a})) {\n     \
    \       return 1;\n        }\n        $hash{$a} = 1;\n    }\n    return 0;\n}",
  "    my $r = 0;\n    foreach my $i (0..$#$l-1) {\n        foreach my $j ($i+1..$#$l)\
    \ {\n            if ($l->[$i] + $l->[$j] == 0) {\n                $r = 1;\n  \
    \              last;\n            }\n        }\n    }\n    return $r;\n}", " \
    \   my @l = @$l;\n    for(my $i = 0; $i < $#l; $i++){\n        for(my $j = $i\
    \ + 1; $j <= $#l; $j++){\n            if(($l[$i] + $l[$j]) == 0){\n          \
    \      return 1;\n            }\n        }\n    }\n    return 0;\n}", "    my\
    \ %h;\n    foreach my $e (@$l) {\n        return 1 if exists $h{-$e};\n      \
    \  $h{$e} = 1;\n    }\n    return 0;\n}", "    my $res = $l;\n    foreach my $item\
    \ (@$l) {\n        if (grep $_ == -$item, @$l) {\n            return 1;\n    \
    \    }\n    }\n    return 0;\n}", "    my(%k, $i, $k);\n    %k = ();\n    for\
    \ ($i = 0; $i < @$l; $i++) {\n        $k = $$l[$i];\n        if (defined($k{$k}))\
    \ {\n            return 1;\n        }\n        $k{-1 * $k} = 1;\n    }\n    return\
    \ \"\";\n}", "    # insert code here\n    # TODO\n}", "    my(%zero_pairs);\n\
    \    my($result) = \"\";\n    for (my($i) = 0; $i < @$l; $i++) {\n        if (exists($zero_pairs{-$$l[$i]}))\
    \ {\n            $result = 1;\n            last;\n        }\n        else {\n\
    \            $zero_pairs{$$l[$i]} = 1;\n        }\n    }\n    return $result;\n\
    }", "    my $sum = 0;\n    # fill in the missing code here\n    # FILL IN YOUR\
    \ CODE HERE\n    # DO NOT USE loops or if-statements\n    my @result = grep {\
    \ $sum = $_ - $sum; 0 } @$l;\n    # return 1 if the code is correct, and \"\"\
    \ otherwise\n    # return (A && B && C)\n    # where A = @result contains two\
    \ distinct elements,\n    # B = the two elements in @result sum to zero, and\n\
    \    # C = @result does not contain any additional elements\n    # return (A &&\
    \ B && C)\n    # where A = @result contains two distinct elements,\n    # B =\
    \ the two elements in @result sum to zero, and\n    # C = @result does not contain\
    \ any additional elements\n    return(\n        ($result[0] != $result[1]) &&\n\
    \        ($result[0] + $result[1] == 0) &&\n        (scalar(@result) == 2)\n \
    \   );\n}", "    my @a = @$l;\n    my $n = scalar(@a);\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if\
    \ ($a[$i] + $a[$j] == 0) {\n                return 1;\n            }\n       \
    \ }\n    }\n    return 0;\n}", "    my %h = ();\n    foreach (@$l) {\n       \
    \ return 1 if defined $h{-$_};\n        $h{$_} = 1;\n    }\n    return \"\";\n\
    }", "    # REPLACE THIS LINE WITH YOUR CODE\n    my $i = 0;\n    my $j = 0;\n\
    \    my $N = @$l;\n    my %count = ();\n    for ($i = 0; $i < $N; $i++) {\n  \
    \      $count{$l->[$i]}++;\n    }\n    for ($i = 0; $i < $N; $i++) {\n       \
    \ if ($count{-$l->[$i]} > 0) {\n            if ($l->[$i] != 0 || $count{-$l->[$i]}\
    \ > 1) {\n                return 1;\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my %hash;\n    foreach my $i (@$l) {\n        $hash{$i} = -1;\n\
    \    }\n    my $ans = \"\";\n    foreach my $i (@$l) {\n        if(exists $hash{-$i})\
    \ {\n            $ans = 1;\n            last;\n        }\n    }\n    return $ans;\n\
    }", "    for (my $i = 0; $i < scalar(@$l) - 1; $i++) {\n        for (my $j = $i\
    \ + 1; $j < scalar(@$l); $j++) {\n            if ($l->[$i] + $l->[$j] == 0) {\n\
    \                return 1;\n            }\n        }\n    }\n    return 0;\n}",
  "    return 0;\n}", "    my $result = \"\";\n    my $neg_hash = {};\n    my $pos_hash\
    \ = {};\n    foreach my $i (@$l) {\n        if ($i > 0) {\n            $pos_hash->{$i}\
    \ = 1;\n        }\n        else {\n            $neg_hash->{$i} = 1;\n        }\n\
    \    }\n    foreach my $i (@$l) {\n        if ($i > 0 && $neg_hash->{-$i}) {\n\
    \            $result = 1;\n            last;\n        }\n        elsif ($i < 0\
    \ && $pos_hash->{-$i}) {\n            $result = 1;\n            last;\n      \
    \  }\n    }\n    return $result;\n}", "    my %h;\n    foreach my $x (@$l) {\n\
    \        $h{$x} = 1;\n    }\n    foreach my $x (@$l) {\n        if (exists $h{-$x})\
    \ {\n            return 1;\n        }\n    }\n    return \"\";\n}", "    my %hash;\n\
    \    for my $i (@$l) {\n        if (exists $hash{-$i}) {\n            return 1;\n\
    \        }\n        $hash{$i} = 1;\n    }\n    return '';\n}", "    my(%table);\n\
    \    for my $i (@$l) {\n        if (defined($table{$i})) {\n            return\
    \ 1;\n        } else {\n            $table{-$i} = 1;\n        }\n    }\n    return\
    \ 0;\n}", "    if ($l eq \"\") { return \"\"; }\n    my $h = {};\n    foreach\
    \ my $i (@$l) {\n        if (exists $h->{$i}) {\n            return 1;\n     \
    \   } else {\n            $h->{-$i} = 1;\n        }\n    }\n    return \"\";\n\
    }", "    my $match = 0;\n    my $n = @$l;\n    my $i;\n    my $j;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n        \
    \    if ($l->[$i] + $l->[$j] == 0) {\n                $match = 1;\n          \
    \  }\n        }\n    }\n    return $match;\n}", "    my @p = @$l;\n    my %h;\n\
    \    foreach my $i (@p) {\n        if(defined($h{-$i})) {\n            return\
    \ 1;\n        }\n        $h{$i} = 1;\n    }\n    return 0;\n}", "    my $i = 0;\n\
    \    my $j = 0;\n    my $n = scalar(@$l);\n    while ($i < $n) {\n        $j =\
    \ $i + 1;\n        while ($j < $n) {\n            if ($l->[$i] + $l->[$j] == 0)\
    \ {\n                return 1;\n            }\n            $j++;\n        }\n\
    \        $i++;\n    }\n    return \"\";\n}", "    my $count = 0;\n    foreach\
    \ my $i (@$l) {\n        foreach my $j (@$l) {\n            if ($i + $j == 0)\
    \ {\n                $count++;\n            }\n        }\n    }\n    if ($count\
    \ > 1) {\n        return 1;\n    } else {\n        return 0;\n    }\n}", "   \
    \ for(my $i = 0; $i <= $#$l; $i++) {\n        for(my $j = $i + 1; $j <= $#$l;\
    \ $j++) {\n            return 1 if $l->[$i] + $l->[$j] == 0;\n        }\n    }\n\
    \    return '';\n}", "    foreach my $i (0..$#$l) {\n        foreach my $j (($i+1)..$#$l)\
    \ {\n            if ($l->[$i] + $l->[$j] == 0) {\n                return 1;\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    my $h = {};\n   \
    \ foreach my $v (@$l) {\n        return 1 if defined $h->{-1 * $v};\n        $h->{$v}\
    \ = 1;\n    }\n    return \"\";\n}", "    my %t;\n    $t{$_} = 1 for @$l;\n  \
    \  my @r = grep { $t{- $_} } @$l;\n    return @r > 0 ? 1 : '';\n}", "    my @arr\
    \ = @$l;\n    my $ans = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $n = scalar(@arr);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            if (($arr[$i] + $arr[$j]) == 0) {\n                $ans = \"1\";\n\
    \                last;\n            }\n        }\n    }\n    return $ans;\n}",
  '    $l = remove_doubles($l);', "    my %h = ();\n    foreach my $e (@$l) {\n  \
    \      if (exists $h{-$e}) {\n            return 1;\n        }\n        else {\n\
    \            $h{$e} = 1;\n        }\n    }\n    return \"\";\n}", "    my @list\
    \ = @$l;\n    my $length = scalar @list;\n    for (my $i = 0; $i < $length; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $length; $j++) {\n            if ($list[$i]\
    \ + $list[$j] == 0) {\n                return \"1\";\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my(%h);\n    my($i);\n    my($sum);\n    for\
    \ ($i = 0; $i < @$l; $i++) {\n\t$sum = $l->[$i];\n\tif ($h{-$sum}) {\n\t    return\
    \ 1;\n\t}\n\t$h{$sum} = 1;\n    }\n    return 0;\n}", "    my $x;\n    my $y;\n\
    \    my $z;\n    my $w;\n    my $b = 0;\n    for ($x = 0; $x < @$l - 1; $x++)\
    \ {\n        $y = $l->[$x];\n        if ($y eq \"\") {\n            next;\n  \
    \      }\n        for ($z = $x + 1; $z < @$l; $z++) {\n            $w = $l->[$z];\n\
    \            if ($w eq \"\") {\n                next;\n            }\n       \
    \     if ($y + $w == 0) {\n                $b = 1;\n                last;\n  \
    \          }\n        }\n    }\n    return $b;\n}", "    # BAD CODE\n    return\
    \ 0;\n}", "    my $d = {};\n    my @l = @$l;\n    my $i = 0;\n    while($i < scalar(@l))\
    \ {\n        my $k = $l[$i];\n        $d->{$k} = $i;\n        $i = $i + 1;\n \
    \   }\n    my $ret = 0;\n    $i = 0;\n    while($i < scalar(@l)) {\n        my\
    \ $k = $l[$i];\n        if(defined($d->{-$k})) {\n            if($d->{-$k} !=\
    \ $i) {\n                $ret = 1;\n                last;\n            }\n   \
    \     }\n        $i = $i + 1;\n    }\n    return $ret;\n}", "    foreach my $i\
    \ (@$l) {\n        foreach my $j (@$l) {\n            if($i == -$j) {\n      \
    \          if($i != $j) {\n                    return 1;\n                }\n\
    \            }\n        }\n    }\n    return 0;\n}", "    my $count = 0;\n   \
    \ for (my $i = 0; $i < scalar(@$l); $i++) {\n        my $ele = $l->[$i];\n   \
    \     for (my $j = $i + 1; $j < scalar(@$l); $j++) {\n            my $other =\
    \ $l->[$j];\n            if (($ele + $other) == 0) {\n                $count++;\n\
    \            }\n        }\n    }\n    return $count;\n}", "    my $f = 0;\n  \
    \  for (my $i = 0; $i < scalar(@$l) - 1; $i++) {\n        for (my $j = $i + 1;\
    \ $j < scalar(@$l); $j++) {\n            if (($l->[$i] + $l->[$j]) == 0) {\n \
    \               $f = 1;\n            }\n        }\n    }\n    return $f;\n}",
  "    my @list = @$l;\n    my %new_list;\n    foreach my $x (@list) {\n        if\
    \ (exists $new_list{$x}) {\n            return 1;\n        }\n        else {\n\
    \            $new_list{-$x} = 1;\n        }\n    }\n    return 0;\n}", "    #input\
    \ is a list\n    my @input = @$l;\n    my $len = scalar @input;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $temp = 0;\n    my $res = 0;\n    my %lookup = ();\n \
    \   while ($i < $len) {\n        $temp = $input[$i];\n        if (exists $lookup{$temp})\
    \ {\n            $res = 1;\n            last;\n        }\n        $j = 0;\n  \
    \      while ($j < $len) {\n            if ($i != $j && ($input[$i] + $input[$j])\
    \ == 0) {\n                $res = 1;\n                last;\n            }\n \
    \           $j = $j + 1;\n        }\n        $lookup{$temp} = 1;\n        $i =\
    \ $i + 1;\n    }\n    return $res;\n}", "    if (scalar(@$l) < 2) {\n        return\
    \ 0;\n    }\n    if (scalar(@$l) == 2) {\n        if (abs($l->[0]) == abs($l->[1]))\
    \ {\n            return 1;\n        }\n        return 0;\n    }\n    my @p = pairs_sum_to_zero_helper(@$l);\n\
    \    if (scalar(@p) > 0) {\n        return 1;\n    }\n    return 0;\n}", "   \
    \ my %diff = ();\n    my $result = \"\";\n    foreach my $element (@$l) {\n\t\
    my $diff = -$element;\n\tif (exists $diff{$diff}) {\n\t    $result = 1;\n\t  \
    \  last;\n\t}\n\telse {\n\t    $diff{$element} = $element;\n\t}\n    }\n    return\
    \ $result;\n}", "    my %hash = ();\n    foreach my $num (@$l) {\n        $hash{$num}++;\n\
    \    }\n    foreach my $key (keys %hash) {\n        if ($hash{-$key} > 0) {\n\
    \            return 1;\n        }\n    }\n    return \"\";\n}", "    my @len =\
    \ @$l;\n    my %hash = ();\n    for my $i (@len) {\n        return 1 if (defined\
    \ $hash{-$i});\n        $hash{$i} = 1;\n    }\n    return 0;\n}", "    my $n =\
    \ scalar(@$l);\n    my %h;\n    foreach my $i (@$l) {\n        $h{$i} = 1;\n \
    \   }\n    foreach my $i (@$l) {\n        if ($h{-$i}) {\n            return \"\
    1\";\n        }\n    }\n    return \"\";\n}", "    my $result = \"\";\n    # your\
    \ code goes here\n    my $l_length = @$l;\n    my $flag = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    for ($i = 0; $i < $l_length - 1; $i++){\n        for ($j\
    \ = $i + 1; $j < $l_length; $j++){\n            if ($l->[$i] + $l->[$j] == 0){\n\
    \                $flag = 1;\n                last;\n            }\n        }\n\
    \    }\n    if ($flag == 1){\n        $result = 1;\n    }\n    return $result;\n\
    }", "    if (@$l <= 1) {\n        return \"\";\n    }\n    my $i = 0;\n    while\
    \ ($i < @$l) {\n        my $j = $i + 1;\n        while ($j < @$l) {\n        \
    \    if ($l->[$i] + $l->[$j] == 0) {\n                return 1;\n            }\n\
    \            $j = $j + 1;\n        }\n        $i = $i + 1;\n    }\n    return\
    \ \"\";\n}", "    if(@$l == 1) {\n        return '';\n    }\n    my $index = 0;\n\
    \    while($index < @$l) {\n        my $inner = $index + 1;\n        while($inner\
    \ < @$l) {\n            if($l->[$index] + $l->[$inner] == 0) {\n             \
    \   return 1;\n            }\n            $inner += 1;\n        }\n        $index\
    \ += 1;\n    }\n    return '';\n}", "    my %p;\n    foreach $i (@$l) {\n    \
    \    if (exists $p{-$i}) {\n            return 1;\n        }\n        $p{$i} =\
    \ 1;\n    }\n    return 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
