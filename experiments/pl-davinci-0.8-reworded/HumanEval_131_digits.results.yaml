language: pl
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $product = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n    \
    \    if (($digit % 2) == 1) {\n            $product *= $digit;\n        }\n  \
    \      $n /= 10;\n    }\n    return $product;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $result = 1;\n    while ($n) {\n        my $digit = $n % 10;\n        $result\
    \ *= $digit if $digit % 2;\n        $n /= 10;\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n   \
    \     if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  # your code here\n    return 0 if $n == 0;\n    my $ret = 0;\n    my $mul =\
    \ 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        if ($digit %\
    \ 2 == 1) {\n            $ret += $mul * $digit;\n            $mul *= 10;\n   \
    \     }\n        $n /= 10;\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $m = 1;\n    while ($n > 0) {\n        my $d = $n % 10;\n        $m *= $d\
    \ if $d % 2 == 1;\n        $n /= 10;\n    }\n    return $m;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $r = 1;\n    while ($n > 0) {\n        my $d = $n % 10;\n        $r *= $d\
    \ if $d % 2;\n        $n /= 10;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $ans = 1;\n    while ($n > 0) {\n        my $d = $n % 10;\n        $ans\
    \ *= $d if $d % 2;\n        $n /= 10;\n    }\n    return $ans;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $product = 1;\n    my $last_digit;\n    while($n != 0) {\n        $last_digit\
    \ = $n % 10;\n        if ($last_digit % 2 != 0) {\n            $product *= $last_digit;\n\
    \        }\n        $n = int($n / 10);\n    }\n    return $product;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my($product) = 1;\n    while ($n > 0) {\n        $product *= $n % 10 if $n\
    \ % 2;\n        $n /= 10;\n    }\n    return $product;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  return 0 if ($n == 0);\n    if ($n % 2 == 0) {\n        return digits($n /\
    \ 10);\n    } else {\n        return ($n % 10) * digits($n / 10);\n    }\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n   \
    \     if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $prod = 1;\n    for my $digit (split //, $n) {\n        $prod *= $digit\
    \ if $digit % 2;\n    }\n    return $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $r = 1;\n    for (split //, $n) {\n        $r *= $_ if $_ % 2;\n    }\n\
    \    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&digits;\n        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $sum = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n        if\
    \ ($digit % 2 == 1) {\n            $sum *= $digit;\n        }\n        $n /= 10;\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $product = 1;\n    while ($n) {\n        my $digit = $n % 10;\n        $product\
    \ *= $digit if $digit % 2;\n        $n /= 10;\n    }\n    return $product;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n   \
    \     if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821208
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $prod = 1;\n    for my $d (split //, $n) {\n        $prod *= $d if $d %\
    \ 2;\n    }\n    return $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $sum = 1;\n    while($n > 0) {\n        my $d = $n % 10;\n        if($d\
    \ % 2 == 1) {\n            $sum *= $d;\n        }\n        $n /= 10;\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&digits;\n        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  return 0 if $n == 0;\n    my $r = 0;\n    my $p = 1;\n    while ($n) {\n  \
    \      my $d = $n % 10;\n        if ($d % 2 == 1) {\n            $r += $p * $d;\n\
    \            $p *= 10;\n        }\n        $n /= 10;\n    }\n    return $r;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n\
    \        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $r = 1;\n    while ($n) {\n        $r *= $n % 10 if $n % 2;\n        $n\
    \ /= 10;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $result = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n     \
    \   if ($digit % 2 == 1) {\n            $result *= $digit;\n        }\n      \
    \  $n /= 10;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821208
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  return 0 if $n < 1;\n    return ($n % 10) * digits($n / 10) if $n < 10;\n \
    \   return digits($n / 10) if $n % 2 == 0;\n    return ($n % 10) * digits($n /\
    \ 10);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n\
    \        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821295
- exit_code: 1
  program: "# Given a positive integer n, return the product of the odd digits.\n\
    # Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>>\
    \ digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n  \
    \  my $mult = 1;\n    while($n) {\n        my $d = $n % 10;\n        $mult *=\
    \ $d if($d % 2);\n        $n /= 10;\n    }\n    return $mult;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&digits;\n        if(eq_deeply($candidate->(5),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(54),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821295
