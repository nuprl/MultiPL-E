language: pl
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(/\\s+/, $numbers);\n   \
    \ my(@sorted_numbers) = sort { $english_numbers{$a} <=> $english_numbers{$b} }\
    \ @numbers;\n    return join(' ', @sorted_numbers);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821217
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split / /, $numbers;\n    my @sorted\
    \ = sort { $nums{$a} <=> $nums{$b} } @nums;\n    return join ' ', @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821217
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @input = split(' ', $numbers);\n    my %digits\
    \ = (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ );\n    my @output = sort { $digits{$a} <=> $digits{$b} } @input;\n    return\
    \ join(' ', @output);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821217
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %num2int = ('zero' => 0, 'one' => 1, 'two'\
    \ => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9);\n    my @int_nums = map { $num2int{$_} } split(/ /, $numbers);\n\
    \    my @sorted_nums = sort { $a <=> $b } @int_nums;\n    my %int2num = reverse\
    \ %num2int;\n    return join(' ', map { $int2num{$_} } @sorted_nums);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821217
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(' ', $numbers);\n    my(@words)\
    \ = map { word_to_numeral($_) } @numbers;\n    my(@sorted) = sort { $a <=> $b\
    \ } @words;\n    my(@results) = map { numeral_to_word($_) } @sorted;\n    return\
    \ join(' ', @results);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::word_to_numeral called at /tmp/tmp8jdznpbb.pl
    line 9.

    '
  stdout: ok!
  timestamp: 1659821217
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my @sorted\
    \ = sort { $numeral{$a} <=> $numeral{$b} } @numbers;\n    return join ' ', @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821217
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %map = qw(zero 0 one 1 two 2 three 3 four\
    \ 4 five 5 six 6 seven 7 eight 8 nine 9);\n    my @numbers = split / /, $numbers;\n\
    \    my @nums = map $map{$_}, @numbers;\n    my @sorted = sort {$a <=> $b} @nums;\n\
    \    my @result = map {$numbers[$_]} @sorted;\n    return join \" \", @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821217
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numvals = ('zero' => 0, 'one' => 1, 'two'\
    \ => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9);\n    my @nums = split(' ', $numbers);\n    my @sortnums\
    \ = map { $numvals{$_} } @nums;\n    my @sorted = sort { $a <=> $b } @sortnums;\n\
    \    return join(' ', @nums[@sorted]);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821217
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %number = (\n        'zero'  => 0,\n     \
    \   'one'   => 1,\n        'two'   => 2,\n        'three' => 3,\n        'four'\
    \  => 4,\n        'five'  => 5,\n        'six'   => 6,\n        'seven' => 7,\n\
    \        'eight' => 8,\n        'nine'  => 9,\n    );\n    my @numbers = split(/\
    \ /, $numbers);\n    @numbers = sort { $number{$a} <=> $number{$b} } @numbers;\n\
    \    return join(' ', @numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821217
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(/ /, $numbers);\n    my(@num_order)\
    \ = qw(zero one two three four five six seven eight nine);\n    my(%numbers) =\
    \ map { $_ => $num_order[$_] } (0..9);\n    return join(\" \", sort { $numbers{$a}\
    \ cmp $numbers{$b} } @numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821217
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %hash;\n    my @numbers = split(/ /, $numbers);\n\
    \    for my $num (@numbers) {\n        $hash{$num} = $numerals{$num};\n    }\n\
    \    my @sorted = sort { $hash{$a} <=> $hash{$b} } keys %hash;\n    return join\
    \ \" \", @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1659821217
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my @sort_numbers\
    \ = ();\n    foreach my $number (@numbers) {\n        push(@sort_numbers, numeral_to_int($number));\n\
    \    }\n    @sort_numbers = sort {$a <=> $b} @sort_numbers;\n    my $sort_numbers\
    \ = join(\" \", @sort_numbers);\n    return $sort_numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::numeral_to_int called at /tmp/tmprxzhmkbt.pl
    line 11.

    '
  stdout: ok!
  timestamp: 1659821217
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @keys = qw(zero one two three four five six\
    \ seven eight nine);\n    my %nummap = map {$keys[$_] => $_} (0..9);\n    my @sort\
    \ = map {$keys[$_]} sort {$a <=> $b} map {$nummap{$_}} split(\" \", $numbers);\n\
    \    return join(\" \", @sort);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821217
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @list = split(/ /, $numbers);\n    return\
    \ join(\" \", sort { number_to_int($a) <=> number_to_int($b) } @list);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::number_to_int called at /tmp/tmpnpo9all0.pl
    line 9.

    '
  stdout: ok!ok!
  timestamp: 1659821217
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers = (\n\t\"zero\" => 0,\n\t\"one\"\
    \ => 1,\n\t\"two\" => 2,\n\t\"three\" => 3,\n\t\"four\" => 4,\n\t\"five\" => 5,\n\
    \t\"six\" => 6,\n\t\"seven\" => 7,\n\t\"eight\" => 8,\n\t\"nine\" => 9,\n    );\n\
    \    my %numbers_reverse = reverse %numbers;\n    my @numbers = split(/ /, $numbers);\n\
    \    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n \
    \   my $out = join(\" \", @sorted_numbers);\n    return $out;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821217
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    my %numberals\
    \ = (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ );\n    my @nums = ();\n    foreach my $numeral (@numbers) {\n        push @nums,\
    \ $numberals{$numeral};\n    }\n    my @sorted = sort { $a <=> $b } @nums;\n \
    \   my @sorted_words = ();\n    foreach my $num (@sorted) {\n        foreach my\
    \ $word (keys %numberals) {\n            if ($numberals{$word} == $num) {\n  \
    \              push @sorted_words, $word;\n            }\n        }\n    }\n \
    \   return join \" \", @sorted_words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821217
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@nums) = split(/ /, $numbers);\n    my(@sorted)\
    \ = ();\n    my(%sort_num);\n    $sort_num{'zero'} = 0;\n    $sort_num{'one'}\
    \ = 1;\n    $sort_num{'two'} = 2;\n    $sort_num{'three'} = 3;\n    $sort_num{'four'}\
    \ = 4;\n    $sort_num{'five'} = 5;\n    $sort_num{'six'} = 6;\n    $sort_num{'seven'}\
    \ = 7;\n    $sort_num{'eight'} = 8;\n    $sort_num{'nine'} = 9;\n    foreach my\
    \ $num (@nums) {\n        push @sorted, $sort_num{$num};\n    }\n    my(@sorted_num)\
    \ = sort {$a <=> $b} @sorted;\n    my(@sorted_words) = ();\n    foreach my $sorted_num\
    \ (@sorted_num) {\n        my($sorted_word) = ();\n        foreach my $word (keys\
    \ %sort_num) {\n            if ($sort_num{$word} == $sorted_num) {\n         \
    \       $sorted_word = $word;\n            }\n        }\n        push @sorted_words,\
    \ $sorted_word;\n    }\n    my($sorted_string) = join(' ', @sorted_words);\n \
    \   return $sorted_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821217
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@nums) = split / /, $numbers;\n    my(@numbers)\
    \ = sort { map { $_ eq \"zero\" ? 0 : $_ eq \"one\" ? 1 : $_ eq \"two\" ? 2 :\
    \ $_ eq \"three\" ? 3 : $_ eq \"four\" ? 4 : $_ eq \"five\" ? 5 : $_ eq \"six\"\
    \ ? 6 : $_ eq \"seven\" ? 7 : $_ eq \"eight\" ? 8 : $_ eq \"nine\" ? 9 : -1; }\
    \ ($a, $b) } @nums;\n    return join \" \", @numbers;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821217
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numberals = (\n        zero  => 0,\n    \
    \    one   => 1,\n        two   => 2,\n        three => 3,\n        four  => 4,\n\
    \        five  => 5,\n        six   => 6,\n        seven => 7,\n        eight\
    \ => 8,\n        nine  => 9,\n    );\n    my @numbers = split ' ', $numbers;\n\
    \    my @sorted  = map {$numberals{$_}} sort {$numberals{$a} <=> $numberals{$b}}\
    \ @numbers;\n    return join ' ', @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821217
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    return\
    \ join(\" \", sort {\n        {\n            'zero' => 0,\n            'one' =>\
    \ 1,\n            'two' => 2,\n            'three' => 3,\n            'four' =>\
    \ 4,\n            'five' => 5,\n            'six' => 6,\n            'seven' =>\
    \ 7,\n            'eight' => 8,\n            'nine' => 9,\n        }->{$a} <=>\
    \ {\n            'zero' => 0,\n            'one' => 1,\n            'two' => 2,\n\
    \            'three' => 3,\n            'four' => 4,\n            'five' => 5,\n\
    \            'six' => 6,\n            'seven' => 7,\n            'eight' => 8,\n\
    \            'nine' => 9,\n        }->{$b}\n    } @numbers);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821217
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    # your code here\n    my @numbers = split(/ /,\
    \ $numbers);\n    my %nums = (\n        zero => 0,\n        one => 1,\n      \
    \  two => 2,\n        three => 3,\n        four => 4,\n        five => 5,\n  \
    \      six => 6,\n        seven => 7,\n        eight => 8,\n        nine => 9,\n\
    \    );\n    my @nums_sorted = map {$nums{$_}} sort {$nums{$a} <=> $nums{$b}}\
    \ @numbers;\n    return join(' ', @nums_sorted);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014436
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted = map { $_->[0] }\n        sort {\
    \ $a->[1] <=> $b->[1] }\n        map { [ $_, number_to_index($_) ] }\n       \
    \ split /\\s+/, $numbers;\n    return join \" \", @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::number_to_index called at /tmp/tmprgz3fuli.pl
    line 10.

    '
  stdout: ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(' ', $numbers);\n    my\
    \ %numbers = (\n        zero => 0,\n        one => 1,\n        two => 2,\n   \
    \     three => 3,\n        four => 4,\n        five => 5,\n        six => 6,\n\
    \        seven => 7,\n        eight => 8,\n        nine => 9,\n    );\n    my\
    \ @sorted_numbers = map { $numbers{$_} } sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join(' ', @sorted_numbers);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted_numbers = ();\n    my %map = (\n \
    \       'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three'\
    \ => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n   \
    \     'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n    );\n   \
    \ my @numbers = split(' ', $numbers);\n    foreach my $num (@numbers) {\n    \
    \    die \"Invalid number: $num\" unless (exists $map{$num});\n        push(@sorted_numbers,\
    \ $map{$num});\n    }\n    my @sorted_numbers = sort {$a <=> $b} @sorted_numbers;\n\
    \    my @sorted_strings = ();\n    foreach my $num (@sorted_numbers) {\n     \
    \   my $string = (grep {$map{$_} == $num} keys %map)[0];\n        push(@sorted_strings,\
    \ $string);\n    }\n    return join(' ', @sorted_strings);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(\" \", $numbers);\n    my\
    \ @result;\n    my %hash = (\n        'zero'  => 0,\n        'one'   => 1,\n \
    \       'two'   => 2,\n        'three' => 3,\n        'four'  => 4,\n        'five'\
    \  => 5,\n        'six'   => 6,\n        'seven' => 7,\n        'eight' => 8,\n\
    \        'nine'  => 9,\n    );\n    foreach (@numbers) {\n        push @result,\
    \ $hash{$_};\n    }\n    @result = sort @result;\n    my @words;\n    foreach\
    \ (@result) {\n        push @words, (reverse sort { $hash{$a} <=> $hash{$b} }\
    \ keys %hash)[$_];\n    }\n    return join(\" \", @words);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(\" \", $numbers);\n    my(@words)\
    \ = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    \    my(@res);\n    for my $word (@words) {\n        for my $num (@numbers) {\n\
    \            if ($num eq $word) {\n                push(@res, $num);\n       \
    \     }\n        }\n    }\n    return join(\" \", @res);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %mapping = (zero => 0, one => 1, two => 2,\
    \ three => 3, four => 4, five => 5, six => 6, seven => 7, eight => 8, nine =>\
    \ 9);\n    my @result = sort {$mapping{$a} <=> $mapping{$b}} split(/ /, $numbers);\n\
    \    return join(' ', @result);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $numeral_map = {\n        'zero' => 0,\n \
    \       'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four'\
    \ => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n  \
    \      'eight' => 8,\n        'nine' => 9,\n    };\n    my @numeral_sort = sort\
    \ {$numeral_map->{$a} <=> $numeral_map->{$b}} split(/\\s+/, $numbers);\n    return\
    \ join(' ', @numeral_sort);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @num_sort = ();\n    my %num_hash = (\n  \
    \      'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three'\
    \ => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n   \
    \     'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n    );\n   \
    \ my @num_array = split(' ', $numbers);\n    foreach my $n (@num_array) {\n  \
    \      push(@num_sort, $num_hash{$n});\n    }\n    @num_sort = sort {$a <=> $b}\
    \ @num_sort;\n    my @num_result = ();\n    foreach my $n (@num_sort) {\n    \
    \    push(@num_result, $n);\n    }\n    return join(' ', @num_result);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@nums) = split(/ /, $numbers);\n    my(@sorted)\
    \ = sort {\n        my($first) = $numerals{$a};\n        my($second) = $numerals{$b};\n\
    \        $first <=> $second;\n    } @nums;\n    return join(\" \", @sorted);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split / /, $numbers;\n    my @sorted_nums\
    \ = map {$nums[$_]} sort {$nums[$a] cmp $nums[$b]} 0..$#nums;\n    my $sorted_numbers\
    \ = join \" \", @sorted_nums;\n    return $sorted_numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers_array = split(\" \", $numbers);\n\
    \    my @numbers_translated;\n    my %numbers_hash = (\n        \"zero\" => 0,\n\
    \        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n     \
    \   \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"\
    seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    );\n    foreach\
    \ my $number(@numbers_array) {\n        my $number_translated = $numbers_hash{$number};\n\
    \        push(@numbers_translated, $number_translated);\n    }\n    my @numbers_sorted\
    \ = sort {$a <=> $b} @numbers_translated;\n    my @numbers_sorted_final;\n   \
    \ foreach my $number(@numbers_sorted) {\n        foreach my $key(keys %numbers_hash)\
    \ {\n            if ($numbers_hash{$key} == $number) {\n                push(@numbers_sorted_final,\
    \ $key);\n            }\n        }\n    }\n    my $result = join(\" \", @numbers_sorted_final);\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = sort { $number_to_numeral{$a} <=> $number_to_numeral{$b} } @numbers;\n   \
    \ return join(' ', @sorted_numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@sorted) = sort {$numbers_dict{$a} <=> $numbers_dict{$b}}\
    \ split /\\s+/, $numbers;\n    return join(\" \", @sorted);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = sort {$numeral_to_value{$a} <=>\
    \ $numeral_to_value{$b}} split /\\s+/, $numbers;\n    return join(' ', @numbers);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @arr = split(\" \", $numbers);\n    my @sorted\
    \ = sort {$h{$a} <=> $h{$b}} @arr;\n    return join(\" \", @sorted);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    return join(' ', sort { $number_to_numeral{$a}\
    \ <=> $number_to_numeral{$b} } split(/\\s+/, $numbers));\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    # your code here\n    my @num_split = split /\
    \ /, $numbers;\n    my @num_sort = sort @num_split;\n    my $result = join ' ',\
    \ @num_sort;\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @num = split / /, $numbers;\n    my @sorted\
    \ = sort {$words{$a} <=> $words{$b}} @num;\n    return join ' ', @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numeral = qw(zero one two three four five\
    \ six seven eight nine);\n    my @sorted = sort { $numeral[$a] cmp $numeral[$b]\
    \ } split / /, $numbers;\n    return join ' ', @sorted;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = ('zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' =>\
    \ 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9);\n    my @sorted_numbers\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %number_map = (\n        'zero' => 0,\n  \
    \      'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four'\
    \ => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n  \
    \      'eight' => 8,\n        'nine' => 9,\n    );\n    my @numbers = split(/\\\
    s+/, $numbers);\n    my @sorted_numbers = sort { $number_map{$a} <=> $number_map{$b}\
    \ } @numbers;\n    return join(\" \", @sorted_numbers);\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    # print \"sorting \" . $numbers . \"\\n\";\n\
    \    my @nums = split(/ /, $numbers);\n    my %nums = ( \n        zero  => 0,\n\
    \        one   => 1,\n        two   => 2,\n        three => 3,\n        four \
    \ => 4,\n        five  => 5,\n        six   => 6,\n        seven => 7,\n     \
    \   eight => 8,\n        nine  => 9\n    );\n    my @parsed_nums = map { $nums{$_}\
    \ } @nums;\n    @parsed_nums = sort { $a <=> $b } @parsed_nums;\n    my %nums_map\
    \ = reverse %nums;\n    @nums = map { $nums_map{$_} } @parsed_nums;\n    my $result\
    \ = join(' ', @nums);\n    # print \"sorted \" . $result . \"\\n\";\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    # your code here\n    my @in_arr = split / /,\
    \ $numbers;\n    my @out_arr = ();\n    # print \"in_arr = @in_arr\\n\";\n   \
    \ my %num_hash = (\n        'zero' => 0,\n        'one' => 1,\n        'two' =>\
    \ 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n    \
    \    'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9,\n    );\n    for my $val (@in_arr) {\n        push @out_arr, $num_hash{$val};\n\
    \    }\n    @out_arr = sort {$a <=> $b} @out_arr;\n    for my $val (@out_arr)\
    \ {\n        for my $key (keys %num_hash) {\n            if ($num_hash{$key} ==\
    \ $val) {\n                $val = $key;\n            }\n        }\n    }\n   \
    \ my $out_str = join ' ', @out_arr;\n    return $out_str;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = sort {$number_order{$a} <=> $number_order{$b}}\
    \ split(/\\s+/, $numbers);\n    return join(\" \", @nums);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted_numbers = sort { $numbers_values{$a}\
    \ <=> $numbers_values{$b} } split / /, $numbers;\n    return join(' ', @sorted_numbers);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@nums) = split(/ /, $numbers);\n    my(@sorted);\n\
    \    my(%n);\n    my($num);\n    my($i);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5zwwtu15.pl line 40, at
    end of line

    syntax error at /tmp/tmp5zwwtu15.pl line 40, at EOF

    Execution of /tmp/tmp5zwwtu15.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @tokens = split(/\\s+/, $numbers);\n    my\
    \ %numbers = ( 'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4,\
    \ 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9 );\n    my\
    \ @numbers = ();\n    foreach my $token (@tokens) {\n        die \"Invalid input:\
    \ $token\" unless exists $numbers{$token};\n        push @numbers, $numbers{$token};\n\
    \    }\n    my @sorted = sort { $a <=> $b } @numbers;\n    my @output = ();\n\
    \    foreach my $number (@sorted) {\n        push @output, scalar reverse(grep\
    \ { $numbers{$_} == $number } keys %numbers);\n    }\n    return join(\" \", @output);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(' ', $numbers);\n    my(@sorted_numbers);\n\
    \    foreach my $numeral (@NUMERALS) {\n        push(@sorted_numbers, grep(/$numeral/,\
    \ @numbers));\n    }\n    return join(' ', @sorted_numbers);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers, $word, $number);\n    my(%numbers)\
    \ = (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ );\n    foreach $word (split(/\\s+/, $numbers)) {\n        unless (defined($number\
    \ = $numbers{$word})) {\n            die \"invalid number $word\";\n        }\n\
    \        push(@numbers, $number);\n    }\n    return join(' ', map($numbers{$_},\
    \ sort(@numbers)));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split / /, $numbers;\n    my @map\
    \ = qw(zero one two three four five six seven eight nine);\n    my @sort = map\
    \ $map[$_], sort map {$map[$_] =~ /^(.)/; $1} @nums;\n    return join ' ', @sort;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014436
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    return\
    \ join ' ', sort { numberal_to_number($a) <=> numberal_to_number($b) } @numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::numberal_to_number called at /tmp/tmp9qkquby1.pl
    line 9.

    '
  stdout: ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = (\n        zero => 0,\n        one => 1,\n        two => 2,\n        three\
    \ => 3,\n        four => 4,\n        five => 5,\n        six => 6,\n        seven\
    \ => 7,\n        eight => 8,\n        nine => 9,\n    );\n    my @sorted_numbers\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join ' ', @sorted_numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    #YOUR CODE GOES HERE\n    $numbers =~ s/zero/0/;\n\
    \    $numbers =~ s/one/1/;\n    $numbers =~ s/two/2/;\n    $numbers =~ s/three/3/;\n\
    \    $numbers =~ s/four/4/;\n    $numbers =~ s/five/5/;\n    $numbers =~ s/six/6/;\n\
    \    $numbers =~ s/seven/7/;\n    $numbers =~ s/eight/8/;\n    $numbers =~ s/nine/9/;\n\
    \    my @sorted = split / /, $numbers;\n    @sorted = sort @sorted;\n    foreach\
    \ (@sorted) {\n        $_ =~ s/0/zero/;\n        $_ =~ s/1/one/;\n        $_ =~\
    \ s/2/two/;\n        $_ =~ s/3/three/;\n        $_ =~ s/4/four/;\n        $_ =~\
    \ s/5/five/;\n        $_ =~ s/6/six/;\n        $_ =~ s/7/seven/;\n        $_ =~\
    \ s/8/eight/;\n        $_ =~ s/9/nine/;\n    }\n    return join(\" \", @sorted);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(' ', $numbers);\n    my %num;\n\
    \    foreach my $n (@numbers) {\n        $num{$n} = get_number($n);\n    }\n \
    \   my @sorted = sort { $num{$a} <=> $num{$b} } keys %num;\n    return join('\
    \ ', @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_number called at /tmp/tmponfkil1m.pl line
    11.

    '
  stdout: ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @ordered = qw(zero one two three four five\
    \ six seven eight nine);\n    my @sort = ();\n    foreach my $word (split(\" \"\
    , $numbers)) {\n        my $i = 0;\n        foreach my $num (@ordered) {\n   \
    \         if ($word eq $num) {\n                push @sort, $i;\n            }\n\
    \            $i++;\n        }\n    }\n    my @sort_words = ();\n    foreach my\
    \ $i (@sort) {\n        push @sort_words, $ordered[$i];\n    }\n    return join(\"\
    \ \", @sort_words);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers = ();\n    $numbers{'zero'}  = 0;\n\
    \    $numbers{'one'}   = 1;\n    $numbers{'two'}   = 2;\n    $numbers{'three'}\
    \ = 3;\n    $numbers{'four'}  = 4;\n    $numbers{'five'}  = 5;\n    $numbers{'six'}\
    \   = 6;\n    $numbers{'seven'} = 7;\n    $numbers{'eight'} = 8;\n    $numbers{'nine'}\
    \  = 9;\n    my @numbers = split ' ', $numbers;\n    @numbers = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join ' ', @numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@sorted_numbers);\n    my(%numeral_to_number)\
    \ = (\n        'zero'  => 0,\n        'one'   => 1,\n        'two'   => 2,\n \
    \       'three' => 3,\n        'four'  => 4,\n        'five'  => 5,\n        'six'\
    \   => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'  => 9,\n\
    \    );\n    my(%number_to_numeral) = reverse %numeral_to_number;\n    my(@numbers)\
    \ = split /\\s+/, $numbers;\n    foreach my $numeral (@numbers) {\n        die\
    \ \"Unknown numeral '$numeral'\\n\" unless exists $numeral_to_number{$numeral};\n\
    \    }\n    foreach my $numeral (sort { $numeral_to_number{$a} <=> $numeral_to_number{$b}\
    \ } @numbers) {\n        push @sorted_numbers, $number_to_numeral{$numeral_to_number{$numeral}};\n\
    \    }\n    return join(' ', @sorted_numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %order = (\n        zero => 0,\n        one\
    \ => 1,\n        two => 2,\n        three => 3,\n        four => 4,\n        five\
    \ => 5,\n        six => 6,\n        seven => 7,\n        eight => 8,\n       \
    \ nine => 9,\n    );\n    my @results = ();\n    foreach my $number (split /\\\
    s+/, $numbers) {\n        push @results, $order{$number};\n    }\n    @results\
    \ = sort { $a <=> $b } @results;\n    my @final = ();\n    foreach my $number\
    \ (@results) {\n        foreach my $key (keys %order) {\n            if ($order{$key}\
    \ == $number) {\n                push @final, $key;\n            }\n        }\n\
    \    }\n    return join ' ', @final;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $phrase;\n    my @numbers_array = split(/\
    \ /, $numbers);\n    my @numbers_sorted = sort {$word_value{$a} <=> $word_value{$b}}\
    \ @numbers_array;\n    foreach my $numbers_sorted (@numbers_sorted) {\n      \
    \  $phrase .= $numbers_sorted . \" \";\n    }\n    return trim($phrase);\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::trim called at /tmp/tmp9ug8uasn.pl line 14.

    '
  stdout: ''
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(' ', $numbers);\n    #my\
    \ @numbers_numeric = map { $number2num{$_} } @numbers;\n    #my @sorted_numbers_numeric\
    \ = sort { $a <=> $b } @numbers_numeric;\n    #my @sorted_numbers = map { $num2number{$_}\
    \ } @sorted_numbers_numeric;\n    my @sorted_numbers = sort { $number2num{$a}\
    \ <=> $number2num{$b} } @numbers;\n    return join(' ', @sorted_numbers);\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    my %order\
    \ = map { $_ => $number_order{$_} } @numbers;\n    my @sorted = sort { $order{$a}\
    \ <=> $order{$b} } @numbers;\n    return join ' ', @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted = sort { $dictionary{$a} <=> $dictionary{$b}\
    \ } split / /, $numbers;\n    return join \" \", @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @num_list = split / /, $numbers;\n    my %num_map\
    \ = (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ );\n    my @sorted_list = sort { $num_map{$a} <=> $num_map{$b} } @num_list;\n\
    \    return join \" \", @sorted_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split / /, $numbers;\n    my @results;\n\
    \    for my $num (@nums) {\n        $num = numeral_to_num($num);\n        push\
    \ @results, $num;\n    }\n    @results = sort {$a <=> $b} @results;\n    for my\
    \ $result (@results) {\n        $result = num_to_numeral($result);\n    }\n  \
    \  return join \" \", @results;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::numeral_to_num called at /tmp/tmpa6_1alah.pl
    line 11.

    '
  stdout: ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted_numbers = sort { $NUMBERS{$a} <=>\
    \ $NUMBERS{$b} } split(/\\s+/, $numbers);\n    return join(' ', @sorted_numbers);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my @sorted\
    \ = sort {$NUMBERS{$a} <=> $NUMBERS{$b}} @numbers;\n    return join(\" \", @sorted);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %number = (\n        zero  => 0,\n       \
    \ one   => 1,\n        two   => 2,\n        three => 3,\n        four  => 4,\n\
    \        five  => 5,\n        six   => 6,\n        seven => 7,\n        eight\
    \ => 8,\n        nine  => 9,\n    );\n    my @numbers = split(/ /, $numbers);\n\
    \    my @sorted = sort { $number{$a} <=> $number{$b} } @numbers;\n    return join('\
    \ ', @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@sorted) = sort { &to_number($a) <=> &to_number($b)\
    \ } split(/\\s+/, $numbers);\n    return join(\" \", @sorted);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::to_number called at /tmp/tmp8cj_a_j9.pl line
    8.

    '
  stdout: ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers_hash = ('zero' => 0, 'one' => 1,\
    \ 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7,\
    \ 'eight' => 8, 'nine' => 9);\n    my @num_array = split(/ /, $numbers);\n   \
    \ my @sorted_array = sort {$numbers_hash{$a} <=> $numbers_hash{$b}} @num_array;\n\
    \    my $sorted_numbers = join(\" \", @sorted_array);\n    return $sorted_numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers = qw(zero 0 one 1 two 2 three 3 four\
    \ 4 five 5 six 6 seven 7 eight 8 nine 9);\n    return join(\" \", sort { $numbers{$a}\
    \ <=> $numbers{$b} } split(/\\s+/, $numbers));\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my @digits\
    \ = map {ord(numerals_to_digit($_)) - 48} @numbers;\n    @digits = sort {$a <=>\
    \ $b} @digits;\n    @numbers = map {digit_to_numerals($_)} @digits;\n    return\
    \ join(\" \", @numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::numerals_to_digit called at /tmp/tmpmu9roppn.pl
    line 9.

    '
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %NUMBERS = ('zero' => 0, 'one' => 1, 'two'\
    \ => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9);\n    my @num_array = sort {$NUMBERS{$a} <=> $NUMBERS{$b}}\
    \ split(/ /, $numbers);\n    return join(\" \", @num_array);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted = sort {$numbers{$a} <=> $numbers{$b}}\
    \ (split \" \", $numbers);\n    return join(\" \", @sorted);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(' ', $numbers);\n    my %nums\
    \ = ('zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' =>\
    \ 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9);\n    my @sorted = sort\
    \ { $nums{$a} <=> $nums{$b} } @numbers;\n    my $output = '';\n    for (my $i\
    \ = 0; $i < @sorted; $i++) {\n        $output .= $sorted[$i];\n        if ($i\
    \ < @sorted - 1) {\n            $output .= ' ';\n        }\n    }\n    return\
    \ $output;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers = (\n\t'zero' => 0,\n\t'one' => 1,\n\
    \t'two' => 2,\n\t'three' => 3,\n\t'four' => 4,\n\t'five' => 5,\n\t'six' => 6,\n\
    \t'seven' => 7,\n\t'eight' => 8,\n\t'nine' => 9,\n    );\n    my %numbers_rev\
    \ = reverse %numbers;\n    my @ordered = sort { $numbers{$a} <=> $numbers{$b}\
    \ } split / /, $numbers;\n    my $result = join \" \", @ordered;\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted_numbers = sort { &to_number($a) <=>\
    \ &to_number($b) } &split_numbers($numbers);\n    return join(' ', @sorted_numbers);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::split_numbers called at /tmp/tmpqduce9ob.pl
    line 8.

    '
  stdout: ''
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %nums = (\n        'zero' => 0,\n        'one'\
    \ => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n  \
    \      'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9,\n    );\n    my %inv_nums = reverse %nums;\n   \
    \ my @result = split / /, $numbers;\n    @result = sort {$nums{$a} <=> $nums{$b}}\
    \ @result;\n    return join ' ', @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %nums = qw(zero 0 one 1 two 2 three 3 four\
    \ 4 five 5 six 6 seven 7 eight 8 nine 9);\n    my @numbers = split / /, $numbers;\n\
    \    return join \" \", sort { $nums{$a} <=> $nums{$b} } @numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $hash = {\n        zero  => 0,\n        one\
    \   => 1,\n        two   => 2,\n        three => 3,\n        four  => 4,\n   \
    \     five  => 5,\n        six   => 6,\n        seven => 7,\n        eight =>\
    \ 8,\n        nine  => 9,\n    };\n    my @nums = split / /, $numbers;\n    my\
    \ @nums_sort = sort { $hash->{$a} <=> $hash->{$b} } @nums;\n    return join('\
    \ ', @nums_sort);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted = sort(split(/ /, $numbers));\n  \
    \  return join(\" \", @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %words_to_numbers = (\n        'zero' => 0,\n\
    \        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four'\
    \ => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n  \
    \      'eight' => 8,\n        'nine' => 9,\n    );\n    my @numbers = sort { $words_to_numbers{$a}\
    \ <=> $words_to_numbers{$b} } split(/ /, $numbers);\n    return join(\" \", @numbers);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    return join(' ', sort {$NUMERALS{$a} <=> $NUMERALS{$b}}\
    \ split(/\\s+/, $numbers));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted =  map {$_->[0]} \n              \
    \    sort {$a->[1] <=> $b->[1]} \n                  map {[$_, $numbers{$_}]} \n\
    \                  split /\\s+/, $numbers;\n    return join(' ', @sorted);\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(' ', $numbers);\n    my\
    \ %num2digit = (zero=>0, one=>1, two=>2, three=>3, four=>4, five=>5, six=>6, seven=>7,\
    \ eight=>8, nine=>9);\n    my @sorted_numbers = sort {$num2digit{$a} <=> $num2digit{$b}}\
    \ @numbers;\n    return join(' ', @sorted_numbers);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split / /, $numbers;\n    my @sorted\
    \ = sort(@nums);\n    return join(' ', @sorted);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $map_to_num = {\n        'zero' => 0,\n  \
    \      'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four'\
    \ => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n  \
    \      'eight' => 8,\n        'nine' => 9,\n    };\n    my @numbers = split(/\\\
    s+/, $numbers);\n    my @sorted_numbers = sort { $map_to_num->{$a} <=> $map_to_num->{$b}\
    \ } @numbers;\n    return join(' ', @sorted_numbers);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014436
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my %number_to_numeral\
    \ = (\n        'zero'   => 0,\n        'one'    => 1,\n        'two'    => 2,\n\
    \        'three'  => 3,\n        'four'   => 4,\n        'five'   => 5,\n    \
    \    'six'    => 6,\n        'seven'  => 7,\n        'eight'  => 8,\n        'nine'\
    \   => 9,\n    );\n    my @sorted_numbers = sort { $number_to_numeral{$a} <=>\
    \ $number_to_numeral{$b} } @numbers;\n    my $ret = join(' ', @sorted_numbers);\n\
    \    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted_numbers = sort { order_by_number($a)\
    \ <=> order_by_number($b) } split / /, $numbers;\n    return join ' ', @sorted_numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::order_by_number called at /tmp/tmpadhd0_vc.pl
    line 8.

    '
  stdout: ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    # TODO: implement sorting here\n    my %hash\
    \ = ('zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' =>\
    \ 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9);\n    my @numbers =\
    \ split / /, $numbers;\n    my @sorted_numbers = sort {$hash{$a} <=> $hash{$b}}\
    \ @numbers;\n    my $sorted_string = join \" \", @sorted_numbers;\n    return\
    \ $sorted_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(/\\s+/, $numbers);\n   \
    \ return join(\" \", map { $NUMBERS{$_} }\n                 sort { $NUMBERS{$a}\
    \ <=> $NUMBERS{$b} }\n                     @numbers);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %num2int = (\n        zero => 0,\n       \
    \ one => 1,\n        two => 2,\n        three => 3,\n        four => 4,\n    \
    \    five => 5,\n        six => 6,\n        seven => 7,\n        eight => 8,\n\
    \        nine => 9,\n    );\n    my @numbers = sort { $num2int{$a} <=> $num2int{$b}\
    \ } split ' ', $numbers;\n    join ' ', @numbers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @words = split(/ /, $numbers);\n    my @numbers\
    \ = ();\n    foreach my $word (@words) {\n        if ($word eq 'zero') {\n   \
    \         push(@numbers, 0);\n        } elsif ($word eq 'one') {\n           \
    \ push(@numbers, 1);\n        } elsif ($word eq 'two') {\n            push(@numbers,\
    \ 2);\n        } elsif ($word eq 'three') {\n            push(@numbers, 3);\n\
    \        } elsif ($word eq 'four') {\n            push(@numbers, 4);\n       \
    \ } elsif ($word eq 'five') {\n            push(@numbers, 5);\n        } elsif\
    \ ($word eq 'six') {\n            push(@numbers, 6);\n        } elsif ($word eq\
    \ 'seven') {\n            push(@numbers, 7);\n        } elsif ($word eq 'eight')\
    \ {\n            push(@numbers, 8);\n        } elsif ($word eq 'nine') {\n   \
    \         push(@numbers, 9);\n        }\n    }\n    my @sorted_numbers = sort\
    \ {$a <=> $b} @numbers;\n    my @sorted_words = ();\n    foreach my $number (@sorted_numbers)\
    \ {\n        if ($number == 0) {\n            push(@sorted_words, 'zero');\n \
    \       } elsif ($number == 1) {\n            push(@sorted_words, 'one');\n  \
    \      } elsif ($number == 2) {\n            push(@sorted_words, 'two');\n   \
    \     } elsif ($number == 3) {\n            push(@sorted_words, 'three');\n  \
    \      } elsif ($number == 4) {\n            push(@sorted_words, 'four');\n  \
    \      } elsif ($number == 5) {\n            push(@sorted_words, 'five');\n  \
    \      } elsif ($number == 6) {\n            push(@sorted_words, 'six');\n   \
    \     } elsif ($number == 7) {\n            push(@sorted_words, 'seven');\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2xppui93.pl line 79, at
    end of line

    syntax error at /tmp/tmp2xppui93.pl line 79, at EOF

    Execution of /tmp/tmp2xppui93.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    return\
    \ join(\" \", sort {$number_hash{$a} <=> $number_hash{$b}} @numbers);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my @sorted\
    \ = sort { $num_map{$a} <=> $num_map{$b} } @numbers;\n    return join(\" \", @sorted);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %num_hash = (\n\t\t    'zero' => 0,\n\t\t\
    \    'one' => 1,\n\t\t    'two' => 2,\n\t\t    'three' => 3,\n\t\t    'four' =>\
    \ 4,\n\t\t    'five' => 5,\n\t\t    'six' => 6,\n\t\t    'seven' => 7,\n\t\t \
    \   'eight' => 8,\n\t\t    'nine' => 9,\n\t\t    );\n    my @numbers = split /\\\
    s+/, $numbers;\n    my @sorted = map { $num_hash{$_} } sort { $num_hash{$a} <=>\
    \ $num_hash{$b} } @numbers;\n    return join(\" \", @sorted);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %num_map = (\n        zero => 0,\n       \
    \ one => 1,\n        two => 2,\n        three => 3,\n        four => 4,\n    \
    \    five => 5,\n        six => 6,\n        seven => 7,\n        eight => 8,\n\
    \        nine => 9,\n    );\n    my @numbers = split / /, $numbers;\n    my @sorted\
    \ = sort { $num_map{$a} <=> $num_map{$b} } @numbers;\n    return join(' ', @sorted);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(/ /, $numbers);\n    my(@ordered)\
    \ = sort {$number_values{$a} <=> $number_values{$b}} @numbers;\n    my($result)\
    \ = join(\" \", @ordered);\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %order = ( zero => 0, one => 1, two => 2,\
    \ three => 3, four => 4, five => 5, six => 6, seven => 7, eight => 8, nine =>\
    \ 9 );\n    return join ' ', sort { $order{$a} <=> $order{$b} } split / /, $numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @words = split(/ /, $numbers);\n    my @integers\
    \ = ();\n    for my $word (@words) {\n        my $number = &word_to_number($word);\n\
    \        push(@integers, $number);\n    }\n    my @sorted_integers = sort {$a\
    \ <=> $b} @integers;\n    my @sorted_words = ();\n    for my $integer (@sorted_integers)\
    \ {\n        my $word = &number_to_word($integer);\n        push(@sorted_words,\
    \ $word);\n    }\n    my $sorted_numbers = join(\" \", @sorted_words);\n    return\
    \ $sorted_numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::word_to_number called at /tmp/tmppvbzifbn.pl
    line 11.

    '
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %hash_numbers = (\n        'zero' => 0,\n\
    \        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four'\
    \ => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n  \
    \      'eight' => 8,\n        'nine' => 9,\n    );\n    my @new_array = split('\
    \ ', $numbers);\n    my @sort_array = sort { $hash_numbers{$a} <=> $hash_numbers{$b}\
    \ } @new_array;\n    my $new_string = join(' ', @sort_array);\n    return $new_string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(' ', $numbers);\n    my %convert\
    \ = qw(zero 0 one 1 two 2 three 3 four 4 five 5 six 6 seven 7 eight 8 nine 9);\n\
    \    return join(' ', sort { $convert{$a} <=> $convert{$b} } @numbers);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(\" \", $numbers);\n    @numbers\
    \ = map { {key => $_, value => number_to_digit($_)} } @numbers;\n    @numbers\
    \ = sort { $a->{value} <=> $b->{value} } @numbers;\n    @numbers = map { $_->{key}\
    \ } @numbers;\n    return join(\" \", @numbers);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::number_to_digit called at /tmp/tmpvtwm3frp.pl
    line 9.

    '
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split / /, $numbers;\n    my %map\
    \ = (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ );\n    my @ordered = map { $_->[0] }\n                  sort { $a->[1] <=>\
    \ $b->[1] }\n                  map {[$_, $map{$_}]} @nums;\n    return join '\
    \ ', @ordered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split / /, $numbers;\n    my %hash;\n\
    \    $hash{$_} = num2number($_) for (@nums);\n    return join ' ', map { $_->[0]\
    \ }\n        sort { $a->[1] <=> $b->[1] }\n        map { [$_, $hash{$_}] } keys\
    \ %hash;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num2number called at /tmp/tmpzknku_96.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@result) = ();\n    my(%numbers) = ();\n \
    \   my(@numbers) = split(/ /, $numbers);\n    @numbers{@numbers} = (0..$#numbers);\n\
    \    @result = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join('\
    \ ', @result);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@nums) = split(\" \", $numbers);\n    my(@num_sort)\
    \ = sort { $n_to_num{$a} <=> $n_to_num{$b} } @nums;\n    return join(\" \", @num_sort);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @num = split(/ /, $numbers);\n    my @sort_num\
    \ = sort {$nums{$a} <=> $nums{$b}} @num;\n    my $sorted_num = join(' ', @sort_num);\n\
    \    return $sorted_num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    $numbers =~ s/^\\s+|\\s+$//g;\n    my @array_numbers\
    \ = split /\\s+/, $numbers;\n    @array_numbers = sort {numeral_to_number($a)\
    \ <=> numeral_to_number($b)} @array_numbers;\n    return join(' ', @array_numbers);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::numeral_to_number called at /tmp/tmp782ie613.pl
    line 10.

    '
  stdout: ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers_numeric = (\n        'zero' => 0,\n\
    \        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four'\
    \ => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n  \
    \      'eight' => 8,\n        'nine' => 9,\n    );\n    my @sorted_numbers = sort\
    \ { $numbers_numeric{$a} <=> $numbers_numeric{$b} } (split(/\\s+/, $numbers));\n\
    \    my $result = join(' ', @sorted_numbers);\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split ' ', $numbers;\n    my @nums2\
    \ = map {$num2number{$_}} @nums;\n    my @sorted = sort {$a <=> $b} @nums2;\n\
    \    my @nums3 = map {$number2num{$_}} @sorted;\n    return join ' ', @nums3;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers_arr = split(' ', $numbers);\n   \
    \ my %numbers_dict = (\n        'zero' => 0,\n        'one' => 1,\n        'two'\
    \ => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n \
    \       'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9,\n    );\n    my @numbers_sorted = sort { $numbers_dict{$a} <=> $numbers_dict{$b}\
    \ } @numbers_arr;\n    return join(' ', @numbers_sorted);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    # TODO: Implement this function.\n    my @input_words\
    \ = split(/ /, $numbers);\n    my @nums = qw(zero one two three four five six\
    \ seven eight nine);\n    my %nums_hash = ();\n    my @sorted_nums = ();\n   \
    \ foreach my $number(@nums){\n        $nums_hash{$number} = 0;\n    }\n    foreach\
    \ my $word(@input_words){\n        $nums_hash{$word} += 1;\n    }\n    foreach\
    \ my $number(@nums){\n        if($nums_hash{$number} == 1){\n            push(@sorted_nums,\
    \ $number);\n        }\n    }\n    return join(\" \", @sorted_nums);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %number_to_numeral = qw/\n        zero 0\n\
    \        one 1\n        two 2\n        three 3\n        four 4\n        five 5\n\
    \        six 6\n        seven 7\n        eight 8\n        nine 9\n    /;\n   \
    \ return join ' ', sort { $number_to_numeral{$a} <=> $number_to_numeral{$b} }\
    \ split / /, $numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    # ...\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = sort { $dict{$a} <=> $dict{$b}\
    \ } split / /, $numbers;\n    return join ' ', @numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@num) = split(/\\s+/, $numbers);\n    my %num_table\
    \ = qw(zero 0 one 1 two 2 three 3 four 4 five 5 six 6 seven 7 eight 8 nine 9);\n\
    \    my @new_nums = sort { $num_table{$a} <=> $num_table{$b} } @num;\n    my $new_str\
    \ = join(\" \", @new_nums);\n    return $new_str;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @digits = split(' ', $numbers);\n    foreach\
    \ my $digit (@digits) {\n        $digit = word_to_number($digit);\n    }\n   \
    \ @digits = sort { $a <=> $b } @digits;\n    foreach my $digit (@digits) {\n \
    \       $digit = number_to_word($digit);\n    }\n    return join(' ', @digits);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::word_to_number called at /tmp/tmpdr1nl1i6.pl
    line 10.

    '
  stdout: ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted = sort { $number_mapping{$a} <=> $number_mapping{$b}\
    \ } split / /, $numbers;\n    return join ' ', @sorted;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %map = (\n        zero  => 0,\n        one\
    \   => 1,\n        two   => 2,\n        three => 3,\n        four  => 4,\n   \
    \     five  => 5,\n        six   => 6,\n        seven => 7,\n        eight =>\
    \ 8,\n        nine  => 9,\n    );\n    my @sorted = map { $_->[0] } sort { $a->[1]\
    \ <=> $b->[1] } map { [ $_, $map{$_} ] } split ' ', $numbers;\n    return join\
    \ ' ', @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split(' ', $numbers);\n    # take\
    \ off the numeric values\n    foreach my $num (@nums) {\n        $num =~ s/[a-z]//g;\n\
    \    }\n    # sort them\n    my @sort_nums = sort {$a <=> $b} @nums;\n    # put\
    \ on the english values\n    foreach my $num (@sort_nums) {\n        if ($num\
    \ == 0) {\n            $num = \"zero\";\n        } elsif ($num == 1) {\n     \
    \       $num = \"one\";\n        } elsif ($num == 2) {\n            $num = \"\
    two\";\n        } elsif ($num == 3) {\n            $num = \"three\";\n       \
    \ } elsif ($num == 4) {\n            $num = \"four\";\n        } elsif ($num ==\
    \ 5) {\n            $num = \"five\";\n        } elsif ($num == 6) {\n        \
    \    $num = \"six\";\n        } elsif ($num == 7) {\n            $num = \"seven\"\
    ;\n        } elsif ($num == 8) {\n            $num = \"eight\";\n        } elsif\
    \ ($num == 9) {\n            $num = \"nine\";\n        }\n    }\n    return join('\
    \ ', @sort_nums);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers = (\n        'zero' => 0,\n     \
    \   'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' =>\
    \ 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n     \
    \   'eight' => 8,\n        'nine' => 9,\n    );\n    my @numbers = split(/ /,\
    \ $numbers);\n    @numbers = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n\
    \    return join(' ', @numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %hash = ('zero' => 0, 'one' => 1, 'two' =>\
    \ 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9);\n    my @sorted;\n    my @numbers = split(' ', $numbers);\n\
    \    foreach my $number (@numbers) {\n        push(@sorted, $hash{$number});\n\
    \    }\n    my @sorted = sort {$a <=> $b} @sorted;\n    my @return;\n    foreach\
    \ my $number (@sorted) {\n        foreach my $key (keys %hash) {\n           \
    \ if ($hash{$key} == $number) {\n                push(@return, $key);\n      \
    \      }\n        }\n    }\n    return join(' ', @return);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my @sorted\
    \ = sort { &numberal_to_number($a) <=> &numberal_to_number($b) } @numbers;\n \
    \   return join(' ', @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::numberal_to_number called at /tmp/tmpt7z9rcrb.pl
    line 9.

    '
  stdout: ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    my @numbers_num;\n\
    \    my %num_val = (\n        zero => 0,\n        one => 1,\n        two => 2,\n\
    \        three => 3,\n        four => 4,\n        five => 5,\n        six => 6,\n\
    \        seven => 7,\n        eight => 8,\n        nine => 9,\n    );\n    foreach\
    \ my $number (@numbers) {\n        push @numbers_num, $num_val{$number};\n   \
    \ }\n    my @sorted_numbers = sort {$a <=> $b} @numbers_num;\n    my @sorted_numbers_str;\n\
    \    foreach my $number (@sorted_numbers) {\n        my $num_key = get_key($number);\n\
    \        push @sorted_numbers_str, $num_key;\n    }\n    my $final_str = join('\
    \ ', @sorted_numbers_str);\n    return $final_str;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_key called at /tmp/tmpezo7_2cp.pl line
    28.

    '
  stdout: ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(\" \", $numbers);\n    return\
    \ join(\" \", sort { $num_map{$a} <=> $num_map{$b} } @numbers);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers = qw/ zero 0 one 1 two 2 three 3\
    \ four 4 five 5 six 6 seven 7 eight 8 nine 9 /;\n    my @numbers = sort { $numbers{$a}\
    \ <=> $numbers{$b} } split / /, $numbers;\n    join ' ', @numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my %number_hash\
    \ = (\n        zero => 0,\n        one => 1,\n        two => 2,\n        three\
    \ => 3,\n        four => 4,\n        five => 5,\n        six => 6,\n        seven\
    \ => 7,\n        eight => 8,\n        nine => 9,\n    );\n    my @sorted_numbers\
    \ = sort { $number_hash{$a} <=> $number_hash{$b} } @numbers;\n    my $sorted_numbers\
    \ = join(\" \", @sorted_numbers);\n    return $sorted_numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $n = length($numbers);\n    my $min;\n   \
    \ my $i;\n    my $swapped;\n    my @numbers = split(/ /, $numbers);\n    do {\n\
    \        $swapped = 0;\n        for ($i = 0; $i < $n - 1; $i++) {\n          \
    \  if (number_value($numbers[$i]) > number_value($numbers[$i + 1])) {\n      \
    \          $min = $numbers[$i + 1];\n                $numbers[$i + 1] = $numbers[$i];\n\
    \                $numbers[$i] = $min;\n                $swapped = 1;\n       \
    \     }\n        }\n    } while ($swapped);\n    return join(' ', @numbers);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::number_value called at /tmp/tmpkst8gjsg.pl
    line 16.

    '
  stdout: ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split(' ', $numbers);\n    my @nums_sorted\
    \ = map {$H2N{$_}} sort {$H2N{$a} <=> $H2N{$b}} @nums;\n    return join(' ', @nums_sorted);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted = $numbers =~ /\\b(?:(?:one|two|three|four|five|six|seven|eight|nine|zero)\\\
    s*)+/gi;\n    my %numbers = (\n        'zero' => 0,\n        'one' => 1,\n   \
    \     'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five'\
    \ => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n \
    \       'nine' => 9,\n    );\n    return join(\" \", sort { $numbers{$a} <=> $numbers{$b}\
    \ } @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split(/ /, $numbers);\n    my @sorted\
    \ = sort { $nums{$a} <=> $nums{$b} } @nums;\n    my $return = join(' ', @sorted);\n\
    \    return $return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted_numbers = sort _numbers_cmp split\
    \ /\\s+/, $numbers;\n    return join ' ', @sorted_numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined sort subroutine "main::_numbers_cmp" called at /tmp/tmpsrihjzod.pl
    line 8.

    '
  stdout: ''
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $sorted_numbers = \"\";\n    my @numbers =\
    \ split(/ /, $numbers);\n    my %number_values = (\n        \"zero\" => 0,\n \
    \       \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n      \
    \  \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\"\
    \ => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    );\n    my @sorted_numbers;\n\
    \    foreach my $number (@numbers) {\n        push(@sorted_numbers, $number_values{$number});\n\
    \    }\n    @sorted_numbers = sort {$a <=> $b} @sorted_numbers;\n    my %sorted_number_values\
    \ = reverse %number_values;\n    foreach my $number (@sorted_numbers) {\n    \
    \    $sorted_numbers .= \" \" . $sorted_number_values{$number};\n    }\n    $sorted_numbers\
    \ =~ s/^ //;\n    return $sorted_numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $sorted_numbers = '';\n    my @sorted_numbers\
    \ = ();\n    my %numerals = (\n        'zero' => 0,\n        'one' => 1,\n   \
    \     'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five'\
    \ => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n \
    \       'nine' => 9,\n    );\n    # convert string to array\n    my @numbers =\
    \ split(' ', $numbers);\n    # convert array of string numerals to array of integers\n\
    \    foreach my $numeral (@numbers) {\n        push(@sorted_numbers, $numerals{$numeral});\n\
    \    }\n    # sort array of integers\n    @sorted_numbers = sort { $a <=> $b }\
    \ @sorted_numbers;\n    # convert array of integers to array of string numerals\n\
    \    foreach my $number (@sorted_numbers) {\n        foreach my $numeral (keys\
    \ %numerals) {\n            if ($numerals{$numeral} == $number) {\n          \
    \      $sorted_numbers .= $numeral . ' ';\n            }\n        }\n    }\n \
    \   # trim the trailing space\n    $sorted_numbers =~ s/\\s+$//;\n    return $sorted_numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(/ /, $numbers);\n    my(@word_numbers)\
    \ = map $number_word_to_number{$_}, @numbers;\n    my(@sorted_numbers) = sort\
    \ {$a <=> $b} @word_numbers;\n    my(@sorted_word_numbers) = map $number_to_number_word{$_},\
    \ @sorted_numbers;\n    return join(' ', @sorted_word_numbers);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    return undef if ! defined $numbers;\n    my @numbers\
    \ = split /\\s+/, $numbers;\n    @numbers = sort {$words{$a} <=> $words{$b}} @numbers;\n\
    \    return join(' ', @numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split(/ /, $numbers);\n    @nums =\
    \ sort { $number_to_word{$a} cmp $number_to_word{$b} } @nums;\n    return join(\"\
    \ \", @nums);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split(/ /, $numbers);\n    my @result\
    \ = map { $_->[0] } sort { $a->[1] <=> $b->[1] } map { my $x = $_; $x =~ s/one/1/;\
    \ $x =~ s/two/2/; $x =~ s/three/3/; $x =~ s/four/4/; $x =~ s/five/5/; $x =~ s/six/6/;\
    \ $x =~ s/seven/7/; $x =~ s/eight/8/; $x =~ s/nine/9/; $x =~ s/zero/0/; [$_, $x]\
    \ } @nums;\n    return join(\" \", @result);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = sort { $number_map{$a} <=> $number_map{$b}\
    \ } split(/ /, $numbers);\n    return join(\" \", @numbers);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @array = split / /, $numbers;\n    my @out;\n\
    \    my %hash = (\n        zero => 0,\n        one => 1,\n        two => 2,\n\
    \        three => 3,\n        four => 4,\n        five => 5,\n        six => 6,\n\
    \        seven => 7,\n        eight => 8,\n        nine => 9,\n    );\n    foreach\
    \ my $num (@array) {\n        push @out, $hash{$num};\n    }\n    @out = sort\
    \ {$a <=> $b} @out;\n    my @out2;\n    foreach my $num (@out) {\n        my %hash_reverse\
    \ = reverse %hash;\n        push @out2, $hash_reverse{$num};\n    }\n    my $out_final\
    \ = join \" \", @out2;\n    return $out_final;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @words = split / /, $numbers;\n    my @digits\
    \ = map { numeral2digit($_) } @words;\n    @digits = sort { $a <=> $b } @digits;\n\
    \    my @words = map { digit2numeral($_) } @digits;\n    return join ' ', @words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::numeral2digit called at /tmp/tmp94y2n14u.pl
    line 9.

    '
  stdout: ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split / /, $numbers;\n    my(@sorted);\n\
    \    foreach my $word (sort by_digit @numbers) {\n        push @sorted, $word;\n\
    \    }\n    return join(' ', @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined sort subroutine "main::by_digit" called at /tmp/tmparnl1vpk.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = map {$numbers[$_] => $_} 0..$#numbers;\n    @numbers = sort { $numbers{$a}\
    \ <=> $numbers{$b} } @numbers;\n    return join(' ', @numbers);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    my %numbers;\n\
    \    for my $number (@numbers) {\n        $numbers{$number} = num_to_numeral($number);\n\
    \    }\n    @numbers = sort { $numbers{$a} <=> $numbers{$b} } keys %numbers;\n\
    \    return join \" \", @numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num_to_numeral called at /tmp/tmpczvbm55u.pl
    line 11.

    '
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %hash = (zero => 0, one => 1, two => 2, three\
    \ => 3, four => 4, five => 5, six => 6, seven => 7, eight => 8, nine => 9);\n\
    \    my @numbers = split / /, $numbers;\n    my @ans;\n    for (my $i = 0; $i\
    \ < @numbers; $i++) {\n\tpush @ans, $hash{$numbers[$i]};\n    }\n    @ans = sort\
    \ {$a <=> $b} @ans;\n    for (my $i = 0; $i < @ans; $i++) {\n\t$ans[$i] =~ s/0/zero/;\n\
    \t$ans[$i] =~ s/1/one/;\n\t$ans[$i] =~ s/2/two/;\n\t$ans[$i] =~ s/3/three/;\n\t\
    $ans[$i] =~ s/4/four/;\n\t$ans[$i] =~ s/5/five/;\n\t$ans[$i] =~ s/6/six/;\n\t\
    $ans[$i] =~ s/7/seven/;\n\t$ans[$i] =~ s/8/eight/;\n\t$ans[$i] =~ s/9/nine/;\n\
    \    }\n    return join(' ', @ans);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers = qw(zero 0 one 1 two 2 three 3 four\
    \ 4 five 5 six 6 seven 7 eight 8 nine 9);\n    return join ' ', (sort { $numbers{$a}\
    \ <=> $numbers{$b} } split ' ', $numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers = (\n        'zero' => 0,\n     \
    \   'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' =>\
    \ 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n     \
    \   'eight' => 8,\n        'nine' => 9,\n    );\n    my @numbers = split(/ /,\
    \ $numbers);\n    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b} }\
    \ @numbers;\n    return join(' ', @sorted_numbers);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(/ /, $numbers);\n    my\
    \ %number_to_int = ('zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four'\
    \ => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9);\n \
    \   my @sorted_numbers = sort {$number_to_int{$a} <=> $number_to_int{$b}} @numbers;\n\
    \    return join(\" \", @sorted_numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    # your code here\n    my @numbers = split(' ',\
    \ $numbers);\n    my @numbers_sort = sort{$a <=> $b} @numbers;\n    return join('\
    \ ', @numbers_sort);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %order = (\n        zero => 0,\n        one\
    \ => 1,\n        two => 2,\n        three => 3,\n        four => 4,\n        five\
    \ => 5,\n        six => 6,\n        seven => 7,\n        eight => 8,\n       \
    \ nine => 9,\n    );\n    return join ' ', sort { $order{$a} <=> $order{$b} }\
    \ split / /, $numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    # TODO:\
    \ implement this\n    return $numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(/\\s+/, $numbers);\n   \
    \ my(@sorted_numbers);\n    my(%numbers) = (\n\t\"zero\" => 0,\n\t\"one\" => 1,\n\
    \t\"two\" => 2,\n\t\"three\" => 3,\n\t\"four\" => 4,\n\t\"five\" => 5,\n\t\"six\"\
    \ => 6,\n\t\"seven\" => 7,\n\t\"eight\" => 8,\n\t\"nine\" => 9,\n    );\n    foreach\
    \ my $numeral (sort @numbers) {\n\tif(exists $numbers{$numeral}) {\n\t    push(@sorted_numbers,\
    \ $numeral);\n\t}\n    }\n    return join(\" \", @sorted_numbers);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted = sort {$numbers_to_numbers{$a} <=>\
    \ $numbers_to_numbers{$b}} split(/\\s+/, $numbers);\n    return join(' ', @sorted);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numeral_list = split / /, $numbers;\n   \
    \ my @sorted_numeral_list = sort {$numeral_map{$a} <=> $numeral_map{$b}} @numeral_list;\n\
    \    return join ' ', @sorted_numeral_list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $nums = {\n        'zero' => 0,\n        'one'\
    \ => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n  \
    \      'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9,\n    };\n    my @sorted = sort {$nums->{$a} <=>\
    \ $nums->{$b}} split(/\\s+/, $numbers);\n    return join(' ', @sorted);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(\" \", $numbers);\n    my\
    \ @sorted_numbers = sort { number_to_integer($a) <=> number_to_integer($b) } @numbers;\n\
    \    my $return_string = join(\" \", @sorted_numbers);\n    return $return_string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::number_to_integer called at /tmp/tmpszeoahgx.pl
    line 9.

    '
  stdout: ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    return join(\" \", sort { $numbers{$a} <=> $numbers{$b}\
    \ } split(\" \", $numbers));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %lookup = ( zero => 0, one => 1, two => 2,\
    \ three => 3, four => 4, five => 5, six => 6, seven => 7, eight => 8, nine =>\
    \ 9 );\n    my @sorted = sort { $lookup{$a} <=> $lookup{$b} } split ' ', $numbers;\n\
    \    return join(' ', @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    return join(' ', sort { $numbers{$a} <=> $numbers{$b}\
    \ } split(/\\s+/, $numbers));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $translation = {\n        'zero'  => 0,\n\
    \        'one'   => 1,\n        'two'   => 2,\n        'three' => 3,\n       \
    \ 'four'  => 4,\n        'five'  => 5,\n        'six'   => 6,\n        'seven'\
    \ => 7,\n        'eight' => 8,\n        'nine'  => 9,\n    };\n    my @sorted\
    \ =\n      map { $translation->{$_} }\n      sort { $translation->{$a} <=> $translation->{$b}\
    \ }\n      split( /\\s+/, $numbers );\n    return join( ' ', @sorted );\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @tokens = split(' ', $numbers);\n    my %string2num\
    \ = (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ );\n    @tokens = sort { $string2num{$a} <=> $string2num{$b} } @tokens;\n  \
    \  return join(' ', @tokens);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(' ', $numbers);\n    my @sorted\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join(' ', @sorted);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = map $number_to_numeral[$_], sort { $number_to_numeral[$a] <=> $number_to_numeral[$b]\
    \ } @numbers;\n    return join(\" \", @sorted_numbers);\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted_numbers = sort { $numerals{$a} <=>\
    \ $numerals{$b} } split / /, $numbers;\n    return join ' ', @sorted_numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(\" \", $numbers);\n    my\
    \ %mapping = (\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\"\
    \ => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" =>\
    \ 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n\
    \        \"nine\" => 9,\n    );\n    # You can't use $n for foreach...you must\
    \ use $number.\n    # https://perldoc.perl.org/perlsyn.html#Foreach-Loops\n  \
    \  # Iterates over the list values, assigning each one in turn to VAR.\n    foreach\
    \ my $number (@numbers) {\n        $number = $mapping{$number};\n    }\n    #\
    \ https://perldoc.perl.org/functions/sort.html\n    # In scalar context, returns\
    \ the sorted list value and sets $a and $b to the last two values compared.\n\
    \    @numbers = sort {$a <=> $b} @numbers;\n    foreach my $number (@numbers)\
    \ {\n        my %mapping = reverse %mapping;\n        $number = $mapping{$number};\n\
    \    }\n    return join(\" \", @numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(' ', $numbers);\n    my @sorted\
    \ = sort {\n        $number_to_digit{$a} <=> $number_to_digit{$b}\n    } @numbers;\n\
    \    return join(' ', @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $str = '';\n    my @string = split / /, $numbers;\n\
    \    my %map = ( 'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' =>\
    \ 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9 );\n   \
    \ my @array = map { $map{$_} } @string;\n    @array = sort { $a <=> $b } @array;\n\
    \    $str = join(' ', @array);\n    return $str;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@numbers) = split(/\\s+/, $numbers);\n   \
    \ my @sorted = sort { $NUMERAL{$a} <=> $NUMERAL{$b} } @numbers;\n    return join(\"\
    \ \", @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    return '' if $numbers eq '';\n    my %num_hash\
    \ = (\n        'zero'  => 0,\n        'one'   => 1,\n        'two'   => 2,\n \
    \       'three' => 3,\n        'four'  => 4,\n        'five'  => 5,\n        'six'\
    \   => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'  => 9,\n\
    \    );\n    my @numbers = split(/\\s+/, $numbers);\n    my @sorted_numbers =\
    \ sort { $num_hash{$a} <=> $num_hash{$b} } @numbers;\n    return join(' ', @sorted_numbers);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @list = split(\" \", $numbers);\n    @list\
    \ = sort { $DIGITS{$a} <=> $DIGITS{$b} } @list;\n    return join(\" \", @list);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @nums = split / /, $numbers;\n    my %num_to_digit\
    \ = (\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ );\n    my @sorted = sort { $num_to_digit{$a} <=> $num_to_digit{$b} } @nums;\n\
    \    return join(' ', @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @output;\n    my @numbers = split / /, $numbers;\n\
    \    my @sorted_numbers = sort @numbers;\n    foreach my $number (@sorted_numbers)\
    \ {\n        push @output, $number;\n    }\n    return join \" \", @output;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my(@nums) = split(\" \", $numbers);\n    my(@out);\n\
    \    foreach my $num (@nums) {\n        push(@out, $num) if ($num =~ /\\b(zero|one|two|three|four|five|six|seven|eight|nine)\\\
    b/);\n    }\n    @out = sort(@out);\n    return join(\" \", @out);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    foreach\
    \ my $number (@numbers) {\n        unless ($number eq 'zero' || $number eq 'one'\
    \ || $number eq 'two' || $number eq 'three' || $number eq 'four' || $number eq\
    \ 'five' || $number eq 'six' || $number eq 'seven' || $number eq 'eight' || $number\
    \ eq 'nine') {\n            return undef;\n        }\n    }\n    my @sorted =\
    \ sort(@numbers);\n    return join(' ', @sorted);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %num_hash = (\n    \"zero\" => 0,\n    \"\
    one\" => 1,\n    \"two\" => 2,\n    \"three\" => 3,\n    \"four\" => 4,\n    \"\
    five\" => 5,\n    \"six\" => 6,\n    \"seven\" => 7,\n    \"eight\" => 8,\n  \
    \  \"nine\" => 9,\n    );\n    my @numbers_array = split(' ', $numbers);\n   \
    \ my @numbers_ordered = sort { $num_hash{$a} <=> $num_hash{$b} } @numbers_array;\n\
    \    my $return_string = \"\";\n    foreach (@numbers_ordered) {\n        $return_string\
    \ = $return_string . $_ . \" \";\n    }\n    return $return_string;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    return join(\" \", sort map { uc($_) } split(\"\
    \ \", $numbers));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(' ', $numbers);\n    my @words\
    \ = qw(zero one two three four five six seven eight nine);\n    my %number_for\
    \ = map { $words[$_] => $_ } 0..$#words;\n    @numbers = sort { $number_for{$a}\
    \ <=> $number_for{$b} } @numbers;\n    return join ' ', @numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my @sorted_numbers\
    \ = sort {number_to_int($a) <=> number_to_int($b)} @numbers;\n    return join(\"\
    \ \", @sorted_numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::number_to_int called at /tmp/tmp_n0sygf0.pl
    line 9.

    '
  stdout: ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(' ', $numbers);\n    my %order\
    \ = ( 'zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' =>\
    \ 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9 );\n    @numbers = sort\
    \ { $order{$a} <=> $order{$b} } @numbers;\n    return join(' ', @numbers);\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @sorted_numbers = map { $_->[0] }\n    sort\
    \ { $a->[1] <=> $b->[1] }\n    map { [ $_, number_to_numberal($_) ] }\n    numberals_to_numbers($numbers);\n\
    \    return join(\" \", @sorted_numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::numberals_to_numbers called at /tmp/tmpciiolana.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %numbers = (\n        zero  => 0,\n      \
    \  one   => 1,\n        two   => 2,\n        three => 3,\n        four  => 4,\n\
    \        five  => 5,\n        six   => 6,\n        seven => 7,\n        eight\
    \ => 8,\n        nine  => 9,\n    );\n    my @numbers = split(/\\s+/, $numbers);\n\
    \    return join ' ', sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    my %numbers\
    \ = map { $_ => $_ } @numbers;\n    my @numbers_n = sort { $numbers{$a} <=> $numbers{$b}\
    \ } @numbers;\n    return join ' ', @numbers_n;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    return join(\" \", sort {\n        $NUMS{$a}\
    \ <=> $NUMS{$b}\n    } split(/\\s+/, $numbers));\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @args = split / /, $numbers;\n    my %numbers\
    \ = (\n        zero => 0,\n        one => 1,\n        two => 2,\n        three\
    \ => 3,\n        four => 4,\n        five => 5,\n        six => 6,\n        seven\
    \ => 7,\n        eight => 8,\n        nine => 9,\n    );\n    my @sorted = sort\
    \ { $numbers{$a} <=> $numbers{$b} } @args;\n    return join ' ', @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @num = sort {$num_convert{$a} <=> $num_convert{$b}}\
    \ split(/\\s+/, $numbers);\n    return join(\" \", @num);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @array = split / /, $numbers;\n    my @sorted\
    \ = sort { $a <=> $b } @array;\n    my $result = \"\";\n    foreach (@sorted)\
    \ {\n        $result .= $_ . \" \";\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %sort_order = (\n        'zero'  => 0,\n \
    \       'one'   => 1,\n        'two'   => 2,\n        'three' => 3,\n        'four'\
    \  => 4,\n        'five'  => 5,\n        'six'   => 6,\n        'seven' => 7,\n\
    \        'eight' => 8,\n        'nine'  => 9,\n    );\n    my @sorted = sort {$sort_order{$a}\
    \ <=> $sort_order{$b}} split(' ', $numbers);\n    return join(' ', @sorted);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(\" \", $numbers);\n    my\
    \ %numbers = (\n        zero  => 0,\n        one   => 1,\n        two   => 2,\n\
    \        three => 3,\n        four  => 4,\n        five  => 5,\n        six  \
    \ => 6,\n        seven => 7,\n        eight => 8,\n        nine  => 9,\n    );\n\
    \    my $is_numbers = 1;\n    foreach my $number (@numbers) {\n        if (!exists($numbers{$number}))\
    \ {\n            $is_numbers = 0;\n            last;\n        }\n    }\n    if\
    \ ($is_numbers) {\n        foreach my $i (0..$#numbers) {\n            foreach\
    \ my $j ($i+1..$#numbers) {\n                if ($numbers{$numbers[$i]} > $numbers{$numbers[$j]})\
    \ {\n                    my $tmp = $numbers[$i];\n                    $numbers[$i]\
    \ = $numbers[$j];\n                    $numbers[$j] = $tmp;\n                }\n\
    \            }\n        }\n        return join(\" \", @numbers);\n    }\n    else\
    \ {\n        return \"Input string is not a space-delimited string of numbers\
    \ from 'zero' to 'nine'\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three five nine\"\
    ),\"three five nine\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
    \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    @numbers\
    \ = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n    return join \" \", @numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    my @sorted\
    \ = sort numbers_to_ints @numbers;\n    return join(' ', @sorted);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined sort subroutine "main::numbers_to_ints" called at /tmp/tmpaqeh11n5.pl
    line 9.

    '
  stdout: ''
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $sorted = '';\n    my %number_map = ('zero'=>0,\
    \ 'one'=>1, 'two'=>2, 'three'=>3, 'four'=>4, 'five'=>5, 'six'=>6, 'seven'=>7,\
    \ 'eight'=>8, 'nine'=>9);\n    my @numbers = split(/ /, $numbers);\n    @numbers\
    \ = sort {$number_map{$a} <=> $number_map{$b}} @numbers;\n    foreach (@numbers)\
    \ {\n        $sorted .= $_ . ' ';\n    }\n    $sorted =~ s/ $//;\n    return $sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    my @output\
    \ = ();\n    my %num = ();\n    foreach my $numeral (@numbers) {\n        if($numeral\
    \ eq 'zero') {\n            $num{$numeral} = 0;\n        }\n        elsif($numeral\
    \ eq 'one') {\n            $num{$numeral} = 1;\n        }\n        elsif($numeral\
    \ eq 'two') {\n            $num{$numeral} = 2;\n        }\n        elsif($numeral\
    \ eq 'three') {\n            $num{$numeral} = 3;\n        }\n        elsif($numeral\
    \ eq 'four') {\n            $num{$numeral} = 4;\n        }\n        elsif($numeral\
    \ eq 'five') {\n            $num{$numeral} = 5;\n        }\n        elsif($numeral\
    \ eq 'six') {\n            $num{$numeral} = 6;\n        }\n        elsif($numeral\
    \ eq 'seven') {\n            $num{$numeral} = 7;\n        }\n        elsif($numeral\
    \ eq 'eight') {\n            $num{$numeral} = 8;\n        }\n        elsif($numeral\
    \ eq 'nine') {\n            $num{$numeral} = 9;\n        }\n    }\n    @output\
    \ = sort { $num{$a} <=> $num{$b} } keys %num;\n    return join(' ', @output);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split / /, $numbers;\n    my @nums\
    \ = ();\n    my @num_map = qw(zero one two three four five six seven eight nine);\n\
    \    for (my $i = 0; $i < scalar @numbers; $i++) {\n        push @nums, $num_map[index($numbers[$i],\
    \ @num_map)];\n    }\n    my @sorted = sort { $a <=> $b } @nums;\n    @nums =\
    \ ();\n    for (my $i = 0; $i < scalar @sorted; $i++) {\n        push @nums, $num_map[$sorted[$i]];\n\
    \    }\n    return join ' ', @nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014437
- exit_code: 255
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my $result = \"\";\n    my @numbers = split('\
    \ ', $numbers);\n    my @sorted = map { $_->[0] } sort { $a->[1] <=> $b->[1] }\
    \ map { [$_, convert($_)] } @numbers;\n    $result = join(' ', @sorted);\n   \
    \ return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::convert called at /tmp/tmpxfgkvhen.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %nums = (\n        'zero'   => 0,\n      \
    \  'one'    => 1,\n        'two'    => 2,\n        'three'  => 3,\n        'four'\
    \   => 4,\n        'five'   => 5,\n        'six'    => 6,\n        'seven'  =>\
    \ 7,\n        'eight'  => 8,\n        'nine'   => 9,\n    );\n    my @list = split('\
    \ ', $numbers);\n    my @sorted = sort { $nums{$a} <=> $nums{$b} } @list;\n  \
    \  return join(' ', @sorted);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\"),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    three\"),\"three\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->(\"three five nine\"),\"three five nine\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    five zero four seven nine eight\"),\"zero four five seven eight nine\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    six five four three two one zero\"),\"zero one two three four five six\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 0
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my %num2int = (\n        zero => 0,\n       \
    \ one => 1,\n        two => 2,\n        three => 3,\n        four => 4,\n    \
    \    five => 5,\n        six => 6,\n        seven => 7,\n        eight => 8,\n\
    \        nine => 9,\n    );\n    my @sorted = sort {$num2int{$a} <=> $num2int{$b}}\
    \ split / /, $numbers;\n    return join \" \", @sorted;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660014437
- exit_code: 1
  program: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
    \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
    \ {\n    my($numbers) = @_;\n    my @numbers = split(/ /, $numbers);\n    return\
    \ join(\" \", sort {$map_values{$a} <=> $map_values{$b}} @numbers);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"three\"),\"three\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\
    \ five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
    \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six\
    \ five four three two one zero\"),\"zero one two three four five six\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660014437
