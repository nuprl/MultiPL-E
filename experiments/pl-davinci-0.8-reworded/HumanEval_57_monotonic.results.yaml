language: pl
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my($x,\
    \ $d, $i);\n    $d = 0;\n    for ($i = 1; $i < @$l; $i++) {\n\t$x = $l->[$i-1]\
    \ <=> $l->[$i];\n\treturn \"\" if !$x;\n\treturn \"\" if $d && $d != $x;\n\t$d\
    \ = $x;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4,\
    \ 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    return\
    \ unless @$l >= 2;\n    my $dir = $l->[1] > $l->[0] ? 1 : -1;\n    for (my $i\
    \ = 2; $i < @$l; $i++) {\n        return if $dir == 1 && $l->[$i] < $l->[$i-1];\n\
    \        return if $dir == -1 && $l->[$i] > $l->[$i-1];\n    }\n    return 1;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5,\
    \ 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my($d);\n\
    \    return 0 if $#$l < 1;\n    $d = $l->[1] <=> $l->[0];\n    return 0 if $d\
    \ == 0;\n    foreach my $i (1 .. $#$l - 1) {\n        my($d2) = $l->[$i + 1] <=>\
    \ $l->[$i];\n        return 0 if $d2 * $d < 0;\n    }\n    return 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my($i,\
    \ $m, $mm);\n    for $i (1 .. $#$l) {\n\tif (defined($m)) {\n\t    $mm = ${$l}[$i]\
    \ - ${$l}[$i-1];\n\t    if ($mm != 0) {\n\t\treturn if $mm * $m < 0;\n\t    }\n\
    \t} else {\n\t    $m = ${$l}[$i] - ${$l}[$i-1];\n\t}\n    }\n    return 1;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5,\
    \ 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 0
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my($a,\
    \ $b);\n    my($decreasing) = 0;\n    my($increasing) = 0;\n    for (my $i = 0;\
    \ $i < $#$l; $i++) {\n        $a = $l->[$i];\n        $b = $l->[$i+1];\n     \
    \   if ($a > $b) {\n            if ($increasing) {\n                return \"\"\
    ;\n            }\n            $decreasing = 1;\n        } elsif ($a < $b) {\n\
    \            if ($decreasing) {\n                return \"\";\n            }\n\
    \            $increasing = 1;\n        }\n    }\n    return 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my($a,\
    \ $b);\n    for $a ( @$l ) {\n        for $b ( @$l ) {\n            if ($a < $b)\
    \ {\n                return 0;\n            }\n        }\n    }\n    return 1;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5,\
    \ 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 0
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my\
    \ $step;\n    for (my $i = 1; $i < @$l; $i++) {\n        my $d = $l->[$i] - $l->[$i-1];\n\
    \        if (defined $step) {\n            return \"\" if $d * $step < 0;\n  \
    \      } else {\n            $step = $d;\n        }\n    }\n    return 1;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5,\
    \ 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821459
- exit_code: 0
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my\
    \ $c = 0;\n    for(my $i = 1; $i < @$l; $i++) {\n        if(($l->[$i] - $l->[$i-1])\
    \ * $c < 0) {\n            return \"\";\n        }\n        $c = $l->[$i] - $l->[$i-1];\n\
    \    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my($i,\
    \ $n);\n    return 0 if @$l < 2;\n    $n = $l->[0];\n    for ($i = 1; $i < @$l;\
    \ $i++) {\n\tif ($n != $l->[$i]) {\n\t    return 0 if $i != 1;\n\t    return 0\
    \ if $n < $l->[$i];\n\t    $n = $l->[$i];\n\t}\n    }\n    return 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my($i,\
    \ $f);\n    for $i (1 .. $#$l) {\n\treturn \"\" if abs($l->[$i] - $l->[$i-1])\
    \ != 1;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4,\
    \ 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my\
    \ $state = undef;\n    foreach my $i (1..$#$l) {\n        my $s = $l->[$i-1] <=>\
    \ $l->[$i];\n        if(defined($state)) {\n            if($state != $s) {\n \
    \               return undef;\n            }\n        } else {\n            $state\
    \ = $s;\n        }\n    }\n    return defined($state) ? $state : 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 0
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my($a)\
    \ = $l->[0];\n    my($i);\n    my($isinc);\n    my($isdec);\n    for($i = 1; $i\
    \ < @$l; $i++) {\n\tif ($l->[$i] > $a) {\n\t    $isinc = 1;\n\t} elsif ($l->[$i]\
    \ < $a) {\n\t    $isdec = 1;\n\t}\n\tif ($isinc && $isdec) {\n\t    return \"\"\
    ;\n\t}\n\t$a = $l->[$i];\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821459
- exit_code: 0
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my\
    \ $d;\n    my $i;\n    my $m;\n    my $ret = 1;\n    my $n = @$l;\n    for ($i\
    \ = 1; $i < $n; $i++) {\n\t$m = $l->[$i] - $l->[$i - 1];\n\tif ($d) {\n\t    if\
    \ ($m * $d < 0) {\n\t\t$ret = \"\";\n\t\tlast;\n\t    }\n\t}\n\telse {\n\t   \
    \ $d = $m;\n\t}\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    if\
    \ (@$l == 0) { return 0; }\n    if (@$l == 1) { return 1; }\n    my($b) = $l->[0];\n\
    \    my($c) = $l->[1];\n    my($state) = 0;\n    if ($b > $c) { $state = -1; }\n\
    \    if ($b < $c) { $state = 1; }\n    for (my($i) = 2; $i < @$l; $i++) {\n\t\
    my($d) = $l->[$i];\n\tif ($state == -1 && $c < $d) { return 0; }\n\tif ($state\
    \ == 1 && $c > $d) { return 0; }\n\t$c = $d;\n    }\n    return 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my\
    \ $monotonic = 1;\n    if ( @$l ) {\n        my $prev = $l->[0];\n        for\
    \ my $i ( 1 .. $#$l ) {\n            my $elt = $l->[$i];\n            if ( $elt\
    \ < $prev ) {\n                $monotonic = 0;\n                last;\n      \
    \      }\n            $prev = $elt;\n        }\n    }\n    return $monotonic;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5,\
    \ 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my($last,\
    \ $comparator);\n    foreach my $i (@$l) {\n        if (defined $last) {\n   \
    \         if (defined $comparator) {\n                return 0 if $comparator\
    \ * ($i - $last) < 0;\n            } else {\n                $comparator = ($i\
    \ - $last);\n            }\n        }\n        $last = $i;\n    }\n    return\
    \ 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5,\
    \ 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 255
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    return\
    \ $#{$l} < 1 ? 1 : $l->[0] == $l->[1] ? 1 :\n        $l->[0] < $l->[1] ?\n   \
    \         monotonic([@{$l}[1..$#{$l}]]) &&\n            all([@{$l}[1..$#{$l}]],\
    \ sub { shift < shift }) :\n            monotonic([@{$l}[1..$#{$l}]]) &&\n   \
    \         all([@{$l}[1..$#{$l}]], sub { shift > shift });\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Warning: Use of "shift" without parentheses is ambiguous at /tmp/tmp9o2b0yzg.pl
    line 13.

    Unterminated <> operator at /tmp/tmp9o2b0yzg.pl line 13.

    '
  stdout: ''
  timestamp: 1659821458
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my\
    \ $d = 0;\n    foreach my $i (1 .. scalar(@$l) - 1) {\n        my $diff = $l->[$i]\
    \ - $l->[$i - 1];\n        if($diff != 0) {\n            if($d == 0) {\n     \
    \           $d = $diff;\n            }\n            else {\n                if($d\
    \ * $diff < 0) {\n                    return 0;\n                }\n         \
    \   }\n        }\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my($last);\n\
    \    return 1 if (! @$l);\n    $last = $l->[0];\n    for (@$l) {\n\treturn if\
    \ ($last < $_);\n\t$last = $_;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 255
  program: "# Return 1 is array elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n\
    # >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    return\
    \ 1 if @$l < 2;\n    if ($l->[0] < $l->[1]) {\n        return 1 if all { $_[0]\
    \ < $_[1] } @$l;\n    } else {\n        return 1 if all { $_[0] > $_[1] } @$l;\n\
    \    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "all" without a package or object reference at /tmp/tmpxo_nkp9s.pl
    line 12.

    '
  stdout: ''
  timestamp: 1659821459
