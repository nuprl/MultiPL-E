name: HumanEval_80_is_happy
language: pl
prompt: "# You are given a string s.\n# Your task is to check if the string is happl\
  \ or not.\n# A string is happl if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\n# >>> is_happy(a)\n# \"\"\n# >>> is_happy(aa)\n\
  # \"\"\n# >>> is_happy(abcd)\n# 1\n# >>> is_happy(aabb)\n# \"\"\n# >>> is_happy(adb)\n\
  # 1\n# >>> is_happy(xyy)\n# \"\"\nsub is_happy {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n\
  \        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"aabb\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xyy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $prev = substr($s, 0, 3);\n    for (my $i = 3; $i < length($s);\
    \ $i++) {\n        if (substr($s, $i, 3) eq $prev) {\n            return \"\"\
    ;\n        }\n        $prev = substr($s, $i, 3);\n    }\n    return 1;\n}", " \
    \   return '' if length($s) < 3;\n    my @chars = split(//, $s);\n    my $i =\
    \ 0;\n    my $j = 2;\n    my $k = 1;\n    while ($i < $j && $j < scalar(@chars))\
    \ {\n        if ($chars[$i] eq $chars[$j]) {\n            return '';\n       \
    \ }\n        $i += $k;\n        $j += $k;\n    }\n    return 1;\n}", "    return\
    \ \"0\" if length($s) < 3;\n    for (my $i = 0; $i < length($s) - 2; $i++) {\n\
    \        my $ch = substr($s, $i, 3);\n        my $ch1 = substr($ch, 0, 1);\n \
    \       return \"0\" if substr($ch, 1, 1) eq $ch1;\n        return \"0\" if substr($ch,\
    \ 2, 1) eq $ch1;\n    }\n    return \"1\";\n}", "    for(my $i = 2; $i < length($s);\
    \ $i++) {\n        return 1 if substr($s, $i, 1) ne substr($s, $i - 2, 1);\n \
    \   }\n    return \"\";\n}", "    my @c = split(//, $s);\n    if ($#c < 2) {\n\
    \        print \"\\\"\\\"\\n\";\n        return;\n    }\n    for (my $i = 0; $i\
    \ < $#c; $i++) {\n        for (my $j = $i + 1; $j < $#c + 1; $j++) {\n       \
    \     if ($c[$i] eq $c[$j]) {\n                print \"\\\"\\\"\\n\";\n      \
    \          return;\n            }\n        }\n    }\n    print \"1\\n\";\n}",
  "    return '' if (length($s) < 3);\n    my @array = split(//, $s);\n    for (my\
    \ $i = 0; $i < length($s) - 2; $i++) {\n        if ($array[$i] eq $array[$i +\
    \ 1] || $array[$i] eq $array[$i + 2] || $array[$i + 1] eq $array[$i + 2]) {\n\
    \            return '';\n        }\n    }\n    return 1;\n}", "    my($res) =\"\
    \";\n    my($i);\n    if(length($s)<3){\n        return $res;\n    }\n    for($i=0;$i<=length($s)-3;$i++){\n\
    \        if(substr($s,$i,1)eq substr($s,$i+1,1) or substr($s,$i,1)eq substr($s,$i+2,1)\
    \ or substr($s,$i+1,1)eq substr($s,$i+2,1)){\n            return $res;\n     \
    \   }\n    }\n    $res = 1;\n    return $res;\n}", "    # Your code here\n   \
    \ my $s_length = length($s);\n    if ($s_length < 3) {\n        return \"\";\n\
    \    }", "    \n    # your code here\n}", "    return 0 if (length($s) < 3);\n\
    \    return 0 if ($s !~ /^(.)(.)(.)/);\n    return 0 if ($1 eq $2 || $2 eq $3\
    \ || $1 eq $3);\n    return 1;\n}", "    if(length($s)<3){\n        return \"\"\
    ;\n    }else{\n        for(my $i=0;$i<length($s)-2;$i++){\n            if(substr($s,$i,1)\
    \ eq substr($s,$i+1,1) || substr($s,$i,1) eq substr($s,$i+2,1) || substr($s,$i+1,1)\
    \ eq substr($s,$i+2,1)){\n                return \"\";\n            }\n      \
    \  }\n        return 1;\n    }\n}", "    my @letters = split(//, $s);\n    my\
    \ $len = scalar @letters;\n    if ($len < 3) {\n        return \"\";\n    }\n\
    \    foreach my $i (0..$len-3) {\n        if ($letters[$i] eq $letters[$i+1] ||\
    \ $letters[$i] eq $letters[$i+2] || $letters[$i+1] eq $letters[$i+2]) {\n    \
    \        return \"\";\n        }\n    }\n    return 1;\n}", "    # Your code goes\
    \ here.\n    if(length($s) < 3){\n        return \"\";\n    }\n    for(my $i =\
    \ 0; $i <= length($s) - 3; $i++){\n        my $str = substr($s, $i, 3);\n    \
    \    my $ch = substr($str, 0, 1);\n        my $ch1 = substr($str, 1, 1);\n   \
    \     my $ch2 = substr($str, 2, 1);\n        if($ch ne $ch1 && $ch ne $ch2 &&\
    \ $ch1 ne $ch2){\n            return 1;\n        }\n    }\n    return \"\";\n}",
  "    return \"\" if length($s) < 3;\n    return \"\" if $s =~ /([a-z])\\1{2}/;\n\
    \    return 1;\n}", "    return $s =~ /^(?=(?:(.)(?:\\1\\1)+))(.)\\2\\2+$/;\n}",
  "    # Use the brain the good lord gave you to solve this puzzle.\n    #replace\
    \ this with \"return 1\" if the string is happl, otherwise \"return 0\"\n    if(length($s)>=3){\n\
    \    \tfor(my $i=0;$i<=length($s)-3;$i++){\n    \t\tif(substr($s,$i,1) eq substr($s,$i+1,1)\
    \ or substr($s,$i,1) eq substr($s,$i+2,1) or substr($s,$i+1,1) eq substr($s,$i+2,1)){\n\
    \    \t\t\treturn 0;\n    \t\t}\n    \t}\n    \treturn 1;\n    }\n    else{\n\
    \    \treturn 0;\n    }\n}", "    my @a = split(//, $s);\n    return 1 if @a <\
    \ 3;\n    my @b = map { join('', @a[$_, $_+1, $_+2]) } 0..@a-3;\n    for my $i\
    \ (1..@b-1) {\n        return '' if $b[$i] eq $b[$i-1];\n    }\n    return 1;\n\
    }", "    # Write your code here\n    return 1 if (length($s)<3);\n    my $i=0;\n\
    \    while($i<length($s)-2){\n        if(substr($s,$i,1) eq substr($s,$i+1,1)\
    \ || substr($s,$i,1) eq substr($s,$i+2,1) || substr($s,$i+1,1) eq substr($s,$i+2,1)){\n\
    \            return \"\";\n        }\n        $i++;\n    }\n    return 1;\n}",
  "    my $l = length($s);\n    return 0 if ($l < 3);\n    for (my $i = 0; $i < $l-2;\
    \ $i++) {\n        my $s1 = substr($s, $i, 1);\n        my $s2 = substr($s, $i+1,\
    \ 1);\n        my $s3 = substr($s, $i+2, 1);\n        return 0 if ($s1 eq $s2\
    \ or $s1 eq $s3 or $s2 eq $s3);\n    }\n    return 1;\n}", "    my $i = 0;\n \
    \   my $c = length($s);\n    if($c >= 3) {\n        while($i <= $c - 3) {\n  \
    \          if(substr($s, $i, 1) eq substr($s, $i + 1, 1) ||\n               substr($s,\
    \ $i, 1) eq substr($s, $i + 2, 1) ||\n               substr($s, $i + 1, 1) eq\
    \ substr($s, $i + 2, 1)) {\n                return \"\";\n            }\n    \
    \        $i += 1;\n        }\n        return 1;\n    }\n    return \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
