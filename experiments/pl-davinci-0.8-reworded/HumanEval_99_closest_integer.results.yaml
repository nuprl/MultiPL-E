language: pl
name: HumanEval_99_closest_integer
results:
- exit_code: 255
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    return\
    \ round($value);\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::round called at /tmp/tmpspp0ewrs.pl line 16.

    '
  stdout: ''
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    $value\
    \ = \"$value\";\n    my @digits = split(//, $value);\n    if ($digits[0] eq \"\
    -\") {\n        shift @digits;\n        unshift @digits, \"-\";\n    }\n    for\
    \ my $i (0 .. @digits - 1) {\n        if ($digits[$i] eq \".\") {\n          \
    \  if ($digits[$i + 1] > 4) {\n                if ($digits[$i - 1] < 9) {\n  \
    \                  $digits[$i - 1]++;\n                }\n                else\
    \ {\n                    for my $j (reverse 1 .. $i) {\n                     \
    \   if ($digits[$j] == 9) {\n                            $digits[$j] = 0;\n  \
    \                      }\n                        else {\n                   \
    \         $digits[$j]++;\n                            last;\n                \
    \        }\n                    }\n                }\n            }\n        \
    \    $digits[$i] = \"\";\n        }\n    }\n    my $result = join(\"\", @digits);\n\
    \    if ($result eq \"-\") {\n        $result = 0;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
    \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    return\
    \ int($value+0.5);\n}\n1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    # write\
    \ your code here\n    return $value;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    return\
    \ sprintf \"%d\", $value;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821738
- exit_code: 255
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    my $decimal_part\
    \ = $value - int($value);\n    if ($decimal_part < 0.5) {\n        return int($value);\n\
    \    } else {\n        return ceil($value);\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::ceil called at /tmp/tmpcy0umgcs.pl line 20.

    '
  stdout: ok!
  timestamp: 1659821738
- exit_code: 0
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    my($number)\
    \ = $value + 0;\n    return ( ($number > 0) ? int($number + 0.5) : int($number\
    \ - 0.5) );\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    return\
    \ int($value+0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    return\
    \ sprintf(\"%.0f\", $value);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"\
    ),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    if ($value\
    \ =~ /^(-?\\d+).\\d+$/) {\n        return($1);\n    }\n    return($value);\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
    \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    return\
    \ int($value);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821707
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    my $int\
    \ = int($value);\n    my $dec = $value - $int;\n    return ($dec >= 0.5) ? $int\
    \ + 1 : $int;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    $value\
    \ =~ s/^([+-]?\\d+\\.\\d+).*$/$1/;\n    my $number = sprintf(\"%.0f\", $value);\n\
    \    $number = 0 if ($number eq \"-0\");\n    return $number;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    return\
    \ int($value);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821707
- exit_code: 0
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    my $rounded\
    \ = int($value);\n    my $remainder = abs($value - $rounded);\n    if ($remainder\
    \ == 0.5) {\n        return $value < 0 ? $rounded - 1 : $rounded + 1;\n    }\n\
    \    elsif ($remainder < 0.5) {\n        return $rounded;\n    }\n    else {\n\
    \        return $rounded + 1;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    return\
    \ int($value + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821644
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    my($int)\
    \ = int($value);\n    return ((abs($value - $int) < abs($value - ($int + 1)))\
    \ ? $int : ($int + 1));\n}\nprint \"closest_integer(10) -> \" . closest_integer(10)\
    \ . \"\\n\";\nprint \"closest_integer(10.1) -> \" . closest_integer(10.1) . \"\
    \\n\";\nprint \"closest_integer(10.5) -> \" . closest_integer(10.5) . \"\\n\"\
    ;\nprint \"closest_integer(10.6) -> \" . closest_integer(10.6) . \"\\n\";\nprint\
    \ \"closest_integer(10.9) -> \" . closest_integer(10.9) . \"\\n\";\nprint \"closest_integer(-10)\
    \ -> \" . closest_integer(-10) . \"\\n\";\nprint \"closest_integer(-10.1) -> \"\
    \ . closest_integer(-10.1) . \"\\n\";\nprint \"closest_integer(-10.5) -> \" .\
    \ closest_integer(-10.5) . \"\\n\";\nprint \"closest_integer(-10.6) -> \" . closest_integer(-10.6)\
    \ . \"\\n\";\nprint \"closest_integer(-10.9) -> \" . closest_integer(-10.9) .\
    \ \"\\n\";\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
    \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: 'closest_integer(10) -> 10

    closest_integer(10.1) -> 10

    closest_integer(10.5) -> 11

    closest_integer(10.6) -> 11

    closest_integer(10.9) -> 11

    closest_integer(-10) -> -10

    closest_integer(-10.1) -> -10

    closest_integer(-10.5) -> -10

    closest_integer(-10.6) -> -10

    closest_integer(-10.9) -> -10

    ok!ok!'
  timestamp: 1659821738
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    return\
    \ int($value);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821707
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    my($integer)\
    \ = int($value);\n    my($decimal) = $value - $integer;\n    if ($decimal < 0)\
    \ {\n        return $integer - ($decimal < -0.5);\n    }\n    else {\n       \
    \ return $integer + ($decimal > 0.5);\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821738
- exit_code: 0
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my($value) = @_;\n    my $closest\
    \ = int($value);\n    if(abs($value - $closest) == 0.5) {\n        $closest =\
    \ ($value >= 0) ? ($closest + 1) : ($closest - 1);\n    }\n    return $closest;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
    \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821738
