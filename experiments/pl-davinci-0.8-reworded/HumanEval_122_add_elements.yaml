name: HumanEval_122_add_elements
language: pl
prompt: "# Given a non-empty array of integers arr and an integer k, return\n# the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  # Example:\n# >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n\
  # 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\nsub add_elements {\n    my($arr,\
  \ $k) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_elements;\n\
  \        if(eq_deeply($candidate->([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111,\
  \ 121, 3, 4000, 5, 6], 2),0)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([111,\
  \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([1], 1),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    for my $i (0..$k-1) {\n        my $num = $arr->[$i];\n\
    \        if ($num < 100) {\n            $sum += $num;\n        }\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    for (my $i = 0; $i < $k; $i++) {\n       \
    \ my $n = $arr->[$i];\n        if ($n < 10) {\n            $sum += $n;\n     \
    \   } elsif ($n < 100) {\n            $sum += $n % 10 + int($n / 10);\n      \
    \  }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $num ( @$arr\
    \ ) {\n        if( $num < 100 ) {\n            $sum += $num;\n        } else {\n\
    \            last;\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    my $i = 0;\n    while ($i < $k) {\n        my $num = $arr->[$i];\n      \
    \  if ($num < 100) {\n            $sum += $num;\n        }\n        $i++;\n  \
    \  }\n    return $sum;\n}", "    my $sum = 0;\n    my $max_digit = 0;\n    foreach\
    \ my $i (0..$k - 1) {\n        $max_digit = max($max_digit, length($arr->[$i]));\n\
    \    }\n    foreach my $i (0..$k - 1) {\n        $sum += $arr->[$i] if $max_digit\
    \ <= 2;\n    }\n    return $sum;\n}\nmy $arr = [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9];\nmy $k = 4;\nprint add_elements($arr, $k) . \"\\n\";", "    my $sum = 0;\n\
    \    for my $i (0..$k-1) {\n        $sum += $arr->[$i] if $arr->[$i] < 100;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 0; $i < $k;\
    \ $i++) {\n        $sum += $arr->[$i] if $arr->[$i] < 100;\n    }\n    return\
    \ $sum;\n}", "    # $arr => [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n    # $k => 4\n\
    \    # $arr->[$_] => 111\n    # $arr->[$_] >= 100 => 111 >= 100 => 1\n    # $arr->[$_]\
    \ <= 100 => 111 <= 100 => 0\n    # $arr->[$_] <= 10 => 111 <= 10 => 0\n    # $arr->[$_]\
    \ =~ /^[0-9]{1,2}$/ => 111 =~ /^[0-9]{1,2}$/ => 0\n    # $arr->[$_] >= 100 ||\
    \ $arr->[$_] <= 10 || $arr->[$_] =~ /^[0-9]{1,2}$/ => 1 || 0 || 0 => 1\n    #\
    \ $sum += $arr->[$_] => 0 + 111 => 111\n    # $sum => 111\n    # $i => 1\n   \
    \ # $_ => 1\n    # $arr->[$_] => 21\n    # $arr->[$_] >= 100 => 21 >= 100 => 0\n\
    \    # $arr->[$_] <= 100 => 21 <= 100 => 1\n    # $arr->[$_] <= 10 => 21 <= 10\
    \ => 0\n    # $arr->[$_] =~ /^[0-9]{1,2}$/ => 21 =~ /^[0-9]{1,2}$/ => 1\n    #\
    \ $arr->[$_] >= 100 || $arr->[$_] <= 10 || $arr->[$_] =~ /^[0-9]{1,2}$/ => 0 ||\
    \ 1 || 1 => 1\n    # $sum += $arr->[$_] => 111 + 21 => 132\n    # $sum => 132\n\
    \    # $i => 2\n    # $_ => 2\n    # $arr->[$_] => 3\n    # $arr->[$_] >= 100\
    \ => 3 >= 100 => 0\n    # $arr->[$_] <= 100 => 3 <= 100 => 1\n    # $arr->[$_]\
    \ <= 10 => 3 <= 10 => 1\n    # $", "    my $sum = 0;\n    my $ctr = 0;\n    foreach\
    \ my $a (@$arr) {\n        if ($a > 9 && $a < 100) {\n            $sum += $a;\n\
    \            ++$ctr;\n        }\n        if ($ctr == $k) {\n            last;\n\
    \        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $num\
    \ (@$arr) {\n        if ($num < 100) {\n            $sum += $num;\n        }\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    # error checking\n    return\
    \ undef if (!defined($arr) || !defined($k) || scalar(@$arr) < 1 || scalar(@$arr)\
    \ > 100 || scalar(@$arr) < $k || $k < 1);\n    # sum elements with at most two\
    \ digits\n    foreach my $i (0..($k-1)) {\n        my $num = $arr->[$i];\n   \
    \     # FIXME: this solution is not perfect, e.g., 10001\n        if ($num > -10\
    \ && $num < 100) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for (my $i = 0; $i < @$arr && $i < $k; $i++) {\n  \
    \      $sum += ($arr->[$i] > 9) ? $arr->[$i] % 10 + int($arr->[$i] / 10) : $arr->[$i];\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 0; $i < $k;\
    \ $i++) {\n        my $digits = length($arr->[$i]);\n        if ($digits <= 2)\
    \ {\n            $sum += $arr->[$i];\n        }\n    }\n    return $sum;\n}",
  "    return 0 if $k == 0;\n    my $sum = 0;\n    for my $i (0..$k-1) {\n       \
    \ my $n = $arr->[$i];\n        $sum += $n if $n < 100;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for (my $i = 0; $i < $k; $i++) {\n        $sum += $arr->[$i]\
    \ if $arr->[$i] <= 99;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for\
    \ (0..$k-1) {\n        if (length($arr->[$_]) <= 2) {\n            $sum += $arr->[$_];\n\
    \        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    my $i = 0;\n \
    \   while ($i < $k) {\n        if ($arr->[$i] < 100) {\n            $sum += $arr->[$i];\n\
    \        }\n        $i++;\n    }\n    return $sum;\n}\nmy $arr = [111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9];\nsay add_elements($arr, 4);", "    return 0 if $k < 1;\n\
    \    my $size = scalar @$arr;\n    $k = $size if $k > $size;\n    my $r = 0;\n\
    \    for (my $i = 0; $i < $k; $i++) {\n        if ($arr->[$i] < 100) {\n     \
    \       $r += $arr->[$i];\n        }\n    }\n    return $r;\n}", "    my $sum\
    \ = 0;\n    for (my $i = 0; $i < $k; $i++) {\n        $sum += $arr->[$i] if $arr->[$i]\
    \ < 100;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $n (@$arr)\
    \ {\n        if($n > 99) { next; }\n        $sum += $n;\n        last if --$k\
    \ == 0;\n    }\n    return $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
