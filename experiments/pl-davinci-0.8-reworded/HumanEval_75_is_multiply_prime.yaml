name: HumanEval_75_is_multiply_prime
language: pl
prompt: "# Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100.\
  \ \n# Example:\n# >>> is_multiply_prime(30)\n# 1\n# 30 = 2 * 3 * 5\nsub is_multiply_prime\
  \ {\n    my($a) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_multiply_prime;\n\
  \        if(eq_deeply($candidate->(5),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(30),1)) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(125),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(105),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(126),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(729),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(891),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1001),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $i;\n    for($i = 2; $i <= $a/2; $i++) {\n        my $j;\n \
    \       for($j = 2; $j <= $a/2; $j++) {\n            my $k;\n            for($k\
    \ = 2; $k <= $a/2; $k++) {\n                if($i * $j * $k == $a && is_prime($i)\
    \ && is_prime($j) && is_prime($k)) {\n                    return 1;\n        \
    \        }\n            }\n        }\n    }\n    return 0;\n}", "    my @prime\
    \ = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97);\n    # TODO\n}", "    \n    my @sieves;\n    sieve(\\@sieves,\
    \ 2, $a);\n    my $prime_count = 0;\n    foreach my $prime (@sieves) {\n     \
    \   $prime_count++ if $a % $prime == 0;\n    }\n    return $prime_count == 3;\n\
    }", "    my @numbers = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    my $result = 0;\n    my $counter\
    \ = 0;\n    my $final_result = 0;\n    my $num1 = 0;\n    my $num2 = 0;\n    my\
    \ $num3 = 0;\n    if($a == 1) {\n        return 1;\n    }\n    for(my $i = 0;\
    \ $i < 24; $i++) {\n        for(my $j = 0; $j < 24; $j++) {\n            for(my\
    \ $k = 0; $k < 24; $k++) {\n                $num1 = $numbers[$i];\n          \
    \      $num2 = $numbers[$j];\n                $num3 = $numbers[$k];\n        \
    \        $result = $num1 * $num2 * $num3;\n                if($result == $a) {\n\
    \                    $final_result = $result;\n                    $counter++;\n\
    \                }\n            }\n        }\n    }\n    if($counter == 1) {\n\
    \        return 1;\n    }\n    return 0;\n}\nmy $num = <STDIN>;\nchomp $num;\n\
    my $result = is_multiply_prime($num);\nprint(\"$result\\n\");", "    for(my $i\
    \ = 2; $i <= $a/2; $i++) {\n        next if(!is_prime($i));\n        my $b = $a\
    \ / $i;\n        next if(!is_prime($b));\n        my $c = $b / $i;\n        next\
    \ if(!is_prime($c));\n        return 1;\n    }\n    return 0;\n}", "    my $multiply\
    \ = 1;\n    my $i = 2;\n    while ($i <= $a) {\n        if($a % $i == 0){\n  \
    \          my $j = 2;\n            my $is_prime = 1;\n            while ($j <\
    \ $i) {\n                if($i % $j == 0){\n                    $is_prime = 0;\n\
    \                    last;\n                }\n                $j++;\n       \
    \     }\n            if($is_prime){\n                $multiply *= $i;\n      \
    \      }\n        }\n        $i++;\n    }\n    return $multiply == $a;\n}", " \
    \   my $b = $a;\n    for (my $i = 2; $i <= $a; $i++) {\n        if($a % $i ==\
    \ 0) {\n            $a /= $i;\n            if($i != 2 && $i != 3 && $i != 5) {\n\
    \                return 0;\n            }\n            $i--;\n        }\n    }\n\
    \    return $b;\n}", "    for(my $i = 0; $i <= $a; $i++) {\n        for(my $j\
    \ = 0; $j <= $a; $j++) {\n            for(my $k = 0; $k <= $a; $k++) {\n     \
    \           if($i * $j * $k == $a) {\n                    return 1;\n        \
    \        }\n            }\n        }\n    }\n    return 0;\n}", "    my %hash\
    \ = ();\n    for(my $i = 2; $i * $i <= $a; $i++) {\n        while($a % $i == 0)\
    \ {\n            push @{$hash{$i}}, $i;\n            $a /= $i;\n        }\n  \
    \  }\n    if($a > 1) {\n        push @{$hash{$a}}, $a;\n    }\n    if(scalar @{$hash{$_}}\
    \ == 1) {\n        return 1;\n    }\n    return 0;\n}", "    for my $i (2..$a-1)\
    \ {\n        if ($a % $i == 0) {\n            my $b = $a / $i;\n            for\
    \ my $j (2..$b-1) {\n                if ($b % $j == 0) {\n                   \
    \ my $c = $b / $j;\n                    if (is_prime($c)) {\n                \
    \        print \"$a = $i * $j * $c\\n\";\n                        return 1;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return 0;\n}", "    my @factors = prime_factors($a);\n    if (@factors ==\
    \ 3) {\n        return 1;\n    } else {\n        return 0;\n    }\n}", "    my\
    \ $b=0;\n    foreach my $i (2..$a/2) {\n        if (is_prime($i) == 1) {\n   \
    \         my $c = $a / $i;\n            if (is_prime($c) == 1) {\n           \
    \     $b = $c;\n                last;\n            }\n        }\n    }\n    return\
    \ $b;\n}", "    my $flag = 0;\n    for my $i (2..$a){\n        for my $j (2..$a){\n\
    \            for my $k (2..$a){\n                if ($i*$j*$k == $a) {\n     \
    \               $flag = 1;\n                    print \"$i*$j*$k\\n\";\n     \
    \           }\n            }\n        }\n    }\n    if ($flag == 1) {\n      \
    \  return 1;\n    }\n    else {\n        return 0;\n    }\n}", "    my @array_of_prime_numbers\
    \ = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97);\n    my $last_element = $array_of_prime_numbers[-1];\n\
    \    if ($a > $last_element) {\n        my $counter = $last_element;\n       \
    \ for(my $i = $last_element; $i <= $a; $i++) {\n            $counter++;\n    \
    \        my $is_prime = 1;\n            foreach my $j (@array_of_prime_numbers)\
    \ {\n                if ($counter % $j == 0) {\n                    $is_prime\
    \ = 0;\n                    last;\n                }\n            }\n        \
    \    if ($is_prime == 1) {\n                push @array_of_prime_numbers, $counter;\n\
    \            }\n        }\n    }\n    for(my $i = 0; $i < scalar @array_of_prime_numbers;\
    \ $i++) {\n        for(my $j = 0; $j < scalar @array_of_prime_numbers; $j++) {\n\
    \            for(my $k = 0; $k < scalar @array_of_prime_numbers; $k++) {\n   \
    \             if ($array_of_prime_numbers[$i] * $array_of_prime_numbers[$j] *\
    \ $array_of_prime_numbers[$k] == $a) {\n                    return 1;\n      \
    \          }\n            }\n        }\n    }\n    return 0;\n}", "    my $is_multiply_prime\
    \ = 0;\n    my $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (my $i = 0; $i < scalar\
    \ @$primes; $i++) {\n        for (my $j = 0; $j < scalar @$primes; $j++) {\n \
    \           for (my $k = 0; $k < scalar @$primes; $k++) {\n                if\
    \ ($a == $primes->[$i] * $primes->[$j] * $primes->[$k]) {\n                  \
    \  $is_multiply_prime = 1;\n                    print $a, \" = \", $primes->[$i],\
    \ \" * \", $primes->[$j], \" * \", $primes->[$k], \"\\n\";\n                }\n\
    \            }\n        }\n    }\n    return $is_multiply_prime;\n}", "    my\
    \ $res = 0;\n    for (my $i = 2; $i < $a/2; $i++) {\n        if($a % $i == 0){\n\
    \            my $b = $a / $i;\n            if($a % $b == 0){\n               \
    \ $res = 1;\n            }\n        }\n    }\n    return $res;\n}", "    my @a\
    \ = ();\n    foreach (1..$a) {\n        if ($a % $_ == 0) {\n            push(@a,\
    \ $_);\n        }\n    }\n    my $counter = 0;\n    my $result = 0;\n    for (my\
    \ $i = 0; $i < scalar(@a); $i++) {\n        for (my $j = 2; $j < $a[$i]; $j++)\
    \ {\n            if ($a[$i] % $j == 0) {\n                $counter++;\n      \
    \      }\n        }\n        if ($counter == 0) {\n            $result++;\n  \
    \      }\n        $counter = 0;\n    }\n    if ($result == 3) {\n        return\
    \ 1;\n    }\n    else {\n        return 0;\n    }\n}", "    my $product = 1;\n\
    \    for (1..$a) {\n        $product *= $_ if is_prime($_) && $a % $_ == 0;\n\
    \    }\n    return $product == $a ? 1 : 0;\n}", '    my $b;', "    my $ret = 0;\n\
    \    my @prime_list = (1);"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
