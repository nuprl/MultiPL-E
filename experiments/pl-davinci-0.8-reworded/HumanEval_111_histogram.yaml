name: HumanEval_111_histogram
language: pl
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a hash\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
  # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b\
  \ c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\"\
  \ => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
  \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" =>\
  \ 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"\
  ),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\"\
  \ => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my %histogram = ();\n    my %highest = ();\n    my $highest = 0;\n\
    \    foreach my $letter (split(/ /, $test)) {\n        if (exists $histogram{$letter})\
    \ {\n            $histogram{$letter} += 1;\n        } else {\n            $histogram{$letter}\
    \ = 1;\n        }\n        if ($histogram{$letter} > $highest) {\n           \
    \ $highest = $histogram{$letter};\n            %highest = ($letter => $highest);\n\
    \        } elsif ($histogram{$letter} == $highest) {\n            $highest{$letter}\
    \ = $highest;\n        }\n    }\n    return %highest;\n}", "    my %hash = ();\n\
    \    my @letters = split(' ', $test);\n    if (@letters > 0) {\n        foreach\
    \ my $letter (@letters) {\n            if (exists $hash{$letter}) {\n        \
    \        $hash{$letter}++;\n            } else {\n                $hash{$letter}\
    \ = 1;\n            }\n        }\n    }\n    my $max = max values %hash;\n   \
    \ return {grep {$hash{$_} == $max} keys %hash};\n}", "    my %occur;\n    my @letters\
    \ = split / /, $test;\n    foreach my $letter (@letters) {\n        $occur{$letter}++;\n\
    \    }\n    my $max_occur = 0;\n    foreach my $key (keys %occur) {\n        $max_occur\
    \ = $occur{$key} if $occur{$key} > $max_occur;\n    }\n    my %final;\n    foreach\
    \ my $key (keys %occur) {\n        $final{$key} = $occur{$key} if $occur{$key}\
    \ == $max_occur;\n    }\n    return %final;\n}", "    my @letters = split(/\\\
    s+/, $test);\n    my %count;\n    for my $i (@letters) {\n        $count{$i} +=\
    \ 1;\n    }\n    my $max = 0;\n    my %max_count;\n    for my $key (keys %count)\
    \ {\n        if ($count{$key} > $max) {\n            $max = $count{$key};\n  \
    \          %max_count = ();\n            $max_count{$key} = $max;\n        } elsif\
    \ ($count{$key} == $max) {\n            $max_count{$key} = $max;\n        }\n\
    \    }\n    return %max_count;\n}", "    my %words = ();\n    foreach my $w (split(/\\\
    s+/, $test)) {\n        $words{$w}++;\n    }\n    return %words;\n}", "    my\
    \ %histogram;\n    foreach my $char (split ' ', $test) {\n        $histogram{$char}++;\n\
    \    }\n    return %histogram;\n}", "    my @l = split(' ', $test);\n    my %h;\n\
    \    foreach my $i (@l) {\n        $h{$i} = 1 if not exists $h{$i};\n        $h{$i}\
    \ += 1 if exists $h{$i};\n    }\n    my %res;\n    my $max = 0;\n    foreach my\
    \ $key (keys %h) {\n        $max = $h{$key} if $h{$key} > $max;\n    }\n    foreach\
    \ my $key (keys %h) {\n        $res{$key} = $h{$key} if $h{$key} == $max;\n  \
    \  }\n    return %res;\n}", "    my %hash = ();\n    for my $c (split ' ', $test)\
    \ {\n        $hash{$c}++;\n    }\n    my $max = -1;\n    for my $c (keys %hash)\
    \ {\n        if ($hash{$c} > $max) {\n            $max = $hash{$c};\n        }\n\
    \    }\n    my %result = ();\n    for my $c (keys %hash) {\n        if ($hash{$c}\
    \ == $max) {\n            $result{$c} = $max;\n        }\n    }\n    return %result;\n\
    }", "    if ($test eq \"\") {\n        return {};\n    }\n    my @letters = split\
    \ / /, $test;\n    my $count = {};\n    foreach my $l (@letters) {\n        $count->{$l}\
    \ = 0 unless exists $count->{$l};\n        $count->{$l} += 1;\n    }\n    my $max\
    \ = 0;\n    my $key = undef;\n    foreach my $k (keys %$count) {\n        if ($count->{$k}\
    \ > $max) {\n            $max = $count->{$k};\n            $key = $k;\n      \
    \  }\n    }\n    return { $key => $max };\n}", "    # your code here\n}", "  \
    \  my $result = {};\n    my $res = {};\n    my $max = 0;\n    foreach my $v (split('\
    \ ', $test)) {\n        if (not exists $result->{$v}) {\n            $result->{$v}\
    \ = 1;\n        } else {\n            $result->{$v} += 1;\n        }\n       \
    \ if ($result->{$v} > $max) {\n            $max = $result->{$v};\n        }\n\
    \    }\n    foreach my $v (split(' ', $test)) {\n        if ($result->{$v} ==\
    \ $max) {\n            $res->{$v} = $max;\n        }\n    }\n    return $res;\n\
    }", "    my %histogram = ();\n    if ($test) {\n        my @letters = split /\
    \ /, $test;\n        foreach my $letter (@letters) {\n            if ($histogram{$letter})\
    \ {\n                $histogram{$letter}++;\n            } else {\n          \
    \      $histogram{$letter} = 1;\n            }\n        }\n    }\n    my $max_count\
    \ = max(values %histogram);\n    return grep { $histogram{$_} == $max_count }\
    \ keys %histogram;\n}", "    my $result = {};\n    return $result if $test eq\
    \ \"\";\n    my @array = split(' ', $test);\n    foreach my $char (@array) {\n\
    \        if (exists $result->{$char}) {\n            $result->{$char}++;\n   \
    \     } else {\n            $result->{$char} = 1;\n        }\n    }\n    return\
    \ $result;\n}", "    my(%testHash);\n    my($occurrence);\n    my(@letters) =\
    \ split(/\\s+/, $test);\n    foreach $letter (@letters) {\n        $testHash{$letter}\
    \ = 0 if(!defined($testHash{$letter}));\n        $testHash{$letter}++;\n    }\n\
    \    $occurrence = (sort {$testHash{$b} <=> $testHash{$a}} keys %testHash)[0];\n\
    \    @solution = ();\n    foreach $key (keys %testHash) {\n        push(@solution,\
    \ $key) if($testHash{$key} == $occurrence);\n    }\n    return (join(\" \", @solution)\
    \ => $occurrence);\n}", "    my %histo = ();\n    foreach my $i (split(' ', $test))\
    \ {\n        $histo{$i}++;\n    }\n    my $max = (sort {$b <=> $a} values %histo)[0];\n\
    \    my %ret = ();\n    foreach my $i (keys %histo) {\n        if ($histo{$i}\
    \ == $max) {\n            $ret{$i} = $max;\n        }\n    }\n    return %ret;\n\
    }", "    my $count;\n    my %hash;\n    my @results;\n    my @nums;\n    my @letters;\n\
    \    my $answer;\n    my $ans;\n    my $one_letter;\n    my $two_letter;\n   \
    \ my $three_letter;\n    my $four_letter;\n    my $five_letter;\n    my $six_letter;\n\
    \    my $seven_letter;\n    my $eight_letter;\n    my $nine_letter;\n    my $ten_letter;\n\
    \    my $eleven_letter;\n    my $twelve_letter;\n    my $thirteen_letter;\n  \
    \  my $fourteen_letter;\n    my $fifteen_letter;\n    my $sixteen_letter;\n  \
    \  my $seventeen_letter;\n    my $eighteen_letter;\n    my $nineteen_letter;\n\
    \    my $twenty_letter;\n    my $twentyone_letter;\n    my $twentytwo_letter;\n\
    \    my $twentythree_letter;\n    my $twentyfour_letter;\n    my $twentyfive_letter;\n\
    \    my $twentysix_letter;\n    if ($test =~ /\\w+/) {\n        my @letters =\
    \ split(' ', $test);\n        foreach my $letter (@letters) {\n            $hash{$letter}\
    \ += 1;\n        }\n        @nums = values %hash;\n        $count = max @nums;\n\
    \        while (($letter, $count) = each %hash) {\n            if ($count == 1)\
    \ {\n                $one_letter = \"a\" if $letter eq \"a\";\n              \
    \  $two_letter = \"b\" if $letter eq \"b\";\n                $three_letter = \"\
    c\" if $letter eq \"c\";\n                $four_letter = \"d\" if $letter eq \"\
    d\";\n                $five_letter = \"e\" if $letter eq \"e\";\n            \
    \    $six_letter = \"f\" if $letter eq \"f\";\n                $seven_letter =\
    \ \"g\" if $letter eq \"g\";\n                $eight_letter = \"h\" if $letter\
    \ eq \"h\";\n                $nine_letter", "    my %hash;\n    for my $i (split(/\
    \ /, $test)) {\n        $hash{$i}++;\n    }\n    my $max_occur = max values %hash;\n\
    \    for my $i (keys %hash) {\n        if ($hash{$i} != $max_occur) {\n      \
    \      delete $hash{$i};\n        }\n    }\n    return %hash;\n}", "    my @words\
    \ = split(/\\s+/, $test);\n    my %cnt;\n    for my $word (@words) {\n       \
    \ if (exists $cnt{$word}) {\n            $cnt{$word}++;\n        } else {\n  \
    \          $cnt{$word} = 1;\n        }\n    }\n    my $max = 0;\n    my @words\
    \ = ();\n    for my $key (keys %cnt) {\n        if ($cnt{$key} > $max) {\n   \
    \         $max = $cnt{$key};\n            @words = ($key);\n        } elsif ($cnt{$key}\
    \ == $max) {\n            push @words, $key;\n        }\n    }\n    return {map\
    \ {$_ => $max} @words};\n}", "    my %hash;\n    foreach my $char (split //, $test)\
    \ {\n        $hash{$char} += 1;\n    }\n    return %hash;\n}", "    return {}\
    \ if $test eq \"\";\n    my @all_letters = split(/ /, $test);\n    my %hash;\n\
    \    foreach (@all_letters) {\n        $hash{$_} += 1;\n    }\n    my $max = 0;\n\
    \    my @letters;\n    foreach (keys %hash) {\n        if ($hash{$_} > $max) {\n\
    \            $max = $hash{$_};\n            @letters = $_;\n        } elsif ($hash{$_}\
    \ == $max) {\n            push @letters, $_;\n        }\n    }\n    my %result;\n\
    \    foreach (@letters) {\n        $result{$_} = $max;\n    }\n    return %result;\n\
    }", "    my @letters = split(\" \", $test);\n    my %count;\n    foreach my $letter\
    \ (@letters) {\n        $count{$letter}++;\n    }\n    return %count;\n}", " \
    \   my(%hist);\n    my(@letters) = split(/\\s+/, $test);\n    foreach my $l (@letters)\
    \ {\n        $hist{$l} += 1;\n    }\n    return %hist;\n}", "    # your code goes\
    \ here\n}", "    my %hist;\n    my @keys;\n    my $max = 0;\n    my @tests = split\
    \ ' ', $test;\n    foreach (@tests) {\n        if (exists $hist{$_}) {\n     \
    \       $hist{$_}++;\n        } else {\n            $hist{$_} = 1;\n        }\n\
    \    }\n    foreach (keys %hist) {\n        if ($hist{$_} > $max) {\n        \
    \    $max = $hist{$_};\n            @keys = ($_);\n        } elsif ($hist{$_}\
    \ == $max) {\n            push @keys, $_;\n        }\n    }\n    my %res;\n  \
    \  foreach (@keys) {\n        $res{$_} = $max;\n    }\n    return %res;\n}", " \
    \   my %count = ();\n    foreach my $element (split(/ /, $test)) {\n        $count{$element}++;\n\
    \    }\n    my $max = 0;\n    my @maxes = ();\n    foreach my $key (keys %count)\
    \ {\n        if ($count{$key} > $max) {\n            $max = $count{$key};\n  \
    \          @maxes = ();\n            push @maxes, $key;\n        } elsif ($count{$key}\
    \ == $max) {\n            push @maxes, $key;\n        }\n    }\n    my %maxCount\
    \ = ();\n    foreach my $key (@maxes) {\n        $maxCount{$key} = $max;\n   \
    \ }\n    return %maxCount;\n}", "    my @letters = split(' ', $test);\n    my\
    \ $count = 0;\n    my %histogram;\n    my %counts;\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n        $counts{$histogram{$letter}}++;\n\
    \    }\n    my $max = 0;\n    foreach my $key (keys %counts) {\n        if ($key\
    \ > $max) {\n            $max = $key;\n        }\n    }\n    foreach my $letter\
    \ (keys %histogram) {\n        if ($histogram{$letter} != $max) {\n          \
    \  delete $histogram{$letter};\n        }\n    }\n    return %histogram;\n}",
  "    my %histogram = ();\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    # print \"DEBUG: histogram\
    \ = \" . Dumper(\\%histogram) . \"\\n\";\n    my %max = ();\n    my $max = 0;\n\
    \    foreach my $letter (keys %histogram) {\n        my $count = $histogram{$letter};\n\
    \        if ($count > $max) {\n            %max = ();\n            $max = $count;\n\
    \        }\n        if ($count == $max) {\n            $max{$letter} = $count;\n\
    \        }\n    }\n    return \\%max;\n}", "    return {} if $test eq \"\";\n\
    \    my %hash = ();\n    my @words = split(\" \", $test);\n    foreach my $word\
    \ (@words) {\n        $hash{$word}++;\n    }\n    my $max = ( sort { $hash{$b}\
    \ <=> $hash{$a} } keys %hash )[0];\n    my %hash1 = ();\n    foreach my $key (sort\
    \ keys %hash) {\n        if ($hash{$key} == $hash{$max}) {\n            $hash1{$key}\
    \ = $hash{$key};\n        }\n    }\n    return %hash1;\n}", "    my @array = split(/\
    \ /, $test);\n    my %hash = ();\n    foreach my $char (@array) {\n        if\
    \ (exists $hash{$char}) {\n            $hash{$char} += 1;\n        } else {\n\
    \            $hash{$char} = 1;\n        }\n    }\n    return %hash;\n}", "   \
    \ my @test = split(/ /, $test);\n    my %hist;\n    my %max = (\"\" => 0);\n \
    \   foreach my $i (@test) {\n        $hist{$i}++;\n        my $count = $hist{$i};\n\
    \        if ($count > $max{$i}) {\n            %max = ($i => $count);\n      \
    \  }\n    }\n    return %max;\n}", "    my $result = {};\n    my @letters = split(\"\
    \ \", $test);\n    for my $letter (@letters) {\n        $result->{$letter} = $result->{$letter}\
    \ + 1;\n    }\n    my @keys = keys %$result;\n    my $max = 1;\n    for my $key\
    \ (@keys) {\n        if ($result->{$key} > $max) {\n            $max = $result->{$key};\n\
    \        }\n    }\n    my $filter = {};\n    for my $key (@keys) {\n        if\
    \ ($result->{$key} == $max) {\n            $filter->{$key} = $max;\n        }\n\
    \    }\n    return $filter;\n}", "    my %letters = ();\n    foreach my $letter\
    \ (split(/ /, $test)) {\n        $letters{$letter} += 1;\n    }\n    my $max =\
    \ 0;\n    my %result = ();\n    foreach my $letter (keys %letters) {\n       \
    \ if ($letters{$letter} > $max) {\n            $max = $letters{$letter};\n   \
    \         %result = ($letter => $max);\n        } elsif ($letters{$letter} ==\
    \ $max) {\n            $result{$letter} = $max;\n        }\n    }\n    return\
    \ %result;\n}", "    my @letters = split(/ /, $test);\n    my $counts = {};\n\
    \    for my $letter (@letters) {\n        $counts->{$letter}++;\n    }\n    return\
    \ $counts;\n}", "    my @letters = split(/ /, $test);\n    my %count;\n    foreach\
    \ (@letters) {\n        $count{$_}++;\n    }\n    my $maximum = 0;\n    my @result;\n\
    \    foreach my $key (keys %count) {\n        if ($count{$key} > $maximum) {\n\
    \            $maximum = $count{$key};\n            @result = ();\n           \
    \ push(@result, $key);\n        } elsif ($count{$key} == $maximum) {\n       \
    \     push(@result, $key);\n        }\n    }\n    my %result;\n    foreach (@result)\
    \ {\n        $result{$_} = $maximum;\n    }\n    return %result;\n}", "    my\
    \ %hash = ();\n    my @letters = split(/ /, $test);\n    foreach my $letter (@letters)\
    \ {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n   \
    \     } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "    my %new_dict = ();\n    # if($test eq \"\"){\n    #     return\
    \ %new_dict;\n    # }\n    my @splited = split(' ', $test);\n    my %dict = map\
    \ { $_ => 0 } @splited;\n    for $word (@splited){\n        $dict{$word} += 1;\n\
    \    }\n    # for my $key (sort keys %dict) {\n    #     print \"$key: $dict{$key}\\\
    n\";\n    # }\n    my $max = max values %dict;\n    for my $key (sort keys %dict)\
    \ {\n        if($dict{$key} == $max){\n            $new_dict{$key} = $max;\n \
    \       }\n    }\n    return %new_dict;\n}", "    my %histogram;\n    return %histogram\
    \ if $test eq \"\";\n    my @words = split \" \", $test;\n    my $max = 0;\n \
    \   foreach my $w (@words) {\n        if (!exists $histogram{$w}) {\n        \
    \    $histogram{$w} = 1;\n        } else {\n            $histogram{$w}++;\n  \
    \      }\n        $max = $histogram{$w} if $histogram{$w} > $max;\n    }\n   \
    \ foreach my $key (keys %histogram) {\n        delete $histogram{$key} if $histogram{$key}\
    \ != $max;\n    }\n    return %histogram;\n}", "    my @a = split(/ /, $test);\n\
    \    my %h;\n    foreach my $v (@a) {\n        $h{$v}++;\n    }\n    my %r;\n\
    \    my $max;\n    foreach my $k (keys %h) {\n        if(!defined($max) || $h{$k}\
    \ > $max) {\n            $max = $h{$k};\n        }\n    }\n    foreach my $k (keys\
    \ %h) {\n        if($h{$k} == $max) {\n            $r{$k} = $max;\n        }\n\
    \    }\n    return %r;\n}", "    my %result;\n    my @letters = split(/ /, $test);\n\
    \    my $highest_value = 1;\n    my @highest_keys;\n    foreach my $letter (@letters)\
    \ {\n        if (defined $result{$letter}) {\n            $result{$letter}++;\n\
    \        } else {\n            $result{$letter} = 1;\n        }\n        if ($result{$letter}\
    \ > $highest_value) {\n            $highest_value = $result{$letter};\n      \
    \      @highest_keys = ($letter);\n        } elsif ($result{$letter} == $highest_value)\
    \ {\n            push(@highest_keys, $letter);\n        }\n    }\n    %result\
    \ = map { $_ => $result{$_} } @highest_keys;\n    return %result;\n}", "    my\
    \ %hash;\n    my @array;\n    my $hash_length;\n    my $hash_length_full;\n  \
    \  my $number_of_b;\n    my $biggest;\n    foreach my $key (split(' ', $test))\
    \ {\n        $hash{$key}++;\n    }\n    @array = values %hash;\n    @array = sort\
    \ {$b <=> $a} @array;\n    $hash_length = $array[0];\n    @array = sort {$a <=>\
    \ $b} @array;\n    $hash_length_full = $array[0];\n    $biggest = $hash_length_full;\n\
    \    if ($hash_length_full == $hash_length) {\n        return %hash;\n    }\n\
    \    else {\n        my %hash_final;\n        my @array_final;\n        foreach\
    \ my $key (split(' ', $test)) {\n            if ($hash{$key} == $biggest) {\n\
    \                $hash_final{$key} = $hash{$key};\n            }\n        }\n\
    \        return %hash_final;\n    }\n}", "    my @letters = split ' ', $test;\n\
    \    my $max = 0;\n    my %count;\n    my %seen;\n    foreach my $letter (@letters)\
    \ {\n        if (exists $count{$letter}) {\n            $count{$letter}++;\n \
    \       } else {\n            $count{$letter} = 1;\n        }\n        if ($count{$letter}\
    \ > $max) {\n            $max = $count{$letter};\n        }\n    }\n    foreach\
    \ my $letter (keys %count) {\n        if ($count{$letter} == $max) {\n       \
    \     $seen{$letter} = $max;\n        }\n    }\n    return %seen;\n}", "    my\
    \ @num = split(' ', $test);\n    my %hash;\n    my $max = 0;\n    my @result;\n\
    \    for my $str (@num) {\n        if(!exists $hash{$str}) {\n            $hash{$str}\
    \ = 1;\n        } else {\n            $hash{$str} += 1;\n        }\n        if($hash{$str}\
    \ > $max) {\n            $max = $hash{$str};\n        }\n    }\n    for my $k\
    \ (keys %hash) {\n        if($hash{$k} == $max) {\n            push @result, $k;\n\
    \        }\n    }\n    for my $res (@result) {\n        print \"\\\"$res\\\" =>\
    \ $max\\n\";\n    }\n}", "    my $length = length($test);\n    my %hash = ();\n\
    \    for(my $i = 0; $i < $length; $i++){\n\tif($test[$i] ne \" \"){\n\t    $hash{$test[$i]}\
    \ += 1;\n\t}\n    }\n    return %hash;\n}", "    my %h;\n    my %hash;\n    my\
    \ @array;\n    my $key;\n    my $val;\n    my $k;\n    foreach my $l (split('\
    \ ', $test)) {\n        $h{$l}++;\n    }\n    foreach $key (sort keys %h) {\n\
    \        $val = $h{$key};\n        push @array, $val;\n    }\n    for ($i = 0;\
    \ $i < @array; $i++) {\n        for ($j = $i+1; $j < @array; $j++) {\n       \
    \     if ($array[$i] == $array[$j]) {\n                $k = $array[$i];\n    \
    \        }\n        }\n    }\n    while (($key, $val) = each %h) {\n        if\
    \ ($val == $k) {\n            $hash{$key} = $val;\n        }\n    }\n    if (keys\
    \ %hash == 0) {\n        return ();\n    }\n    return %hash;\n}", "    my %hash;\n\
    \    my @letters = split(/ /, $test);\n    for(@letters) {\n        $hash{$_}++;\n\
    \    }\n    my @sorted_hash = sort {$hash{$b} <=> $hash{$a}} keys %hash;\n   \
    \ my %top_hash;\n    my $top_value = $hash{$sorted_hash[0]};\n    for(@sorted_hash)\
    \ {\n        if($hash{$_} == $top_value) {\n            $top_hash{$_} = $hash{$_};\n\
    \        }\n    }\n    return %top_hash;\n}", "    my %hash;\n    my $maxcount\
    \ = 0;\n    foreach my $letter (split / /, $test) {\n        $hash{$letter}++;\n\
    \        if ($hash{$letter} > $maxcount) {\n            $maxcount = $hash{$letter};\n\
    \        }\n    }\n    return map { ($_ => $hash{$_}) } grep { $hash{$_} == $maxcount\
    \ } keys %hash;\n}", "    my %histogram = ();\n    foreach my $letter (split //,\
    \ $test) {\n        $histogram{$letter} = $histogram{$letter} + 1;\n    }\n  \
    \  return \\%histogram;\n}", "    my @letters = split ' ', $test;\n    my %counts;\n\
    \    for my $letter (@letters) {\n        $counts{$letter}++;\n    }\n    my %max_counts;\n\
    \    my $max_count = 0;\n    for my $letter (keys %counts) {\n        if ($counts{$letter}\
    \ > $max_count) {\n            $max_count = $counts{$letter};\n            %max_counts\
    \ = ($letter => $max_count);\n        } elsif ($counts{$letter} == $max_count)\
    \ {\n            $max_counts{$letter} = $max_count;\n        }\n    }\n    return\
    \ %max_counts;\n}", "    my(%hash);\n    my(@result);\n    my(@count);\n    my($result)\
    \ = ();\n    my($count) = ();\n    my($max) = 0;\n    foreach my $value (split(/\
    \ /, $test)) {\n        if (exists $hash{$value}) {\n            $hash{$value}\
    \ += 1;\n        } else {\n            $hash{$value} = 1;\n        }\n    }\n\
    \    foreach my $key (keys %hash) {\n        push(@result, $key);\n        push(@count,\
    \ $hash{$key});\n    }\n    foreach my $i (0..$#count) {\n        if ($count[$i]\
    \ > $max) {\n            $max = $count[$i];\n            $result = $result[$i];\n\
    \            $count = $count[$i];\n        }\n    }\n    return ($result, $count);\n\
    }", "    my @items = split(' ', $test);\n    my %hist;\n    foreach my $item (@items)\
    \ {\n        $hist{$item} += 1;\n    }\n    my $max = 0;\n    my @histogram;\n\
    \    foreach my $key (keys %hist) {\n        if ($hist{$key} > $max) {\n     \
    \       $max = $hist{$key};\n            @histogram = ($key);\n        } elsif\
    \ ($hist{$key} == $max) {\n            push(@histogram, $key);\n        }\n  \
    \  }\n    my %h = map { $_ => $max } @histogram;\n    return %h;\n}", "    my\
    \ %count;\n    my @words = split(\" \", $test);\n    foreach my $word (@words)\
    \ {\n        $count{$word}++;\n    }\n    return %count;\n}", "    my %list;\n\
    \    foreach my $temp(split(' ', $test)){\n        if (exists $list{$temp}){\n\
    \            $list{$temp}++;\n        } else {\n            $list{$temp} = 1;\n\
    \        }\n    }\n    my $max = 0;\n    foreach my $temp(keys %list){\n     \
    \   if ($list{$temp} > $max){\n            $max = $list{$temp};\n        }\n \
    \   }\n    my %m_list;\n    foreach my $temp(keys %list){\n        if ($list{$temp}\
    \ == $max){\n            $m_list{$temp} = $max;\n        }\n    }\n    return\
    \ %m_list;\n}", "    my %freq = ();\n    $freq{$_}++ for split \" \", $test;\n\
    \    my %result = ();\n    my $max = max(values %freq);\n    for my $key (keys\
    \ %freq) {\n        if ($freq{$key} == $max) {\n            $result{$key} = $max;\n\
    \        }\n    }\n    return %result;\n}", "    my %histogram = ();\n    my %counts\
    \ = ();\n    my $max_count = 0;\n    my @max_keys = ();\n    my @words = split(/\\\
    s+/, $test);\n    for my $word (@words) {\n        my $count = $histogram{$word}++;\n\
    \        if ($count) {\n            $counts{$count}--;\n            $counts{$count\
    \ + 1}++;\n        } else {\n            $counts{1}++;\n        }\n        if\
    \ ($count + 1 > $max_count) {\n            $max_count = $count + 1;\n        \
    \    @max_keys = ($word);\n        } elsif ($count + 1 == $max_count) {\n    \
    \        push @max_keys, $word;\n        }\n    }\n    for my $key (@max_keys)\
    \ {\n        $histogram{$key} = $max_count;\n    }\n    return \\%histogram;\n\
    }", "    my %hash = map { $_ => 0 } split /\\s+/, $test;\n    $hash{$_}++ for\
    \ split /\\s+/, $test;\n    my @max_key = (0);\n    my $max_value = 0;\n    for\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max_value) {\n          \
    \  @max_key = ($key);\n            $max_value = $hash{$key};\n        } elsif\
    \ ($hash{$key} == $max_value) {\n            push @max_key, $key;\n        }\n\
    \    }\n    return { map { $_ => $hash{$_} } @max_key };\n}", "    my %result;\n\
    \    my %occurence;\n    my $most_repetition = 0;\n    my @elements = split('\
    \ ', $test);\n    foreach my $elem (@elements) {\n        $result{$elem}++;\n\
    \        $occurence{$elem}++;\n        if ($occurence{$elem} > $most_repetition)\
    \ {\n            $most_repetition = $occurence{$elem};\n        }\n    }\n   \
    \ foreach my $key (keys %result) {\n        if ($result{$key} != $most_repetition)\
    \ {\n            delete $result{$key};\n        }\n    }\n    return %result;\n\
    }", "    my %counts;\n    my @letters = split(/ /, $test);\n    foreach my $letter\
    \ (@letters) {\n        $counts{$letter}++;\n    }\n    my %maxes;\n    my $max\
    \ = 0;\n    foreach my $key (keys %counts) {\n        my $count = $counts{$key};\n\
    \        if ($count > $max) {\n            $max = $count;\n            %maxes\
    \ = ($key => $count);\n        } elsif ($count == $max) {\n            $maxes{$key}\
    \ = $count;\n        }\n    }\n    return %maxes;\n}", "    my %result;\n    foreach\
    \ my $char (split(/\\s+/, $test)) {\n        $result{$char}++;\n    }\n    foreach\
    \ my $key (keys %result) {\n        $result{$key} = \"$result{$key}\";\n    }\n\
    \    return \\%result;\n}", "    my @list = split(/ /, $test);\n    my $answer\
    \ = {};\n    foreach my $letter (@list) {\n        if (exists $answer->{$letter})\
    \ {\n            $answer->{$letter}++;\n        } else {\n            $answer->{$letter}\
    \ = 1;\n        }\n    }\n    return $answer;\n}", "    if ($test eq \"\") {\n\
    \        return {};\n    }\n    my %hash = map {$_ => 0} split(' ', $test);\n\
    \    my @a = split(' ', $test);\n    for my $item (@a) {\n        $hash{$item}++;\n\
    \    }\n    my $max = max values %hash;\n    my @max_letters = grep {$hash{$_}\
    \ == $max} keys %hash;\n    my %max_hash = map {$_ => $max} @max_letters;\n  \
    \  return \\%max_hash;\n}", "    my $result = {};\n    my @chars = split / /,\
    \ $test;\n    foreach my $char (@chars) {\n        if (exists $result->{$char})\
    \ {\n            $result->{$char} += 1;\n        } else {\n            $result->{$char}\
    \ = 1;\n        }\n    }\n    my @values = values %$result;\n    my $max = max\
    \ @values;\n    my $answer = {};\n    foreach my $key (keys %$result) {\n    \
    \    if ($result->{$key} == $max) {\n            $answer->{$key} = $max;\n   \
    \     }\n    }\n    return $answer;\n}", "    if ($test eq \"\") {\n        return\
    \ {};\n    }\n    my %map = ();\n    my @words = split / /, $test;\n    for my\
    \ $i (@words) {\n        $map{$i}++;\n    }\n    my $max = 0;\n    for my $k (keys\
    \ %map) {\n        $max = $map{$k} if $map{$k} > $max;\n    }\n    my %res = ();\n\
    \    for my $k (keys %map) {\n        $res{$k} = $map{$k} if $map{$k} == $max;\n\
    \    }\n    return \\%res;\n}", "    my(%hist);\n    my($max_val) = 0;\n    my(@max_key);\n\
    \    my(@test) = split / /, $test;\n    foreach my $letter (@test) {\n       \
    \ if (exists $hist{$letter}) {\n            $hist{$letter} += 1;\n        } else\
    \ {\n            $hist{$letter} = 1;\n        }\n        if ($hist{$letter} >\
    \ $max_val) {\n            $max_val = $hist{$letter};\n            @max_key =\
    \ ($letter);\n        } elsif ($hist{$letter} == $max_val) {\n            push\
    \ @max_key, $letter;\n        }\n    }\n    my(%result);\n    foreach my $key\
    \ (@max_key) {\n        $result{$key} = $max_val;\n    }\n    return %result;\n\
    }", "    return {} if ($test eq \"\");\n    my @letters = split(/ /, $test);\n\
    \    my %letter_counts;\n    for my $letter (@letters) {\n        $letter_counts{$letter}\
    \ = 0 if (not exists $letter_counts{$letter});\n        $letter_counts{$letter}++;\n\
    \    }\n    my $max_count = max(values %letter_counts);\n    my %result;\n   \
    \ while (my ($key, $value) = each %letter_counts) {\n        $result{$key} = $value\
    \ if ($value == $max_count);\n    }\n    return \\%result;\n}", "    my %result;\n\
    \    my @array = split(' ', $test);\n    foreach my $char (@array) {\n       \
    \ if (exists $result{$char}) {\n            $result{$char}++;\n        } else\
    \ {\n            $result{$char} = 1;\n        }\n    }\n    return %result;\n}",
  "    my(%ret) = ();\n    my(@count) = ();\n    my(@uniq) = ();\n    my($count) =\
    \ 0;\n    if ($test eq \"\") { return %ret; }\n    my(@elements) = split(' ',\
    \ $test);\n    @uniq = uniq(@elements);\n    for my $element (@uniq) {\n     \
    \   for my $e (@elements) {\n            if ($element eq $e) {\n             \
    \   $count++;\n            }\n        }\n        push(@count, $count);\n     \
    \   $count = 0;\n    }\n    my($maximum) = max(@count);\n    my($i) = 0;\n   \
    \ for my $element (@uniq) {\n        if ($count[$i] == $maximum) {\n         \
    \   $ret{$element} = $maximum;\n        }\n        $i++;\n    }\n    return %ret;\n\
    }", "    my $retval = {};\n    my $max = 0;\n    my @max_letters = ();\n    foreach\
    \ my $letter (split(\" \", $test)) {\n        if (defined($retval->{$letter}))\
    \ {\n            $retval->{$letter} += 1;\n        } else {\n            $retval->{$letter}\
    \ = 1;\n        }\n        if ($retval->{$letter} > $max) {\n            $max\
    \ = $retval->{$letter};\n            @max_letters = ($letter);\n        } elsif\
    \ ($retval->{$letter} == $max) {\n            push(@max_letters, $letter);\n \
    \       }\n    }\n    $retval = {};\n    foreach my $letter (@max_letters) {\n\
    \        $retval->{$letter} = $max;\n    }\n    return $retval;\n}", "    my %histo;\n\
    \    for my $char (split //, $test) {\n        $histo{$char}++;\n    }\n    return\
    \ \\%histo;\n}", "    my(%hash,$count,$key);\n    my @array = split(/ /,$test);\n\
    \    foreach my $s(@array){\n        $hash{$s}++;\n    }\n    my %result;\n  \
    \  my $max=0;\n    foreach my $key(keys %hash){\n        if($hash{$key}>$max){\n\
    \            $max=$hash{$key};\n        }\n    }\n    foreach my $key(keys %hash){\n\
    \        if($hash{$key}==$max){\n            $result{$key}=$max;\n        }\n\
    \    }\n    return %result;\n}", "    my(%hist);\n    my(@toks) = split(/\\s+/,\
    \ $test);\n    my($tok);\n    foreach $tok (@toks) {\n        if (exists($hist{$tok}))\
    \ {\n            $hist{$tok} += 1;\n        } else {\n            $hist{$tok}\
    \ = 1;\n        }\n    }\n    return \\%hist;\n}", "    my $counts = {};\n   \
    \ for my $char (split(/\\s+/, $test)) {\n        $counts->{$char}++;\n    }\n\
    \    return {\n        map {$_ => $counts->{$_}} sort {$counts->{$b} <=> $counts->{$a}}\
    \ keys %$counts\n    };\n}", "    my %histo;\n    foreach my $char (split(' ',\
    \ $test)) {\n        if (defined $histo{$char}) {\n            $histo{$char}++;\n\
    \        } else {\n            $histo{$char} = 1;\n        }\n    }\n    return\
    \ \\%histo;\n}", "    my @test = split(/ /, $test);\n    my %result;\n    foreach\
    \ my $letter (@test) {\n        $result{$letter}++;\n    }\n    foreach my $letter\
    \ (keys %result) {\n        if ($result{$letter} == 1) {\n            delete $result{$letter};\n\
    \        }\n    }\n    return %result;\n}", "    my(%hist, @keys, $i, $max, $j);\n\
    \    @keys = split(/ /, $test);\n    for $i (@keys) {\n        $hist{$i}++;\n\
    \    }\n    $max = 0;\n    for $i (keys %hist) {\n        if ($hist{$i} > $max)\
    \ {\n            $max = $hist{$i};\n        }\n    }\n    my @fin;\n    for $i\
    \ (keys %hist) {\n        if ($hist{$i} == $max) {\n            $fin[$j] = $i;\n\
    \            $j++;\n        }\n    }\n    my %fin;\n    for $i (@fin) {\n    \
    \    $fin{$i} = $max;\n    }\n    return %fin;\n}", "    my $res = {};\n    foreach\
    \ my $letter (split ' ', $test) {\n        $res->{$letter} += 1;\n    }\n    return\
    \ $res;\n}", "    my %h;\n    for my $c (split(' ', $test)) {\n        $h{$c}++;\n\
    \    }\n    my $max = max(values %h);\n    %h = map {$_ => $h{$_}} grep {$h{$_}\
    \ == $max} keys %h;\n    return \\%h;\n}", "    my(%return);\n    my(@letters)\
    \ = split(\" \", $test);\n    foreach my $letter (@letters) {\n        if(defined($return{$letter}))\
    \ {\n            $return{$letter}++;\n        } else {\n            $return{$letter}\
    \ = 1;\n        }\n    }\n    my(@max) = sort {$return{$b} <=> $return{$a}} keys\
    \ %return;\n    my($max_count) = $return{$max[0]};\n    my(%ret);\n    foreach\
    \ my $key (keys %return) {\n        if($return{$key} == $max_count) {\n      \
    \      $ret{$key} = $max_count;\n        }\n    }\n    return \\%ret;\n}", " \
    \   my @letters = split(/\\s+/, $test);\n    my $max = 0;\n    my %count;\n  \
    \  foreach my $letter (@letters) {\n        $count{$letter} += 1;\n        if\
    \ ($count{$letter} > $max) {\n            $max = $count{$letter};\n        }\n\
    \    }\n    my @result;\n    foreach my $key (keys %count) {\n        if ($count{$key}\
    \ == $max) {\n            push(@result, $key);\n        }\n    }\n    return {\
    \ map { $_ => $max } @result };\n}", "    my @test = split / /, $test;\n    my\
    \ $max = 0;\n    my %hash;\n    foreach my $word (@test) {\n        my $cnt =\
    \ 1;\n        $hash{$word} = $cnt;\n        foreach my $word1 (@test) {\n    \
    \        if ($word eq $word1) {\n                $cnt++;\n                $hash{$word}\
    \ = $cnt;\n            }\n        }\n        if ($cnt > $max) {\n            $max\
    \ = $cnt;\n        }\n    }\n    my @result;\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} == $max) {\n            push @result, $key;\n   \
    \     }\n    }\n    my %result;\n    foreach my $res (@result) {\n        $result{$res}\
    \ = $max;\n    }\n    return %result;\n}", "    my @splitted_test = split(\" \"\
    , $test);\n    my %hash;\n    foreach my $word (@splitted_test) {\n        if\
    \ (defined $hash{$word}) {\n            $hash{$word} += 1;\n        } else {\n\
    \            $hash{$word} = 1;\n        }\n    }\n    my $max_value = 0;\n   \
    \ foreach my $value (values %hash) {\n        if ($value > $max_value) {\n   \
    \         $max_value = $value;\n        }\n    }\n    my %max_hash;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} == $max_value) {\n         \
    \   $max_hash{$key} = $max_value;\n        }\n    }\n    return %max_hash;\n}",
  "    my %result;\n    foreach my $char (split(' ', $test)) {\n        $result{$char}\
    \ += 1;\n    }\n    return \\%result;\n}", "    my @test_arr = split(\" \", $test);\n\
    \    my %test_map = ();\n    my %return_map = ();\n    my $max_len = 0;\n    for\
    \ my $elem (@test_arr) {\n        if(exists $test_map{$elem}) {\n            $test_map{$elem}++;\n\
    \        } else {\n            $test_map{$elem} = 1;\n        }\n        if($test_map{$elem}\
    \ > $max_len) {\n            $max_len = $test_map{$elem};\n        }\n    }\n\
    \    for my $key (keys %test_map) {\n        if($test_map{$key} == $max_len) {\n\
    \            $return_map{$key} = $max_len;\n        }\n    }\n    return %return_map;\n\
    }", "    my @words = split(/ /, $test);\n    my %histogram;\n    foreach my $letter\
    \ (@words) {\n        if(exists $histogram{$letter}) {\n            $histogram{$letter}++;\n\
    \        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n  \
    \  return %histogram;\n}", "    my(%h) = ();\n    my(@l) = ();\n    my($max) =\
    \ 0;\n    my($i);\n    my($str);", "    my @chars = split(' ', $test);\n    my\
    \ %occurences;\n    my %result;\n    foreach $char (@chars) {\n        $occurences{$char}++;\n\
    \    }\n    my $max;\n    foreach $key (keys %occurences) {\n        if (!defined\
    \ $max || $occurences{$key} > $max) {\n            $max = $occurences{$key};\n\
    \        }\n    }\n    foreach $key (keys %occurences) {\n        if ($occurences{$key}\
    \ == $max) {\n            $result{$key} = $max;\n        }\n    }\n    return\
    \ %result;\n}", "    my @vals = split(' ', $test);\n    my $longest_word_count\
    \ = 0;\n    my @longest_words;\n    my %hash;\n    for my $word (@vals) {\n  \
    \      $hash{$word}++;\n        if ($hash{$word} > $longest_word_count) {\n  \
    \          $longest_word_count = $hash{$word};\n            @longest_words = ($word);\n\
    \        } elsif ($hash{$word} == $longest_word_count) {\n            push @longest_words,\
    \ $word;\n        }\n    }\n    my %out;\n    for my $longest_word (@longest_words)\
    \ {\n        $out{$longest_word} = $longest_word_count;\n    }\n    return \\\
    %out;\n}", "    my @words = split(\" \", $test);\n    my %histogram;\n    foreach\
    \ $word (@words) {\n        if (exists $histogram{$word}) {\n            $histogram{$word}\
    \ += 1;\n        } else {\n            $histogram{$word} = 1;\n        }\n   \
    \ }\n    return %histogram;\n}", "    my %hash;\n    my @words = split(/ /, $test);\n\
    \    foreach my $word (@words) {\n        if (exists $hash{$word}) {\n       \
    \     $hash{$word}++;\n        } else {\n            $hash{$word} = 1;\n     \
    \   }\n    }\n    return %hash;\n}", "    my %hash = ();\n    my @testarr = split('\
    \ ', $test);\n    my @max = ();\n    my $max = 0;\n    for my $i (0 .. $#testarr)\
    \ {\n        $hash{$testarr[$i]}++;\n    }\n    for my $i (0 .. $#testarr) {\n\
    \        if($hash{$testarr[$i]} > $max) {\n            $max = $hash{$testarr[$i]};\n\
    \            @max = ();\n            push(@max, $testarr[$i]);\n        } elsif($hash{$testarr[$i]}\
    \ == $max) {\n            push(@max, $testarr[$i]);\n        }\n    }\n    my\
    \ %mhash = ();\n    for my $i (0 .. $#max) {\n        $mhash{$max[$i]} = $max;\n\
    \    }\n    return %mhash;\n}", "    my @letters = split(' ', $test);\n    my\
    \ $result = {};\n    foreach my $letter (@letters) {\n        $result->{$letter}++;\n\
    \    }\n    return $result;\n}", "    my(%results);\n    my(@letters) = split(/\\\
    s+/, $test);\n    foreach my $letter (@letters) {\n        if (exists $results{$letter})\
    \ {\n            $results{$letter}++;\n        } else {\n            $results{$letter}\
    \ = 1;\n        }\n    }\n    return %results;\n}", "    my @nums = $test =~ /\\\
    w+/g;\n    my %histo;\n    foreach my $num (@nums) {\n        $histo{$num} = ($histo{$num}\
    \ || 0) + 1;\n    }\n    return %histo;\n}", "    my %h;\n    my %result;\n  \
    \  my $max_count = 0;\n    for my $s (split(/\\s+/, $test)) {\n        $h{$s}++;\n\
    \        if($h{$s} > $max_count) {\n            $max_count = $h{$s};\n       \
    \ }\n    }\n    for my $s (keys %h) {\n        if($h{$s} == $max_count) {\n  \
    \          $result{$s} = $h{$s};\n        }\n    }\n    return \\%result;\n}",
  "    # :::: Your code goes here ::::\n}", "    my @test_array = split(/ /, $test);\n\
    \    my %result = ();\n    my $max = 0;\n    foreach $i (@test_array) {\n    \
    \    if (exists $result{$i}) {\n            $result{$i}++;\n        } else {\n\
    \            $result{$i} = 1;\n        }\n        if ($result{$i} > $max) {\n\
    \            $max = $result{$i};\n        }\n    }\n    my %final_result = ();\n\
    \    foreach $key (keys %result) {\n        if ($result{$key} == $max) {\n   \
    \         $final_result{$key} = $max;\n        }\n    }\n    return %final_result;\n\
    }", "    my(%counts);\n    my(@most);\n    my($count) = 0;\n    my(@words) = split(\"\
    \ \", $test);\n    foreach (@words) {\n        $counts{$_}++;\n    }\n    foreach\
    \ (keys %counts) {\n        if ($counts{$_} > $count) {\n            $count =\
    \ $counts{$_};\n            @most = ($_);\n        } elsif ($counts{$_} == $count)\
    \ {\n            push(@most, $_);\n        }\n    }\n    my(%final) = ();\n  \
    \  foreach (@most) {\n        $final{$_} = $count;\n    }\n    return %final;\n\
    }", "    return {} if $test eq \"\";\n    my $counter = {};\n    foreach my $word\
    \ (split(/ /, $test)) {\n        $counter->{$word}++;\n    }\n    my $max = 0;\n\
    \    foreach my $key (keys %$counter) {\n        if ($counter->{$key} > $max)\
    \ {\n            $max = $counter->{$key};\n        }\n    }\n    my $result =\
    \ {};\n    foreach my $key (keys %$counter) {\n        if ($counter->{$key} ==\
    \ $max) {\n            $result->{$key} = $max;\n        }\n    }\n    return $result;\n\
    }", "    my @words = split(' ', $test);\n    my %letter_count;\n    my %max_letter_count;\n\
    \    my $count = 0;\n    my $max_count = 0;\n    my $letter;\n    foreach my $word\
    \ (@words) {\n        $letter_count{$word}++;\n        $count = $letter_count{$word};\n\
    \        if ($count > $max_count) {\n            %max_letter_count = ($word =>\
    \ $count);\n            $max_count = $count;\n        } elsif ($count == $max_count)\
    \ {\n            $max_letter_count{$word} = $count;\n        }\n    }\n    return\
    \ %max_letter_count;\n}", "    my @arr = split(' ', $test);\n    my $max = 0;\n\
    \    my %hash;\n    foreach my $word (@arr) {\n        if (not defined $hash{$word})\
    \ {\n            $hash{$word} = 1;\n        } else {\n            $hash{$word}++;\n\
    \        }\n        if ($hash{$word} > $max) {\n            $max = $hash{$word};\n\
    \        }\n    }\n    my %ret;\n    foreach my $key (keys %hash) {\n        if\
    \ ($hash{$key} == $max) {\n            $ret{$key} = $max;\n        }\n    }\n\
    \    return %ret;\n}", "    my %histogram;\n    foreach my $letter (split(\" \"\
    , $test)) {\n        # Note: the \"|| 0\" sets the default value of the hash entry\
    \ to zero if\n        # the key does not exist yet.\n        $histogram{$letter}\
    \ = ($histogram{$letter} || 0) + 1;\n    }\n    return %histogram;\n}", "    my\
    \ @line = split(\" \", $test);\n    my %histogram = ();\n    foreach my $letter\
    \ (@line) {\n        if(!$histogram{$letter}) {\n            $histogram{$letter}\
    \ = 1;\n        } else {\n            $histogram{$letter} += 1;\n        }\n \
    \   }\n    my @max = sort {$histogram{$b} <=> $histogram{$a}} keys %histogram;\n\
    \    # my %result = ();\n    # foreach my $max(@max) {\n    #     if($histogram{$max}\
    \ == $histogram{$max[0]}) {\n    #         $result{$max} = $histogram{$max};\n\
    \    #     }\n    # }\n    # return %result;\n    my $max_count = $histogram{$max[0]};\n\
    \    my %result = ();\n    foreach my $letter (keys %histogram) {\n        if($histogram{$letter}\
    \ == $max_count) {\n            $result{$letter} = $max_count;\n        }\n  \
    \  }\n    return %result;\n}\nprint histogram(\"a b c\");\nprint histogram(\"\
    a b b a\");\nprint histogram(\"a b c a b\");\nprint histogram(\"b b b b a\");\n\
    print histogram(\"\");", "    my %count = ();\n    foreach my $char (split(' ',\
    \ $test)) {\n        if (not exists $count{$char}) {\n            $count{$char}\
    \ = 1;\n        } else {\n            $count{$char} += 1;\n        }\n    }\n\
    \    return %count;\n}", "    my %histogram;\n    foreach my $letter (split(/\\\
    s+/, $test)) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "    my %hist;\n    $hist{$_}++ for (split(/\\s+/, $test));\n    my @max_keys\
    \ = grep { $hist{$_} == max(values %hist) } keys %hist;\n    my %max_hash = map\
    \ { $_ => $hist{$_} } @max_keys;\n    return %max_hash;\n}", "    my %histogram;\n\
    \    foreach my $letter (split / /, $test) {\n        $histogram{$letter}++;\n\
    \    }\n    my %highs;\n    my $high;\n    foreach my $key (keys %histogram) {\n\
    \        if(defined $high and $histogram{$key} == $high) {\n            $highs{$key}\
    \ = $histogram{$key};\n        } elsif(!defined $high or $histogram{$key} > $high)\
    \ {\n            %highs = ($key => $histogram{$key});\n            $high = $histogram{$key};\n\
    \        }\n    }\n    return %highs;\n}", "    my %histogram = ();\n    my %max\
    \ = ();\n    my $max = 0;\n    foreach my $letter (split(/ /, $test)) {\n    \
    \    $histogram{$letter}++;\n        if($histogram{$letter} > $max) {\n      \
    \      $max = $histogram{$letter};\n            %max = ();\n            $max{$letter}\
    \ = $histogram{$letter};\n        } elsif($histogram{$letter} == $max) {\n   \
    \         $max{$letter} = $histogram{$letter};\n        }\n    }\n    return %max;\n\
    }", "    #...\n}", "    my %hist;\n    foreach my $i (split(/\\s+/, $test)) {\n\
    \        $hist{$i}++;\n    }\n    return %hist;\n}", "    # Implement here\n}",
  "    my(%letters, $letter, $count);\n    foreach $letter (split(/\\s+/, $test))\
    \ {\n        if ($letters{$letter}) {\n            $letters{$letter}++;\n    \
    \    } else {\n            $letters{$letter} = 1;\n        }\n    }\n    # print\
    \ Dumper(\\%letters);\n    my(%highest);\n    foreach $letter (keys %letters)\
    \ {\n        if (!$count || $letters{$letter} > $count) {\n            %highest\
    \ = ($letter => $letters{$letter});\n            $count = $letters{$letter};\n\
    \        } elsif ($letters{$letter} == $count) {\n            $highest{$letter}\
    \ = $letters{$letter};\n        }\n    }\n    return %highest;\n}", "    my @letters\
    \ = split(\" \", $test);\n    my %hist = ();\n    foreach my $let (@letters) {\n\
    \t$hist{$let}++;\n    }\n    my $count = 0;\n    my %lett_count = ();\n    foreach\
    \ my $let (keys %hist) {\n\tif ($hist{$let} > $count) {\n\t    %lett_count = ();\n\
    \t    $lett_count{$let} = $hist{$let};\n\t    $count = $hist{$let};\n\t} elsif\
    \ ($hist{$let} == $count) {\n\t    $lett_count{$let} = $hist{$let};\n\t}\n   \
    \ }\n    return %lett_count;\n}", "    my @chars = split(/ /, $test);\n    my\
    \ %hist;\n    foreach my $char (@chars) {\n        $hist{$char}++;\n    }\n  \
    \  my %max;\n    foreach my $char (keys %hist) {\n        if ($hist{$char} > $max{$char})\
    \ {\n            %max = ();\n            $max{$char} = $hist{$char};\n       \
    \ } elsif ($hist{$char} == $max{$char}) {\n            $max{$char} = $hist{$char};\n\
    \        }\n    }\n    return %max;\n}", "    my @letters = split ' ', $test;\n\
    \    my %histogram;\n    for my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    my %max;\n    my $max = 0;\n    for my $letter (keys %histogram) {\n\
    \        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
    \            %max = ($letter => $max);\n        } elsif ($histogram{$letter} ==\
    \ $max) {\n            $max{$letter} = $max;\n        }\n    }\n    return %max;\n\
    }", "    my @words = split(/ /, $test);\n    my %hash = ();\n    foreach (@words)\
    \ {\n        if (exists $hash{$_}) {\n            $hash{$_} += 1;\n        } else\
    \ {\n            $hash{$_} = 1;\n        }\n    }\n    foreach (keys %hash) {\n\
    \        if ($hash{$_} > 1) {\n            return %hash;\n        }\n    }\n \
    \   return %hash;\n}", "    my(%result);\n    my(@test) = split(/ /, $test);\n\
    \    my($count);\n    my($high);\n    foreach $test (@test) {\n        if ($result{$test})\
    \ {\n            $result{$test} += 1;\n        } else {\n            $result{$test}\
    \ = 1;\n        }\n    }\n    $high = 0;\n    foreach $test (keys %result) {\n\
    \        if ($result{$test} > $high) {\n            $high = $result{$test};\n\
    \        }\n    }\n    foreach $test (keys %result) {\n        if ($result{$test}\
    \ < $high) {\n            delete $result{$test};\n        }\n    }\n    return\
    \ %result;\n}", "    my %hash;\n    foreach my $c (split / /, $test) {\n     \
    \   $hash{$c}++;\n    }\n    my $max = 0;\n    my @max_letters;\n    foreach my\
    \ $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \            @max_letters = ($key);\n        } elsif ($hash{$key} == $max) {\n\
    \            push @max_letters, $key;\n        }\n    }\n    my %ret;\n    foreach\
    \ my $key (@max_letters) {\n        $ret{$key} = $max;\n    }\n    return %ret;\n\
    }", "    my(%test_hash, $biggest_value, $biggest_key);\n    %test_hash = ();\n\
    \    $biggest_value = 0;\n    $biggest_key = \"\";\n    my @test_array = split(/\
    \ /, $test);\n    my $i = 0;\n    for ($i = 0; $i < scalar(@test_array); $i++)\
    \ {\n        if (defined($test_hash{$test_array[$i]})) {\n            $test_hash{$test_array[$i]}++;\n\
    \        } else {\n            $test_hash{$test_array[$i]} = 1;\n        }\n \
    \       if ($test_hash{$test_array[$i]} > $biggest_value) {\n            $biggest_value\
    \ = $test_hash{$test_array[$i]};\n            $biggest_key = $test_array[$i];\n\
    \        }\n    }\n    my $j = 0;\n    my @biggest_keys = keys %test_hash;\n \
    \   for ($j = 0; $j < scalar(@biggest_keys); $j++) {\n        if ($test_hash{$biggest_keys[$j]}\
    \ < $biggest_value) {\n            delete $test_hash{$biggest_keys[$j]};\n   \
    \     }\n    }\n    return %test_hash;\n}", "    my %hash = ();\n    my $max =\
    \ 0;\n    my @max_array = ();\n    my @input = split / /, $test;\n    foreach\
    \ my $val (@input) {\n        if (exists $hash{$val}) {\n            $hash{$val}++;\n\
    \        } else {\n            $hash{$val} = 1;\n        }\n    }\n    foreach\
    \ my $keys (keys %hash) {\n        if ($hash{$keys} > $max) {\n            $max\
    \ = $hash{$keys};\n            @max_array = ($keys);\n        } elsif ($hash{$keys}\
    \ == $max) {\n            push @max_array, $keys;\n        }\n    }\n    my %result\
    \ = ();\n    foreach my $val (@max_array) {\n        $result{$val} = $max;\n \
    \   }\n    return %result;\n}", "    my %histogram;\n    foreach my $letter (split(/\\\
    s+/, $test)) {\n        $histogram{$letter} += 1;\n    }\n    return %histogram;\n\
    }", "    my @letters = split(/\\s+/, $test);\n    my %histogram;\n    foreach\
    \ my $letter (@letters) {\n        if (exists $histogram{$letter}) {\n       \
    \     $histogram{$letter} += 1;\n        } else {\n            $histogram{$letter}\
    \ = 1;\n        }\n    }\n    return %histogram;\n}", "    my $answer = {};\n\
    \    my $count = 0;\n    my $most = 0;\n    my $temp = '';\n    my @numbers =\
    \ split / /, $test;\n    for(@numbers) {\n        $count = () = $test =~ /$_/g;\n\
    \        if ($count > $most) {\n            $most = $count;\n            $temp\
    \ = $_;\n        }\n    }\n    $answer->{$temp} = $most;\n    return $answer;\n\
    }", "    my @test = split(' ', $test);\n    my %occurrences;\n    my %highest;\n\
    \    foreach my $letter (@test) {\n        $occurrences{$letter}++;\n    }\n \
    \   my $highest_count = 0;\n    while (my ($key, $value) = each %occurrences)\
    \ {\n        if ($value > $highest_count) {\n            $highest_count = $value;\n\
    \            %highest = ($key => $value);\n        }\n        elsif ($value ==\
    \ $highest_count) {\n            $highest{$key} = $value;\n        }\n    }\n\
    \    return %highest;\n}", "    my @letters = split(' ', $test);\n    my %hist;\n\
    \    foreach my $letter (@letters) {\n        $hist{$letter} += 1;\n    }\n  \
    \  my $value = (sort {$b <=> $a} values %hist)[0];\n    my %result;\n    foreach\
    \ my $letter (keys %hist) {\n        if ($hist{$letter} == $value) {\n       \
    \     $result{$letter} = $value;\n        }\n    }\n    return %result;\n}", " \
    \   my @letters = split / /, $test;\n    my %histogram;\n    for my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "    my\
    \ %h;\n    my %hash;\n    my @arr = split / /, $test;\n    foreach my $i (@arr)\
    \ {\n        $h{$i} = exists $h{$i} ? $h{$i} + 1 : 1;\n    }\n    my $max = (sort\
    \ {$h{$b} <=> $h{$a}} keys %h)[0];\n    $hash{$max} = $h{$max};\n    return %hash;\n\
    }", "    my @keys = split(/ /, $test);\n    my $count;\n    my %hash;\n    #iterate\
    \ through the array\n    foreach my $key (@keys) {\n        $count = grep{$_ eq\
    \ $key} @keys;\n        #if the count is >1 then add it to the hash\n        if\
    \ ($count > 1) {\n            $hash{$key} = $count;\n        }\n    }\n    #iterate\
    \ through hash and set the key with the highest count to $max and\n    #set the\
    \ corresponding value to $max_val\n    my $max = 0;\n    my $max_val;\n    while\
    \ (my ($key, $value) = each %hash) {\n        if ($value > $max) {\n         \
    \   $max = $value;\n            $max_val = $key;\n        }\n    }\n    #if there\
    \ were no multiple repetitions of anything then return the hash with\n    #the\
    \ count of 1\n    if ($max == 0) {\n        foreach my $key (@keys) {\n      \
    \      $hash{$key} = 1;\n        }\n        return %hash;\n    }\n    #if there\
    \ was a multiple repetition, then iterate through the hash and\n    #delete the\
    \ ones that aren't the one with the highest count\n    else {\n        while (my\
    \ ($key, $value) = each %hash) {\n            if ($key ne $max_val) {\n      \
    \          delete $hash{$key};\n            }\n        }\n        return %hash;\n\
    \    }\n}", "    # Hash for storing each letter and its frequency\n    my %hash;\n\
    \    # Split the string into separate letters and store it in a new array\n  \
    \  my @array = split(\" \", $test);\n    # Loop through each letter and increment\
    \ that letter's frequency in the hash\n    foreach my $letter (@array) {\n   \
    \     $hash{$letter} += 1;\n    }\n    # Loop through the hash keys, and delete\
    \ any key that has the lowest frequency\n    foreach my $key (keys %hash) {\n\
    \        if ($hash{$key} == 1) {\n            delete $hash{$key};\n        }\n\
    \    }\n    # Return the hash with the remaining letters and frequencies\n   \
    \ return %hash;\n}", "    my %out;\n    my @letters = split(/ /, $test);\n   \
    \ my $max = 0;\n    foreach my $letter (@letters) {\n        $out{$letter}++;\n\
    \        if ($out{$letter} > $max) {\n            $max = $out{$letter};\n    \
    \    }\n    }\n    foreach my $key (keys %out) {\n        if ($out{$key} != $max)\
    \ {\n            delete $out{$key};\n        }\n    }\n    return %out;\n}", " \
    \   my @str = split(' ', $test);\n    my %hist;\n    my $count;\n    my @max_vals;\n\
    \    my $max_count = 0;\n    foreach $count (@str) {\n        if (defined $hist{$count})\
    \ {\n            $hist{$count} += 1;\n        } else {\n            $hist{$count}\
    \ = 1;\n        }\n    }\n    foreach $count (keys %hist) {\n        if ($hist{$count}\
    \ > $max_count) {\n            $max_count = $hist{$count};\n            @max_vals\
    \ = ($count);\n        } elsif ($hist{$count} == $max_count) {\n            push(@max_vals,\
    \ $count);\n        }\n    }\n    my %max_hash;\n    foreach $count (@max_vals)\
    \ {\n        $max_hash{$count} = $max_count;\n    }\n    return %max_hash;\n}",
  "    my(%hash);\n    foreach(split(' ', $test)) {\n        $hash{$_} += 1;\n   \
    \ }\n    return %hash;\n}", "    my %results;\n    foreach my $i (split(/ /, $test))\
    \ {\n        $results{$i}++;\n    }\n    return %results;\n}", "    my $result\
    \ = {};\n    my $max = 0;\n    foreach my $char (split(' ', $test)) {\n      \
    \  if (!defined($result->{$char})) {\n            $result->{$char} = 1;\n    \
    \    } else {\n            $result->{$char} += 1;\n        }\n        if ($result->{$char}\
    \ > $max) {\n            $max = $result->{$char};\n        }\n    }\n    foreach\
    \ my $key (keys %$result) {\n        if ($result->{$key} < $max) {\n         \
    \   delete $result->{$key};\n        }\n    }\n    return $result;\n}", "    my\
    \ %hist;\n    if ($test =~ m/\\s/) {\n        my @words = split(/\\s/, $test);\n\
    \        foreach my $w (@words) {\n            $hist{$w} += 1;\n        }\n  \
    \  } else {\n        $hist{$test} += 1;\n    }\n    my $max = 0;\n    my %most_common;\n\
    \    foreach my $key (keys %hist) {\n        my $value = $hist{$key};\n      \
    \  if ($value > $max) {\n            $max = $value;\n            %most_common\
    \ = ();\n            $most_common{$key} = $value;\n        } elsif ($value ==\
    \ $max) {\n            $most_common{$key} = $value;\n        }\n    }\n    return\
    \ %most_common;\n}", "    my %h;\n    $h{$_}++ for split /\\s+/, $test;\n    return\
    \ \\%h;\n}", "    return {} if $test eq \"\";\n    my @letters = split(' ', $test);\n\
    \    my %results;\n    for my $letter (@letters) {\n        $results{$letter}++;\n\
    \    }\n    my @max_vals = grep { $results{$_} == max(values %results) } keys\
    \ %results;\n    %results = map { $_ => $results{$_} } @max_vals;\n    return\
    \ %results;\n}", "    my %letters;\n    my %counts;\n    my $count = 0;\n    my\
    \ @letters = split / /, $test;\n    foreach my $letter (@letters) {\n        $letters{$letter}++;\n\
    \    }\n    foreach my $letter (keys %letters) {\n        if ($letters{$letter}\
    \ > $count) {\n            $count = $letters{$letter};\n        }\n    }\n   \
    \ foreach my $letter (keys %letters) {\n        if ($letters{$letter} == $count)\
    \ {\n            $counts{$letter} = $count;\n        }\n    }\n    return %counts;\n\
    }", "    my @test = split(' ', $test);\n    my %count;\n    my %out;\n    my $max\
    \ = 1;\n    foreach (@test) {\n        if (exists $count{$_}) {\n            $count{$_}++;\n\
    \            if ($count{$_} > $max) {\n                $max = $count{$_};\n  \
    \          }\n        } else {\n            $count{$_} = 1;\n        }\n    }\n\
    \    my @keys = keys %count;\n    foreach (@keys) {\n        if ($count{$_} ==\
    \ $max) {\n            $out{$_} = $max;\n        }\n    }\n    return %out;\n}",
  "    my %hash;\n    foreach (split ' ', $test) {\n        $hash{$_}++;\n    }\n\
    \    return \\%hash;\n}", "    my(%histogram) = ();\n    my(@testArray) = split(\"\
    \ \", $test);\n    foreach (@testArray) {\n        if (!exists($histogram{$_}))\
    \ {\n            $histogram{$_} = 1;\n        } else {\n            $histogram{$_}++;\n\
    \        }\n    }\n    my(@histogram) = sort keys %histogram;\n    my($max) =\
    \ $histogram{$histogram[0]};\n    my(%result) = ();\n    foreach (@histogram)\
    \ {\n        if ($histogram{$_} == $max) {\n            $result{$_} = $max;\n\
    \        }\n    }\n    return %result;\n}", "    return {} if $test eq \"\";\n\
    \    my $count = {};\n    $count->{$_}++ for (split \" \", $test);\n    my $max\
    \ = max(values %$count);\n    my @max = grep { $count->{$_} == $max } keys %$count;\n\
    \    return { map { $_ => $max } @max };\n}", "    my @letters = split ' ', $test;\n\
    \    my %count;\n    for my $letter (@letters) {\n        $count{$letter} += 1;\n\
    \    }\n    my $max = 0;\n    for my $letter (keys %count) {\n        $max = $count{$letter}\
    \ if $count{$letter} > $max;\n    }\n    my %histogram;\n    for my $letter (keys\
    \ %count) {\n        $histogram{$letter} = $count{$letter} if $count{$letter}\
    \ == $max;\n    }\n    return %histogram;\n}", "    my @string = split(\" \",\
    \ $test);\n    my $result = {};\n    for my $letter (@string) {\n        if (defined\
    \ $result->{$letter}) {\n            $result->{$letter} += 1;\n        } else\
    \ {\n            $result->{$letter} = 1;\n        }\n    }\n    return $result;\n\
    }", "    my @letters = split(/\\s+/, $test);\n    my %hash = ();\n    for my $letter\
    \ (@letters) {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n    my %max_hash\
    \ = ();\n    for my $letter (keys %hash) {\n        my $val = $hash{$letter};\n\
    \        if ($val > $max) {\n            $max = $val;\n            %max_hash =\
    \ ();\n            $max_hash{$letter} = $val;\n        } elsif ($val == $max)\
    \ {\n            $max_hash{$letter} = $val;\n        }\n    }\n    return %max_hash;\n\
    }", "    my @words = split(/ /, $test);\n    my %count = ();\n    my %alphabet\
    \ = ();\n    foreach $word (@words) {\n        $count{$word}++;\n    }\n    my\
    \ $max = -1;\n    foreach $word (keys %count) {\n        if ($count{$word} > $max)\
    \ {\n            $max = $count{$word};\n        }\n    }\n    foreach $word (keys\
    \ %count) {\n        if ($count{$word} == $max) {\n            $alphabet{$word}\
    \ = $max;\n        }\n    }\n    return %alphabet;\n}", "    my %res;\n    foreach\
    \ my $x (split(/ /, $test)) {\n        $res{$x} = ($res{$x} // 0) + 1;\n    }\n\
    \    return \\%res;\n}", "    # Your code here\n    my $char;\n    my $hash =\
    \ {};\n    my $temp_hash = {};\n    my $test_hash = {};\n    my $test_hash_key;\n\
    \    my $test_hash_value;\n    my $max = 0;\n    my $b = 1;\n    my $letter;\n\
    \    my $res;\n    my $cnt = 0;\n    my $k;\n    my $v;\n    my $key;\n    foreach\
    \ $char (split(/\\s+/, $test)) {\n\t$hash->{$char} += 1;\n    }\n    $test_hash\
    \ = $hash;\n    foreach $k (keys %$test_hash) {\n\tif($test_hash->{$k} > $max)\
    \ {\n\t    $max = $test_hash->{$k};\n\t}\n    }\n    foreach $k (keys %$test_hash)\
    \ {\n\tif($test_hash->{$k} == $max) {\n\t    $temp_hash->{$k} = $max;\n\t}\n \
    \   }\n    return $temp_hash;\n}", "    my @test = split(/ /, $test);\n    my\
    \ %histogram;\n    foreach my $str (@test) {\n        if (exists $histogram{$str})\
    \ {\n            $histogram{$str} += 1;\n        } else {\n            $histogram{$str}\
    \ = 1;\n        }\n    }\n    return \\%histogram;\n}", "    my %histogram;\n\
    \    foreach my $letter (split(/\\s+/, $test)) {\n        $histogram{$letter}\
    \ += 1;\n    }\n    my %largest;\n    foreach my $key (keys %histogram) {\n  \
    \      if (!%largest) {\n            %largest = ($key => $histogram{$key});\n\
    \        }\n        elsif ($histogram{$key} > $largest{(keys %largest)[0]}) {\n\
    \            %largest = ($key => $histogram{$key});\n        }\n        elsif\
    \ ($histogram{$key} == $largest{(keys %largest)[0]}) {\n            $largest{$key}\
    \ = $histogram{$key};\n        }\n    }\n    return %largest;\n}", "    my %hash\
    \ = ();\n    my @array = split(/\\s+/, $test);\n    for(my $i = 0; $i < scalar(@array);\
    \ $i++) {\n        $hash{$array[$i]} += 1;\n    }\n    return %hash;\n}", "  \
    \  my %count;\n    my %max_key;\n    my $max_count = 0;\n    foreach my $char\
    \ (split(/\\s+/, $test)) {\n        $count{$char}++;\n        if ($count{$char}\
    \ > $max_count) {\n            $max_count = $count{$char};\n            $max_key{$char}\
    \ = $max_count;\n        }\n        elsif ($count{$char} == $max_count) {\n  \
    \          $max_key{$char} = $max_count;\n        }\n    }\n    return %max_key;\n\
    }", "    my %elements;\n    my @array = split(\" \", $test);\n    for my $elem\
    \ (@array) {\n        $elements{$elem}++;\n    }\n    my %result;\n    for my\
    \ $elem (keys %elements) {\n        my $count = $elements{$elem};\n        push\
    \ @{$result{$count}}, $elem;\n    }\n    my @sorted = sort {$b <=> $a} keys %result;\n\
    \    my $max = $sorted[0];\n    my @common = @{$result{$max}};\n    my %count;\n\
    \    for my $elem (@common) {\n        $count{$elem} = $max;\n    }\n    return\
    \ %count;\n}", "    my @array = split(/\\s+/, $test);\n    my %hash = ();\n  \
    \  for my $key (@array) {\n        if (exists $hash{$key}) {\n            $hash{$key}++;\n\
    \        } else {\n            $hash{$key} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "    my(%counts);\n    foreach my $char (split(' ', $test)) {\n\
    \        $counts{$char}++;\n    }\n    return %counts;\n}", "    my %histo;\n\
    \    my @elements = split(/ /, $test);\n    my $high = 0;\n    my $max = 0;\n\
    \    my $this_letter;\n    my $this_count;\n    foreach my $letter (@elements)\
    \ {\n        $histo{$letter}++;\n    }\n    foreach my $key (keys %histo) {\n\
    \        $this_letter = $key;\n        $this_count = $histo{$key};\n        if\
    \ ($this_count > $max) {\n            $max = $this_count;\n            $high =\
    \ 0;\n        }\n        if ($this_count == $max) {\n            $high++;\n  \
    \      }\n    }\n    $test = {};\n    if ($high == 0) {\n        $test->{$this_letter}\
    \ = $this_count;\n    } else {\n        foreach my $key (keys %histo) {\n    \
    \        if ($histo{$key} == $max) {\n                $test->{$key} = $max;\n\
    \            }\n        }\n    }\n    return $test;\n}", "    my $counts = {};\n\
    \    my @words = split(\" \", $test);\n    foreach my $word (@words) {\n     \
    \   if(exists $counts->{$word}) {\n            $counts->{$word}++;\n        }\
    \ else {\n            $counts->{$word} = 1;\n        }\n    }\n    return $counts;\n\
    }", "    my @arr = split(' ', $test);\n    my %counts;\n    my %hash = ();\n \
    \   for my $word(@arr) {\n        $counts{$word}++;\n    }\n    my $max = 0;\n\
    \    for my $word(@arr) {\n        if ($counts{$word} > $max) {\n            $max\
    \ = $counts{$word};\n        }\n    }\n    for my $word(@arr) {\n        if ($counts{$word}\
    \ == $max) {\n            $hash{$word} = $max;\n        }\n    }\n    return %hash;\n\
    }", "    my(%h);\n    foreach my $s (split(' ', $test)) {\n        $h{$s}++;\n\
    \    }\n    my($max) = 0;\n    foreach my $k (keys %h) {\n        $max = $h{$k}\
    \ if $h{$k} > $max;\n    }\n    my(%h_mod);\n    foreach my $k (keys %h) {\n \
    \       $h_mod{$k} = $h{$k} if $h{$k} == $max;\n    }\n    return \\%h_mod;\n}",
  "    my @letters = split(' ', $test);\n    my $hashref = {};\n    foreach my $letter\
    \ (@letters) {\n        $hashref->{$letter} = 0 if not defined $hashref->{$letter};\n\
    \        $hashref->{$letter}++;\n    }\n    $hashref;\n}", "    my %hist;\n  \
    \  my $max = 0;\n    my @max_keys;\n    foreach (split(/\\s+/, $test)) {\n   \
    \     if (exists $hist{$_}) {\n            $hist{$_} += 1;\n        } else {\n\
    \            $hist{$_} = 1;\n        }\n        if ($hist{$_} > $max) {\n    \
    \        $max = $hist{$_};\n            @max_keys = ($_);\n        } elsif ($hist{$_}\
    \ == $max) {\n            push @max_keys, $_;\n        }\n    }\n    map { $_\
    \ => $max } @max_keys;\n}", "    my %output;\n    my @words = split(' ', $test);\n\
    \    foreach my $word (@words) {\n        if (defined $output{$word}) {\n    \
    \        $output{$word} += 1;\n        } else {\n            $output{$word} =\
    \ 1;\n        }\n    }\n    return %output;\n}", "    my(%hash);\n    my(@arr)\
    \ = split(\" \", $test);\n    my(@res);\n    my($highest) = 0;\n    my($key);\n\
    \    foreach $key (@arr) {\n        if (!exists($hash{$key})) {\n            $hash{$key}\
    \ = 1;\n        } else {\n            $hash{$key}++;\n        }\n    }\n    foreach\
    \ $key (keys %hash) {\n        if ($hash{$key} > $highest) {\n            $highest\
    \ = $hash{$key};\n        }\n    }\n    foreach $key (keys %hash) {\n        if\
    \ ($hash{$key} == $highest) {\n            push(@res, $key);\n        }\n    }\n\
    \    print \"@res\\n\";\n    return;\n}", "    my %res = ();\n    my @arr = split(/\\\
    s+/, $test);\n    foreach my $n (@arr) {\n        if (exists $res{$n}) {\n   \
    \         $res{$n}++;\n        } else {\n            $res{$n} = 1;\n        }\n\
    \    }\n    return %res;\n}", "    my %letters;\n    my %letters_count;\n    my\
    \ $max_count = 1;\n    my $max_letter = \"\";\n    my $curr_count = 0;\n    my\
    \ $curr_letter = \"\";\n    my @most_letters;\n    my %most_letter;", "    my(%hist);\n\
    \    $hist{$_}++ foreach split(/\\s+/, $test);\n    foreach my $key (keys %hist)\
    \ {\n        return {$key => $hist{$key}} if $hist{$key} > 1;\n    }\n    return\
    \ {};\n}", "    my %hash;\n    my $max_key = \"\";\n    my $max_val = 0;\n   \
    \ my @max_keys;\n    foreach my $char (split(\" \", $test)) {\n        if (exists\
    \ $hash{$char}) {\n            $hash{$char}++;\n        } else {\n           \
    \ $hash{$char} = 1;\n        }\n        if ($hash{$char} >= $max_val) {\n    \
    \        if ($hash{$char} > $max_val) {\n                @max_keys = ($char);\n\
    \            } else {\n                push(@max_keys, $char);\n            }\n\
    \            $max_val = $hash{$char};\n        }\n    }\n    my %ret;\n    foreach\
    \ my $key (@max_keys) {\n        $ret{$key} = $max_val;\n    }\n    return %ret;\n\
    }", "    my %count;\n    foreach my $char (split //, $test) {\n        $count{$char}++;\n\
    \    }\n    my %result;\n    my $max = 0;\n    foreach my $key (keys %count) {\n\
    \        my $value = $count{$key};\n        if ($value > $max) {\n           \
    \ $max = $value;\n            %result = ();\n        }\n        if ($value ==\
    \ $max) {\n            $result{$key} = $value;\n        }\n    }\n    return %result;\n\
    }", "    my %testHash;\n    my @testArray = split(' ', $test);\n    foreach my\
    \ $testArrayElement (@testArray) {\n        $testHash{$testArrayElement} += 1;\n\
    \    }\n    my $maxValue = 0;\n    my %hashToReturn;\n    foreach my $testHashKey\
    \ (keys %testHash) {\n        if ($testHash{$testHashKey} > $maxValue) {\n   \
    \         $maxValue = $testHash{$testHashKey};\n        }\n    }\n    foreach\
    \ my $testHashKey (keys %testHash) {\n        if ($testHash{$testHashKey} == $maxValue)\
    \ {\n            $hashToReturn{$testHashKey} = $maxValue;\n        }\n    }\n\
    \    return %hashToReturn;\n}", "    my %result;\n    my @characters = split(/\
    \ /, $test);\n    foreach my $letter (@characters) {\n        if ($result{$letter})\
    \ {\n            $result{$letter}++;\n        } else {\n            $result{$letter}\
    \ = 1;\n        }\n    }\n    return %result;\n}", "    my @letters = split /\
    \ /, $test;\n    my $occurence = 0;\n    my $highest_letter = \"\";\n    my %hash\
    \ = ();\n    my @highest_letters = ();\n    for my $letter (@letters) {\n    \
    \    if (not exists $hash{$letter}) {\n            $hash{$letter} = 1;\n     \
    \   } else {\n            $hash{$letter} += 1;\n        }\n        if ($hash{$letter}\
    \ > $occurence) {\n            $occurence = $hash{$letter};\n            $highest_letter\
    \ = $letter;\n        }\n    }\n    @highest_letters = grep { $hash{$_} == $occurence\
    \ } keys %hash;\n    my %highest_hash = map { $_ => $occurence } @highest_letters;\n\
    \    return %highest_hash;\n}", "    # your code here\n    return 0;\n}", "  \
    \  my %histogram = ();\n    my @letters = split(\" \", $test);\n    foreach my\
    \ $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "    my @arr = split / /, $test;\n    my %h = ();\n    my %result = ();\n\
    \    for my $k (@arr) {\n        $h{$k}++;\n    }\n    for my $k (keys %h) {\n\
    \        my $count = $h{$k};\n        if ($count > 1) {\n            $result{$k}\
    \ = $count;\n        }\n    }\n    return %result;\n}", "    my %histogram;\n\
    \    my %max;\n    my @split = split(/ /, $test);\n    for(my $i = 0; $i < @split;\
    \ $i++) {\n        $histogram{$split[$i]}++;\n    }\n    my $count = 0;\n    foreach\
    \ $key (keys %histogram) {\n        if($histogram{$key} > $count) {\n        \
    \    $count = $histogram{$key};\n        }\n    }\n    foreach $key (keys %histogram)\
    \ {\n        if($histogram{$key} == $count) {\n            $max{$key} = $count;\n\
    \        }\n    }\n    return %max;\n}", "    my @testarray = split(/ /, $test);\n\
    \    my %histo = ();\n    foreach my $letter (@testarray) {\n        if (exists\
    \ $histo{$letter}) {\n            $histo{$letter}++;\n        } else {\n     \
    \       $histo{$letter} = 1;\n        }\n    }\n    my @mostoccurrences = ();\n\
    \    my $most = 0;\n    foreach my $key (keys %histo) {\n        if ($histo{$key}\
    \ > $most) {\n            @mostoccurrences = ();\n            push @mostoccurrences,\
    \ $key;\n            $most = $histo{$key};\n        } elsif ($histo{$key} == $most)\
    \ {\n            push @mostoccurrences, $key;\n        }\n    }\n    foreach my\
    \ $letter (@mostoccurrences) {\n        $histo{$letter} = $most;\n    }\n    return\
    \ %histo;\n}", "    my @words = split(/ /, $test);\n    my %hash;\n    for my\
    \ $word (@words) {\n        if (exists $hash{$word}) {\n            $hash{$word}++;\n\
    \        } else {\n            $hash{$word} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "    my %count;\n    my %max_count;\n    my @words = split(/ /,\
    \ $test);\n    foreach my $word (@words) {\n        $count{$word}++;\n       \
    \ if (!defined($max_count{$word}) || $count{$word} > $max_count{$word}) {\n  \
    \          $max_count{$word} = $count{$word};\n        }\n    }\n    my %result;\n\
    \    foreach my $word (keys %count) {\n        if ($count{$word} == $max_count{$word})\
    \ {\n            $result{$word} = $count{$word};\n        }\n    }\n    return\
    \ %result;\n}", "    my(%histogram, @temp);\n    my($key, $value);\n    if($test\
    \ eq \"\") {\n        return %histogram;\n    } else {\n        my(@temp) = split(/\
    \ /, $test);\n        my(%histogram) = map {$_, 0} @temp;\n        foreach my\
    \ $word (@temp) {\n            $histogram{$word}++;\n        }\n        return\
    \ %histogram;\n    }\n}", "    my @letters = split(' ', $test);\n    my %count\
    \ = ();\n    my $max = 0;\n    my @max_letters = ();\n    for my $letter (@letters)\
    \ {\n        $count{$letter}++;\n        if ($count{$letter} > $max) {\n     \
    \       $max = $count{$letter};\n            @max_letters = ();\n            push\
    \ @max_letters, $letter;\n        } elsif ($count{$letter} == $max) {\n      \
    \      push @max_letters, $letter;\n        }\n    }\n    my %result = ();\n \
    \   for my $letter (@max_letters) {\n        $result{$letter} = $max;\n    }\n\
    \    return %result;\n}", "    my %res = ();\n    my @tmp = split(/\\s+/, $test);\n\
    \    my $max = 0;\n    foreach my $i (@tmp) {\n        $res{$i}++;\n        if\
    \ ($res{$i} > $max) {\n            $max = $res{$i};\n        }\n    }\n    my\
    \ %ans = ();\n    foreach my $i (keys %res) {\n        if ($res{$i} == $max) {\n\
    \            $ans{$i} = $max;\n        }\n    }\n    return %ans;\n}", "    my\
    \ %histogram = ();\n    my @array = split(/\\s+/, $test);\n    foreach my $word\
    \ (@array) {\n        if (exists $histogram{$word}) {\n            $histogram{$word}\
    \ += 1;\n        } else {\n            $histogram{$word} = 1;\n        }\n   \
    \ }\n    my $max = 0;\n    my %result = ();\n    foreach my $key (keys %histogram)\
    \ {\n        if ($histogram{$key} > $max) {\n            $max = $histogram{$key};\n\
    \            %result = ($key => $max);\n        } elsif ($histogram{$key} == $max)\
    \ {\n            $result{$key} = $max;\n        }\n    }\n    return %result;\n\
    }", "    my @split = split(/ /, $test);\n    my %count;\n    my %repeated;\n \
    \   foreach my $i (@split) {\n        $count{$i}++;\n    }\n    foreach my $key\
    \ (keys %count) {\n        if ($count{$key} > 1) {\n            $repeated{$key}\
    \ = $count{$key};\n        }\n    }\n    return %repeated;\n}", "    my %counts;\n\
    \    my %result;\n    my @final;\n    foreach my $letter (split / /, $test) {\n\
    \        $counts{$letter}++;\n    }\n    my $letter_max = (sort {$counts{$b} <=>\
    \ $counts{$a}} keys %counts)[0];\n    my $max = $counts{$letter_max};\n    foreach\
    \ my $letter (sort keys %counts) {\n        if ($counts{$letter} == $max) {\n\
    \            $result{$letter} = $max;\n        }\n    }\n    return \\%result;\n\
    }\n1;", "    my @array = split(' ', $test);\n    my %hash = ();\n    my $count\
    \ = 1;\n    foreach my $item (@array) {\n        if (exists $hash{$item}) {\n\
    \            $hash{$item} += 1;\n        } else {\n            $hash{$item} =\
    \ $count;\n        }\n    }\n    return %hash;\n}", "    my %count = ();\n   \
    \ foreach my $c (split(\" \", $test)) {\n        $count{$c}++;\n    }\n    my\
    \ $highest = 0;\n    foreach my $key (keys %count) {\n        if ($count{$key}\
    \ > $highest) {\n            $highest = $count{$key};\n        }\n    }\n    my\
    \ %result = ();\n    foreach my $key (keys %count) {\n        if ($count{$key}\
    \ == $highest) {\n            $result{$key} = $highest;\n        }\n    }\n  \
    \  return %result;\n}", "    my %letters;\n    foreach my $letter (split(' ',\
    \ $test)) {\n        $letters{$letter}++;\n    }\n    my $max_count = 0;\n   \
    \ my %results;\n    foreach my $letter (keys %letters) {\n        my $count =\
    \ $letters{$letter};\n        if ($count > $max_count) {\n            %results\
    \ = ($letter => $count);\n            $max_count = $count;\n        } elsif ($count\
    \ == $max_count) {\n            $results{$letter} = $count;\n        }\n    }\n\
    \    return %results;\n}", "    my %hash;\n    my @keys;\n    my @arr = split(/\
    \ /, $test);\n    for (my $i = 0; $i < @arr; $i++) {\n        $hash{$arr[$i]}++;\n\
    \    }\n    my $max = 0;\n    for my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n        }\n    }\n    for my $key\
    \ (keys %hash) {\n        if ($hash{$key} == $max) {\n            push(@keys,\
    \ $key);\n        }\n    }\n    my %hash2;\n    for (my $i = 0; $i < @keys; $i++)\
    \ {\n        $hash2{$keys[$i]} = $max;\n    }\n    return %hash2;\n}", "    my\
    \ %result;\n    my @array = split(/ /, $test);\n    foreach my $letter (@array)\
    \ {\n        $result{$letter}++;\n    }\n    return %result;\n}", "    my @a=split('\
    \ ',$test);\n    my %hash;\n    for my $i (@a){\n        $hash{$i}++;\n    }\n\
    \    my @max;\n    my $max=0;\n    for my $j (keys %hash){\n        if($hash{$j}>$max){\n\
    \            $max=$hash{$j};\n            @max=($j);\n        }\n        elsif($hash{$j}==$max){\n\
    \            push @max,$j;\n        }\n    }\n    my %res;\n    for my $k (@max){\n\
    \        $res{$k}=$max;\n    }\n    return %res;\n}", "    my $freq = {};\n  \
    \  my $max = 0;\n    my @max_keys = ();\n    foreach my $c (split(\" \", $test))\
    \ {\n        $freq->{$c}++;\n        if ($freq->{$c} > $max) {\n            $max\
    \ = $freq->{$c};\n            @max_keys = ($c);\n        } elsif ($freq->{$c}\
    \ == $max) {\n            push @max_keys, $c;\n        }\n    }\n    foreach my\
    \ $c (keys %$freq) {\n        if ($freq->{$c} != $max) {\n            delete $freq->{$c};\n\
    \        }\n    }\n    return $freq;\n}\nprint STDERR \"histogram:\\n\";\nmy $histogram\
    \ = histogram(\"a b c a b\");\nforeach my $k (keys %$histogram) {\n    print STDERR\
    \ \"  $k => $histogram->{$k}\\n\";\n}\nprint STDERR \"\\n\";\nprint STDERR \"\
    histogram:\\n\";\n$histogram = histogram(\"a b b a\");\nforeach my $k (keys %$histogram)\
    \ {\n    print STDERR \"  $k => $histogram->{$k}\\n\";\n}\nprint STDERR \"\\n\"\
    ;\nprint STDERR \"histogram:\\n\";\n$histogram = histogram(\"a b c\");\nforeach\
    \ my $k (keys %$histogram) {\n    print STDERR \"  $k => $histogram->{$k}\\n\"\
    ;\n}\nprint STDERR \"\\n\";\nprint STDERR \"histogram:\\n\";\n$histogram = histogram(\"\
    b b b b a\");\nforeach my $k (keys %$histogram) {\n    print STDERR \"  $k =>\
    \ $histogram->{$k}\\n\";\n}\nprint STDERR \"\\n\";", "    my @letters = split\
    \ / /, $test;\n    my %letter_count;\n    my %max_letters;\n    my $max_count\
    \ = 1;\n    foreach my $letter (@letters) {\n        $letter_count{$letter}++;\n\
    \        if ($letter_count{$letter} > $max_count) {\n            $max_count =\
    \ $letter_count{$letter};\n            %max_letters = ($letter => $max_count);\n\
    \        } elsif ($letter_count{$letter} == $max_count) {\n            $max_letters{$letter}\
    \ = $max_count;\n        }\n    }\n    return %max_letters;\n}", "    my(%result);\n\
    \    my(@values) = split(\" \", $test);\n    foreach my $value (@values) {\n \
    \       if (exists($result{$value})) {\n            $result{$value} += 1;\n  \
    \      } else {\n            $result{$value} = 1;\n        }\n    }\n    return\
    \ \\%result;\n}", "    my @test = split(/ /, $test);\n    my $value = 0;\n   \
    \ my %histogram;\n    my @most_repetition = ();\n    if ($test eq \"\") {\n  \
    \      return %histogram;\n    }\n    else {\n        foreach my $letter (@test)\
    \ {\n            $histogram{$letter}++;\n        }\n        foreach my $key (keys\
    \ %histogram) {\n            if ($histogram{$key} > $value) {\n              \
    \  $value = $histogram{$key};\n                @most_repetition = $key;\n    \
    \        }\n            elsif ($histogram{$key} == $value) {\n               \
    \ push(@most_repetition, $key);\n            }\n        }\n        return @most_repetition;\n\
    \    }\n}", "    my %hist;\n    foreach my $letter (split(/\\s+/, $test)) {\n\
    \        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $letter (keys\
    \ %hist) {\n        $max = $hist{$letter} if $hist{$letter} > $max;\n    }\n \
    \   my %max_hash;\n    foreach my $letter (keys %hist) {\n        $max_hash{$letter}\
    \ = $hist{$letter} if $hist{$letter} == $max;\n    }\n    return %max_hash;\n}",
  "    my %histogram;\n    # Split the string on whitespace and create a hash table.\n\
    \    my @array = split(/\\s+/, $test);\n    foreach my $key (@array) {\n     \
    \   $histogram{$key}++;\n    }\n    # Get the max value.\n    my $max = (sort\
    \ {$histogram{$b} <=> $histogram{$a}} keys %histogram)[0];\n    my %result;\n\
    \    # If the max value doesn't equal 1, then there's a key that occurs more than\n\
    \    # once.\n    if ($histogram{$max} != 1) {\n        # Get the corresponding\
    \ keys.\n        my @keys = grep { $histogram{$_} == $histogram{$max} } keys %histogram;\n\
    \        # Create a hash table to return.\n        foreach my $k (@keys) {\n \
    \           $result{$k} = $histogram{$k};\n        }\n    }\n    # Otherwise,\
    \ just return the hash table.\n    else {\n        %result = %histogram;\n   \
    \ }\n    return %result;\n}", "    my $hash = {};\n    my $word = \"\";\n    my\
    \ $max = -1;\n    my $key = \"\";\n    my $value = \"\";\n    my $pos = 0;\n \
    \   while ($test ne \"\") {\n        $pos = index($test, \" \");\n        if ($pos\
    \ != -1) {\n            $word = substr($test, 0, $pos);\n            $test = substr($test,\
    \ $pos + 1);\n        } else {\n            $word = $test;\n            $test\
    \ = \"\";\n        }\n        if (exists $hash->{$word}) {\n            $hash->{$word}++;\n\
    \        } else {\n            $hash->{$word} = 1;\n        }\n        if ($hash->{$word}\
    \ > $max) {\n            $max = $hash->{$word};\n        }\n    }\n    $hash =\
    \ {};\n    foreach $key (keys %$hash) {\n        $value = $hash->{$key};\n   \
    \     if ($value == $max) {\n            $hash->{$key} = $value;\n        }\n\
    \    }\n    return $hash;\n}", "    my(%result);\n    my(@words) = split(/ /,\
    \ $test);\n    my($word);\n    foreach $word (@words) {\n        if (!exists($result{$word}))\
    \ {\n            $result{$word} = 1;\n        } else {\n            $result{$word}\
    \ += 1;\n        }\n    }\n    return %result;\n}", "    my(%letters);\n    my(@char)\
    \ = split(' ', $test);\n    foreach $i (@char) {\n        if (!exists($letters{$i}))\
    \ {\n            $letters{$i} = 1;\n        } else {\n            $letters{$i}++;\n\
    \        }\n    }\n    return %letters;\n}", "    my %letters;\n    my @histogram\
    \ = map {$letters{$_}++ } split / /, $test;\n    my %count;\n    for my $k (keys\
    \ %letters) {\n        $count{$letters{$k}} .= \" $k\";\n    }\n    my @counts\
    \ = sort {$b <=> $a} keys %count;\n    my %result;\n    for my $c (@counts) {\n\
    \        for my $k (split / /, $count{$c}) {\n            $result{$k} = $c;\n\
    \        }\n    }\n    return %result;\n}", "    my @args = split / /, $test;\n\
    \    my %hist;\n    for my $arg (@args) {\n        $hist{$arg}++;\n    }\n   \
    \ return %hist;\n}", "    my %testhash;\n    foreach my $str (split(' ', $test))\
    \ {\n        if ($testhash{$str}) {\n            $testhash{$str} += 1;\n     \
    \   } else {\n            $testhash{$str} = 1;\n        }\n    }\n    return %testhash;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
