name: HumanEval_111_histogram
language: pl
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a hash\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
  # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b\
  \ c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\"\
  \ => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
  \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" =>\
  \ 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"\
  ),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\"\
  \ => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my %hash = ();\n    my @test = split(' ', $test);\n    foreach\
    \ my $value (@test) {\n        if (exists $hash{$value}) {\n            $hash{$value}++;\n\
    \        } else {\n            $hash{$value} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "    my(%hash) = ();\n    my($h);\n    my($max) = 0;\n    my(@letters)\
    \ = split(' ', $test);\n    foreach my $letter (@letters) {\n        $hash{$letter}\
    \ += 1;\n        if ($hash{$letter} > $max) {\n            $max = $hash{$letter};\n\
    \        }\n    }\n    for $h (keys %hash) {\n        if ($hash{$h} != $max) {\n\
    \            delete $hash{$h};\n        }\n    }\n    return \\%hash;\n}", " \
    \   # Your code here.\n    my %hash;\n    foreach (split(\" \", $test)) {\n  \
    \      $hash{$_}++;\n    }\n    return %hash;\n}", "    my @letters = split(/\\\
    s+/, $test);\n    my %hash;\n    my $max_count = 0;\n    foreach my $letter (@letters)\
    \ {\n        $hash{$letter} += 1;\n        if ($hash{$letter} > $max_count) {\n\
    \            $max_count = $hash{$letter};\n        }\n    }\n    # Now determine\
    \ if there are multiple max values\n    my @max_letters;\n    while (my ($key,\
    \ $value) = each %hash) {\n        if ($value == $max_count) {\n            push\
    \ @max_letters, $key;\n        }\n    }\n    my %result;\n    for my $key (@max_letters)\
    \ {\n        $result{$key} = $max_count;\n    }\n    return %result;\n}", "  \
    \  my $result = {};\n    my $max    = 0;\n    foreach (split(/\\s+/, $test)) {\n\
    \        $result->{$_} = exists $result->{$_} ? $result->{$_} + 1 : 1;\n     \
    \   $max = $result->{$_} if $result->{$_} > $max;\n    }\n    my @to_delete =\
    \ grep {$result->{$_} != $max} keys %$result;\n    delete @{$result}{@to_delete};\n\
    \    return $result;\n}", "    my @letters = split(\" \", $test);\n    my %letter_count;\n\
    \    my %letter_max;\n    my @letter_max_keys;\n    my $max_value = 0;\n    for\
    \ my $letter (@letters) {\n        $letter_count{$letter} += 1;\n    }\n    for\
    \ my $key (keys %letter_count) {\n        if ($letter_count{$key} > $max_value)\
    \ {\n            $max_value = $letter_count{$key};\n            @letter_max_keys\
    \ = ($key);\n        } elsif ($letter_count{$key} == $max_value) {\n         \
    \   push(@letter_max_keys, $key);\n        }\n    }\n    for my $key (@letter_max_keys)\
    \ {\n        $letter_max{$key} = $max_value;\n    }\n    return %letter_max;\n\
    }", "    my @letters = split(/ /, $test);\n    my %result;\n    for my $i (0 ..\
    \ $#letters) {\n        $result{$letters[$i]} += 1;\n    }\n    my @highest =\
    \ sort { $result{$b} <=> $result{$a} } keys %result;\n    my $high = $result{$highest[0]};\n\
    \    my @k = grep { $result{$_} == $high } keys %result;\n    my %h;\n    @h{@k}\
    \ = @result{@k};\n    return %h;\n}", "    my $times;\n    my %histogram;\n  \
    \  if ($test =~ /^\\s*$/) {\n        return %histogram;\n    }\n    while ($test\
    \ =~ /(\\w+)/g) {\n        $times = () = $test =~ /$1/g;\n        $histogram{$1}\
    \ = $times;\n    }\n    return %histogram;\n}", "    my(%final);\n    my(@test_array)\
    \ = split(/ /, $test);\n    foreach my $var (@test_array) {\n        if (exists\
    \ $final{$var}) {\n            $final{$var} += 1;\n        } else {\n        \
    \    $final{$var} = 1;\n        }\n    }\n    return %final;\n}", "    my %h =\
    \ ();\n    my @temp = split(/\\s+/, $test);\n    foreach(@temp) {\n        if(exists\
    \ $h{$_}) {\n            $h{$_}++;\n        } else {\n            $h{$_} = 1;\n\
    \        }\n    }\n    return %h;\n}", "    my %ret;\n    my @words = split /\
    \ /, $test;\n    for my $word (@words) {\n        if (exists $ret{$word}) {\n\
    \            $ret{$word}++;\n        } else {\n            $ret{$word} = 1;\n\
    \        }\n    }\n    my $max = 0;\n    for my $key (keys %ret) {\n        if\
    \ ($ret{$key} > $max) {\n            $max = $ret{$key};\n        }\n    }\n  \
    \  my @max;\n    for my $key (keys %ret) {\n        if ($ret{$key} == $max) {\n\
    \            push @max, $key;\n        }\n    }\n    my %histo;\n    for my $key\
    \ (@max) {\n        $histo{$key} = $max;\n    }\n    return %histo;\n}", "   \
    \ my $result = {};\n    my @letters = split / /, $test;\n    for my $letter (@letters)\
    \ {\n        if (exists $result->{$letter}) {\n            $result->{$letter}\
    \ += 1;\n        } else {\n            $result->{$letter} = 1;\n        }\n  \
    \  }\n    my $occurence = 0;\n    my $result2 = {};\n    for my $key (keys %$result)\
    \ {\n        if ($result->{$key} >= $occurence) {\n            $occurence = $result->{$key};\n\
    \            $result2->{$key} = $occurence;\n        }\n    }\n    return $result2;\n\
    }", "    my @test = split(\" \", $test);\n    my %histogram;\n    my $maxKey =\
    \ 0;\n    my $maxVal = 0;\n    foreach my $t (@test) {\n        if (exists $histogram{$t})\
    \ {\n            $histogram{$t} += 1;\n        } else {\n            $histogram{$t}\
    \ = 1;\n        }\n        if ($histogram{$t} > $maxVal) {\n            $maxVal\
    \ = $histogram{$t};\n            $maxKey = $t;\n        }\n    }\n    foreach\
    \ my $key (keys %histogram) {\n        if ($histogram{$key} < $maxVal) {\n   \
    \         delete $histogram{$key};\n        }\n    }\n    return %histogram;\n\
    }", "    return {} if not $test;\n    my @a = split(/ /, $test);\n    my %h;\n\
    \    map {$h{$_}++} @a;\n    my $max = max(values %h);\n    my %result;\n    for\
    \ (keys %h) {\n        $result{$_} = $h{$_} if $h{$_} == $max;\n    }\n    return\
    \ \\%result;\n}", "    my %hash = ();\n    my $count = 0;\n    my @array = split(\"\
    \ \", $test);\n    foreach my $i (@array) {\n        if (exists $hash{$i}) {\n\
    \            $hash{$i} += 1;\n        } else {\n            $hash{$i} = 1;\n \
    \       }\n    }\n    return %hash;\n}", "    # Write your code here.\n    my\
    \ @array = split(' ', $test);\n    my $hash = {};\n    foreach my $letter (@array)\
    \ {\n        if (defined $hash->{$letter}) {\n            $hash->{$letter} +=\
    \ 1;\n        } else {\n            $hash->{$letter} = 1;\n        }\n    }\n\
    \    return $hash;\n}", "    my @AoA = map { [ split ] } split /\\n/, $test;\n\
    \    return @AoA;\n}", "    my @chars = split(/ /, $test);\n    my %hist;\n  \
    \  foreach my $char (@chars) {\n        if (exists $hist{$char}) {\n         \
    \   $hist{$char}++;\n        } else {\n            $hist{$char} = 1;\n       \
    \ }\n    }\n    return %hist;\n}", "    my $test_copy = $test;\n    $test_copy\
    \ =~ s/\\s+//g;", "    my $alpha = 0;\n    my $numb = 0;\n    my $other = 0;\n\
    \    my $answer = {};\n    my @array = split(\" \", $test);\n    my @answer =\
    \ [];\n    for my $i (0..@array-1) {\n        if ($array[$i] =~ m/[A-Za-z]/) {\n\
    \            $alpha++;\n        } elsif ($array[$i] =~ m/[0-9]/) {\n         \
    \   $numb++;\n        } else {\n            $other++;\n        }\n    }\n    $answer->{\"\
    alpha\"} = $alpha;\n    $answer->{\"numb\"} = $numb;\n    $answer->{\"other\"\
    } = $other;\n    return $answer;\n}", "    my(%counts);\n    my(@words) = split(/\\\
    s+/, $test);\n    # insert code here\n    for my $c (@words) {\n        $counts{$c}++;\n\
    \    }\n    return \\%counts;\n}", "    my(%hash, @arr, @arr2, $key, $value);\n\
    \    @arr = split(' ', $test);\n    foreach $key (@arr) {\n        $hash{$key}++;\n\
    \    }\n    # Find the key with the largest value.\n    $value = 0;\n    foreach\
    \ $key (keys %hash) {\n        if ($hash{$key} > $value) {\n            $value\
    \ = $hash{$key};\n        }\n    }\n    # Delete the key-value pairs with a value\
    \ less than the largest value.\n    foreach $key (keys %hash) {\n        if ($hash{$key}\
    \ < $value) {\n            delete $hash{$key};\n        }\n    }\n    return %hash;\n\
    }", "    my %ret = ();\n    my %counts = ();\n    my $max = 0;\n    foreach my\
    \ $letter (split(/\\s+/, $test)) {\n        $counts{$letter}++;\n        if ($counts{$letter}\
    \ > $max) {\n            $max = $counts{$letter};\n        }\n    }\n    foreach\
    \ my $letter (keys %counts) {\n        if ($counts{$letter} == $max) {\n     \
    \       $ret{$letter} = $max;\n        }\n    }\n    return %ret;\n}", "    my\
    \ @test = split(\" \", $test);\n    my %hash = ();\n    foreach $var (@test) {\n\
    \        if(exists $hash{$var}) {\n            $hash{$var} += 1;\n        } else\
    \ {\n            $hash{$var} = 1;\n        }\n    }\n    my @keys = keys %hash;\n\
    \    my $max = 0;\n    my @max;\n    my $i = 0;\n    my $j = 0;\n    my $var2;\n\
    \    while($i <= $#keys) {\n        $var2 = $keys[$i];\n        if($hash{$var2}\
    \ > $max) {\n            $max = $hash{$var2};\n            $j = 0;\n         \
    \   @max = ();\n            push(@max, $var2);\n        } elsif($hash{$var2} ==\
    \ $max) {\n            push(@max, $var2);\n        }\n        $i++;\n    }\n \
    \   my %maxHash = ();\n    foreach $var (@max) {\n        $maxHash{$var} = $max;\n\
    \    }\n    %maxHash;\n}", "    my(%ret) = ();\n    my(@words) = split(/\\s+/,\
    \ $test);\n    my(%cnt) = ();\n    foreach $word (@words) {\n        if (exists($cnt{$word}))\
    \ {\n            $cnt{$word} += 1;\n        } else {\n            $cnt{$word}\
    \ = 1;\n        }\n    }\n    my($max) = 0;\n    foreach $word (keys(%cnt)) {\n\
    \        if ($cnt{$word} > $max) {\n            $max = $cnt{$word};\n        }\n\
    \    }\n    foreach $word (keys(%cnt)) {\n        if ($cnt{$word} == $max) {\n\
    \            $ret{$word} = $max;\n        }\n    }\n    return %ret;\n}", "  \
    \  my(%hash, @letter);\n    my @letter = split ' ', $test;\n    foreach (@letter)\
    \ {\n        if (exists $hash{$_}) {\n            $hash{$_} += 1;\n        } else\
    \ {\n            $hash{$_} = 1;\n        }\n    }\n    return \\%hash;\n}", " \
    \   my %characters;\n    my @chars = split(' ', $test);\n    foreach my $char\
    \ (@chars) {\n        $characters{$char} += 1;\n    }\n    my $max = 0;\n    my\
    \ @solution;\n    foreach my $key (keys %characters) {\n        if ($characters{$key}\
    \ > $max) {\n            $max = $characters{$key};\n            @solution = ($key);\n\
    \        } elsif ($characters{$key} == $max) {\n            push(@solution, $key);\n\
    \        }\n    }\n    my %ret;\n    foreach my $char (@solution) {\n        $ret{$char}\
    \ = $max;\n    }\n    return %ret;\n}", "    my @test_array = split(' ', $test);\n\
    \    my %result;\n    for my $t (@test_array) {\n        $result{$t}++;\n    }\n\
    \    my $max = (sort {$result{$b} <=> $result{$a}} keys %result)[0];\n    %result\
    \ = map { $_ => $result{$_} } grep { $result{$_} == $result{$max} } keys %result;\n\
    \    return %result;\n}", "    my(%ret);\n    my(@test_array) = split(/\\s+/,\
    \ $test);\n    foreach my $x (@test_array) {\n        if(exists($ret{$x})) {\n\
    \            $ret{$x}++;\n        } else {\n            $ret{$x} = 1;\n      \
    \  }\n    }\n    my($largest) = 0;\n    foreach my $x (keys %ret) {\n        if($ret{$x}\
    \ > $largest) {\n            $largest = $ret{$x};\n        }\n    }\n    my(%ret2);\n\
    \    foreach my $x (keys %ret) {\n        if($ret{$x} == $largest) {\n       \
    \     $ret2{$x} = $ret{$x};\n        }\n    }\n    return %ret2;\n}", "    my(%dict,\
    \ $max) = ();\n    my(@letters) = split(/ /, $test);\n    $max = 0;\n    foreach\
    \ my $letter (@letters) {\n        $dict{$letter}++;\n        if ($dict{$letter}\
    \ > $max) {\n            $max = $dict{$letter};\n        }\n    }\n    my %counts\
    \ = ();\n    foreach my $letter (keys %dict) {\n        if ($dict{$letter} ==\
    \ $max) {\n            $counts{$letter} = $max;\n        }\n    }\n    return\
    \ %counts;\n}", "    my $sum = 0;\n    my $sum_letter = \"\";\n    my $hash;\n\
    \    my $return_hash;\n    my $letter;\n    my @arr;\n    my @arr_temp;\n    my\
    \ $temp_hash;\n    #Your code here\n    if ($test eq \"\"){\n        return $hash;\n\
    \    }\n    @arr = split ' ', $test;\n    for my $letter (@arr){\n        for\
    \ my $i (@arr){\n            if ($letter eq $i){\n                $sum++;\n  \
    \          }\n        }\n        $hash{$letter} = $sum;\n        $sum = 0;\n \
    \   }\n    @arr_temp = sort values %hash;\n    for my $j (@arr_temp){\n      \
    \  if ($j >= $sum){\n            $sum = $j;\n        }\n    }\n    for my $k (keys\
    \ %hash){\n        if ($hash{$k} == $sum){\n            $temp_hash{$k} = $sum;\n\
    \        }\n    }\n    return %temp_hash;\n}", "    my @test = split(/ /, $test);\n\
    \    my %hash = ();\n    for my $i (@test) {\n\t$hash{$i}++;\n    }\n    my @tmp\
    \ = sort {$hash{$b} <=> $hash{$a}} keys %hash;\n    my %hist = ();\n    for my\
    \ $i (@tmp) {\n\tif ($hash{$i} > $hash{$tmp[0]}) {last;}\n\t$hist{$i} = $hash{$i};\n\
    \    }\n    return %hist;\n}", "    my(%hash);\n    my(@tmp) = split(' ', $test);\n\
    \    foreach my $c (@tmp) {\n        $hash{$c}++;\n    }\n    my($max) = 0;\n\
    \    my(%max);\n    foreach my $key (keys %hash) {\n        if ($hash{$key} >\
    \ $max) {\n            $max = $hash{$key};\n            %max = ();\n         \
    \   $max{$key} = $hash{$key};\n        } elsif ($hash{$key} == $max) {\n     \
    \       $max{$key} = $hash{$key};\n        }\n    }\n    return %max;\n}", " \
    \   my $count = {};\n    foreach my $char (split(\" \", $test)) {\n        if(defined($count->{$char}))\
    \ {\n            $count->{$char}++;\n        } else {\n            $count->{$char}\
    \ = 1;\n        }\n    }\n    return $count;\n}", "    my @arr = split / /, $test;\n\
    \    my %h;\n    foreach my $word (@arr) {\n        $h{$word}++;\n    }\n    my\
    \ $max = 0;\n    my %result;\n    foreach my $word (keys %h) {\n        if ($h{$word}\
    \ > $max) {\n            $max = $h{$word};\n            %result = ($word => $h{$word});\n\
    \        } elsif ($h{$word} == $max) {\n            $result{$word} = $h{$word};\n\
    \        }\n    }\n    return %result;\n}", "    my $result = {};\n    my $max\
    \ = 0;\n    my $maxCount = 0;\n    foreach my $char (split / /, $test) {\n   \
    \     if (exists $result->{$char}) {\n            $result->{$char}++;\n      \
    \  } else {\n            $result->{$char} = 1;\n        }\n        if ($result->{$char}\
    \ > $maxCount) {\n            $maxCount = $result->{$char};\n            $max\
    \ = $char;\n        }\n    }\n    #print \"$max $maxCount\\n\";\n    my $rresult\
    \ = {};\n    foreach my $char (keys %$result) {\n        if ($result->{$char}\
    \ == $maxCount) {\n            $rresult->{$char} = $maxCount;\n        }\n   \
    \ }\n    return $rresult;\n}", "    my @letters = split(\" \", $test);\n    my\
    \ %hash = ();\n    for my $i (@letters) {\n        $hash{$i} = 0;\n    }\n   \
    \ for my $i (@letters) {\n        $hash{$i} += 1;\n    }\n    my @list = sort\
    \ values %hash;\n    my %newhash = ();\n    for my $i (keys %hash) {\n       \
    \ if ($hash{$i} == $list[-1]) {\n            $newhash{$i} = $hash{$i};\n     \
    \   }\n    }\n    return %newhash;\n}", "    my %hash;\n    $test =~ s/[\\n\\\
    r]//g;\n    if ($test eq \"\") {\n        return %hash;\n    } else {\n      \
    \  my @test = split(/ /, $test);\n        for my $value (@test) {\n          \
    \  if (exists $hash{$value}) {\n                $hash{$value}++;\n           \
    \ } else {\n                $hash{$value} = 1;\n            }\n        }\n   \
    \     return %hash;\n    }\n}", "    my %histo;\n    foreach my $wrd (split /\\\
    s+/, $test) {\n        $histo{$wrd}++;\n    }\n    return %histo;\n}", "    my\
    \ $results = {};\n    foreach my $char (split(/\\s+/, $test)) {\n        if (!\
    \ exists $results->{$char}) {\n            $results->{$char} = 1;\n        } else\
    \ {\n            $results->{$char}++;\n        }\n    }\n    my @most = sort {$results->{$b}\
    \ <=> $results->{$a}} keys %$results;\n    my $most_count = $results->{$most[0]};\n\
    \    my @most_keys = grep {$results->{$_} == $most_count} keys %$results;\n  \
    \  my $histogram = {};\n    foreach my $key (@most_keys) {\n        $histogram->{$key}\
    \ = $results->{$key};\n    }\n    return $histogram;\n}", "    my %counts;\n \
    \   my %letters;\n    my @letters = split(\" \", $test);\n    for my $letter (@letters)\
    \ {\n        if(exists $counts{$letter}) {\n            $counts{$letter}++;\n\
    \        } else {\n            $counts{$letter} = 1;\n        }\n    }\n    my\
    \ $max = 0;\n    for my $count (keys %counts) {\n        if($counts{$count} >\
    \ $max) {\n            $max = $counts{$count};\n        }\n    }\n    for my $count\
    \ (keys %counts) {\n        if($counts{$count} == $max) {\n            $letters{$count}\
    \ = $max;\n        }\n    }\n    return %letters;\n}", "    my @letters = split(/\
    \ /, $test);\n    my %output;\n    my %seen;\n    my $count = 0;\n    my $max;\n\
    \    foreach my $letter (@letters) {\n        if ($seen{$letter}) {\n        \
    \    $output{$letter} += 1;\n        } else {\n            $output{$letter} =\
    \ 1;\n            $seen{$letter} = 1;\n        }\n    }\n    foreach my $letter\
    \ (keys %output) {\n        if ($output{$letter} > $count) {\n            $count\
    \ = $output{$letter};\n            $max = $letter;\n        }\n    }\n    foreach\
    \ my $letter (keys %output) {\n        if ($output{$letter} != $count) {\n   \
    \         delete $output{$letter};\n        }\n    }\n    return %output;\n}",
  "    my @letters = split(\" \", $test);\n    my %counts;\n    my $count = 0;\n \
    \   my $letter = \"\";\n    foreach my $l (@letters) {\n        if (exists $counts{$l})\
    \ {\n            $counts{$l} += 1;\n        } else {\n            $counts{$l}\
    \ = 1;\n        }\n        if ($counts{$l} > $count) {\n            $count = $counts{$l};\n\
    \            $letter = $l;\n        }\n    }\n    my %return;\n    foreach my\
    \ $l (keys %counts) {\n        if ($counts{$l} == $count) {\n            $return{$l}\
    \ = $count;\n        }\n    }\n    return %return;\n}", "    my @values = split\
    \ / /, $test;\n    my %hash = ();\n    my %hash_max = ();\n    my $count = 0;\n\
    \    foreach (@values) {\n        $hash{$_}++;\n    }\n    my @keys = sort { $hash{$b}\
    \ <=> $hash{$a} } keys %hash;\n    my $max = $hash{$keys[0]};\n    $hash_max{$keys[0]}\
    \ = $max;\n    for (my $i = 1; $i < scalar(@keys); $i++) {\n        if ($hash{$keys[$i]}\
    \ == $max) {\n            $hash_max{$keys[$i]} = $max;\n        }\n    }\n   \
    \ return %hash_max;\n}", "    my @test = split(\" \", $test);\n    # initialization\n\
    \    my %histogram = ();\n    foreach my $letter (@test) {\n        $histogram{$letter}\
    \ = 0;\n    }\n    # count\n    foreach my $letter (@test) {\n        $histogram{$letter}\
    \ += 1;\n    }\n    # get maximum\n    my @max_key = keys %histogram;\n    my\
    \ $max_value = 0;\n    foreach my $key (@max_key) {\n        if ($histogram{$key}\
    \ > $max_value) {\n            $max_value = $histogram{$key};\n        }\n   \
    \ }\n    # reduction\n    foreach my $key (@max_key) {\n        if ($histogram{$key}\
    \ < $max_value) {\n            delete $histogram{$key};\n        }\n    }\n  \
    \  return %histogram;\n}", "    my(%counts);\n    my(@max_counts);\n    foreach\
    \ my $i (split(/\\s+/, $test)) {\n        $counts{$i}++;\n    }\n    my($max)\
    \ = 0;\n    foreach my $i (keys %counts) {\n        if ($counts{$i} > $max) {\n\
    \            $max = $counts{$i};\n            @max_counts = ($i);\n        } elsif\
    \ ($counts{$i} == $max) {\n            push(@max_counts, $i);\n        }\n   \
    \ }\n    my(%ret);\n    foreach my $i (@max_counts) {\n        $ret{$i} = $max;\n\
    \    }\n    return %ret;\n}", "    my(%counts, @letters);\n    my @words = split(/\\\
    s+/, $test);\n    for my $word (@words) {\n        my @array = split(//, $word);\n\
    \        for my $letter (@array) {\n            push(@letters, $letter);\n   \
    \     }\n    }\n    for my $letter (@letters) {\n        $counts{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @results;\n    for my $key (keys %counts) {\n\
    \        my $value = $counts{$key};\n        if ($value > $max) {\n          \
    \  $max = $value;\n            @results = ($key);\n        } elsif ($value ==\
    \ $max) {\n            push(@results, $key);\n        }\n    }\n    for my $key\
    \ (@results) {\n        $counts{$key} = $max;\n    }\n    return \\%counts;\n}",
  "    my %alphabet;\n    my @sorted_alphabet;\n    my $sorted_alphabet;\n    my $max\
    \ = 0;\n    my @max = ();\n    foreach my $char (split(\" \", $test)) {\n    \
    \    if (exists $alphabet{$char}) {\n            $alphabet{$char}++;\n       \
    \ } else {\n            $alphabet{$char} = 1;\n        }\n    }\n    if (%alphabet)\
    \ {\n        foreach my $key (sort keys %alphabet) {\n            if ($alphabet{$key}\
    \ > $max) {\n                $max = $alphabet{$key};\n                @max = ($key);\n\
    \            } elsif ($alphabet{$key} == $max) {\n                push @max, $key;\n\
    \            }\n        }\n        @sorted_alphabet = sort @max;\n        $sorted_alphabet\
    \ = join(' ', @sorted_alphabet);\n        return \\%alphabet, $sorted_alphabet;\n\
    \    } else {\n        return \"Please enter a string.\";\n    }\n}", "    my\
    \ @testarr = split(\" \", $test);\n    my %histo;\n    my $letter;\n    my $count;\n\
    \    #iterate through testarr, and add letters and count to the hash\n    for\
    \ ($letter = 0; $letter < scalar(@testarr); $letter += 1) {\n        $histo{$testarr[$letter]}\
    \ = 0;\n    }\n    for ($letter = 0; $letter < scalar(@testarr); $letter += 1)\
    \ {\n        $histo{$testarr[$letter]} += 1;\n    }\n    #find highest count\n\
    \    $count = 0;\n    for ($letter = 0; $letter < scalar(@testarr); $letter +=\
    \ 1) {\n        if ($histo{$testarr[$letter]} > $count) {\n            $count\
    \ = $histo{$testarr[$letter]};\n        }\n    }\n    #write letters with highest\
    \ count to a new hash\n    my %highest;\n    for ($letter = 0; $letter < scalar(@testarr);\
    \ $letter += 1) {\n        if ($histo{$testarr[$letter]} == $count) {\n      \
    \      $highest{$testarr[$letter]} = $count;\n        }\n    }\n    return %highest;\n\
    }", "    my %results;\n    my @array = split(' ', $test);\n    for my $t(@array)\
    \ {\n        $results{$t}++;\n    }\n    my $max = 0;\n    my %answer;\n    foreach\
    \ my $k (keys %results) {\n        if ($results{$k} > $max) {\n            $max\
    \ = $results{$k};\n            %answer = ($k => $max);\n        }\n        elsif\
    \ ($results{$k} == $max) {\n            $answer{$k} = $max;\n        }\n    }\n\
    \    return %answer;\n}", "    my @test_array = split(' ', $test);\n    my %test_hash;\n\
    \    foreach my $test_element (@test_array) {\n        $test_hash{$test_element}++;\n\
    \    }\n    my %highest;\n    my $max = 0;\n    foreach my $test_key (keys %test_hash)\
    \ {\n        if ($test_hash{$test_key} > $max) {\n            $max = $test_hash{$test_key};\n\
    \            $highest{$test_key} = $test_hash{$test_key};\n        }\n       \
    \ elsif ($test_hash{$test_key} == $max) {\n            $highest{$test_key} = $test_hash{$test_key};\n\
    \        }\n    }\n    return %highest;\n}", "    my @letters = split(/ /, $test);\n\
    \    my %result;\n    for my $letter (@letters) {\n        $result{$letter}++;\n\
    \    }\n    my @max_letters = sort { $result{$b} <=> $result{$a} } grep { $result{$_}\
    \ >= $result{$max_letter} } keys %result;\n    my %final_result;\n    for my $letter\
    \ (@max_letters) {\n        $final_result{$letter} = $result{$letter};\n    }\n\
    \    return %final_result;\n}", "    my @words = split(/\\s+/, $test);\n    my\
    \ %count;\n    foreach my $word (@words) {\n        $count{$word}++;\n    }\n\
    \    my $max = 0;\n    foreach my $key (keys %count) {\n        if ($count{$key}\
    \ > $max) {\n            $max = $count{$key};\n        }\n    }\n    my %max_count;\n\
    \    foreach my $key (keys %count) {\n        if ($count{$key} == $max) {\n  \
    \          $max_count{$key} = $max;\n        }\n    }\n    return %max_count;\n\
    }", "    my %hash = map { $_ => 0 } (split ' ', $test);\n    $hash{$_}++ for split\
    \ ' ', $test;\n    my $max = max values %hash;\n    # my @maxs = grep { $hash{$_}\
    \ == $max } keys %hash;\n    my %res = map { $_ => $hash{$_} } grep { $hash{$_}\
    \ == $max } keys %hash;\n    return \\%res;\n}\nprint histogram(\"a b c\"),\"\\\
    n\";\nprint histogram(\"a b b a\"),\"\\n\";\nprint histogram(\"a b c a b\"),\"\
    \\n\";\nprint histogram(\"b b b b a\"),\"\\n\";\nprint histogram(\"\"),\"\\n\"\
    ;", "    my @tokens = split(/ /, $test);\n    my %count = ();\n    my %max = ();\n\
    \    my @keys = ();\n    foreach my $token (@tokens) {\n        $count{$token}++;\n\
    \    }\n    my $maximum = 0;\n    my @chars = ();\n    foreach my $key (keys %count)\
    \ {\n        if ($count{$key} > $maximum) {\n            $maximum = $count{$key};\n\
    \            @chars = ($key);\n        } elsif ($count{$key} == $maximum) {\n\
    \            push(@chars, $key);\n        }\n    }\n    foreach my $char (@chars)\
    \ {\n        $max{$char} = $maximum;\n    }\n    return %max;\n}", "    my %letter_count;\n\
    \    $test =~ s/\\s+//g;\n    my @letters = split('', $test);\n    my @sorted_letters\
    \ = sort @letters;\n    my $cur_letter = '';\n    my $cur_count = 0;\n    my $max_count\
    \ = 0;\n    foreach my $letter (@sorted_letters) {\n        if ($letter eq $cur_letter)\
    \ {\n            $cur_count++;\n        } else {\n            $letter_count{$cur_letter}\
    \ = $cur_count if ($cur_count > $max_count);\n            $cur_letter = $letter;\n\
    \            $cur_count = 1;\n        }\n    }\n    $letter_count{$cur_letter}\
    \ = $cur_count if ($cur_count > $max_count);\n    return %letter_count;\n}", " \
    \   my %count = ();\n    $count{$_}++ for split /\\s+/, $test;\n    my $max =\
    \ (sort {$count{$b} <=> $count{$a}} keys %count)[0];\n    return {$max => $count{$max}};\n\
    }", "    my %results;\n    my @counts;\n    my @letters;\n    my $count = 0;\n\
    \    my $letter = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n \
    \   my @words = split(' ', $test);\n    for($i = 0; $i < scalar(@words); $i++)\
    \ {\n        for($j = 0; $j < length($words[$i]); $j++) {\n            $letter\
    \ = substr($words[$i], $j, 1);\n            if (exists $results{$letter}) {\n\
    \                $results{$letter}++;\n            } else {\n                $results{$letter}\
    \ = 1;\n            }\n        }\n    }\n    my @keys = keys %results;\n    @counts\
    \ = values %results;\n    @letters = keys %results;\n    $count = max(@counts);\n\
    \    %results = ();\n    for($i = 0; $i < scalar(@counts); $i++) {\n        if($counts[$i]\
    \ == $count) {\n            $results{$letters[$i]} = $count;\n        }\n    }\n\
    \    return %results;\n}", "    # Put your code here\n    return $test;\n}", " \
    \   my %res;\n    my @chars = split \" \", $test;\n    foreach my $char (@chars)\
    \ {\n        if (exists $res{$char}) {\n            $res{$char} += 1;\n      \
    \  } else {\n            $res{$char} = 1;\n        }\n    }\n    return %res;\n\
    }", "    # Words comes in as space separated values.\n    my @words = split('\
    \ ', $test);\n    my %freq;\n    foreach my $word (@words) {\n        $freq{$word}++;\n\
    \    }\n    # Sort by the frequency of each word and return the\n    # word with\
    \ the highest frequency.\n    my @sort = sort { $freq{$b} <=> $freq{$a} } keys\
    \ %freq;\n    my $max = 0;\n    my @res;\n    foreach my $val (@sort) {\n    \
    \    if ($freq{$val} >= $max) {\n            $max = $freq{$val};\n           \
    \ push(@res, $val);\n        }\n    }\n    my %ret;\n    foreach my $val (@res)\
    \ {\n        $ret{$val} = $freq{$val};\n    }\n    return %ret;\n}", "    my %hist;\n\
    \    my @letters = split ' ', $test;\n    foreach (@letters) {\n        $hist{$_}++;\n\
    \    }\n    my $max = 0;\n    my %max_hist;\n    foreach (keys %hist) {\n    \
    \    if ($hist{$_} > $max) {\n            $max = $hist{$_};\n            %max_hist\
    \ = ();\n            $max_hist{$_} = $hist{$_};\n        } elsif ($hist{$_} ==\
    \ $max) {\n            $max_hist{$_} = $hist{$_};\n        }\n    }\n    return\
    \ %max_hist;\n}", "    if(!$test) {\n        return {};\n    }\n    my %result;\n\
    \    my @letters = split(/\\s+/, $test);\n    foreach(@letters) {\n        if($result{$_})\
    \ {\n            $result{$_}++;\n        } else {\n            $result{$_} = 1;\n\
    \        }\n    }\n    my $max = (sort {$b <=> $a} values %result)[0];\n    foreach(keys\
    \ %result) {\n        if($result{$_} != $max) {\n            delete $result{$_};\n\
    \        }\n    }\n    return \\%result;\n}", "    my %results;\n    foreach my\
    \ $letter (split //, $test) {\n        $results{$letter}++;\n    }\n    my %max;\n\
    \    my $max;\n    foreach my $letter (keys %results) {\n        if ($results{$letter}\
    \ > $max) {\n            $max = $results{$letter};\n            %max = ($letter\
    \ => $max);\n        } elsif ($results{$letter} == $max) {\n            $max{$letter}\
    \ = $max;\n        }\n    }\n    return %max;\n}", "    my %hash;\n    my @array\
    \ = split(' ', $test);\n    foreach (@array) {\n        $hash{$_}++;\n    }\n\
    \    my $max_value = ( sort { $hash{$b} <=> $hash{$a} } keys %hash )[0];\n   \
    \ my %result;\n    foreach my $key (keys %hash) {\n        if ($hash{$key} ==\
    \ $hash{$max_value}) {\n            $result{$key} = $hash{$key};\n        }\n\
    \    }\n    return %result;\n}", "    return undef;\n}", "    my @letters = split\
    \ / /, $test;\n    my %count;\n    foreach my $letter (@letters) {\n        $count{$letter}++;\n\
    \    }\n    my $max = (sort {$count{$b} <=> $count{$a}} keys %count)[0];\n   \
    \ my %result;\n    foreach my $letter (keys %count) {\n        if ($count{$letter}\
    \ == $count{$max}) {\n            $result{$letter} = $count{$letter};\n      \
    \  }\n    }\n    return %result;\n}", "    my(%hist);\n    foreach my $char (split('\
    \ ', $test)) {\n        $hist{$char}++;\n    }\n    my($max) = 0;\n    foreach\
    \ my $char (keys %hist) {\n        if ($hist{$char} > $max) {\n            $max\
    \ = $hist{$char};\n        }\n    }\n    my(%ret);\n    foreach my $char (keys\
    \ %hist) {\n        if ($hist{$char} == $max) {\n            $ret{$char} = $max;\n\
    \        }\n    }\n    return \\%ret;\n}", "    my @array = split / /, $test;\n\
    \    my %hash;\n    my $max = 0;\n    my $max_letter;\n    my @max_letters;\n\
    \    foreach my $letter (@array) {\n        if (defined $hash{$letter}) {\n  \
    \          $hash{$letter} += 1;\n        } else {\n            $hash{$letter}\
    \ = 1;\n        }\n        if ($hash{$letter} > $max) {\n            $max = $hash{$letter};\n\
    \            $max_letter = $letter;\n            @max_letters = ($letter);\n \
    \       } elsif ($hash{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n\
    \        $result{$letter} = $max;\n    }\n    return %result;\n}", "    my %hash\
    \ = ();\n    my @characters = split(' ', $test);\n    foreach my $character (@characters)\
    \ {\n        $hash{$character}++;\n    }\n    return %hash;\n}", "    my %histo\
    \ = ();\n    my %max = ();\n    my $max = 0;\n    my @words = split(/ /, $test);\n\
    \    foreach my $word (@words) {\n        if (exists $histo{$word}) {\n      \
    \      $histo{$word} += 1;\n        } else {\n            $histo{$word} = 1;\n\
    \        }\n        if ($histo{$word} > $max) {\n            $max = $histo{$word};\n\
    \            %max = ();\n            $max{$word} = $histo{$word};\n        } elsif\
    \ ($histo{$word} == $max) {\n            $max{$word} = $histo{$word};\n      \
    \  }\n    }\n    return %max;\n}", "    my $h = {};\n    foreach my $l (split\
    \ /\\s+/, $test) {\n        $h->{$l}++;\n    }\n    my $max = max(values %$h);\n\
    \    my $max_letters = [grep { $h->{$_} == $max } keys %$h];\n    my $max_hash\
    \ = {};\n    map { $max_hash->{$_} = $max } @$max_letters;\n    return $max_hash;\n\
    }", "    my $counter = 0;\n    my %hash = ();\n    my $max = 0;\n    my @new =\
    \ split(' ', $test);\n    my @final = ();\n    my $flag = 0;\n    my $index =\
    \ 0;\n    my $size = @new;\n    for(my $i = 0; $i < $size; $i++){\n        if(exists\
    \ $hash{$new[$i]}){\n            $hash{$new[$i]}++;\n        }\n        else{\n\
    \            $hash{$new[$i]} = 1;\n        }\n    }\n    foreach $key (keys %hash){\n\
    \        if($hash{$key} > $max){\n            $max = $hash{$key};\n        }\n\
    \    }\n    foreach $key (keys %hash){\n        if($hash{$key} == $max){\n   \
    \         $final[$index] = $key;\n            $index++;\n        }\n    }\n  \
    \  if($index == 1){\n        $hash{$final[0]} = $max;\n        return \\%hash;\n\
    \    }\n    elsif($index > 1){\n        my %newHash = ();\n        for(my $i =\
    \ 0; $i < $index; $i++){\n            $newHash{$final[$i]} = $max;\n        }\n\
    \        return \\%newHash;\n    }\n    else{\n        return \\%hash;\n    }\n\
    }", "    my(%counts, $letter, $max_count, $count, $key);\n    foreach $letter\
    \ (split(/\\s+/, $test)) {\n        $counts{$letter}++;\n    }\n    $max_count\
    \ = 0;\n    foreach $key (keys %counts) {\n        $count = $counts{$key};\n \
    \       if ($count > $max_count) {\n            $max_count = $count;\n       \
    \ }\n    }\n    foreach $key (keys %counts) {\n        $count = $counts{$key};\n\
    \        if ($count != $max_count) {\n            delete $counts{$key};\n    \
    \    }\n    }\n    return \\%counts;\n}", "    my @letters = split(/ /, $test);\n\
    \    my %seen;\n    my %count;\n    my %max_hash;\n    my $max = 0;\n    my $max_letter;\n\
    \    foreach my $letter (@letters) {\n        if (!exists $seen{$letter}) {\n\
    \            $seen{$letter} = 1;\n            $count{$letter} = 1;\n        }\
    \ else {\n            $count{$letter}++;\n        }\n        if ($count{$letter}\
    \ > $max) {\n            $max = $count{$letter};\n            $max_letter = $letter;\n\
    \        }\n    }\n    foreach my $letter (keys %count) {\n        if ($count{$letter}\
    \ == $max) {\n            $max_hash{$letter} = $max;\n        }\n    }\n    return\
    \ %max_hash;\n}", "    my %hash;\n    my $max_count = 1;\n    my $max_val = \"\
    \";\n    for my $key (split(/ /, $test)) {\n        $hash{$key}++;\n        if\
    \ ($hash{$key} > $max_count) {\n            $max_count = $hash{$key};\n      \
    \      $max_val = $key;\n        }\n    }\n    my @top_values;\n    for my $key\
    \ (keys %hash) {\n        if ($hash{$key} == $max_count) {\n            push @top_values,\
    \ $key;\n        }\n    }\n    my %top_hash;\n    for my $val (@top_values) {\n\
    \        $top_hash{$val} = $max_count;\n    }\n    return %top_hash;\n}", "  \
    \  my $result = ();\n    my @array = split(' ', $test);\n    my %hash = ();\n\
    \    my $max = 0;\n    foreach (@array) {\n        $hash{$_}++;\n        if($hash{$_}\
    \ > $max) {\n            $max = $hash{$_};\n        }\n    }\n    foreach (keys\
    \ %hash) {\n        if($hash{$_} == $max) {\n            $result->{$_} = $max;\n\
    \        }\n    }\n    return $result;\n}", "    my %table;\n    for my $i (split\
    \ ' ', $test) {\n        $table{$i} = $table{$i} + 1;\n    }\n    my %result;\n\
    \    my $max = 0;\n    for my $i (keys %table) {\n        if($table{$i} > $max)\
    \ {\n            $max = $table{$i};\n            %result = ($i => $table{$i});\n\
    \        }\n        elsif($table{$i} == $max) {\n            $result{$i} = $table{$i};\n\
    \        }\n    }\n    return %result;\n}", "    my(%hist);\n    my(@letters)\
    \ = split(/\\s+/, $test);\n    my($max) = 0;\n    my(@max_letters);\n    foreach\
    \ $c (@letters) {\n        $hist{$c}++;\n        if ($hist{$c} > $max) {\n   \
    \         $max = $hist{$c};\n            @max_letters = ($c);\n        } elsif\
    \ ($hist{$c} == $max) {\n            push(@max_letters, $c);\n        }\n    }\n\
    \    my(%hist_max) = map { $_ => $max } @max_letters;\n    return {%hist_max};\n\
    }", "    my(%count);\n    my(@test) = split(/\\s+/, $test);\n    foreach $test\
    \ (@test) {\n        $count{$test}++;\n    }\n    my(%out);\n    foreach $count\
    \ (keys %count) {\n        $out{$count} = $count{$count};\n    }\n    return %out;\n\
    }", "    my @string = split(' ', $test);\n    my %result;\n    foreach my $letter\
    \ (@string) {\n        if (defined $result{$letter}) {\n            $result{$letter}\
    \ += 1;\n        } else {\n            $result{$letter} = 1;\n        }\n    }\n\
    \    my @values = values %result;\n    my $max = max @values;\n    foreach my\
    \ $letter (keys %result) {\n        if ($result{$letter} < $max) {\n         \
    \   delete $result{$letter};\n        }\n    }\n    return %result;\n}", "   \
    \ my %hash = ();\n    my @char_array = split(' ', $test);\n    for my $char (@char_array)\
    \ {\n        if (exists $hash{$char}) {\n            $hash{$char}++;\n       \
    \ } else {\n            $hash{$char} = 1;\n        }\n    }\n    my @histogram\
    \ = ();\n    my $max = 0;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n        }\n    }\n    while(my($key,\
    \ $value) = each %hash) {\n        if ($value == $max) {\n            push(@histogram,\
    \ $key);\n        }\n    }\n    return \\@histogram;\n}", "    my %hash = ();\n\
    \    my @keys = ();\n    foreach my $char (split //, $test) {\n        $hash{$char}++;\n\
    \    }\n    foreach my $char (keys %hash) {\n        push @keys, $char if $hash{$char}\
    \ == max(values %hash);\n    }\n    return {map { $_ => $hash{$_} } @keys};\n}",
  "    my @array = split(\" \", $test);\n    my %count = ();\n    foreach my $word\
    \ (@array) {\n        $count{$word}++;\n    }\n    return %count;\n}", "    my\
    \ %hash;\n    my @split = split(/ /, $test);\n    for my $i (0 .. $#split) {\n\
    \        my $curr = $split[$i];\n        if (exists $hash{$curr}) {\n        \
    \    $hash{$curr}++;\n        } else {\n            $hash{$curr} = 1;\n      \
    \  }\n    }\n    return %hash;\n}", "    my %result;\n    my %counts;\n    my\
    \ @letters = split(/ /, $test);\n    foreach my $l (@letters) {\n        $counts{$l}++;\n\
    \    }\n    foreach my $c (sort {$counts{$b} <=> $counts{$a}} keys %counts) {\n\
    \        if(@result == 0 || $counts{$c} == $counts{$result{0}}) {\n          \
    \  push(@result, $c);\n        }\n    }\n    %result = map {$_ => $counts{$_}}\
    \ @result;\n    return %result;\n}", "    my %hist;\n    my %best;\n    my $best\
    \ = 0;\n    foreach my $word (split /\\s+/, $test) {\n        my $cnt = ++$hist{$word};\n\
    \        if ($cnt > $best) {\n            $best = $cnt;\n            %best = ();\n\
    \        }\n        $best{$word} = $cnt if $cnt == $best;\n    }\n    return \\\
    %best;\n}", "    my $count = 0;\n    my %hash = ();\n    my @array = split(' ',\
    \ $test);\n    foreach(@array) {\n        if (!defined($hash{$_})) {\n       \
    \     $hash{$_} = 1;\n        } else {\n            $hash{$_}++;\n        }\n\
    \    }\n    foreach(keys %hash) {\n        if ($hash{$_} > $count) {\n       \
    \     $count = $hash{$_};\n        }\n    }\n    my %res = ();\n    foreach(keys\
    \ %hash) {\n        if ($hash{$_} == $count) {\n            $res{$_} = $count;\n\
    \        }\n    }\n    return %res;\n}", "    my $letter_counts = {};\n    my\
    \ $max_count = 0;\n    # ...\n    my @letters = split(/ /, $test);\n    foreach\
    \ my $letter (@letters) {\n        if (exists $letter_counts->{$letter}) {\n \
    \           $letter_counts->{$letter} += 1;\n        } else {\n            $letter_counts->{$letter}\
    \ = 1;\n        }\n        if ($letter_counts->{$letter} > $max_count) {\n   \
    \         $max_count = $letter_counts->{$letter};\n        }\n    }\n    foreach\
    \ my $letter (keys %$letter_counts) {\n        if ($letter_counts->{$letter} !=\
    \ $max_count) {\n            delete $letter_counts->{$letter};\n        }\n  \
    \  }\n    return $letter_counts;\n}", "    return unless $test;\n    my %hash\
    \ = ();\n    my $max_letter = '';\n    my $max_val = 0;\n    my @all_max_letters\
    \ = ();\n    for my $c (split(/\\s+/, $test)) {\n        $hash{$c}++;\n      \
    \  if ($hash{$c} > $max_val) {\n            $max_val = $hash{$c};\n          \
    \  $max_letter = $c;\n            @all_max_letters = ($c);\n        } elsif ($hash{$c}\
    \ == $max_val) {\n            push @all_max_letters, $c;\n        }\n    }\n \
    \   if (@all_max_letters) {\n        %hash = map { $_ => $max_val } @all_max_letters;\n\
    \    }\n    return \\%hash;\n}", "    my %hash;\n    my @letters = split(\" \"\
    , $test);\n    foreach my $letter (@letters) {\n        $hash{$letter}++;\n  \
    \  }\n    my $max = 0;\n    my @maxes;\n    foreach my $letter (keys %hash) {\n\
    \        if ($hash{$letter} > $max) {\n            $max = $hash{$letter};\n  \
    \          @maxes = $letter;\n        } elsif ($hash{$letter} == $max) {\n   \
    \         push(@maxes, $letter);\n        }\n    }\n    my %maxhash;\n    foreach\
    \ my $letter (@maxes) {\n        $maxhash{$letter} = $max;\n    }\n    return\
    \ %maxhash;\n}", "    my @letters = split(/ /, $test);\n    my %letters_found;\n\
    \    my %most_letters;\n    my $highest_count = 0;\n    foreach my $letter (@letters)\
    \ {\n        if (exists $letters_found{$letter}) {\n            $letters_found{$letter}\
    \ += 1;\n        } else {\n            $letters_found{$letter} = 1;\n        }\n\
    \    }\n    foreach my $letter (keys %letters_found) {\n        if ($letters_found{$letter}\
    \ > $highest_count) {\n            $highest_count = $letters_found{$letter};\n\
    \            %most_letters = ( $letter => $letters_found{$letter} );\n       \
    \ } elsif ($letters_found{$letter} == $highest_count) {\n            $most_letters{$letter}\
    \ = $letters_found{$letter};\n        }\n    }\n    return %most_letters;\n}\n\
    1;", "    my(%hash);\n    my($letter, $max_count, $max_key);\n    my(@test);\n\
    \    my(@result);", "    my %hash;\n    my $s = $_[0];\n    my @tab = split(/\
    \ /, $s);\n    foreach $word (@tab) {\n        if (exists $hash{$word}) {\n  \
    \          $hash{$word}++;\n        } else {\n            $hash{$word} = 1;\n\
    \        }\n    }\n    return \\%hash;\n}", "    my @letters = split(' ', $test);\n\
    \    my %hash = map {$_ => 0} @letters;\n    my %max = ();\n    my @result = ();\n\
    \    foreach my $letter (@letters) {\n        $hash{$letter}++;\n    }\n    my\
    \ $max = 0;\n    my $max_count = 0;\n    foreach my $letter (keys %hash) {\n \
    \       if ($hash{$letter} > $max_count) {\n            $max_count = $hash{$letter};\n\
    \            $max = $letter;\n        }\n    }\n    foreach my $letter (keys %hash)\
    \ {\n        if ($hash{$letter} == $max_count) {\n            push @result, $letter;\n\
    \        }\n    }\n    my %result = map {$_ => $max_count} @result;\n    return\
    \ %result;\n}", "    my @split_str = split(\" \", $test);\n    my %histogram =\
    \ ();\n    my %final_histogram = ();\n    my $max = 0;\n    foreach (@split_str)\
    \ {\n        if (defined $histogram{$_}) {\n            $histogram{$_}++;\n  \
    \      } else {\n            $histogram{$_} = 1;\n        }\n    }\n    foreach\
    \ (keys %histogram) {\n        if ($histogram{$_} > $max) {\n            $max\
    \ = $histogram{$_};\n        }\n    }\n    foreach (keys %histogram) {\n     \
    \   if ($histogram{$_} == $max) {\n            $final_histogram{$_} = $histogram{$_};\n\
    \        }\n    }\n    return %final_histogram;\n}", "    my $count = 1;\n   \
    \ my %hash = ();\n    my @letters = split(\" \", $test);\n    my $max = 0;\n \
    \   foreach $letter (@letters) {\n        $hash{$letter}++;\n        if ($hash{$letter}\
    \ > $max) {\n            $max = $hash{$letter};\n        }\n    }\n    foreach\
    \ $key (keys %hash) {\n        if ($hash{$key} < $max) {\n            delete $hash{$key};\n\
    \        }\n    }\n    return %hash;\n}", "    my @test_parts = split ' ', $test;\n\
    \    my %letter_counts;\n    my $max_count = 0;\n    my @max_letters;\n    foreach\
    \ my $letter (@test_parts) {\n        if (defined $letter_counts{$letter}) {\n\
    \            $letter_counts{$letter} += 1;\n        } else {\n            $letter_counts{$letter}\
    \ = 1;\n        }\n        if ($letter_counts{$letter} > $max_count) {\n     \
    \       $max_count = $letter_counts{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($letter_counts{$letter} == $max_count) {\n            push @max_letters,\
    \ $letter;\n        }\n    }\n    my %histogram;\n    foreach my $letter (@max_letters)\
    \ {\n        $histogram{$letter} = $max_count;\n    }\n    return %histogram;\n\
    }", "    my %occurrences;\n    my @array = split(' ', $test);\n    foreach(@array)\
    \ {\n        if (exists $occurrences{$_}) {\n            $occurrences{$_}++;\n\
    \        } else {\n            $occurrences{$_} = 1;\n        }\n    }\n    return\
    \ %occurrences;\n}", "    my %hash;\n    my @arr = split(' ', $test);\n    my\
    \ $count = 0;\n    my $key = \"\";\n    my $max = 0;\n    foreach my $i (@arr)\
    \ {\n        if (!(exists $hash{$i})) {\n            $hash{$i} = 1;\n        }\
    \ else {\n            $hash{$i} += 1;\n        }\n    }\n    foreach my $i (keys\
    \ %hash) {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n \
    \           $key = $i;\n        }\n    }\n    my %res;\n    if ($key eq \"\")\
    \ {\n        return %res;\n    }\n    foreach my $i (keys %hash) {\n        if\
    \ ($hash{$i} == $max) {\n            $res{$i} = $max;\n        }\n    }\n    return\
    \ %res;\n}", "    my(%hist);\n    foreach my $c (split(/\\s+/, $test)) {\n   \
    \     $hist{$c}++;\n    }\n    return %hist;\n}", "    my %hash = ();\n    my\
    \ @values = split(/ /, $test);\n    foreach (@values) {\n        $hash{$_}++;\n\
    \    }\n    my $len = scalar keys %hash;\n    my @keys = keys %hash;\n    my @sorted_keys\
    \ = sort { $hash{$b} <=> $hash{$a} } @keys;\n    return \\%hash;\n}", "    my\
    \ %letters;\n    foreach my $letter (split(/ /, $test)) {\n        $letters{$letter}++;\n\
    \    }\n    my $most = max_value(\\%letters);\n    my @max;\n    while (my ($letter,\
    \ $count) = each %letters) {\n        if ($count == $most) {\n            push\
    \ @max, $letter;\n        }\n    }\n    my %result;\n    foreach my $letter (@max)\
    \ {\n        $result{$letter} = $most;\n    }\n    return \\%result;\n}", "  \
    \  my(%histogram);\n    my($chr);\n    while ($test =~ /(\\w)/go) {\n        $chr\
    \ = $1;\n        if (defined($histogram{$chr})) {\n            $histogram{$chr}\
    \ += 1;\n        } else {\n            $histogram{$chr} = 1;\n        }\n    }\n\
    \    return %histogram;\n}", "    my @words = split(\" \", $test);\n    my %count;\n\
    \    foreach my $word (@words) {\n        $count{$word}++;\n    }\n    my $max_count\
    \ = max(values %count);\n    my %maxes;\n    foreach my $word (keys %count) {\n\
    \        if ($count{$word} == $max_count) {\n            $maxes{$word} = $max_count;\n\
    \        }\n    }\n    return %maxes;\n}", "    $test =~ s/\\s//g;\n    my @letters\
    \ = split(//, $test);\n    my $max = 0;\n    my %occurrence = ();\n    foreach\
    \ my $l (@letters) {\n        $occurrence{$l}++;\n        if ($occurrence{$l}\
    \ > $max) {\n            $max = $occurrence{$l};\n        }\n    }\n    my %res\
    \ = ();\n    foreach my $k (keys %occurrence) {\n        if ($occurrence{$k} ==\
    \ $max) {\n            $res{$k} = $max;\n        }\n    }\n    return %res;\n}",
  "    my(%hist,$current);\n    foreach $current (split(\" \",$test)) {\n        $hist{$current}\
    \ += 1;\n    }\n    my(@highest,$max);\n    foreach $current (keys %hist) {\n\
    \        if ($max < $hist{$current}) {\n            @highest = ($current);\n \
    \           $max = $hist{$current};\n        } elsif ($max == $hist{$current})\
    \ {\n            push(@highest,$current);\n        }\n    }\n    my(%result);\n\
    \    foreach $current (@highest) {\n        $result{$current} = $max;\n    }\n\
    \    return %result;\n}", "    return {} if $test eq \"\";\n    my %histo;\n \
    \   map { $histo{$_}++ } split(\" \", $test);\n    my @max = grep { $histo{$_}\
    \ == max(values %histo) } keys %histo;\n    my %res;\n    map { $res{$_} = $histo{$_}\
    \ } @max;\n    return \\%res;\n}", "    my %histogram;\n    my @letters = split(/\
    \ /, $test);\n    foreach my $key (@letters) {\n        $histogram{$key} += 1;\n\
    \    }\n    return \\%histogram;\n}", "    my @chars = split(/ /, $test);\n  \
    \  my %hash = ();\n    foreach my $char (@chars) {\n        $hash{$char} += 1;\n\
    \    }\n    my %max = ();\n    my $max_val = 0;\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} > $max_val) {\n            $max_val = $hash{$key};\n\
    \            %max = ($key => $hash{$key});\n        } elsif ($hash{$key} == $max_val)\
    \ {\n            $max{$key} = $hash{$key};\n        }\n    }\n    return %max;\n\
    }", "    my(%result, $i, $c, @a);\n    my($max, @maxlist) = (0);\n    for $i (split(/\\\
    s+/, $test)) {\n        $result{$i}++;\n        if ($result{$i} > $max) {\n  \
    \          $max = $result{$i};\n            @maxlist = ($i);\n        } elsif\
    \ ($result{$i} == $max) {\n            push(@maxlist, $i);\n        }\n    }\n\
    \    %result = ();\n    for $i (@maxlist) {\n        $result{$i} = $max;\n   \
    \ }\n    return(%result);\n}", "    my @test = split(/\\s+/, $test);\n    my %test\
    \ = ();\n    for my $test(@test) {\n        $test{$test}++;\n    }\n    my @test\
    \ = sort keys %test;\n    my %test = ();\n    for my $test(@test) {\n        if(exists\
    \ $test{$test{$test}}) {\n            delete $test{$test{$test}};\n        }\n\
    \        $test{$test{$test}}{$test} = $test{$test};\n    }\n    @test = sort keys\
    \ %test;\n    %test = ();\n    for my $test(@test) {\n        for my $test(sort\
    \ keys %{$test{$test}}) {\n            $test{$test} = $test{$test}{$test};\n \
    \       }\n    }\n    return %test;\n}", "    my(%result);\n    my(@split) = split(/\\\
    s+/, $test);\n    foreach my $chr (@split) {\n        if(exists($result{$chr}))\
    \ {\n            $result{$chr} += 1;\n        } else {\n            $result{$chr}\
    \ = 1;\n        }\n    }\n    return %result;\n}", "    my(%hash);\n    foreach\
    \ my $key (split / /, $test) {\n        $hash{$key}++;\n    }\n    my($max) =\
    \ 0;\n    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n\
    \            $max = $hash{$key};\n        }\n    }\n    my(%final_hash);\n   \
    \ foreach my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n       \
    \     $final_hash{$key} = $max;\n        }\n    }\n    return %final_hash;\n}",
  '    #your code here', "    my(%a);\n    foreach my $letter (split(/ /, $test))\
    \ {\n        $a{$letter}++;\n    }\n    return %a;\n}", "    my %dup;\n    # convert\
    \ to lower case\n    $test = lc($test);\n    # split into words by space\n   \
    \ my @words = split(' ', $test);\n    # iterate through the words array\n    foreach\
    \ my $word (@words) {\n        # if the word is not in the hash, add it and initialize\
    \ the value to 1\n        if (!exists $dup{$word}) {\n            $dup{$word}\
    \ = 1;\n        }\n        # if the word is in the hash, increment the count\n\
    \        else {\n            $dup{$word}++;\n        }\n    }\n    # the hash\
    \ contains each word with count.\n    return %dup;\n}", "    my(%array);\n   \
    \ my(@letters) = split(' ', $test);\n    foreach $i (@letters) {\n        if(!$array{$i})\
    \ {\n            $array{$i} = 1;\n        } else {\n            $array{$i}++;\n\
    \        }\n    }\n    return %array;\n}", "    my(%chars, @maxes, $max);\n  \
    \  foreach my $c (split /\\s+/, $test) {\n        $chars{$c}++;\n    }\n    $max\
    \ = (sort {$b <=> $a} values %chars)[0];\n    @maxes = grep {$chars{$_} == $max}\
    \ keys %chars;\n    my %result;\n    foreach my $m (@maxes) {\n        $result{$m}\
    \ = $max;\n    }\n    return %result;\n}", "    my %return;\n    my @letters =\
    \ split(/ /, $test);\n    my %histogram = map { $_ => 0 } @letters;\n    for my\
    \ $letter (@letters) {\n        $histogram{$letter} += 1;\n    }\n    my $max\
    \ = max(values %histogram);\n    for my $letter (keys %histogram) {\n        if\
    \ ($histogram{$letter} == $max) {\n            $return{$letter} = $max;\n    \
    \    }\n    }\n    return %return;\n}", "    return {} if !$test;\n    my %histogram;\n\
    \    foreach my $word (split(/\\s+/, $test)) {\n        $histogram{$word}++;\n\
    \    }\n    my @keys = sort { $histogram{$b} <=> $histogram{$a} } keys %histogram;\n\
    \    my $max_value = $histogram{$keys[0]};\n    my @keys_with_max_value = grep\
    \ { $histogram{$_} == $max_value } @keys;\n    my %result;\n    foreach my $key\
    \ (@keys_with_max_value) {\n        $result{$key} = $max_value;\n    }\n    return\
    \ \\%result;\n}", "    my(%counts, $count, $char);\n    foreach $char (split('\
    \ ', $test)) {\n        $counts{$char} += 1;\n    }\n    foreach $char (keys %counts)\
    \ {\n        if(!defined($count) || $counts{$char} > $count) {\n            $count\
    \ = $counts{$char};\n        }\n    }\n    my(%result);\n    foreach $char (keys\
    \ %counts) {\n        if($counts{$char} == $count) {\n            $result{$char}\
    \ = $count;\n        }\n    }\n    return %result;\n}", "    my @test = split('\
    \ ', $test);\n    my %test = ();\n    foreach my $letter (@test) {\n        $test{$letter}++;\n\
    \    }\n    my $max = 0;\n    my %result = ();\n    foreach my $key (keys %test)\
    \ {\n        if ($test{$key} > $max) {\n            $max = $test{$key};\n    \
    \        %result = ($key => $test{$key});\n        } elsif ($test{$key} == $max)\
    \ {\n            $result{$key} = $test{$key};\n        }\n    }\n    return %result;\n\
    }", "    my $max_letter = '';\n    my $max_count = 0;\n    my %counts;\n    my\
    \ @max_letters;\n    foreach my $letter (split //, $test) {\n        $counts{$letter}++;\n\
    \        if ($counts{$letter} > $max_count) {\n            $max_count = $counts{$letter};\n\
    \            $max_letter = $letter;\n            @max_letters = $letter;\n   \
    \     } elsif ($counts{$letter} == $max_count) {\n            push @max_letters,\
    \ $letter;\n        }\n    }\n    my %result;\n    if ($max_count > 0) {\n   \
    \     map { $result{$_} = $max_count } @max_letters;\n    }\n    return %result;\n\
    }", "    my %hash = ();\n    foreach my $letters (split(' ', $test)) {\n     \
    \   if (exists $hash{$letters}) {\n            $hash{$letters}++;\n        } else\
    \ {\n            $hash{$letters} = 1;\n        }\n    }\n    return %hash;\n}",
  "    my %rep;\n    foreach my $i (split(/ /, $test)) {\n        $rep{$i} += 1;\n\
    \    }\n    my $max = (sort {$rep{$b} <=> $rep{$a}} keys %rep)[0];\n    my %ret;\n\
    \    foreach my $i (keys %rep) {\n        if ($rep{$i} == $rep{$max}) {\n    \
    \        $ret{$i} = $rep{$i};\n        }\n    }\n    return %ret;\n}", "    if\
    \ (length($test) == 0) {\n        return {};\n    }\n    my %hist = ();\n    foreach\
    \ (split(' ', $test)) {\n        if (exists($hist{$_})) {\n            $hist{$_}\
    \ += 1;\n        } else {\n            $hist{$_} = 1;\n        }\n    }\n    my\
    \ $highest = max(values %hist);\n    my @keys = ();\n    foreach (keys %hist)\
    \ {\n        if ($hist{$_} == $highest) {\n            push(@keys, $_);\n    \
    \    }\n    }\n    my %result = ();\n    foreach (@keys) {\n        $result{$_}\
    \ = $highest;\n    }\n    return \\%result;\n}", "    my @a = split(\" \", $test);\n\
    \    my %count;\n    $count{$_}++ for @a;\n    my @repeated;\n    my @k = keys\
    \ %count;\n    my @v = values %count;\n    my $max = max @v;\n    my %results;\n\
    \    for (my $i = 0; $i < scalar @k; $i++) {\n        if ($v[$i] == $max) {\n\
    \            $results{$k[$i]} = $v[$i];\n        }\n    }\n    return %results;\n\
    }", "    my(%hash) = ();\n    if ($test =~ /\\A\\s*\\z/) {\n        return %hash;\n\
    \    }\n    my @ary = split(\" \", $test);\n    my $i = 0;\n    while ($i < @ary)\
    \ {\n        if (exists $hash{$ary[$i]}) {\n            $hash{$ary[$i]}++;\n \
    \       } else {\n            $hash{$ary[$i]} = 1;\n        }\n        $i++;\n\
    \    }\n    my($max_key) = \"\";\n    my($max_val) = -1;\n    my(%result) = ();\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max_val) {\n \
    \           $max_val = $hash{$key};\n            $max_key = $key;\n        }\n\
    \    }\n    foreach my $key (keys %hash) {\n        if ($hash{$key} == $max_val)\
    \ {\n            $result{$key} = $max_val;\n        }\n    }\n    return %result;\n\
    }", "    my %values;\n    my @chars = split ' ', $test;\n    foreach my $char\
    \ (@chars) {\n        $values{$char}++;\n    }\n    return \\%values;\n}", " \
    \   my %h;\n    return %h unless ($test);\n    my @array = split(\" \", $test);\n\
    \    my %temp;\n    foreach my $key (@array) {\n        $temp{$key}++;\n    }\n\
    \    foreach my $key (keys %temp) {\n        if ($temp{$key} > keys %h) {\n  \
    \          %h = ($key => $temp{$key});\n        } elsif ($temp{$key} == keys %h)\
    \ {\n            $h{$key} = $temp{$key};\n        }\n    }\n    return %h;\n}",
  "    my %letters;\n    my %results;\n    my $max = 0;\n    my @tests = split(/ /,\
    \ $test);\n    foreach (@tests) {\n        $letters{$_} = 0 if !defined $letters{$_};\n\
    \        $letters{$_}++;\n    }\n    foreach (keys %letters) {\n        if ($letters{$_}\
    \ > $max) {\n            $max = $letters{$_};\n        }\n    }\n    foreach (keys\
    \ %letters) {\n        if ($letters{$_} == $max) {\n            $results{$_} =\
    \ $letters{$_};\n        }\n    }\n    return %results;\n}", "    my $hist = {};\n\
    \    my @letters = split(' ', $test);\n    my @used = ();\n    foreach my $letter\
    \ (@letters) {\n        if (!grep(/^$letter$/, @used)) {\n            my $count\
    \ = 0;\n            foreach my $l (@letters) {\n                if ($l eq $letter)\
    \ {\n                    $count++;\n                }\n            }\n       \
    \     $hist->{$letter} = $count;\n            push(@used, $letter);\n        }\n\
    \    }\n    return $hist;\n}", "    my(%counts);\n    foreach my $char (split(/\
    \ /, $test)) {\n        $counts{$char}++;\n    }\n    return %counts;\n}", " \
    \   my $result = {};\n    my @letters = split(/\\s+/, $test);\n    foreach my\
    \ $letter (@letters) {\n        if (exists $result->{$letter}) {\n           \
    \ $result->{$letter} += 1;\n        } else {\n            $result->{$letter} =\
    \ 1;\n        }\n    }\n    my $max = 0;\n    my @keys = keys(%$result);\n   \
    \ foreach my $key (@keys) {\n        if ($result->{$key} > $max) {\n         \
    \   $max = $result->{$key};\n        }\n    }\n    my $max_histogram = {};\n \
    \   foreach my $key (@keys) {\n        if ($result->{$key} == $max) {\n      \
    \      $max_histogram->{$key} = $max;\n        }\n    }\n    return $max_histogram;\n\
    }", "    my %result;\n    my @data = split(' ', $test);\n    for my $letter (@data)\
    \ {\n        $result{$letter}++;\n    }\n    return %result;\n}", "    my %hash\
    \ = ();\n    my $max = 0;\n    my $maxkey = \"\";\n    foreach(split(' ', $test))\
    \ {\n        if (exists $hash{$_}) {\n            $hash{$_}++;\n        } else\
    \ {\n            $hash{$_} = 1;\n        }\n        if ($hash{$_} > $max) {\n\
    \            $max = $hash{$_};\n            $maxkey = $_;\n        }\n    }\n\
    \    if (scalar(keys %hash) == 0) {\n        return %hash;\n    }\n    foreach(keys\
    \ %hash) {\n        if ($hash{$_} < $max) {\n            delete $hash{$_};\n \
    \       }\n    }\n    return %hash;\n}", "    my %hist;\n    foreach my $ch (split\
    \ /\\s+/, $test) {\n        $hist{$ch}++;\n    }\n    my $max = -1;\n    foreach\
    \ my $k (keys %hist) {\n        if ($hist{$k} > $max) {\n            $max = $hist{$k};\n\
    \        }\n    }\n    my %result;\n    foreach my $k (keys %hist) {\n       \
    \ if ($hist{$k} == $max) {\n            $result{$k} = $max;\n        }\n    }\n\
    \    return %result;\n}", "    my %hash = map { $_ => () } split(' ', $test);\n\
    \    map { $hash{$_} = () } split(' ', $test);\n    return \\%hash;\n}", "   \
    \ # YOUR CODE HERE\n    my $histo = {};\n    my $max = 0;\n    my @maxWords =\
    \ ();\n    my @words = split / /, $test;\n    foreach my $word (@words) {\n  \
    \      if(not exists $histo->{$word}) {\n            $histo->{$word} = 1;\n  \
    \      } else {\n            $histo->{$word} += 1;\n        }\n        if($histo->{$word}\
    \ > $max) {\n            $max = $histo->{$word};\n            @maxWords = ($word);\n\
    \        } elsif($histo->{$word} == $max) {\n            push @maxWords, $word;\n\
    \        }\n    }\n    return $histo;\n}", "    my %hash = ();\n    foreach my\
    \ $letter (split(\" \", $test)) {\n        $hash{$letter}++;\n    }\n    return\
    \ \\%hash;\n}", "    my $rv = {};\n    return $rv unless $test;\n    my @array\
    \ = split ' ', $test;\n    my $max = 0;\n    for my $item (@array) {\n       \
    \ if (exists $rv->{$item}) {\n            $rv->{$item}++;\n        } else {\n\
    \            $rv->{$item} = 1;\n        }\n        $max = $rv->{$item} if $rv->{$item}\
    \ > $max;\n    }\n    for my $item (keys %$rv) {\n        delete $rv->{$item}\
    \ unless $rv->{$item} == $max;\n    }\n    return $rv;\n}", "    my %h;\n    for\
    \ my $x (split(/ /, $test)) {\n        $h{$x}++;\n    }\n    my $max = 0;\n  \
    \  my @max_keys;\n    while (my ($k, $v) = each %h) {\n        if ($v > $max)\
    \ {\n            $max = $v;\n            @max_keys = ($k);\n        } elsif ($v\
    \ == $max) {\n            push @max_keys, $k;\n        }\n    }\n    return map\
    \ { $_ => $max } @max_keys;\n}", "    my %hist;\n    my %max;\n    my @max_count;\n\
    \    my @max_key;\n    my $max = 0;\n    my $count = 0;\n    my $prev = \"\";\n\
    \    my @words = split(/\\s+/, $test);\n    foreach my $word (@words) {\n    \
    \    if ($word ne $prev) {\n            if ($max < $count) {\n               \
    \ @max_count = ();\n                @max_key = ();\n                $max = $count;\n\
    \                push(@max_count, $count);\n                push(@max_key, $prev);\n\
    \            } elsif ($max == $count) {\n                push(@max_count, $count);\n\
    \                push(@max_key, $prev);\n            }\n            $count = 0;\n\
    \        }\n        $count++;\n        $prev = $word;\n    }\n    for (my $i =\
    \ 0; $i < @max_key; $i++) {\n        $hist{$max_key[$i]} = $max_count[$i];\n \
    \   }\n    return %hist;\n}", "    my $count = 0;\n    my %hash = ();\n    foreach\
    \ my $element (split(\" \", $test)) {\n        if(exists $hash{$element}) {\n\
    \            $hash{$element} += 1;\n        } else {\n            $hash{$element}\
    \ = 1;\n        }\n    }\n    return %hash;\n}", "    my %words;\n    my %maxwords;\n\
    \    my $max = 0;\n    foreach my $word (split(' ', $test)) {\n        if (defined\
    \ $words{$word}) {\n            $words{$word} += 1;\n        } else {\n      \
    \      $words{$word} = 1;\n        }\n        if ($words{$word} > $max) {\n  \
    \          %maxwords = ($word => $words{$word});\n            $max = $words{$word};\n\
    \        } elsif ($words{$word} == $max) {\n            $maxwords{$word} = $words{$word};\n\
    \        }\n    }\n    return %maxwords;\n}", "    return {};\n}", "    my(%testHash,\
    \ @testArray, @testArray2);\n    if(!$test){\n        return {};\n    }\n    @testArray\
    \ = split(' ', $test);\n    my($testMax) = 1;\n    foreach my $testHash(@testArray){\n\
    \        if($testHash{$testHash}){\n            $testHash{$testHash}++;\n    \
    \        if($testHash{$testHash} > $testMax){\n                $testMax = $testHash{$testHash};\n\
    \            }\n        }\n        else{\n            $testHash{$testHash} = 1;\n\
    \        }\n    }\n    foreach my $testArray(@testArray){\n        if($testHash{$testArray}\
    \ == $testMax){\n            push(@testArray2, $testArray);\n        }\n    }\n\
    \    my(%testFinal);\n    foreach my $testArray2(@testArray2){\n        $testFinal{$testArray2}\
    \ = $testMax;\n    }\n    return %testFinal;\n}", "    my $seen = {};\n    my\
    \ $max = -1;\n    my $max_key = '';\n    my @max_keys = ();\n    my @tokens =\
    \ split(' ', $test);\n    for my $i (@tokens) {\n        $seen->{$i} = $seen->{$i}\
    \ + 1;\n        if ($seen->{$i} > $max) {\n            $max = $seen->{$i};\n \
    \           $max_key = $i;\n            @max_keys = ($i);\n        } elsif ($seen->{$i}\
    \ == $max) {\n            push @max_keys, $i;\n        }\n    }\n    my $result\
    \ = {};\n    for my $i (@max_keys) {\n        $result->{$i} = $max;\n    }\n \
    \   return $result;\n}", "    my(%hist);\n    foreach my $let (split(/ /, $test))\
    \ {\n        $hist{$let}++;\n    }\n    my($max) = 0;\n    foreach my $let (keys\
    \ %hist) {\n        $max = $hist{$let} if $hist{$let} > $max;\n    }\n    my(%res);\n\
    \    foreach my $let (keys %hist) {\n        $res{$let} = $hist{$let} if $hist{$let}\
    \ == $max;\n    }\n    return %res;\n}", "    my @spl = split(' ', $test);\n \
    \   my %hash = ();\n    my $max = 1;\n    my $max_key = $spl[0];\n    for my $value\
    \ (@spl) {\n        if(exists $hash{$value}) {\n            $hash{$value}++;\n\
    \            if($hash{$value} > $max) {\n                $max = $hash{$value};\n\
    \                $max_key = $value;\n            }\n        } else {\n       \
    \     $hash{$value} = 1;\n        }\n    }\n    my %res_hash = ();\n    for my\
    \ $key (keys %hash) {\n        if($hash{$key} == $max) {\n            $res_hash{$key}\
    \ = $max;\n        }\n    }\n    return %res_hash;\n}", "    if ($test eq \"\"\
    ) {\n\treturn {};\n    }\n    my @testArray = split / /, $test;\n    my %hash;\n\
    \    foreach my $item (@testArray) {\n\tif (exists $hash{$item}) {\n\t    $hash{$item}++;\n\
    \t} else {\n\t    $hash{$item} = 1;\n\t}\n    }\n    return \\%hash;\n}", "  \
    \  my $hash = {};\n    my @arr = split(/ /, $test);\n    foreach my $i (@arr)\
    \ {\n        $hash->{$i} += 1;\n    }\n    return $hash;\n}", "    my(%hash);\n\
    \    my(@sorted);\n    my(@arr) = split(' ', $test);\n    foreach my $letter (@arr)\
    \ {\n        if(exists $hash{$letter}) {\n            $hash{$letter} += 1;\n \
    \       } else {\n            $hash{$letter} = 1;\n        }\n    }\n    @sorted\
    \ = sort {$hash{$b} <=> $hash{$a}} keys %hash;\n    if(defined $sorted[0]) {\n\
    \        my(%res);\n        foreach my $key (@sorted) {\n            if($hash{$key}\
    \ == $hash{$sorted[0]}) {\n                $res{$key} = $hash{$key};\n       \
    \     }\n        }\n        return %res;\n    } else {\n        return %hash;\n\
    \    }\n}", "    # put your code here\n}", "    $test =~ s/\\s+/ /g;\n    $test\
    \ =~ s/^\\s+//;\n    $test =~ s/\\s+$//;\n    my %l;\n    for my $l (split ' ',\
    \ $test) {\n        $l{$l}++;\n    }\n    my $max = max(values %l);\n    my %r;\n\
    \    for my $l (keys %l) {\n        if ($l{$l} == $max) {\n            $r{$l}\
    \ = $max;\n        }\n    }\n    return \\%r;\n}", "    my %hash;\n    $test =~\
    \ s/\\s+/ /g;\n    my @a = split(' ', $test);\n    for (@a) {\n        $hash{$_}++;\n\
    \    }\n    $hash{$_} = 0 for grep {!$hash{$_}} keys %hash;\n    my @result =\
    \ sort {$hash{$b} <=> $hash{$a}} keys %hash;\n    my $max = $hash{$result[0]};\n\
    \    my @res = map {$_ if $hash{$_} == $max} keys %hash;\n    my %final;\n   \
    \ $final{$_} = $max for @res;\n    return \\%final;\n}", "    my %hash;\n    my\
    \ @letters = split(\" \", $test);\n    foreach my $letter (@letters) {\n     \
    \   if (exists $hash{$letter}) {\n            $hash{$letter}++;\n        } else\
    \ {\n            $hash{$letter} = 1;\n        }\n    }\n    my $max = 0;\n   \
    \ my %max;\n    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max)\
    \ {\n            $max = $hash{$key};\n            %max = ($key => $hash{$key});\n\
    \        } elsif ($hash{$key} == $max) {\n            $max{$key} = $hash{$key};\n\
    \        }\n    }\n    return %max;\n}", "    my @words = split ' ', $test;\n\
    \    my %histo;\n    for my $word (@words) {\n        $histo{$word}++;\n    }\n\
    \    return \\%histo;\n}", "    my @test = split / /, $test;\n    my %hash = map\
    \ { $_ => 0 } @test;\n    map { $hash{$_}++ } @test;\n    my $max = (sort { $hash{$b}\
    \ <=> $hash{$a} } keys %hash)[0];\n    my %max;\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} == $hash{$max}) {\n            $max{$key} = $hash{$key};\n\
    \        }\n    }\n    return %max;\n}", "    my %h = ();\n    my @test = split\
    \ / /, $test;\n    foreach (@test) {\n        $h{$_}++;\n    }\n    my $largest\
    \ = (sort {$h{$b} <=> $h{$a}} keys %h)[0];\n    my %results = ();\n    foreach\
    \ (keys %h) {\n        if ($h{$_} == $h{$largest}) {\n            $results{$_}\
    \ = $h{$_};\n        }\n    }\n    return %results;\n}", "    my @list = split\
    \ ' ', $test;\n    my %freq;\n    my %ret;\n    foreach my $val (@list) {\n  \
    \      $freq{$val}++;\n    }\n    foreach my $key (sort {$freq{$b} <=> $freq{$a}}\
    \ keys %freq) {\n        if ($freq{$key} == $freq{$list[0]}) {\n            $ret{$key}\
    \ = $freq{$key};\n        }\n    }\n    return %ret;\n}", "    my %hash = ();\n\
    \    my $max = 1;\n    my $letter;\n    my @letters = split(/ /, $test);\n   \
    \ foreach $letter (@letters) {\n        if (exists $hash{$letter}) {\n       \
    \     $hash{$letter}++;\n            if ($hash{$letter} > $max) {\n          \
    \      $max = $hash{$letter};\n            }\n        } else {\n            $hash{$letter}\
    \ = 1;\n        }\n    }\n    my %newhash = ();\n    foreach $letter (keys %hash)\
    \ {\n        if ($hash{$letter} == $max) {\n            $newhash{$letter} = $max;\n\
    \        }\n    }\n    return %newhash;\n}", "    my %occurences;\n    foreach\
    \ my $letter (split ' ', $test) {\n        $occurences{$letter}++;\n    }\n  \
    \  my %max_occurences;\n    my $max_occurence = 0;\n    foreach my $letter (keys\
    \ %occurences) {\n        my $this_occurence = $occurences{$letter};\n       \
    \ if ($this_occurence > $max_occurence) {\n            %max_occurences = ();\n\
    \            $max_occurence = $this_occurence;\n        }\n        if ($this_occurence\
    \ == $max_occurence) {\n            $max_occurences{$letter} = $this_occurence;\n\
    \        }\n    }\n    return %max_occurences;\n}", "    my %hist;\n    foreach\
    \ my $letter (split(/\\s+/, $test)) {\n        $hist{$letter}++;\n    }\n    my\
    \ $highest_count = 0;\n    my @letters;\n    foreach my $letter (keys %hist) {\n\
    \        my $letter_count = $hist{$letter};\n        if ($letter_count > $highest_count)\
    \ {\n            $highest_count = $letter_count;\n            @letters = ($letter);\n\
    \        } elsif ($letter_count == $highest_count) {\n            push @letters,\
    \ $letter;\n        }\n    }\n    return map { $_ => $highest_count } @letters;\n\
    }", "    my %hist;\n    foreach my $letter (split(' ', $test)) {\n        $hist{$letter}++;\n\
    \    }\n    my $max_count = max(values %hist);\n    my %max;\n    foreach my $letter\
    \ (keys %hist) {\n        if ($hist{$letter} == $max_count) {\n            $max{$letter}\
    \ = $max_count;\n        }\n    }\n    return %max;\n}", "    my $result = {};\n\
    \    my $count = 0;\n    my $out = {};\n    my @arr = split(' ', $test);\n   \
    \ foreach (@arr) {\n        $result->{$_}++;\n    }\n    foreach (keys %$result)\
    \ {\n        if ($result->{$_} > $count) {\n            $count = $result->{$_};\n\
    \            $out = {$_ => $count};\n        }\n        elsif ($result->{$_} ==\
    \ $count) {\n            $out->{$_} = $count;\n        }\n    }\n    return $out;\n\
    }", "    my %hist;\n    my %result;\n    my @words = split(/\\s+/, $test);\n \
    \   foreach my $w (@words) {\n        $hist{$w}++;\n    }\n    my $max = max values\
    \ %hist;\n    foreach my $w (keys %hist) {\n        if ($hist{$w} == $max) {\n\
    \            $result{$w} = $max;\n        }\n    }\n    return %result;\n}", " \
    \   my @a = split(/ /, $test);\n    my %h;\n    foreach my $b (@a) {\n       \
    \ $h{$b}++;\n    }\n    my %o;\n    my $c;\n    foreach my $d (keys %h) {\n  \
    \      if (!defined $c || $h{$d} > $c) {\n            $c = $h{$d};\n         \
    \   %o = ();\n            $o{$d} = $c;\n        } elsif ($h{$d} == $c) {\n   \
    \         $o{$d} = $c;\n        }\n    }\n    return %o;\n}", "    return {} if\
    \ !$test;\n    my %h = ();\n    for my $c (split(/\\s+/, $test)) {\n        $h{$c}++;\n\
    \    }\n    my $max = (sort {$b <=> $a} values %h)[0];\n    return { map { $_\
    \ => $h{$_} } grep { $h{$_} == $max } keys %h };\n}", "    my %hash = ();\n  \
    \  foreach my $char (split(/ /, $test)) {\n        $hash{$char}++;\n    }\n  \
    \  return \\%hash;\n}", "    my @array = split(' ', $test);\n    my $result =\
    \ {};\n    my $count = 1;\n    my $temp = '';\n    my $tmp = 0;\n    foreach my\
    \ $i (@array) {\n        foreach my $j (@array) {\n            if ($i eq $j) {\n\
    \                $tmp++;\n            }\n        }\n        if ($tmp > $count)\
    \ {\n            $count = $tmp;\n            $temp = $i;\n        }\n        $tmp\
    \ = 0;\n    }\n    if ($temp ne '') {\n        $result->{$temp} = $count;\n  \
    \  }\n    return $result;\n}", "    my %counts;\n    my @letters = split(/ /,\
    \ $test);\n    foreach my $letter (@letters) {\n        $counts{$letter} += 1;\n\
    \    }\n    return %counts;\n}", "    my %hash;\n    my @testarray = split(' ',\
    \ $test);\n    my @maxkeys;\n    my $max = 0;\n    foreach my $i (@testarray)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n    \
    \        @maxkeys = $key;\n        } elsif ($hash{$key} == $max) {\n         \
    \   push @maxkeys, $key;\n        }\n    }\n    my %ret;\n    foreach my $key\
    \ (@maxkeys) {\n        $ret{$key} = $max;\n    }\n    return %ret;\n}", "   \
    \ my %count;\n    my %letter_count;\n    my $max = 0;\n    my @max_letter;\n \
    \   my @test = split / /, $test;\n    foreach my $i (@test) {\n        $count{$i}\
    \ += 1;\n    }\n    foreach my $letter (keys %count) {\n        if ($count{$letter}\
    \ > $max) {\n            $max = $count{$letter};\n            @max_letter = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letter, $letter;\n\
    \        }\n    }\n    foreach my $letter (@max_letter) {\n        $letter_count{$letter}\
    \ = $max;\n    }\n    return %letter_count;\n}", "    my @splitted = split(/ /,\
    \ $test);\n    my %hash = ();\n    foreach my $i (@splitted) {\n        if (exists\
    \ $hash{$i}) {\n            $hash{$i}++;\n        } else {\n            $hash{$i}\
    \ = 1;\n        }\n    }\n    return %hash;\n}", "    my @words = split / /, $test;\n\
    \    my %histogram;\n    foreach my $word (@words) {\n        if(exists $histogram{$word})\
    \ {\n            $histogram{$word} += 1;\n        } else {\n            $histogram{$word}\
    \ = 1;\n        }\n    }\n    return %histogram;\n}", "    my @characters = split(/\\\
    s+/, $test);\n    my %values;\n    my $highest = 0;\n    my @highest_values;\n\
    \    foreach my $char (@characters) {\n        if (exists $values{$char}) {\n\
    \            $values{$char} += 1;\n        } else {\n            $values{$char}\
    \ = 1;\n        }\n        if ($values{$char} > $highest) {\n            $highest\
    \ = $values{$char};\n            @highest_values = ($char);\n        } elsif ($values{$char}\
    \ == $highest) {\n            push @highest_values, $char;\n        }\n    }\n\
    \    my %result;\n    foreach my $char (@highest_values) {\n        $result{$char}\
    \ = $highest;\n    }\n    return %result;\n}", "    my $result = {};\n    my @tokens\
    \ = split(/\\s+/, $test);\n    foreach my $token (@tokens) {\n        $result->{$token}++;\n\
    \    }\n    return $result;\n}", "    my @list = split(/\\s+/, $test);\n    my\
    \ %store;\n    foreach(@list) {\n        ++$store{$_};\n    }\n    return %store;\n\
    }", "    my @test = split(/ /, $test);\n    my %test;\n    for my $letter (@test)\
    \ {\n        $test{$letter}++;\n    }\n    my @max = ();\n    my $max = 0;\n \
    \   for my $key (keys %test) {\n        if($test{$key} == $max) {\n          \
    \  push(@max, $key);\n        }\n        elsif($test{$key} > $max) {\n       \
    \     @max = ($key);\n            $max = $test{$key};\n        }\n    }\n    my\
    \ %max;\n    for my $letter (@max) {\n        $max{$letter} = $max;\n    }\n \
    \   return %max;\n}", "    my $result = {};\n    foreach my $letter (split /\\\
    s+/, $test) {\n        $result->{$letter}++;\n    }\n    return $result;\n}",
  "    my %hash = ();\n    foreach (split / /, $test) {\n        if (!exists $hash{$_})\
    \ {\n            $hash{$_} = 1;\n        } else {\n            $hash{$_} += 1;\n\
    \        }\n    }\n    my %histogram = ();\n    my $value = 1;\n    my $key =\
    \ \"\";\n    foreach (sort {$hash{$b} <=> $hash{$a}} keys %hash) {\n        if\
    \ ($hash{$_} == $value) {\n            $key .= $_ . \" \";\n        } else {\n\
    \            $key = $_;\n            $value = $hash{$_};\n        }\n        $histogram{$key}\
    \ = $value;\n    }\n    return %histogram;\n}", "    my %occurrences;\n    my\
    \ %counts;\n    my $max = 0;\n    foreach my $word (split(/\\s+/, $test)) {\n\
    \        $occurrences{$word}++;\n        if ($occurrences{$word} > $max) {\n \
    \           $max = $occurrences{$word};\n        }\n    }\n    foreach my $k (keys\
    \ %occurrences) {\n        if ($occurrences{$k} == $max) {\n            $counts{$k}\
    \ = $max;\n        }\n    }\n    return %counts;\n}", "    my @letters = split('\
    \ ', $test);\n    my %letters = ();\n    for my $letter (@letters) {\n       \
    \ my $value = $letters{$letter};\n        if (!$value) {\n            $value =\
    \ 0;\n        }\n        $letters{$letter} = $value + 1;\n    }\n    my $max =\
    \ 0;\n    my @max = ();\n    while (my ($key, $value) = each %letters) {\n   \
    \     if ($value > $max) {\n            $max = $value;\n            @max = ($key);\n\
    \        } elsif ($value == $max) {\n            push(@max, $key);\n        }\n\
    \    }\n    my %max = ();\n    for my $letter (@max) {\n        $max{$letter}\
    \ = $max;\n    }\n    return %max;\n}", "    my %count;\n    my %histo;\n    my\
    \ $str;\n    my $value;\n    my $key;\n    my $max_key;\n    my $max_value;\n\
    \    $test =~ s/\\s+/ /g;\n    my @words = split ' ', $test;\n    foreach my $word\
    \ (@words) {\n        ++$count{$word};\n    }\n    $max_value = max values %count;\n\
    \    for my $word (keys %count) {\n        if ($count{$word} == $max_value) {\n\
    \            $histo{$word} = $max_value;\n        }\n    }\n    return %histo;\n\
    }", "    my @chars = split(/\\s+/, $test);\n    my %result;\n    my %count;\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /[a-zA-Z]/) {\n       \
    \     $count{$char}++;\n        }\n    }\n    my $max = 0;\n    foreach my $key\
    \ (keys %count) {\n        if ($count{$key} > $max) {\n            $max = $count{$key};\n\
    \        }\n    }\n    foreach my $key (keys %count) {\n        if ($count{$key}\
    \ == $max) {\n            $result{$key} = $max;\n        }\n    }\n    return\
    \ %result;\n}", "    my $str = lc($test);\n    my @str = split(/ /, $str);\n \
    \   my %hash = ();\n    foreach my $element (@str) {\n        if (not exists $hash{$element})\
    \ {\n            $hash{$element} = 1;\n        } else {\n            $hash{$element}\
    \ += 1;\n        }\n    }\n    my @key = sort {$hash{$b} <=> $hash{$a}} keys %hash;\n\
    \    my %result = ();\n    for (my $i = 0; $i < scalar(@key); $i++) {\n      \
    \  if ($hash{$key[$i]} != $hash{$key[0]}) {\n            last;\n        }\n  \
    \      $result{$key[$i]} = $hash{$key[$i]};\n    }\n    return %result;\n}", " \
    \   my @letters = split(/\\s+/, $test);\n    my %histogram;\n    my %return;\n\
    \    my $max = 0;\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
    \        }\n    }\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
    \ == $max) {\n            $return{$letter} = $max;\n        }\n    }\n    return\
    \ %return;\n}", "    my(%hist);\n    my(@lst);\n    my($max) = 0;\n    my($chr);\n\
    \    my($cnt);\n    foreach $chr (split(/\\s+/, $test)) {\n        if (exists($hist{$chr}))\
    \ {\n            $hist{$chr}++;\n        } else {\n            $hist{$chr} = 1;\n\
    \        }\n        if ($hist{$chr} > $max) {\n            $max = $hist{$chr};\n\
    \        }\n    }\n    foreach $chr (keys(%hist)) {\n        if ($hist{$chr} ==\
    \ $max) {\n            push(@lst, $chr);\n        }\n    }\n    my(%res);\n  \
    \  foreach $chr (@lst) {\n        $res{$chr} = $max;\n    }\n    return(%res);\n\
    }", "    my %histo;\n    my @tmp = split / /, $test;\n    my $max = 0;\n    my\
    \ $cnt = 0;\n    foreach my $w (@tmp) {\n        $histo{$w}++;\n        if ($histo{$w}\
    \ > $max) {\n            $max = $histo{$w};\n        }\n    }\n    foreach my\
    \ $x (keys %histo) {\n        if ($histo{$x} == $max) {\n            $cnt++;\n\
    \        }\n    }\n    if ($cnt == scalar keys %histo) {\n        return %histo;\n\
    \    }\n    else {\n        foreach my $x (keys %histo) {\n            if ($histo{$x}\
    \ < $max) {\n                delete $histo{$x};\n            }\n        }\n  \
    \      return %histo;\n    }\n}", "    my %words;\n    my @test = split(/ /, $test);\n\
    \    foreach (@test) {\n        $words{$_}++;\n    }\n    my $max = 0;\n    my\
    \ @max_words;\n    foreach my $word (keys %words) {\n        my $count = $words{$word};\n\
    \        if ($count > $max) {\n            $max = $count;\n            @max_words\
    \ = ($word);\n        } elsif ($count == $max) {\n            push @max_words,\
    \ $word;\n        }\n    }\n    my %results;\n    foreach (@max_words) {\n   \
    \     $results{$_} = $max;\n    }\n    return %results;\n}", "    my(%hash, $char,\
    \ $count);\n    for (split(' ', $test)) {\n        $hash{$_}++;\n    }\n    $count\
    \ = 0;\n    for $char (keys %hash) {\n        if ($hash{$char} > $count) {\n \
    \           $count = $hash{$char};\n        }\n    }\n    map {\n        delete\
    \ $hash{$_} unless $hash{$_} == $count;\n    } keys %hash;\n    return %hash;\n\
    }", "    my %histogram = ();\n    my @histogram = ();\n    my @letters = split\
    \ / /, $test;\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    for my $key (sort keys %histogram) {\n        push @histogram, $key\
    \ . ' => ' . $histogram{$key};\n    }\n    return '{' . join(', ', @histogram)\
    \ . '}';\n}", "    my %hist;\n    my %max;\n    my $max_count = 0;\n    my @chars\
    \ = split(' ', $test);\n    foreach my $c (@chars) {\n        $hist{$c}++;\n \
    \       if ($hist{$c} > $max_count) {\n            $max_count = $hist{$c};\n \
    \           %max = ();\n            $max{$c} = $max_count;\n        } elsif ($hist{$c}\
    \ == $max_count) {\n            $max{$c} = $max_count;\n        }\n    }\n   \
    \ return %max;\n}", "    my %hash;\n    my @letters = split(' ', $test);\n   \
    \ foreach my $letter (@letters) {\n        $hash{$letter}++;\n    }\n    my $count\
    \ = 0;\n    my @answers;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $count) {\n            $count = $hash{$key};\n            @answers = ($key);\n\
    \        } elsif ($hash{$key} == $count) {\n            push(@answers, $key);\n\
    \        }\n    }\n    my %result;\n    foreach my $answer (@answers) {\n    \
    \    $result{$answer} = $count;\n    }\n    return %result;\n}", "    my %letters;\n\
    \    my @items = split(/ /, $test);\n    foreach my $item (@items) {\n\t$letters{$item}++;\n\
    \    }\n    my $max_key;\n    my $max_val = 0;\n    foreach my $key (keys %letters)\
    \ {\n\tif ($letters{$key} > $max_val) {\n\t    $max_val = $letters{$key};\n\t\
    \    $max_key = $key;\n\t}\n    }\n    my %new_letters;\n    if ($max_val == 0)\
    \ {\n\treturn %new_letters;\n    }\n    foreach my $key (keys %letters) {\n\t\
    if ($letters{$key} == $max_val) {\n\t    $new_letters{$key} = $max_val;\n\t}\n\
    \    }\n    return %new_letters;\n}", "    my(%hist, $char, $key, $val);\n   \
    \ $test =~ s/\\s+/ /g;\n    foreach $char (split(//, $test)) {\n        $hist{$char}++;\n\
    \    }\n    %hist = sort { $hist{$b} <=> $hist{$a} } %hist;\n    while (($key,\
    \ $val) = each %hist) {\n        last if ($val != $hist{$key});\n        print\
    \ \"$key : $val\\n\";\n    }\n}", "    my(%letter_count);\n    my(@letters) =\
    \ split(/\\s+/, $test);\n    foreach my $letter (@letters) {\n        $letter_count{$letter}\
    \ += 1;\n    }\n    return %letter_count;\n}", "    my %h = ();\n    my @letters\
    \ = split(\" \", $test);\n    foreach (@letters) {\n        $h{$_}++;\n    }\n\
    \    my $max = max values %h;\n    my @most_common = ();\n    foreach (keys %h)\
    \ {\n        if ($h{$_} == $max) {\n            push @most_common, $_;\n     \
    \   }\n    }\n    %h = ();\n    foreach (@most_common) {\n        $h{$_} = $max;\n\
    \    }\n    return %h;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
