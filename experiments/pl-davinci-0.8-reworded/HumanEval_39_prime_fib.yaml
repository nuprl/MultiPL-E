name: HumanEval_39_prime_fib
language: pl
prompt: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
  # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nsub prime_fib {\n    my($n)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_fib;\n\
  \        if(eq_deeply($candidate->(1),2)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(2),3)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),5))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),13))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),89))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),233))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1597))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28657))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),514229))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),433494437))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return (1,2,3,5,13,89)[$n-1];\n}", "    my $i = 0;\n    my $j =\
    \ 1;\n    my $k = 1;\n    while (1) {\n        ($i, $j, $k) = ($j, $k, $j + $k);\n\
    \        next unless is_prime($k);\n        $n--;\n        return $k if $n ==\
    \ 0;\n    }\n}", "    my $count = 1;\n    my $i = 1;\n    my $j = 1;\n    my $sum\
    \ = 0;\n    while ($count <= $n) {\n        if (is_prime($j)) {\n            $count++;\n\
    \            $sum = $j;\n        }\n        $i = $j - $i;\n        $j = $j + $i;\n\
    \    }\n    return $sum;\n}", "    my $f1 = 1;\n    my $f2 = 1;\n    my $f3 =\
    \ 1;\n    my $i = 2;\n    while (1) {\n        $f3 = $f1 + $f2;\n        if (is_prime($f3))\
    \ {\n            $i++;\n            if ($i == $n) {\n                return $f3;\n\
    \            }\n        }\n        $f1 = $f2;\n        $f2 = $f3;\n    }\n}",
  "    my($a, $b, $i, $tmp);\n    $a = 1;\n    $b = 2;\n    $i = 1;\n    while ($i\
    \ < $n) {\n        if (is_prime($b)) {\n            $i++;\n        }\n       \
    \ $tmp = $a + $b;\n        $a = $b;\n        $b = $tmp;\n    }\n    return $b;\n\
    }", "    my($r) = 0;\n    my($i) = 0;\n    while ($r != $n) {\n        $i++;\n\
    \        $r++ if (is_prime($i) && is_fib($i));\n    }\n    return $i;\n}", " \
    \   if($n < 0) { die(\"Can't be negative\"); }\n    my @primes = (2, 3);\n   \
    \ my @prev_fibs = (1, 1);\n    my $count = 2;\n    while($count <= $n) {\n   \
    \     push(@prev_fibs, $prev_fibs[0] + $prev_fibs[1]);\n        shift(@prev_fibs);\n\
    \        if(Util::is_prime($prev_fibs[1])) {\n            push(@primes, $prev_fibs[1]);\n\
    \            $count++;\n        }\n    }\n    return $primes[$n - 1];\n}", " \
    \   my $i = 1;\n    my $fib = 2;\n    while (1) {\n        $fib = fibonacci($i);\n\
    \        if (is_prime($fib)) {\n            return $fib if $n == 1;\n        \
    \    $n--;\n        }\n        $i++;\n    }\n}", '    my $fib = [2, 3];', "  \
    \  my @fib;\n    my @prime;\n    my $x = 0;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $i = 1;\n    my $j = 0;\n    my $k = 0;\n    my $flag = 0;\n    my $fib\
    \ = 0;\n    while ($i <= $n) {\n        $x = $y;\n        $y = $z;\n        $z\
    \ = $x + $y;\n        @fib = ($x, $y, $z);\n        while ($j < 3) {\n       \
    \     while ($k < scalar(@prime)) {\n                if ($fib[$j] == $prime[$k])\
    \ {\n                    $flag = 1;\n                    $fib = $fib[$j];\n  \
    \                  last;\n                }\n                elsif ($fib[$j] %\
    \ $prime[$k] == 0) {\n                    $flag = 0;\n                    last;\n\
    \                }\n                $k = $k + 1;\n            }\n            if\
    \ ($flag == 1) {\n                $i = $i + 1;\n                $j = $j + 1;\n\
    \                $k = 0;\n            }\n            else {\n                push(@prime,\
    \ $fib[$j]);\n                $j = $j + 1;\n                $k = 0;\n        \
    \    }\n        }\n        $j = 0;\n    }\n    return $fib;\n}", "    my $i =\
    \ 2;\n    my $fib = 0;\n    my $count = 0;\n    while (1) {\n        $fib = fib($i);\n\
    \        if ( is_prime($fib) ) {\n            $count++;\n            if ( $count\
    \ == $n ) {\n                return $fib;\n            }\n        }\n        $i++;\n\
    \    }\n}", "    my $i = 0;\n    my $fib = 1;\n    my $fn_1 = 1;\n    my $fn_2\
    \ = 0;\n    while ($i != $n) {\n        if (is_prime($fib)) {\n            $i++;\n\
    \        }\n        my $tmp = $fib;\n        $fib = $fn_1 + $fn_2;\n        $fn_2\
    \ = $fn_1;\n        $fn_1 = $tmp;\n    }\n    return $fib;\n}", "    fib_memo(1);\n\
    \    my $i = 0;\n    for(my $j = 0; ; $j++) {\n        next unless is_prime(fib_memo($j));\n\
    \        $i++;\n        return fib_memo($j) if $i == $n;\n    }\n}", "    my $fib\
    \ = fibonacci($n);\n    while (!is_prime($fib)) {\n        $n++;\n        $fib\
    \ = fibonacci($n);\n    }\n    return $fib;\n}", "    my $fib = nth_fib($n);\n\
    \    while (!is_prime($fib)) {\n        $n += 1;\n        $fib = nth_fib($n);\n\
    \    }\n    return $fib;\n}", "    my @prime_fib = (2, 3);\n    my $i = 2;\n \
    \   while (1) {\n        my $fib = fib($i);\n        if (is_prime($fib)) {\n \
    \           push @prime_fib, $fib;\n        }\n        last if $#prime_fib + 1\
    \ == $n;\n        $i++;\n    }\n    return $prime_fib[$n - 1];\n}", "    if( $n\
    \ <= 0 ) {\n        return undef;\n    }", "    my $i = 1;\n    my $j = 1;\n \
    \   my $p = 2;\n    while ( $n ) {\n        $i += $j;\n        $j = $i - $j;\n\
    \        $p = $i if is_prime($i);\n        $n-- if $p == $i;\n    }\n    return\
    \ $p;\n}", "    if ($n < 1) {\n        return undef;\n    }\n    my $i = my $j\
    \ = 1;\n    my $k = 2;\n    $n--;\n    while ($n > 0) {\n        $k = $i + $j;\n\
    \        if (is_prime($k)) {\n            $n--;\n        }\n        $i = $j;\n\
    \        $j = $k;\n    }\n    return $k;\n}", "    my @F;\n    my @A;\n    my\
    \ $x;\n    $F[0] = 2;\n    $F[1] = 3;\n    $A[0] = 2;\n    $x = 2;\n    while\
    \ ($x < $n) {\n        $F[$x] = $F[$x-1] + $F[$x-2];\n        if (is_prime($F[$x]))\
    \ {\n            $A[$x] = $F[$x];\n            $x = $x + 1;\n        }\n    }\n\
    \    return $A[$n-1];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
