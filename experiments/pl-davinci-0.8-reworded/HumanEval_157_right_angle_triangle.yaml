name: HumanEval_157_right_angle_triangle
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return 1 if the three\n\
  # sides form a right-angled triangle, '' otherwise.\n# A right-angled triangle is\
  \ a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n#\
  \ >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
  # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
  \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $side = $a * $a + $b * $b;\n    if ($side == $c * $c) {\n  \
    \      return 1;\n    }\n    return \"\";\n}", "    my @sides = sort {$a <=> $b}\
    \ ($a, $b, $c);\n    return $sides[0]**2 + $sides[1]**2 == $sides[2]**2 ? 1 :\
    \ '';\n}", "    return \"\" if($a<=0 || $b<=0 || $c<=0);\n    # There are three\
    \ possible right triangles with $a, $b, $c as the sides.\n    my @triangles =\
    \ ([$a, $b, $c], [$a, $c, $b], [$b, $c, $a]);\n    my $right = 0;\n    foreach\
    \ my $triangle (@triangles) {\n        my($a, $b, $c) = @$triangle;\n        if($a*$a\
    \ + $b*$b == $c*$c) {\n            $right = 1;\n            last;\n        }\n\
    \    }\n    return $right;\n}", "    my $ret;\n    # Write your code here...\n\
    \    return $ret;\n}", "    my($result) = \"\";\n    if (($a * $a + $b * $b ==\
    \ $c * $c) ||\n        ($b * $b + $c * $c == $a * $a) ||\n        ($c * $c + $a\
    \ * $a == $b * $b)) {\n        $result = 1;\n    }\n    return $result;\n}", " \
    \   return 0 if ($a <= 0 || $b <= 0 || $c <= 0);\n    return 0 if ($a+$b < $c\
    \ || $a+$c < $b || $b+$c < $a);\n    # now check if the longest side is the largest\
    \ square of the other two\n    my $max = ($a>$b)?$a:$b;\n    $max = ($max>$c)?$max:$c;\n\
    \    if ($max == $a) {\n        return (($b*$b + $c*$c) == $a*$a)?1:0;\n    }\n\
    \    elsif ($max == $b) {\n        return (($a*$a + $c*$c) == $b*$b)?1:0;\n  \
    \  }\n    else {\n        return (($a*$a + $b*$b) == $c*$c)?1:0;\n    }\n}", " \
    \   my $x = ($a ** 2) + ($b ** 2);\n    my $y = $c ** 2;\n    if ($x == $y) {\n\
    \        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my\
    \ $result = \"\";\n    if ($a * $a + $b * $b == $c * $c || $b * $b + $c * $c ==\
    \ $a * $a ||\n        $c * $c + $a * $a == $b * $b) {\n        $result = 1;\n\
    \    }\n    return $result;\n}", "    return 1 if (($a ** 2) + ($b ** 2) == ($c\
    \ ** 2));\n    return 1 if (($b ** 2) + ($c ** 2) == ($a ** 2));\n    return 1\
    \ if (($c ** 2) + ($a ** 2) == ($b ** 2));\n    return;\n}", "    my($i, $j, $k);\n\
    \    my @sides = ($a, $b, $c);\n    @sides = sort{$a <=> $b} @sides;\n    ($i,\
    \ $j, $k) = @sides;\n    return $i**2 + $j**2 == $k**2 ? 1 : '';\n}", "    return\
    \ \"\" if ($a <= 0 || $b <= 0 || $c <= 0);\n    return 1 if ($a**2 + $b**2 ==\
    \ $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2);\n    return \"\"\
    ;\n}", "    my @s = sort {$a <=> $b} ($a, $b, $c);\n    return ($s[0]**2 + $s[1]**2\
    \ == $s[2]**2) ? 1 : '';\n}", "    my $side;\n    $side = $a if $a > $b && $a\
    \ > $c;\n    $side = $b if $b > $a && $b > $c;\n    $side = $c if $c > $a && $c\
    \ > $b;\n    return $side*$side == $a*$a + $b*$b + $c*$c - $side*$side;\n}", " \
    \   my $res = \"\";\n    # Write your code here\n    #------------------------------------------",
  "    my $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $rest = $sum\
    \ - $max;\n    if($max**2 == $rest**2) {\n        return 1;\n    } else {\n  \
    \      return \"\";\n    }\n}", "    # your code here\n}", "    # TODO: Complete\
    \ this function\n}", "    # TODO: Insert your code here!\n}", "    # check if\
    \ given numbers are \n    # 1) Positive Integers or not\n    # 2) All can be sides\
    \ of a triangle or not\n    return \"\" if (grep {! /^\\d+$/} @_); \n    return\
    \ \"\" if ($a + $b <= $c or $a + $c <= $b or $b + $c <= $a);\n    my $max = max($a,\
    \ $b, $c);\n    my $sum = sum($a, $b, $c);\n    # Check if it is a Right angled\
    \ triangle\n    if (($sum - $max)**2 == $max**2) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my $sum = $a*$a + $b*$b;\n    my $res\
    \ = $c*$c;\n    if ($sum == $res) {\n        return 1;\n    }\n    else {\n  \
    \      return '';\n    }\n}\n1;", "    my $max = ($a > $b) ? $a : $b;\n    my\
    \ $min = ($a < $b) ? $a : $b;\n    my $s = $min * $min + $max * $max;\n    my\
    \ $ret = ($s == $c * $c) ? 1 : '';\n    return $ret;\n}", "    return 1 if $a**2\
    \ + $b**2 == $c**2;\n    return 1 if $a**2 + $c**2 == $b**2;\n    return 1 if\
    \ $b**2 + $c**2 == $a**2;\n    return \"\";\n}", "    return 1 if $a*$a + $b*$b\
    \ == $c*$c;\n    return 1 if $a*$a + $c*$c == $b*$b;\n    return 1 if $b*$b +\
    \ $c*$c == $a*$a;\n    return '';\n}", "    # using the Pythagorean theorem to\
    \ check if the given 3 sides form a \n    # right-angled triangle.\n    return\
    \ ($a ** 2 + $b ** 2 == $c ** 2 || $a ** 2 + $c ** 2 == $b ** 2 ||\n         \
    \   $b ** 2 + $c ** 2 == $a ** 2) ? 1 : '';\n}", "    if (($a*$a == $b*$b + $c*$c)\
    \ or ($b*$b == $a*$a + $c*$c) or ($c*$c == $a*$a + $b*$b)) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my $a2 = $a ** 2;\n    my $b2 = $b ** 2;\n\
    \    my $c2 = $c ** 2;\n    if ($a2 + $b2 == $c2 || $a2 + $c2 == $b2 || $b2 +\
    \ $c2 == $a2) {\n        return 1;\n    }\n    return \"\";\n}", "    my $max\
    \ = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a + $b +\
    \ $c) - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}", "    my $result\
    \ = '';\n    if ( ($a**2 + $b**2 == $c**2) || ($b**2 + $c**2 == $a**2) || ($c**2\
    \ + $a**2 == $b**2) ) {\n        $result = 1;\n    }\n    return $result;\n}\n\
    1;", "    my $big;\n    my $big1;\n    my $big2;\n    if($a > $b){\n        $big\
    \ = $a;\n        $big1 = $b;\n    }\n    else{\n        $big = $b;\n        $big1\
    \ = $a;\n    }\n    if($big < $c){\n        $big2 = $big;\n        $big = $c;\n\
    \    }\n    else{\n        $big2 = $c;\n    }\n    if((($big ** 2) - (($big1 **\
    \ 2) + ($big2 ** 2))) == 0){\n        return 1;\n    }\n    else{\n        return\
    \ \"\";\n    }\n}", "    my $length = [$a, $b, $c];\n    my $s = $length->[0]*$length->[0]\
    \ + $length->[1]*$length->[1];\n    return 1 if $s == $length->[2]*$length->[2];\n\
    \    $s = $length->[1]*$length->[1] + $length->[2]*$length->[2];\n    return 1\
    \ if $s == $length->[0]*$length->[0];\n    $s = $length->[0]*$length->[0] + $length->[2]*$length->[2];\n\
    \    return 1 if $s == $length->[1]*$length->[1];\n    return \"\";\n}", "   \
    \ if ($a > $b) {\n        if ($a > $c) {\n            return $a*$a == $b*$b +\
    \ $c*$c;\n        } else {\n            return $c*$c == $a*$a + $b*$b;\n     \
    \   }\n    } else {\n        if ($b > $c) {\n            return $b*$b == $a*$a\
    \ + $c*$c;\n        } else {\n            return $c*$c == $a*$a + $b*$b;\n   \
    \     }\n    }\n}", "    my $hypotenuse = max($a, $b, $c);\n    my $leg = ($a\
    \ + $b + $c) - $hypotenuse;\n    $hypotenuse = $hypotenuse ** 2;\n    $leg = $leg\
    \ ** 2;\n    if ($hypotenuse == $leg) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    my $r = '';\n    my @s = sort {$a <=> $b} ($a, $b, $c);\n  \
    \  $r = 1 if $s[0] ** 2 + $s[1] ** 2 == $s[2] ** 2;\n    return $r;\n}", "   \
    \ if ($a**2 + $b**2 == $c**2 or $a**2 + $c**2 == $b**2 or $b**2 + $c**2 == $a**2)\
    \ {\n        return 1;\n    }\n    return '';\n}", "    my $right_angle = ($a**2\
    \ + $b**2) == $c**2;\n    return $right_angle ? 1 : '';\n}", "    # TODO: write\
    \ solution here\n    my $str = '';\n    my $c2 = $c*$c;\n    my $a2 = $a*$a;\n\
    \    my $b2 = $b*$b;\n    my $diff = $c2 - $a2 - $b2;\n    if ($diff == 0) {\n\
    \        $str = 1;\n    }\n    return $str;\n}", "    if ($a > $b && $a > $c)\
    \ {\n        if ($a**2 == $b**2 + $c**2) {\n            return 1;\n        }\n\
    \    } elsif ($b > $a && $b > $c) {\n        if ($b**2 == $a**2 + $c**2) {\n \
    \           return 1;\n        }\n    } elsif ($c > $a && $c > $b) {\n       \
    \ if ($c**2 == $a**2 + $b**2) {\n            return 1;\n        }\n    }\n   \
    \ return '';\n}", "    return ((($a * $a) + ($b * $b)) == ($c * $c)) ? 1 : '';\n\
    }", "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n    return ($sides[0] **\
    \ 2 + $sides[1] ** 2 == $sides[2] ** 2);\n}", "    return 0 if $a > $b + $c ||\
    \ $b > $a + $c || $c > $a + $b;\n    my @sides = sort {$a <=> $b} ($a, $b, $c);\n\
    \    my $hypotenuse = pop @sides;\n    return hypot($sides[0], $sides[1]) == $hypotenuse;\n\
    }", '    my $r;', '    my $max;', "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n\
    \    $sides[0]**2 + $sides[1]**2 == $sides[2]**2 ? return 1 : return '';\n}",
  "    my($m) = 0;\n    if ($a > $b) {\n        $m = $a;\n        $a = $b;\n     \
    \   $b = $m;\n    }\n    if ($b > $c) {\n        $m = $b;\n        $b = $c;\n\
    \        $c = $m;\n    }\n    return ($a*$a + $b*$b == $c*$c ? 1 : \"\");\n}",
  "    # Fill in code here\n    my @sorted_nums = sort {$a <=> $b} ($a, $b, $c);\n\
    \    if($sorted_nums[0]*$sorted_nums[0] + $sorted_nums[1]*$sorted_nums[1] == $sorted_nums[2]*$sorted_nums[2]){\n\
    \        return 1;\n    }\n    else{\n        return '';\n    }\n}", "    my $s;\n\
    \    if ($a > $b) {\n        $s = $a;\n        $a = $b;\n        $b = $s;\n  \
    \  }\n    if ($a > $c) {\n        $s = $a;\n        $a = $c;\n        $c = $s;\n\
    \    }\n    if ($b > $c) {\n        $s = $b;\n        $b = $c;\n        $c = $s;\n\
    \    }\n    if ($a**2 + $b**2 == $c**2) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    return \"\" if ($a <= 0 || $b <= 0 || $c <= 0);\n    my $longest\
    \ = ($a > $b) ? $a : $b;\n    $longest = $c if ($c > $longest);\n    my $sum =\
    \ $a + $b + $c;\n    return \"\" if ($sum < 2 * $longest);\n    if ($a == $b &&\
    \ $b == $c) {\n        return 1 if ($a == $c);\n    } elsif ($a == $b || $b ==\
    \ $c || $a == $c) {\n        return 1 if ($longest * $longest == $a * $a + $b\
    \ * $b + $c * $c);\n    } else {\n        return 1 if ($longest * $longest ==\
    \ $a * $a + $b * $b + $c * $c);\n    }\n    return \"\";\n}", "    return ($a\
    \ ** 2 + $b ** 2 == $c ** 2) ||\n           ($a ** 2 + $c ** 2 == $b ** 2) ||\n\
    \           ($b ** 2 + $c ** 2 == $a ** 2);\n}", '    # Your answer here', " \
    \   return 0 if ($a < 0 || $b < 0 || $c < 0);\n    my @l = sort {$a <=> $b} ($a,\
    \ $b, $c);\n    $l[0] * $l[0] + $l[1] * $l[1] == $l[2] * $l[2] ? 1 : 0;\n}", " \
    \   return 1 if $a ** 2 + $b ** 2 == $c ** 2;\n    return 1 if $a ** 2 + $c **\
    \ 2 == $b ** 2;\n    return 1 if $b ** 2 + $c ** 2 == $a ** 2;\n    return '';\n\
    }", "    my $csq = $c ** 2;\n    my $asq = $a ** 2;\n    my $bsq = $b ** 2;\n\
    \    if ($asq + $bsq == $csq) {\n        return 1;\n    } elsif ($asq + $csq ==\
    \ $bsq) {\n        return 1;\n    } elsif ($bsq + $csq == $asq) {\n        return\
    \ 1;\n    } else {\n        return '';\n    }\n}", "    if ($a ** 2 + $b ** 2\
    \ == $c ** 2) {\n        return 1;\n    } elsif ($a ** 2 + $c ** 2 == $b ** 2)\
    \ {\n        return 1;\n    } elsif ($b ** 2 + $c ** 2 == $a ** 2) {\n       \
    \ return 1;\n    } else {\n        return \"\";\n    }\n}", "    my $max;\n  \
    \  my $ac;\n    my $bc;\n    if ($a > $b) {\n        if ($a > $c) {\n        \
    \    $max = $a;\n            $ac = $b;\n            $bc = $c;\n        } else\
    \ {\n            $max = $c;\n            $ac = $a;\n            $bc = $b;\n  \
    \      }\n    } else {\n        if ($b > $c) {\n            $max = $b;\n     \
    \       $ac = $a;\n            $bc = $c;\n        } else {\n            $max =\
    \ $c;\n            $ac = $a;\n            $bc = $b;\n        }\n    }\n    return\
    \ $max * $max == $ac * $ac + $bc * $bc;\n}", "    # You code here!\n    if ($a\
    \ * $a + $b * $b == $c * $c){\n    \treturn 1;\n    }else{\n    \treturn '';\n\
    \    }\n}", "    #your code goes here\n}", "    my @s = sort {$a <=> $b} ($a,\
    \ $b, $c);\n    return 1 if $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n\
    \    return \"\";\n}", "    return $a ** 2 + $b ** 2 == $c ** 2;\n}", "    return\
    \ ($a**2 + $b**2 == $c**2) ? 1 : '';\n}", "    if ($a*$a + $b*$b == $c*$c) {\n\
    \        return 1;\n    }\n    return '';\n}", "    my $right_angled_triangle\
    \ = 1;\n    if($a >= $b) {\n        if($a >= $c) {\n            # $a is largest\n\
    \            if($a*$a == $b*$b + $c*$c) {\n                $right_angled_triangle\
    \ = 1;\n            } else {\n                $right_angled_triangle = \"\";\n\
    \            }\n        } else {\n            # $c is largest\n            if($c*$c\
    \ == $a*$a + $b*$b) {\n                $right_angled_triangle = 1;\n         \
    \   } else {\n                $right_angled_triangle = \"\";\n            }\n\
    \        }\n    } else {\n        if($b >= $c) {\n            # $b is largest\n\
    \            if($b*$b == $a*$a + $c*$c) {\n                $right_angled_triangle\
    \ = 1;\n            } else {\n                $right_angled_triangle = \"\";\n\
    \            }\n        } else {\n            # $c is largest\n            if($c*$c\
    \ == $a*$a + $b*$b) {\n                $right_angled_triangle = 1;\n         \
    \   } else {\n                $right_angled_triangle = \"\";\n            }\n\
    \        }\n    }\n    return $right_angled_triangle;\n}", "    # Return 1 if\
    \ the 3 sides form a right-angled triangle\n    # Write your code below\n    #\
    \ --------------------\n    my $result = \"\";\n    if($a*$a + $b*$b == $c*$c){\n\
    \        $result = 1;\n    }\n    else{\n        $result = \"\";\n    }\n    return\
    \ $result;\n    # --------------------\n}", "    return \"\" if ! $a || ! $b ||\
    \ ! $c;\n    if ($a > $b && $a > $c) {\n        if ($a ** 2 == $b ** 2 + $c **\
    \ 2) {\n            return 1;\n        }\n    } elsif ($b > $a && $b > $c) {\n\
    \        if ($b ** 2 == $a ** 2 + $c ** 2) {\n            return 1;\n        }\n\
    \    } elsif ($c > $a && $c > $b) {\n        if ($c ** 2 == $a ** 2 + $b ** 2)\
    \ {\n            return 1;\n        }\n    }\n    return \"\";\n}", "    my $a_sq\
    \ = $a * $a;\n    my $b_sq = $b * $b;\n    my $c_sq = $c * $c;\n    if (($a_sq\
    \ + $b_sq == $c_sq) || ($a_sq + $c_sq == $b_sq) || ($b_sq + $c_sq == $a_sq)) {\n\
    \        return 1;\n    }\n    return \"\";\n}", "    if ($a*$a + $b*$b == $c*$c)\
    \ {\n        return 1;\n    } else {\n        return '';\n    }\n}", "    my $r\
    \ = '';\n    my $result = ($a*$a + $b*$b == $c*$c or $a*$a + $c*$c == $b*$b or\
    \ $b*$b + $c*$c == $a*$a);\n    if ($result) { $r = 1; }\n    return $r;\n}",
  "    my($hyp, $pyth);\n    $pyth = 0;\n    $hyp = 0;\n    if ($a > $b && $a > $c)\
    \ {\n        $hyp = $a;\n        $pyth = $b * $b + $c * $c;\n    }\n    elsif\
    \ ($b > $a && $b > $c) {\n        $hyp = $b;\n        $pyth = $a * $a + $c * $c;\n\
    \    }\n    elsif ($c > $a && $c > $b) {\n        $hyp = $c;\n        $pyth =\
    \ $a * $a + $b * $b;\n    }\n    $hyp * $hyp == $pyth ? return 1 : return \"\"\
    ;\n}", "    my $max = 0;\n    my $p = ($a + $b + $c) / 2;\n    my $s = sqrt($p\
    \ * ($p - $a) * ($p - $b) * ($p - $c));\n    if($s != 0) {\n        if($a > $b\
    \ && $a > $c) {\n            $max = $a;\n        }elsif($b > $a && $b > $c) {\n\
    \            $max = $b;\n        }else {\n            $max = $c;\n        }\n\
    \        if($max ** 2 == $a ** 2 + $b ** 2 + $c ** 2 - $max ** 2) {\n        \
    \    return 1;\n        }\n    }\n    return '';\n}", "    if ( $a + $b > $c &&\
    \ $a + $c > $b && $b + $c > $a) {\n        return 1 if $a*$a + $b*$b == $c*$c;\n\
    \        return 1 if $a*$a + $c*$c == $b*$b;\n        return 1 if $b*$b + $c*$c\
    \ == $a*$a;\n    }\n    return '';\n}", "    my @l = sort {$a <=> $b} ($a, $b,\
    \ $c);\n    my $hypot = $l[2];\n    my $sum_sq_other_two = $l[0]**2 + $l[1]**2;\n\
    \    return $hypot**2 == $sum_sq_other_two;\n}", "    if ($a**2 + $b**2 == $c**2)\
    \ {\n        return 1;\n    } else {\n        return '';\n    }\n}", "    my @sides\
    \ = sort {$a <=> $b} ($a, $b, $c);\n    my $check = $sides[0] ** 2 + $sides[1]\
    \ ** 2;\n    return '' if $check != $sides[2] ** 2;\n    return 1;\n}", "    $a\
    \ ||= 0;\n    $b ||= 0;\n    $c ||= 0;\n    my @sides = sort {$a <=> $b} ($a,\
    \ $b, $c);\n    return 1 if $sides[0]**2 + $sides[1]**2 == $sides[2]**2;\n   \
    \ return \"\";\n}", "    # write code here\n}", "    my @sides = sort {$a <=>\
    \ $b} ($a, $b, $c);\n    return (($sides[0] * $sides[0]) + ($sides[1] * $sides[1])\
    \ == ($sides[2] * $sides[2])) ? 1 : \"\";\n}", "    my $max = max($a, $b, $c);\n\
    \    my $sum = $a + $b + $c;\n    my $s = $sum - $max;\n    return ($max * $max\
    \ == $s * $s) ? 1 : '';\n}", '    ($a, $b, $c) = sort {$a <=> $b} ($a, $b, $c);',
  "    my $tmp;\n    if ($a > $b) {\n        $tmp = $a;\n        $a = $b;\n      \
    \  $b = $tmp;\n    }\n    if ($a > $c) {\n        $tmp = $a;\n        $a = $c;\n\
    \        $c = $tmp;\n    }\n    if ($b > $c) {\n        $tmp = $b;\n        $b\
    \ = $c;\n        $c = $tmp;\n    }\n    return ($a ** 2 + $b ** 2 == $c ** 2)\
    \ ? 1 : '';\n}", "    if ($a > $b && $a > $c) {\n        if ($a * $a == $b * $b\
    \ + $c * $c) {\n            return 1;\n        }\n    } elsif ($b > $a && $b >\
    \ $c) {\n        if ($b * $b == $a * $a + $c * $c) {\n            return 1;\n\
    \        }\n    } elsif ($c > $a && $c > $b) {\n        if ($c * $c == $a * $a\
    \ + $b * $b) {\n            return 1;\n        }\n    }\n    return '';\n}", " \
    \   my $right = abs($a*$a + $b*$b - $c*$c) < 1e-12 ? 1 : \"\";\n    return $right;\n\
    }", "    if ($a ** 2 + $b ** 2 == $c ** 2) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    my $x = ($a * $a) + ($b * $b);\n    my $y = $c * $c;\n    if($x\
    \ == $y) {\n        return 1;\n    } else {\n        return '';\n    }\n}", " \
    \   my $result = \"\";\n    if ( (($a ** 2) + ($b ** 2)) == ($c ** 2) ) {\n  \
    \      $result = 1;\n    }\n    return $result;\n}", "    # if $a and $b form\
    \ a right angle with hypotenuse $c, then\n    # $a^2 + $b^2 = $c^2\n    return\
    \ (($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2))\
    \ ? 1 : \"\";\n}", "    my $x = \"\";\n    if ( $a >= 1 && $b >= 1 && $c >= 1\
    \ && ( $a + $b > $c ) && ( $a + $c > $b ) && ( $b + $c > $a ) ) {\n        if\
    \ ( ( $a * $a ) + ( $b * $b ) == ( $c * $c ) ) {\n            $x = 1;\n      \
    \  }\n    }\n    return $x;\n}", "    if (($a ** 2 + $b ** 2 == $c ** 2) or ($a\
    \ ** 2 + $c ** 2 == $b ** 2) or ($b ** 2 + $c ** 2 == $a ** 2)){\n        return\
    \ 1;\n    }\n    else {\n        return '';\n    }\n}", "    my $r;\n    if ($a\
    \ > $b && $a > $c) {\n        $r = ($a ** 2 == $b ** 2 + $c ** 2) ? 1 : \"\";\n\
    \    } elsif ($b > $a && $b > $c) {\n        $r = ($b ** 2 == $a ** 2 + $c **\
    \ 2) ? 1 : \"\";\n    } elsif ($c > $a && $c > $b) {\n        $r = ($c ** 2 ==\
    \ $a ** 2 + $b ** 2) ? 1 : \"\";\n    } else {\n        $r = \"\";\n    }\n  \
    \  return $r;\n}", "    return 0 if ($a <= 0 || $b <= 0 || $c <= 0);\n    my($x,\
    \ $y, $z) = sort {$a <=> $b} ($a, $b, $c);\n    my $x_square = $x * $x;\n    my\
    \ $y_square = $y * $y;\n    my $z_square = $z * $z;\n    if ($x_square + $y_square\
    \ == $z_square) {\n        return 1;\n    }\n    return \"\";\n}", "    ($a, $b,\
    \ $c) = sort {$a <=> $b} ($a, $b, $c);\n    return ($a * $a + $b * $b == $c *\
    \ $c);\n}", "    my($aa, $bb, $cc) = sort {$a <=> $b} ($a, $b, $c);\n    return\
    \ (($aa ** 2 + $bb ** 2) == $cc ** 2);\n}", "    # .....\n}", "    return '' if\
    \ $a == 0 || $b == 0 || $c == 0;\n    my $h = max($a, $b, $c);\n    my $s = sum($a,\
    \ $b, $c) - $h;\n    return $h ** 2 == $s ** 2 ? 1 : '';\n}", "    if (($a**2)\
    \ + ($b**2) == ($c**2)) {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    my $is_right_angle_triangle = \"\";\n    # check if each\
    \ side is greater than zero\n    if($a > 0 && $b > 0 && $c > 0) {\n        # check\
    \ if the sum of the square of any of the two sides is equal to\n        # the\
    \ square of the remaining side\n        if($a ** 2 + $b ** 2 == $c ** 2 || $a\
    \ ** 2 + $c ** 2 == $b ** 2 || $b ** 2 + $c ** 2 == $a ** 2) {\n            $is_right_angle_triangle\
    \ = 1;\n        }\n    }\n    return $is_right_angle_triangle;\n}", "    my $res\
    \ = sqrt($a * $a + $b * $b) == $c ? 1 : \"\";\n    return $res;\n}\nprint right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\nprint right_angle_triangle(1, 2, 3) . \"\\n\";\nprint right_angle_triangle(6,\
    \ 8, 10) . \"\\n\";", "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n    return\
    \ ($sides[0]**2 + $sides[1]**2 == $sides[2]**2) ? 1 : '';\n}", "    my $square\
    \ = sub { $_[0] ** 2 };\n    return \"\" if($a <= 0 || $b <= 0 || $c <= 0);\n\
    \    my ($max, $min1, $min2) = (sort { $b <=> $a } ($a, $b, $c))[0, 1, 2];\n \
    \   return \"\" if ($max <= 0);\n    return \"\" if ($square->($min1) + $square->($min2)\
    \ < $square->($max));\n    return 1;\n}", "    my($max) = max($a, $b, $c);\n \
    \   if ($max == $a) {\n        return $b ** 2 + $c ** 2 == $a ** 2;\n    } elsif\
    \ ($max == $b) {\n        return $a ** 2 + $c ** 2 == $b ** 2;\n    } else {\n\
    \        return $a ** 2 + $b ** 2 == $c ** 2;\n    }\n}", "    my $s1 = $a**2;\n\
    \    my $s2 = $b**2;\n    my $s3 = $c**2;\n    if ($s1 + $s2 == $s3 or $s1 + $s3\
    \ == $s2 or $s2 + $s3 == $s1) {\n        return 1;\n    }\n    return '';\n}",
  "    my $test = 0;\n    my @arr = sort {$a <=> $b} ($a, $b, $c);\n    $test = ($arr[0]\
    \ * $arr[0]) + ($arr[1] * $arr[1]);\n    if (($arr[2] * $arr[2]) == $test) {\n\
    \        return 1;\n    }\n    else {\n        return '';\n    }\n}", "    # This\
    \ should be the only line of your code in this subroutine.\n    # Please leave\
    \ off the \"return\" statement.\n    \n    \n    \n    \n}", "    $c = hypot($a,\
    \ $b) if $c == 0;\n    return 1 if (hypot($a, $b) == $c ||\n\t\t hypot($a, $c)\
    \ == $b ||\n\t\t hypot($b, $c) == $a);\n    return \"\";\n}", "    my $hypotenuse;\n\
    \    my $height;\n    my $base;\n    if ($a > $b && $a > $c) {\n        $hypotenuse\
    \ = $a;\n        $height = $b;\n        $base = $c;\n    }\n    elsif ($b > $a\
    \ && $b > $c) {\n        $hypotenuse = $b;\n        $height = $a;\n        $base\
    \ = $c;\n    }\n    else {\n        $hypotenuse = $c;\n        $height = $a;\n\
    \        $base = $b;\n    }\n    if ($hypotenuse**2 == $height**2 + $base**2)\
    \ {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", " \
    \   ($a ** 2 + $b ** 2 == $c ** 2) || ($a ** 2 + $c ** 2 == $b ** 2)\n       \
    \ || ($b ** 2 + $c ** 2 == $a ** 2)\n        ? return 1 : return '';\n}", "  \
    \  ($a, $b, $c) = sort {$a <=> $b} ($a, $b, $c);\n    if ($a + $b > $c) {\n  \
    \      if ($a * $a + $b * $b == $c * $c) {\n            return 1;\n        }\n\
    \    }\n    return \"\";\n}", "    $c > $a && $c > $b\n        && $a**2 + $b**2\
    \ == $c**2\n        and return 1;\n    return \"\";\n}", "    return ($a*$a +\
    \ $b*$b == $c*$c) || ($b*$b + $c*$c == $a*$a) || ($c*$c + $a*$a == $b*$b);\n}",
  "    my($aa, $bb, $cc);\n    if($a > $b) {\n        if($a > $c) {\n            $aa\
    \ = $a * $a;\n            $bb = $b * $b;\n            $cc = $c * $c;\n       \
    \ } else {\n            $aa = $c * $c;\n            $bb = $a * $a;\n         \
    \   $cc = $b * $b;\n        }\n    } else {\n        if($b > $c) {\n         \
    \   $aa = $b * $b;\n            $bb = $a * $a;\n            $cc = $c * $c;\n \
    \       } else {\n            $aa = $c * $c;\n            $bb = $a * $a;\n   \
    \         $cc = $b * $b;\n        }\n    }\n    if($aa == $bb + $cc) {\n     \
    \   return 1;\n    } else {\n        return '';\n    }\n}", "    if($a ** 2 +\
    \ $b ** 2 == $c ** 2) {\n        return 1;\n    } else {\n        return '';\n\
    \    }\n}", "    if ($a > $b) {\n        ($a, $b) = ($b, $a);\n    }\n    if ($b\
    \ > $c) {\n        ($b, $c) = ($c, $b);\n    }\n    if ($a > $b) {\n        ($a,\
    \ $b) = ($b, $a);\n    }\n    return ($a * $a + $b * $b == $c * $c) ? 1 : '';\n\
    }", "    my $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid\
    \ = $a + $b + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    return \"\" if ($a +\
    \ $b <= $c);\n    return \"\" if ($a + $c <= $b);\n    return \"\" if ($b + $c\
    \ <= $a);\n    my $max = $a;\n    $max = $b if ($b > $max);\n    $max = $c if\
    \ ($c > $max);\n    if ($max == $a) {\n        return ($b ** 2 + $c ** 2 == $a\
    \ ** 2) ? 1 : \"\";\n    } elsif ($max == $b) {\n        return ($a ** 2 + $c\
    \ ** 2 == $b ** 2) ? 1 : \"\";\n    } else {\n        return ($a ** 2 + $b **\
    \ 2 == $c ** 2) ? 1 : \"\";\n    }\n}", "    my @s = sort {$a <=> $b} ($a, $b,\
    \ $c);\n    return sqrt($s[0] * $s[0] + $s[1] * $s[1]) == $s[2];\n}", "    my\
    \ $side_a_square = $a ** 2;\n    my $side_b_square = $b ** 2;\n    my $side_c_square\
    \ = $c ** 2;\n    if ($side_a_square + $side_b_square == $side_c_square ||\n \
    \       $side_a_square + $side_c_square == $side_b_square ||\n        $side_b_square\
    \ + $side_c_square == $side_a_square) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    if($a**2 + $b**2 == $c**2) { return 1; }\n    if($a**2 + $c**2\
    \ == $b**2) { return 1; }\n    if($b**2 + $c**2 == $a**2) { return 1; }\n    return\
    \ '';\n}", "    return (($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) ||\
    \ ($b**2 + $c**2 == $a**2)) ? 1 : '';\n}", "    if ($a * $a + $b * $b == $c *\
    \ $c) {\n        return 1;\n    }\n    return '';\n}", "    my $res = '';\n  \
    \  if ( ($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2\
    \ == $a**2) ) {\n        $res = 1;\n    }\n    return $res;\n}", "    return ($a**2\
    \ + $b**2 == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2);\n}",
  "    return 1 if $a ** 2 + $b ** 2 == $c ** 2;\n    return 1 if $a ** 2 + $c **\
    \ 2 == $b ** 2;\n    return 1 if $b ** 2 + $c ** 2 == $a ** 2;\n    return '';\n\
    }", "    $c = sqrt($a*$a + $b*$b);\n    print \"$c\\n\";\n    return $c;\n}",
  "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n    my $s = $sides[2]**2 == $sides[0]**2\
    \ + $sides[1]**2;\n    return $s ? 1 : '';\n}", "    if ($a == 0 || $b == 0 ||\
    \ $c == 0) {\n        return '';\n    }\n    if (($a**2 + $b**2 == $c**2) || ($a**2\
    \ + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n        return 1;\n    }\n\
    \    return '';\n}", "    return 1 if ( (sqrt($a**2 + $b**2) == $c) || (sqrt($a**2\
    \ + $c**2) == $b) \n                    || (sqrt($b**2 + $c**2) == $a) );\n  \
    \  return '';\n}", "    if ($a**2 + $b**2 == $c**2) {\n        return 1;\n   \
    \ }\n    return '';\n}", "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n   \
    \ my $hyp = pop @sides;\n    if ($hyp * $hyp == $sides[0] * $sides[0] + $sides[1]\
    \ * $sides[1]) {\n        return 1;\n    }\n    return '';\n}", "    my $r = '';\n\
    \    if ($a > 0 && $b > 0 && $c > 0 && $a + $b > $c && $a + $c > $b && $b + $c\
    \ > $a) {\n        my $max = max($a, $b, $c);\n        my $min = min($a, $b, $c);\n\
    \        my $med = ($a + $b + $c) - $max - $min;\n        if ($max * $max == $min\
    \ * $min + $med * $med) {\n            $r = 1;\n        }\n    }\n    return $r;\n\
    }", "    # sqrt is int function.\n    return sqrt($a*$a + $b*$b) == $c ? 1 : \"\
    \";\n}", "    my $result = \"\";\n    my $hyp = sqrt(($a*$a) + ($b*$b));\n   \
    \ if ($hyp == $c) {\n        $result = 1;\n    }\n    return $result;\n}", " \
    \   my $max = max(max($a, $b), $c);\n    my $sum = $a + $b + $c;\n    return ($max\
    \ * $max) * 2 == $sum * $sum;\n}", "    # your code goes here\n    if ($a * $a\
    \ + $b * $b == $c * $c or $a * $a + $c * $c == $b * $b or $b * $b + $c * $c ==\
    \ $a * $a){\n        return 1;\n    }else{\n        return '';\n    }", "    return\
    \ sqrt($a ** 2 + $b ** 2) == $c ||\n           sqrt($a ** 2 + $c ** 2) == $b ||\n\
    \           sqrt($b ** 2 + $c ** 2) == $a;\n}", "    return \"\";\n}", "    my\
    \ $result = 0;\n    my $power = 2;\n    my $sum_of_squares = ($a ** $power) +\
    \ ($b ** $power);\n    my $c_square = $c ** $power;\n    if ($sum_of_squares ==\
    \ $c_square) {\n        $result = 1;\n    }\n    return $result;\n}", "    my\
    \ $result = \"\";\n    if ($a == sqrt($b*$b + $c*$c)\n            || $b == sqrt($a*$a\
    \ + $c*$c)\n            || $c == sqrt($a*$a + $b*$b)) {\n        $result = 1;\n\
    \    }\n    return $result;\n}", "    # find the length of the longest side\n\
    \    my $long = max($a, $b, $c);\n    # find the squares of the other two sides\n\
    \    my $short1 = min($a, $b, $c);\n    my $short2 = ($a + $b + $c) - $long -\
    \ $short1;\n    my $square = $short1 * $short1 + $short2 * $short2;\n    # return\
    \ 1 if the longest side is same as the\n    # the sum of the squares of the other\
    \ two sides,\n    # else return \"\"\n    if ($long * $long == $square) {\n  \
    \      return 1;\n    } else {\n        return \"\";\n    }\n}", "    my $hypotenuse\
    \ = $a;\n    my $leg1 = $b;\n    my $leg2 = $c;\n    if($hypotenuse < $leg1) {\n\
    \        $hypotenuse = $b;\n        $leg1 = $a;\n    } elsif($hypotenuse < $leg2)\
    \ {\n        $hypotenuse = $c;\n        $leg2 = $a;\n    }\n    if(($hypotenuse\
    \ ** 2) == ($leg1 ** 2) + ($leg2 ** 2)) {\n        return 1;\n    } else {\n \
    \       return '';\n    }\n}", "    my $max = max($a, $b, $c);\n    return ($max\
    \ * $max == $a * $a + $b * $b + $c * $c - $max * $max) ? 1 : '';\n}", "    my\
    \ @sides = sort {$a <=> $b} ($a, $b, $c);\n    if ($sides[0] + $sides[1] == $sides[2])\
    \ {\n        return 1;\n    }\n    return '';\n}", "    if($a == 0 or $b == 0\
    \ or $c == 0) {\n        return \"\";\n    }\n    if($a + $b > $c and $a + $c\
    \ > $b and $b + $c > $a) {\n        my $hypotenuse =  max(max($a, $b), $c);\n\
    \        if($hypotenuse == max($a, $b)) {\n            if($hypotenuse * $hypotenuse\
    \ == $a * $a + $b * $b) {\n                return 1;\n            }\n        }\n\
    \        elsif($hypotenuse == max($a, $c)) {\n            if($hypotenuse * $hypotenuse\
    \ == $a * $a + $c * $c) {\n                return 1;\n            }\n        }\n\
    \        elsif($hypotenuse == max($b, $c)) {\n            if($hypotenuse * $hypotenuse\
    \ == $b * $b + $c * $c) {\n                return 1;\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my $s = ($a + $b + $c) / 2;\n    my $area =\
    \ sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return $area if $a == sqrt($b**2\
    \ + $c**2)\n                 || $b == sqrt($a**2 + $c**2)\n                 ||\
    \ $c == sqrt($a**2 + $b**2);\n    return;\n}", "    my($sides) = [$a, $b, $c];\n\
    \    @$sides = sort {$a <=> $b} @$sides;\n    my($is_right_angle) = 0;\n    if\
    \ ($sides->[0] * $sides->[0] + $sides->[1] * $sides->[1] == $sides->[2] * $sides->[2])\
    \ {\n        $is_right_angle = 1;\n    }\n    return $is_right_angle;\n}", " \
    \   my @sides = sort {$a <=> $b} ($a, $b, $c);\n    return (@sides[0] ** 2 + @sides[1]\
    \ ** 2 == @sides[2] ** 2) ? 1 : '';\n}", "    my $x = ($a**2 + $b**2) == $c**2;\n\
    \    my $y = ($a**2 + $c**2) == $b**2;\n    my $z = ($b**2 + $c**2) == $a**2;\n\
    \    return $x || $y || $z;\n}", "    my @sides = sort{$a <=> $b} @_;\n    my\
    \ $hypotenuse = $sides[2];\n    my $leg1 = $sides[0];\n    my $leg2 = $sides[1];\n\
    \    return ($hypotenuse ** 2 == $leg1 ** 2 + $leg2 ** 2);\n}", "    my $r = \"\
    \";\n    # check if the three sides form a right-angled triangle\n    # your code\
    \ here...\n    if (($a*$a + $b*$b == $c*$c) || ($a*$a + $c*$c == $b*$b) || ($b*$b\
    \ + $c*$c == $a*$a)) {\n        $r = 1;\n    }\n    return $r;\n}", "    my @sides\
    \ = sort {$a <=> $b} ($a, $b, $c);\n    my $hyp = $sides[2];\n    my $adj = $sides[1];\n\
    \    my $opp = $sides[0];\n    my $result = 0;\n    if (($hyp ** 2) == (($adj\
    \ ** 2) + ($opp ** 2))) {\n        $result = 1;\n    }\n    return $result;\n}",
  "    $a ** 2 + $b ** 2 == $c ** 2 ? 1 : \"\";\n}", "    my($side_a, $side_b, $side_c);\n\
    \    if ($a > $b && $a > $c) {\n        ($side_a, $side_b, $side_c) = ($a, $b,\
    \ $c);\n    } elsif ($b > $a && $b > $c) {\n        ($side_a, $side_b, $side_c)\
    \ = ($b, $a, $c);\n    } else {\n        ($side_a, $side_b, $side_c) = ($c, $a,\
    \ $b);\n    }\n    return ($side_a**2 == $side_b**2 + $side_c**2) ? 1 : '';\n}",
  "    my @s = sort {$a <=> $b} ($a, $b, $c);\n    $s[0] * $s[0] + $s[1] * $s[1] ==\
    \ $s[2] * $s[2] ? 1 : '';\n}", "    my $rv = \"\";\n    if ( ($a > $b) && ($a\
    \ > $c) ) {\n        $rv = (($b ** 2) + ($c ** 2)) == ($a ** 2) ? 1 : \"\";\n\
    \    } elsif ( ($b > $a) && ($b > $c) ) {\n        $rv = (($a ** 2) + ($c ** 2))\
    \ == ($b ** 2) ? 1 : \"\";\n    } elsif ( ($c > $a) && ($c > $b) ) {\n       \
    \ $rv = (($a ** 2) + ($b ** 2)) == ($c ** 2) ? 1 : \"\";\n    }\n    return $rv;\n\
    }", "    my @s = sort {$a <=> $b} ($a, $b, $c);\n    return ($s[0] ** 2 + $s[1]\
    \ ** 2 == $s[2] ** 2);\n}", "    if (($a ** 2 + $b ** 2 == $c ** 2) ||\n     \
    \   ($a ** 2 + $c ** 2 == $b ** 2) ||\n        ($b ** 2 + $c ** 2 == $a ** 2))\
    \ {\n        return 1;\n    }\n    return '';\n}", "    if (($a*$a + $b*$b ==\
    \ $c*$c) || ($b*$b + $c*$c == $a*$a) ||\n        ($c*$c + $a*$a == $b*$b)) {\n\
    \        return 1;\n    }\n    return \"\";\n}", "    my $max = max($a, $b, $c);\n\
    \    my $sum = $a + $b + $c;\n    my $result = $sum - $max - max($a, $b);\n  \
    \  return $result == $max ? 1 : '';\n}", "    my $tmp = $a ** 2 + $b ** 2;\n \
    \   return 1 if $tmp == $c ** 2;\n    $tmp = $a ** 2 + $c ** 2;\n    return 1\
    \ if $tmp == $b ** 2;\n    $tmp = $b ** 2 + $c ** 2;\n    return 1 if $tmp ==\
    \ $a ** 2;\n    return '';\n}", "    my($out) = \"\";\n    if (($a**2 + $b**2\
    \ == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n     \
    \   $out = 1;\n    }\n    return $out;\n}", "    # TODO:\n    # 1. Write code\
    \ here to check if $a, $b, $c form a right-angled triangle\n    # 2. Return 1\
    \ if $a, $b, $c form a right-angled triangle\n    # 3. Return '' otherwise\n \
    \   if ($a**2 == $b**2 + $c**2){\n        return 1;\n    } elsif ($b**2 == $a**2\
    \ + $c**2){\n        return 1;\n    } elsif ($c**2 == $a**2 + $b**2){\n      \
    \  return 1;\n    } else {\n        return '';\n    }\n}", "    if ($a ** 2 +\
    \ $b ** 2 == $c ** 2 || $a ** 2 + $c ** 2 == $b ** 2 || $b ** 2 + $c ** 2 == $a\
    \ ** 2) {\n\treturn 1;\n    }\n    return '';\n}", "    return 1 if (pythagorean_triplet($a,\
    \ $b, $c));\n    return '';\n}", "    return \"1\" if ( ($a*$a + $b*$b) == ($c*$c)\
    \ ||\n        ($a*$a + $c*$c) == ($b*$b) ||\n        ($b*$b + $c*$c) == ($a*$a)\
    \ );\n    return \"\";\n}", "    my $valid = 0;\n    $valid = 1 if $a ** 2 + $b\
    \ ** 2 == $c ** 2;\n    $valid = 1 if $b ** 2 + $c ** 2 == $a ** 2;\n    $valid\
    \ = 1 if $c ** 2 + $a ** 2 == $b ** 2;\n    return $valid;\n}\nsay right_angle_triangle(3,\
    \ 4, 5);\nsay right_angle_triangle(1, 2, 3);", "    ($a, $b, $c) = sort {$a <=>\
    \ $b} ($a, $b, $c);\n    return 1 if $a * $a + $b * $b == $c * $c;\n    return\
    \ '';\n}", "    return ($a**2 + $b**2 == $c**2);\n}", "    my @sides = sort {$a\
    \ <=> $b} ($a, $b, $c);\n    return 0 if $sides[0] + $sides[1] <= $sides[2];\n\
    \    return 0 if $sides[0] + $sides[1] != $sides[2]**2;\n    return 1;\n}", " \
    \   my $ret;\n    if (($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a)) {\n\
    \        if (($a ** 2 + $b ** 2 == $c ** 2) ||\n            ($a ** 2 + $c ** 2\
    \ == $b ** 2) ||\n            ($b ** 2 + $c ** 2 == $a ** 2)) {\n            $ret\
    \ = 1;\n        }\n    }\n    return $ret;\n}", "    return '' if ($a + $b <=\
    \ $c);\n    return '' if ($a + $c <= $b);\n    return '' if ($b + $c <= $a);\n\
    \    if ( (($a ** 2) + ($b ** 2)) == ($c ** 2) ) {\n        return 1;\n    } elsif\
    \ ( (($a ** 2) + ($c ** 2)) == ($b ** 2) ) {\n        return 1;\n    } elsif (\
    \ (($b ** 2) + ($c ** 2)) == ($a ** 2) ) {\n        return 1;\n    } else {\n\
    \        return '';\n    }\n}", "    my($angle_a, $angle_b, $angle_c);\n    $angle_a\
    \ = right_angle_check($a, $b, $c);\n    $angle_b = right_angle_check($b, $a, $c);\n\
    \    $angle_c = right_angle_check($c, $a, $b);\n    return 1 if $angle_a || $angle_b\
    \ || $angle_c;\n    return;\n}", "    my @lens = ($a, $b, $c);\n    @lens = sort\
    \ {$a <=> $b} @lens;\n    my $hypotenuse = pop @lens;\n    my $sum = 0;\n    foreach\
    \ (@lens) {\n        $sum += $_ ** 2;\n    }\n    if ($sum == $hypotenuse ** 2)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    return _is_right_angle_triangle($a,\
    \ $b, $c) ||\n           _is_right_angle_triangle($a, $c, $b) ||\n           _is_right_angle_triangle($b,\
    \ $c, $a);\n}", "    return \"\" if !$a || !$b || !$c;\n    return ($a*$a + $b*$b\
    \ == $c*$c) ? 1 : \"\"\n}", "    if ($a > $b && $a > $c) {\n        if (($a**2)\
    \ == (($b**2) + ($c**2))) {\n            return 1;\n        }\n    } elsif ($b\
    \ > $a && $b > $c) {\n        if (($b**2) == (($a**2) + ($c**2))) {\n        \
    \    return 1;\n        }\n    } elsif ($c > $a && $c > $b) {\n        if (($c**2)\
    \ == (($a**2) + ($b**2))) {\n            return 1;\n        }\n    }\n    return\
    \ \"\";\n}", "    # TODO\n}", "    my($m, $n);\n    $m = $a * $a + $b * $b;\n\
    \    $n = $c * $c;\n    if ($m == $n) {\n        return 1;\n    } else {\n   \
    \     return \"\";\n    }\n}", "    my $max = max($a, $b, $c);\n    return ''\
    \ if $max == 0;\n    return 1 if $max * $max == $a * $a + $b * $b + $c * $c -\
    \ $max * $max;\n    return '';\n}", "    my $rt = \"\";\n    if (($a**2 == $b**2\
    \ + $c**2) or ($b**2 == $a**2 + $c**2) or ($c**2 == $a**2 + $b**2)) {\n      \
    \  $rt = 1;\n    }\n    return $rt;\n}", "    $a = $a**2;\n    $b = $b**2;\n \
    \   $c = $c**2;\n    # Pythagoras's theorem; Return 1 if the triangle is right\
    \ angled\n    if (($a + $b == $c) || ($a + $c == $b) || ($b + $c == $a)) { return\
    \ 1; }\n    else { return \"\"; }\n}", "    my $max = max($a, $b, $c);\n    my\
    \ $min = min($a, $b, $c);\n    my $mid = $a + $b + $c - $max - $min;\n    return\
    \ $max*$max == $min*$min + $mid*$mid;\n}", "    $a = 0 unless $a;\n    $b = 0\
    \ unless $b;\n    $c = 0 unless $c;\n    if (($a ** 2 + $b ** 2 == $c ** 2) ||\n\
    \        ($a ** 2 + $c ** 2 == $b ** 2) ||\n        ($b ** 2 + $c ** 2 == $a **\
    \ 2)) {\n        return 1;\n    }\n    return '';\n}", "    my $s = ($a+$b+$c)/2;\n\
    \    return $s > abs($a-$b)*abs($a-$b)+abs($a-$c)*abs($a-$c) &&\n           $s\
    \ > abs($b-$a)*abs($b-$a)+abs($b-$c)*abs($b-$c) &&\n           $s > abs($c-$a)*abs($c-$a)+abs($c-$b)*abs($c-$b);\n\
    }", "    if (($a ** 2) + ($b ** 2) == ($c ** 2)) {\n        return 1;\n    }\n\
    \    else {\n        return \"\";\n    }\n}", "    if ($a > $b && $a > $c) {\n\
    \        return ($a * $a == $b * $b + $c * $c);\n    } elsif ($b > $a && $b >\
    \ $c) {\n        return ($b * $b == $a * $a + $c * $c);\n    } else {\n      \
    \  return ($c * $c == $a * $a + $b * $b);\n    }\n}", "    if ((($a**2) + ($b**2))\
    \ == ($c**2)) {\n        return 1;\n    }\n    return '';\n}", "    my $max;\n\
    \    my $remain;\n    if ($a > $b && $a > $c) {\n        $max = $a;\n        $remain\
    \ = $b + $c;\n    }\n    elsif ($b > $a && $b > $c) {\n        $max = $b;\n  \
    \      $remain = $a + $c;\n    }\n    else {\n        $max = $c;\n        $remain\
    \ = $a + $b;\n    }\n    return ($max * $max == $remain * $remain) ? 1 : '';\n\
    }", "    my @s = sort {$a <=> $b} ($a, $b, $c);\n    return 1 if $s[0]**2 + $s[1]**2\
    \ == $s[2]**2;\n    return \"\";\n}", "    my($side1, $side2, $hypotenuse);\n\
    \    if (($a**2) < ($b**2)) {\n        $side1 = $a;\n        $side2 = $b;\n  \
    \  } else {\n        $side1 = $b;\n        $side2 = $a;\n    }\n    if (($side2**2)\
    \ < ($c**2)) {\n        $hypotenuse = $c;\n    } else {\n        $hypotenuse =\
    \ $side2;\n        $side2 = $c;\n    }\n    return $side1**2 + $side2**2 == $hypotenuse**2\
    \ ? 1 : \"\";\n}", "    if ($a * $a + $b * $b == $c * $c || $a * $a + $c * $c\
    \ == $b * $b ||\n        $b * $b + $c * $c == $a * $a) {\n        return 1;\n\
    \    }\n    return '';\n}", "    # ...\n}", "    my($t);\n    if ($a > $b) {\n\
    \        ($a, $b) = ($b, $a);\n    }\n    if ($a > $c) {\n        ($a, $c) = ($c,\
    \ $a);\n    }\n    if ($b > $c) {\n        ($b, $c) = ($c, $b);\n    }\n    $t\
    \ = $a ** 2 + $b ** 2 - $c ** 2;\n    return ($t == 0);\n}", "    my $s = ($a\
    \ + $b + $c) / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    my $l = $a;\n    if ($b > $l) { $l = $b; }\n    if ($c > $l) { $l = $c; }\n\
    \    return $area > 0 && abs($l**2 - ($a**2 + $b**2 + $c**2 - $l**2)) < 1E-6;\n\
    }", "    if ($a*$a + $b*$b == $c*$c) {\n        return 1;\n    }\n    elsif ($a*$a\
    \ + $c*$c == $b*$b) {\n        return 1;\n    }\n    elsif ($b*$b + $c*$c == $a*$a)\
    \ {\n        return 1;\n    }\n    else {\n        return '';\n    }\n}", "  \
    \  my $one = $a ** 2;\n    my $two = $b ** 2;\n    my $three = $c ** 2;\n    my\
    \ $is_right_angle_triangle = '';\n    if ($one == $two + $three || $two == $one\
    \ + $three || $three == $one + $two) {\n        $is_right_angle_triangle = 1;\n\
    \    }\n    return $is_right_angle_triangle;\n}", "    my $area = $a * $a + $b\
    \ * $b;\n    return $area == $c * $c ? 1 : '';\n}", "    my($max);\n    $max =\
    \ ($a > $b) ? $a : $b;\n    $max = ($max > $c) ? $max : $c;\n    my($sum) = ($a\
    \ + $b + $c) - $max;\n    if($max**2 == $sum**2) {\n        return 1;\n    }\n\
    \    return \"\";\n}", "    return ($a*$a + $b*$b == $c*$c || $a*$a + $c*$c ==\
    \ $b*$b || $b*$b + $c*$c == $a*$a) ? 1 : '';\n}", "    my $ans = ($a ** 2) + ($b\
    \ ** 2) == ($c ** 2) ? 1 : \"\";\n    return $ans;\n}", "    my($max) = max($a,\
    \ $b, $c);\n    my($min) = min($a, $b, $c);\n    my($middle) = ($a + $b + $c)\
    \ - $max - $min;\n    my($hypotenuse) = sqrt($max**2);\n    my($side) = sqrt($min**2\
    \ + $middle**2);\n    if($hypotenuse == $side) {\n        return 1;\n    }\n \
    \   return '';\n}", "    $a, $b, $c = sort {$a <=> $b} ($a, $b, $c);\n    return\
    \ \"\" if $a + $b <= $c;\n    $c = $c ** 2;\n    $a = $a ** 2;\n    $b = $b **\
    \ 2;\n    return 1 if $c == $a + $b;\n    return \"\";\n}", "    if ( $a > $b\
    \ ) { ($a, $b) = ($b, $a) }\n    if ( $b > $c ) { ($b, $c) = ($c, $b) }\n    if\
    \ ( $a > $b ) { ($a, $b) = ($b, $a) }\n    # Now $a <= $b <= $c\n    if ( $a*$a\
    \ + $b*$b == $c*$c ) { return 1 }\n    return '';\n}", "    my $max;\n    my $hyp;\n\
    \    if ($a >= $b && $a >= $c) {\n        $max = $a;\n        $hyp = $b**2 + $c**2;\n\
    \    }\n    elsif ($b >= $a && $b >= $c) {\n        $max = $b;\n        $hyp =\
    \ $a**2 + $c**2;\n    }\n    else {\n        $max = $c;\n        $hyp = $a**2\
    \ + $b**2;\n    }\n    $max == sqrt($hyp) ? 1 : '';\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
