name: HumanEval_157_right_angle_triangle
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return 1 if the three\n\
  # sides form a right-angled triangle,  otherwise.\n# A right-angled triangle is\
  \ a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n#\
  \ >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
  # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
  \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $r;\n    # YOUR CODE GOES HERE\n    if($a == sqrt($b**2 + $c**2)\
    \ || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2 + $b**2)){\n        $r = 1;\n\
    \    }else{\n        $r = \"\";\n    }\n    return $r;\n}", "    return if $a\
    \ < 0 || $b < 0 || $c < 0;\n    # All sides must be positive numbers\n    # When\
    \ the sum of the squares of two sides of a triangle is equal to the \n    # square\
    \ of the other side, we have a right-angled triangle.\n    if (($a**2 + $b**2\
    \ == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n     \
    \   return 1;\n    }\n    else {\n        return;\n    }\n}", "    my $sum_of_sq_a_b\
    \ = ($a * $a) + ($b * $b);\n    my $sq_c = $c * $c;\n    return ($sum_of_sq_a_b\
    \ == $sq_c) ? 1 : '';\n}", "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n \
    \   # $sides[0] + $sides[1] == $sides[2]\n    return $sides[0]**2 + $sides[1]**2\
    \ == $sides[2]**2 ? 1 : '';\n}", "    if (($a ** 2 + $b ** 2 == $c ** 2) || ($a\
    \ ** 2 + $c ** 2 == $b ** 2) || ($b ** 2 + $c ** 2 == $a ** 2)) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    $a = $a**2;\n    $b = $b**2;\n    $c =\
    \ $c**2;\n    my $is_right = 0;\n    if ($a + $b == $c){\n        $is_right =\
    \ 1;\n    }\n    elsif ($a + $c == $b){\n        $is_right = 1;\n    }\n    elsif\
    \ ($b + $c == $a){\n        $is_right = 1;\n    }\n    return $is_right;\n}",
  "    return 1 if (($a*$a + $b*$b) == ($c*$c));\n    return 1 if (($a*$a + $c*$c)\
    \ == ($b*$b));\n    return 1 if (($b*$b + $c*$c) == ($a*$a));\n    return \"\"\
    ;\n}", "    return 0 if $a == 0;\n    return 0 if $b == 0;\n    return 0 if $c\
    \ == 0;\n    return 0 if ($a >= $b + $c);\n    return 0 if ($b >= $a + $c);\n\
    \    return 0 if ($c >= $a + $b);\n    my $max = $a;\n    $max = $b if $b > $max;\n\
    \    $max = $c if $c > $max;\n    my $min = $a;\n    $min = $b if $b < $min;\n\
    \    $min = $c if $c < $min;\n    return sqrt($max ** 2) == ($min ** 2 + ($max\
    \ - $min) ** 2);\n}", "    my $hyp = max($a, $b, $c);\n    $a *= $a;\n    $b *=\
    \ $b;\n    $c *= $c;\n    if ($a + $b == $c or $a + $c == $b or $b + $c == $a)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    # Using pythagorean\
    \ theorem,\n    # c^2 = a^2 + b^2;\n    if ($c ** 2 == $a ** 2 + $b ** 2) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my($result)\
    \ = 0;\n    # Check if the triangle is right angled, update result accordingly.\n\
    \    # Your code here\n    if($a > 0 && $b > 0 && $c > 0){\n\t\tif(($a*$a == $b*$b\
    \ + $c*$c)||($b*$b == $a*$a + $c*$c)||($c*$c == $a*$a + $b*$b)){\n\t\t\t$result\
    \ = 1;\n\t\t}\n\t}\n    return $result;\n}", "    # TODO: Implement it\n    return\
    \ 0;\n}", "    my $res = 0;\n    if($a > 0 && $b > 0 && $c > 0) {\n        my\
    \ $max = max($a, $b, $c);\n        if($max ** 2 == ($a ** 2 + $b ** 2 + $c **\
    \ 2 - $max ** 2)) {\n            $res = 1;\n        }\n    }\n    return $res;\n\
    }", "    return unless $a > 0 && $b > 0 && $c > 0;\n    return 1 if $a == $b +\
    \ $c || $b == $a + $c || $c == $a + $b;\n    my $max = max($a, $b, $c);\n    my\
    \ $sum = $a + $b + $c;\n    my $hypo = $sum - $max;\n    return 1 if $max * $max\
    \ == $hypo * $hypo;\n    return;\n}", "    my $s = ($a+$b+$c)/2;\n    my $area\
    \ = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n    my $diff = abs($b**2 + $c**2 - $a**2);\n\
    \    return 1 if($diff < $area);\n    return \"\";\n}", "    $a ** 2 + $b ** 2\
    \ == $c ** 2 ? 1 : '';\n}", "    return ($a ** 2 + $b ** 2 == $c ** 2);\n}", '    # ',
  "    my $ok = 0;\n    if ($a*$a + $b*$b == $c*$c) {\n        $ok = 1;\n    } elsif\
    \ ($a*$a + $c*$c == $b*$b) {\n        $ok = 1;\n    } elsif ($b*$b + $c*$c ==\
    \ $a*$a) {\n        $ok = 1;\n    }\n    return $ok;\n}", "    return 0 if (($a\
    \ < 1) || ($b < 1) || ($c < 1));\n    return 1 if (($a**2 + $b**2 == $c**2)\n\
    \        || ($a**2 + $c**2 == $b**2)\n        || ($b**2 + $c**2 == $a**2));\n\
    \    return 0;\n}", "    my $result = \"\";\n    #\n    # Finds the greatest side\
    \ of the triangle\n    #\n    my $greatest_side = $a;\n    $greatest_side = $b\
    \ if $b > $greatest_side;\n    $greatest_side = $c if $c > $greatest_side;\n \
    \   #\n    # Uses the Pythagorean theorem to check for right angle triangle\n\
    \    #\n    if ($greatest_side == $a) {\n        if ($a * $a == $b * $b + $c *\
    \ $c) {\n            $result = 1;\n        }\n    } elsif ($greatest_side == $b)\
    \ {\n        if ($b * $b == $a * $a + $c * $c) {\n            $result = 1;\n \
    \       }\n    } elsif ($greatest_side == $c) {\n        if ($c * $c == $a * $a\
    \ + $b * $b) {\n            $result = 1;\n        }\n    } else {\n        $result\
    \ = \"\";\n    }\n    return $result;\n}", "    my $res = 1;\n    if ((($a **\
    \ 2) + ($b ** 2)) != ($c ** 2)) {\n        $res = '';\n    }\n    return $res;\n\
    }", "    if($a > $b) {\n        ($a, $b) = ($b, $a);\n    }\n    if($b > $c) {\n\
    \        ($b, $c) = ($c, $b);\n    }\n    if($a > $b) {\n        ($a, $b) = ($b,\
    \ $a);\n    }\n    return 1 if $a ** 2 + $b ** 2 == $c ** 2;\n    return 0;\n}",
  "    my($max) = ($a, $b, $c)[0, 1, 2][0, 1, 2][0, 1, 2];\n    my($min1) = ($a, $b,\
    \ $c)[0, 1, 2][0, 1, 2][0, 1, 2];\n    my($min2) = ($a, $b, $c)[0, 1, 2][0, 1,\
    \ 2][0, 1, 2];\n    return 0 if $min1 + $min2 <= $max;\n    if ($max == $a) {\n\
    \        return 1 if $min1 * $min1 + $min2 * $min2 == $max * $max;\n    } elsif\
    \ ($max == $b) {\n        return 1 if $min1 * $min1 + $min2 * $min2 == $max *\
    \ $max;\n    } elsif ($max == $c) {\n        return 1 if $min1 * $min1 + $min2\
    \ * $min2 == $max * $max;\n    }\n    return 0;\n}", "    if ($a > $b) {\n   \
    \     ($a, $b) = ($b, $a);\n    }\n    if ($b > $c) {\n        ($b, $c) = ($c,\
    \ $b);\n    }\n    if ($a > $b) {\n        ($a, $b) = ($b, $a);\n    }\n    return\
    \ $a**2 + $b**2 == $c**2;\n}", "    my $result = 0;\n    my @sorted = sort {$a\
    \ <=> $b} ($a, $b, $c);\n    $result = 1 if $sorted[0]**2 + $sorted[1]**2 == $sorted[2]**2;\n\
    \    return $result;\n}", "    # right angle triangle\n    if ($a**2 + $b**2 ==\
    \ $c**2) {\n        return 1;\n    }\n    # right angle triangle\n    if ($a**2\
    \ + $c**2 == $b**2) {\n        return 1;\n    }\n    # right angle triangle\n\
    \    if ($b**2 + $c**2 == $a**2) {\n        return 1;\n    }\n    return '';\n\
    }", "    if ($a**2 + $b**2 == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2\
    \ == $a**2) {\n        return 1;\n    }\n    return '';\n}", "    return 1 if\
    \ ($a * $a + $b * $b == $c * $c);\n    return 1 if ($a * $a + $c * $c == $b *\
    \ $b);\n    return 1 if ($b * $b + $c * $c == $a * $a);\n    return \"\";\n}",
  "    if (($a**2) + ($b**2) == ($c**2)) {\n        return 1;\n    } else {\n    \
    \    return \"\";\n    }\n}", "    my($x, $y, $z);\n    if ($a > $b) {\n     \
    \   if ($a > $c) {\n            $x = $a;\n            $y = $b;\n            $z\
    \ = $c;\n        } else {\n            $x = $c;\n            $y = $a;\n      \
    \      $z = $b;\n        }\n    } else {\n        if ($b > $c) {\n           \
    \ $x = $b;\n            $y = $a;\n            $z = $c;\n        } else {\n   \
    \         $x = $c;\n            $y = $b;\n            $z = $a;\n        }\n  \
    \  }\n    my $sq = $x * $x;\n    my $sq_y = $y * $y;\n    my $sq_z = $z * $z;\n\
    \    return $sq_y + $sq_z == $sq;\n}", "    my $max = max($a, $b, $c);\n    my\
    \ $sum = $a + $b + $c;\n    if ($sum == 2 * $max) {\n        return 1;\n    }\n\
    \    return '';\n}", "    # Implement your solution here\n    return 0;\n}", " \
    \   # Replace next line with code\n    return 1;\n}", "    if ($a**2 + $b**2 ==\
    \ $c**2 ||\n        $a**2 + $c**2 == $b**2 ||\n        $b**2 + $c**2 == $a**2)\
    \ {\n        return 1;\n    }\n    return '';\n}", "    return ($a**2 + $b**2\
    \ == $c**2) ||\n           ($b**2 + $c**2 == $a**2) ||\n           ($c**2 + $a**2\
    \ == $b**2);\n}", "    my $sign = $a <=> $b;\n    if ($sign == 0) {\n        return\
    \ 0;\n    }\n    my $c_square = $c ** 2;\n    my $b_square = $b ** 2;\n    my\
    \ $a_square = $a ** 2;\n    if (($a_square + $b_square == $c_square) ||\n    \
    \    ($b_square + $c_square == $a_square) ||\n        ($c_square + $a_square ==\
    \ $b_square)) {\n        return 1;\n    }\n    return 0;\n}", "    my $sum = 0;\n\
    \    $sum += $_**2 for $a, $b, $c;\n    return sqrt($sum);\n}", "    my @sides\
    \ = sort {$a <=> $b} ($a, $b, $c);\n    if ($sides[0]**2 + $sides[1]**2 == $sides[2]**2)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    $a = int($a);\n    $b\
    \ = int($b);\n    $c = int($c);\n    if ( $a <= 0 || $b <= 0 || $c <= 0 ) {\n\
    \        return \"\";\n    }\n    if ( $a + $b > $c && $a + $c > $b && $b + $c\
    \ > $a ) {\n        if ( $a * $a + $b * $b == $c * $c ||\n                $a *\
    \ $a + $c * $c == $b * $b ||\n                $b * $b + $c * $c == $a * $a ) {\n\
    \            return 1;\n        }\n    }\n    return \"\";\n}", "    my $result\
    \ = 0;\n    my $right_angle = 0;\n    my $equal_angle = 0;\n    if ($a > $b &&\
    \ $a > $c) {\n        $right_angle = $a;\n        $equal_angle = $b + $c;\n  \
    \  } elsif ($b > $a && $b > $c) {\n        $right_angle = $b;\n        $equal_angle\
    \ = $a + $c;\n    } elsif ($c > $a && $c > $b) {\n        $right_angle = $c;\n\
    \        $equal_angle = $a + $b;\n    }\n    if ($right_angle**2 == $equal_angle**2)\
    \ {\n        $result = 1;\n    } else {\n        $result = 0;\n    }\n    return\
    \ $result;\n}", "    if ($a > $b && $a > $c) {\n        if (($a * $a) == (($b\
    \ * $b) + ($c * $c))) {\n            return 1;\n        }\n    }\n    elsif ($b\
    \ > $a && $b > $c) {\n        if (($b * $b) == (($a * $a) + ($c * $c))) {\n  \
    \          return 1;\n        }\n    }\n    elsif ($c > $a && $c > $b) {\n   \
    \     if (($c * $c) == (($a * $a) + ($b * $b))) {\n            return 1;\n   \
    \     }\n    }\n    return \"\";\n}", "    my $right = 0;\n    my @sides = sort\
    \ {$a <=> $b} ($a, $b, $c);\n    if ( $sides[0] * $sides[0] + $sides[1] * $sides[1]\
    \ == $sides[2] * $sides[2] ) {\n        $right = 1;\n    }\n    return $right;\n\
    }", "    my $r = 0;\n    if ( ! (($a < 1) || ($b < 1) || ($c < 1)) && ! (($a >\
    \ 100) || ($b > 100) || ($c > 100)) ){\n        $r = 1 if ((($a ** 2) + ($b **\
    \ 2)) == ($c ** 2));\n        $r = 1 if ((($b ** 2) + ($c ** 2)) == ($a ** 2));\n\
    \        $r = 1 if ((($c ** 2) + ($a ** 2)) == ($b ** 2));\n    }\n    return\
    \ $r;\n}", "    # (($a ** 2) + ($b ** 2)) == ($c ** 2) ? 1 : \"\";\n    $a **\
    \ 2 + $b ** 2 == $c ** 2 ? 1 : \"\";\n}", "    my $longest_side = max($a, $b,\
    \ $c);\n    my $r = $longest_side ** 2 == $a ** 2 + $b ** 2 + $c ** 2 - $longest_side\
    \ ** 2;\n    return $r;\n}", "    my $res = 0;\n    $res = 1 if ($a * $a + $b\
    \ * $b == $c * $c);\n    $res = 1 if ($a * $a + $c * $c == $b * $b);\n    $res\
    \ = 1 if ($b * $b + $c * $c == $a * $a);\n    return $res;\n}", "    # TODO: implement\
    \ this function\n    my $s = ($a+$b+$c)/2;\n    my $area = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n\
    \    my $max = $a;\n    $max = $b if ($b > $max);\n    $max = $c if ($c > $max);\n\
    \    if (abs($max - sqrt($a*$a + $b*$b + $c*$c - 2*$max*($a+$b+$c-$max))) < 0.000001)\
    \ {\n        return 1;\n    }\n    return 0;\n}", "    my $r = 0;\n    if (($a**2\
    \ + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n\
    \        $r = 1;\n    }\n    return $r;\n}", "    if ($a > $b && $a > $c) {\n\
    \        if ($a * $a == $b * $b + $c * $c) {\n            return 1;\n        }\n\
    \    }\n    elsif ($b > $a && $b > $c) {\n        if ($b * $b == $a * $a + $c\
    \ * $c) {\n            return 1;\n        }\n    }\n    elsif ($c > $a && $c >\
    \ $b) {\n        if ($c * $c == $a * $a + $b * $b) {\n            return 1;\n\
    \        }\n    }\n    return \"\";\n}", "    my $length = sqrt($a*$a + $b*$b);\n\
    \    return $length == $c ? 1 : \"\";\n}", "    # validate input\n    if ($a <=\
    \ 0 || $b <= 0 || $c <= 0) {\n        return 0;\n    }", "    my($x, $y, $z);\n\
    \    if ($a > $b) {\n        if ($a > $c) {\n            $x = $a;\n          \
    \  $y = $b;\n            $z = $c;\n        } else {\n            $x = $c;\n  \
    \          $y = $a;\n            $z = $b;\n        }\n    } else {\n        if\
    \ ($b > $c) {\n            $x = $b;\n            $y = $a;\n            $z = $c;\n\
    \        } else {\n            $x = $c;\n            $y = $b;\n            $z\
    \ = $a;\n        }\n    }\n    my $answer = $x * $x == $y * $y + $z * $z ? 1 :\
    \ '';\n    return $answer;\n}", "    # Check if the sides of the triangle is greater\
    \ than zero.\n    if ($a <= 0 || $b <= 0 || $c <= 0) {\n        return \"\";\n\
    \    }\n    # Area of the triangle.\n    my $area = ($a + $b + $c) / 2;\n    my\
    \ $area_square = $area * ($area - $a) * ($area - $b) * ($area - $c);\n    # Checking\
    \ for a right-angled triangle.\n    if ($area_square > 0) {\n        # If the\
    \ triangle is a right-angled triangle.\n        my $first_side = ($b * $b) + ($c\
    \ * $c);\n        my $second_side = ($a * $a) + ($c * $c);\n        my $third_side\
    \ = ($a * $a) + ($b * $b);\n        if ($first_side == ($a * $a) || $second_side\
    \ == ($b * $b) || $third_side == ($c * $c)) {\n            return 1;\n       \
    \ }\n    }\n    return \"\";\n}", "    return(0) if( ($a <= 0) || ($b <= 0) ||\
    \ ($c <= 0) );\n    my $n = $a + $b + $c;\n    my $ma = $a;\n    $ma = $b if($b\
    \ > $ma);\n    $ma = $c if($c > $ma);\n    my $mi = $a;\n    $mi = $b if($b <\
    \ $mi);\n    $mi = $c if($c < $mi);\n    my $mi2 = $n - $ma - $mi;\n    my $d\
    \ = $ma*$ma - $mi*$mi - $mi2*$mi2;\n    return(0) if($d > 0);\n    return(1) if($d\
    \ == 0);\n    return(-1) if($d < 0);\n}", "    my $ret = 0;\n    my @sides = sort\
    \ {$a <=> $b} ($a, $b, $c);\n    if ($sides[0]*$sides[0] + $sides[1]*$sides[1]\
    \ == $sides[2]*$sides[2]) {\n        $ret = 1;\n    }\n    return $ret;\n}", " \
    \   my $m = max($a, $b, $c);\n    my $n = $a + $b + $c - $m;\n    return $m**2\
    \ == $n**2 + $m**2;\n}", "    my $max = max($a, $b, $c);\n    my $sum = $a + $b\
    \ + $c;\n    if($max * $max == $sum - $max) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    ($a, $b, $c) = sort {$a <=> $b} ($a, $b, $c);\n    return (($a**2\
    \ + $b**2) == $c**2);\n}", "    return 0 if $a <= 0 or $b <= 0 or $c <= 0;\n \
    \   return 1 if abs($a*$a + $b*$b - $c*$c) <= 0.001;\n    return 1 if abs($b*$b\
    \ + $c*$c - $a*$a) <= 0.001;\n    return 1 if abs($c*$c + $a*$a - $b*$b) <= 0.001;\n\
    \    return \"\";\n}", "    my $rv = 0;\n    # Here be code\n    return $rv;\n\
    }", "    return \"\" if ($a == 0 || $b == 0 || $c == 0);\n    if (   (($a ** 2)\
    \ + ($b ** 2)) == ($c ** 2) \n        || (($a ** 2) + ($c ** 2)) == ($b ** 2)\n\
    \        || (($b ** 2) + ($c ** 2)) == ($a ** 2) ) {\n        return 1;\n    }\n\
    \    return \"\";\n}", "    return \n    # Write your code here\n}", "    return\
    \ 0 if $a <= 0 || $b <= 0 || $c <= 0;\n    # let $a be the length of the hypotenuse\n\
    \    if($a * $a > $b * $b + $c * $c) {\n        ($a, $b, $c) = ($b, $c, $a);\n\
    \    }\n    if($a * $a > $b * $b + $c * $c) {\n        ($a, $b, $c) = ($b, $c,\
    \ $a);\n    }\n    if($a * $a > $b * $b + $c * $c) {\n        return 0;\n    }\n\
    \    return 1;\n}", "    my @lengths = sort {$a <=> $b} ($a, $b, $c);\n    my\
    \ $hyp = pop @lengths;\n    $hyp * $hyp == $lengths[0] * $lengths[0] + $lengths[1]\
    \ * $lengths[1];\n}", '    ($a, $b, $c) = sort {$a <=> $b} ($a, $b, $c);', " \
    \   my $ret = \"\";\n    # your code here\n    return $ret;\n}", "    return 1\
    \ if $a**2 == $b**2 + $c**2;\n    return 1 if $b**2 == $a**2 + $c**2;\n    return\
    \ 1 if $c**2 == $a**2 + $b**2;\n    return \"\";\n}", "    return (($a ** 2 +\
    \ $b ** 2 == $c ** 2) ||\n            ($a ** 2 + $c ** 2 == $b ** 2) ||\n    \
    \        ($b ** 2 + $c ** 2 == $a ** 2)) ? 1 : '';\n}", "    # a^2 + b^2 = c^2\n\
    \    return (($a ** 2) + ($b ** 2) == ($c ** 2)) ? 1 : \"\";\n}", "    my @arr\
    \ = sort {$a <=> $b} ($a, $b, $c);\n    my ($x, $y, $z) = @arr;\n    my $test\
    \ = ($x ** 2) + ($y ** 2);\n    return $test == ($z ** 2) ? 1 : \"\";\n}", " \
    \   return ($a * $a + $b * $b == $c * $c) ? 1 : \"\";\n}", "    # Given a triangle\
    \ where a*a + b*b = c*c \n    return $a*$a + $b*$b == $c*$c ? 1 : \"\";\n}", " \
    \   my @arr = sort {$a <=> $b} ($a, $b, $c);\n    my $sum = $arr[0] * $arr[0]\
    \ + $arr[1] * $arr[1];\n    return $sum == $arr[2] * $arr[2];\n}", "    return\
    \ 1 if $a*$a + $b*$b == $c*$c;\n    return 1 if $a*$a + $c*$c == $b*$b;\n    return\
    \ 1 if $b*$b + $c*$c == $a*$a;\n    return \"\";\n}", "    return $a*$a + $b*$b\
    \ == $c*$c ? 1 : \"\";\n}", "    # TODO \n}", "    if ( $a > $b && $a > $c ) {\n\
    \        return ($a**2 == $b**2 + $c**2);\n    } elsif ( $b > $a && $b > $c )\
    \ {\n        return ($b**2 == $a**2 + $c**2);\n    } else {\n        return ($c**2\
    \ == $a**2 + $b**2);\n    }\n}", "    ($a**2 + $b**2 == $c**2) ? 1 : \"\";\n}",
  "    # The sides of a right-angled triangle is always in the form of Pythagorean\
    \ \n    # triplet, i.e. a^2 + b^2 = c^2.\n    my $c2 = $c * $c;\n    my $a2 =\
    \ $a * $a;\n    my $b2 = $b * $b;\n    if($a2 + $b2 == $c2) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    # your code goes here\n}", "    my $r\
    \ = right_angle_triangle_ex($a, $b, $c);\n    return $r ? 1 : \"\";\n}", "   \
    \ $a ** 2 + $b ** 2 == $c ** 2\n}", "    $a = $a ** 2;\n    $b = $b ** 2;\n  \
    \  $c = $c ** 2;\n    if (($a + $b == $c) || ($a + $c == $b) || ($b + $c == $a))\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my($hyp) = 0;\n    my($pyth)\
    \ = 0;\n    if($a > $b) {\n        if($a > $c) {\n            $hyp = $a * $a;\n\
    \            $pyth = $b * $b + $c * $c;\n        } else {\n            $hyp =\
    \ $c * $c;\n            $pyth = $a * $a + $b * $b;\n        }\n    } else {\n\
    \        if($b > $c) {\n            $hyp = $b * $b;\n            $pyth = $a *\
    \ $a + $c * $c;\n        } else {\n            $hyp = $c * $c;\n            $pyth\
    \ = $a * $a + $b * $b;\n        }\n    }\n    return $hyp == $pyth;\n}", "   \
    \ return $a * $a + $b * $b == $c * $c;\n}", "    my @p = sort {$a <=> $b} ($a,\
    \ $b, $c);\n    my $r = 0;\n    if ($p[0] ** 2 + $p[1] ** 2 == $p[2] ** 2) {\n\
    \        $r = 1;\n    }\n    return $r;\n}", "    my $result = 0;\n    if($a <\
    \ $b){\n        my $a_tmp = $a;\n        $a = $b;\n        $b = $a_tmp;\n    }\n\
    \    if($a < $c){\n        my $a_tmp = $a;\n        $a = $c;\n        $c = $a_tmp;\n\
    \    }\n    if($b < $c){\n        my $b_tmp = $b;\n        $b = $c;\n        $c\
    \ = $b_tmp;\n    }\n    if(($a**2) == (($b**2) + ($c**2))){\n        $result =\
    \ 1;\n    }\n    return $result;\n}", "    my $r = 0;\n    if ($a > 0 && $b >\
    \ 0 && $c > 0 && $a < $b + $c && $b < $a + $c && $c < $a + $b) {\n        my @s\
    \ = sort {$a <=> $b} ($a, $b, $c);\n        $r = 1 if $s[0] ** 2 + $s[1] ** 2\
    \ == $s[2] ** 2;\n    }\n    return $r;\n}", "    my $check = (($a ** 2) + ($b\
    \ ** 2)) - ($c ** 2);\n    return ($check == 0) ? 1 : 0;\n}", "    return unless\
    \ ($a > 0 and $b > 0 and $c > 0);\n    return 1 if ($a**2 + $b**2 == $c**2);\n\
    \    return 1 if ($a**2 + $c**2 == $b**2);\n    return 1 if ($b**2 + $c**2 ==\
    \ $a**2);\n    return;\n}", "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n\
    \    if ( $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2 ) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    return 0 if $a == 0 || $b == 0 || $c ==\
    \ 0;\n    my $max = max($a, $b, $c);\n    my @sides = ($a, $b, $c);\n    @sides\
    \ = splice(@sides, index(@sides, $max), 1);\n    return 1 if int(sqrt($sides[0]\
    \ ** 2 + $sides[1] ** 2)) == $max;\n    return 0;\n}", "    my $result = \"\"\
    ;\n    if ($a < 0 || $b < 0 || $c < 0) {\n        $result = \"\";\n    }\n   \
    \ elsif ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        if ($a == sqrt($b\
    \ * $b + $c * $c) || $b == sqrt($a * $a + $c * $c) || $c == sqrt($a * $a + $b\
    \ * $b)) {\n            $result = 1;\n        }\n        else {\n            $result\
    \ = \"\";\n        }\n    }\n    else {\n        $result = \"\";\n    }\n    return\
    \ $result;\n}", "    if ($a**2 + $b**2 == $c**2) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    if ($a ** 2 + $b ** 2 == $c ** 2) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    if ($a**2\
    \ + $b**2 == $c**2) {\n        return 1;\n    } else {\n        return '';\n \
    \   }\n}", "    $a > 0 && $b > 0 && $c > 0 or return '';\n    ($a + $b > $c &&\
    \ $a + $c > $b && $b + $c > $a) or return '';\n    ($a**2 + $b**2 == $c**2 ||\
    \ $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) \n}", "    return 1 if ($a\
    \ ** 2 + $b ** 2 == $c ** 2);\n    return 1 if ($a ** 2 + $c ** 2 == $b ** 2);\n\
    \    return 1 if ($b ** 2 + $c ** 2 == $a ** 2);\n    return \"\";\n}", "    my($m)\
    \ = 0;\n    my($t) = 0;\n    my($max) = $a;\n    if($b > $max) {\n        $max\
    \ = $b;\n    }\n    if($c > $max) {\n        $max = $c;\n    }\n    if($max ==\
    \ $a) {\n        $m = $b * $b + $c * $c;\n        $t = $a * $a;\n    }\n    elsif($max\
    \ == $b) {\n        $m = $a * $a + $c * $c;\n        $t = $b * $b;\n    }\n  \
    \  elsif($max == $c) {\n        $m = $a * $a + $b * $b;\n        $t = $c * $c;\n\
    \    }\n    if($m == $t) {\n        return 1;\n    }\n    else {\n        return\
    \ 0;\n    }\n}", "    if ($a ** 2 + $b ** 2 == $c ** 2) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    if ( $a**2 + $b**2 == $c**2 ) {\n\treturn 1;\n\
    \    } else {\n\treturn \"\";\n    }\n}", "    my $a2 = $a * $a;\n    my $b2 =\
    \ $b * $b;\n    my $c2 = $c * $c;\n    my $max = $a2 > $b2 ? $a2 : $b2;\n    $max\
    \ = $max > $c2 ? $max : $c2;\n    return $max == $a2 + $b2 ? 1 : $max == $a2 +\
    \ $c2 ? 1 : $max == $b2 + $c2 ? 1 : 0;\n}", "    if ($a && $b && $c) {\n     \
    \   # For a triangle to be valid, the sum of all 3 sides must be greater than\n\
    \        # the longest side.\n        if (($a + $b + $c) > $c) {\n           \
    \ # Right angle can be found using Pythagoras' theorem:\n            # a^2 + b^2\
    \ = c^2\n            my $length = ($a ** 2) + ($b ** 2);\n            my $hypotenuse\
    \ = $c ** 2;\n            if ($length == $hypotenuse) {\n                return\
    \ 1;\n            }\n        }\n    }\n    return;\n}", "    if ($a**2 + $b**2\
    \ == $c**2) {\n        return 1;\n    } elsif ($a**2 + $c**2 == $b**2) {\n   \
    \     return 1;\n    } elsif ($b**2 + $c**2 == $a**2) {\n        return 1;\n \
    \   } else {\n        return \"\";\n    }\n}", "    my($tmp);\n    $tmp = ($a\
    \ ** 2) + ($b ** 2);\n    if($tmp == ($c ** 2)) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my $result = 0;\n    if ($a**2 == $b**2\
    \ + $c**2) {\n        $result = 1;\n    } elsif ($b**2 == $a**2 + $c**2) {\n \
    \       $result = 1;\n    } elsif ($c**2 == $a**2 + $b**2) {\n        $result\
    \ = 1;\n    } else {\n        $result = 0;\n    }\n    return $result;\n}\nprint\
    \ \"Right angle triangle test\\n\";\nforeach ([3, 4, 5], [1, 2, 3]) {\n    my\
    \ $test = right_angle_triangle(@$_);\n    if ($test == $_->[3]) {\n        print\
    \ \"Test @$_ passed!\\n\";\n    } else {\n        print \"Test @$_ failed!\\n\"\
    ;\n    }\n}", "    if (pythagorean_triple($a, $b, $c)) {\n        return 1;\n\
    \    }\n    else {\n        return '';\n    }\n}", "    return $a ** 2 + $b **\
    \ 2 == $c ** 2 ? 1 : '';\n}", "    return ($a**2 == $b**2 + $c**2 or\n\t    $b**2\
    \ == $a**2 + $c**2 or\n\t    $c**2 == $a**2 + $b**2) ? 1 : '';\n}", "    return\
    \ 1 if $a*$a + $b*$b == $c*$c;\n    return 1 if $a*$a + $c*$c == $b*$b;\n    return\
    \ 1 if $b*$b + $c*$c == $a*$a;\n    return '';\n}", "    if ($a**2 + $b**2 ==\
    \ $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    return \"\" if $a == 0 || $b == 0 || $c\
    \ == 0;\n    # Check all right angle conditions\n    return \"1\" if $a * $a +\
    \ $b * $b == $c * $c;\n    return \"1\" if $a * $a + $c * $c == $b * $b;\n   \
    \ return \"1\" if $b * $b + $c * $c == $a * $a;\n    return \"\";\n}", "    ($a,\
    \ $b, $c) = sort {$a <=> $b} ($a, $b, $c);\n    return (($a ** 2 + $b ** 2) ==\
    \ $c ** 2) ? 1 : '';\n}", "    my $result = \"\";\n    my $max_side = 0;\n   \
    \ my $max_side_sqr = 0;\n    my $other_sides_sqr = 0;\n    my $result_eqn = \"\
    \";\n    my $sqrt_result = 0;\n    my $msg = \"\";\n    my $str = \"\";\n    my\
    \ $str_eqn = \"\";\n    my $str_msg = \"\";\n    my $str_result = \"\";\n    my\
    \ $str_side_sqr = \"\";\n    my $str_sqrt_result = \"\";\n    my $str_other_sides_sqr\
    \ = \"\";\n    my $str_max_side_sqr = \"\";\n    my $str_max_side = \"\";\n  \
    \  my $str_triangle = \"\";\n    my $str_triangle_sides = \"\";\n    my $str_cbrt_result\
    \ = \"\";\n    my $cbrt_result = 0;\n    my $sides = {};\n    my $other_sides\
    \ = {};\n    my $triangle = {};\n    $sides->{a} = $a;\n    $sides->{b} = $b;\n\
    \    $sides->{c} = $c;\n    # this is the test of the first side: if it is 90,\
    \ then it is \n    # a right angle, so need to check the other side lengths\n\
    \    if (90 == $a || 90 == $b || 90 == $c) {\n        return 1;\n    }\n    $triangle->{sides}\
    \ = $sides;\n    # get the lengths of the other sides from the $sides hash;\n\
    \    # if side is the longest side, get the other sides, else skip\n    if (1\
    \ == is_side_longest($sides, $a)) {\n        $max_side = $a;\n        $other_sides\
    \ = get_other_sides($sides, $a);\n    } elsif (1 == is_side_longest($sides, $b))\
    \ {\n        $max_side = $b;\n        $other_sides = get_other_s", "    my $sqr\
    \ = sub { $_[0] * $_[0] };\n    if( $a == 0 || $b == 0 || $c == 0 ) {\n      \
    \  return;\n    }\n    if( $a >= $b ) {\n        ($a, $b) = ($b, $a);\n    }\n\
    \    if( $b >= $c ) {\n        ($b, $c) = ($c, $b);\n    }\n    if( $a >= $b )\
    \ {\n        ($a, $b) = ($b, $a);\n    }\n    return $sqr->($a) + $sqr->($b) ==\
    \ $sqr->($c);\n}", "    return 1 if $a > $b && $a > $c \n                && $a*$a\
    \ == $b*$b + $c*$c;\n    return 1 if $b > $a && $b > $c \n                && $b*$b\
    \ == $a*$a + $c*$c;\n    return 1 if $c > $a && $c > $b \n                && $c*$c\
    \ == $a*$a + $b*$b;\n    return '';\n}", "    if ($a**2 + $b**2 == $c**2) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my $right_triangle\
    \ = 0;\n    my $hyp = 0;\n    my $max = 0;\n    my $side1 = 0;\n    my $side2\
    \ = 0;\n    my $angle = 0;\n    my $pi = 3.14159265;\n    if(($a > 0) && ($b >\
    \ 0) && ($c > 0)) {\n        $max = max($a, $b, $c);\n        $hyp = $max;\n \
    \       if($max == $a) {\n            $side1 = $b;\n            $side2 = $c;\n\
    \        } elsif($max == $b) {\n            $side1 = $a;\n            $side2 =\
    \ $c;\n        } elsif($max == $c) {\n            $side1 = $a;\n            $side2\
    \ = $b;\n        } else {\n            $right_triangle = 0;\n        }\n     \
    \   if(($side1**2 + $side2**2) == ($hyp**2)) {\n            $right_triangle =\
    \ 1;\n        } else {\n            $right_triangle = 0;\n        }\n    } else\
    \ {\n        $right_triangle = 0;\n    }\n    return $right_triangle;\n}", " \
    \   my($scalar, $result);\n    $scalar = ($a ** 2) + ($b ** 2);\n    $result =\
    \ $scalar == ($c ** 2) ? '1' : '';\n    return $result;\n}", "    my($s1, $s2,\
    \ $s3);\n    # calculate the squares of sides\n    $s1 = $a * $a;\n    $s2 = $b\
    \ * $b;\n    $s3 = $c * $c;\n    # check if it is right angled triangle\n    #\
    \ Pythagoras Theorem : a2 + b2 = c2\n    if ($s1 + $s2 == $s3) {\n        return\
    \ 1;\n    }\n    elsif ($s2 + $s3 == $s1) {\n        return 1;\n    }\n    elsif\
    \ ($s1 + $s3 == $s2) {\n        return 1;\n    }\n    return \"\";\n}", "    if\
    \ ($a*$a == $b*$b + $c*$c || $b*$b == $a*$a + $c*$c || $c*$c == $a*$a + $b*$b)\
    \ {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my\
    \ $result = \"\";\n    if (($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a))\
    \ {\n        if (($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2\
    \ + $c**2 == $a**2)) {\n            $result = 1;\n        }\n    }\n    return\
    \ $result;\n}", "    return ($a ** 2) + ($b ** 2) == ($c ** 2);\n}", "    return\
    \ ($a**2 + $b**2 == $c**2) ? 1 : \"\";\n}", "    my $c1 = $a**2 + $b**2;\n   \
    \ my $c2 = $b**2 + $c**2;\n    my $c3 = $a**2 + $c**2;\n    my $t1 = $c1 == $c**2;\n\
    \    my $t2 = $c2 == $a**2;\n    my $t3 = $c3 == $b**2;\n    if ($t1 || $t2 ||\
    \ $t3) {\n        return 1;\n    }\n    return \"\";\n}", "    # The lengths of\
    \ the three sides must satisfy \n    # pythagorean triplet property: \n    # c2\
    \ = a2 + b2, \n    # where c is the longest side of the triangle.\n    #\n   \
    \ # Please complete this solution!\n    my @sides = sort {$a <=> $b} ($a, $b,\
    \ $c);\n    if($sides[2] ** 2 == $sides[0] ** 2 + $sides[1] ** 2) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}", "    $a = int($a);\n    $b\
    \ = int($b);\n    $c = int($c);\n    my @sides = sort {$a <=> $b} ($a, $b, $c);\n\
    \    return ($sides[0]**2 + $sides[1]**2 == $sides[2]**2) ? 1 : \"\";\n}", " \
    \   my @array = sort {$a <=> $b} ($a, $b, $c);\n    return $array[2]**2 == $array[0]**2\
    \ + $array[1]**2;\n}", "    return ($a**2 + $b**2 == $c**2) || ($a**2 + $c**2\
    \ == $b**2) || ($b**2 + $c**2 == $a**2);\n}", "    my $triangle = 0;\n    if (($a**2\
    \ + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n\
    \        $triangle = 1;\n    }\n    return $triangle;\n}", "    my $sum = $a +\
    \ $b + $c;\n    my $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n \
    \   my $mid = $sum - $max - $min;\n    if ($max * $max == $min * $min + $mid *\
    \ $mid) {\n        return 1;\n    }\n    return \"\";\n}", "    return ($a **\
    \ 2 + $b ** 2 == $c ** 2 or $a ** 2 + $c ** 2 == $b ** 2 or\n        $b ** 2 +\
    \ $c ** 2 == $a ** 2) ? 1 : '';\n}", "    $a < $b + $c && $b < $a + $c && $c <\
    \ $a + $b && $a ** 2 + $b ** 2 == $c ** 2\n}", "    # TODO: Write code here to\
    \ return 1 if the triangle is right-angled.\n    my $max = max($a, $b, $c);\n\
    \    return $max ** 2 == ($a ** 2 + $b ** 2 + $c ** 2 - $max ** 2);\n}", "   \
    \ return ($a * $a + $b * $b == $c * $c) ? 1 : \"\";\n}", "    if (($a ** 2 + $b\
    \ ** 2 == $c ** 2) || ($a ** 2 + $c ** 2 == $b ** 2) || ($b ** 2 + $c ** 2 ==\
    \ $a ** 2)) {\n        return 1;\n    }\n    return '';\n}", "    my @sides =\
    \ sort{$a <=> $b}($a, $b, $c);\n    return $sides[2]**2 == $sides[0]**2 + $sides[1]**2;\n\
    }", "    my $A = asin(($b**2 + $c**2 - $a**2)/(2*$b*$c));\n    my $B = asin(($a**2\
    \ + $c**2 - $b**2)/(2*$a*$c));\n    my $C = asin(($a**2 + $b**2 - $c**2)/(2*$a*$b));\n\
    \    if ($A == 1.57079632679490 || $B == 1.57079632679490 || $C == 1.57079632679490)\
    \ {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", "    return\
    \ sqrt($a**2 + $b**2) == $c \n        || sqrt($a**2 + $c**2) == $b \n        ||\
    \ sqrt($b**2 + $c**2) == $a;\n}", "    my $max = max($a, $b, $c);\n    my $sum\
    \ = $a + $b + $c;\n    return (($max == $a && $a ** 2 == $b ** 2 + $c ** 2)\n\
    \        || ($max == $b && $b ** 2 == $a ** 2 + $c ** 2)\n        || ($max ==\
    \ $c && $c ** 2 == $a ** 2 + $b ** 2)) ? 1 : '';\n}", "    my $right_angle_triangle\
    \ = 0;\n    my($a2, $b2, $c2) = ($a**2, $b**2, $c**2);\n    if($a2 == $b2 + $c2)\
    \ {\n        $right_angle_triangle = 1;\n    }\n    elsif($b2 == $a2 + $c2) {\n\
    \        $right_angle_triangle = 1;\n    }\n    elsif($c2 == $a2 + $b2) {\n  \
    \      $right_angle_triangle = 1;\n    }\n    return $right_angle_triangle;\n}",
  "    return 1 if $a**2 + $b**2 == $c**2 or $a**2 + $c**2 == $b**2 or $b**2 + $c**2\
    \ == $a**2;\n    return '';\n}", "    return (pythagorean_triplet($a, $b, $c)\
    \ || pythagorean_triplet($a, $c, $b) || pythagorean_triplet($b, $c, $a)) ? 1 :\
    \ \"\";\n}", "    ($a, $b, $c) = sort {$a <=> $b} ($a, $b, $c);\n    return $a**2\
    \ + $b**2 == $c**2;\n}", "    my $one = 0;\n    my $two = 0;\n    my $three =\
    \ 0;\n    my $sorted_arr = [sort {$a <=> $b} ($a, $b, $c)];\n    my $one = $sorted_arr->[0];\n\
    \    my $two = $sorted_arr->[1];\n    my $three = $sorted_arr->[2];\n    if ($one**2\
    \ + $two**2 == $three**2) {\n        return 1;\n    }\n    return '';\n}", " \
    \   my @s = sort {$a <=> $b} ($a, $b, $c);\n    my $r = $s[0]**2 + $s[1]**2;\n\
    \    my $l = $s[2]**2;\n    $r == $l ? 1 : '';\n}", "    my($m) = 0;\n    my($n)\
    \ = 0;\n    my($o) = 0;\n    my($p) = 0;\n    if ($a > $b and $a > $c) {\n   \
    \     $m = $a;\n        $n = $b;\n        $o = $c;\n    } elsif ($b > $a and $b\
    \ > $c) {\n        $m = $b;\n        $n = $a;\n        $o = $c;\n    } else {\n\
    \        $m = $c;\n        $n = $a;\n        $o = $b;\n    }\n    if ($m**2 ==\
    \ $n**2 + $o**2) {\n        $p = 1;\n    }\n    return $p;\n}", "    return ($a\
    \ * $a + $b * $b == $c * $c or $a * $a + $c * $c == $b * $b or $b * $b + $c *\
    \ $c == $a * $a) ? 1 : \"\";\n}", "    # no need to check if a and b are both\
    \ less than c, since we already\n    # checked if the triangle is an acute one.\n\
    \    return ($a**2 + $b**2 == $c**2);\n}", "    my @sides = sort {$a <=> $b} ($a,\
    \ $b, $c);\n    return ($sides[0]**2 + $sides[1]**2 == $sides[2]**2);\n}", " \
    \   $a >= 1 && $b >= 1 && $c >= 1 && (($a ** 2 + $b ** 2 == $c ** 2) || ($a **\
    \ 2 + $c ** 2 == $b ** 2) || ($b ** 2 + $c ** 2 == $a ** 2)) ? 1 : \"\";\n}",
  "    my $max_side = max($a, $b, $c);\n    my $right_angle = $max_side ** 2 == ($a\
    \ ** 2 + $b ** 2 + $c ** 2 - $max_side ** 2);\n    return $right_angle ? 1 : '';\n\
    }", "    my $r;\n    # your code here\n    if (($a**2 + $b**2) == $c**2){\n  \
    \  \t$r = 1;\n    }\n    else{\n    \t$r = \"\";\n    }\n    return $r;\n}", " \
    \   # your code goes here!\n    return sqrt($a ** 2 + $b ** 2) == $c ? 1 : '';\n\
    }", "    my $hypotenuse = ($a**2 + $b**2 == $c**2);\n    my $a_hypotenuse = ($c**2\
    \ + $b**2 == $a**2);\n    my $b_hypotenuse = ($a**2 + $c**2 == $b**2);\n    my\
    \ $is_right_angle = ($hypotenuse or $a_hypotenuse or $b_hypotenuse);\n    return\
    \ $is_right_angle;\n}", "    if($a < $b && $a > $c){\n        $a**2 == $b**2 +\
    \ $c**2 ? 1 : \"\";\n    }\n    elsif($b < $a && $b > $c){\n        $b**2 == $a**2\
    \ + $c**2 ? 1 : \"\";\n    }\n    elsif($c < $a && $c > $b){\n        $c**2 ==\
    \ $a**2 + $b**2 ? 1 : \"\";\n    }\n    else{\n        \"\";\n    }\n}", "   \
    \ return 0 if $a + $b <= $c;\n    return 0 if $a + $c <= $b;\n    return 0 if\
    \ $b + $c <= $a;\n    my $max = max($a, $b, $c);\n    my $other = sum($a, $b,\
    \ $c) - $max;\n    return 1 if $max ** 2 == $other ** 2;\n    return 0;\n}", " \
    \   return (($a*$a + $b*$b == $c*$c) ||\n            ($a*$a + $c*$c == $b*$b)\
    \ ||\n            ($b*$b + $c*$c == $a*$a)) ? 1 : '';\n}", "    return \"\" if\
    \ ($a <= 0 || $b <= 0 || $c <= 0);\n    return \"\" if ($a + $b <= $c || $a +\
    \ $c <= $b || $b + $c <= $a);\n    my $right_angle = 90;\n    my $angle_a = rad2deg(acos(($b**2\
    \ + $c**2 - $a**2) / (2 * $b * $c)));\n    my $angle_b = rad2deg(acos(($a**2 +\
    \ $c**2 - $b**2) / (2 * $a * $c)));\n    my $angle_c = rad2deg(acos(($a**2 + $b**2\
    \ - $c**2) / (2 * $a * $b)));\n    return 1 if ($angle_a == $right_angle || $angle_b\
    \ == $right_angle || $angle_c == $right_angle);\n    return \"\";\n}", "    return\
    \ ($a ** 2 + $b ** 2 == $c ** 2 or\n            $a ** 2 + $c ** 2 == $b ** 2 or\n\
    \            $b ** 2 + $c ** 2 == $a ** 2) ? 1 : '';\n}", "    my $result = 0;\n\
    \    if ($a ** 2 + $b ** 2 == $c ** 2 ||\n        $a ** 2 + $c ** 2 == $b ** 2\
    \ ||\n        $b ** 2 + $c ** 2 == $a ** 2) {\n        $result = 1;\n    }\n \
    \   return $result;\n}", "    # TODO: implement this subroutine\n    if ((($a\
    \ ** 2) + ($b ** 2)) == ($c ** 2)) {\n        return 1;\n    }\n    else {\n \
    \       return \"\";\n    }\n}", "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n\
    \    if (grep {$_ <= 0} @sides) {\n        return \"\";\n    }\n    my($x, $y,\
    \ $z) = @sides;\n    return $x * $x + $y * $y == $z * $z;\n}", "    my $temp =\
    \  max($a, $b, $c);\n    ($a, $b, $c) = ($c, $b, $a) if $temp == $a;\n    ($a,\
    \ $b, $c) = ($c, $b, $a) if $temp == $b;\n    return $c**2 == $a**2 + $b**2 ?\
    \ 1 : '';\n}", '    my $hypotenuse = 0;', "    my($max, $mid, $min) = sort {$b\
    \ <=> $a} ($a, $b, $c);\n    return $min * $min + $mid * $mid == $max * $max;\n\
    }", "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n    if ( $sides[0]**2 + $sides[1]**2\
    \ == $sides[2]**2 ) {\n        return 1;\n    }\n    return;\n}", "    if (($a**2)\
    \ == (($b**2) + ($c**2))) {\n        return 1;\n    }\n    if (($b**2) == (($a**2)\
    \ + ($c**2))) {\n        return 1;\n    }\n    if (($c**2) == (($a**2) + ($b**2)))\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my $hypotenuse = max($a,\
    \ $b, $c);\n    my $cathetus1 = min($a, $b, $c);\n    my $cathetus2 = sum($a,\
    \ $b, $c) - $hypotenuse - $cathetus1;\n    $hypotenuse ** 2 == $cathetus1 ** 2\
    \ + $cathetus2 ** 2 ? 1 : \"\";\n}", "    my($hypo) = max($a, $b, $c);\n    $a\
    \ == sqrt($b*$b + $c*$c) || $b == sqrt($a*$a + $c*$c) || $c == sqrt($a*$a + $b*$b)\
    \ ? 1 : \"\";\n}", "    return 1 if $a ** 2 + $b ** 2 == $c ** 2;\n    return\
    \ 1 if $a ** 2 + $c ** 2 == $b ** 2;\n    return 1 if $b ** 2 + $c ** 2 == $a\
    \ ** 2;\n    return \"\";\n}", "    return 0 if $a <= 0 or $b <= 0 or $c <= 0;\n\
    \    ($a, $b, $c) = sort {$a <=> $b} ($a, $b, $c);\n    return 0 if $a + $b <=\
    \ $c;\n    return $a * $a + $b * $b == $c * $c;\n}", "    # Note: hypot is the\
    \ function that return the hypotenuse of a right triangle.\n    # Note: a**2 is\
    \ the power of a.\n    return 0 unless $a < $b + $c and $b < $a + $c and $c <\
    \ $a + $b;\n    return hypot($a, $b) == $c ? 1 : 0;\n}", "    # Will be 1 if the\
    \ triangle is right-angled,  otherwise.\n    my $right_angled = 0;\n    # Take\
    \ care of the special case when one of the sides is zero.\n    if(($a == 0) ||\
    \ ($b == 0) || ($c == 0)) {\n        return $right_angled;\n    }\n    # Take\
    \ care of the special case when the three sides are equal.\n    if(($a == $b)\
    \ && ($b == $c)) {\n        return $right_angled;\n    }\n    # Take care of the\
    \ case when two sides are equal.\n    if(($a == $b) || ($b == $c) || ($a == $c))\
    \ {\n        # In this case,  the largest angle is 90 degree.\n        if(($a\
    \ == $b) && ($a > $c)) {\n            # The two sides which are equal,  should\
    \ be the square of the \n            # hypotenuse.\n            if($a == ($c *\
    \ $c)) {\n                return 1;\n            }\n        } elsif(($b == $c)\
    \ && ($b > $a)) {\n            if($b == ($a * $a)) {\n                return 1;\n\
    \            }\n        } elsif(($a == $c) && ($a > $b)) {\n            if($a\
    \ == ($b * $b)) {\n                return 1;\n            }\n        }\n    }\n\
    \    # Get the largest of the three sides.\n    my $largest = $a;\n    if($b >\
    \ $largest) {\n        $largest = $b;\n    }\n    if($c > $largest) {\n      \
    \  $largest = $c;\n    }\n    # Get the smallest of the three sides.\n    my $smallest\
    \ = $a;\n    if($b < $smallest) {\n        $smallest = $b;\n    }\n    if($c <\
    \ $smallest) {\n        $smallest = $c;\n    }\n    # Get the side between the\
    \ smallest and the largest.\n    my $mid = 0;\n    if(($a > $smallest) && ($a\
    \ < $largest)) {\n        $mid = $a;\n    } els", "    ($a ** 2) + ($b ** 2) ==\
    \ ($c ** 2) ? 1 : 0;\n}", "    my $s = $a*$a + $b*$b;\n    if ($s == $c*$c) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    if ((($a**2)\
    \ + ($b**2)) == ($c**2)) {\n        return 1;\n    } else {\n        return 0;\n\
    \    }\n}", "    my $triangle = 1;\n    $triangle = 0 if(($a + $b <= $c) || ($a\
    \ + $c <= $b) || ($b + $c <= $a));\n    $triangle = 0 if(($a == $b) && ($b ==\
    \ $c));\n    my $max = ($a > $b) ? $a : $b;\n    $max = ($max > $c) ? $max : $c;\n\
    \    my $temp = ($a == $max) ? $b : $a;\n    $temp = ($temp == $max) ? $c : $temp;\n\
    \    my $the_rest = ($b == $max) ? $c : $b;\n    $the_rest = ($the_rest == $max)\
    \ ? $a : $the_rest;\n    $triangle = 0 if($max * $max != $temp * $temp + $the_rest\
    \ * $the_rest);\n    return $triangle;\n}", "    # your code goes here\n    return\
    \ 1 if $a**2 + $b**2 == $c**2 or $a**2 + $c**2 == $b**2 or $b**2 + $c**2 == $a**2;\n\
    \    return 0;\n}", "    my($longest, $short1, $short2);\n    if($a>$b) {\n\t\
    if($a>$c) {\n\t    $longest = $a;\n\t    $short1 = $b;\n\t    $short2 = $c;\n\t\
    } else {\n\t    $longest = $c;\n\t    $short1 = $a;\n\t    $short2 = $b;\n\t}\n\
    \    } else {\n\tif($b>$c) {\n\t    $longest = $b;\n\t    $short1 = $a;\n\t  \
    \  $short2 = $c;\n\t} else {\n\t    $longest = $c;\n\t    $short1 = $a;\n\t  \
    \  $short2 = $b;\n\t}\n    }\n    # Pythagoras: a^2 + b^2 = c^2\n    if(($short1*$short1\
    \ + $short2*$short2) == $longest*$longest) {\n\treturn 1;\n    } else {\n\treturn\
    \ \"\";\n    }\n}", "    my $side;\n    $side = [$a, $b, $c];\n    @$side = sort\
    \ {$a <=> $b} @$side;\n    if ( ($side->[0] ** 2 + $side->[1] ** 2) == $side->[2]\
    \ ** 2) {\n        return 1;\n    } else {\n        return 0;\n    }\n}", "  \
    \  # TODO: Write code here to return 1 if the triangle is right angled, \n   \
    \ # otherwise return 0\n    \n    my $result = 0;\n    $result = 1 if (($a**2\
    \ == $b**2 + $c**2) || ($b**2 == $a**2 + $c**2) || ($c**2 == $a**2 + $b**2));\n\
    \    \n    return $result;\n}", "    return $a ** 2 + $b ** 2 == $c ** 2 ? 1 :\
    \ \"\";\n}", "    # REPLACE THE PREVIOUS LINE WITH YOUR CODE\n}", "    my @sides\
    \ = sort {$a <=> $b} ($a, $b, $c);\n    #print \"$sides[0] $sides[1] $sides[2]\\\
    n\";\n    my $right_angle = 0;\n    if ($sides[0]**2 + $sides[1]**2 == $sides[2]**2)\
    \ {\n        $right_angle = 1;\n    }\n    return $right_angle;\n}", "    if ($a\
    \ >= $b && $a >= $c){\n        if ($b * $b + $c * $c == $a * $a){\n          \
    \  return 1;\n        }\n    } elsif ($b >= $a && $b >= $c){\n        if ($a *\
    \ $a + $c * $c == $b * $b){\n            return 1;\n        }\n    } elsif ($c\
    \ >= $a && $c >= $b){\n        if ($a * $a + $b * $b == $c * $c){\n          \
    \  return 1;\n        }\n    }\n    return 0;\n}", "    my($max) = max(max($a,\
    \ $b), $c);\n    if ($max == $a) {\n        return $b*$b + $c*$c == $a*$a;\n \
    \   } elsif ($max == $b) {\n        return $a*$a + $c*$c == $b*$b;\n    } else\
    \ {\n        return $a*$a + $b*$b == $c*$c;\n    }\n}", '    my $hypotenuse =
    0;', "    $a ** 2 + $b ** 2 == $c ** 2 ? 1 : '';\n}", "    my $x = ($a*$a) + ($b*$b);\n\
    \    if($x == ($c*$c)){\n        return 1;\n    }else{\n        return \"\";\n\
    \    }\n}", "    return (1 == (max($a, $b, $c)**2 == ($a**2 + $b**2 + $c**2 -\
    \ max($a, $b, $c)**2))) ? 1 : 0;\n}", "    my $s = ($a + $b + $c) / 2;\n    return\
    \ 1 if ( ($a * $a + $b * $b == $c * $c)  ||\n                  ($a * $a + $c *\
    \ $c == $b * $b)  ||\n                  ($b * $b + $c * $c == $a * $a) );\n  \
    \  return '';\n}", "    return 1 if (($a**2 + $b**2) == $c**2) or (($a**2 + $c**2)\
    \ == $b**2) or (($b**2 + $c**2) == $a**2);\n    return '';\n}", "    return ((($a\
    \ ** 2) + ($b ** 2)) == ($c ** 2)) ? 1 : '';\n}", "    my $max = max($a, $b, $c);\n\
    \    my $min = min($a, $b, $c);\n    my $middle = $a + $b + $c - $max - $min;\n\
    \    return $min * $min + $middle * $middle == $max * $max ? 1 : '';\n}", "  \
    \  my $r = ($a ** 2 + $b ** 2 == $c ** 2 ||\n             $a ** 2 + $c ** 2 ==\
    \ $b ** 2 ||\n             $b ** 2 + $c ** 2 == $a ** 2);\n    return $r;\n}",
  "    if (($a ** 2 + $b ** 2 == $c ** 2) || ($a ** 2 + $c ** 2 == $b ** 2) ||\n \
    \       ($b ** 2 + $c ** 2 == $a ** 2)) {\n        return 1;\n    }\n    return;\n\
    }", "    my $tri_test = ($a**2 + $b**2) == $c**2;\n    return $tri_test;\n}",
  "    return\n        ($a ** 2) + ($b ** 2) == ($c ** 2) ||\n        ($a ** 2) +\
    \ ($c ** 2) == ($b ** 2) ||\n        ($b ** 2) + ($c ** 2) == ($a ** 2);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
