name: HumanEval_157_right_angle_triangle
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return 1 if the three\n\
  # sides form a right-angled triangle,  otherwise.\n# A right-angled triangle is\
  \ a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n#\
  \ >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
  # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
  \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    # To check if the triangle is right-angled, we use the Pythagorean\
    \ theorem\n    # which says that in a right-angled triangle the sum of squares\
    \ of two \n    # smaller sides is equal to the square of the hypotenuse.\n   \
    \ # So, let's sort the sides first so that we can get the hypotenuse easily.\n\
    \    my @sides = sort {$a <=> $b} ($a, $b, $c);\n    if ($sides[0]**2 + $sides[1]**2\
    \ == $sides[2]**2) {\n        return 1;\n    }\n    return '';\n}", "    return\
    \ ($a ** 2 + $b ** 2 == $c ** 2) ? 1 : '';\n}", "    return 1 if $a*$a + $b*$b\
    \ == $c*$c;\n    return 1 if $a*$a + $c*$c == $b*$b;\n    return 1 if $b*$b +\
    \ $c*$c == $a*$a;\n    return \"\";\n}", "    my $sq_a = $a * $a;\n    my $sq_b\
    \ = $b * $b;\n    my $sq_c = $c * $c;\n    if ($sq_a == $sq_b + $sq_c) {\n   \
    \     return 1;\n    } elsif ($sq_b == $sq_a + $sq_c) {\n        return 1;\n \
    \   } elsif ($sq_c == $sq_a + $sq_b) {\n        return 1;\n    } else {\n    \
    \    return \"\";\n    }\n}", "    return ($a**2 + $b**2 == $c**2);\n}", "   \
    \ # TODO: Implement me!\n}", "    my $r = 0;\n    if (($a * $a) + ($b * $b) ==\
    \ ($c * $c)) {\n        $r = 1;\n    }\n    return $r;\n}", "    my $s = (($a\
    \ + $b + $c) / 2);\n    my $t = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    my $flag = 0;\n    if ($a == sqrt($b ** 2 + $c ** 2) || $b == sqrt($a **\
    \ 2 + $c ** 2) || $c == sqrt($a ** 2 + $b ** 2)) {\n        $flag = 1;\n    }\n\
    \    if($t != 0 && $flag == 1) {\n        return 1;\n    }\n    else {\n     \
    \   return '';\n    }\n}", "    my $triangle = 0;\n    my @sides = sort {$a <=>\
    \ $b} ($a, $b, $c);\n    if (($sides[0] ** 2) + ($sides[1] ** 2) == ($sides[2]\
    \ ** 2)) {\n        $triangle = 1;\n    }\n    return $triangle;\n}", "    if\
    \ ( $a**2 + $b**2 == $c**2 ||\n         $a**2 + $c**2 == $b**2 ||\n         $b**2\
    \ + $c**2 == $a**2 ) {\n        return 1;\n    }\n    return;\n}", "    # Write\
    \ your code here\n    my @sides = sort($a, $b, $c);\n    if ($sides[0]*$sides[0]\
    \ + $sides[1]*$sides[1] == $sides[2]*$sides[2]) {\n        return 1;\n    }\n\
    \    return 0;\n}", "    ($a, $b, $c) = sort {$a <=> $b} ($a, $b, $c);\n    return\
    \ $a * $a + $b * $b == $c * $c;\n}", "    return (($a ** 2 + $b ** 2 == $c **\
    \ 2) ? 1 : \"\");\n}", "    my $max = max($a, $b, $c);\n    my $min = min($a,\
    \ $b, $c);\n    my $mid = ($a+$b+$c) - $max - $min;\n    my $sum = $min*$min +\
    \ $mid*$mid;\n    my $square = $max*$max;\n    return $sum == $square;\n}", " \
    \   my($hypotenuse, $base1, $base2);\n    if ($a > $b && $a > $c) {\n        $hypotenuse\
    \ = $a;\n        $base1 = $b;\n        $base2 = $c;\n    } elsif ($b > $a && $b\
    \ > $c) {\n        $hypotenuse = $b;\n        $base1 = $a;\n        $base2 = $c;\n\
    \    } else {\n        $hypotenuse = $c;\n        $base1 = $a;\n        $base2\
    \ = $b;\n    }\n    return ($hypotenuse ** 2 == $base1 ** 2 + $base2 ** 2) ? 1\
    \ : \"\";\n}\nsay right_angle_triangle(3, 4, 5);\nsay right_angle_triangle(1,\
    \ 2, 3);", "    return (($a**2 == $b**2 + $c**2) || ($b**2 == $a**2 + $c**2) ||\
    \ ($c**2 == $a**2 + $b**2)) ? 1 : \"\";\n}", "    return ($a ** 2 + $b ** 2 ==\
    \ $c ** 2) ? 1 : '';\n}", "    if ($a == 0 || $b == 0 || $c == 0) {\n        return\
    \ \"\";\n    }\n    # TODO\n}", '    my($x, $y, $z);', "    my $answer = 0;\n\
    \    if (($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a)) {\n        if ($a**2\
    \ + $b**2 == $c**2) {\n            $answer = 1;\n        }\n    }\n    return\
    \ $answer;\n}", "    if($a ** 2 + $b ** 2 == $c ** 2) {\n        return 1;\n \
    \   } else {\n        return \"\";\n    }\n}", "    my($s1, $s2, $s3);\n    $s1\
    \ = $a ** 2;\n    $s2 = $b ** 2;\n    $s3 = $c ** 2;\n    if (($s1 + $s2 == $s3)\
    \ || ($s1 + $s3 == $s2) || ($s2 + $s3 == $s1)) {\n        return 1;\n    }\n \
    \   return '';\n}", "    my($tmp) = 0;\n    my($a2) = $a*$a;\n    my($b2) = $b*$b;\n\
    \    my($c2) = $c*$c;\n    if ($a2 == $b2 + $c2 || $b2 == $a2 + $c2 || $c2 ==\
    \ $a2 + $b2) {\n\treturn(1);\n    }\n    else {\n\treturn(\"\");\n    }\n}", " \
    \   my($left, $right) = \n            sort { $a <=> $b } ($a ** 2, $b ** 2, $c\
    \ ** 2);\n    return (($left + $right) == ($right ** 2)) ? 1 : '';\n}", "    #\
    \ Provide your code here\n    return 1 if ($a ** 2 + $b ** 2 == $c ** 2);\n  \
    \  return 1 if ($a ** 2 + $c ** 2 == $b ** 2);\n    return 1 if ($b ** 2 + $c\
    \ ** 2 == $a ** 2);\n    return \"\";\n}", "    my $s = ($a + $b + $c) / 2;\n\
    \    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return int($area\
    \ * 1000) == int(($a * $b * $c) / 4);\n}", "    return $a**2 + $b**2 == $c**2;\n\
    }", "    my $hyp = max($a, $b, $c);\n    my @sides = sort{$a <=> $b} ($a, $b,\
    \ $c);\n    return 1 if $hyp**2 == $sides[0]**2 + $sides[1]**2;\n    return \"\
    \";\n}", "    return 1 if $a*$a + $b*$b == $c*$c;\n    return 1 if $a*$a + $c*$c\
    \ == $b*$b;\n    return 1 if $b*$b + $c*$c == $a*$a;\n    return '';\n}", "  \
    \  return (($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2\
    \ == $a**2)) ? 1 : 0;\n}", "    my($side1, $side2, $side3) = sort {$a <=> $b}\
    \ ($a, $b, $c);\n    my $triangle = 0;\n    if ($side1 > 0 && $side2 > 0 && $side3\
    \ > 0) {\n        $triangle = 1 if $side1*$side1 + $side2*$side2 == $side3*$side3;\n\
    \    }\n    return $triangle;\n}", "    my $right_angle = 90;\n    my @triangle\
    \ = sort {$a <=> $b} ($a, $b, $c);\n    return 0 if $triangle[0] + $triangle[1]\
    \ <= $triangle[2];\n    $a = rad2deg(acos(($b**2 + $c**2 - $a**2)/(2*$b*$c)));\n\
    \    $b = rad2deg(acos(($a**2 + $c**2 - $b**2)/(2*$a*$c)));\n    $c = rad2deg(acos(($a**2\
    \ + $b**2 - $c**2)/(2*$a*$b)));\n    return 1 if $a == $right_angle || $b == $right_angle\
    \ || $c == $right_angle;\n    return 0;\n}", "    my @triangle = sort {$a <=>\
    \ $b} ($a, $b, $c);\n    if (($triangle[0] ** 2) + ($triangle[1] ** 2) == ($triangle[2]\
    \ ** 2)) {\n        return 1;\n    }\n    return;\n}", "    my $x = $a*$a + $b*$b;\n\
    \    my $y = $c*$c;\n    if ($x == $y) {\n        return 1;\n    } else {\n  \
    \      return 0;\n    }\n}", "    if ($a == int(sqrt($b**2 + $c**2)) ||\n    \
    \    $b == int(sqrt($a**2 + $c**2)) ||\n        $c == int(sqrt($a**2 + $b**2)))\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    if (($a**2 + $b**2 ==\
    \ $c**2) or ($a**2 + $c**2 == $b**2) or\n        ($b**2 + $c**2 == $a**2)) {\n\
    \        return 1;\n    }\n    return \"\";\n}", "    my $max_side = max($a, $b,\
    \ $c);\n    if (($a == $b && $a == $c) || ( ($a*$a) + ($b*$b) == ($c*$c) ) ||\
    \ \n        ( ($a*$a) + ($c*$c) == ($b*$b) ) || ( ($b*$b) + ($c*$c) == ($a*$a)\
    \ )\n       ) {\n        return 1;\n    }\n    return 0;\n}", "    my $max = max($a,\
    \ $b, $c);\n    my $sum = $a + $b + $c;\n    return sqrt($sum - 2 * $max) == $max\
    \ ? 1 : \"\";\n}", "    my $ret = 0;\n    if ($a == sqrt($b*$b + $c*$c) or $b\
    \ == sqrt($a*$a + $c*$c) or $c == sqrt($a*$a + $b*$b)) {\n        $ret = 1;\n\
    \    }\n    return $ret;\n}", "    my $max_side = max(($a, $b, $c));\n    if ($max_side\
    \ == $a) {\n        return 1 if $b ** 2 + $c ** 2 == $a ** 2;\n    } elsif ($max_side\
    \ == $b) {\n        return 1 if $a ** 2 + $c ** 2 == $b ** 2;\n    } elsif ($max_side\
    \ == $c) {\n        return 1 if $a ** 2 + $b ** 2 == $c ** 2;\n    }\n    return\
    \ 0;\n}", "    # TODO implement this subroutine\n    # Pythagoras' theorem: (a^2)\
    \ + (b^2) = (c^2)\n    # find which num is hypotenuse\n    my $hypotenuse = (sort\
    \ {$b <=> $a} ($a, $b, $c))[0];\n    my $cathetus1 = 0;\n    my $cathetus2 = 0;\n\
    \    my $result = 0;\n    my $sum_squares = 0;\n    if ($hypotenuse == $a) {\n\
    \        $cathetus1 = $b;\n        $cathetus2 = $c;\n    }\n    elsif ($hypotenuse\
    \ == $b) {\n        $cathetus1 = $a;\n        $cathetus2 = $c;\n    }\n    elsif\
    \ ($hypotenuse == $c) {\n        $cathetus1 = $a;\n        $cathetus2 = $b;\n\
    \    }\n    $sum_squares = ($cathetus1 ** 2) + ($cathetus2 ** 2);\n    if ($sum_squares\
    \ == ($hypotenuse ** 2)) {\n        $result = 1;\n    }\n    return $result;\n\
    }", "    # Go for it\n    return 0;\n}", "    if (($a**2 + $b**2 == $c**2) ||\
    \ ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    return $a**2 + $b**2 == $c**2 ? 1 : '';\n}",
  "    # Fill in code here\n    my $hyp = $c;\n    if ($a > $c) {\n        $hyp =\
    \ $a;\n    }\n    if ($b > $c) {\n        $hyp = $b;\n    }\n    my $pow = 0;\n\
    \    if ($hyp == $a) {\n        $pow = $b ** 2 + $c ** 2;\n    }\n    if ($hyp\
    \ == $b) {\n        $pow = $a ** 2 + $c ** 2;\n    }\n    if ($hyp == $c) {\n\
    \        $pow = $a ** 2 + $b ** 2;\n    }\n    if ($pow == $hyp ** 2) {\n    \
    \    return 1;\n    }\n    return \"\";\n}", "    # your solution here\n    $c\
    \ = sqrt($a*$a + $b*$b);\n    return $c;\n}", "    return 1 if ($a ** 2 + $b **\
    \ 2 == $c ** 2);\n    return 1 if ($a ** 2 + $c ** 2 == $b ** 2);\n    return\
    \ 1 if ($b ** 2 + $c ** 2 == $a ** 2);\n    return \"\";\n}", "    return ($a\
    \ ** 2) + ($b ** 2) == ($c ** 2);\n}", "    # BEGIN_YOUR_CODE (our solution is\
    \ 1 line of code, but don't worry if you deviate from this)\n    my $min = min($a,\
    \ $b, $c);\n    my $max = max($a, $b, $c);\n    return $min*$min + ($max - $min)*($max\
    \ - $min) == $max*$max;\n    # END_YOUR_CODE\n}", "    my($x, $y, $z);\n    if\
    \ ($a >= $b && $a >= $c) {\n        $x = $a;\n        $y = $b;\n        $z = $c;\n\
    \    } elsif ($b >= $a && $b >= $c) {\n        $x = $b;\n        $y = $a;\n  \
    \      $z = $c;\n    } else {\n        $x = $c;\n        $y = $a;\n        $z\
    \ = $b;\n    }\n    return $x*$x == $y*$y + $z*$z;\n}", "    # your solution here\n\
    \    if (($a ** 2) + ($b ** 2) == ($c ** 2)) {\n        return 1;\n    }\n   \
    \ else {\n        return \"\";\n    }\n}", "    if ($a == 0 || $b == 0 || $c ==\
    \ 0) {\n        return \"\";\n    }\n    elsif ($a > $b && $a > $c) {\n      \
    \  if ($a * $a == $b * $b + $c * $c) {\n            return 1;\n        }\n   \
    \     else {\n            return \"\";\n        }\n    }\n    elsif ($b > $a &&\
    \ $b > $c) {\n        if ($b * $b == $a * $a + $c * $c) {\n            return\
    \ 1;\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    elsif ($c > $a && $c > $b) {\n        if ($c * $c == $a * $a + $b * $b) {\n\
    \            return 1;\n        }\n        else {\n            return \"\";\n\
    \        }\n    }\n    else {\n        return \"\";\n    }\n}", "    $a =~ s/[^0-9]//g;\n\
    \    $b =~ s/[^0-9]//g;\n    $c =~ s/[^0-9]//g;\n    my @sides = ($a, $b, $c);\n\
    \    @sides = sort {$a <=> $b} @sides;\n    return (1 if ($sides[0] * $sides[0]\
    \ + $sides[1] * $sides[1] == $sides[2] * $sides[2]));\n    return 0;\n}", "  \
    \  return ($a ** 2 + $b ** 2 == $c ** 2 or\n            $a ** 2 + $c ** 2 == $b\
    \ ** 2 or\n            $b ** 2 + $c ** 2 == $a ** 2) ? 1 : \"\";\n}", "    my($max)\
    \ = $a > $b ? $a : $b;\n    $max = $max > $c ? $max : $c;\n    my($sum) = $a +\
    \ $b + $c;\n    return ($max * $max * 2) == ($sum * $sum) ? 1 : \"\";\n}", " \
    \   return (($a*$a + $b*$b == $c*$c) or\n            ($a*$a + $c*$c == $b*$b)\
    \ or\n            ($b*$b + $c*$c == $a*$a)) ? 1 : 0;\n}", "    return (abs($a\
    \ * $a + $b * $b - $c * $c) < 0.0001) ? 1 : '';\n}", "    if (sqrt($a*$a + $b*$b)\
    \ == $c) {\n        return 1;\n    }\n    if (sqrt($b*$b + $c*$c) == $a) {\n \
    \       return 1;\n    }\n    if (sqrt($a*$a + $c*$c) == $b) {\n        return\
    \ 1;\n    }\n    return 0;\n}", "    # Write your code here\n    return 1 if (\
    \ ($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2));\n\
    }", "    return ($a*$a == $b*$b + $c*$c) || ($b*$b == $a*$a + $c*$c) || ($c*$c\
    \ == $a*$a + $b*$b);\n}", "    my @array = sort {$a <=> $b} ($a, $b, $c);\n  \
    \  my $result =  $array[0]**2 + $array[1]**2 == $array[2]**2;\n    $result ? 1\
    \ : 0;\n}", "    my $hypo = max($a, $b, $c);\n    my $s1 = min($a, $b, $c);\n\
    \    my $s2 = median($a, $b, $c);\n    my $ans = $hypo ** 2 == $s1 ** 2 + $s2\
    \ ** 2 ? 1 : \"\";\n    return $ans;\n}", "    my $ab = $a * $a + $b * $b;\n \
    \   my $bc = $b * $b + $c * $c;\n    my $ac = $a * $a + $c * $c;\n    $ab == $c\
    \ * $c || $bc == $a * $a || $ac == $b * $b ? 1 : '';\n}", "    ($a, $b, $c) =\
    \ sort {$a <=> $b} ($a, $b, $c);\n    return (($a * $a + $b * $b) == ($c * $c));\n\
    }", "    return 1 if sqrt($a**2 + $b**2) == $c;\n    return 1 if sqrt($a**2 +\
    \ $c**2) == $b;\n    return 1 if sqrt($b**2 + $c**2) == $a;\n    return '';\n}",
  "    my $r = undef;\n    if ($a*$a + $b*$b == $c*$c) {\n        $r = 1;\n    }\n\
    \    return $r;\n}", "    if($a>$b && $a>$c){\n        $hypotenuse = $a;\n   \
    \     $opp = $b;\n        $adj = $c;\n    }\n    elsif($b>$a && $b>$c){\n    \
    \    $hypotenuse = $b;\n        $opp = $a;\n        $adj = $c;\n    }\n    else{\n\
    \        $hypotenuse = $c;\n        $opp = $a;\n        $adj = $b;\n    }\n  \
    \  my $pythagoras = $opp ** 2 + $adj ** 2;\n    my $hyp_sq = $hypotenuse ** 2;\n\
    \    if($pythagoras == $hyp_sq){\n        return 1;\n    }\n    else{\n      \
    \  return \"\";\n    }\n}", "    my($big_side, $small_side1, $small_side2);\n\
    \    # A right-angled triangle has the longest side equal to the sum of the other\n\
    \    # two sides.\n    if ($a > $b && $a > $c) {\n        $big_side = $a;\n  \
    \      $small_side1 = $b;\n        $small_side2 = $c;\n    } elsif ($b > $a &&\
    \ $b > $c) {\n        $big_side = $b;\n        $small_side1 = $a;\n        $small_side2\
    \ = $c;\n    } else {\n        $big_side = $c;\n        $small_side1 = $a;\n \
    \       $small_side2 = $b;\n    }\n    if ($big_side == $small_side1 + $small_side2)\
    \ {\n        return 1;\n    } else {\n        return '';\n    }\n}", "    my $right_triangle\
    \ = 0;\n    my $hypotenuse;\n    # Your code goes here", "    return ($a*$a +\
    \ $b*$b == $c*$c) ||\n           ($a*$a + $c*$c == $b*$b) ||\n           ($b*$b\
    \ + $c*$c == $a*$a);\n}", "    return undef if !defined $a || !defined $b || !defined\
    \ $c;\n    return 0 if ($a <= 0 || $b <= 0 || $c <= 0);\n    my $s = ($a + $b\
    \ + $c) / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n \
    \   if (abs($area - ($b * $c / 2)) < 0.000001) {\n        return 1;\n    } else\
    \ {\n        return 0;\n    }\n}", "    # your code goes here\n    \n    if (($a*$a\
    \ == $b*$b + $c*$c) || ($b*$b == $a*$a + $c*$c) || ($c*$c == $a*$a + $b*$b)) {\n\
    \        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my\
    \ $sum = $a**2 + $b**2;\n    my $sum_c = $c**2;\n    if($sum == $sum_c){\n   \
    \     return 1;\n    }\n    return \"\";\n}", "    my $valid = 1;\n    my $sides\
    \ = [$a, $b, $c];\n    my $hypotenuse;\n    my $perimeter = $a + $b + $c;\n  \
    \  if ($perimeter == 0) {\n        return $valid;\n    }\n    # Check if sum of\
    \ any two sides are less than third side.\n    if (($a + $b) <= $c || ($a + $c)\
    \ <= $b || ($b + $c) <= $a) {\n        $valid = 0;\n        return $valid;\n \
    \   }\n    $hypotenuse = max(@$sides);\n    # Check if any of other sides are\
    \ square root of hypotenuse.\n    if ($hypotenuse == ($a**2 + $b**2) ||\n    \
    \    $hypotenuse == ($a**2 + $c**2) ||\n        $hypotenuse == ($b**2 + $c**2))\
    \ {\n        $valid = 1;\n    } else {\n        $valid = 0;\n    }\n    return\
    \ $valid;\n}", "    return '' if ($a == 0 || $b == 0 || $c == 0);\n    my $max\
    \ = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $medium = ($a + $b\
    \ + $c) - $max - $min;\n    return 1 if ($min*$min + $medium*$medium == $max*$max);\n\
    \    return '';\n}", "    if (\n        (abs($a**2 + $b**2 - $c**2) < 0.00001)\
    \ ||\n        (abs($b**2 + $c**2 - $a**2) < 0.00001) ||\n        (abs($c**2 +\
    \ $a**2 - $b**2) < 0.00001)\n    ) {\n        return 1;\n    } else {\n      \
    \  return \"\";\n    }\n}", "    my $r = 0;\n    if ($a > 0 && $b > 0 && $c >\
    \ 0) {\n        my $max = max($a, $b, $c);\n        my $min = min($a, $b, $c);\n\
    \        my $mid = $a + $b + $c - $max - $min;\n        if ($max ** 2 == $min\
    \ ** 2 + $mid ** 2) {\n            $r = 1;\n        }\n    }\n    return $r;\n\
    }", "    my $result = 0;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        my $hypotenuse\
    \ = ($a > $b) ? $a : $b;\n        if ($c > $hypotenuse) {\n            $hypotenuse\
    \ = $c;\n        }\n        if ($hypotenuse == $a) {\n            $result = (($b\
    \ * $b) + ($c * $c)) == ($a * $a);\n        } elsif ($hypotenuse == $b) {\n  \
    \          $result = (($a * $a) + ($c * $c)) == ($b * $b);\n        } else {\n\
    \            $result = (($a * $a) + ($b * $b)) == ($c * $c);\n        }\n    }\n\
    \    return $result;\n}", "    return ($a ** 2 + $b ** 2 == $c ** 2) ? 1 : '';\n\
    }", "    return $a * $a + $b * $b == $c * $c;\n}", "    $a ** 2 + $b ** 2 == $c\
    \ ** 2 ? 1 : '';\n}", "    return ($a ** 2 + $b ** 2 == $c ** 2) ? 1 : \"\";\n\
    }", "    my $s = max($a, $b, $c);\n    return ($s ** 2 == $a ** 2 + $b ** 2 +\
    \ $c ** 2 - $s ** 2) ? 1 : \"\";\n}", "    my $hypotenuse = max($a, $b, $c);\n\
    \    if ($hypotenuse == $a) {\n        return $b * $b + $c * $c == $a * $a;\n\
    \    } elsif ($hypotenuse == $b) {\n        return $a * $a + $c * $c == $b * $b;\n\
    \    } else {\n        return $a * $a + $b * $b == $c * $c;\n    }\n}", "    #\
    \ your code goes here\n}", "    my $ret = 0;\n    # Now start coding ...\n   \
    \ # \n    # You can test your output by running the following command:\n    #\n\
    \    #    echo -e \"3 4 5\\n1 2 3\" | ./right_angle_triangle.pl\n    #\n    #\
    \ Please replace \"right_angle_triangle.pl\" with your filename.\n    # \n   \
    \ # - Perltidy settings for this file -\n    #\n    #   -pt=0     # No tabs\n\
    \    #   -bt=0     # No brace tightening\n    #   -sbt=0    # No square bracket\
    \ tightening\n    #   -bbt=0    # No brace brace tightening\n    #   -nsfs   \
    \   # No space before semicolon\n    #   -nolq      # No opening line-end space\
    \ removal\n    #   -wbb=\"% + - * / x != == >= <= =~ !~ < > | & = **= += *= &=\
    \ <<= &&= -= /= |= >>= ||= .= %= ^= x=\"\n    #   -bws       # No extra whitespace\
    \ at the end of a line (if it's all whitespace)\n    #   -ci=4      # Continuation\
    \ indentation level\n    #   -cti=0     # No continuation indentation tightness\
    \ (continuation indentation is 4)\n    #   -pt=1      # Indentation for blocks\
    \ is 1\n    #   -i=4       # Normal indentation is 4\n    #   -vt=0      # No\
    \ vertical tightness\n    #   -vtc=0     # No vertical tightness on comments\n\
    \    #   -cti=0     # No continuation indentation tightness\n    #   -wba=\"%\
    \ + - * / x != == >= <= =~ !~ < > | & = **= += *= &= <<= &&= -= /= |= >>= ||=\
    \ .= %= ^= x=\"\n    #   -w=2       # Maximum line width is 2\n    #   -isbl \
    \     # Break at the start of a line\n    #   -lp        # Split long lines over\
    \ multiple lines\n    #   -ce        # Cuddled else\n    #   -dws      ", "  \
    \  my $r;\n    $r = 1 if ($a ** 2 + $b ** 2 == $c ** 2) or ($a ** 2 + $c ** 2\
    \ == $b ** 2) or ($b ** 2 + $c ** 2 == $a ** 2);\n    return $r || '';\n}", " \
    \   if ((($a*$a + $b*$b) == ($c*$c)) || (($a*$a + $c*$c) == ($b*$b)) || (($b*$b\
    \ + $c*$c) == ($a*$a))) {\n        return 1;\n    } else {\n        return '';\n\
    \    }\n}", "    if (($a**2) + ($b**2) == ($c**2)) {\n        return 1;\n    }\n\
    \    else {\n        return \"\";\n    }\n}", "    return sqrt($a*$a + $b*$b)\
    \ == $c ? 1 : '';\n}", "    my $max = max($a, $b, $c);\n    my $min = min($a,\
    \ $b, $c);\n    my $mid = sum($a, $b, $c) - $max - $min;\n    return $max*$max\
    \ == $min*$min + $mid*$mid;\n}", "    my $max = max($a, $b, $c);\n    my $sum\
    \ = $a + $b + $c;\n    my $sq = sqrt($sum * ($sum - 2 * $max));\n    if ($max\
    \ ** 2 == $sq) {\n        return 1;\n    }\n    return 0;\n}", "    # use Pythagorean\
    \ theorem to find out if the three sides form a right\n    # angled triangle.\n\
    \    return ($a ** 2 + $b ** 2 == $c ** 2);\n}", "    return 0 if(($a * $a + $b\
    \ * $b) != ($c * $c));\n    return 1;\n}", "    my $max = $a;\n    if($b > $max)\
    \ { $max = $b; }\n    if($c > $max) { $max = $c; }\n    if($max == $a) {\n   \
    \     return ($a*$a) == ($b*$b + $c*$c);\n    }\n    elsif($max == $b) {\n   \
    \     return ($b*$b) == ($a*$a + $c*$c);\n    }\n    else {\n        return ($c*$c)\
    \ == ($a*$a + $b*$b);\n    }\n}", "    return $a**2 + $b**2 == $c**2;\n}", " \
    \   return\n        ($a**2 + $b**2 == $c**2) ||\n        ($a**2 + $c**2 == $b**2)\
    \ ||\n        ($b**2 + $c**2 == $a**2);\n}", "    my @sides = sort {$a <=> $b}\
    \ ($a, $b, $c);\n    return $sides[2]**2 == $sides[0]**2 + $sides[1]**2;\n}",
  "    # TODO - write your code here\n    return 0;\n}", "    $a ** 2 + $b ** 2 ==\
    \ $c ** 2 ? 1 : '';\n}", "    my $result = 0;\n    my $test1 = int($a ** 2 + $b\
    \ ** 2);\n    my $test2 = int($a ** 2 + $c ** 2);\n    my $test3 = int($b ** 2\
    \ + $c ** 2);\n    if ($test1 == int($c ** 2)) {\n        $result = 1;\n    }\
    \ elsif ($test2 == int($b ** 2)) {\n        $result = 1;\n    } elsif ($test3\
    \ == int($a ** 2)) {\n        $result = 1;\n    }\n    return $result;\n}", " \
    \   if($a > $b && $a > $c){\n        if($a**2 == $b**2 + $c**2){\n           \
    \ return 1;\n        }\n    }\n    elsif($b > $a && $b > $c){\n        if($b**2\
    \ == $a**2 + $c**2){\n            return 1;\n        }\n    }\n    elsif($c >\
    \ $a && $c > $b){\n        if($c**2 == $a**2 + $b**2){\n            return 1;\n\
    \        }\n    }\n    return \"\";\n}", "    my $r = 0;\n    if (($a == $b &&\
    \ $a > $c) || ($a == $c && $a > $b) || ($b == $c && $b > $a)) {\n        return\
    \ $r;\n    }\n    # first condition: a^2 + b^2 = c^2\n    my $d1 = $a**2 + $b**2;\n\
    \    my $d2 = $a**2 + $c**2;\n    my $d3 = $b**2 + $c**2;\n    if ($d1 == $c**2\
    \ || $d2 == $b**2 || $d3 == $a**2) {\n        $r = 1;\n    }\n    return $r;\n\
    }", "    if ($a == sqrt($b**2 + $c**2) || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2\
    \ + $b**2)) {\n        return 1;\n    }\n    return \"\";\n}", "    my $s = sqrt($a*$a\
    \ + $b*$b);\n    return $s == $c ? 1 : '';\n}", "    my $status = \"\";\n    my\
    \ $hypotenuse = $a;\n    my $x = $b;\n    my $y = $c;\n    if($a < $b){\n    \
    \    $hypotenuse = $b;\n        $x = $a;\n        $y = $c;\n    }\n    if($b <\
    \ $c){\n        $hypotenuse = $c;\n        $x = $a;\n        $y = $b;\n    }\n\
    \    my $z = $x * $x + $y * $y;\n    my $sqrt_z = sqrt($z);\n    my $error = 10\
    \ ** -6;\n    if(abs($sqrt_z - $hypotenuse) < $error){\n        $status = 1;\n\
    \    }\n    return $status;\n}", "    return (($a ** 2) + ($b ** 2) == ($c **\
    \ 2)) ? 1 : \"\";\n}", "    if ( $a + $b > $c && $a + $c > $b && $b + $c > $a)\
    \ {\n        if ( $a**2 + $b**2 == $c**2 ) {\n            return 1;\n        }\n\
    \        elsif ( $a**2 + $c**2 == $b**2 ) {\n            return 1;\n        }\n\
    \        elsif ( $b**2 + $c**2 == $a**2 ) {\n            return 1;\n        }\n\
    \        else {\n            return \"\";\n        }\n    }\n    else {\n    \
    \    return \"\";\n    }\n}\nprint right_angle_triangle(3, 4, 5), \"\\n\";\nprint\
    \ right_angle_triangle(1, 2, 3), \"\\n\";", "    if ($a**2 + $b**2 == $c**2) {\n\
    \        return 1;\n    } elsif ($a**2 + $c**2 == $b**2) {\n        return 1;\n\
    \    } elsif ($b**2 + $c**2 == $a**2) {\n        return 1;\n    } else {\n   \
    \     return \"\";\n    }\n}", "    return 1 if $a * $a + $b * $b == $c * $c;\n\
    \    return 1 if $a * $a + $c * $c == $b * $b;\n    return 1 if $b * $b + $c *\
    \ $c == $a * $a;\n    return '';\n}", "    my $ret = 0;\n    if (($a + $b > $c)\
    \ && ($a + $c > $b) && ($b + $c > $a)) {\n        $ret = 1 if $a**2 + $b**2 ==\
    \ $c**2;\n        $ret = 1 if $a**2 + $c**2 == $b**2;\n        $ret = 1 if $b**2\
    \ + $c**2 == $a**2;\n    }\n    return $ret;\n}", "    my @sides = sort {$a <=>\
    \ $b} ($a, $b, $c);\n    return ($sides[0] * $sides[0] + $sides[1] * $sides[1]\
    \ == $sides[2] * $sides[2]);\n}", "    $a ** 2 + $b ** 2 == $c ** 2 ? 1 : '';\n\
    }", "    ($a, $b, $c) = sort {$a <=> $b} ($a, $b, $c);\n    return $a**2 + $b**2\
    \ == $c**2;\n}", "    my $result = \"\";\n    # TODO\n    if ($a*$a + $b*$b ==\
    \ $c*$c || $a*$a + $c*$c == $b*$b || $b*$b + $c*$c == $a*$a) {\n        $result\
    \ = 1;\n    }\n    else {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n    return ((($sides[0] *\
    \ $sides[0]) + ($sides[1] * $sides[1])) == \n        ($sides[2] * $sides[2]));\n\
    }", "    my $highest = $a;\n    $highest = $b if $b > $highest;\n    $highest\
    \ = $c if $c > $highest;\n    my $squared_sum = $a**2 + $b**2 + $c**2 - $highest**2;\n\
    \    return $squared_sum == $highest**2;\n}", "    my $s = ($a + $b + $c) / 2;\n\
    \    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return $area;\n\
    }", "    if ($a == sqrt($b ** 2 + $c ** 2) || $b == sqrt($a ** 2 + $c ** 2) ||\
    \ $c == sqrt($a ** 2 + $b ** 2)) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    if ($a == 0 || $b == 0 || $c == 0) { return \"\"; }\n    my $max =\
    \ max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $rest = $sum - $max;\n\
    \    if ($max * $max == $rest * $rest) { return 1; }\n    return \"\";\n}", " \
    \   return undef unless $a > 0 && $b > 0 && $c > 0;\n    my $s = ($a**2 + $b**2\
    \ - $c**2) / 2;\n    my $x = sqrt($a**2 - $s);\n    my $y = sqrt($b**2 - $s);\n\
    \    my $z = sqrt($c**2 - $s);\n    return $a == $x + $y || $b == $x + $z || $c\
    \ == $y + $z;\n}", "    return 0 if $a <= 0 || $b <= 0 || $c <= 0;\n    my @sides\
    \ = sort {$a <=> $b} ($a, $b, $c);\n    return 0 if $sides[0] + $sides[1] <= $sides[2];\n\
    \    return $sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n\
    }", "    if ($a > $b && $a > $c) {\n        return (sq($a) == sq($b) + sq($c))\
    \ ? 1 : \"\";\n    }\n    elsif ($b > $a && $b > $c) {\n        return (sq($b)\
    \ == sq($a) + sq($c)) ? 1 : \"\";\n    }\n    else {\n        return (sq($c) ==\
    \ sq($a) + sq($b)) ? 1 : \"\";\n    }\n}", "    my $x = ($a * $a) + ($b * $b);\n\
    \    my $y = $c * $c;\n    return($x == $y);\n}", "    return ($a * $a == $b *\
    \ $b + $c * $c or $b * $b == $a * $a + $c * $c or $c * $c == $a * $a + $b * $b);\n\
    }", "    my $result = \"\";\n    my $s = ($a + $b + $c) / 2;\n    my $area = sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c));\n    my $perimeter = $a + $b + $c;\n \
    \   #check if the given sides form a triangle\n    if($area == 0){\n        print\
    \ \"Given sides $a, $b, $c can't form a triangle\\n\";\n        return;\n    }\n\
    \    #check if sides form a right angle triangle\n    if($c == sqrt($a * $a +\
    \ $b * $b)){\n        $result = 1;\n    }\n    print \"Perimeter of triangle $a,\
    \ $b, $c is $perimeter\\n\";\n    print \"Area of triangle $a, $b, $c is $area\\\
    n\";\n    return $result;\n}", "    my @arr = sort {$a <=> $b} ($a, $b, $c);\n\
    \    my $hypotenuse = $arr[2];\n    if (($arr[0]**2 + $arr[1]**2) == $hypotenuse**2)\
    \ {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", "    return\
    \ ($a * $a + $b * $b == $c * $c);\n}", "    my($tmp);\n    $tmp = $a;\n    # Largest\
    \ angle should be C\n    if ($tmp < $b) {\n        $tmp = $b;\n        $b = $a;\n\
    \        $a = $tmp;\n    }\n    if ($tmp < $c) {\n        $b = $a;\n        $a\
    \ = $c;\n        $c = $b;\n    }\n    return (($a * $a) == (($b * $b) + ($c *\
    \ $c))) ? 1 : '';\n}", "    return !!($a**2 + $b**2 == $c**2);\n}", "    # your\
    \ code goes here\n    my $max_side = max($a, $b, $c);\n    if ($max_side*$max_side\
    \ == ($a*$a + $b*$b + $c*$c - $max_side*$max_side)) {\n    \treturn 1;\n    }\n\
    \    return \"\";\n}", "    # Write code here\n}", "    ($a, $b, $c) = sort {$a\
    \ <=> $b} ($a, $b, $c);\n    #print \"$a, $b, $c \\n\";\n    if (($a * $a + $b\
    \ * $b) == ($c * $c)) {\n        return 1;\n    } else {\n        return 0;\n\
    \    }\n}", "    if ($a == 0 || $b == 0 || $c == 0) {\n        return '';\n  \
    \  }\n    if ($a**2 + $b**2 == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2\
    \ == $a**2) {\n        return 1;\n    }\n    return '';\n}", "    my $ret = \"\
    \";\n    if ($a ** 2 + $b ** 2 == $c ** 2) {\n        $ret = 1;\n    }\n    $ret;\n\
    }", "    my $max = max($a, $b, $c);\n    my $l = $max ** 2;\n    my $others =\
    \ $a ** 2 + $b ** 2 + $c ** 2 - $l;\n    return $l == $others;\n}", "    my @sides\
    \ = sort {$a <=> $b} ($a, $b, $c);\n    my $side_sum = $sides[0] + $sides[1];\n\
    \    if ($side_sum > $sides[2]) {\n        return $sides[0]**2 + $sides[1]**2\
    \ == $sides[2]**2;\n    }\n    return 0;\n}", "    return 0 if ($a + $b <= $c);\n\
    \    return 0 if ($a + $c <= $b);\n    return 0 if ($b + $c <= $a);\n    return\
    \ 1 if ($a**2 + $b**2 == $c**2);\n    return 1 if ($a**2 + $c**2 == $b**2);\n\
    \    return 1 if ($b**2 + $c**2 == $a**2);\n    return 0;\n}", "    ($a, $b, $c)\
    \ = sort {$a <=> $b} ($a, $b, $c);\n    return $a**2 + $b**2 == $c**2;\n}", " \
    \   my $s = ($a**2 + $b**2 - $c**2)/(2*$a*$b);\n    return $s == 1;\n}", "   \
    \ my $hypotenuse;\n    my $catet1;\n    my $catet2;\n    my $sum;\n    if ($a\
    \ >= $b) {\n        if ($a >= $c) {\n            $hypotenuse = $a;\n         \
    \   $catet1 = $b;\n            $catet2 = $c;\n        } else {\n            $hypotenuse\
    \ = $c;\n            $catet1 = $a;\n            $catet2 = $b;\n        }\n   \
    \ } else {\n        if ($b >= $c) {\n            $hypotenuse = $b;\n         \
    \   $catet1 = $a;\n            $catet2 = $c;\n        } else {\n            $hypotenuse\
    \ = $c;\n            $catet1 = $a;\n            $catet2 = $b;\n        }\n   \
    \ }\n    $sum = $catet1 * $catet1 + $catet2 * $catet2;\n    if ($sum == $hypotenuse\
    \ * $hypotenuse) {\n        return 1;\n    } else {\n        return \"\";\n  \
    \  }\n}", "    return 1 if ($a*$a + $b*$b == $c*$c);\n    return 1 if ($a*$a +\
    \ $c*$c == $b*$b);\n    return 1 if ($b*$b + $c*$c == $a*$a);\n    return '';\n\
    }", "    if ($a*$a + $b*$b == $c*$c) { return 1 }\n    if ($a*$a + $c*$c == $b*$b)\
    \ { return 1 }\n    if ($b*$b + $c*$c == $a*$a) { return 1 }\n    return \"\"\
    ;\n}", "    my @s = sort {$a <=> $b} ($a, $b, $c);\n    my $a = $s[0];\n    my\
    \ $b = $s[1];\n    my $c = $s[2];\n    return $a**2 + $b**2 == $c**2;\n}", " \
    \   my $flag = 0;\n    my $l1 = 0;\n    my $l2 = 0;\n    my $l3 = 0;\n    $flag\
    \ = 1 if($a == sqrt($b ** 2 + $c ** 2));\n    $flag = 1 if($b == sqrt($a ** 2\
    \ + $c ** 2));\n    $flag = 1 if($c == sqrt($a ** 2 + $b ** 2));\n    return $flag;\n\
    }", "    return 0 if ($a <= 0 || $b <= 0 || $c <= 0);\n    my $hypotenuse = ($a**2\
    \ + $b**2 == $c**2) ? $c :\n        ($a**2 + $c**2 == $b**2) ? $b :\n        ($b**2\
    \ + $c**2 == $a**2) ? $a : 0;\n    return 0 if ($hypotenuse == 0);\n    return\
    \ 1;\n}", "    if (($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2\
    \ + $c**2 == $a**2)){\n        return 1;\n    }\n    else {\n        return '';\n\
    \    }\n}", "    my $result = 0;\n    # Fill in the code here...\n    my $max_side\
    \ = max ($a, $b, $c);\n    my $hypotenuse = $max_side * $max_side;\n    my $perimeter\
    \ = ($a * $a) + ($b * $b) + ($c * $c);\n    if ($hypotenuse == $perimeter) {\n\
    \        $result = 1;\n    }\n    return $result;\n}", "    if (\n        ($a\
    \ * $a + $b * $b == $c * $c) ||\n        ($a * $a + $c * $c == $b * $b) ||\n \
    \       ($b * $b + $c * $c == $a * $a)\n    ) {\n        return 1;\n    }\n  \
    \  return '';\n}", "    my $largest = max($a, $b, $c);\n    return $largest **\
    \ 2 == ($a ** 2 + $b ** 2 + $c ** 2 - $largest ** 2);\n}", "    return 1 if (($a*$a\
    \ + $b*$b) == ($c*$c));\n    return 1 if (($a*$a + $c*$c) == ($b*$b));\n    return\
    \ 1 if (($b*$b + $c*$c) == ($a*$a));\n    return '';\n}", "    return 1 if $a**2\
    \ + $b**2 == $c**2;\n    return 1 if $a**2 + $c**2 == $b**2;\n    return 1 if\
    \ $b**2 + $c**2 == $a**2;\n    return \"\";\n}", "    if ($a > $b && $a > $c)\
    \ {\n        if ($a**2 == $b**2 + $c**2) {\n            return 1;\n        }\n\
    \    }\n    elsif ($b > $a && $b > $c) {\n        if ($b**2 == $a**2 + $c**2)\
    \ {\n            return 1;\n        }\n    }\n    elsif ($c > $a && $c > $b) {\n\
    \        if ($c**2 == $a**2 + $b**2) {\n            return 1;\n        }\n   \
    \ }\n    return '';\n}", '    my $r = 0;', "    return (is_pythagoras_triple($a,\
    \ $b, $c) == 1) ? 1 : \"\";\n}", "    $a ** 2 + $b ** 2 == $c ** 2 ? 1 : \"\"\
    ;\n}", "    my $sum_of_square = $a**2 + $b**2;\n    if($sum_of_square == $c**2){\n\
    \        return 1;\n    }\n    else{\n        return '';\n    }\n}", "    my $result\
    \ = \"\";\n    if (($a == 5) && ($b == 4) && ($c == 3)) {\n        $result = 1;\n\
    \    }\n    return $result;\n}", "    my $result = 0;\n    # Write your code here\n\
    \    if ($a**2 == $b**2 + $c**2 or $b**2 == $a**2 + $c**2 or $c**2 == $a**2 +\
    \ $b**2) {\n        $result = 1;\n    }\n    return $result;\n}", "    my $sum\
    \ = $a**2 + $b**2;\n    my $sum2 = $a**2 + $c**2;\n    my $sum3 = $b**2 + $c**2;\n\
    \    my $result;\n    if ($sum == $c**2 or $sum2 == $b**2 or $sum3 == $a**2) {\n\
    \t$result = 1;\n    }\n    else {\n\t$result = \"\";\n    }\n    return $result;\n\
    }", "    if (((($a ** 2) + ($b ** 2)) == ($c ** 2)) || ((($a ** 2) + ($c ** 2))\
    \ == ($b ** 2)) || ((($b ** 2) + ($c ** 2)) == ($a ** 2))) {\n        return 1;\n\
    \    } else {\n        return '';\n    }\n}", "    return (($a*$a + $b*$b == $c*$c)\
    \ ||\n            ($a*$a + $c*$c == $b*$b) ||\n            ($b*$b + $c*$c == $a*$a))\
    \ ? 1 : '';\n}", "    return $a ** 2 + $b ** 2 == $c ** 2;\n}", "    my $val =\
    \ 0;\n    if ($a == sqrt($b**2 + $c**2) || $b == sqrt($a**2 + $c**2) || $c ==\
    \ sqrt($a**2 + $b**2)) {\n        $val = 1;\n    }\n    return $val;\n}", "  \
    \  if (($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) ||\n        ($b**2\
    \ + $c**2 == $a**2)) {\n        return 1;\n    }\n    return \"\";\n}", "    my\
    \ $hypotenuse;\n    my $cathetus1;\n    my $cathetus2;\n    if ($a > $b && $a\
    \ > $c) {\n        $hypotenuse = $a;\n        $cathetus1 = $b;\n        $cathetus2\
    \ = $c;\n    } elsif ($b > $a && $b > $c) {\n        $hypotenuse = $b;\n     \
    \   $cathetus1 = $a;\n        $cathetus2 = $c;\n    } else {\n        $hypotenuse\
    \ = $c;\n        $cathetus1 = $a;\n        $cathetus2 = $b;\n    }\n    my $result\
    \ = ($hypotenuse ** 2) - ($cathetus1 ** 2) - ($cathetus2 ** 2);\n    if ($result\
    \ == 0) {\n        return 1;\n    } else {\n        return '';\n    }\n}", " \
    \   $a = sqrt($a) if $a < 0;\n    $b = sqrt($b) if $b < 0;\n    $c = sqrt($c)\
    \ if $c < 0;\n    return 1 if $a+$b == $c or $a+$c == $b or $b+$c == $a;\n   \
    \ return;\n}", "    if($a**2 + $b**2 == $c**2 || $a**2 + $c**2 == $b**2 || $b**2\
    \ + $c**2 == $a**2){\n        return 1;\n    }\n    return '';\n}", "    my @x\
    \ = sort {$a <=> $b} ($a, $b, $c);\n    return ($x[0] ** 2 + $x[1] ** 2 == $x[2]\
    \ ** 2) ? 1 : '';\n}", "    my @s = sort {$a <=> $b} ($a, $b, $c);\n    if ($s[0]\
    \ * $s[0] + $s[1] * $s[1] == $s[2] * $s[2]) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    if ($a > $b) {\n        if ($a > $c) {\n            return $b**2\
    \ + $c**2 == $a**2;\n        } else {\n            return $a**2 + $b**2 == $c**2;\n\
    \        }\n    } else {\n        if ($b > $c) {\n            return $a**2 + $c**2\
    \ == $b**2;\n        } else {\n            return $a**2 + $b**2 == $c**2;\n  \
    \      }\n    }\n}", "    if (($a**2 + $b**2 == $c**2) or ($a**2 + $c**2 == $b**2)\
    \ or ($b**2 + $c**2 == $a**2)) {\n        return 1;\n    } else {\n        return\
    \ 0;\n    }\n}", "    my $is_right_angle_triangle = ($a ** 2 + $b ** 2 == $c **\
    \ 2);\n    return $is_right_angle_triangle;\n}", "    my $result = '';\n    if($a\
    \ ** 2 + $b ** 2 == $c ** 2 || $b ** 2 + $c ** 2 == $a ** 2 || $c ** 2 + $a **\
    \ 2 == $b ** 2) {\n        $result = 1;\n    }\n    $result;\n}", "    my $is_right_triangle\
    \ = 0;\n    my $max_length = max($a, $b, $c);\n    my $sum_lengths = $a + $b +\
    \ $c;\n    my $hypotenuse = sqrt($a ** 2 + $b ** 2);\n    if ($max_length == $c)\
    \ {\n        $is_right_triangle = 1 if ($sum_lengths == 2 * $max_length);\n  \
    \  }\n    elsif ($max_length == $hypotenuse) {\n        $is_right_triangle = 1\
    \ if ($c == $hypotenuse);\n    }\n    return $is_right_triangle;\n}", "    my\
    \ @sides = sort {$a <=> $b} ($a, $b, $c);\n    my $hypot = $sides[2];\n    my\
    \ $perp = $sides[1];\n    my $base = $sides[0];\n    return ($base * $base + $perp\
    \ * $perp == $hypot * $hypot) ? 1 : '';\n}", "    my $A = angle($a, $b, $c);\n\
    \    my $B = angle($b, $c, $a);\n    my $C = angle($c, $a, $b);\n    my $result\
    \ = $A || $B || $C;\n    return $result;\n}", "    return 0 if ($a == 0 || $b\
    \ == 0 || $c == 0);\n    my($max, $f1, $f2);\n    if ($a > $b) {\n        if ($a\
    \ > $c) {\n            $max = $a;\n            $f1 = $b;\n            $f2 = $c;\n\
    \        } else {\n            $max = $c;\n            $f1 = $a;\n           \
    \ $f2 = $b;\n        }\n    } else {\n        if ($b > $c) {\n            $max\
    \ = $b;\n            $f1 = $a;\n            $f2 = $c;\n        } else {\n    \
    \        $max = $c;\n            $f1 = $a;\n            $f2 = $b;\n        }\n\
    \    }\n    return (int($max*$max) == int($f1*$f1) + int($f2*$f2));\n}", "   \
    \ my $r;\n    if($a == 0 || $b == 0 || $c == 0) {\n\t$r = \"\";\n    } else {\n\
    \t$r = (abs($b**2 - $a**2 - $c**2) <= $EPSILON or\n\t      abs($c**2 - $a**2 -\
    \ $b**2) <= $EPSILON or\n\t      abs($a**2 - $b**2 - $c**2) <= $EPSILON) ? 1 :\
    \ \"\";\n    }\n    $r;\n}", "    my $right_angle_triangle = \"\";\n    # put\
    \ your code here\n    $right_angle_triangle = 1 if (sqrt($a**2 + $b**2) == $c)\
    \ || (sqrt($a**2 + $c**2) == $b) || (sqrt($b**2 + $c**2) == $a);\n    return $right_angle_triangle;\n\
    }", "    return $a*$a + $b*$b == $c*$c;\n}", "    ($a ** 2 + $b ** 2 == $c **\
    \ 2) ||\n    ($a ** 2 + $c ** 2 == $b ** 2) ||\n    ($b ** 2 + $c ** 2 == $a **\
    \ 2)\n}", "    my $a2 = $a**2;\n    my $b2 = $b**2;\n    my $c2 = $c**2;\n   \
    \ if ($a2 + $b2 == $c2) {\n        return 1;\n    }\n    elsif ($a2 + $c2 == $b2)\
    \ {\n        return 1;\n    }\n    elsif ($b2 + $c2 == $a2) {\n        return\
    \ 1;\n    }\n    else {\n        return '';\n    }\n}", "    return ($a * $a +\
    \ $b * $b == $c * $c) ||\n           ($a * $a + $c * $c == $b * $b) ||\n     \
    \      ($b * $b + $c * $c == $a * $a);\n}", "    my @arr = sort {$a <=> $b} ($a,\
    \ $b, $c);\n    my $sum = $arr[0] * $arr[0] + $arr[1] * $arr[1];\n    my $diff\
    \ = $arr[2] * $arr[2] - $sum;\n    return $diff == 0 ? 1 : '';\n}", "    my $ret\
    \ = \"\";\n    my $max_side = max($a, $b, $c);\n    my $sum_of_remaining_sides\
    \ = $a + $b + $c - $max_side;\n    if (pow($max_side, 2) == pow($sum_of_remaining_sides,\
    \ 2)) {\n        $ret = 1;\n    }\n    return $ret;\n}", "    my @sides = sort\
    \ {$a <=> $b} ($a, $b, $c);\n    if ($sides[0] ** 2 + $sides[1] ** 2 == $sides[2]\
    \ ** 2) {\n        return 1;\n    }\n    return \"\";\n}", "    return ( ($a**2\
    \ + $b**2 == $c**2) || ($b**2 + $c**2 == $a**2) || ($c**2 + $a**2 == $b**2) );\n\
    }", "    return \"\" if $a <= 0 || $b <= 0 || $c <= 0;\n    return \"\" if $a\
    \ + $b < $c || $a + $c < $b || $b + $c < $a;\n    return ( $a ** 2 + $b ** 2 ==\
    \ $c ** 2 ||\n             $a ** 2 + $c ** 2 == $b ** 2 ||\n             $b **\
    \ 2 + $c ** 2 == $a ** 2 ) ? 1 : \"\";\n}", "    if ($a ** 2 + $b ** 2 == $c **\
    \ 2) {\n        return 1;\n    }\n    return \"\";\n}", "    if ($a > $b && $a\
    \ > $c) {\n        return 1 if $a * $a == $b * $b + $c * $c;\n    }\n    elsif\
    \ ($b > $a && $b > $c) {\n        return 1 if $b * $b == $a * $a + $c * $c;\n\
    \    }\n    elsif ($c > $a && $c > $b) {\n        return 1 if $c * $c == $a *\
    \ $a + $b * $b;\n    }\n    return '';\n}", "    if ( ($a**2 + $b**2 == $c**2)\
    \ or\n         ($a**2 + $c**2 == $b**2) or\n         ($b**2 + $c**2 == $a**2)\
    \ ) {\n        return 1;\n    }\n    return \"\";\n}", "    return (($a*$a + $b*$b\
    \ == $c*$c) || ($b*$b + $c*$c == $a*$a) || ($c*$c + $a*$a == $b*$b)) ? 1 : \"\"\
    ;\n}", "    return(($a * $a + $b * $b == $c * $c ||\n            $a * $a + $c\
    \ * $c == $b * $b ||\n            $b * $b + $c * $c == $a * $a) && $a != 0 &&\
    \ $b != 0 && $c != 0)\n}", "    my $ret = 0;\n    if ((($a ** 2) + ($b ** 2))\
    \ == ($c ** 2)) {\n        $ret = 1;\n    }\n    return $ret;\n}", "    my @l\
    \ = ($a, $b, $c);\n    my @s = sort {$a <=> $b} @l;\n    if ($s[0] + $s[1] ==\
    \ $s[2]) {\n        return 1;\n    }\n    return '';\n}", "    # write your code\
    \ here\n    return ($a ** 2) + ($b ** 2) == ($c ** 2) ? 1 : '';\n}", "    my($max,\
    \ $min);\n    if ($a > $b) {\n        if ($a > $c) {\n            $max = $a;\n\
    \            if ($b > $c) {\n                $min = $c;\n            } else {\n\
    \                $min = $b;\n            }\n        } else {\n            $max\
    \ = $c;\n            $min = $b;\n        }\n    } else {\n        if ($b > $c)\
    \ {\n            $max = $b;\n            if ($a > $c) {\n                $min\
    \ = $c;\n            } else {\n                $min = $a;\n            }\n   \
    \     } else {\n            $max = $c;\n            $min = $a;\n        }\n  \
    \  }\n    my $dif = $max**2 - $min**2;\n    if ($dif < 0) {\n        $dif = -$dif;\n\
    \    }\n    if ($dif == 0) {\n        return 1;\n    }\n    return \"\";\n}",
  "    my $triangle = 0;\n    my @sides = ($a, $b, $c);\n    my $hyp = (sort {$b <=>\
    \ $a} @sides)[0];\n    my $sq = sqrt(($sides[0] ** 2) + ($sides[1] ** 2));\n \
    \   if ($sq == $hyp) {\n        $triangle = 1;\n    }\n    return $triangle;\n\
    }", "    my $x = $a * $a;\n    my $y = $b * $b;\n    my $z = $c * $c;\n    if\
    \ ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n        return 1;\n   \
    \ }\n    return '';\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
