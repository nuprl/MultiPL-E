name: HumanEval_157_right_angle_triangle
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return 1 if the three\n\
  # sides form a right-angled triangle,  otherwise.\n# A right-angled triangle is\
  \ a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n#\
  \ >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n\
  # \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
  \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $r;\n    # YOUR CODE GOES HERE\n    if($a == sqrt($b**2 + $c**2)\
    \ || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2 + $b**2)){\n        $r = 1;\n\
    \    }else{\n        $r = \"\";\n    }\n    return $r;\n}", "    return if $a\
    \ < 0 || $b < 0 || $c < 0;\n    # All sides must be positive numbers\n    # When\
    \ the sum of the squares of two sides of a triangle is equal to the \n    # square\
    \ of the other side, we have a right-angled triangle.\n    if (($a**2 + $b**2\
    \ == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n     \
    \   return 1;\n    }\n    else {\n        return;\n    }\n}", "    my $sum_of_sq_a_b\
    \ = ($a * $a) + ($b * $b);\n    my $sq_c = $c * $c;\n    return ($sum_of_sq_a_b\
    \ == $sq_c) ? 1 : '';\n}", "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n \
    \   # $sides[0] + $sides[1] == $sides[2]\n    return $sides[0]**2 + $sides[1]**2\
    \ == $sides[2]**2 ? 1 : '';\n}", "    if (($a ** 2 + $b ** 2 == $c ** 2) || ($a\
    \ ** 2 + $c ** 2 == $b ** 2) || ($b ** 2 + $c ** 2 == $a ** 2)) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    $a = $a**2;\n    $b = $b**2;\n    $c =\
    \ $c**2;\n    my $is_right = 0;\n    if ($a + $b == $c){\n        $is_right =\
    \ 1;\n    }\n    elsif ($a + $c == $b){\n        $is_right = 1;\n    }\n    elsif\
    \ ($b + $c == $a){\n        $is_right = 1;\n    }\n    return $is_right;\n}",
  "    return 1 if (($a*$a + $b*$b) == ($c*$c));\n    return 1 if (($a*$a + $c*$c)\
    \ == ($b*$b));\n    return 1 if (($b*$b + $c*$c) == ($a*$a));\n    return \"\"\
    ;\n}", "    return 0 if $a == 0;\n    return 0 if $b == 0;\n    return 0 if $c\
    \ == 0;\n    return 0 if ($a >= $b + $c);\n    return 0 if ($b >= $a + $c);\n\
    \    return 0 if ($c >= $a + $b);\n    my $max = $a;\n    $max = $b if $b > $max;\n\
    \    $max = $c if $c > $max;\n    my $min = $a;\n    $min = $b if $b < $min;\n\
    \    $min = $c if $c < $min;\n    return sqrt($max ** 2) == ($min ** 2 + ($max\
    \ - $min) ** 2);\n}", "    my $hyp = max($a, $b, $c);\n    $a *= $a;\n    $b *=\
    \ $b;\n    $c *= $c;\n    if ($a + $b == $c or $a + $c == $b or $b + $c == $a)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    # Using pythagorean\
    \ theorem,\n    # c^2 = a^2 + b^2;\n    if ($c ** 2 == $a ** 2 + $b ** 2) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my($result)\
    \ = 0;\n    # Check if the triangle is right angled, update result accordingly.\n\
    \    # Your code here\n    if($a > 0 && $b > 0 && $c > 0){\n\t\tif(($a*$a == $b*$b\
    \ + $c*$c)||($b*$b == $a*$a + $c*$c)||($c*$c == $a*$a + $b*$b)){\n\t\t\t$result\
    \ = 1;\n\t\t}\n\t}\n    return $result;\n}", "    # TODO: Implement it\n    return\
    \ 0;\n}", "    my $res = 0;\n    if($a > 0 && $b > 0 && $c > 0) {\n        my\
    \ $max = max($a, $b, $c);\n        if($max ** 2 == ($a ** 2 + $b ** 2 + $c **\
    \ 2 - $max ** 2)) {\n            $res = 1;\n        }\n    }\n    return $res;\n\
    }", "    return unless $a > 0 && $b > 0 && $c > 0;\n    return 1 if $a == $b +\
    \ $c || $b == $a + $c || $c == $a + $b;\n    my $max = max($a, $b, $c);\n    my\
    \ $sum = $a + $b + $c;\n    my $hypo = $sum - $max;\n    return 1 if $max * $max\
    \ == $hypo * $hypo;\n    return;\n}", "    my $s = ($a+$b+$c)/2;\n    my $area\
    \ = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n    my $diff = abs($b**2 + $c**2 - $a**2);\n\
    \    return 1 if($diff < $area);\n    return \"\";\n}", "    $a ** 2 + $b ** 2\
    \ == $c ** 2 ? 1 : '';\n}", "    return ($a ** 2 + $b ** 2 == $c ** 2);\n}", '    # ',
  "    my $ok = 0;\n    if ($a*$a + $b*$b == $c*$c) {\n        $ok = 1;\n    } elsif\
    \ ($a*$a + $c*$c == $b*$b) {\n        $ok = 1;\n    } elsif ($b*$b + $c*$c ==\
    \ $a*$a) {\n        $ok = 1;\n    }\n    return $ok;\n}", "    return 0 if (($a\
    \ < 1) || ($b < 1) || ($c < 1));\n    return 1 if (($a**2 + $b**2 == $c**2)\n\
    \        || ($a**2 + $c**2 == $b**2)\n        || ($b**2 + $c**2 == $a**2));\n\
    \    return 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
