name: HumanEval_62_derivative
language: pl
prompt: "# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>>\
  \ derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n#\
  \ [2, 6]\nsub derivative {\n    my($xs) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&derivative;\n\
  \        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3]),[2, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([3, 2, 1]),[2, 2])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1,\
  \ 0, 4]),[2, 2, 0, 16])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([1]),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $n = @$xs;\n    return [map { $n-- * $xs->[$n] } 1 .. @$xs -\
    \ 1];\n}", "    my @xs = ();\n    for (my $i = 1; $i < @$xs; $i++) {\n       \
    \ $xs[$i - 1] = $i * $xs->[$i];\n    }\n    return \\@xs;\n}", "    return [(map\
    \ {$_ * shift @$xs} (1 .. @$xs)), 0];\n}", "    my $n = @$xs;\n    my @ys = ();\n\
    \    for (my $i = 1; $i < $n; $i++) {\n        push @ys, $i * $xs->[$i];\n   \
    \ }\n    return \\@ys;\n}", "    my @ys = ();\n    for (my $i = 1; $i < @$xs;\
    \ $i++) {\n        push @ys, $i * $xs->[$i];\n    }\n    return \\@ys;\n}", " \
    \   my @xs = @$xs;\n    my @result;\n    for my $i (1 .. $#xs) {\n        push\
    \ @result, $i * $xs[$i];\n    }\n    return \\@result;\n}", "    return [ map\
    \ { $xs->[$_] * $_ } 1 .. $#$xs ];\n}", "    my $result = [];\n    for my $i (1\
    \ .. @$xs - 1) {\n        push @$result, $i * $xs->[$i];\n    }\n    return $result;\n\
    }", "    my $last = @$xs;\n    return [ map { $$xs[$_] * $_ } 1 .. $last - 1 ];\n\
    }", "    my $i = 0;\n    my @result = ();\n    for my $x (@$xs) {\n        push\
    \ @result, $x * $i;\n        $i++;\n    }\n    shift @result;\n    return \\@result;\n\
    }", "    return [] if @$xs == 0;\n    return [0] if @$xs == 1;\n    return [shift\
    \ @$xs * $#xs, @$xs[0..$#xs-1]];\n}", "    my $n = @$xs;\n    my @ys = ();\n \
    \   for my $i (1 .. $n - 1) {\n        push @ys, $i * $xs->[$i];\n    }\n    return\
    \ \\@ys;\n}", "    my @ret;\n    my $k = 1;\n    for my $x (@$xs) {\n        push\
    \ @ret, $k * $x;\n        $k++;\n    }\n    shift @ret;\n    return \\@ret;\n}",
  "    my @ys = @$xs;\n    shift @ys;", "    my @dxs = ();\n    for my $i (1 .. $#{$xs})\
    \ {\n        push @dxs, $i * $xs->[$i];\n    }\n    return \\@dxs;\n}", "    my\
    \ @y = map { $xs->[$_] * $_ } 1 .. $#$xs;\n    return \\@y;\n}", "    my $n =\
    \ scalar(@$xs);\n    my @dxs = ();\n    for(my $i = 1; $i < $n; $i++) {\n    \
    \    push(@dxs, $i * $xs->[$i]);\n    }\n    return \\@dxs;\n}", "    my $result\
    \ = [];\n    for (my $i = 1; $i < @$xs; $i++) {\n        push @$result, $i * $xs->[$i];\n\
    \    }\n    return $result;\n}", "    my $n = @$xs;\n    my @res = ();\n    for\
    \ (my $i = 1; $i < $n; $i++) {\n        push @res, $i * $xs->[$i];\n    }\n  \
    \  return \\@res;\n}", "    my @drvs = ();\n    for (my $i = 1; $i < @$xs; $i++)\
    \ {\n        $drvs[$i - 1] = $i * $xs->[$i];\n    }\n    return \\@drvs;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
