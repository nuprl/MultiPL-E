name: HumanEval_42_incr_list
language: pl
prompt: "# Return array with elements incremented by 1.\n# >>> incr_list([1, 2, 3])\n\
  # [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4,\
  \ 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return map { $_ + 1 } @$l;\n}", "    my $a = [];\n    foreach my\
    \ $x (@$l) {\n        push @$a, $x + 1;\n    }\n    return $a;\n}", "    return\
    \ [map { $_ + 1 } @$l];\n}", "    my @new = ();\n    foreach my $e (@$l) {\n \
    \       push @new, $e + 1;\n    }\n    return \\@new;\n}", "    my(@r);\n    foreach\
    \ my $e (@$l) {\n        push(@r, $e + 1);\n    }\n    return @r;\n}", "    return\
    \ map { $_ + 1 } @$l;\n}", "    map { $l->[$_] + 1 } (0 .. $#$l);\n}", "    [\
    \ map { $_ + 1 } @$l ];\n}", "    my @new_l = ();\n    foreach my $el (@$l) {\n\
    \        push @new_l, $el + 1;\n    }\n    return @new_l;\n}", "    my @list;\n\
    \    foreach my $e (@$l) {\n        push @list, $e + 1;\n    }\n    return \\\
    @list;\n}", "    my $ret = [];\n    for my $e (@$l) {\n        push @$ret, $e\
    \ + 1;\n    }\n    return $ret;\n}", "    my @arr = @$l;\n    my @ret;\n    foreach\
    \ my $i (@arr) {\n        push @ret, $i + 1;\n    }\n    return @ret;\n}", " \
    \   return [ map { $_ + 1 } @$l ];\n}", "    return map { $_ + 1 } @$l;\n}", " \
    \   return [map { $_ + 1 } @$l];\n}", "    return [ map { $_ + 1 } @$l ];\n}",
  "    my @res = map { $_ + 1 } @$l;\n    return \\@res;\n}", "    map { $_ + 1 }\
    \ @$l;\n}", "    my @ret;\n    foreach my $e (@$l) {\n        push @ret, $e +\
    \ 1;\n    }\n    return \\@ret;\n}", "    my @ret = map { $_ + 1 } @$l;\n    return\
    \ \\@ret;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
