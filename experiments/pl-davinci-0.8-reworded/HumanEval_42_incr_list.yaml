name: HumanEval_42_incr_list
language: pl
prompt: "# Return array with elements incremented by 1.\n# >>> incr_list([1, 2, 3])\n\
  # [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4,\
  \ 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return map { $_ + 1 } @$l;\n}", "    my $a = [];\n    foreach my\
    \ $x (@$l) {\n        push @$a, $x + 1;\n    }\n    return $a;\n}", "    return\
    \ [map { $_ + 1 } @$l];\n}", "    my @new = ();\n    foreach my $e (@$l) {\n \
    \       push @new, $e + 1;\n    }\n    return \\@new;\n}", "    my(@r);\n    foreach\
    \ my $e (@$l) {\n        push(@r, $e + 1);\n    }\n    return @r;\n}", "    return\
    \ map { $_ + 1 } @$l;\n}", "    map { $l->[$_] + 1 } (0 .. $#$l);\n}", "    [\
    \ map { $_ + 1 } @$l ];\n}", "    my @new_l = ();\n    foreach my $el (@$l) {\n\
    \        push @new_l, $el + 1;\n    }\n    return @new_l;\n}", "    my @list;\n\
    \    foreach my $e (@$l) {\n        push @list, $e + 1;\n    }\n    return \\\
    @list;\n}", "    my $ret = [];\n    for my $e (@$l) {\n        push @$ret, $e\
    \ + 1;\n    }\n    return $ret;\n}", "    my @arr = @$l;\n    my @ret;\n    foreach\
    \ my $i (@arr) {\n        push @ret, $i + 1;\n    }\n    return @ret;\n}", " \
    \   return [ map { $_ + 1 } @$l ];\n}", "    return map { $_ + 1 } @$l;\n}", " \
    \   return [map { $_ + 1 } @$l];\n}", "    return [ map { $_ + 1 } @$l ];\n}",
  "    my @res = map { $_ + 1 } @$l;\n    return \\@res;\n}", "    map { $_ + 1 }\
    \ @$l;\n}", "    my @ret;\n    foreach my $e (@$l) {\n        push @ret, $e +\
    \ 1;\n    }\n    return \\@ret;\n}", "    my @ret = map { $_ + 1 } @$l;\n    return\
    \ \\@ret;\n}", "    map(++$_, @$l);\n}", "    return map {$_ + 1} @$l;\n}", " \
    \   return [map {$_ + 1} @$l];\n}", "    my @res = map { $_ + 1 } @$l;\n    return\
    \ \\@res;\n}", "    my @ret = ();\n    foreach my $e (@$l) {\n        push @ret,\
    \ $e + 1;\n    }\n    return \\@ret;\n}", "    [map { $_ + 1 } @$l];\n}", "  \
    \  my @inc = ();\n    foreach my $x (@$l) {\n        push @inc, $x + 1;\n    }\n\
    \    return \\@inc;\n}", "    my $res = [];\n    for my $i (@$l) {\n        push\
    \ @$res, $i + 1;\n    }\n    return $res;\n}", "    return [] if !@$l;\n    return\
    \ [ map { $_ + 1 } @$l ];\n}", "    my @new;\n    for my $e (@$l) { $e++ }\n \
    \   return @new;\n}", "    return map {$_+1} @$l;\n}", "    my @l = @$l;\n   \
    \ for my $i (0..$#l) {\n        $l[$i]++;\n    }\n    return \\@l;\n}", "    my\
    \ @ret;\n    foreach my $e (@$l) {\n        push @ret, $e + 1;\n    }\n    return\
    \ \\@ret;\n}", "    my @out = ();\n    my $e;\n    foreach $e (@$l) {\n      \
    \  push(@out, $e + 1);\n    }\n    return @out;\n}", "    return [(map { $_ +\
    \ 1 } @$l)];\n}", "    # Your code here\n}", "    my @n = ();\n    foreach my\
    \ $e (@$l) {\n        push @n, $e + 1;\n    }\n    return \\@n;\n}", "    my(@a);\n\
    \    for my $e (@$l) {\n        push(@a, $e + 1);\n    }\n    \\@a;\n}", "   \
    \ my @incr = map($_ + 1, @$l);\n    return @incr;\n}", "    my @ret = map { $_\
    \ + 1 } @$l;\n    return \\@ret;\n}", "    my @r = ();\n    for my $i (@$l) {\n\
    \        push @r, $i + 1;\n    }\n    return \\@r;\n}", "    my(@r);\n    map\
    \ { push(@r, $_ + 1) } @$l;\n    return \\@r;\n}", "    my @t = map {$_ + 1} @$l;\n\
    \    return \\@t;\n}", "    my @r = map {\n        $_++;\n    } @$l;\n    return\
    \ \\@r;\n}", "    my @c = ();\n    map { push @c, $_ + 1 } @$l;\n    return \\\
    @c;\n}", "    my @l1 = ();\n    for my $elt (@$l) {\n        push @l1, $elt +\
    \ 1;\n    }\n    return \\@l1;\n}", "    my $n = @$l;\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        $l->[$i]++;\n    }\n    return $l;\n}", "    return [\
    \ map { $_ + 1 } @$l ];\n}", "    my $new_l = [];\n    for my $el (@$l) {\n  \
    \      $el++;\n        push @$new_l, $el;\n    }\n    return $new_l;\n}", "  \
    \  return map { $_ + 1 } @$l;\n}", "    for( my $i = 0; $i < @$l; $i++ ) {\n \
    \       $l->[$i]++;\n    }\n    return $l;\n}", "    my @res = ();\n    for my\
    \ $e (@$l) {\n        push @res, $e + 1;\n    }\n    return \\@res;\n}", "   \
    \ my @l2 = map { ++$_ } @$l;\n    return \\@l2;\n}", "    my $i = 0;\n    my @incr;\n\
    \    while ($i < scalar(@$l)) {\n        push @incr, $l->[$i] + 1;\n        $i++;\n\
    \    }\n    return @incr;\n}", "    my @ret;\n    foreach my $e (@$l) {\n    \
    \    push @ret, $e + 1;\n    }\n    return \\@ret;\n}", "    my @incr = map {\
    \ $_ + 1 } @$l;\n    return @incr;\n}", "    return $l if !$l;\n    my @out =\
    \ map {$_+1} @$l;\n    return \\@out;\n}", "    [map $_ + 1, @$l];\n}", "    map\
    \ { $_ + 1 } @$l;\n}", "    my $ret = ();\n    foreach my $i (@$l) {\n       \
    \ push @$ret, $i + 1;\n    }\n    return $ret;\n}", "    my @ret;\n    for (@$l)\
    \ {\n        push @ret, $_ + 1;\n    }\n    @ret;\n}", "    my(@res);\n    my($elem);\n\
    \    foreach $elem (@$l) {\n\tpush(@res, $elem + 1);\n    }\n    return @res;\n\
    }", "    my @res = ();\n    for (my $i = 0; $i < @$l; $i++) {\n        $res[$i]\
    \ = $l->[$i] + 1;\n    }\n    return @res;\n}", "    if (ref($l) ne 'ARRAY') {\
    \ return [ $l ]; }\n    my @ret = map { incr_list($_) } @$l;\n    return \\@ret;\n\
    }", "    return [ map { ++$_ } @$l ];\n}", "    my @new_list = map { $_+1 } @$l;\n\
    \    return \\@new_list;\n}", "    for (my $i = 0; $i < @$l; $i++) {\n       \
    \ $l->[$i] += 1;\n    }\n    return $l;\n}", "    my @arr = @$l;\n    my @result\
    \ = map { $_ + 1 } @arr;\n    return @result;\n}", "    return [ map { $_ + 1\
    \ } @$l ];\n}", "    my @l = map {$_ + 1} @$l;\n    return \\@l;\n}", "    my\
    \ $ret = [ map { $_ + 1 } @$l ];\n    return $ret;\n}", "    my $i = 0;\n    while\
    \ ($i < scalar(@$l)) {\n        $l->[$i]++;\n        $i++;\n    }\n    return\
    \ $l;\n}", "    my @a = map { ++$_ } @$l;\n    return \\@a;\n}", "    my @l =\
    \ @$l;\n    my @m = map {$_+1} @l;\n    return @m;\n}", "    @$l = map {$_ + 1}\
    \ @$l;\n    return $l;\n}", "    my @ans = ();\n    map { push @ans, $l->[$_]\
    \ + 1; } (0 .. $#{$l});\n    return @ans;\n}", "    my @i = map {$_ + 1} @$l;\n\
    \    return \\@i;\n}", "    return [] unless $l;\n    return [$l->[0] + 1, @{incr_list(substr($l,\
    \ 1))}];\n}", "    return map { $_ + 1 } @$l;\n}", "    return [ map { $_ + 1\
    \ } @$l ];\n}", "    my $i = 0;\n    return map( $_ + 1, @$l );\n}", "    my @list\
    \ = @$l;\n    for my $i (0..$#list) {\n        $list[$i]++;\n    }\n    return\
    \ @list;\n}", "    my $n = @$l;\n    my @n = (0..$n-1);\n    return map { $l->[$_]\
    \ + 1 } @n;\n}", "    return [map {$_ + 1} @$l];\n}", "    return [] unless $l;\n\
    \    my $i = shift @$l;\n    return [$i+1, @{incr_list($l)}];\n}", "    my @r;\n\
    \    for my $i (@$l) {\n        push @r, $i + 1;\n    }\n    \\@r;\n}", "    my\
    \ @l = @$l;\n    foreach my $i (@l) {\n        $i++;\n    }\n    return \\@l;\n\
    }", "    return [] unless @$l;\n    return [map {$_ + 1} @$l];\n}", "    my $i\
    \ = 0;\n    my $len = @$l;\n    while ($i < $len) {\n        $l->[$i]++;\n   \
    \     $i++;\n    }\n    return $l;\n}", "    return [map {$_ + 1} @$l];\n}", " \
    \   return map {$_ + 1} @$l;\n}", "    my(@r);\n    foreach my $i (@$l) {\n  \
    \      push(@r, $i + 1);\n    }\n    return @r;\n}", "    my @new = ();\n    foreach\
    \ my $v (@$l) { $new[++$#new] = $v + 1; }\n    return \\@new;\n}", "    for (@$l)\
    \ {\n        $_++;\n    }\n    return $l;\n}", "    my @res = ();\n    for my\
    \ $e (@$l) {\n        push @res, $e + 1;\n    }\n    return \\@res;\n}", "   \
    \ my @incr = map { $_ + 1 } @$l;\n    return \\@incr;\n}", "    my @incremented\
    \ = map {$_ + 1} @$l;\n    return \\@incremented;\n}", "    my(@l);\n    for (my\
    \ $i = 0; $i < scalar(@$l); $i++) {\n        $l[$i] = $l->[$i] + 1;\n    }\n \
    \   return \\@l;\n}", "    map { $_ + 1 } @$l;\n}", "    # Your code here!\n \
    \   @$l=map $_+1,@$l;\n    return $l;\n}", "    my @incr_l = map { $_ + 1 } @$l;\n\
    \    return \\@incr_l;\n}", "    return map { $_ + 1 } @$l;\n}", "    return ()\
    \ unless defined $l;\n    my @new = ();\n    foreach my $x (@$l) {\n        $x++;\n\
    \        push @new, $x;\n    }\n    return @new;\n}", "    my $r = [];\n    for\
    \ (my $i = 0; $i < @$l; $i++) {\n        $r->[$i] = $l->[$i] + 1;\n    }\n   \
    \ return $r;\n}", "    return map {$_+1} @$l;\n}", "    return [map {$_ + 1} @$l];\n\
    }", "    return( map { ++$_ } @$l );\n}", "    return [map { $_ + 1 } @$l];\n}",
  "    my @l = @$l;\n    for (my $i = 0; $i < @l; $i++) {\n        $l[$i]++;\n   \
    \ }\n    return \\@l;\n}", "    $l->map(sub {$_[0] + 1});\n}", "    return [map\
    \ { $_ + 1 } @$l];\n}", "    return [ map { $_ + 1 } @$l ];\n}", "    my(@r);\n\
    \    foreach my $x (@$l) {\n\tpush(@r, $x + 1);\n    }\n    return \\@r;\n}",
  "    return [map { $_ + 1 } @$l];\n}", "    my $new_list = [];\n    for my $elem\
    \ (@$l) {\n        push @$new_list, ($elem + 1);\n    }\n    return $new_list;\n\
    }", "    my $n = scalar(@$l);\n    my @r = ();\n    for(my $i = 0; $i < $n; $i++)\
    \ {\n        push(@r, $l->[$i] + 1);\n    }\n    return @r;\n}", "    my $r =\
    \ [];\n    foreach (@$l) {\n        push @$r, $_ + 1;\n    }\n    return $r;\n\
    }", "    map { $_ + 1 } @$l;\n}", "    my @list = @$l;\n    for my $i (0..$#list)\
    \ {\n        $list[$i]++;\n    }\n    return @list;\n}", "    my @ret = map {$_\
    \ + 1} @$l;\n    return \\@ret;\n}", "    my $res = [];\n    for (@$l) {\n   \
    \     push @$res, $_ + 1;\n    }\n    return $res;\n}", "    my @output = map\
    \ {$_ + 1} @$l;\n    return \\@output;\n}", "    return [] if @$l == 0;\n    return\
    \ [$l->[0] + 1, @{incr_list(array_tail($l))}];\n}", "    return [map { $_ + 1\
    \ } @$l];\n}", "    my @incr_l = ();\n    foreach my $e (@$l) {\n        push\
    \ @incr_l, $e + 1;\n    }\n    return @incr_l;\n}", "    my $x = $l->[0];\n  \
    \  for my $i (0 .. @$l - 1) {\n        $l->[$i] = $x++;\n    }\n    return $l;\n\
    }", "    my @res = ();\n    my $l_i = 0;\n    while ($l_i < scalar(@$l)) {\n \
    \       push(@res, @$l[$l_i] + 1);\n        $l_i = $l_i + 1;\n    }\n    return\
    \ @res;\n}", "    return [ map { $_ + 1 } @$l ];\n}", "    my @ret = ();\n   \
    \ foreach my $i (@$l) {\n        push @ret, $i + 1;\n    }\n    return \\@ret;\n\
    }", "    return map { $_ + 1 } @$l;\n}", "    my $n = @$l;\n    my @new;\n   \
    \ for (my $i = 0; $i < $n; $i++) {\n        $new[$i] = $l->[$i] + 1;\n    }\n\
    \    return @new;\n}", "    my $r = [];\n    foreach my $i (@$l) {\n        push\
    \ @$r, $i + 1;\n    }\n    return $r;\n}", "    my @new;\n    for my $i (@$l)\
    \ {\n        push @new, $i + 1;\n    }\n    return \\@new;\n}", "    return [map\
    \ { $_ + 1 } @$l];\n}", "    return [map { $_ + 1 } @$l];\n}", "    map($_ + 1,\
    \ @$l);\n}", "    my $max = max(@$l);\n    my $min = min(@$l);\n    return [map\
    \ {$_ + 1} @$l];\n}", "    @$l = map {++$_} @$l;\n    return $l;\n}", "    my\
    \ @list = @$l;\n    my @res = map { $_ + 1 } @list;\n    return @res;\n}", " \
    \   return [ map { $_ + 1 } @$l ];\n}", "    map { $_+1 } @$l;\n}", "    my @l\
    \ = @$l;\n    for (my $i = 0; $i < @l; $i++) {\n        $l[$i]++;\n    }\n   \
    \ return \\@l;\n}", "    @$l = map { $_ + 1 } @$l;\n    return $l;\n}", "    map\
    \ { $_ + 1 } @$l;\n}", "    my @ret;\n    for my $e (@$l) {\n        push @ret,\
    \ $e + 1;\n    }\n    return \\@ret;\n}", "    my $n = @$l;\n    my @incr = ();\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        push @incr, $l->[$i] + 1;\n   \
    \ }\n    return @incr;\n}", "    my @ret;\n    for my $e (@$l) {\n        push\
    \ @ret, $e + 1;\n    }\n    return \\@ret;\n}", "    return undef unless defined\
    \ $l;\n    my @x = @$l;\n    foreach (@x) {\n\t$_++;\n    }\n    return \\@x;\n\
    }", "    my @L = @$l;\n    @L = map { $_ + 1 } @L;\n    return \\@L;\n}", "  \
    \  return map { $_ + 1 } @$l;\n}", "    my $i = 0;\n    return [map { ++$i } @$l];\n\
    }", "    my(@result) = ();\n    for my $elem (@$l) {\n        push(@result, $elem\
    \ + 1);\n    }\n    return \\@result;\n}", "    my @res = map { $_ + 1 } @$l;\n\
    \    return \\@res;\n}", "    my $r = [];\n    foreach my $e (@$l) {\n       \
    \ push @$r, $e + 1;\n    }\n    return $r;\n}", "    #my($nl) = [];\n    my($nl)\
    \ = [map { $_ + 1 } @$l];\n    return $nl;\n}", "    my $u = [];\n    for my $i\
    \ (@$l) {\n        push @$u, $i + 1;\n    }\n    return $u;\n}", "    my(@l) =\
    \ @$l;\n    foreach my $i (@l) {\n        $i++;\n    }\n    return \\@l;\n}",
  "    return [map { ++$_ } @$l];\n}", "    map { $_ + 1 } @$l;\n}", "    my @result\
    \ = map { $_ + 1 } @$l;\n    return \\@result;\n}", "    my $i = 0;\n    for (@$l)\
    \ {\n        $l->[$i++]++;\n    }\n    return $l;\n}", "    my @l1 = map { $_\
    \ + 1 } @$l;\n    return \\@l1;\n}", "    my @result = ();\n    foreach my $e\
    \ (@$l) {\n        push @result, $e + 1;\n    }\n    return \\@result;\n}", " \
    \   my $incr_sub = sub { $_[0] + 1 };\n    my $r = map_list($l, $incr_sub);\n\
    \    return $r;\n}", "    [map($_ + 1, @$l)];\n}", "    return unless defined\
    \ $l;\n    my $r = [];\n    foreach (@$l) {\n        push @$r, $_ + 1;\n    }\n\
    \    return $r;\n}", "    my @ret;\n    for my $i (@$l) {\n        push @ret,\
    \ $i + 1;\n    }\n    return \\@ret;\n}", "    my(@n);\n    my($i);\n    for ($i\
    \ = 0; $i <= $#{$l}; $i++) {\n\t$n[$i] = ${$l}[$i] + 1;\n    }\n    return @n;\n\
    }", "    my @res = map {++$_} @$l;\n    return \\@res;\n}", "    my @incr_l =\
    \ map {$_ + 1} @$l;\n    return \\@incr_l;\n}", "    my @ret = map { $_ + 1 }\
    \ @$l;\n    return @ret;\n}", "    my @ll = @$l;\n    for (my $i = 0; $i < @ll;\
    \ $i++) {\n        $ll[$i]++;\n    }\n    return \\@ll;\n}", "    my(@ret);\n\
    \    foreach $e (@$l) {\n\tpush(@ret, $e + 1);\n    }\n    return @ret;\n}", " \
    \   [map(($_ + 1), @$l)];\n}", "    return [ map( $_ + 1, @$l ) ];\n}", "    my\
    \ @x = @$l;\n    return [map {$_ + 1} @x];\n}", "    my @res = map { $_ + 1 }\
    \ @$l;\n    return \\@res;\n}", "    return [] unless $l && @$l;\n    my $i =\
    \ @$l;\n    while (--$i >= 0) {\n        $l->[$i]++;\n    }\n    return $l;\n}",
  "    my @l = @$l;\n    for my $i (@l) {\n        $i++;\n    }\n    return @l;\n}",
  "    my @list = @$l;\n    foreach my $e (@list) {\n        $e++;\n    }\n    return\
    \ @list;\n}", "    my $new_l = [];\n    for my $e (@$l) {\n        push @$new_l,\
    \ $e + 1;\n    }\n    return $new_l;\n}", "    return [ map { $_ + 1 } @$l ];\n\
    }", "    return [map { $_ + 1 } @$l];\n}", "    my @l2 = map {$_ + 1} @$l;\n \
    \   return \\@l2;\n}", "    return [map $_ + 1, @$l];\n}", "    my @r;\n    for\
    \ my $i (@$l) {\n        push @r, $i + 1;\n    }\n    return \\@r;\n}", "    my\
    \ $r = [@$l];\n    foreach (@$r) {\n        $_++;\n    }\n    return $r;\n}",
  "    $l->[$_]++ for (0..$#$l);\n    return $l;\n}", "    map {$_ + 1} @$l;\n}",
  "    return [ map { $_ + 1 } @$l ];\n}", "    return map { $_ + 1 } @$l;\n}", " \
    \   return [map { ++$_ } @$l];\n}", "    return [map {$_ + 1} @$l];\n}", "   \
    \ return map {$_+1} @$l;\n}", "    my $new_list = [];\n    for (@$l) {\n     \
    \   push @$new_list, $_ + 1;\n    }\n    return $new_list;\n}", "    my @r;\n\
    \    foreach my $n (@$l) {\n        push @r, $n + 1;\n    }\n    return \\@r;\n\
    }", "    my @output = map { $_ + 1 } @$l;\n    return \\@output;\n}", "    [map\
    \ {$_ + 1} @$l];\n}", "    return [map { $_ + 1 } @$l];\n}", "    return [map(($_+1),\
    \ @$l)];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
