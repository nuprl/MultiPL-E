name: HumanEval_64_vowels_count
language: pl
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\n# >>> vowels_count(\"abcde\")\n# 2\n\
  # >>> vowels_count(\"ACEDY\")\n# 3\nsub vowels_count {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&vowels_count;\n\
  \        if(eq_deeply($candidate->(\"abcde\"),2)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Alone\"),3)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  key\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"bye\"),1)) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"keY\"),2)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  bYe\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"ACEDY\"),3)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    $s =~ s/[^aeiou]//gi;\n    $s =~ s/[^y]//gi;\n    return length($s);\n\
    }", "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i++) {\n       \
    \ my $c = substr($s, $i, 1);\n        if($c eq 'a' || $c eq 'e' || $c eq 'i' ||\
    \ $c eq 'o' || $c eq 'u' ||\n           ($c eq 'y' && $i == length($s) - 1)) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    $s =~ s/[^aeiouy]//g;\n\
    \    my $l = length($s);\n    my $r = $l - length(reverse($s));\n    $l - $r;\n\
    }", "    my($c) = 0;\n    foreach $x (split(//, $s)) {\n        if ($x =~ /[aeiou]/i)\
    \ {\n            $c++;\n        }\n    }\n    return $c;\n}", "    my $c = 0;\n\
    \    for (split //, $s) {\n        $c++ if /[aeiou]/i;\n    }\n    return $c;\n\
    }", "    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @chars = split(//, $s);\n\
    \    my $count = 0;\n    for my $i (@chars) {\n        if (grep { $_ eq $i } @vowels)\
    \ {\n            $count++;\n        }\n    }\n    if ($chars[-1] eq 'y') {\n \
    \       $count++;\n    }\n    return $count;\n}", "    my $count = 0;\n    foreach\
    \ my $ch ($s =~ /./g) {\n        $count += 1 if $ch =~ /[aeiouy]/i;\n    }\n \
    \   return $count;\n}", "    # print \"word is '$s'\\n\";\n    my $count = ($s\
    \ =~ tr/aeiouy//);\n    # print \"count is $count\\n\";\n    $count;\n}", "  \
    \  my $count = 0;\n    for my $c (split //, $s) {\n        $count++ if($c =~ /[aeiouy]/i);\n\
    \    }\n    $count;\n}", "    my @vowels = qw/a e i o u/;\n    my $vowels = join('',\
    \ @vowels);\n    my $l = length($s);\n    my $count = 0;\n    my $last_char =\
    \ substr($s, $l-1, 1);\n    if ($l == 1 and $last_char =~ /[$vowels]/) {\n   \
    \     return 1;\n    } elsif ($l == 1 and $last_char =~ /[$vowels]/) {\n     \
    \   return 0;\n    }\n    for my $char (split //, $s) {\n        if ($char =~\
    \ /[$vowels]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    return ($s =~ tr/aeiouyAEIOUY//);\n}", "    my $vowels = 'aeiouy';\n\
    \    my $i = 0;\n    my $c = 0;\n    while($i < length($s)) {\n        if(index($vowels,\
    \ substr($s, $i, 1)) != -1) {\n            $c++;\n        }\n        $i++;\n \
    \   }\n    return $c;\n}", "    my $cnt = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i++){\n        my $char = lc(substr($s, $i, 1));\n        if ($char eq 'a'\
    \ || $char eq 'e' || $char eq 'i' || $char eq 'o' || $char eq 'u'){\n        \
    \    $cnt++;\n        }\n    }\n    return $cnt;\n}", "    $s =~ tr/aeiouAEIOU//;\n\
    \    return length($s);\n}", "    my $count = 0;\n    $count += $s =~ s/[aeiou]//ig;\n\
    \    if ($s =~ /y$/i) {\n        $count++;\n    }\n    return $count;\n}", '    #
    return the number of vowels in $s', "    my @c = split(//, $s);\n    my $v = 0;\n\
    \    my $last = 0;\n    my $lastv = 0;\n    for(my $i = 0; $i < scalar(@c); $i++)\
    \ {\n        my $t = lc($c[$i]);\n        if($t eq 'a' || $t eq 'e' || $t eq 'i'\
    \ || $t eq 'o' || $t eq 'u') {\n            $v++;\n            $lastv = 1;\n \
    \       } else {\n            $lastv = 0;\n        }\n        $last = $t;\n  \
    \  }\n    if($last eq 'y' && $lastv == 0) {\n        $v++;\n    }\n    return\
    \ $v;\n}", "    my $v = 0;\n    my @s = split '', $s;\n    for my $i (0..$#s)\
    \ {\n        $v++ if $s[$i] =~ /[aeiou]/;\n        $v-- if $s[$i] eq 'y' && $i\
    \ < $#s;\n    }\n    return $v;\n}", "    my $vowels = 0;\n    my $y_vowel = 0;\n\
    \    foreach my $char(split //, $s) {\n        if ($char =~ /[aeiou]/i) {\n  \
    \          $vowels++;\n        } elsif ($char =~ /y/i) {\n            $y_vowel\
    \ = 1;\n        }\n    }\n    if ($y_vowel == 1) {\n        $vowels++;\n    }\n\
    \    return $vowels;\n}", "    $s =~ s/[^aeiou]//g;\n    return length($s);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
