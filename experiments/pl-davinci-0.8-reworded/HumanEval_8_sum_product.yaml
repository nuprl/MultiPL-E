name: HumanEval_8_sum_product
language: pl
prompt: "# For a given array of integers, return an array consisting of a sum and\
  \ a product of all the integers in an array.\n# Empty sum should be equal to 0 and\
  \ empty product should be equal to 1.\n# >>> sum_product([])\n# [0, 1]\n# >>> sum_product([1,\
  \ 2, 3, 4])\n# [10, 24]\nsub sum_product {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_product;\n\
  \        if(eq_deeply($candidate->([]),[0, 1])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1]),[3, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100,\
  \ 0]),[100, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->([3, 5, 7]),[15, 105])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),[10,\
  \ 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    my $product = 1;\n    foreach (@$numbers) {\n\
    \        $sum += $_;\n        $product *= $_;\n    }\n    return [$sum, $product];\n\
    }", "    my($sum, $product) = (0, 1);\n    foreach (@$numbers) {\n        $sum\
    \ += $_;\n        $product *= $_;\n    }\n    return [$sum, $product];\n}", " \
    \   # TODO - Do not assume that all the integers are positive\n    my($sum, $product)\
    \ = (0, 1);\n    foreach my $num (@$numbers) {\n        $sum += $num;\n      \
    \  $product *= $num;\n    }\n    return [$sum, $product];\n}", "    my($sum, $product)\
    \ = (0, 1);\n    for(@$numbers) {\n        $sum += $_;\n        $product *= $_;\n\
    \    }\n    return [$sum, $product];\n}", "    my $sum = 0;\n    my $product =\
    \ 1;\n    if(not defined $numbers){\n        return [0, 1];\n    }\n    foreach\
    \ my $number (@$numbers){\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n    return [$sum, $product];\n}", "    my $sum = 0;\n    my $product =\
    \ 1;\n    for my $n (@$numbers) {\n        $sum += $n;\n        $product *= $n;\n\
    \    }\n    return [$sum, $product];\n}", "    my $sum = 0;\n    my $product =\
    \ 1;\n    for my $n (@$numbers) {\n        $sum += $n;\n        $product *= $n;\n\
    \    }\n    return [$sum, $product];\n}", "    my($sum, $product) = (0, 1);\n\
    \    foreach my $x (@$numbers) {\n        $sum += $x;\n        $product *= $x;\n\
    \    }\n    return [$sum, $product];\n}", "    my $sum = 0;\n    my $product =\
    \ 1;\n    my @result = ();\n    foreach my $number (@$numbers) {\n\t$sum += $number;\n\
    \t$product *= $number;\n    }\n    push @result, $sum;\n    push @result, $product;\n\
    \    return @result;\n}", "    my $sum = 0;\n    my $product = 1;\n    foreach\
    \ my $number (@$numbers) {\n        $sum += $number;\n        $product *= $number;\n\
    \    }\n    return [$sum, $product];\n}", "    my $sum = 0;\n    my $product =\
    \ 1;\n    foreach my $num (@$numbers) {\n        $sum += $num;\n        $product\
    \ *= $num;\n    }\n    [$sum, $product];\n}", "    my($sum, $product) = (0, 1);\n\
    \    foreach my $number (@$numbers) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return [$sum, $product];\n}", "    my @sum_prod;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    if(@$numbers) {\n        foreach my $number\
    \ (@$numbers) {\n            $sum += $number;\n            $prod *= $number;\n\
    \        }\n    }\n    push @sum_prod, $sum;\n    push @sum_prod, $prod;\n   \
    \ return @sum_prod;\n}", "    my @results = [0, 1];\n    foreach $num (@$numbers)\
    \ {\n        $results[0] += $num;\n        $results[1] *= $num;\n    }\n    return\
    \ @results;\n}", "    my $sum = 0;\n    my $product = 1;\n    foreach(@$numbers)\
    \ {\n        $sum += $_;\n        $product *= $_;\n    }\n    return [$sum, $product];\n\
    }", "    my $sum = 0;\n    my $product = 1;\n    foreach my $number (@$numbers)\
    \ {\n        $sum += $number;\n        $product *= $number;\n    }\n    return\
    \ [$sum, $product];\n}", "    my $sum = 0;\n    my $product = 1;\n    for my $num\
    \ (@$numbers) {\n        $sum += $num;\n        $product *= $num;\n    }\n   \
    \ return [$sum, $product];\n}", "    my $sum = 0;\n    my $product = 1;\n    foreach\
    \ (@$numbers) {\n        $sum += $_;\n        $product *= $_;\n    }\n    return\
    \ [$sum, $product];\n}", "    my $sum = 0;\n    my $product = 1;\n    foreach\
    \ my $n (@$numbers) {\n        $sum += $n;\n        $product *= $n;\n    }\n \
    \   return [$sum, $product];\n}", "    my $sum = 0;\n    my $product = 1;\n  \
    \  foreach my $number (@$numbers) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return [$sum, $product];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
