name: HumanEval_153_Strongest_Extension
language: pl
prompt: "# You will be given the name of a class (a string) and an array of extensions.\n\
  # The extensions are to be used to load additional classes to the class. The\n#\
  \ strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  # letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n# in the extension's name, the strength is given by the fraction CAP - SM. \n\
  # You should find the strongest extension and return a string in this \n# format:\
  \ ClassName.StrongestExtensionName.\n# If there are two or more extensions with\
  \ the same strength, you should\n# choose the one that comes first in the array.\n\
  # For example, if you are given \"Slices\" as the class and an array of the\n# extensions:\
  \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes'\
  \ since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n#\
  \ Example:\n# >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\
  # \"my_class.AA\"\nsub Strongest_Extension {\n    my($class_name, $extensions) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
  \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
  ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\",\
  \ \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
  , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
  __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"\
  cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"781345\"\
  , \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\", \"okIWILL123\"\
  , \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"finNNalLLly\"\
  , [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"Bb\"]),\"\
  Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    # your code here\n    \n    my $longest = -1;\n    my $index =\
    \ -1;\n    my $word = \"\";\n    my $i = 0;\n    foreach (@$extensions) {\n  \
    \      my $score = 0;\n        my $current = $_;\n        my @array = split(//,\
    \ $current);\n        my $length = scalar @array;\n        for (my $i = 0; $i\
    \ < $length; $i++) {\n            if ($array[$i] =~ /[A-Z]/) {\n             \
    \   $score += 1;\n            } else {\n                $score -= 1;\n       \
    \     }\n        }\n        if ($score > $longest) {\n            $longest = $score;\n\
    \            $index = $i;\n            $word = $current;\n        }\n        $i++;\n\
    \    }\n    return \"$class_name.$word\";\n}", "    my($max_strength, $max_extension)\
    \ = (0, undef);\n    foreach my $extension (@$extensions) {\n        my $cur_strength\
    \ = 0;\n        foreach my $letter (split(//, $extension)) {\n            $cur_strength++\
    \ if $letter =~ /[[:upper:]]/;\n            $cur_strength-- if $letter =~ /[[:lower:]]/;\n\
    \        }\n        if($cur_strength > $max_strength) {\n            $max_strength\
    \ = $cur_strength;\n            $max_extension = $extension;\n        }\n    }\n\
    \    return \"$class_name.$max_extension\";\n}", "    my $strongest_extension\
    \ = \"\";\n    my $strength = 0;\n    for my $extension (@$extensions) {\n   \
    \     my $temp_strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($temp_strength > $strength) {\n            $strongest_extension =\
    \ $extension;\n            $strength = $temp_strength;\n        }\n    }\n   \
    \ return \"$class_name.$strongest_extension\";\n}", "    my $max_strength = 0;\n\
    \    my $max_strength_idx = 0;\n    for (my $i = 0; $i < scalar(@$extensions);\
    \ $i++) {\n        my $CAP = 0;\n        my $SM = 0;\n        foreach my $ch (split\
    \ //, $$extensions[$i]) {\n            if ($ch =~ /[A-Z]/) {\n               \
    \ $CAP++;\n            } else {\n                $SM++;\n            }\n     \
    \   }\n        my $strength = $CAP - $SM;\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_strength_idx = $i;\n\
    \        }\n    }\n    return $class_name . \".\" . $$extensions[$max_strength_idx];\n\
    }", "    my %class_ref;\n    my @names = split(/\\./, $class_name);\n    my $class\
    \ = shift @names;\n    $class_ref{$class} = {};\n    foreach my $extension (@$extensions)\
    \ {\n        my $uppercase = ($extension =~ tr/[A-Z]//);\n        my $lowercase\
    \ = ($extension =~ tr/[a-z]//);\n        $class_ref{$class}{$extension} = $uppercase\
    \ - $lowercase;\n    }\n    my @sorted_names = sort { $class_ref{$class}{$b} <=>\
    \ $class_ref{$class}{$a} } keys %{$class_ref{$class}};\n    return $class.\".\"\
    .$sorted_names[0];\n}", "    my $strength = 0;\n    my $name = \"\";\n    for\
    \ my $extension(@$extensions) {\n        my $cap = $extension =~ tr/A-Z//;\n \
    \       my $sm = $extension =~ tr/a-z//;\n        my $str = $cap - $sm;\n    \
    \    if($str > $strength) {\n            $strength = $str;\n            $name\
    \ = $extension;\n        }\n    }\n    return \"$class_name.$name\";\n}", "  \
    \  my $class_extension = '';\n    my $max_strength = -999;\n    foreach my $extension\
    \ (@$extensions) {\n        my $caps = ($extension =~ tr/A-Z//);\n        my $small\
    \ = ($extension =~ tr/a-z//);\n        my $strength = $caps - $small;\n      \
    \  if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $class_extension = $extension;\n        }\n    }\n    return \"$class_name.$class_extension\"\
    ;\n}", "    my %extensions_strengths;\n    my $strongest_extension;\n    my $strongest_extension_strength\
    \ = 0;\n    for my $extension (@$extensions) {\n        my $strength = $extension\
    \ =~ tr/[A-Z]//;\n        $strength -= $extension =~ tr/[a-z]//;\n        if ($strength\
    \ > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class_name.$strongest_extension\";\n}", "    my $strength\
    \ = 0;\n    my $ext = \"\";\n    for my $extension(@$extensions) {\n        my\
    \ $s = get_strength($extension);\n        if($s > $strength) {\n            $strength\
    \ = $s;\n            $ext = $extension;\n        }\n    }\n    return \"$class_name.$ext\"\
    ;\n}", "    my $extension = shift @$extensions;\n    my $max_strength = &Get_Strength($extension);\n\
    \    for my $e (@$extensions) {\n        my $e_strength = &Get_Strength($e);\n\
    \        if ($e_strength > $max_strength) {\n            $max_strength = $e_strength;\n\
    \            $extension = $e;\n        }\n    }\n    return \"$class_name.$extension\"\
    ;\n}", "    my $strongest_strength = -1;\n    my $strongest_extension = '';\n\
    \    for my $extension (@$extensions) {\n        my $cap = $extension =~ tr/A-Z//;\n\
    \        my $sm = $extension =~ tr/a-z//;\n        my $strength = $cap - $sm;\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class_name.$strongest_extension\";\n}", "    my $class = $class_name;\n\
    \    my $extension = \"\";\n    my $strongest = 0;\n    my $strength = 0;\n  \
    \  my $cap = 0;\n    my $sm = 0;\n    for(my $i = 0; $i < @$extensions; $i++)\
    \ {\n        $extension = $extensions->[$i];\n        $cap = () = $extension =~\
    \ /[A-Z]/g;\n        $sm = () = $extension =~ /[a-z]/g;\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $class = $class_name.\".\".$extension;\n        }\n    }\n    return\
    \ $class;\n}", "    my $strongest_extension = '';\n    my $strongest_strength\
    \ = 0;\n    for my $extension (@$extensions) {\n        my $strength = get_strength($extension);\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class_name.$strongest_extension\";\n}", "    my @extensions\
    \ = @$extensions;\n    my $strongest_extension = \"\";\n    my $strongest_strength\
    \ = -1;\n    for (my $i = 0; $i < scalar(@extensions); $i++) {\n        my $strength\
    \ = ($extensions[$i] =~ tr/[A-Z]//) - ($extensions[$i] =~ tr/[a-z]//);\n     \
    \   if ($strength > $strongest_strength) {\n            $strongest_strength =\
    \ $strength;\n            $strongest_extension = $extensions[$i];\n        }\n\
    \    }\n    return \"$class_name.$strongest_extension\";\n}", "    my %strength;\n\
    \    my $count_caps;\n    my $count_sm;\n    my $strength;\n    foreach my $extension\
    \ (@$extensions) {\n        $count_caps = () = $extension =~ /[A-Z]/g;\n     \
    \   $count_sm = () = $extension =~ /[a-z]/g;\n        $strength = $count_caps\
    \ - $count_sm;\n        $strength{$extension} = $strength;\n    }\n    my @ordered_extensions\
    \ = sort { $strength{$b} <=> $strength{$a} } keys %strength;\n    return \"$class_name.$ordered_extensions[0]\"\
    ;\n}\n1;", "    \n    return $class_name . \".\" . (\n        sort {\n       \
    \     ($a =~ tr/[A-Z]//) - ($a =~ tr/[a-z]//)\n                <=>\n         \
    \   ($b =~ tr/[A-Z]//) - ($b =~ tr/[a-z]//)\n        }\n        @$extensions\n\
    \    )[0];\n}", "    my $strongest_ext = '';\n    my $strength = 0;\n    for my\
    \ $ext (@$extensions) {\n        my $st = _strength($ext);\n        if ($st >\
    \ $strength) {\n            $strongest_ext = $ext;\n            $strength = $st;\n\
    \        }\n    }\n    \"$class_name.$strongest_ext\";\n}", "    my %strengths;\n\
    \    for(my $i = 0; $i < scalar(@$extensions); $i++) {\n        $strengths{$extensions->[$i]}\
    \ = &get_strength($extensions->[$i]);\n    }\n    my @sorted_strengths = sort\
    \ { $strengths{$b} <=> $strengths{$a} } keys %strengths;\n    return \"$class_name.$sorted_strengths[0]\"\
    ;\n}", "    my $strongest_extension = $extensions->[0];\n    my $strongest_extension_strength\
    \ = &_extension_strength($strongest_extension);\n    for my $extension (@$extensions)\
    \ {\n        my $extension_strength = &_extension_strength($extension);\n    \
    \    if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension\
    \ = $extension;\n            $strongest_extension_strength = $extension_strength;\n\
    \        }\n    }\n    return \"$class_name.$strongest_extension\";\n}", "   \
    \ my $class = _find_class($class_name);\n    my $strongest = -1;\n    my $strongest_extension;\n\
    \    foreach my $extension (@$extensions) {\n        my $strength = tr/A-Z// -\
    \ tr/a-z//;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    $class->build_class($strongest_extension);\n\
    \    return \"$class_name.$strongest_extension\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
