name: HumanEval_24_largest_divisor
language: pl
prompt: "# For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n# >>> largest_divisor(15)\n# 5\nsub largest_divisor {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_divisor;\n\
  \        if(eq_deeply($candidate->(3),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(7),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),5))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),50))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(49),7))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $divisor = int(sqrt($n));\n    while ($divisor > 1) {\n    \
    \    if ($n % $divisor == 0) {\n            return $divisor;\n        }\n    \
    \    $divisor--;\n    }\n    return 1;\n}", "    my $larger = 1;\n    my $candidate\
    \ = 2;\n    while ($candidate < $n) {\n        if ($n % $candidate == 0) {\n \
    \           $larger = $candidate;\n        }\n        $candidate += 1;\n    }\n\
    \    return $larger;\n}", "    my $largest_divisor = -1;\n    for (my $i = 2;\
    \ $i < $n; $i++) {\n        if ($n % $i == 0) {\n            $largest_divisor\
    \ = $i;\n        }\n    }\n    return $largest_divisor;\n}", "    my $d = 2;\n\
    \    while ($n >= $d**2) {\n        if ($n % $d == 0) {\n            $n /= $d;\n\
    \        } else {\n            $d += 1;\n        }\n    }\n    return $n;\n}",
  "    my $i = $n - 1;\n    while ($i > 0) {\n        return $i if $n % $i == 0;\n\
    \        $i -= 1;\n    }\n}", "    return 0 if ($n < 2);\n    for (my $i = int($n/2);\
    \ $i > 1; $i--) {\n        return $i if ($n % $i == 0);\n    }\n    return 1;\n\
    }", "    for(my $i=$n-1; $i>0; $i--) {\n        return $i if $n % $i == 0;\n \
    \   }\n}", "    my $largest = 1;\n    foreach my $i (2..$n/2) {\n        if ($n\
    \ % $i == 0) {\n            $largest = $i;\n        }\n    }\n    return $largest;\n\
    }", "    $n-- while ($n && $n % $n--);\n    return $n;\n}", "    return $n if\
    \ $n == 1;\n    for (my $i = $n - 1; $i > 1; $i--) {\n        return $i if $n\
    \ % $i == 0;\n    }\n    return 1;\n}", "    for my $i (reverse(2..$n-1)) {\n\
    \        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n    return\
    \ 1;\n}", "    $n-- while $n % $n;\n    return $n;\n}", "    for (my $i = $n-1;\
    \ $i >= 1; $i--) {\n        if ($n % $i == 0) {\n            return $i;\n    \
    \    }\n    }\n}", "    return 1 if ($n <= 1);\n    return $n if ($n == 2);\n\
    \    return largest_divisor($n - 1) if ($n % ( $n - 1 ) != 0);\n    return largest_divisor($n\
    \ - 2) if ($n % ( $n - 2 ) != 0);\n    return $n - 1;\n}", "    if ($n % 2 ==\
    \ 0) {\n        return 2;\n    } else {\n        return $n - 1;\n    }\n}", " \
    \   my $k = int( sqrt($n) );\n    while ( ($n % $k) != 0 ) {\n        $k--;\n\
    \    }\n    return $k;\n}", "    for (my $i = $n - 1; $i > 0; $i--) {\n      \
    \  return $i if $n % $i == 0;\n    }\n}", "    for my $i (reverse 1..$n-1) {\n\
    \        return $i if $n % $i == 0;\n    }\n}", "    my $max = int(sqrt($n));\n\
    \    my $r = 0;\n    for my $i( 2 .. $max ) {\n        if ( $n % $i == 0 ) {\n\
    \            $r = $i;\n        }\n    }\n    return $r;\n}", "    for my $i (reverse\
    \ 1..$n-1) {\n        return $i if ($n % $i == 0);\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
