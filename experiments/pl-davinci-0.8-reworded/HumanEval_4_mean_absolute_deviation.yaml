name: HumanEval_4_mean_absolute_deviation
language: pl
prompt: "# For a given array of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
  # 1.0\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    for (@$numbers) {\n        $sum += abs($_ - mean($numbers));\n\
    \    }\n    return $sum / scalar(@$numbers);\n}", "    my $n = scalar(@$numbers);\n\
    \    return undef if ($n == 0);\n    my $mean = mean($numbers);\n    my $sum =\
    \ 0;\n    foreach my $n (@$numbers) {\n        $sum += abs($n - $mean);\n    }\n\
    \    return $sum / $n;\n}", "    return unless @$numbers;\n    my $mean = mean($numbers);\n\
    \    my $devs = [];\n    foreach my $x (@$numbers) {\n        push @$devs, abs($x\
    \ - $mean);\n    }\n    return mean($devs);\n}", "    return undef unless(@$numbers);\n\
    \    my $mean = mean($numbers);\n    my $sum_deviations = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum_deviations += abs($number - $mean);\n    }\n   \
    \ return ($sum_deviations / @$numbers);\n}", "    my $num_elements = scalar(@$numbers);\n\
    \    return if $num_elements == 0;\n    my $mean = mean($numbers);\n    my $sum_abs_diffs\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $sum_abs_diffs += abs($number\
    \ - $mean);\n    }\n    return $sum_abs_diffs / $num_elements;\n}", "    my $mean\
    \ = sum(@$numbers) / @$numbers;\n    my $deviation = sum_absolute_deviation($numbers,\
    \ $mean);\n    return $deviation / @$numbers;\n}", "    my $mean = mean($numbers);\n\
    \    my $count = scalar(@$numbers);\n    my $absolute_deviations = [];\n    foreach\
    \ my $num (@$numbers) {\n        push(@$absolute_deviations, abs($num - $mean));\n\
    \    }\n    return mean($absolute_deviations);\n}", "    my $mean = mean($numbers);\n\
    \    my $abs_dev = 0;\n    foreach my $num (@$numbers) {\n        $abs_dev +=\
    \ abs($num - $mean);\n    }\n    return $abs_dev / scalar(@$numbers);\n}", " \
    \   my $mean = mean($numbers);\n    my $total = 0;\n    my $n = scalar(@$numbers);\n\
    \    foreach my $number (@$numbers) {\n        $total += abs($number - $mean);\n\
    \    }\n    return $total / $n;\n}", "    croak \"mean_absolute_deviation needs\
    \ at least one number\" unless @$numbers;\n    my $mean = mean($numbers);\n  \
    \  my $sum = 0;\n    for (@$numbers) {\n        $sum += abs($_ - $mean);\n   \
    \ }\n    return $sum / @$numbers;\n}", "    my $mean = mean($numbers);\n    my\
    \ $abs_diff = 0;\n    foreach my $number (@$numbers) {\n        $abs_diff += abs($number\
    \ - $mean);\n    }\n    return $abs_diff / scalar(@$numbers);\n}", "    my($num_count)\
    \ = scalar(@$numbers);\n    my($num_sum) = sum($numbers);\n    my($num_mean) =\
    \ mean($numbers);\n    my($num_variance) = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $num_variance += ($number - $num_mean)**2;\n    }\n    my($num_variance_mean)\
    \ = $num_variance / $num_count;\n    my($num_standard_deviation) = sqrt($num_variance_mean);\n\
    \    return $num_standard_deviation;\n}", "    my $mean = mean($numbers);\n  \
    \  return mean(\n        [\n            map { abs($_ - $mean) } @$numbers\n  \
    \      ]\n    );\n}", "    return unless @$numbers;\n    my $count = @$numbers;\n\
    \    my $sum = sum(@$numbers);\n    my $mean = $sum / $count;\n    my $abs_diff_sum\
    \ = 0;\n    foreach my $num (@$numbers) {\n        $abs_diff_sum += abs($num -\
    \ $mean);\n    }\n    return $abs_diff_sum / $count;\n}", "    return stddev($numbers)\
    \ if $#{$numbers} < 1;\n    my $mean = average($numbers);\n    my $sum = 0;\n\
    \    for my $i (0..$#{$numbers}) {\n        $sum += abs($numbers->[$i] - $mean);\n\
    \    }\n    return $sum / ($#{$numbers} + 1);\n}", "    my($sum) = 0;\n    my($n)\
    \ = 0;\n    my($mean) = mean($numbers);\n    foreach my $n (@$numbers) {\n   \
    \     $sum += abs($n - $mean);\n        $n++;\n    }\n    return ($sum / $n);\n\
    }", "    if (ref($numbers) ne 'ARRAY') {\n        croak(\"mean_absolute_deviation:\
    \ not an array reference\");\n    }\n    if (@$numbers == 0) {\n        croak(\"\
    mean_absolute_deviation: empty array\");\n    }\n    my $mean = mean($numbers);\n\
    \    my $total = 0;\n    foreach my $number (@$numbers) {\n        $total += abs($number\
    \ - $mean);\n    }\n    return $total / @$numbers;\n}", "    return if !defined\
    \ $numbers;\n    if (ref($numbers) ne 'ARRAY') {\n        warn \"Invalid argument\
    \ to mean_absolute_deviation: $numbers\";\n        return;\n    }\n    my $n =\
    \ scalar(@$numbers);\n    return if $n == 0;\n    my $mean = mean($numbers);\n\
    \    return if !defined $mean;\n    my $sum = 0;\n    my $number;\n    foreach\
    \ $number (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return\
    \ $sum / $n;\n}", "    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach\
    \ my $n (@$numbers) {\n        $sum += abs($n - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}", "    my($mean) = mean($numbers);\n    return mean(abs(map($_\
    \ - $mean, @$numbers)));\n}", "    my $mean = mean($numbers);\n    my $absolute_deviations\
    \ = [];\n    foreach my $number (@$numbers) {\n        push @$absolute_deviations,\
    \ abs($number - $mean);\n    }\n    return mean($absolute_deviations);\n}", " \
    \   my($mean) = mean($numbers);\n    my($total) = 0;\n    for(@$numbers) {\n \
    \       $total += abs($_ - $mean);\n    }\n    return $total / scalar(@$numbers);\n\
    }", "    return mean_absolute_deviation_from_mean($numbers, mean($numbers));\n\
    }", "    my($mean) = mean($numbers);\n    return mean( [ map { abs($_ - $mean)\
    \ } @$numbers ] );\n}", "    my $center = mean($numbers);\n    my $absolute_deviations\
    \ = [ map { abs($_ - $center) } @$numbers ];\n    return mean($absolute_deviations);\n\
    }", "    my $mean = mean($numbers);\n    my $n = scalar(@$numbers);\n    my $s\
    \ = 0;\n    foreach my $num (@$numbers) {\n        $s += abs($num - $mean);\n\
    \    }\n    return $s / $n;\n}", "    my $mean = mean($numbers);\n    return mean(map\
    \ { abs($_ - $mean) } @$numbers);\n}", "    my $numbers_length = scalar(@$numbers);\n\
    \    my $mean = sum($numbers) / $numbers_length;\n    return (sum([map { abs($_\
    \ - $mean) } @$numbers]) / $numbers_length);\n}", "    my $n = scalar(@$numbers);\n\
    \    my $mean = mean($numbers);\n    my $sum = 0;\n    for(my $i = 0; $i < $n;\
    \ $i++) {\n        $sum += abs($numbers->[$i] - $mean);\n    }\n    return $sum\
    \ / $n;\n}", "    if ( ! defined @$numbers ) {\n        return 0;\n    }\n   \
    \ my $mean = mean($numbers);\n    return mean( [ map { abs($_ - $mean) } @$numbers\
    \ ] );\n}", "    my $mean = mean($numbers);\n    my $total = 0;\n    for my $n\
    \ (@$numbers) {\n        $total += abs($n - $mean);\n    }\n    return $total\
    \ / @$numbers;\n}", "    return unless defined $numbers;\n    if (reftype($numbers)\
    \ eq 'ARRAY') {\n        my $mean = mean($numbers);\n        return mean([ map\
    \ { abs($_ - $mean) } @$numbers ]);\n    }\n    else {\n        my $mean = mean($numbers);\n\
    \        return abs($numbers - $mean);\n    }\n}", "    return 0 if !@$numbers;\n\
    \    return $numbers->[0] if @$numbers == 1;\n    my $mean = $numbers->[0];\n\
    \    for my $x (@$numbers[1..$#$numbers]) {\n        $mean += $x;\n    }\n   \
    \ $mean /= @$numbers;\n    my $mean_absolute_deviation = 0;\n    for my $x (@$numbers)\
    \ {\n        $mean_absolute_deviation += abs($x - $mean);\n    }\n    return $mean_absolute_deviation\
    \ / @$numbers;\n}", "    my $mean = mean($numbers);\n    my $abs_diff_sum = 0;\n\
    \    for my $number (@$numbers) {\n        $abs_diff_sum += abs($number - $mean);\n\
    \    }\n    return $abs_diff_sum / @$numbers;\n}", "    my $sum = 0;\n    my $n\
    \ = 0;\n    my $mean = mean($numbers);\n    foreach my $x (@$numbers) {\n    \
    \    $sum += abs($x - $mean);\n        $n++;\n    }\n    return $sum / $n;\n}",
  "    return undef unless @$numbers;\n    my $mean = mean($numbers);\n    return\
    \ undef unless defined $mean;\n    my $sum = 0;\n    foreach my $value (@$numbers)\
    \ {\n        $sum += abs($value - $mean);\n    }\n    return $sum / @$numbers;\n\
    }", "    my $sum = 0;\n    my $mean = sum(@$numbers) / @$numbers;\n    for my\
    \ $number (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return\
    \ $sum / @$numbers;\n}", "    my($mean) = mean($numbers);\n    my($mad) = mean(map\
    \ { abs($_ - $mean) } @$numbers);\n    return $mad;\n}", "    my $n = scalar(@$numbers);\n\
    \    my $mean = mean($numbers);\n    my $sum_diff = 0;\n    foreach my $element\
    \ (@$numbers) {\n        $sum_diff += abs($element - $mean);\n    }\n    return\
    \ $sum_diff / $n;\n}", "    my $mean = mean($numbers);\n    my $num_elements =\
    \ @$numbers;\n    return sum( map { abs($_ - $mean) } @$numbers ) / $num_elements;\n\
    }", "    # First calculate the mean of this list of numbers\n    my $mean = mean($numbers);\n\
    \    # then average the absolute difference between each element and this mean\n\
    \    my $average_difference = mean( [ map { abs($_ - $mean) } @$numbers ] );\n\
    \    return $average_difference;\n}", "    my($mean) = mean($numbers);\n    my($abs_differences)\
    \ = [map { abs($_ - $mean) } @$numbers];\n    return mean($abs_differences);\n\
    }", "    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach my $num (@$numbers)\
    \ {\n        $sum += abs($num - $mean);\n    }\n    my $mad = $sum / @$numbers;\n\
    \    return $mad;\n}", "    my $mean = mean($numbers);\n    my $mean_abs_dev =\
    \ 0;\n    foreach (@$numbers) {\n        $mean_abs_dev += abs($_ - $mean);\n \
    \   }\n    $mean_abs_dev /= scalar(@$numbers);\n    return $mean_abs_dev;\n}",
  "    my $m_mean = mean($numbers);\n    my $sum = 0;\n    for my $number (@$numbers)\
    \ {\n        $sum += abs($number - $m_mean);\n    }\n    return $sum / (@$numbers\
    \ || 1);\n}", "    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach my\
    \ $number (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return\
    \ ($sum / scalar(@$numbers));\n}", "    my $mean = mean($numbers);\n    my $deviations\
    \ = [ map { abs($_ - $mean) } @$numbers ];\n    return mean($deviations);\n}",
  "    my $sum_abs_difference = 0;\n    my $mean = mean($numbers);\n    for (my $i\
    \ = 0; $i < @$numbers; $i++) {\n        $sum_abs_difference += abs($numbers->[$i]\
    \ - $mean);\n    }\n    return $sum_abs_difference / @$numbers;\n}", "    my $mean\
    \ = mean($numbers);\n    my $sum = 0;\n    for my $x (@$numbers) {\n        $sum\
    \ += abs($x - $mean);\n    }\n    return $sum / @$numbers;\n}", "    my $mean\
    \ = mean($numbers);\n    my $sum = 0;\n    my $n = scalar(@$numbers);\n    foreach\
    \ my $number (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n   \
    \ return $sum / $n;\n}", "    my $avg = _mean($numbers);\n    my $sum = 0;\n \
    \   foreach my $n (@$numbers) {\n        $sum += abs($n - $avg);\n    }\n    return\
    \ $sum / scalar(@$numbers);\n}", "    my $mean = mean($numbers);\n    my $sum\
    \ = 0;\n    my $i;\n    my $n = 0;\n    for ($i = 0; $i < @$numbers; $i++) {\n\
    \        $sum += abs($numbers->[$i] - $mean);\n        $n++;\n    }\n    return\
    \ $sum / $n;\n}", "    my $mean = sum(@$numbers) / scalar(@$numbers);\n    my\
    \ $deviations = $numbers->map( sub { abs($_ - $mean) } );\n    return sum(@$deviations)\
    \ / scalar(@$deviations);\n}", "    my $average = mean($numbers);\n    my $sum\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $sum += abs($number - $average);\n\
    \    }\n    return $sum / (scalar @$numbers);\n}", "    my $mean = mean($numbers);\n\
    \    my $differences = [map { abs($_ - $mean) } @$numbers];\n    return mean($differences);\n\
    }", "    my($n) = scalar(@$numbers);\n    my($mean) = mean($numbers);\n    my($accum);\n\
    \    my($index);\n    for($index = 0; $index < $n; $index++) {\n        $accum\
    \ += abs($numbers->[$index] - $mean);\n    }\n    return($accum / $n);\n}", " \
    \   if(!defined($numbers) || ref($numbers) ne 'ARRAY') {\n        return 0;\n\
    \    }\n    my $average = mean($numbers);\n    my $sum = 0;\n    foreach my $value\
    \ (@$numbers) {\n        $sum += abs($value - $average);\n    }\n    return $sum\
    \ / (scalar @$numbers);\n}", "    my $x_mean = mean($numbers);\n    my $deviation\
    \ = 0;\n    foreach my $x (@$numbers) {\n        $deviation += abs($x - $x_mean);\n\
    \    }\n    $deviation /= @$numbers;\n    return $deviation;\n}", "    my $mean\
    \ = mean($numbers);\n    my $sum = 0;\n    foreach (@$numbers) {\n        $sum\
    \ += abs($_ - $mean);\n    }\n    return $sum / scalar(@$numbers);\n}", "    my($n)\
    \ = @$numbers;\n    die(\"mean_absolute_deviation() requires a list of at least\
    \ 1 number\") if $n < 1;\n    my($total) = 0;\n    my($mean) = sum($numbers) /\
    \ $n;\n    foreach my $number (@$numbers) {\n        $total += abs($number - $mean);\n\
    \    }\n    return $total / $n;\n}", "    my $n = @$numbers;\n    if($n < 2) {\n\
    \        return 0;\n    }\n    my $x_mean = mean($numbers);\n    my $sum = 0;\n\
    \    for(my $i = 0; $i < $n; $i++) {\n        $sum += abs($numbers->[$i] - $x_mean);\n\
    \    }\n    return $sum / $n;\n}", "    my $mean = mean($numbers);\n    return\
    \ mean(map { abs($_ - $mean) } @$numbers);\n}", "    my $mean = mean($numbers);\n\
    \    my $deviations = [ map { abs($_ - $mean) } @$numbers ];\n    return mean($deviations);\n\
    }", "    return mean_absolute_deviation_around_centerpoint($numbers, mean($numbers));\n\
    }", "    return unless @$numbers;\n    my $mean = average($numbers);\n    my $sum\
    \ = 0;\n    $sum += abs($_ - $mean) foreach @$numbers;\n    return $sum / @$numbers;\n\
    }", '    my($n, $mean, $MAD);', "    croak \"mean_absolute_deviation(numbers):\
    \ numbers must be an array\" unless (ref($numbers) eq 'ARRAY');\n    my $mean\
    \ = mean($numbers);\n    my $sum = 0;\n    for (@$numbers) {\n        $sum +=\
    \ abs($_ - $mean);\n    }\n    return $sum / scalar(@$numbers);\n}", "    my $mean\
    \ = mean($numbers);\n    my $total = 0;\n    for my $number (@$numbers) {\n  \
    \      $total += abs($number - $mean);\n    }\n    return $total / @$numbers;\n\
    }", "    my $mean = mean($numbers);\n    my $sum_distances = 0;\n    foreach my\
    \ $n (@$numbers) {\n        $sum_distances += abs($n - $mean);\n    }\n    return\
    \ $sum_distances / @$numbers;\n}", "    my $mean = mean($numbers);\n    my $mad\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $mad += abs($number - $mean);\n\
    \    }\n    return $mad / scalar(@$numbers);\n}", "    croak \"No numbers were\
    \ provided for MAD calculation\"\n        unless $numbers && @$numbers;\n    my\
    \ $mean = mean($numbers);\n    my $num_of_values = scalar @$numbers;\n    my $sum\
    \ = 0;\n    for my $num (@$numbers) {\n        $sum += abs($num - $mean);\n  \
    \  }\n    return $sum / $num_of_values;\n}", "    my($mean) = mean($numbers);\n\
    \    my($mad) = 0;\n    foreach my $number (@$numbers) {\n        $mad += abs($number\
    \ - $mean);\n    }\n    return $mad / scalar(@$numbers);\n}", "    my($average)\
    \ = mean($numbers);\n    my($absolute_deviation) = abs_deviation($numbers, $average);\n\
    \    return (mean($absolute_deviation));\n}", "    my $number_of_numbers = @$numbers;\n\
    \    my $mean = mean($numbers);\n    my $sum_of_deviations = 0;\n    foreach my\
    \ $number (@$numbers) {\n        $sum_of_deviations += abs($number - $mean);\n\
    \    }\n    return $sum_of_deviations / $number_of_numbers;\n}", "    my($mean)\
    \ = mean($numbers);\n    my($deviation);\n    my($return);", "    my($deviations)\
    \ = _deviations($numbers);\n    return _average($deviations);\n}", "    return\
    \ undef unless defined $numbers;\n    my $n_numbers = @$numbers;\n    return undef\
    \ unless $n_numbers;\n    my $mean = mean($numbers);\n    my $differences = [];\n\
    \    for(my $i = 0; $i < $n_numbers; $i++) {\n        push @$differences, abs($$numbers[$i]\
    \ - $mean);\n    }\n    return mean($differences);\n}", "    my $mean = mean($numbers);\n\
    \    my $absolute_deviations = [];\n    foreach my $number (@$numbers) {\n   \
    \     push @$absolute_deviations, abs($number - $mean);\n    }\n    return mean($absolute_deviations);\n\
    }", "    my $sum = 0;\n    my $count = scalar(@$numbers);\n    if ($count < 1)\
    \ {\n        warn \"mean_absolute_deviation(): expected an array of numbers, got\
    \ an empty array\\n\";\n        return undef;\n    }\n    my $mean = mean($numbers);\n\
    \    for (my $i = 0; $i < $count; $i++) {\n        $sum += abs($numbers->[$i]\
    \ - $mean);\n    }\n    return $sum / $count;\n}", "    my $avg = mean($numbers);\n\
    \    my $deviation = 0;\n    foreach my $n (@$numbers) {\n        $deviation +=\
    \ abs($n - $avg);\n    }\n    return $deviation / scalar(@$numbers);\n}", "  \
    \  return undef unless defined $numbers;\n    return undef unless @$numbers;\n\
    \    my $n = @$numbers;\n    my $mean = sum($numbers) / $n;\n    my $abs_deviations\
    \ = [];\n    for my $number (@$numbers) {\n        push @$abs_deviations, abs($number\
    \ - $mean);\n    }\n    return sum($abs_deviations) / $n;\n}", "    my $mean =\
    \ mean($numbers);\n    my $num_numbers = scalar(@$numbers);\n    my $absolute_difference\
    \ = sub { abs($_[0] - $mean) };\n    return mean([map($absolute_difference->($_),\
    \ @$numbers)]);\n}", "    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach\
    \ my $n (@$numbers) {\n        $sum += abs($n - $mean);\n    }\n    return $sum\
    \ / scalar(@$numbers);\n}", "    my $mean = mean($numbers);\n    my $absolute_deviations\
    \ = [];\n    foreach my $number (@$numbers) {\n        push @$absolute_deviations,\
    \ abs($number - $mean);\n    }\n    return mean($absolute_deviations);\n}", " \
    \   my $sum = 0;\n    my $mean = mean($numbers);\n    for my $number (@$numbers)\
    \ {\n        $sum += abs($number - $mean);\n    }\n    return $sum / @$numbers;\n\
    }", "    my($mean) = mean($numbers);\n    my($sum) = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / scalar(@$numbers);\n}", "    my($count) = scalar(@$numbers);\n    if($count\
    \ == 0) {\n        return(0);\n    }\n    my($mean) = mean($numbers);\n    my($sum)\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $sum += abs($number - $mean);\n\
    \    }\n    return($sum / $count);\n}", "    return 0 if(scalar(@$numbers) ==\
    \ 0);\n    my $mean = average($numbers);\n    my $dev = 0;\n    foreach my $n\
    \ (@$numbers) {\n        $dev += abs($n - $mean);\n    }\n    return $dev / scalar(@$numbers);\n\
    }", "    my $mean = mean($numbers);\n    return mean( map { abs($_ - $mean) }\
    \ @$numbers );\n}", "    my($n);\n    my($mean);\n    my($square_sum);\n    my($mad);",
  "    my $n_numbers = scalar(@$numbers);\n    my $mean = mean($numbers);\n    my\
    \ $squared_deviations = [];\n    for my $i (0..$n_numbers-1) {\n        my $deviation\
    \ = $numbers->[$i] - $mean;\n        my $squared_deviation = $deviation * $deviation;\n\
    \        push @$squared_deviations, $squared_deviation;\n    }\n    my $mean_squared_deviation\
    \ = mean($squared_deviations);\n    my $mean_absolute_deviation = sqrt($mean_squared_deviation);\n\
    \    return $mean_absolute_deviation;\n}", "    return mean( abs($numbers - mean($numbers))\
    \ );\n}", "    my $mean     = mean($numbers);\n    my $abs_diffs = [\n       \
    \ map { abs($_ - $mean) } @$numbers\n    ];\n    return mean($abs_diffs);\n}",
  "    return 0 if !@$numbers;\n    my $mean = mean($numbers);\n    return mean([map\
    \ { abs($_ - $mean) } @$numbers]);\n}", "    my($mean, $abs_sum);\n    $mean =\
    \ mean($numbers);\n    $abs_sum = 0;\n    foreach (@$numbers) {\n        $abs_sum\
    \ += abs($_ - $mean);\n    }\n    return $abs_sum / @$numbers;\n}", "    my $average\
    \ = mean($numbers);\n    my $count = scalar(@$numbers);\n    my $sigma = 0;\n\
    \    foreach my $x (@$numbers) {\n        $sigma += abs($x - $average);\n    }\n\
    \    return $sigma / $count;\n}", "    my($sum) = 0;\n    my($average) = mean($numbers);\n\
    \    for(@$numbers) {\n        $sum += abs($_ - $average);\n    }\n    return\
    \ $sum / @$numbers;\n}", "    my $n = @$numbers;\n    my $mean = mean($numbers);\n\
    \    my $deviations = [];\n    foreach my $number (@$numbers) {\n        push\
    \ @$deviations, abs($number - $mean);\n    }\n    return mean($deviations);\n}",
  "    return 0 unless @$numbers;\n    return _mean_absolute_deviation($numbers, _mean($numbers));\n\
    }", "    my $sum;\n    my $centerpoint = mean($numbers);\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $centerpoint);\n    }\n    return\
    \ $sum / @$numbers;\n}", "    my $mean = mean($numbers);\n    my $total = 0;\n\
    \    for my $x (@$numbers) {\n        $total += abs($x - $mean);\n    }\n    return\
    \ $total / @$numbers;\n}", "    my($sum) = 0;\n    my($abs_dev) = 0;\n    my($mean)\
    \ = mean($numbers);\n    foreach my $number (@$numbers) {\n        $abs_dev =\
    \ abs($number - $mean);\n        $sum += $abs_dev;\n    }\n    return $sum / scalar(@$numbers);\n\
    }", "    return mean_absolute_deviation_around_mean($numbers);\n}", "    my($sum)\
    \ = 0;\n    my($mean) = mean($numbers);\n    foreach my $value (@$numbers) {\n\
    \        $sum += abs($value - $mean);\n    }\n    return $sum / scalar(@$numbers);\n\
    }", "    return 0 if @$numbers < 2;\n    my $mean = avg(@$numbers);\n    my $sum\
    \ = 0;\n    for my $number (@$numbers) {\n        $sum += abs($number - $mean);\n\
    \    }\n    return $sum / @$numbers;\n}", "    croak \"need numbers\" unless defined\
    \ $numbers;\n    my $size = scalar @$numbers;\n    my $mean = sum($numbers) /\
    \ $size;\n    my $sum = 0;\n    for my $number (@$numbers) {\n        $sum +=\
    \ abs($number - $mean);\n    }\n    return $sum / $size;\n}", "    # The mean,\
    \ or average, of the numbers in the given array\n    my $x_mean = mean($numbers);\n\
    \    # The sum of the absolute value of the mean_absolute_deviation between\n\
    \    # each element and the mean\n    my $mean_absolute_deviation_sum = 0;\n \
    \   # For each element in the array...\n    foreach my $x (@$numbers) {\n    \
    \    # Add the absolute difference to the mean_absolute_deviation_sum\n      \
    \  $mean_absolute_deviation_sum += abs($x - $x_mean);\n    }\n    # Return the\
    \ average mean_absolute_deviation between each element and the mean\n    return\
    \ $mean_absolute_deviation_sum / scalar(@$numbers);\n}", "    my($sum) = 0;\n\
    \    foreach my $n (@$numbers) {\n        $sum += abs($n - mean($numbers));\n\
    \    }\n    return $sum / scalar(@$numbers);\n}", "    my($n) = @$numbers;\n \
    \   return 0 if $n == 0;\n    my($sum) = 0;\n    my($mean) = mean($numbers);\n\
    \    foreach my $number (@$numbers) {\n        $sum += abs($number - $mean);\n\
    \    }\n    return $sum / $n;\n}", '    my($n, $mean, $sum_abs);', "    my $mean\
    \ = mean($numbers);\n    my $sum = 0;\n    foreach my $val (@$numbers) {\n   \
    \     $sum += abs($val - $mean);\n    }\n    return $sum / @$numbers;\n}", " \
    \   my $mean = mean($numbers);\n    my $sum = 0;\n    foreach my $n (@$numbers)\
    \ {\n        $sum += abs($n - $mean);\n    }\n    return $sum / scalar(@$numbers);\n\
    }", "    my $number_count = @$numbers;\n    my $mean = mean($numbers);\n    my\
    \ $sum = 0;\n    foreach my $number (@$numbers) {\n        $sum += abs($number\
    \ - $mean);\n    }\n    return $sum / $number_count;\n}", "    my($mean) = mean($numbers);\n\
    \    my($absolute_differences) = [ map { abs($_ - $mean) } @$numbers ];\n    return\
    \ mean($absolute_differences);\n}", "    my $mean     = mean($numbers);\n    my\
    \ $sum      = 0;\n    my $n        = scalar @$numbers;\n    for my $number (@$numbers)\
    \ {\n        $sum += abs($number - $mean);\n    }\n    return $sum / $n;\n}",
  "    my $mean = mean($numbers);\n    my $sum = 0;\n    for my $n (@$numbers) {\n\
    \        $sum += abs($n - $mean);\n    }\n    return $sum / @$numbers;\n}", " \
    \   my $mean = mean($numbers);\n    my $sum = 0;\n    foreach my $n (@$numbers)\
    \ {\n        $sum += abs($n - $mean);\n    }\n    my $res = $sum / scalar(@$numbers);\n\
    \    return $res;\n}", "    my $mean = mean($numbers);\n    my $sum_diff_abs =\
    \ 0;\n    foreach my $number (@$numbers) {\n        $sum_diff_abs += abs($number\
    \ - $mean);\n    }\n    return $sum_diff_abs / scalar(@$numbers);\n}", "    return\
    \ undef unless @$numbers > 0;\n    my $mean = mean($numbers);\n    return mean([\
    \ map { abs($_ - $mean) } @$numbers ]);\n}", "    my $mean = mean($numbers);\n\
    \    my $num_numbers = scalar(@$numbers);\n    my $sum = 0;\n    for my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / $num_numbers;\n}", "    my($mean, $deviation_sum);\n    $mean = mean($numbers);\n\
    \    $deviation_sum = sum(map(abs($_ - $mean), @$numbers));\n    return $deviation_sum\
    \ / @$numbers;\n}", "    my $mean = mean($numbers);\n    return mean(\n      \
    \  [\n            map { abs($_ - $mean) } @$numbers\n        ]\n    );\n}", " \
    \   my $mean = mean($numbers);\n    my $deviations = [ map { abs($_ - $mean) }\
    \ @$numbers ];\n    return mean($deviations);\n}", "    my $n = @$numbers;\n \
    \   my $mean = mean($numbers);\n    my $sum = 0;\n    my $diff = 0;\n    my $abs\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $diff = $number - $mean;\n\
    \        $abs = abs($diff);\n        $sum += $abs;\n    }\n    my $mean_absolute_deviation\
    \ = $sum / $n;\n    return $mean_absolute_deviation;\n}", "    my($x_bar, $sum,\
    \ $n);\n    my($i);", "    return undef unless @$numbers;\n    my $sum;\n    foreach\
    \ my $number (@$numbers) {\n        $sum += abs($number - mean($numbers));\n \
    \   }\n    return $sum / @$numbers;\n}", "    my $count = @$numbers;\n    my $mean\
    \ = mean($numbers);\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += abs($number - $mean);\n    }\n    return $sum / $count;\n}",
  "    my $mean = mean($numbers);\n    my $sum_abs_diff = 0;\n    foreach my $n (@$numbers)\
    \ {\n        $sum_abs_diff += abs($n - $mean);\n    }\n    return $sum_abs_diff\
    \ / scalar(@$numbers);\n}", "    my $x_mean = mean($numbers);\n    return mean(map\
    \ { abs($_ - $x_mean) } @$numbers);\n}", "    my $n = @$numbers;\n    my $mean\
    \ = sum($numbers) / $n;\n    return sum([ map(abs($_ - $mean), @$numbers) ]) /\
    \ $n;\n}", "    my $n = scalar(@$numbers);\n    my $avg = mean($numbers);\n  \
    \  my $sum = 0;\n    foreach my $x (@$numbers) {\n        $sum += abs($x - $avg);\n\
    \    }\n    return $sum / $n;\n}", "    my($n, $sum_abs_diff, $x_mean) = (0, 0,\
    \ mean($numbers));\n    for (@$numbers) {\n        $sum_abs_diff += abs($_ - $x_mean);\n\
    \        $n++;\n    }\n    return $sum_abs_diff / $n;\n}", "    my $n = @$numbers;\n\
    \    my $sum = 0;\n    my $mean = mean($numbers);\n    for my $x (@$numbers) {\n\
    \        $sum += abs($x - $mean);\n    }\n    return $sum / $n;\n}", "    return\
    \ _calculate_statistic($numbers, sub {\n            my($n, $mean) = @_;\n    \
    \        return abs($n - $mean);\n        },\n        sub {\n            my($numbers)\
    \ = @_;\n            my $mean = mean($numbers);\n            return map { abs($_\
    \ - $mean) } @$numbers;\n        },\n    );\n}", "    my $num_numbers = @$numbers;\n\
    \    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach my $num (@$numbers)\
    \ {\n        $sum += abs($num - $mean);\n    }\n    my $result = $sum / $num_numbers;\n\
    \    return $result;\n}", "    my $mean = mean($numbers);\n    my $abs_diff_sum\
    \ = 0;\n    my $num_elements = scalar(@$numbers);\n    foreach my $number (@$numbers)\
    \ {\n        $abs_diff_sum += abs($number - $mean);\n    }\n    return $abs_diff_sum\
    \ / $num_elements;\n}", "    my $sum = 0;\n    my $mean = mean($numbers);\n  \
    \  foreach my $num (@$numbers) {\n        $sum += abs($num - $mean);\n    }\n\
    \    return $sum / scalar(@$numbers);\n}", "    return undef unless @$numbers;\n\
    \    my $mean = mean($numbers);\n    return mean([ map { abs($_ - $mean) } @$numbers\
    \ ]);\n}", "    my $mean = mean($numbers);\n    my $sum = 0;\n    for my $num\
    \ (@$numbers) {\n        $sum += abs($num - $mean);\n    }\n    return $sum /\
    \ @$numbers;\n}", "    my $mean = mean($numbers);\n    my $sum = 0;\n    for(my\
    \ $i = 0; $i < @$numbers; $i++) {\n        $sum += abs($numbers->[$i] - $mean);\n\
    \    }\n    return $sum / @$numbers;\n}", "    my $mean = mean($numbers);\n  \
    \  my $deviation = 0;\n    foreach my $number (@$numbers) {\n        $deviation\
    \ += abs($number - $mean);\n    }\n    return $deviation / scalar(@$numbers);\n\
    }", "    my $mean = average($numbers);\n    return average(map { abs($_ - $mean)\
    \ } @$numbers);\n}", "    my $average = average($numbers);\n    my $sigma = 0;\n\
    \    foreach (@$numbers) {\n        $sigma += abs($_ - $average);\n    }\n   \
    \ return $sigma / @$numbers;\n}", "    my $mean = mean($numbers);\n    my $sum\
    \ = 0;\n    for(@$numbers) {\n        $sum += abs($_ - $mean);\n    }\n    return\
    \ $sum / @$numbers;\n}", "    my $average = mean($numbers);\n    my $sum;\n  \
    \  for my $num (@$numbers) {\n        $sum += abs($num - $average);\n    }\n \
    \   return $sum / @$numbers;\n}", "    return 0 if @$numbers == 0;\n    my $mean\
    \ = mean($numbers);\n    return mean([map { abs($_ - $mean) } @$numbers]);\n}",
  "    croak \"mean_absolute_deviation: must have at least one number to calculate\"\
    \n        unless @$numbers > 0;\n    my $mean = mean($numbers);\n    my $abs_diffs\
    \ = [];\n    for my $num (@$numbers) {\n        push @$abs_diffs, abs($num - $mean);\n\
    \    }\n    return mean($abs_diffs);\n}", "    my $sum = 0;\n    my $mean = mean($numbers);\n\
    \    foreach my $num (@$numbers) {\n        $sum += abs($num - $mean);\n    }\n\
    \    return $sum / scalar(@$numbers);\n}", '    my($mean, $mad);', "    my $N\
    \ = @$numbers;\n    my $sum = 0;\n    my $mean = mean($numbers);\n    foreach\
    \ my $n (@$numbers) {\n        $sum += abs($n - $mean);\n    }\n    return $sum\
    \ / $N;\n}", "    my($mean) = mean($numbers);\n    my($deviations) = [];\n   \
    \ foreach my $number (@$numbers) {\n        push(@$deviations, abs($number - $mean));\n\
    \    }\n    return mean($deviations);\n}", "    return 0 if !scalar @$numbers;\n\
    \    my $mean = mean($numbers);\n    my $total = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $total += abs($number - $mean);\n    }\n    return $total / scalar\
    \ @$numbers;\n}", "    if ( @$numbers < 2 ) {\n        return 0;\n    }\n    my\
    \ $mean = mean($numbers);\n    my $deviations = [map { abs($_ - $mean) } @$numbers];\n\
    \    return mean($deviations);\n}", "    my($mean) = mean($numbers);\n    my(@numbers_deviations)\
    \ = map { abs($_ - $mean) } @$numbers;\n    return mean(\\@numbers_deviations);\n\
    }", "    my $mean = mean($numbers);\n    my $abs_diff_sum = 0;\n    foreach my\
    \ $n (@$numbers) {\n        $abs_diff_sum += abs($n - $mean);\n    }\n    my $mad\
    \ = $abs_diff_sum / scalar(@$numbers);\n    return $mad;\n}", "    my($mean) =\
    \ mean($numbers);\n    my(@diff) = map { abs($_ - $mean) } @$numbers;\n    my($mean_diff)\
    \ = mean(\\@diff);\n    return $mean_diff;\n}", "    my $mean = mean($numbers);\n\
    \    my $sum = 0;\n    for my $number (@$numbers) {\n        $sum += abs($number\
    \ - $mean);\n    }\n    return $sum / @$numbers;\n}", "    my $sum = 0;\n    my\
    \ $mean = mean($numbers);\n    foreach my $i (@$numbers) {\n        $sum += abs($i\
    \ - $mean);\n    }\n    return $sum / scalar(@$numbers);\n}", "    my($sum, $count);\n\
    \    #\n    $sum = 0;\n    $count = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += abs($number - mean($numbers));\n        $count++;\n    }\n  \
    \  return $sum / $count;\n}", "    my $n = 0;\n    my $sum = 0;\n    my $mean\
    \ = 0;\n    my $deviation = 0;\n    my $abs_deviation = 0;\n    for my $number\
    \ (@$numbers) {\n        $sum += $number;\n        $n++;\n    }\n    $mean = $sum\
    \ / $n;\n    for my $number (@$numbers) {\n        $deviation = $number - $mean;\n\
    \        $abs_deviation += abs($deviation);\n    }\n    return $abs_deviation\
    \ / $n;\n}", "    my $average = mean($numbers);\n    my $deviations = [];\n  \
    \  for my $number (@$numbers) {\n        push @$deviations, abs($number - $average);\n\
    \    }\n    return mean($deviations);\n}", "    my $count = scalar(@$numbers);\n\
    \    if ($count < 2) {\n        return 0;\n    }\n    my $mean = mean($numbers);\n\
    \    my $difference_sum = 0;\n    for my $number (@$numbers) {\n        $difference_sum\
    \ += abs($number - $mean);\n    }\n    return $difference_sum / $count;\n}", " \
    \   my $sum = 0;\n    my $x_mean = mean($numbers);\n    for my $x (@$numbers)\
    \ {\n        $sum += abs($x - $x_mean);\n    }\n    return $sum / @$numbers;\n\
    }", "    my $mean = mean($numbers);\n    my $sdev = 0;\n    my $count = 0;\n \
    \   foreach my $number (@$numbers) {\n        $sdev += abs($number - $mean);\n\
    \        $count++;\n    }\n    return $sdev / $count;\n}", "    my $mean = mean($numbers);\n\
    \    my $absolute_deviations = [];\n    for (@$numbers) {\n        push @$absolute_deviations,\
    \ abs($_ - $mean);\n    }\n    return mean($absolute_deviations);\n}", "    my\
    \ $n = scalar(@$numbers);\n    if( !$n ) {\n        return undef;\n    }\n   \
    \ my $mean = mean($numbers);\n    my $mad = 0;\n    foreach my $x (@$numbers)\
    \ {\n        $mad += abs($x - $mean);\n    }\n    $mad /= $n;\n    return $mad;\n\
    }", "    return undef unless @$numbers > 0;\n    my $total = sum(0, @$numbers);\n\
    \    my $number_of_elements = scalar @$numbers;\n    my $mean = $total / $number_of_elements;\n\
    \    my $sum_absolute_deviations = sum(0, map { abs($_ - $mean) } @$numbers);\n\
    \    return $sum_absolute_deviations / $number_of_elements;\n}", "    my $sum\
    \ = 0;\n    my $mean = mean($numbers);\n    foreach my $number (@$numbers) {\n\
    \        $sum += abs($number - $mean);\n    }\n    return $sum / @$numbers;\n}",
  "    my $mean = mean($numbers);\n    my $abs_diff_sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $abs_diff_sum += abs($number - $mean);\n    }\n    return\
    \ $abs_diff_sum / scalar(@$numbers);\n}", "    return 0 if (! @$numbers);\n  \
    \  my $mean = mean($numbers);\n    my $sum = 0;\n    for my $n (@$numbers) {\n\
    \        $sum += abs($n - $mean);\n    }\n    return $sum / scalar(@$numbers);\n\
    }", "    my($x_sum, $x_mean, $n, $delta_sum);\n    foreach my $x (@$numbers) {\n\
    \        $x_sum += $x;\n        $n++;\n    }\n    $x_mean = $x_sum / $n;\n   \
    \ foreach my $x (@$numbers) {\n        $delta_sum += abs($x - $x_mean);\n    }\n\
    \    return $delta_sum / $n;\n}", "    my $mean = mean($numbers);\n    return\
    \ mean([map { abs($_ - $mean) } @$numbers]);\n}", "    my $mean = mean($numbers);\n\
    \    my $sum = 0;\n    foreach my $n (@$numbers) {\n        $sum += abs($n - $mean);\n\
    \    }\n    return $sum / @$numbers;\n}", "    my $count = scalar(@$numbers);\n\
    \    if($count == 0) { return 0; }\n    my $sum = sum($numbers);\n    my $mean\
    \ = $sum / $count;\n    my $average_deviation = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $average_deviation += abs($number - $mean);\n    }\n    return $average_deviation\
    \ / $count;\n}", "    my $N = @$numbers;\n    my $mean = mean($numbers);\n   \
    \ my $sum = 0;\n    for my $num (@$numbers) {\n        $sum += abs($num - $mean);\n\
    \    }\n    return $sum / $N;\n}", "    my($dev);\n    my($mean) = mean($numbers);\n\
    \    my($c) = 0;\n    foreach my $n (@$numbers) {\n        $dev += abs($n - $mean);\n\
    \        $c++;\n    }\n    return($dev / $c);\n}", "    my $mean = mean($numbers);\n\
    \    my $deviation_sum = 0;\n    foreach my $x (@$numbers) {\n        $deviation_sum\
    \ += abs($x - $mean);\n    }\n    return $deviation_sum / scalar(@$numbers);\n\
    }", "    my $avg = mean($numbers);\n    my $sum = 0;\n    foreach my $n (@$numbers)\
    \ {\n        $sum += abs($n - $avg);\n    }\n    return $sum / scalar(@$numbers);\n\
    }", "    my $n_elements = @$numbers;\n    my $mean = sum($numbers) / $n_elements;\n\
    \    return sum(\n        map { abs($_ - $mean) } @$numbers\n    ) / $n_elements;\n\
    }", "    my($sum) = 0;\n    my($mean) = mean($numbers);\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / scalar(@$numbers);\n}", "    my $mean = mean($numbers);\n    my $sum = 0;\n\
    \    foreach my $num (@$numbers) {\n        $sum += abs($num - $mean);\n    }\n\
    \    return $sum / @$numbers;\n}", "    my($mean) = mean($numbers);\n    my($deviation)\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $deviation += abs($number\
    \ - $mean);\n    }\n    $deviation /= scalar(@$numbers);\n    return $deviation;\n\
    }", "    my $count = scalar(@$numbers);\n    die \"mean_absolute_deviation: no\
    \ numbers provided\\n\" if $count == 0;\n    my $mean = mean($numbers);\n    my\
    \ $absolute_deviations = [];\n    for(my $i = 0; $i < $count; $i++) {\n      \
    \  push @$absolute_deviations, abs($numbers->[$i] - $mean);\n    }\n    return\
    \ mean($absolute_deviations);\n}", "    my $mean = mean($numbers);\n    my $deviations\
    \ = [map { abs($_ - $mean) } @$numbers];\n    return mean($deviations);\n}", " \
    \   my $x_mean = mean($numbers);\n    my $distances = $numbers->apply(\n     \
    \   fun( $x ) => abs( $x - $x_mean )\n    );\n    return mean($distances);\n}",
  "    my $mean = mean($numbers);\n    my $sum = 0;\n    my $n = 0;\n    foreach my\
    \ $num (@$numbers) {\n        $sum += abs($num - $mean);\n        $n++;\n    }\n\
    \    return $sum / $n;\n}", "    my $x_mean = mean($numbers);\n    my $n = scalar(@$numbers);\n\
    \    my $abs_deviation = 0;\n    foreach my $number (@$numbers) {\n        $abs_deviation\
    \ += abs($number - $x_mean);\n    }\n    return ($abs_deviation / $n);\n}", " \
    \   my $mean = mean($numbers);\n    my $sum = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $sum += abs($number - $mean);\n    }\n    return $sum / @$numbers;\n\
    }", '    my($i, $length, $result, $sum, $x);', "    return undef unless defined\
    \ $numbers;\n    return 0 if @$numbers == 0;\n    my $sum = 0;\n    my $num =\
    \ @$numbers;\n    my $mean = mean($numbers);\n    for my $x (@$numbers) {\n  \
    \      $sum += abs($x - $mean);\n    }\n    return $sum / $num;\n}", "    my $mean\
    \ = mean($numbers);\n    my $n = scalar(@$numbers);\n    my $sum_abs_deviation\
    \ = 0;\n    foreach my $x (@$numbers) {\n        $sum_abs_deviation += abs($x\
    \ - $mean);\n    }\n    return $sum_abs_deviation / $n;\n}", "    my $mean = mean($numbers);\n\
    \    my $summation = 0;\n    foreach my $number (@$numbers) {\n        $summation\
    \ += abs($number - $mean);\n    }\n    return $summation / scalar(@$numbers);\n\
    }", "    my $mean     = mean($numbers);\n    my $diff     = [ map { abs($_ - $mean)\
    \ } @$numbers ];\n    return mean($diff);\n}", '    my($n, $sum, $mean, $center);',
  "    my $sum_diff = 0;\n    for my $num (@$numbers) {\n        $sum_diff += abs($num\
    \ - mean($numbers));\n    }\n    return $sum_diff / (scalar @$numbers);\n}", " \
    \   # mean\n    my $mean = mean($numbers);\n    # absolute difference\n    my\
    \ @diff = map { abs($_ - $mean) } @$numbers;\n    # mean absolute difference\n\
    \    return mean(\\@diff);\n}", "    my $mean = mean($numbers);\n    return mean(\n\
    \        map { abs($_ - $mean) } @$numbers\n    );\n}", "    return 0 unless @$numbers;\n\
    \    my $sum = 0;\n    my $mean = mean($numbers);\n    foreach my $number (@$numbers)\
    \ {\n        $sum += abs($number - $mean);\n    }\n    return $sum / @$numbers;\n\
    }", "    my $mean = mean($numbers);\n    my $total = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $total += abs($number - $mean);\n    }\n    return $total\
    \ / @$numbers;\n}", "    my $mean = mean($numbers);\n    my $absolute_deviations\
    \ = [ map { abs($_ - $mean) } @$numbers ];\n    return mean($absolute_deviations);\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
