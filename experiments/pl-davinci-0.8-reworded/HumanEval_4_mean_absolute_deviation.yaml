name: HumanEval_4_mean_absolute_deviation
language: pl
prompt: "# For a given array of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
  # 1.0\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    for (@$numbers) {\n        $sum += abs($_ - mean($numbers));\n\
    \    }\n    return $sum / scalar(@$numbers);\n}", "    my $n = scalar(@$numbers);\n\
    \    return undef if ($n == 0);\n    my $mean = mean($numbers);\n    my $sum =\
    \ 0;\n    foreach my $n (@$numbers) {\n        $sum += abs($n - $mean);\n    }\n\
    \    return $sum / $n;\n}", "    return unless @$numbers;\n    my $mean = mean($numbers);\n\
    \    my $devs = [];\n    foreach my $x (@$numbers) {\n        push @$devs, abs($x\
    \ - $mean);\n    }\n    return mean($devs);\n}", "    return undef unless(@$numbers);\n\
    \    my $mean = mean($numbers);\n    my $sum_deviations = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum_deviations += abs($number - $mean);\n    }\n   \
    \ return ($sum_deviations / @$numbers);\n}", "    my $num_elements = scalar(@$numbers);\n\
    \    return if $num_elements == 0;\n    my $mean = mean($numbers);\n    my $sum_abs_diffs\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $sum_abs_diffs += abs($number\
    \ - $mean);\n    }\n    return $sum_abs_diffs / $num_elements;\n}", "    my $mean\
    \ = sum(@$numbers) / @$numbers;\n    my $deviation = sum_absolute_deviation($numbers,\
    \ $mean);\n    return $deviation / @$numbers;\n}", "    my $mean = mean($numbers);\n\
    \    my $count = scalar(@$numbers);\n    my $absolute_deviations = [];\n    foreach\
    \ my $num (@$numbers) {\n        push(@$absolute_deviations, abs($num - $mean));\n\
    \    }\n    return mean($absolute_deviations);\n}", "    my $mean = mean($numbers);\n\
    \    my $abs_dev = 0;\n    foreach my $num (@$numbers) {\n        $abs_dev +=\
    \ abs($num - $mean);\n    }\n    return $abs_dev / scalar(@$numbers);\n}", " \
    \   my $mean = mean($numbers);\n    my $total = 0;\n    my $n = scalar(@$numbers);\n\
    \    foreach my $number (@$numbers) {\n        $total += abs($number - $mean);\n\
    \    }\n    return $total / $n;\n}", "    croak \"mean_absolute_deviation needs\
    \ at least one number\" unless @$numbers;\n    my $mean = mean($numbers);\n  \
    \  my $sum = 0;\n    for (@$numbers) {\n        $sum += abs($_ - $mean);\n   \
    \ }\n    return $sum / @$numbers;\n}", "    my $mean = mean($numbers);\n    my\
    \ $abs_diff = 0;\n    foreach my $number (@$numbers) {\n        $abs_diff += abs($number\
    \ - $mean);\n    }\n    return $abs_diff / scalar(@$numbers);\n}", "    my($num_count)\
    \ = scalar(@$numbers);\n    my($num_sum) = sum($numbers);\n    my($num_mean) =\
    \ mean($numbers);\n    my($num_variance) = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $num_variance += ($number - $num_mean)**2;\n    }\n    my($num_variance_mean)\
    \ = $num_variance / $num_count;\n    my($num_standard_deviation) = sqrt($num_variance_mean);\n\
    \    return $num_standard_deviation;\n}", "    my $mean = mean($numbers);\n  \
    \  return mean(\n        [\n            map { abs($_ - $mean) } @$numbers\n  \
    \      ]\n    );\n}", "    return unless @$numbers;\n    my $count = @$numbers;\n\
    \    my $sum = sum(@$numbers);\n    my $mean = $sum / $count;\n    my $abs_diff_sum\
    \ = 0;\n    foreach my $num (@$numbers) {\n        $abs_diff_sum += abs($num -\
    \ $mean);\n    }\n    return $abs_diff_sum / $count;\n}", "    return stddev($numbers)\
    \ if $#{$numbers} < 1;\n    my $mean = average($numbers);\n    my $sum = 0;\n\
    \    for my $i (0..$#{$numbers}) {\n        $sum += abs($numbers->[$i] - $mean);\n\
    \    }\n    return $sum / ($#{$numbers} + 1);\n}", "    my($sum) = 0;\n    my($n)\
    \ = 0;\n    my($mean) = mean($numbers);\n    foreach my $n (@$numbers) {\n   \
    \     $sum += abs($n - $mean);\n        $n++;\n    }\n    return ($sum / $n);\n\
    }", "    if (ref($numbers) ne 'ARRAY') {\n        croak(\"mean_absolute_deviation:\
    \ not an array reference\");\n    }\n    if (@$numbers == 0) {\n        croak(\"\
    mean_absolute_deviation: empty array\");\n    }\n    my $mean = mean($numbers);\n\
    \    my $total = 0;\n    foreach my $number (@$numbers) {\n        $total += abs($number\
    \ - $mean);\n    }\n    return $total / @$numbers;\n}", "    return if !defined\
    \ $numbers;\n    if (ref($numbers) ne 'ARRAY') {\n        warn \"Invalid argument\
    \ to mean_absolute_deviation: $numbers\";\n        return;\n    }\n    my $n =\
    \ scalar(@$numbers);\n    return if $n == 0;\n    my $mean = mean($numbers);\n\
    \    return if !defined $mean;\n    my $sum = 0;\n    my $number;\n    foreach\
    \ $number (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return\
    \ $sum / $n;\n}", "    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach\
    \ my $n (@$numbers) {\n        $sum += abs($n - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}", "    my($mean) = mean($numbers);\n    return mean(abs(map($_\
    \ - $mean, @$numbers)));\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
