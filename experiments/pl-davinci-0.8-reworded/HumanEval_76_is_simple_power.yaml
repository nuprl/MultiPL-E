name: HumanEval_76_is_simple_power
language: pl
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\n# >>> is_simple_power(1, 4)\n# true\n# >>> is_simple_power(2, 2)\n\
  # true\n# >>> is_simple_power(8, 2)\n# true\n# >>> is_simple_power(3, 2)\n# false\n\
  # >>> is_simple_power(3, 1)\n# false\n# >>> is_simple_power(5, 3)\n# false\nsub\
  \ is_simple_power {\n    my($x, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n\
  \        if(eq_deeply($candidate->(16, 2),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9,\
  \ 3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16,\
  \ 4),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24,\
  \ 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(128, 4),\"\")) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    # Your code goes here\n    if ($x == 1) {\n        return 1;\n\
    \    }\n    if ($x % $n == 0 && $x != $n) {\n        is_simple_power($x / $n,\
    \ $n);\n    }\n    else {\n        return $x == $n;\n    }\n}", "    if($x < $n)\
    \ { return 0; }\n    return $x == (log($x)/log($n))**int(log($x)/log($n));\n}",
  "    return log($x) / log($n) == int(log($x) / log($n));\n}", "    return $x ==\
    \ $n ** int(log($x) / log($n));\n}", "    my $power = 0;\n    do { $power++; }\
    \ while ($x > $n**$power);\n    return $x == $n**$power;\n}", "    $x > 0 && $n\
    \ > 0 && ( $x == $n || $x % $n == 0 && is_simple_power($x / $n, $n) );\n}", " \
    \   # Your code here\n}", "    # your code here\n    return ($x == $n ** int($x\
    \ ** (1 / $n)));\n}", "    my $int = int(log($x)/log($n));\n    return ($x ==\
    \ $n**$int) ? 1 : 0;\n}", "    return $x == $n ** int log($x) / log($n);\n}",
  "    my $power = log($x) / log($n);\n    return ($power == int($power));\n}", " \
    \   for (my $i = 1; $i <= $x; $i++) {\n        return 1 if $x == $n ** $i;\n \
    \   }\n    return 0;\n}", "    return $x == int( log($x) / log($n) );\n}", " \
    \   my $i = 0;\n    while ( $n ** $i <= $x ) {\n        if ( $n ** $i == $x )\
    \ {\n            return \"true\";\n        }\n        $i++;\n    }\n    return\
    \ \"false\";\n}", "    ...\n}", "    # ...\n}", "    for my $e (2..9) {\n    \
    \    return 1 if $x == $n**$e;\n    }\n    return 0;\n}", "    my $power = 0;\n\
    \    my $temp = $n;\n    while ( $temp < $x ) {\n        $temp *= $n;\n      \
    \  $power++;\n    }\n    return 1 if ( $temp == $x );\n    return 0;\n}", "  \
    \  my $int = log($x) / log($n);\n    return $n ** $int == $x;\n}", "    die \"\
    Invalid x or n\" if not defined $x or not defined $n;\n    return Math::BigFloat->new($x)->bpow(1/$n)->bcmp(int\
    \ Math::BigFloat->new($x)->bpow(1/$n)) == 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
