name: HumanEval_10_make_palindrome
language: pl
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome(\"\")\n# \"\"\n# >>> make_palindrome(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome(\"cata\")\n# \"catac\"\nsub make_palindrome\
  \ {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xyz\"),\"xyzyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"xyx\"),\"xyx\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $string if length($string) <= 1;\n    my $prefix = $string;\n\
    \    my $postfix = reverse $string;\n    while (1) {\n        last if substr($prefix,\
    \ 0, 1) ne substr($postfix, 0, 1);\n        $prefix = substr($prefix, 1);\n  \
    \      $postfix = substr($postfix, 1);\n    }\n    return $string . reverse $prefix;\n\
    }", "    my $length = length($string);\n    return $string if $length <= 1;\n\
    \    my $max_length = 1;\n    my $max_index = 0;\n    for (my $i = 0; $i < $length;\
    \ $i++) {\n        my $length = max_palindrome_length($string, $i, $i);\n    \
    \    if ($length > $max_length) {\n            $max_length = $length;\n      \
    \      $max_index = $i;\n        }\n        $length = max_palindrome_length($string,\
    \ $i, $i + 1);\n        if ($length > $max_length) {\n            $max_length\
    \ = $length;\n            $max_index = $i;\n        }\n    }\n    return $string\
    \ . reverse_substring($string, 0, $max_index);\n}", "    my $len = length($string);\n\
    \    my $str = $string;\n    while ($str ne \"\") {\n        if (is_palindrome($str))\
    \ {\n            return $string . substr(reverse($string), $len-length($str));\n\
    \        }\n        $str = substr($str, 0, length($str)-1);\n    }\n    return\
    \ $string;\n}", '    return $string if !$string;', "    my $rev_string = reverse($string);\n\
    \    my $longest_suffix = longest_common_suffix($string, $rev_string);\n    my\
    \ $shortest_prefix = substr($string, 0, (length($string) - length($longest_suffix)));\n\
    \    my $rev_shortest_prefix = reverse($shortest_prefix);\n    return $string\
    \ . $rev_shortest_prefix;\n}", "    return \"\" if $string eq \"\";\n    # Find\
    \ longest palindromic substring in $string.\n    my $suffix = \"\";\n    for (my\
    \ $i = length($string); $i > 0; $i--) {\n        $suffix = substr($string, -$i,\
    \ $i);\n        if (is_palindrome($suffix)) {\n            last;\n        }\n\
    \    }\n    my $prefix = substr($string, 0, length($string) - length($suffix));\n\
    \    return $string if $prefix eq \"\";\n    return $string . reverse($prefix);\n\
    }", "    my $rev = reverse $string;\n    my $postfix = $string;\n    for (1..length($string))\
    \ {\n        if ($postfix eq $rev) {\n            return $string.$rev;\n     \
    \   }\n        chop $postfix;\n        $rev = reverse $postfix;\n    }\n    return\
    \ $string.$rev;\n}", "    my $s = length($string);\n    my $rev = reverse($string);\n\
    \    if($s == 0 || $string eq $rev) {\n        return $string;\n    }\n    my\
    \ $max = 0;\n    for(my $i = $s; $i > 0; $i--) {\n        my $postfix = substr($string,\
    \ $i, $s - $i);\n        my $postfix_rev = reverse($postfix);\n        if($postfix\
    \ eq $postfix_rev) {\n            $max = $i;\n            last;\n        }\n \
    \   }\n    my $prefix = substr($string, 0, $max);\n    my $prefix_rev = reverse($prefix);\n\
    \    return $string . $prefix_rev;\n}", "    return $string if ( !$string || $string\
    \ eq reverse($string) );\n    # Find the longest postfix that is a palindrome\n\
    \    my $longest_postfix_len = 0;\n    my $longest_postfix_start = -1;\n    for\
    \ ( my $i = length($string) - 1; $i >= 0; $i-- ) {\n        my $postfix = substr(\
    \ $string, $i );\n        if ( $postfix eq reverse($postfix) ) {\n           \
    \ $longest_postfix_len = length($postfix);\n            $longest_postfix_start\
    \ = $i;\n            last;\n        }\n    }\n    # Append the reverse of the\
    \ prefix that comes before the palindromic suffix.\n    my $prefix = substr( $string,\
    \ 0, $longest_postfix_start );\n    return $string . reverse($prefix);\n}", " \
    \   my $max_length = length($string);\n    my $pivot = int(($max_length + 1) /\
    \ 2);\n    my $palindrome = \"\";\n    for (my $k = $pivot; $k <= $max_length;\
    \ $k++) {\n        if (is_palindrome($string, $max_length, $k)) {\n          \
    \  $palindrome = substr($string, 0, $k);\n            last;\n        }\n    }\n\
    \    if (length($palindrome) > 0) {\n        return $string . reverse_string($palindrome);\n\
    \    }\n    return $string;\n}", "    my($palindrome);\n    my($prefix);\n   \
    \ $palindrome = find_longest_palindrome($string);\n    $prefix = $string;\n  \
    \  substr($prefix, -length($palindrome), length($palindrome)) = \"\";\n    $palindrome\
    \ .= reverse $prefix;\n    return $palindrome;\n}", "    my($lps) = longest_palindromic_suffix($string);\n\
    \    return $string . reverse(substr($string, 0, length($string) - length($lps)));\n\
    }", "    return $string if $string eq \"\";\n    my($longest_suffix) = longest_palindromic_suffix($string);\n\
    \    my($prefix) = substr($string, 0, -length($longest_suffix));\n    my($prefix_reverse)\
    \ = reverse $prefix;\n    return $string . $prefix_reverse;\n}", "    my($l) =\
    \ length($string);\n    my($p) = 0;\n    my($q) = $l;\n    while($q>0) {\n   \
    \     last if is_palindrome(substr($string,$p,$q-$p));\n        $q--;\n    }\n\
    \    my($r) = substr($string,0,$p);\n    return $string.$r;\n}", "    my $palindrome\
    \ = $string;\n    my $suffix_length = longest_palindrome_suffix_length($string);\n\
    \    $palindrome .= reverse substr($string, 0, length($string) - $suffix_length);\n\
    \    return $palindrome;\n}", "    my $n = length($string);\n    my $next = next_char($string);\n\
    \    if ($n == 0) {\n        return \"\";\n    }\n    my $suffix = longest_suffix_palindrome($string);\n\
    \    my $prefix = reverse substr($string, 0, $n - length($suffix));\n    return\
    \ $string . $prefix . $next;\n}", "    my $len = length($string);\n    my $suffix_len\
    \ = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            $suffix_len = $len - $i;\n            last;\n        }\n\
    \    }\n    return $string . reverse(substr($string, 0, $len - $suffix_len));\n\
    }", "    my($shortest_palindrome) = \"\";\n    my($length_of_longest_palindrome_suffix)\
    \ = longest_palindrome_suffix_length($string);\n    my($prefix_to_reverse) = substr($string,\
    \ 0, length($string) - $length_of_longest_palindrome_suffix);\n    my($palindrome_postfix)\
    \ = reverse $prefix_to_reverse;\n    $shortest_palindrome = $string . $palindrome_postfix;\n\
    \    return $shortest_palindrome;\n}", "    # Find the longest postfix that is\
    \ a palindrome.\n    my $postfix = $string;\n    while (1) {\n        last if\
    \ is_palindrome($postfix);\n        $postfix = substr($postfix, 1);\n    }\n \
    \   my $prefix = substr($string, 0, length($string) - length($postfix));\n   \
    \ return $string . reverse($prefix);\n}", "    if(palindrome($string)) {\n   \
    \     return $string;\n    }\n    my $longest_palindrome = \"\";\n    my $length\
    \ = length($string);\n    for(my $i = 0; $i < $length; $i++) {\n        my $postfix\
    \ = substr($string, $i);\n        if(palindrome($postfix)) {\n            if(length($postfix)\
    \ > length($longest_palindrome)) {\n                $longest_palindrome = $postfix;\n\
    \            }\n        }\n    }\n    my $prefix = substr($string, 0, $length\
    \ - length($longest_palindrome));\n    return $string . reverse($prefix);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
