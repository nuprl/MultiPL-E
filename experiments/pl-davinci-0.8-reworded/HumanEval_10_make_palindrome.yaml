name: HumanEval_10_make_palindrome
language: pl
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome(\"\")\n# \"\"\n# >>> make_palindrome(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome(\"cata\")\n# \"catac\"\nsub make_palindrome\
  \ {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xyz\"),\"xyzyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"xyx\"),\"xyx\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $string if length($string) <= 1;\n    my $prefix = $string;\n\
    \    my $postfix = reverse $string;\n    while (1) {\n        last if substr($prefix,\
    \ 0, 1) ne substr($postfix, 0, 1);\n        $prefix = substr($prefix, 1);\n  \
    \      $postfix = substr($postfix, 1);\n    }\n    return $string . reverse $prefix;\n\
    }", "    my $length = length($string);\n    return $string if $length <= 1;\n\
    \    my $max_length = 1;\n    my $max_index = 0;\n    for (my $i = 0; $i < $length;\
    \ $i++) {\n        my $length = max_palindrome_length($string, $i, $i);\n    \
    \    if ($length > $max_length) {\n            $max_length = $length;\n      \
    \      $max_index = $i;\n        }\n        $length = max_palindrome_length($string,\
    \ $i, $i + 1);\n        if ($length > $max_length) {\n            $max_length\
    \ = $length;\n            $max_index = $i;\n        }\n    }\n    return $string\
    \ . reverse_substring($string, 0, $max_index);\n}", "    my $len = length($string);\n\
    \    my $str = $string;\n    while ($str ne \"\") {\n        if (is_palindrome($str))\
    \ {\n            return $string . substr(reverse($string), $len-length($str));\n\
    \        }\n        $str = substr($str, 0, length($str)-1);\n    }\n    return\
    \ $string;\n}", '    return $string if !$string;', "    my $rev_string = reverse($string);\n\
    \    my $longest_suffix = longest_common_suffix($string, $rev_string);\n    my\
    \ $shortest_prefix = substr($string, 0, (length($string) - length($longest_suffix)));\n\
    \    my $rev_shortest_prefix = reverse($shortest_prefix);\n    return $string\
    \ . $rev_shortest_prefix;\n}", "    return \"\" if $string eq \"\";\n    # Find\
    \ longest palindromic substring in $string.\n    my $suffix = \"\";\n    for (my\
    \ $i = length($string); $i > 0; $i--) {\n        $suffix = substr($string, -$i,\
    \ $i);\n        if (is_palindrome($suffix)) {\n            last;\n        }\n\
    \    }\n    my $prefix = substr($string, 0, length($string) - length($suffix));\n\
    \    return $string if $prefix eq \"\";\n    return $string . reverse($prefix);\n\
    }", "    my $rev = reverse $string;\n    my $postfix = $string;\n    for (1..length($string))\
    \ {\n        if ($postfix eq $rev) {\n            return $string.$rev;\n     \
    \   }\n        chop $postfix;\n        $rev = reverse $postfix;\n    }\n    return\
    \ $string.$rev;\n}", "    my $s = length($string);\n    my $rev = reverse($string);\n\
    \    if($s == 0 || $string eq $rev) {\n        return $string;\n    }\n    my\
    \ $max = 0;\n    for(my $i = $s; $i > 0; $i--) {\n        my $postfix = substr($string,\
    \ $i, $s - $i);\n        my $postfix_rev = reverse($postfix);\n        if($postfix\
    \ eq $postfix_rev) {\n            $max = $i;\n            last;\n        }\n \
    \   }\n    my $prefix = substr($string, 0, $max);\n    my $prefix_rev = reverse($prefix);\n\
    \    return $string . $prefix_rev;\n}", "    return $string if ( !$string || $string\
    \ eq reverse($string) );\n    # Find the longest postfix that is a palindrome\n\
    \    my $longest_postfix_len = 0;\n    my $longest_postfix_start = -1;\n    for\
    \ ( my $i = length($string) - 1; $i >= 0; $i-- ) {\n        my $postfix = substr(\
    \ $string, $i );\n        if ( $postfix eq reverse($postfix) ) {\n           \
    \ $longest_postfix_len = length($postfix);\n            $longest_postfix_start\
    \ = $i;\n            last;\n        }\n    }\n    # Append the reverse of the\
    \ prefix that comes before the palindromic suffix.\n    my $prefix = substr( $string,\
    \ 0, $longest_postfix_start );\n    return $string . reverse($prefix);\n}", " \
    \   my $max_length = length($string);\n    my $pivot = int(($max_length + 1) /\
    \ 2);\n    my $palindrome = \"\";\n    for (my $k = $pivot; $k <= $max_length;\
    \ $k++) {\n        if (is_palindrome($string, $max_length, $k)) {\n          \
    \  $palindrome = substr($string, 0, $k);\n            last;\n        }\n    }\n\
    \    if (length($palindrome) > 0) {\n        return $string . reverse_string($palindrome);\n\
    \    }\n    return $string;\n}", "    my($palindrome);\n    my($prefix);\n   \
    \ $palindrome = find_longest_palindrome($string);\n    $prefix = $string;\n  \
    \  substr($prefix, -length($palindrome), length($palindrome)) = \"\";\n    $palindrome\
    \ .= reverse $prefix;\n    return $palindrome;\n}", "    my($lps) = longest_palindromic_suffix($string);\n\
    \    return $string . reverse(substr($string, 0, length($string) - length($lps)));\n\
    }", "    return $string if $string eq \"\";\n    my($longest_suffix) = longest_palindromic_suffix($string);\n\
    \    my($prefix) = substr($string, 0, -length($longest_suffix));\n    my($prefix_reverse)\
    \ = reverse $prefix;\n    return $string . $prefix_reverse;\n}", "    my($l) =\
    \ length($string);\n    my($p) = 0;\n    my($q) = $l;\n    while($q>0) {\n   \
    \     last if is_palindrome(substr($string,$p,$q-$p));\n        $q--;\n    }\n\
    \    my($r) = substr($string,0,$p);\n    return $string.$r;\n}", "    my $palindrome\
    \ = $string;\n    my $suffix_length = longest_palindrome_suffix_length($string);\n\
    \    $palindrome .= reverse substr($string, 0, length($string) - $suffix_length);\n\
    \    return $palindrome;\n}", "    my $n = length($string);\n    my $next = next_char($string);\n\
    \    if ($n == 0) {\n        return \"\";\n    }\n    my $suffix = longest_suffix_palindrome($string);\n\
    \    my $prefix = reverse substr($string, 0, $n - length($suffix));\n    return\
    \ $string . $prefix . $next;\n}", "    my $len = length($string);\n    my $suffix_len\
    \ = 0;\n    for (my $i = 0; $i < $len; $i++) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            $suffix_len = $len - $i;\n            last;\n        }\n\
    \    }\n    return $string . reverse(substr($string, 0, $len - $suffix_len));\n\
    }", "    my($shortest_palindrome) = \"\";\n    my($length_of_longest_palindrome_suffix)\
    \ = longest_palindrome_suffix_length($string);\n    my($prefix_to_reverse) = substr($string,\
    \ 0, length($string) - $length_of_longest_palindrome_suffix);\n    my($palindrome_postfix)\
    \ = reverse $prefix_to_reverse;\n    $shortest_palindrome = $string . $palindrome_postfix;\n\
    \    return $shortest_palindrome;\n}", "    # Find the longest postfix that is\
    \ a palindrome.\n    my $postfix = $string;\n    while (1) {\n        last if\
    \ is_palindrome($postfix);\n        $postfix = substr($postfix, 1);\n    }\n \
    \   my $prefix = substr($string, 0, length($string) - length($postfix));\n   \
    \ return $string . reverse($prefix);\n}", "    if(palindrome($string)) {\n   \
    \     return $string;\n    }\n    my $longest_palindrome = \"\";\n    my $length\
    \ = length($string);\n    for(my $i = 0; $i < $length; $i++) {\n        my $postfix\
    \ = substr($string, $i);\n        if(palindrome($postfix)) {\n            if(length($postfix)\
    \ > length($longest_palindrome)) {\n                $longest_palindrome = $postfix;\n\
    \            }\n        }\n    }\n    my $prefix = substr($string, 0, $length\
    \ - length($longest_palindrome));\n    return $string . reverse($prefix);\n}",
  "    return $string if is_palindrome($string);\n    my $postfix = find_palindromic_suffix($string);\n\
    \    return $string . reverse(substr($string, 0, length($string) - length($postfix)));\n\
    }", "    return $string if length($string) < 2;\n    # find the longest palindromic\
    \ suffix\n    # aaaa is the longest palindromic suffix of aaaa, aaa, aa, a\n \
    \   # aaa is the longest palindromic suffix of aaa, aa, a\n    # aa is the longest\
    \ palindromic suffix of aa, a\n    # a is the longest palindromic suffix of a\n\
    \    my $lps = find_longest_palindromic_suffix($string);\n    my $length = length($lps);\n\
    \    my $prefix = substr($string, 0, length($string) - $length);\n    return $string\
    \ . reverse($prefix);\n}", "    my($prefix) = reverse(substr($string, 0, longest_palindrome_index($string)));\n\
    \    my($palindrome) = $string.$prefix;\n    return $palindrome;\n}", '    return
    $string if $string eq "";', "    my @chars = split(\"\", $string);\n    my $start\
    \ = 0;\n    my $end = $#chars;\n    my $palindrome_center = 0;\n    my $palindrome_length\
    \ = 0;\n    while($start < $end) {\n        $palindrome_center = $start;\n   \
    \     my $match_length = 0;\n        while($start < $end) {\n            if($chars[$start]\
    \ eq $chars[$end]) {\n                $match_length += 2;\n                if($match_length\
    \ > $palindrome_length) {\n                    $palindrome_length = $match_length;\n\
    \                    $palindrome_center = $start;\n                }\n       \
    \     }\n            ++$start;\n            --$end;\n        }\n        $start\
    \ = 0;\n        ++$end;\n    }\n    my $palindrome_prefix = substr($string, 0,\
    \ $palindrome_center - $palindrome_length / 2 + 1);\n    my $palindrome_prefix_reversed\
    \ = reverse($palindrome_prefix);\n    return $string . $palindrome_prefix_reversed;\n\
    }", "    if(length($string) == 0) {\n        return $string;\n    }\n    my $longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix($string);\n    my $palindrome_prefix = reverse(substr($string,\
    \ 0, length($string) - length($longest_palindrome_suffix)));\n    return $string\
    \ . $palindrome_prefix;\n}", "    my $length = length($string);\n    my $suffix_length\
    \ = max_palindrome_length_from_end($string);\n    my $prefix_length = $length\
    \ - $suffix_length;\n    my $reverse_prefix = reverse substr($string, 0, $prefix_length);\n\
    \    return $string . $reverse_prefix;\n}", "    my($length) = length($string);\n\
    \    my($prefix) = '';\n    for(my($i) = 0; $i < $length; $i++) {\n        if(is_palindrome(substr($string,\
    \ $i, $length - $i))) {\n            $prefix = substr($string, 0, $i);\n     \
    \       last;\n        }\n    }\n    return $string . reverse($prefix);\n}", " \
    \   my $len = length($string);\n    my $min = $len;\n    my $max = -1;\n    #\
    \ Find the longest palindromic suffix using the Manacher's algorithm.\n    # The\
    \ longest palindromic suffix of 'abxab' will be found in '$max = 1; $min = 0;'\n\
    \    # because 'ab' is the longest palindromic suffix.\n    for (my $i = 0; $i\
    \ < $len; $i++) {\n        if (is_palindrome($string, $i, $i)) {\n           \
    \ if ($min > $i) {\n                $min = $i;\n            }\n            if\
    \ ($max < $i) {\n                $max = $i;\n            }\n        }\n      \
    \  if (is_palindrome($string, $i, $i + 1)) {\n            if ($min > $i + 1) {\n\
    \                $min = $i + 1;\n            }\n            if ($max < $i) {\n\
    \                $max = $i;\n            }\n        }\n    }\n    # Append reverse\
    \ of prefix before the palindromic suffix.\n    return $string . reverse_string(substr($string,\
    \ 0, $min));\n}", "    my $prefix = \"\";\n    my $postfix = \"\";\n    my $prefix_length\
    \ = -1;\n    my $postfix_length = -1;\n    my $palindrome_length = -1;\n    my\
    \ $max_palindrome_length = length($string);\n    while ($prefix_length < $max_palindrome_length\
    \ / 2) {\n        $prefix_length++;\n        $postfix_length = $max_palindrome_length\
    \ - $prefix_length;\n        $prefix = substr($string, 0, $prefix_length);\n \
    \       $postfix = substr($string, $postfix_length);\n        $palindrome_length\
    \ = _palindrome_length($postfix);\n        if ($palindrome_length == $prefix_length)\
    \ {\n            return $string . reverse($prefix);\n        }\n    }\n    return\
    \ $string;\n}", "    my $plen = is_palindrome(substr($string, 0, length($string)/2));\n\
    \    if ($plen) {\n        return substr($string, $plen) . substr($string, 0,\
    \ $plen);\n    } else {\n        my $l = length($string);\n        $plen = is_palindrome(substr($string,\
    \ $l/2, $l/2));\n        if ($plen) {\n            return substr($string, 0, $l\
    \ - $plen) . reverse(substr($string, $l - $plen));\n        } else {\n       \
    \     return $string . reverse($string);\n        }\n    }\n}", "    return $string\
    \ if ! $string;\n    my $s = join(\"\", reverse split //, $string);\n    my $k\
    \ = 0;\n    for (my $i = 1; $i < length($string); $i++) {\n        if (substr($string,\
    \ $i) eq substr($s, 0, length($string) - $i)) {\n            $k = $i;\n      \
    \  }\n    }\n    return $string . substr($s, length($string) - $k);\n}", "   \
    \ my $length = length($string);\n    if ($length == 0) {\n        return \"\"\
    ;\n    }", "    return \"\" if $string eq \"\";\n    return $string if is_palindrome($string);\n\
    \    my($palindrome_suffix) = find_palindrome_suffix($string);\n    return $string\
    \ . scalar reverse(substr($string, 0, length($string) - length($palindrome_suffix)));\n\
    }", "    # substr args: string, offset, length\n    return substr($string, 0,\
    \ 0) if $string eq \"\";\n    my $reverse = reverse $string;\n    # Find the longest\
    \ suffix that is a palindrome:\n    my $prefix_length = 0;\n    foreach my $i\
    \ (1 .. length($string)) {\n        if (substr($string, -$i) eq substr($reverse,\
    \ 0, $i)) {\n            $prefix_length = $i;\n        }\n    }\n    return $string\
    \ . substr($reverse, $prefix_length);\n}", "    # Reverse the string.\n    my\
    \ $rev = reverse $string;\n    # Find the longest suffix of the string which is\
    \ the same as its prefix.\n    my $len = index $string . \"\\0\" . $rev, \"\\\
    0\";\n    # Append reverse of the string prefix before the palindromic suffix.\n\
    \    return $string . reverse substr $string, 0, length($string) - $len;\n}",
  "    my $length = length($string);\n    my $max_index = $length - 1;\n    my $longest_postfix_index\
    \ = -1;\n    my $longest_postfix_length = 0;\n    for my $index (0 .. $max_index)\
    \ {\n        my $postfix_length = is_palindrome($string, $index);\n        if\
    \ ($postfix_length > $longest_postfix_length) {\n            $longest_postfix_index\
    \ = $index;\n            $longest_postfix_length = $postfix_length;\n        }\n\
    \    }\n    my $palindrome_length = $longest_postfix_index + $longest_postfix_length;\n\
    \    if ($palindrome_length == $length) {\n        return $string;\n    }\n  \
    \  else {\n        my $prefix = substr($string, 0, $palindrome_length);\n    \
    \    return $string . reverse_string($prefix);\n    }\n}", "    my $rev = reverse\
    \ $string;\n    my $strlen = length $string;\n    my $final_pos = index($string,\
    \ $rev);\n    if ($final_pos > 0) {\n        return $string . reverse substr($string,\
    \ 0, $strlen - $final_pos - 1);\n    } else {\n        return $string . $rev;\n\
    \    }\n}", "    if(!defined($string)) {\n        return undef;\n    }\n    elsif($string\
    \ eq \"\") {\n        return \"\";\n    }\n    else {\n        my($rev) = reverse($string);\n\
    \        my($i) = 0;\n        while(substr($string, $i, 1) eq substr($rev, $i,\
    \ 1)) {\n            $i++;\n        }\n        my($prefix) = substr($string, 0,\
    \ $i);\n        my($suffix) = substr($string, $i);\n        return $string . substr(reverse($prefix),\
    \ 0, length($prefix) - length($suffix));\n    }\n}", "    my $len = length($string);\n\
    \    my $suffix = \"\";\n    my $end = $len;\n    my $i;\n    for($i = 0; $i <\
    \ $len; $i++) {\n        my $substr = substr($string, $i, $len);\n        if(substr($substr,\
    \ 0, $end) eq reverse($substr)) {\n            $suffix = $substr;\n          \
    \  $end = $i;\n        }\n    }\n    my $prefix = substr($string, 0, $end);\n\
    \    return $string . reverse($prefix);\n}", "    my $palindrome = longest_palindrome_suffix($string);\n\
    \    $palindrome .= substr($string, 0, length($string) - length($palindrome));\n\
    \    return $palindrome;\n}", "    my($i, $j, $k, $l) = (0, 0, 0, 0);\n    my($prefix,\
    \ $rev_prefix, $suffix);\n    my($len) = length($string);\n    my($opt) = [0];",
  "    $string = reverse($string);\n    return $string if is_palindrome($string);\n\
    \    # Find the longest suffix of the string that is a palindrome.\n    my $suffix_length\
    \ = 0;\n    while ( $suffix_length + 1 < length($string) ) {\n        if ( is_palindrome(\
    \ substr( $string, $suffix_length + 1 ) ) ) {\n            $suffix_length++;\n\
    \        }\n        else {\n            last;\n        }\n    }\n    my $prefix\
    \ = substr( $string, 0, $suffix_length );\n    $prefix = reverse($prefix);\n \
    \   return $string . $prefix;\n}", "    return $string if length($string) < 2;\n\
    \    my $pos = longest_palindrome_pos($string);\n    if ($pos == 0) {\n      \
    \  return $string . reverse $string;\n    } else {\n        return $string . substr(reverse\
    \ $string, length($string) - $pos);\n    }\n}", "    my @string_chars = split\
    \ //, $string;\n    my $palindrome_len = longest_palindrome_length(\\@string_chars);\n\
    \    my $palindrome_suffix = $string_chars[$palindrome_len .. $#string_chars];\n\
    \    return $string . reverse(@$palindrome_suffix);\n}", "    # Find longest postfix\
    \ of string that is a palindrome\n    my $strlen = length($string);\n    my $i;\n\
    \    for ($i = $strlen; $i >= 0; $i--) {\n        last if is_palindrome(substr($string,\
    \ $i));\n    }\n    my $suffix = substr($string, $i);\n    # Append reverse of\
    \ string prefix that comes before the palindromic suffix.\n    return $string\
    \ . reverse(substr($string, 0, $i));\n}", "    my $len = length($string);\n  \
    \  my $rev = scalar reverse $string;\n    my $lps = _longest_palindromic_suffix($string);\n\
    \    my $lpp = _longest_palindromic_prefix($string);\n    my $prefix = substr($string,\
    \ 0, $len - $lps);\n    my $suffix = substr($rev, $len - $lpp);\n    return $string\
    \ . $suffix . $prefix;\n}", "    return \"\" if $string eq \"\";\n    my $longest_suffix\
    \ = find_longest_palindrome_suffix($string);\n    return $string . reverse(substr($string,\
    \ 0, -1 * (length($string) - length($longest_suffix))));\n}", "    my $postfix\
    \ = longest_palindromic_postfix($string);\n    my $prefix = reverse(substr($string,\
    \ 0, length($string) - length($postfix)));\n    return $string . $prefix;\n}",
  "    return $string if is_palindrome($string);\n    my $length = length($string);\n\
    \    my $palindrome_length = longest_palindrome_length($string);\n    return $string.reverse(substr($string,\
    \ 0, $length - $palindrome_length));\n}", "    return $string if $string eq \"\
    \";\n    my $len = length($string);\n    my $longest_palindrome_suffix = longest_palindrome_suffix($string);\n\
    \    return $string . substr(reverse($string), 0, $len - $longest_palindrome_suffix);\n\
    }", "    return $string if $string eq \"\";\n    my $suffix = suffix_palindrome($string);\n\
    \    return $string . reverse(substr($string, 0, length($string) - length($suffix)));\n\
    }", "    return $string if length($string) <= 1;\n    my $reversed = reverse $string;\n\
    \    # Find the longest palindromic suffix\n    my $start = 0;\n    my $max_length\
    \ = 0;\n    while($start < length($string)) {\n        my $length = 0;\n     \
    \   while($start + $length < length($string) && substr($string, $start + $length,\
    \ 1) eq substr($reversed, length($string) - $start - $length - 1, 1)) {\n    \
    \        $length++;\n        }\n        if($length > $max_length) {\n        \
    \    $max_length = $length;\n        }\n        $start++;\n    }\n    return $string\
    \ . substr(reverse $string, 0, length($string) - $max_length);\n}", "    return\
    \ $string if $string eq \"\";\n    my $longest_suffix = is_palindrome($string);\n\
    \    return $string if length($longest_suffix) == length($string);\n    return\
    \ substr($string, 0, length($string) - length($longest_suffix)) . reverse(substr($string,\
    \ 0, length($string) - length($longest_suffix))) . $longest_suffix;\n}", "   \
    \ my $rev = reverse($string);\n    my $new_string = $string . $rev;\n    my $idx\
    \ = index($new_string, reverse(my $suffix = $string));\n    $string . substr($rev,\
    \ 0, length($rev) - length($suffix));\n}", "    return $string if $string eq reverse\
    \ $string;\n    my $i = 1;\n    my $len = length $string;\n    for (; $i < $len;\
    \ $i++) {\n        my $reverse_suffix = reverse substr $string, 0, $i;\n     \
    \   last if substr($string, $i) eq $reverse_suffix;\n    }\n    my $prefix = substr\
    \ $string, 0, $i - 1;\n    return $string . reverse $prefix;\n}", "    my $suffix\
    \ = find_longest_palindrome_suffix($string);\n    my $prefix = substr($string,\
    \ 0, length($string) - length($suffix));\n    return $string . substr(reverse($prefix),\
    \ 0, length($prefix));\n}", '    return $string if length($string) <= 1;', " \
    \   $string = reverse_string($string);\n    my $idx = index_of_palindrome_in_postfix($string);\n\
    \    return $string . substr($string, $idx + 1);\n}", "    return $string if $string\
    \ eq reverse $string;\n    my $prefix = reverse $string;\n    $prefix =~ s/^(.+).*$/\\\
    1/;\n    my $suffix = $string;\n    $suffix =~ s/^.*?(.+)$/\\1/;\n    return $string\
    \ . make_palindrome($prefix);\n}", "    my $longest_palindrome = longest_palindrome($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($longest_palindrome));\n\
    \    my $palindrome = $string . reverse($prefix);\n    return $palindrome;\n}",
  "    my $to_append = \"\";\n    my $prefix_length = index_of_longest_palindrome($string);\n\
    \    if ($prefix_length == -1) {\n        $to_append = reverse($string);\n   \
    \ } else {\n        $to_append = reverse(substr($string, 0, $prefix_length));\n\
    \    }\n    return $string . $to_append;\n}", "    my $original_length = length($string);\n\
    \    my $new_prefix = \"\";\n    for (my $i = 1; $i < $original_length; $i++)\
    \ {\n        if (substr($string, $i) eq reverse(substr($string, 0, $i))) {\n \
    \           $new_prefix = reverse(substr($string, $i));\n            last;\n \
    \       }\n    }\n    return $string . $new_prefix;\n}", "    my $string_length\
    \ = length($string);\n    my $longest_palindrome_length = 0;\n    my $longest_palindrome_start\
    \ = 0;\n    for my $i (0 .. $string_length) {\n        my $j = -$i - 1;\n    \
    \    while (1) {\n            last if $i + $j < 0;\n            last if $j ==\
    \ 0;\n            last if substr($string, $i, 1) ne substr($string, $j, 1);\n\
    \            last if --$j == 0;\n        }\n        if ($j == 0) {\n         \
    \   $longest_palindrome_length = $i + 1;\n            $longest_palindrome_start\
    \ = $i;\n        }\n    }\n    my $prefix = substr($string, 0, $longest_palindrome_start);\n\
    \    my $prefix_reverse = reverse($prefix);\n    return $string . $prefix_reverse;\n\
    }", "    my $lps = lps($string);\n    return $string . reverse substr($string,\
    \ 0, length($string) - $lps);\n}", "    return \"\" if !$string;\n    my $suffix\
    \ = longest_palindrome_suffix($string);\n    return $string . reverse(substr($string,\
    \ 0, length($string) - length($suffix)));\n}", "    return $string if(is_palindrome($string));\n\
    \    # find the longest suffix that is a palindrome.\n    my $length = length($string);\n\
    \    for(my $i = 0; $i < $length; $i++) {\n        my $suffix = substr($string,\
    \ $i);\n        if(is_palindrome($suffix)) {\n            # this is the longest\
    \ suffix that is a palindrome.\n            my $prefix = substr($string, 0, $i);\n\
    \            return $string . reverse_string($prefix);\n        }\n    }\n}",
  "    my($palindrome_start) = longest_palindrome_start($string);\n    my($pre_palindrome)\
    \ = substr($string, 0, $palindrome_start);\n    return $string . reverse($pre_palindrome);\n\
    }", "    my($result);\n    return $string if is_palindrome($string);\n    # Find\
    \ longest palindromic suffix.\n    my($len) = length($string);\n    for (my($i)\
    \ = $len - 1; $i >= 0; $i--) {\n        if (is_palindrome(substr($string, $i)))\
    \ {\n            $result = substr($string, 0, $i);\n            last;\n      \
    \  }\n    }\n    $result = reverse($result);\n    return $string . $result;\n}",
  "    my $palindrome_length = palindrome_length($string);\n    my $palindrome_prefix\
    \ = reverse substr($string, 0, length($string) - $palindrome_length);\n    return\
    \ $string . $palindrome_prefix;\n}", "    my($s) = $string;\n    my($i) = length($s);\n\
    \    while (1) {\n        last if (substr($s, 0, $i) eq reverse(substr($s, -$i)));\n\
    \        $i--;\n    }\n    return $string . reverse(substr($string, 0, length($string)\
    \ - $i));\n}", "    return $string if(length($string) <= 1);\n    my $length =\
    \ length($string);\n    my $left = 0;\n    my $right = $length-1;\n    while($left\
    \ < $right) {\n        my $left_char = substr($string, $left, 1);\n        my\
    \ $right_char = substr($string, $right, 1);\n        if($left_char eq $right_char)\
    \ {\n            $left++;\n            $right--;\n        } else {\n         \
    \   return substr($string, 0, $right+1) . make_palindrome(reverse(substr($string,\
    \ $right+1, $left))) . substr($string, $right+1);\n        }\n    }\n    return\
    \ $string;\n}", "    my($len) = length($string);\n    my($suffix_start) = find_longest_palindrome_suffix($string);\n\
    \    return substr($string, 0, $len - $suffix_start) .\n           reverse(substr($string,\
    \ 0, $suffix_start)) .\n           substr($string, $suffix_start);\n}", "    #\
    \ Find the longest postfix of the string that is a palindrome.\n    my $i = 0;\n\
    \    for(; $i < length($string); $i++) {\n        my $postfix = substr($string,\
    \ $i);\n        if(is_palindrome($postfix)) {\n            # We found a palindromic\
    \ postfix. We can now append the reverse of the string prefix to it.\n       \
    \     return $string . reverse_string(substr($string, 0, $i));\n        }\n  \
    \  }\n    return $string;\n}", "    my($longest_palindrome) = \"\";\n    foreach\
    \ my $i (0..length($string)-1) {\n        # It is important to call reverse()\
    \ first to trigger\n        # 'use locale' semantics.\n        # Otherwise, with\
    \ locale-agnostic 'utf8::upgrade()' and\n        # 'utf8::downgrade()' calls the\
    \ string can become corrupted\n        # and produce unexpected results.\n   \
    \     my($reversed) = reverse($string);\n        $reversed = '' if !defined($reversed);\n\
    \        if (substr($string, $i) eq $reversed) {\n            $longest_palindrome\
    \ = substr($string, $i);\n            last;\n        }\n    }\n    my($prefix)\
    \ = substr($string, 0, length($string) - length($longest_palindrome));\n    return\
    \ $string . reverse($prefix);\n}", "    my($prefix) = $string;\n    my($suffix)\
    \ = reverse $string;\n    for my $length (($#string .. 1, 0)) {\n        return\
    \ $string . reverse $prefix if substr($prefix, 0, $length) eq substr($suffix,\
    \ 0, $length);\n    }\n}", "    return $string if is_palindrome($string);\n  \
    \  my $prefix = _longest_palindromic_suffix($string);\n    return $string . $prefix;\n\
    }", "    my $longest_palindrome = \"\";\n    my $length = length($string);\n \
    \   for(my $i = $length - 1; $i >= 0; $i--) {\n        if(is_palindrome(substr($string,\
    \ $i))) {\n            $longest_palindrome = substr($string, $i);\n          \
    \  last;\n        }\n    }\n    if($longest_palindrome) {\n        return $string\
    \ . substr(reverse($string), 0, length($string) - length($longest_palindrome));\n\
    \    }\n    return $string;\n}", "    my($reverse) = reverse($string);\n    my($len)\
    \ = length($string);\n    my($i);\n    my($retval);", "    my $p_end = find_palindrome_end($string);\n\
    \    my $reversed_prefix = reverse substr($string, 0, $p_end);\n    return $string\
    \ . $reversed_prefix;\n}", "    my $palindrome = find_longest_palindrome($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($palindrome));\n\
    \    my $suffix = reverse($prefix);\n    return $string . $suffix;\n}", "    if\
    \ ($string eq \"\") {\n        return \"\";\n    }\n    my($max_palindrome_len)\
    \ = 0;\n    my($max_palindrome_start) = 0;\n    for (my($len) = length($string);\
    \ $len > 0; $len--) {\n        for (my($start) = 0; $start + $len <= length($string);\
    \ $start++) {\n            if (_is_palindrome(substr($string, $start, $len)))\
    \ {\n                $max_palindrome_len = $len;\n                $max_palindrome_start\
    \ = $start;\n                last;\n            }\n        }\n        if ($max_palindrome_len)\
    \ {\n            last;\n        }\n    }\n    my($prefix) = substr($string, 0,\
    \ $max_palindrome_start);\n    $prefix = _rev($prefix);\n    return $string .\
    \ $prefix;\n}", "    my $max_postfix_length = 1;\n    # Find the longest palindromic\
    \ postfix.\n    for (my $postfix_length = 2; $postfix_length <= length($string);\
    \ $postfix_length++) {\n        if (substr($string, -$postfix_length) eq reverse(substr($string,\
    \ -$postfix_length))) {\n            $max_postfix_length = $postfix_length;\n\
    \        }\n    }\n    # Return palindrome.\n    return $string . reverse(substr($string,\
    \ 0, length($string) - $max_postfix_length));\n}", "    return $string if length($string)\
    \ < 2;\n    my $max_postfix_palindrome_length = max_palindrome_length($string);\n\
    \    my $prefix = substr($string, 0, length($string) - $max_postfix_palindrome_length);\n\
    \    return $string . reverse($prefix);\n}", "    return $string if $string eq\
    \ reverse $string;\n    my $reversed = reverse $string;\n    my $longest_postfix\
    \ = 0;\n    for my $i (0 .. length($string) - 1) {\n        if (substr($string,\
    \ $i) eq substr($reversed, 0, length($string) - $i)) {\n            $longest_postfix\
    \ = length($string) - $i;\n        }\n    }\n    my $shortest_palindrome = substr($string,\
    \ 0, $longest_postfix) . reverse substr($string, 0, $longest_postfix);\n    return\
    \ $shortest_palindrome;\n}", "    return $string if !defined $string;\n    return\
    \ $string if length($string) == 0;\n    return $string if is_palindrome($string);\n\
    \    my $palindrome_length = palindrome_length($string);\n    return $string .\
    \ reverse(substr($string, 0, length($string) - $palindrome_length));\n}", "  \
    \  my $ret = longest_palindrome_postfix($string);\n    return $string . substr($string,\
    \ 0, length($string) - length($ret))\n        if length($ret) > 0;\n    return\
    \ $string;\n}", "    return \"\" if $string eq \"\";\n    my $postfix = longest_palindrome_postfix($string);\n\
    \    my $prefix = reverse(substr($string, 0, -length($postfix)));\n    return\
    \ $string . $prefix;\n}", "    my @arr = split(\"\", $string);\n    my $longest_palindrome_end_idx\
    \ = -1;\n    my $i = 0;\n    while ($i < @arr) {\n        my $j = $i;\n      \
    \  my $k = @arr - 1;\n        while ($j < $k && $arr[$j] eq $arr[$k]) {\n    \
    \        $j++;\n            $k--;\n        }\n        if ($j >= $k) {\n      \
    \      $longest_palindrome_end_idx = $i - 1;\n        }\n        $i++;\n    }\n\
    \    my $to_be_reversed = \"\";\n    for (my $i = $longest_palindrome_end_idx\
    \ + 1; $i < @arr; $i++) {\n        $to_be_reversed .= $arr[$i];\n    }\n    return\
    \ $string . reverse($to_be_reversed);\n}", "    return $string if is_palindrome($string);\n\
    \    my($prefix, $suffix) = ($string, \"\") ;\n    while (!is_palindrome($prefix))\
    \ {\n        $suffix = substr($prefix, -1, 1) . $suffix;\n        $prefix = substr($prefix,\
    \ 0, -1);\n    }\n    return $prefix . $suffix;\n}", "    my $len = length($string);\n\
    \    if ($len == 0) {\n        return $string;\n    }\n    my @c = split //, $string;\n\
    \    my $l = 0;\n    my $r = $len - 1;\n    my $found = 0;\n    # Find a center\n\
    \    my $i = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if ($c[$i] eq $c[$len\
    \ - $i - 1]) {\n            $l = $i;\n            $r = $len - $i - 1;\n      \
    \      $found = 1;\n        } else {\n            last;\n        }\n    }\n  \
    \  # Find the longest center\n    if ($found) {\n        for ($i = $l + 1; $i\
    \ < $r; $i++) {\n            if ($c[$i] eq $c[$len - $i - 1]) {\n            \
    \    $l = $i;\n                $r = $len - $i - 1;\n            } else {\n   \
    \             last;\n            }\n        }\n    }\n    # Reverse the rest of\
    \ string (suffix) and append\n    return $string . join(\"\", reverse(@c[$r ..\
    \ $len - 1]));\n}", "    #print \"make_palindrome($string)\\n\";\n    my $length\
    \ = length($string);\n    if ($length == 0) {\n        return \"\";\n    }\n \
    \   if ($length == 1) {\n        return $string . $string;\n    }\n    #print\
    \ \"make_palindrome: looking for palindrome\\n\";\n    #print \"make_palindrome:\
    \ string length = $length\\n\";\n    # Find the longest palindrome postfix.\n\
    \    my $longest_palindrome_length = 1;\n    my $end_index = $length - 1;\n  \
    \  while ($end_index >= $longest_palindrome_length) {\n        #print \"make_palindrome:\
    \ checking substring[end_index = $end_index]\\n\";\n        if (is_palindrome(substr($string,\
    \ $end_index))) {\n            $longest_palindrome_length = $end_index + 1;\n\
    \            last;\n        }\n        $end_index -= 1;\n    }\n    #print \"\
    make_palindrome: longest palindrome length = $longest_palindrome_length\\n\";\n\
    \    #print \"make_palindrome: end_index = $end_index\\n\";\n    my $prefix =\
    \ substr($string, 0, $end_index);\n    #print \"make_palindrome: prefix = $prefix\\\
    n\";\n    my $reverse_prefix = reverse $prefix;\n    #print \"make_palindrome:\
    \ reverse_prefix = $reverse_prefix\\n\";\n    my $palindrome = $string . $reverse_prefix;\n\
    \    #print \"make_palindrome: palindrome = $palindrome\\n\";\n    return $palindrome;\n\
    }", "    my($length) = length($string);\n    my($prefix_end) = $length - &longest_palindrome_suffix($string);\n\
    \    return $string . substr($string, $prefix_end)\n        if $prefix_end < $length;\n\
    \    return $string;\n}", "    return $string if $string eq '';\n    my $longest_palindrome\
    \ = find_longest_palindrome($string);\n    return $string . reverse(substr($string,\
    \ 0, length($string) - length($longest_palindrome)));\n}", "    my $rev_string\
    \ = reverse $string;\n    my($i) = $string =~ /(.*)$rev_string/;\n    return \"\
    $string$rev_string\" if length($i) == 0;\n    return \"$string\" . reverse substr($string,\
    \ 0, length($string) - length($i));\n}", "    my $p = longest_palindrome_suffix($string);\n\
    \    return $string . reverse(substr($string, 0, length($string) - length($p)));\n\
    }", "    my $palindrome = \"\";\n    if( is_palindrome($string) ) {\n        $palindrome\
    \ = $string;\n    }\n    else {\n        my $palindrome_suffix = longest_palindrome_suffix($string);\n\
    \        my $palindrome_prefix = reverse(substr($string, 0, length($string) -\
    \ length($palindrome_suffix)));\n        $palindrome = $string . $palindrome_prefix;\n\
    \    }\n    return $palindrome;\n}", "    # Check empty string case.\n    if (''\
    \ eq $string) {\n        return '';\n    }\n    # Compute the longest palindromic\
    \ suffix of the string.\n    my $lps = longest_palindromic_suffix($string);\n\
    \    # If the lps is the whole string, then it is already a palindrome.\n    if\
    \ (length($lps) == length($string)) {\n        return $string;\n    }\n    # Otherwise\
    \ append to the string the reverse of the prefix that comes before the palindromic\
    \ suffix.\n    return $string . reverse(substr($string, 0, length($string) - length($lps)));\n\
    }", "    if ($string eq \"\") {\n        return \"\";\n    }\n    my($longest_suffix)\
    \ = longest_suffix_palindrome($string);\n    my($shortest_palindrome) = reverse(substr($string,\
    \ 0, length($string) - length($longest_suffix))) . $string;\n    return $shortest_palindrome;\n\
    }", "    my $length = length($string);\n    # Check if string is already a palindrome\n\
    \    if ($string eq reverse($string)) {\n        return $string;\n    }\n    #\
    \ Check if string is a palindrome with one character added to the end\n    if\
    \ ($string eq reverse(substr($string, 0, $length - 1))) {\n        return $string;\n\
    \    }\n    # Find the longest postfix of supplied string that is a palindrome.\n\
    \    my $i = 0;\n    while ($i < $length - 1) {\n        my $suffix = substr($string,\
    \ $i);\n        if ($suffix eq reverse($suffix)) {\n            my $j = $length\
    \ - $i;\n            my $prefix = substr($string, 0, $j);\n            my $reverse_prefix\
    \ = reverse($prefix);\n            return $string . $reverse_prefix;\n       \
    \ }\n        $i++;\n    }\n    # If we are here, the string is not a palindrome\
    \ yet\n    return $string . reverse($string);\n}", "    # Get the longest palindromic\
    \ postfix.\n    my $rev = reverse $string;\n    my $suffix = find_longest_common_substring(substr($string,\
    \ 0, length($string) - 1), $rev);\n    # Get the prefix of the string that comes\
    \ before the palindromic suffix.\n    my $prefix = substr($string, 0, length($string)\
    \ - length($suffix));\n    # Return the concatenation of reverse of the prefix\
    \ and the suffix.\n    return $prefix . reverse $prefix . $suffix;\n}", "    my\
    \ $max_postfix_palindrome_len = longest_palindrome_length($string);\n    return\
    \ $string . substr(reverse($string), 0, -$max_postfix_palindrome_len);\n}", " \
    \   my($palindrome);\n    my($length);\n    my($prefix);\n    my($postfix);\n\
    \    my($end);\n    my($left);\n    my($right);\n    my($i);\n    if(length($string)\
    \ == 0) {\n        return \"\";\n    }\n    $palindrome = $string;\n    $length\
    \ = length($string);\n    for($i = 0; $i < $length; $i++) {\n        $end = $length\
    \ - $i;\n        $left = substr($string, 0, $end);\n        $right = substr($string,\
    \ $i);\n        if($left eq reverse($right)) {\n            $prefix = substr($string,\
    \ 0, $i);\n            $postfix = reverse($prefix);\n            $palindrome =\
    \ $string . $postfix;\n            last;\n        }\n    }\n    return $palindrome;\n\
    }", "    my $len = length($string);\n    if ($len == 0) {\n        return $string;\n\
    \    }\n    my $suffix_len = find_largest_palindrome_suffix($string);\n    if\
    \ ($suffix_len == $len) {\n        return $string;\n    }\n    my $new_len = 2\
    \ * $len - $suffix_len;\n    my $new_string = $string . substr(reverse($string),\
    \ $len - $suffix_len, $new_len - $len);\n    return $new_string;\n}", "    return\
    \ $string if length($string) <= 1;\n    if (is_palindrome($string)) {\n      \
    \  return $string;\n    }\n    my $max_palindrome_prefix_length = max_palindrome_prefix_length($string);\n\
    \    return substr($string, 0, $max_palindrome_prefix_length) . reverse(substr($string,\
    \ $max_palindrome_prefix_length));\n}", "    my $suffix = longest_palindrome_suffix($string);\n\
    \    return $string . reverse substr($string, 0, length($string) - length($suffix));\n\
    }", "    return $string if length($string) <= 1;\n    my $longest_postfix = longest_palindromic_postfix($string);\n\
    \    return $string . scalar reverse(substr($string, 0, length($string) - length($longest_postfix)));\n\
    }", '    return $string if length($string) <= 1;', "    my $suffix = longest_palindrome_suffix($string);\n\
    \    my $prefix = reverse(substr($string, 0, length($string) - length($suffix)));\n\
    \    return $string . $prefix;\n}", "    return \"\" if $string eq \"\";\n   \
    \ my $rev = reverse $string;\n    my $max_postfix_length = 0;\n    my $reverse_prefix\
    \ = \"\";\n    my $c = 0;\n    # Find the longest postfix that is a palindrome.\n\
    \    for (my $i = 0; $i < length($string); $i++) {\n        if (substr($string,\
    \ $i) eq substr($rev, $max_postfix_length)) {\n            $max_postfix_length\
    \ = length($string) - $i;\n            $reverse_prefix = substr($rev, 0, $i);\n\
    \        }\n    }\n    return $string . $reverse_prefix;\n}", "    return $string\
    \ if length($string) <= 1;\n    my $postfix = join \"\", reverse(split //, $string);\n\
    \    my $kmp = kmp($string . \"\\0\" . $postfix);\n    my $lpp = $kmp->[-1];\n\
    \    my $prefix = substr($string, 0, -$lpp);\n    return $string . reverse($prefix);\n\
    }", "    my $palindrome_len = palindrome_suffix_len($string);\n    if($palindrome_len\
    \ == length($string)) {\n        return $string;\n    }\n    else {\n        my\
    \ $prefix = substr($string, 0, length($string) - $palindrome_len);\n        my\
    \ $suffix = reverse($prefix);\n        return $string . $suffix;\n    }\n}", " \
    \   my $string_length = length($string);\n    return $string if $string_length\
    \ <= 1;", "    if(!$string) {\n        return $string;\n    }\n    my($len) =\
    \ length($string);\n    my($idx) = $len;\n    while($idx >= 1) {\n        my($j)\
    \ = $len - $idx;\n        if(substr($string, $j, $idx) eq reverse(substr($string,\
    \ 0, $idx))) {\n            return \"$string\" . reverse(substr($string, $idx));\n\
    \        }\n        $idx--;\n    }\n    return $string;\n}", '    return $string
    if length($string) <= 1;', "    my($suffix_start, $suffix_end) = (0, 1);\n   \
    \ for(my $i = 1; $i < length($string); $i++) {\n        my $j = $i - 1;\n    \
    \    my $k = $i + 1;\n        while($j >= 0 && $k < length($string) && substr($string,\
    \ $j, 1) eq substr($string, $k, 1)) {\n            $j--;\n            $k++;\n\
    \        }\n        if($j < 0 && $suffix_end - $suffix_start < $k - $i) {\n  \
    \          $suffix_start = $i;\n            $suffix_end = $k;\n        }\n   \
    \ }\n    my $prefix = substr($string, 0, $suffix_start);\n    return $string .\
    \ reverse($prefix);\n}", "    my($len) = length($string);\n    my($suffix) = substr($string,\
    \ 0, $len);\n    for (my($i) = $len - 1; $i >= 0; $i--) {\n        if (is_palindrome($suffix))\
    \ {\n            return $string . reverse(substr($string, 0, $i));\n        }\n\
    \        $suffix = substr($suffix, 1);\n    }\n    return $string;\n}", "    my\
    \ $rev = reverse $string;\n    return $string if ($string eq $rev);\n    my $longest_common_postfix\
    \ = '';\n    for my $i (0 .. length($string)) {\n        my $candidate = substr($string,\
    \ $i);\n        last if ($candidate eq $rev);\n        $longest_common_postfix\
    \ = $candidate if (rindex($rev, $candidate) >= 0);\n    }\n    my $prefix = substr($string,\
    \ 0, length($string) - length($longest_common_postfix));\n    return $string .\
    \ reverse $prefix;\n}", "    my($len) = length($string);\n    for(my($i) = $len\
    \ - 1; $i >= 0; $i--) {\n        # Return if the string that starts at position\
    \ $i is a palindrome.\n        if(is_palindrome($string, $i, $len - 1)) {\n  \
    \          return($string . reverse(substr($string, 0, $i)));\n        }\n   \
    \ }\n    return($string);\n}", '    return $string if $string eq reverse $string;',
  "    my $length = length($string);\n    my $reverse = reverse $string;\n    my $longest_postfix\
    \ = \"\";\n    for (my $i = 0; $i < $length; $i++) {\n        if (substr($string,\
    \ 0, $i + 1) eq substr($reverse, $length - $i - 1)) {\n            $longest_postfix\
    \ = substr($string, $i + 1);\n        }\n    }\n    return $string . reverse $longest_postfix;\n\
    }", "    my $l = length($string);\n    return $string if $l == 0 || $l == 1;\n\
    \    my $j = 0;\n    while ($j < $l) {\n        my $k = $l - $j - 1;\n       \
    \ if (substr($string, $j, 1) eq substr($string, $k, 1)) {\n            my $postfix\
    \ = substr($string, $j);\n            if (is_palindrome($postfix)) {\n       \
    \         my $prefix = substr($string, 0, $j);\n                return $string\
    \ . reverse($prefix);\n            }\n        }\n        $j++;\n    }\n    die\
    \ \"Assert failed - can't make palindrome\";\n}", "    my $rev_string = reverse\
    \ $string;\n    my $longest_palindrome = long_pal_substr($string);\n    return\
    \ $string . substr($rev_string, length($longest_palindrome));\n}", "    my($length)\
    \ = length($string);\n    my($best_length) = 0;\n    my($i);\n    for ($i = 0;\
    \ $i < $length; $i++) {\n        if (substr($string, $i, 1) eq substr($string,\
    \ $length - 1 - $i, 1)) {\n            $best_length = $i + 1;\n        }\n   \
    \ }\n    return $string . reverse(substr($string, 0, $length - $best_length));\n\
    }", "    return $string if length($string) <= 1;\n    my $longest_p = longest_palindrome_suffix($string);\n\
    \    return $string . scalar reverse(substr($string, 0, length($string) - length($longest_p)));\n\
    }", "    my $prefix = substr $string, 0, int(length($string) / 2);\n    my $suffix\
    \ = substr $string, length($string) - length($prefix);\n    my $suffix_palin =\
    \ longest_palindrome($suffix);\n    my $prefix_rev = reverse substr $prefix, 0,\
    \ length($prefix) - length($suffix_palin);\n    return \"$prefix$suffix_palin$prefix_rev\"\
    ;\n}", "    my @string = split //, $string;\n    my @rev = reverse @string;\n\
    \    my $n = length $string;\n    my $i = 0;\n    while (1) {\n        return\
    \ join \"\", @string if $i > $n;\n        if ($string[$i] eq $rev[$i]) {\n   \
    \         $i++;\n        } else {\n            splice @string, $n, 0, reverse\
    \ @string[0..$i-1];\n            $n += $i;\n            $i = 0;\n        }\n \
    \   }\n}", "    $string = pack(\"U*\", split(\"\", $string));\n    my($pal_length)\
    \ = longest_palindrome_postfix($string);\n    return $string . reverse(substr($string,\
    \ 0, length($string) - $pal_length));\n}", "    if ($string eq \"\") {\n     \
    \   return \"\";\n    }\n    my $prefix = substr($string, 0, int(length($string)\
    \ / 2));\n    my $suffix = substr($string, -(length($string) - length($prefix)));\n\
    \    my $postfix = \"\";\n    while (length($postfix) < length($string)) {\n \
    \       if (is_palindrome($prefix . $postfix . $suffix)) {\n            return\
    \ $string . reverse_string($prefix);\n        }\n        $postfix = substr($suffix,\
    \ -(length($suffix) - 1));\n    }\n    return \"\";\n}", "    my $result = \"\"\
    ;\n    my $rvr_string = reverse $string;\n    my $begin = index $string, $rvr_string;\n\
    \    if ($begin != 0) {\n        my $lps = lps($string);\n        $result = substr\
    \ $string, 0, $begin;\n        $result .= $rvr_string;\n    }\n    return $result;\n\
    }", "    my $longest_postfix = longest_palindromic_postfix($string);\n    my $prefix\
    \ = reverse substr($string, 0, length($string) - length($longest_postfix));\n\
    \    return $string . $prefix;\n}", "    return $string if $string eq '';\n  \
    \  my $longest_palindrome = '';\n    my $string_length = length($string);\n  \
    \  for my $i (0 .. $string_length) {\n        my $suffix = substr($string, $i);\n\
    \        my $prefix = substr($string, 0, $i);\n        if ($suffix eq reverse($suffix))\
    \ {\n            $longest_palindrome = $suffix;\n            last;\n        }\n\
    \    }\n    return $string . reverse(substr($string, 0, $string_length - length($longest_palindrome)));\n\
    }", "    # The longest palindromic suffix\n    my $longest_suffix = longest_palindromic_suffix($string);\n\
    \    # The length of the prefix that comes before the longest palindromic suffix.\n\
    \    my $prefix_len = length($string) - length($longest_suffix);\n    # The reverse\
    \ of the prefix\n    my $prefix_rev = reverse(substr($string, 0, $prefix_len));\n\
    \    # Return the concatenation of the prefix and the reverse of the prefix.\n\
    \    return $string . $prefix_rev;\n}", "    my($reversed) = reverse($string);\n\
    \    my($i) = index($string, $reversed);\n    if ($i >= 0) {\n        my($part)\
    \ = substr($string, 0, $i);\n        return $string . reverse($part);\n    }\n\
    \    return $string . $reversed;\n}", "    $string = reverse $string;\n    return\
    \ $string if is_palindrome($string);\n    my $palindrome_length = palindrome_length($string);\n\
    \    my $prefix = substr($string, $palindrome_length);\n    my $prefix_reversed\
    \ = reverse $prefix;\n    return $prefix_reversed . $string;\n}", "    my $result\
    \ = \"\";\n    my $length = length($string);\n    my $start = $length - 1;\n \
    \   my $end = $length - 1;\n    my $limit = 0;\n    my $center = 0;\n    my $center_length\
    \ = 0;\n    my $max_center = 0;\n    my $max_center_length = 0;\n    while ($end\
    \ > $limit) {\n        # Find a longest palindrome centered around the current\
    \ letter.\n        while ($start > $limit && substr($string, $start - 1, 1) eq\
    \ substr($string, $end, 1)) {\n            $start--;\n        }\n        # If\
    \ a palindrome centered around the current letter is longer than the longest one\
    \ found so far, save it.\n        $center_length = $end - $start + 1;\n      \
    \  if ($center_length > $max_center_length) {\n            $max_center = $start;\n\
    \            $max_center_length = $center_length;\n        }\n        # Expand\
    \ the palindrome centered around the current letter to include surrounding letters.\n\
    \        $start--;\n        $end++;\n        # If the end of the current palindrome\
    \ is out of bounds, start looking for a longest palindrome around\n        # the\
    \ next letter.\n        if ($end >= $length) {\n            $end = $start;\n \
    \           $start = $end - 1;\n            $limit++;\n        }\n    }\n    #\
    \ Add reverse of the part of the string that precedes the longest palindromic\
    \ suffix.\n    $result = substr($string, 0, $max_center) . reverse(substr($string,\
    \ 0, $max_center));\n    # Add the longest palindromic suffix.\n    $result .=\
    \ substr($string, $max_center, $max_center_length);\n    return $result;\n}",
  "    my($length) = length($string);\n    if ($length <= 1) {\n        return $string;\n\
    \    }\n    my($longest_length, $longest_offset);\n    for (my($i) = $length -\
    \ 1; $i >= 0; $i--) {\n        for (my($j) = $i; $j < $length; $j++) {\n     \
    \       if ($string =~ /^(.{$i})(.{$j})\\2\\1$/) {\n                $longest_length\
    \ = $length - $i;\n                $longest_offset = $i;\n                last;\n\
    \            }\n        }\n        last if defined $longest_length;\n    }\n \
    \   my($result) = substr($string, 0, $longest_offset) .\n            substr($string,\
    \ $longest_offset + $longest_length) .\n            reverse(substr($string, 0,\
    \ $longest_offset));\n    return $result;\n}", "    if ($string =~ /^([^ ]*?)([^\
    \ ]+?)(\\2[^ ]*)?$/) {\n        return $string . reverse($1);\n    }\n    else\
    \ {\n        return $string;\n    }\n}", "    my $postfix = largest_palindrome_postfix($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($postfix));\n  \
    \  return $string . reverse $prefix;\n}", "    my $palindrome_length = palindrome_length($string);\n\
    \    my $prefix = substr($string, 0, length($string) - $palindrome_length);\n\
    \    return $string . reverse $prefix;\n}", "    my($postfix, $reverse);\n   \
    \ if ($string =~ /^(.*)(.)\\2?\\1$/) {\n        # already a palindrome\n     \
    \   return $string;\n    }\n    if ($string =~ /^(.*)(.)\\2?$/) {\n        # short-cut\
    \ for strings ending with 2 characters;\n        $postfix = $2.$1;\n    }\n  \
    \  else {\n        # now we're looking for longest palindromic substring\n   \
    \     # of the string that is a suffix.\n        my($i, $j);\n        for ($i\
    \ = 1; $i < length($string); $i++) {\n            # try the substring at position\
    \ $i and of the length of $i\n            # to see if it is a palindrome\n   \
    \         for ($j = $i; $j <= length($string); $j++) {\n                my($s)\
    \ = substr($string, $j - $i, $i);\n                if (is_palindrome($s)) {\n\
    \                    $postfix = $s;\n                    last;\n             \
    \   }\n            }\n            if ($postfix) {\n                last;\n   \
    \         }\n        }\n    }\n    if ($postfix) {\n        # now construct the\
    \ prefix by taking its reverse\n        # (and remove the palindromic part)\n\
    \        $reverse = reverse(substr($string, 0, length($string) - length($postfix)));\n\
    \        return $string.$reverse;\n    }\n    # this should not happen because\
    \ the empty string is a palindrome\n    die \"Could not make a palindrome of:\
    \ $string\";\n}", "    my $len = length($string);\n    my $start = 0;\n    my\
    \ $end = $len - 1;\n    my $max_postfix_len = 0;\n    my $postfix_idx = 0;\n \
    \   my $postfix_len = 0;\n    my $prefix_idx = 0;\n    my $prefix_len = 0;\n \
    \   my $prefix = '';\n    my $postfix = '';\n    my $suffix = '';\n    while ($start\
    \ < $end) {\n        $postfix_len = 0;\n        if (substr($string, $start, 1)\
    \ eq substr($string, $end, 1)) {\n            $postfix_len++;\n            $postfix_idx\
    \ = $start;\n            while ($start < $end) {\n                $start++;\n\
    \                $end--;\n                if (substr($string, $start, 1) eq substr($string,\
    \ $end, 1)) {\n                    $postfix_len++;\n                } else {\n\
    \                    last;\n                }\n            }\n        }\n    \
    \    if ($postfix_len > $max_postfix_len) {\n            $max_postfix_len = $postfix_len;\n\
    \            $prefix_idx = $postfix_idx;\n            $prefix_len = $postfix_len;\n\
    \        }\n        $start = $postfix_idx;\n        $end = $len - 1;\n    }\n\
    \    $prefix = substr($string, 0, $prefix_len);\n    $postfix = substr($string,\
    \ $prefix_len);\n    $suffix = reverse($prefix);\n    return $postfix . $suffix;\n\
    }", "    my $max_palindrome_len = 1;\n    my $max_palindrome_pos = 0;\n    for\
    \ (my $i = 0; $i < length($string); $i++) {\n        my $j = 1;\n        while\
    \ (($i - $j) >= 0 and substr($string, $i - $j, 1) eq substr($string, $i + $j,\
    \ 1)) {\n            $j++;\n        }\n        $j--;\n        if ($j * 2 + 1 >\
    \ $max_palindrome_len) {\n            $max_palindrome_len = $j * 2 + 1;\n    \
    \        $max_palindrome_pos = $i - $j;\n        }\n    }\n    my $reverse_prefix\
    \ = reverse(substr($string, 0, $max_palindrome_pos));\n    return $string . $reverse_prefix;\n\
    }", "    return $string if $string eq \"\";\n    return $string . reverse $string\
    \ if length $string == 1;\n    my $maxlen = palindrome_length($string);\n    return\
    \ $string . substr(reverse $string, 0, length($string) - $maxlen);\n}", "    my\
    \ $rev_string = reverse($string);\n    my $longest_common_suffix = lcs($string,\
    \ $rev_string);\n    return $string . reverse(substr($string, 0, length($string)\
    \ - length($longest_common_suffix)));\n}", "    my($prefix) = longest_palindrome_substring($string);\n\
    \    return $string.$prefix;\n}", "    my $s = _longest_palindrome_postfix($string);\n\
    \    return $string . reverse(substr($string, 0, length($string) - length($s)));\n\
    }", "    my $longest_palindrome = find_longest_palindrome($string);\n    my $prefix\
    \ = substr($string, 0, length($string) - length($longest_palindrome));\n    return\
    \ $string . reverse($prefix);\n}", "    return $string if length($string) <= 1;\n\
    \    my($prefix, $suffix) = lps($string);\n    return $string . reverse(substr($string,\
    \ 0, length($string) - length($suffix)));\n}", "    return $string if palindrome($string);\n\
    \    my $longest_palindrome = \"\";\n    for my $i (0 .. length($string) - 1)\
    \ {\n        my $substr = substr($string, $i);\n        if (palindrome($substr))\
    \ {\n            $longest_palindrome = $substr;\n            last;\n        }\n\
    \    }\n    return $string . reverse(substr($string, 0, length($string) - length($longest_palindrome)));\n\
    }", "    # Handle the case of empty string.\n    if ($string eq \"\") {\n    \
    \    return \"\";\n    }\n    # Append \"#\" to the string which is used as a\
    \ separator between original suffix and prefix.\n    my $padded_string = $string\
    \ . \"#\" . reverse($string);\n    # Find the longest postfix of padded string\
    \ that is a palindrome.\n    my $postfix_palindrome_length = find_longest_palindrome_length($padded_string);\n\
    \    # Construct the result string.\n    my $result = $string . reverse(substr($string,\
    \ 0, length($string) - $postfix_palindrome_length));\n    return $result;\n}",
  "    my $end = length($string) - 1;\n    my $palindrome_end;\n    for (0..$end)\
    \ {\n        my $begin = $end - $_;\n        $palindrome_end = $begin if substr($string,\
    \ $begin, $end - $begin + 1) eq reverse(substr($string, $begin, $end - $begin\
    \ + 1));\n    }\n    return $string . reverse(substr($string, 0, $end - $palindrome_end\
    \ + 1));\n}", "    return $string if(is_palindrome($string));\n    my $string_length\
    \ = length($string);\n    my $position = 1;\n    my $found = 0;\n    my $palindrome_postfix;\n\
    \    my $palindrome_prefix;\n    # Do multiple iterations.\n    # At each iteration,\
    \ move one character from the end of the string to the front.\n    # Stop when\
    \ a palindrome is found.\n    while($position < $string_length) {\n        my\
    \ $prefix = substr($string, 0, $position);\n        my $postfix = substr($string,\
    \ $position);\n        # Check whether the postfix is a palindrome.\n        if(is_palindrome($postfix))\
    \ {\n            $found = 1;\n            $palindrome_postfix = $postfix;\n  \
    \          $palindrome_prefix = $prefix;\n            last;\n        }\n     \
    \   $position += 1;\n    }\n    if($found) {\n        return $palindrome_prefix\
    \ . reverse($palindrome_prefix) . $palindrome_postfix;\n    }\n    return $string;\n\
    }", "    my $s = $string;\n    my $len = length($s);\n    my $max_postfix_len\
    \ = 0;\n    my $pos = $len;\n    my $c = '';\n    my $postfix = '';\n    while\
    \ ($pos > 0) {\n        $c = chop($s);\n        $pos--;\n        if ( $c eq substr($string,\
    \ $pos, 1) ) {\n            $postfix = $c . $postfix;\n            $max_postfix_len++;\n\
    \        }\n    }\n    $string .= substr(reverse($string), $max_postfix_len);\n\
    \    return $string;\n}", "    if ($string eq '') {\n        return $string;\n\
    \    }\n    my($longest_length) = 0;\n    my($longest_index) = 0;\n    for (my($i)\
    \ = 0; $i < length($string); $i++) {\n        if (is_palindrome($string, $i))\
    \ {\n            if (length($string) - $i > $longest_length) {\n             \
    \   $longest_length = length($string) - $i;\n                $longest_index =\
    \ $i;\n            }\n        }\n    }\n    return $string . reverse_substring($string,\
    \ 0, $longest_index);\n}", "    my $rev_string = reverse($string);\n    my $postfix_length\
    \ = postfix_length($string, $rev_string);\n    return $string . substr($rev_string,\
    \ $postfix_length);\n}", "    my($i, $j, $n);\n    my $len = length($string);\n\
    \    my $max_palindrome_length = 0;\n    my $max_palindrome_start = 0;\n    for\
    \ ($i = $len - 1; $i >= 0; $i--) {\n        # Find palindromes of odd length,\
    \ starting at index $i.\n        for ($j = 0; $i - $j >= 0 && $i + $j < $len &&\
    \ substr($string, $i - $j, 1) eq substr($string, $i + $j, 1); $j++) {\n      \
    \      $n = 2 * $j + 1;\n            if ($n > $max_palindrome_length) {\n    \
    \            $max_palindrome_length = $n;\n                $max_palindrome_start\
    \ = $i - $j;\n            }\n        }\n        # Find palindromes of even length,\
    \ starting at index $i.\n        for ($j = 1; $i - $j + 1 >= 0 && $i + $j < $len\
    \ && substr($string, $i - $j + 1, 1) eq substr($string, $i + $j, 1); $j++) {\n\
    \            $n = 2 * $j;\n            if ($n > $max_palindrome_length) {\n  \
    \              $max_palindrome_length = $n;\n                $max_palindrome_start\
    \ = $i - $j + 1;\n            }\n        }\n    }\n    return $string . reverse(substr($string,\
    \ 0, $max_palindrome_start));\n}", "    my @chars = split(//, $string);\n    #\
    \ reverse string.\n    @chars = reverse(@chars);\n    my $reversed_string = join('',\
    \ @chars);\n    my $shortest_length = length($string) * 2;\n    my $prefix = '';\n\
    \    my $suffix = '';\n    for (my $i = 0; $i < length($string); $i++) {\n   \
    \     my $prefix_string = substr($string, 0, $i);\n        my $postfix_string\
    \ = substr($reversed_string, 0, $i);\n        my $palindrome_string = $prefix_string\
    \ . $postfix_string;\n        if (is_palindrome($palindrome_string)) {\n     \
    \       if (length($palindrome_string) < $shortest_length) {\n               \
    \ $shortest_length = length($palindrome_string);\n                $prefix = $prefix_string;\n\
    \                $suffix = $postfix_string;\n            }\n        }\n    }\n\
    \    return $prefix . $suffix;\n}", "    # Algorithm idea:\n    # - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    # - Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    # Find the longest postfix of supplied string that is a palindrome.\n   \
    \ my $prefix = longest_palindrome_postfix($string);\n    my $postfix = substr($string,\
    \ length($string) - length($prefix));\n    # Reverse the prefix and return.\n\
    \    return $string . reverse_string($prefix);\n}", "    return \"\" if $string\
    \ eq \"\";\n    my $prefix = longest_palindrome_postfix($string);\n    return\
    \ $string . substr(reverse($string), 0, length($string) - length($prefix));\n}",
  "    my($postfix_length) = longest_palindromic_suffix_length($string);\n    my($prefix)\
    \ = substr($string, 0, length($string) - $postfix_length);\n    return $string\
    \ . reverse($prefix);\n}", "    my $longest_palindrome = longest_palindrome($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($longest_palindrome));\n\
    \    my $result = $string . reverse($prefix);\n    return $result;\n}", "    my\
    \ $reverse = reverse $string;\n    my $postfix = &longest_palindromic_suffix($string);\n\
    \    return $string . substr($reverse, 0, length($string) - length($postfix));\n\
    }", "    $string //= \"\";\n    return $string if $string eq \"\";\n    my $longest_palindrome\
    \ = get_longest_palindrome($string);\n    my $reverse_prefix = reverse substr($string,\
    \ 0, length($string) - length($longest_palindrome));\n    return $string . $reverse_prefix;\n\
    }", "    my $reverse = reverse $string;\n    my $suffix = longest_common_postfix($string,\
    \ $reverse);\n    my $prefix = substr($string, 0, length($string) - length($suffix));\n\
    \    my $palindrome = $string . reverse $prefix;\n    return $palindrome;\n}",
  '    return $string if $string eq "";', "    my $res = $string;\n    my $new_beginning\
    \ = \"\";\n    my $i = 0;\n    while ($i < length($string)) {\n        my $j =\
    \ 0;\n        while ($j < length($string)) {\n            if (substr($string,\
    \ $i, $j) eq substr($string, $i, $j)\n                && substr($string, $i, $j)\
    \ eq substr($string, $i, $j)) {\n                $new_beginning = substr($string,\
    \ 0, $i - 1);\n            }\n            $j++;\n        }\n        $i++;\n  \
    \  }\n    return $res . reverse($new_beginning);\n}", "    return $string if is_palindrome($string);\n\
    \    return make_palindrome(substr($string, 1)) . substr($string, 0, 1);\n}",
  "    my($longest_prefix) = longest_prefix_palindrome($string);\n    return $string\
    \ . reverse(substr($string, 0, length($string) - length($longest_prefix)));\n}",
  "    my $palindrome_postfix = _largest_palindrome_suffix($string);\n    my $shortest_palindrome\
    \ =\n        substr($string, 0, length($string) - length($palindrome_postfix))\
    \ . scalar reverse($palindrome_postfix);\n    return $shortest_palindrome;\n}",
  "    return $string if(length($string) <= 1);\n    my $suffix = get_longest_palindrome_postfix($string);\n\
    \    return $string . reverse(substr($string, 0, length($string) - length($suffix)));\n\
    }", '    return $string if $string eq reverse $string;', "    return $string if\
    \ (is_palindrome($string));\n    my $i = 0;\n    while ($i < length($string))\
    \ {\n        return $string . reverse(substr($string, 0, $i)) if (is_palindrome(substr($string,\
    \ $i)));\n        $i++;\n    }\n}", "    if ($string eq \"\") {\n        return\
    \ \"\";\n    }\n    # Find longest palindromic suffix.\n    my $rev_string = reverse\
    \ $string;\n    # In case the string is a palindrome.\n    my $suffix = $string;\n\
    \    while(!is_palindrome($suffix)) {\n        $suffix = substr($suffix, 1);\n\
    \    }\n    # Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n    my $prefix = substr($string, 0, length($string)\
    \ - length($suffix));\n    return $string . reverse $prefix;\n}", "    my $length\
    \ = length($string);\n    my $remainder = $length % 2;\n    my $i;\n    # Find\
    \ the longest palindromic postfix.\n    for ($i = 0; $i < $length - $remainder;\
    \ $i++) {\n        if (substr($string, $i, 1) ne substr($string, $length - $i\
    \ - 1, 1)) {\n            last;\n        }\n    }\n    if ($i == $length - $remainder)\
    \ {\n        return $string;\n    }\n    # Append a reverse of a prefix to the\
    \ palindromic postfix.\n    my $prefix = reverse(substr($string, 0, $length -\
    \ $i));\n    return $string . $prefix;\n}", "    return $string if is_palindrome($string);\n\
    \    my $index = longest_palindrome_index($string);\n    my $rev_prefix = reverse\
    \ substr($string, 0, $index);\n    return $string . $rev_prefix;\n}", "    my\
    \ $length = length($string);\n    my $index = $length - 1;\n    while ($index\
    \ > 0) {\n        if (is_palindrome($string, $index)) {\n            return $string\
    \ . substr(reverse($string), $length - $index - 1);\n        }\n        $index--;\n\
    \    }\n    return $string . reverse($string);\n}", "    return '' if $string\
    \ eq '';\n    my $rev_string = reverse $string;\n    my $longest_suffix = find_longest_palindromic_suffix($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($longest_suffix));\n\
    \    return $string . reverse $prefix;\n}", "    my $idx = suffix_palindrome_start($string);\n\
    \    return $string . substr(reverse($string), 0, -$idx);\n}", "    my $rev =\
    \ reverse($string);\n    my $longest = longest_common_substring($string, $rev);\n\
    \    my $shortest = $string . substr($rev, length($longest));\n    return $shortest;\n\
    }", '    return $string if $string eq "";', "    my $palindrome_suffix = \"\"\
    ;\n    my $palindrome_prefix = \"\";\n    if (length($string) > 0) {\n       \
    \ my $reversed_string = reverse $string;\n        my $max_length = length($string);\n\
    \        for my $palindrome_length (1 .. $max_length) {\n            my $suffix\
    \ = substr($string, -$palindrome_length);\n            my $prefix = substr($reversed_string,\
    \ 0, $palindrome_length);\n            if ($suffix eq $prefix) {\n           \
    \     $palindrome_suffix = $suffix;\n                $palindrome_prefix = $prefix;\n\
    \            }\n        }\n    }\n    return \"$string$palindrome_prefix\";\n}",
  "    my $p;\n    $p = longest_palindrome_postfix($string);\n    return ($string\
    \ . _reverse_string($string) . $p);\n}", "    my $str_length = length($string);\n\
    \    return $string if $str_length == 0;\n    # Edge case: string is already a\
    \ palindrome.\n    return $string if is_palindrome($string);\n    # Find the longest\
    \ palindromic postfix.\n    for(my $i = 1; $i < $str_length; $i++) {\n       \
    \ if(is_palindrome(substr($string, $i))) {\n            return $string . substr(reverse($string),\
    \ 0, $str_length - $i);\n        }\n    }\n    # String has a minimal length 2\
    \ or more.\n    return $string;\n}", "    my($i, $j);\n    my($len) = length($string);\n\
    \    my($kmp) = compute_kmp($string);\n    my($prefix_len) = $len - $kmp->[$len];\n\
    \    return $string . reverse(substr($string, 0, $prefix_len));\n}", "    my $substring_length\
    \ = 0;\n    my $substring = \"\";\n    my $substring_reverse = \"\";\n    my $old_substring_length\
    \ = 0;\n    if ($string eq \"\") {\n        return \"\";\n    }\n    for (my $i\
    \ = length($string) - 1; $i >= 0; $i--) {\n        my $substring = substr($string,\
    \ $i);\n        if (&is_palindrome($substring)) {\n            $substring_length\
    \ = length($substring);\n            last;\n        }\n    }\n    $substring_reverse\
    \ = substr($string, 0, $substring_length);\n    $substring_reverse = reverse($substring_reverse);\n\
    \    return $string . $substring_reverse;\n}", "    if (length($string) == 0)\
    \ {\n        return \"\";\n    }\n    my $lpp = longest_palindromic_prefix($string);\n\
    \    my $slpp = substr($string, 0, $lpp);\n    return $string . reverse_string($slpp);\n\
    }", "    my $inverse = reverse $string;\n    if ($string eq $inverse) {\n    \
    \    return $string;\n    }", "    my($max_len) = 0;\n    my($rev) = reverse($string);\n\
    \    my($i, $j);\n    for ($i = 0; $i < length($string); $i++) {\n        for\
    \ ($j = length($string) - 1; $j >= $i; $j--) {\n            if (substr($string,\
    \ $i, $j - $i + 1) eq substr($rev, length($string) - $j - 1, $j - $i + 1)) {\n\
    \                $max_len = $j - $i + 1;\n                last;\n            }\n\
    \        }\n    }\n    return $string . substr($rev, length($string) - $max_len,\
    \ $max_len);\n}", "    my $longest_postfix = longest_palindromic_postfix($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($longest_postfix));\n\
    \    my $reverse_prefix = reverse($prefix);\n    return $string . $reverse_prefix;\n\
    }", "    my($postfix) = get_longest_palindromic_suffix($string);\n    my($prefix)\
    \ = (length($string) - length($postfix)) > 0 ? substr($string, 0, length($string)\
    \ - length($postfix)) : \"\";\n    return ($string . reverse($prefix));\n}", " \
    \   # reverse the string\n    my $string_rev = reverse $string;\n    # concatenate\
    \ with the original string\n    my $string_concat = $string . \"\\0\" . $string_rev;\n\
    \    # compute the longest common prefix and suffix of the two strings\n    my\
    \ $lcs = compute_lcs($string_concat);\n    # add reverse of the string prefix\
    \ to the end of the string\n    return $string . reverse(substr($string, 0, -$lcs));\n\
    }", "    my $palindrome = $string;\n    my $reverse_string = reverse($string);\n\
    \    $palindrome .= $reverse_string;\n    return $palindrome;\n}", "    my $result\
    \ = $string;\n    my $length = length($string);\n    for ( my $i = $length; $i\
    \ >= 0; $i-- ) {\n        my $substring = substr( $string, $i );\n        if (\
    \ is_palindrome($substring) ) {\n            $result .= reverse( substr( $string,\
    \ 0, $i ) );\n            last;\n        }\n    }\n    return $result;\n}", " \
    \   return $string if $string eq \"\" || is_palindrome($string);\n    my $length\
    \ = length($string);\n    my $postfix_length = 0;\n    while ($postfix_length\
    \ < $length) {\n        my $postfix = substr($string, -$postfix_length - 1);\n\
    \        if (is_palindrome($postfix)) {\n            last;\n        }\n      \
    \  $postfix_length++;\n    }\n    my $prefix = substr($string, 0, $length - $postfix_length);\n\
    \    return $string . reverse($prefix);\n}", "    my $length = length($string);\n\
    \    my @s = split(//, $string);\n    my $i;\n    my $max_i = 0;\n    my $max_len\
    \ = 0;\n    for ($i = 1; $i < $length; $i++) {\n        my $length_left = $i;\n\
    \        my $length_right = $length - $i;\n        my $left = substr($string,\
    \ 0, $length_left);\n        my $right = substr($string, $length_right);\n   \
    \     my $right_rev = reverse($right);\n        if ($left eq $right_rev) {\n \
    \           $max_i = $i;\n            $max_len = $length_left;\n        }\n  \
    \  }\n    my $left = substr($string, 0, $max_i);\n    my $right = substr($string,\
    \ $max_i);\n    my $result = $right . reverse($left);\n    return $result;\n}",
  "    return \"\" if $string eq \"\";\n    return $string if is_palindrome($string);\n\
    \    my $prefix = substr($string, 0, -1 * longest_palindrome_suffix($string));\n\
    \    return reverse($prefix) . $string;\n}", "    # Find the longest postfix of\
    \ supplied string that is a palindrome.\n    my $original_postfix = palindrome_suffix($string);\n\
    \    my $postfix = $original_postfix;\n    my $prefix = \"\";\n    # Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n    while ($postfix) {\n        $prefix = substr($string, 0, index($string,\
    \ $postfix)) . $prefix;\n        $postfix = palindrome_suffix($prefix);\n    }\n\
    \    return $prefix . $original_postfix;\n}", "    if (length($string) == 0) {\n\
    \        return \"\";\n    }\n    my $palindrome_suffix = longest_palindrome_suffix($string);\n\
    \    my $prefix = substr($string, 0, length($string) - length($palindrome_suffix));\n\
    \    my $reverse_prefix = reverse $prefix;\n    return $string . $reverse_prefix;\n\
    }", "    my $n = length($string);\n    return $string if $n == 0;"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
