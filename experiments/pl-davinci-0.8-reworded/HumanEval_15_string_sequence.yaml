name: HumanEval_15_string_sequence
language: pl
prompt: "# Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n# >>> string_sequence(0)\n# \"0\"\n# >>> string_sequence(5)\n# \"\
  0 1 2 3 4 5\"\nsub string_sequence {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_sequence;\n\
  \        if(eq_deeply($candidate->(0),\"0\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"0 1 2 3\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\
  0 1 2 3 4 5 6 7 8 9 10\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n}\n\ntesthumaneval();"
completions: ["    my $sequence = '';\n    for (my $i = 0; $i <= $n; $i++) {\n   \
    \     $sequence .= $i;\n        $sequence .= ' ' if $i < $n;\n    }\n    return\
    \ $sequence;\n}", "    return join(' ', (0..$n));\n}", "    my $s = '';\n    foreach\
    \ my $i (0..$n) {\n        $s .= \" $i\";\n    }\n    return $s;\n}", "    return\
    \ join(\" \", 0..$n);\n}", "    return join(' ', 0..$n);\n}", "    my @result\
    \ = ();\n    for (my $i = 0; $i <= $n; $i++) {\n        push @result, $i;\n  \
    \  }\n    return join(' ', @result);\n}", "    my($string) = join(\" \", 0..$n);\n\
    \    return $string;\n}", "    return join(' ', 0..$n);\n}", "    my $str = \"\
    \";\n    for (my $i = 0; $i <= $n; $i++) {\n        $str .= $i . \" \";\n    }\n\
    \    return $str;\n}", "    return join(\" \",0..$n);\n}", "    my $result = \"\
    \";\n    for (my $i = 0; $i <= $n; $i++) {\n        $result .= \" $i\";\n    }\n\
    \    return $result;\n}", "    my $i;\n    my $ret = \"\";\n    for ($i = 0; $i\
    \ <= $n; $i++) {\n        $ret .= \"$i \";\n    }\n    return $ret;\n}", "   \
    \ my($c, $str);\n    for ($c = 0; $c <= $n; $c++) {\n        $str .= $c . \" \"\
    ;\n    }\n    $str =~ s/ $//;\n    return $str;\n}", "    return '' if $n < 0;\n\
    \    return \"0\" if $n == 0;\n    return \"0 \" . string_sequence($n - 1);\n}",
  "    return join(\" \", 0..$n);\n}", "    return join(\" \", (0..$n));\n}", "  \
    \  my @a = (0..$n);\n    return join(' ', @a);\n}", "    my @numbers = (0..$n);\n\
    \    return join(\" \", @numbers);\n}", "    return join(' ', 0..$n);\n}", " \
    \   return join(' ', 0..$n);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
