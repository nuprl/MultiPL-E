name: HumanEval_133_sum_squares
language: pl
prompt: "# You are given an array of numbers.\n# You need to return the sum of squared\
  \ numbers in the given array,\n# round each element in the array to the upper int(Ceiling)\
  \ first.\n# Examples:\n# >>> lst([1.0, 2.0, 3.0])\n# 14\n# >>> lst([1.0, 4.0, 9.0])\n\
  # 98\n# >>> lst([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst([1.4, 4.2, 0.0])\n# 29\n\
  # >>> lst([-2.4, 1.0, 1.0])\n# 6\nsub sum_squares {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0,\
  \ 3.0]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.4, 4.2,\
  \ 0.0]),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 1.0, 15.0,\
  \ 2.0]),10230)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([10000.0, 10000.0]),200000000)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4,\
  \ 4.6, 6.3]),75)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
  \ 1.0, 0.0]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += ($num\
    \ >= 0) ? ceil($num)**2 : floor($num)**2;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for my $num (@$lst) {\n        $sum += ceil($num) ** 2;\n   \
    \ }\n    return $sum;\n}", "    my $sum = 0;\n    foreach (@$lst) {\n        $sum\
    \ += int($_ + 0.5)**2;\n    }\n    return $sum;\n}", "    return sum(map {($_\
    \ ** 2)} map {ceil($_)} @$lst);\n}", "    my @lst = @$lst;\n    my $total = 0;\n\
    \    foreach (@lst) {\n        $total += ($_ ** 2);\n    }\n    return $total;\n\
    }", "    my $sum;\n    foreach my $x (@$lst) {\n        $sum += ceil($x) ** 2;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for (@$lst) {\n        $_\
    \ = int($_ + 0.5);\n        $sum += $_ ** 2;\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    foreach my $x (@$lst) {\n        my $f = floor($x);\n  \
    \      if ($x > $f) {\n            $f += 1;\n        }\n        $sum += $f*$f;\n\
    \    }\n    return $sum;\n}", "    $lst->map( sub { ceil($_) ** 2 } )->sum();\n\
    }", "    return 0 unless defined $lst;\n    my $sum = 0;\n    for my $e (@$lst)\
    \ {\n        $sum += ceil($e) ** 2;\n    }\n    return $sum;\n}", "    # TODO\
    \ write your code here\n    my $sum = 0;\n    for my $value (@$lst) {\n      \
    \  $sum += int($value) ** 2;\n    }\n    return $sum;\n}", "    return sum map(ceil($_)**2,\
    \ @$lst);\n}", "    my $sum = 0;\n    foreach my $n (@$lst) {\n        $sum +=\
    \ int($n)**2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    my $ssq = 0;\n\
    \    foreach (@$lst) {\n        $sum += int(ceil($_));\n    }\n    $ssq = $sum\
    \ ** 2;\n    return $ssq;\n}", "    my @int_list = map {int} @$lst;\n    my $sum\
    \ = 0;\n    foreach my $i (@int_list) {\n        $sum += $i ** 2;\n    }\n   \
    \ return $sum;\n}", "    my $result = 0;\n    $result += $_**2 for @$lst;\n  \
    \  return $result;\n}", "    my $sum = 0;\n    foreach (@$lst) {\n        $sum\
    \ += ceil($_) ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (@$lst)\
    \ {\n        $sum += ($_ > 0 ? int($_ + 0.5) : int($_ - 0.5)) ** 2;\n    }\n \
    \   return $sum;\n}", "    my @arr = map {ceil($_)} @$lst;\n    return sum(map\
    \ {$_ * $_} @arr);\n}", "    my $sum = 0;\n    foreach(@$lst) {\n        $sum\
    \ += ceil($_) ** 2;\n    }\n    return $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
