name: HumanEval_133_sum_squares
language: pl
prompt: "# You are given an array of numbers.\n# You need to return the sum of squared\
  \ numbers in the given array,\n# round each element in the array to the upper int(Ceiling)\
  \ first.\n# Examples:\n# >>> lst([1.0, 2.0, 3.0])\n# 14\n# >>> lst([1.0, 4.0, 9.0])\n\
  # 98\n# >>> lst([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst([1.4, 4.2, 0.0])\n# 29\n\
  # >>> lst([-2.4, 1.0, 1.0])\n# 6\nsub sum_squares {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0,\
  \ 3.0]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.4, 4.2,\
  \ 0.0]),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 1.0, 15.0,\
  \ 2.0]),10230)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([10000.0, 10000.0]),200000000)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4,\
  \ 4.6, 6.3]),75)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
  \ 1.0, 0.0]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += ($num\
    \ >= 0) ? ceil($num)**2 : floor($num)**2;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for my $num (@$lst) {\n        $sum += ceil($num) ** 2;\n   \
    \ }\n    return $sum;\n}", "    my $sum = 0;\n    foreach (@$lst) {\n        $sum\
    \ += int($_ + 0.5)**2;\n    }\n    return $sum;\n}", "    return sum(map {($_\
    \ ** 2)} map {ceil($_)} @$lst);\n}", "    my @lst = @$lst;\n    my $total = 0;\n\
    \    foreach (@lst) {\n        $total += ($_ ** 2);\n    }\n    return $total;\n\
    }", "    my $sum;\n    foreach my $x (@$lst) {\n        $sum += ceil($x) ** 2;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for (@$lst) {\n        $_\
    \ = int($_ + 0.5);\n        $sum += $_ ** 2;\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    foreach my $x (@$lst) {\n        my $f = floor($x);\n  \
    \      if ($x > $f) {\n            $f += 1;\n        }\n        $sum += $f*$f;\n\
    \    }\n    return $sum;\n}", "    $lst->map( sub { ceil($_) ** 2 } )->sum();\n\
    }", "    return 0 unless defined $lst;\n    my $sum = 0;\n    for my $e (@$lst)\
    \ {\n        $sum += ceil($e) ** 2;\n    }\n    return $sum;\n}", "    # TODO\
    \ write your code here\n    my $sum = 0;\n    for my $value (@$lst) {\n      \
    \  $sum += int($value) ** 2;\n    }\n    return $sum;\n}", "    return sum map(ceil($_)**2,\
    \ @$lst);\n}", "    my $sum = 0;\n    foreach my $n (@$lst) {\n        $sum +=\
    \ int($n)**2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    my $ssq = 0;\n\
    \    foreach (@$lst) {\n        $sum += int(ceil($_));\n    }\n    $ssq = $sum\
    \ ** 2;\n    return $ssq;\n}", "    my @int_list = map {int} @$lst;\n    my $sum\
    \ = 0;\n    foreach my $i (@int_list) {\n        $sum += $i ** 2;\n    }\n   \
    \ return $sum;\n}", "    my $result = 0;\n    $result += $_**2 for @$lst;\n  \
    \  return $result;\n}", "    my $sum = 0;\n    foreach (@$lst) {\n        $sum\
    \ += ceil($_) ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (@$lst)\
    \ {\n        $sum += ($_ > 0 ? int($_ + 0.5) : int($_ - 0.5)) ** 2;\n    }\n \
    \   return $sum;\n}", "    my @arr = map {ceil($_)} @$lst;\n    return sum(map\
    \ {$_ * $_} @arr);\n}", "    my $sum = 0;\n    foreach(@$lst) {\n        $sum\
    \ += ceil($_) ** 2;\n    }\n    return $sum;\n}", "    return sum(map { ceil($_)**2\
    \ } @$lst);\n}", "    my $sum = 0;\n    foreach my $item (@$lst) {\n        $sum\
    \ += int($item ** 2);\n    }\n    return $sum;\n}", "    my @arr = map { ceil($_)\
    \ } @$lst;\n    return sum(map { $_ ** 2 } @arr);\n}", "    my $total = 0;\n \
    \   foreach my $elem (@$lst) {\n        $total += int($elem + 0.5)**2;\n    }\n\
    \    return $total;\n}", "    # your code here\n}", "    my @a = map(int($_ +\
    \ 0.5), @$lst);\n    my $result = 0;\n    $result += $_ * $_ for @a;\n    return\
    \ $result;\n}", "    my $sum = 0;\n    foreach my $e (@$lst) {\n        $sum +=\
    \ int($e+0.5) ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my\
    \ $num (@$lst) {\n        $sum += ceil($num) ** 2;\n    }\n    return $sum;\n}",
  "    my $sum = 0;\n    for my $x (@$lst) {\n        my $upper = int(ceil($x));\n\
    \        $sum += $upper * $upper;\n    }\n    return $sum;\n}", "    my $sum =\
    \ 0;\n    foreach my $e (@$lst) {\n        my $ceil = ceil($e);\n        $sum\
    \ += $ceil * $ceil;\n    }\n    return $sum;\n}", "    ...\n}", "    my $sum =\
    \ 0;\n    foreach my $n ( @$lst ) {\n        $sum += int(ceil($n)) ** 2;\n   \
    \ }\n    return $sum;\n}", "    my $sum = 0;\n    for my $x (@$lst) {\n      \
    \  $sum += ceil($x) ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n  \
    \  foreach my $elm(@$lst) {\n        $sum += int($elm+0.5)**2;\n    }\n    return\
    \ $sum;\n}", "    # Your code goes here.\n}", "    return 0 if $lst eq undef;\n\
    \    return 0 if $lst eq [];\n    my $result = 0;\n    for my $val (@$lst) {\n\
    \        $result += int($val) ** 2;\n    }\n    return $result;\n}", "    my $sum\
    \ = 0;\n    for my $x (@$lst) {\n        $sum += ($x + .5) ** 2;\n    }\n    return\
    \ $sum;\n}", "    return 0 unless defined $lst;\n    my $l = $lst;\n    my $s\
    \ = 0;\n    while($l) {\n        my $v = $l->[0];\n        $s += ($v > 0 ? $v\
    \ + 0.999999 : $v - 0.999999) ** 2;\n        $l = $l->[1];\n    }\n    return\
    \ $s;\n}", "    return sum_squares_v1($lst);\n}", "    my @lst = @$lst;\n    my\
    \ $sum = 0;\n    my $num = 0;\n    my $i = 0;\n    my $len = @lst;\n    for ($i=0;\
    \ $i<$len; $i++) {\n        $num = ceil($lst[$i]);\n        $sum += $num*$num;\n\
    \    }\n    return $sum;\n}", "    my $res = 0;\n    for my $i (@$lst) {\n   \
    \     $res += int(($i+0.5) ** 2);\n    }\n    return $res;\n}", "    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    foreach my $x (@lst) {\n        my $y = int(ceil($x));\n\
    \        $sum += $y * $y;\n    }\n    return $sum;\n}", "    my $square_sum =\
    \ 0;\n    for my $x (@$lst) {\n        $square_sum += ceil($x)**2;\n    }\n  \
    \  return $square_sum;\n}", "    my @lst = map { int($_ + 0.5) } @$lst;\n    my\
    \ $res = 0;\n    for my $e (@lst) {\n        $res += $e * $e;\n    }\n    return\
    \ $res;\n}", "    my $res = 0;\n    foreach my $i (@$lst) {\n        $res += int($i+1)\
    \ ** 2;\n    }\n    return $res;\n}", "    my @lst = @$lst;\n    my $sum = 0;\n\
    \    for my $i (@lst) {\n        $sum += ($i**2);\n    }\n    return $sum;\n}",
  "    my $sum = 0;\n    for my $i (@$lst) {\n        $sum += ceil($i) ** 2;\n   \
    \ }\n    return $sum;\n}", "    my $sum = 0;\n    for my $x (@$lst) {\n      \
    \  $sum += (int($x+0.5))**2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach (@$lst) {\n        my $v = int($_ + 0.5);\n        $sum += $v * $v;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $i (@$lst) {\n   \
    \     $sum += ceil($i)**2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n \
    \   foreach my $num (@$lst) {\n        $sum += ceil($num)**2;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    for (@$lst) {\n        $sum += int($_ + 0.5)\
    \ ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $i (@$lst)\
    \ {\n        $sum += ceil($i) ** 2;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    foreach my $i (@$lst) {\n        $sum += ceil($i) ** 2;\n    }\n \
    \   return $sum;\n}", "    return 0 if not @$lst;\n    my @lst = map { ceil($_)\
    \ } @$lst;\n    my $sum = 0;\n    $sum += $_ * $_ for @lst;\n    return $sum;\n\
    }", "    my $sum = 0;\n    for my $elem (@$lst) {\n        my $elem_ceil = ceil($elem);\n\
    \        $sum += $elem_ceil * $elem_ceil;\n    }\n    return $sum;\n}", "    my\
    \ $s = 0;\n    foreach my $i (@$lst) {\n        $s += ceil($i) ** 2;\n    }\n\
    \    return $s;\n}", "    my $result = 0;\n    $result += ceil($_) ** 2 for @$lst;\n\
    \    return $result;\n}", "    my $r = 0;\n    foreach my $x (@$lst) {\n     \
    \   $r += int($x + 0.5) ** 2;\n    }\n    return $r;\n}", "    my $result = 0;\n\
    \    for my $item(@$lst) {\n        $result += ceil($item) ** 2;\n    }\n    return\
    \ $result;\n}", "    my $res;\n    $res += $_ ** 2 for(@$lst);\n    return $res;\n\
    }", "    my $sum = 0;\n    for my $i (@$lst) {\n        $sum += $i ** 2;\n   \
    \ }\n    return $sum;\n}", "    return undef unless $lst && ref($lst) eq 'ARRAY';\n\
    \    my $sum = 0;\n    map { $sum += $_ * $_; } map { int($_+0.5) } @$lst;\n \
    \   return $sum;\n}", "    return sum(map { _ceil($_) ** 2 } @$lst);\n}", "  \
    \  my $sum = 0;\n    foreach my $val (@$lst) {\n        $sum += ceil($val) **\
    \ 2;\n    }\n    return $sum;\n}", "    my $total = 0;\n    for my $i (@$lst)\
    \ {\n        $total += ceil($i) ** 2;\n    }\n    return $total;\n}", "    my\
    \ @array = @$lst;\n    my $s = 0;\n    foreach my $x (@array) {\n        $s +=\
    \ ceil($x)**2;\n    }\n    return $s;\n}", "    my $sum = 0;\n    for my $element\
    \ (@$lst) {\n        $sum += int(ceil($element)**2);\n    }\n    return $sum;\n\
    }", "    my $s = 0;\n    for my $e (@$lst) {\n        $s += int($e + 0.5) ** 2;\n\
    \    }\n    return $s;\n}", "    return undef unless @$lst;\n    return 0 unless\
    \ @$lst;\n    return @$lst if @$lst == 1;\n    return $lst->[0]**2 + $lst->[1]**2\
    \ if @$lst == 2;\n    return $lst->[0]**2 + $lst->[1]**2 + $lst->[2]**2 if @$lst\
    \ == 3;\n    return $lst->[0]**2 + $lst->[1]**2 + $lst->[2]**2 + $lst->[3]**2\
    \ if @$lst == 4;\n    return $lst->[0]**2 + $lst->[1]**2 + $lst->[2]**2 + $lst->[3]**2\
    \ + $lst->[4]**2 if @$lst == 5;\n    return $lst->[0]**2 + $lst->[1]**2 + $lst->[2]**2\
    \ + $lst->[3]**2 + $lst->[4]**2 + $lst->[5]**2 if @$lst == 6;\n    return $lst->[0]**2\
    \ + $lst->[1]**2 + $lst->[2]**2 + $lst->[3]**2 + $lst->[4]**2 + $lst->[5]**2 +\
    \ $lst->[6]**2 if @$lst == 7;\n    return $lst->[0]**2 + $lst->[1]**2 + $lst->[2]**2\
    \ + $lst->[3]**2 + $lst->[4]**2 + $lst->[5]**2 + $lst->[6]**2 + $lst->[7]**2 if\
    \ @$lst == 8;\n    return $lst->[0]**2 + $lst->[1]**2 + $lst->[2]**2 + $lst->[3]**2\
    \ + $lst->[4]**2 + $lst", "    return sum(map { ceiling($_) ** 2 } @$lst);\n}",
  "    my $sum = 0;\n    for my $num (@$lst) {\n        $sum += ceil($num)**2;\n \
    \   }\n    return $sum;\n}", "    my $result = 0;\n    my $count = 0;\n    foreach\
    \ my $number (@$lst) {\n        $result += ($number < 0) ? (ceil($number)) **\
    \ 2 : (floor($number)) ** 2;\n        $count++;\n    }\n    return $result;\n}",
  "    return ( sum map {ceil($_)**2} @$lst );\n}", "    my $sum = 0;\n    foreach\
    \ (@$lst) {\n        $sum += ceil($_) ** 2;\n    }\n    return $sum;\n}", "  \
    \  return undef unless defined $lst;\n    my $res = 0;\n    foreach my $num (@$lst)\
    \ {\n        my $ceil = ceil($num);\n        $res += $ceil**2;\n    }\n    return\
    \ $res;\n}", "    $lst = [ map { ceil($_) } @$lst ];\n    # return sum\n    my\
    \ $sum = 0;\n    for my $n (@$lst) {\n        $sum += $n ** 2;\n    }\n    return\
    \ $sum;\n}", "    my $sum;\n    for my $el (@$lst) {\n        $sum += int(ceil($el))\
    \ ** 2;\n    }\n    return $sum;\n}", '    my @lst = map int($_), @$lst;', " \
    \   my @items = map(ceil($_), @$lst);\n    return 0 + grep($_*$_, @items);\n}",
  "    my @squares = map { ceil($_) ** 2 } @$lst;\n    return sum_list(\\@squares);\n\
    }", "    return $lst->map(sub { ceil($_)**2 })->sum;\n}", "    return 0 unless\
    \ $lst && @$lst;\n    my $sum;\n    $sum += $_ ** 2 for map {ceil($_)} @$lst;\n\
    \    return $sum;\n}", "    my $sum = 0;\n    for my $num (@$lst) {\n        $sum\
    \ += int($num) ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach\
    \ (@$lst) {\n        $sum += int(ceil($_)**2);\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    foreach my $elem (@$lst) {\n        $sum += ceil($elem)**2;\n\
    \    }\n    return $sum;\n}\nsay sum_squares([1.0, 2.0, 3.0]);\nsay sum_squares([1.0,\
    \ 4.0, 9.0]);\nsay sum_squares([1.0, 3.0, 5.0, 7.0]);\nsay sum_squares([1.4, 4.2,\
    \ 0.0]);\nsay sum_squares([-2.4, 1.0, 1.0]);", "    my $sum = 0;\n    for my $x\
    \ (@$lst) {\n        $sum += ceil($x) ** 2;\n    }\n    return $sum;\n}", "  \
    \  # ...\n}", "    my $sum = 0;\n    for my $v (@$lst) {\n        my $u = int($v);\n\
    \        $sum += $u ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n  \
    \  my $i;\n    for($i = 0; $i < scalar(@$lst); $i++) {\n        $sum += ceil($lst->[$i])\
    \ ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $x (@$lst)\
    \ {\n        $sum += int($x + 0.5) ** 2;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += int($num + 0.5) **\
    \ 2;\n    }\n    return $sum;\n}", "    my @lst = @$lst;\n    # we want to do\
    \ an efficient sum over the squares,\n    # so we need to convert the list to\
    \ ints first\n    my @ints = map { int($_ + 0.5) } @lst;\n    # and then convert\
    \ the ints to a sum of squares\n    # (avoiding overflow by using the same range)\n\
    \    my $sqsum = 0;\n    foreach my $int (@ints) {\n        $sqsum += $int*$int;\n\
    \    }\n    return $sqsum;\n}", "    my $sum = 0;\n    foreach my $item (@$lst)\
    \ {\n        $sum += ($item < 0 ? 0 : ceil($item)) ** 2;\n    }\n    return $sum;\n\
    }", "    return 0 if(scalar(@$lst) == 0);\n    my $result = 0;\n    foreach my\
    \ $num (@$lst) {\n        my $rounded = int($num + 0.5);\n        $result += $rounded\
    \ * $rounded;\n    }\n    return $result;\n}", "    my $sum = 0;\n    foreach\
    \ my $x (@$lst) {\n        $sum += int($x + 0.5) ** 2;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += int($num)\
    \ ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $num (@$lst)\
    \ {\n        $sum += int($num + 0.99999) ** 2;\n    }\n    return $sum;\n}", " \
    \   return sum(map {$_**2} (@$lst));\n}", "    my $sum = 0;\n    for my $v (@$lst)\
    \ {\n        $sum += ceil($v)**2;\n    }\n    return $sum;\n}", "    my $sum =\
    \ 0;\n    for my $e (@$lst) {\n        my $f = ceil($e);\n        $sum += $f *\
    \ $f;\n    }\n    return $sum;\n}", "    # your code here\n    # my @array = map\
    \ { ceil($_) } @{$lst};\n    # reduce { $a + $b ** 2 } @array;\n    return reduce\
    \ { $a + $b ** 2 } map { ceil($_) } @{$lst};\n}", "    my $total = 0;\n    foreach\
    \ my $element (@$lst) {\n        $total += ceil($element)*ceil($element);\n  \
    \  }\n    return $total;\n}", "    my @arr = @$lst;\n    my $sum = 0;\n    foreach\
    \ (@arr) {\n        my $ceil = ceil($_);\n        $sum += $ceil ** 2;\n    }\n\
    \    return $sum;\n}", "    return sum(map { ceil($_)**2 } @$lst);\n}", "    my\
    \ @lst = @$lst;\n    my $sum = 0;\n    for my $item (@lst) {\n        $sum +=\
    \ $item**2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $x (@$lst)\
    \ {\n        $sum += ceil($x) ** 2;\n    }\n    return $sum;\n}\n1;", "    $lst\
    \ = [ map { int( ceil($_) ) } @$lst ];\n    my $sum = 0;\n    map { $sum += $_\
    \ * $_ } @$lst;\n    return $sum;\n}", "    my $sum = 0;\n    $sum += int($_ **\
    \ 2) for @$lst;\n    return $sum;\n}", "    my $sum = 0;\n    $sum += ($_*$_)\
    \ for @$lst;\n    return $sum;\n}", "    my $total = 0;\n    foreach my $i (@$lst)\
    \ {\n        $total += ceil($i)**2;\n    }\n    return $total;\n}", "    $lst\
    \ = [map int(ceil($_)), @$lst];\n    return sum(map {$_ * $_} @$lst);\n}", " \
    \   # TODO: Implement the function here\n    my $sum=0;\n    foreach my $num (@$lst){\n\
    \        $sum += ceil($num)**2;\n    }\n    return $sum;\n}", "    my $ret = 0;\n\
    \    foreach my $l (@$lst) {\n        $ret += ($l >= 0 ? ceil($l) : floor($l))\
    \ ** 2;\n    }\n    return $ret;\n}", "    my $sum = 0;\n    for my $x (@$lst)\
    \ {\n        $sum += ceil($x) ** 2;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    for (@$lst) {\n        my $ceil = int($_ + 1);\n        $sum += $ceil\
    \ * $ceil;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $num (@$lst)\
    \ {\n        $sum += ceil($num) ** 2;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    my $i;\n    for ($i = 0; $i < length($lst); $i = $i + 1) {\n     \
    \   $sum = $sum + floor(substr($lst, $i, 1))**2;\n    }\n    return $sum;\n}",
  "    my @lst = @$lst;\n    my $sum = 0;\n    foreach my $v (@lst) {\n        $sum\
    \ += $v**2;\n    }\n    return $sum;\n}", "    # Your code here\n    return sum(map\
    \ {$_ * $_} map {ceil($_)} @$lst);\n}", "    $lst = [map { ceil($_) } @$lst];\n\
    \    return sum(map { $_ ** 2 } @$lst);\n}", "    my $total = 0;\n    foreach\
    \ my $value (@$lst) {\n        $total += $value**2;\n    }\n    return $total;\n\
    }\nprint sum_squares([1.0, 2.0, 3.0]) . \"\\n\";\nprint sum_squares([1.0, 4.0,\
    \ 9.0]) . \"\\n\";\nprint sum_squares([1.0, 3.0, 5.0, 7.0]) . \"\\n\";\nprint\
    \ sum_squares([1.4, 4.2, 0.0]) . \"\\n\";\nprint sum_squares([-2.4, 1.0, 1.0])\
    \ . \"\\n\";", "    my $sum = 0;\n    foreach my $item (@$lst) {\n        my $rounded\
    \ = int($item + 0.5);\n        $sum += $rounded ** 2;\n    }\n    return $sum;\n\
    }", "    return 0 if $lst->is_empty();\n    $lst->car() ** 2 + sum_squares($lst->cdr());\n\
    }", "    my $sum = 0;\n    foreach my $i (@$lst) {\n        $sum += ($i > 0) ?\
    \ int($i + 1) : int($i);\n    }\n    return $sum ** 2;\n}", "    my $sum = 0;\n\
    \    for my $i (@$lst) {\n        my $x = ceil($i);\n        $sum += $x * $x;\n\
    \    }\n    return $sum;\n}", "    return sum(map {ceil($_)**2} @$lst);\n}", " \
    \   my @lst = map {ceil($_)} @$lst;\n    my $sum = 0;\n    $sum += $_**2 for @lst;\n\
    \    return $sum;\n}", "    #your code here\n    # input: array of numbers\n \
    \   # output: sum of squares after converting input to int and\n    #        \
    \ applying it to the power of 2 (sum(int(i)**2) for i in input)\n    my $s;\n\
    \    foreach my $i (@$lst) {\n        my $f = int($i);\n        $s += $f**2;\n\
    \    }\n    return $s;\n}", "    my $result = 0;\n    foreach my $item (@$lst)\
    \ {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n}", " \
    \   my $result = 0;\n    for my $item (@$lst) {\n        $result += int($item\
    \ + 0.5) ** 2;\n    }\n    return $result;\n}", "    return sum(map { $_ * $_\
    \ } map { int($_ + 0.5) } @$lst);\n}", "    my $res = 0;\n    for my $n (@$lst)\
    \ {\n        my $ceil = ceil($n);\n        $res += $ceil * $ceil;\n    }\n   \
    \ return $res;\n}", "    my $sum = 0;\n    for my $i (@$lst) {\n        $sum +=\
    \ ($i**2);\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $i (@$lst)\
    \ {\n        $sum += ceil($i) ** 2;\n    }\n    return $sum;\n}", "    return\
    \ reduce { $a + $b } 0,\n        map { $_ ** 2 }\n        map { int($_ + 0.5)\
    \ }\n        @$lst;\n}", "    my $sum;\n    $sum += $_ ** 2 for map { ceil($_)\
    \ } @$lst;\n    return $sum;\n}", "    my $x = 0;\n    foreach my $i (@$lst) {\n\
    \        $x += ceil($i) ** 2;\n    }\n    return $x;\n}", "    if ($lst eq '')\
    \ { return 0 }\n    my($el, $sum);\n    ($el, $lst) = split /,/, $lst, 2;\n  \
    \  $sum = sum_squares($lst);\n    return $sum + ($el > 0 ? int($el+1) : int($el-1))\
    \ ** 2;\n}", "    my $sum = 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++){\n\
    \        $sum += ceil($lst->[$i])**2;\n    }\n    return $sum;\n}", "    my @lst\
    \ = @$lst;\n    my $total = 0;\n    foreach my $num (@lst) {\n        my $upper\
    \ = ceil($num);\n        $total += $upper * $upper;\n    }\n    return $total;\n\
    }\nsay sum_squares([1.0, 2.0, 3.0]);\nsay sum_squares([1.0, 4.0, 9.0]);\nsay sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]);\nsay sum_squares([1.4, 4.2, 0.0]);\nsay sum_squares([-2.4,\
    \ 1.0, 1.0]);", "    my $sum = 0;\n    foreach my $elem (@$lst) {\n        $sum\
    \ += ceil($elem) ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for\
    \ my $num (@$lst) {\n        $sum += int($num + 0.5) ** 2;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    foreach (@$lst) {\n        $sum += ceil($_)\
    \ ** 2;\n    }\n    return $sum;\n}", "    # your code here\n    my $sum = 0;\n\
    \    for my $elm (@$lst) {\n        $sum += int($elm + 1)**2;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    for my $i (@$lst) {\n        $sum += ceil($i)\
    \ ** 2;\n    }\n    return $sum;\n}", "    return sum(map { ceil($_) ** 2 } @$lst);\n\
    }", "    my $sum_squares = 0;\n    for ( my $i = 0; $i < @$lst; $i++ ) {\n   \
    \     $sum_squares += ceil($lst->[$i]) ** 2;\n    }\n    return $sum_squares;\n\
    }", "    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += ceil($num)\
    \ ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $v (@$lst)\
    \ {\n        $sum += ceil($v) ** 2;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    foreach my $elem (@$lst) {\n        $sum += int($elem) ** 2;\n   \
    \ }\n    return $sum;\n}", "    die \"not a list\" unless ref($lst) eq 'ARRAY';\n\
    \    my $result = 0;\n    # Add your code here\n    foreach my $n (@$lst) {\n\
    \        $result += ceil($n) ** 2;\n    }\n    return $result;\n}", "    my $sum\
    \ = 0;\n    $sum += int($_**2) for @$lst;\n    return $sum;\n}\nsay sum_squares([1.0,\
    \ 2.0, 3.0]);\nsay sum_squares([1.0, 4.0, 9.0]);\nsay sum_squares([1.0, 3.0, 5.0,\
    \ 7.0]);\nsay sum_squares([1.4, 4.2, 0.0]);\nsay sum_squares([-2.4, 1.0, 1.0]);",
  "    my $sum = 0;\n    for my $num (@$lst) {\n        my $ceil = ceil($num);\n \
    \       $sum += $ceil * $ceil;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    for(my $i = 0; $i < @$lst; $i++) {\n        $sum += int(ceil($lst->[$i]))\
    \ ** 2;\n    }\n    return $sum;\n}", "    my $result = 0;\n    for my $elem (@$lst)\
    \ {\n        $result += ($elem * $elem);\n    }\n    return $result;\n}", "  \
    \  my $sum = 0;\n    foreach my $item (@$lst) {\n        $sum += ceil($item) **\
    \ 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $elm (@$lst)\
    \ {\n        $sum += int($elm + 0.5) ** 2;\n    }\n    return $sum;\n}", "   \
    \ my $sum = 0;\n    foreach (@$lst) {\n        $sum += ceil($_) ** 2;\n    }\n\
    \    return $sum;\n}", "    return 0 + map { ceil($_) ** 2 } @$lst;\n}", "   \
    \ # Your code goes here.\n    my $sum = 0;\n    foreach my $i (@$lst) {\n    \
    \    my $int = int(ceil($i));\n        $sum += $int ** 2;\n    }\n    return $sum;\n\
    }", "    my $s = 0;\n    for my $x (@$lst) {\n        $s += ceil($x)**2;\n   \
    \ }\n    return $s;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n  \
    \      my $upper = ceil($num);\n        $sum += $upper ** 2;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    for my $e (@$lst) {\n        $sum += ceil($e)\
    \ ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach (@$lst) {\n\
    \        $sum += ceil($_) ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $n (@$lst) {\n        $sum += (ceil($n) * ceil($n));\n    }\n\
    \    return $sum;\n}", "    my $sum = 0;\n    foreach my $x (@$lst) {\n      \
    \  $sum += ($x > 0 ? ceil($x) : floor($x)) ** 2;\n    }\n    return $sum;\n}",
  "    my @new_array = map { ceil($_) } @$lst;\n    return sum(map { $_ ** 2 } @new_array);\n\
    }", "    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += ceil($num)\
    \ ** 2;\n    }\n    return $sum;\n}", "    return sum map { ceil($_) ** 2 } @$lst;\n\
    }", "    # YOUR CODE HERE\n    my $sum = 0;\n    foreach(@$lst){\n        $sum\
    \ = $sum + ceil($_)**2;\n    }\n    return $sum;\n}", "    return undef unless\
    \ defined $lst;\n    return 0 unless @$lst;\n    my $sum = 0;\n    map { $sum\
    \ += ceil($_)**2 } @$lst;\n    return $sum;\n}", "    my $sum = 0;\n    foreach\
    \ (@$lst) {\n        $sum += ceil($_)**2;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    foreach my $item (@$lst) {\n        $sum += int($item + 1) **\
    \ 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $n (@$lst)\
    \ {\n        $sum += ceil($n) ** 2;\n    }\n    return $sum;\n}", "    return\
    \ 0 if not defined $lst;\n    return 0 if $lst eq '';\n    my @lst = ref $lst\
    \ eq 'ARRAY' ? @$lst : split '', $lst;\n    return 0 if !@lst;\n    my $sum =\
    \ 0;\n    for my $n (@lst) {\n        $sum += int( ($n * 10) + 0.5 ) / 10;\n \
    \   }\n    return $sum ** 2;\n}", "    return undef unless defined $lst;\n   \
    \ return 0 unless scalar @$lst;\n    my $sum = 0;\n    for (@$lst) {\n       \
    \ my $value = ceil($_);\n        $sum += $value * $value;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    $sum += ceil($_)**2 for @$lst;\n    return $sum;\n}",
  "    my $sum = 0;\n    my $n = 0;\n    for $n (@$lst) {\n\t$sum += ceil($n) ** 2;\n\
    \    }\n    return $sum;\n}\n1;", "    my $total = 0;\n    foreach my $num (@$lst)\
    \ {\n        $total += ceil($num) ** 2;\n    }\n    return $total;\n}", "    my\
    \ $ans = 0;\n    foreach my $i (@$lst) {\n        $ans += ceil($i) ** 2;\n   \
    \ }\n    return $ans;\n}", "    my $sum = 0;\n    for my $x (@$lst) {\n      \
    \  $sum += ceil($x) ** 2;\n    }\n    return $sum;\n}", "    return sum map {int($_+0.5)\
    \ ** 2} @$lst;\n}", "    die \"You need to define sum_squares()\"\n}", "    my\
    \ $sum = 0;\n    foreach my $x (@$lst) {\n        $sum += ceil($x)**2;\n    }\n\
    \    return $sum;\n}", "    $lst =~ s/([\\[\\]])//g;\n    my @array = split(',',\
    \ $lst);\n    my $sum = 0;\n    foreach(@array) {\n        $sum += int($_) **\
    \ 2;\n    }\n    return $sum;\n}", "    my $sum;\n    foreach(@$lst) {\n     \
    \   $sum += ceil($_)**2;\n    }\n    return $sum;\n}", "    # my @r = @$lst;\n\
    \    # print @r;\n    # foreach (@r) {\n    #     print $_;\n    # }\n    my $sum\
    \ = 0;\n    for (@$lst) {\n        $sum += int($_ * $_);\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    foreach (@$lst) {\n        $_ = int(ceil($_));\n  \
    \      $sum += $_ ** 2;\n    }\n    return $sum;\n}", "    return sum map { $_\
    \ * $_ } @$lst;\n}", "    return 0 unless(@$lst);\n    my $sum = 0;\n    for(@$lst)\
    \ {\n        $sum += ceil($_) ** 2;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    foreach my $num (@$lst) {\n        my $ceil = ceil($num);\n      \
    \  $sum += $ceil ** 2;\n    }\n    return $sum;\n}", "    return reduce { $a +\
    \ $b * $b } 0, map { ceil($_) } @$lst;\n}", "    $ret = 0;\n    foreach (@$lst)\
    \ {\n        $ret += ceil($_)**2;\n    }\n    return $ret;\n}", "    return 0\
    \ unless ref $lst eq 'ARRAY';\n    return sum(map { ceil($_)**2 } @$lst);\n}",
  "    my $sum = 0;\n    for my $i (@$lst) {\n        $sum += int($i+1)**2;\n    }\n\
    \    return $sum;\n}", "    return 0 if not $lst;\n    my $x = $lst->[0];\n  \
    \  return sum_squares($lst->[1]) + ($x > 0 ? int($x + 1) : int($x - 1)) ** 2;\n\
    }", "    $lst = [map {\n        my $tmp = ceil($_);\n        $tmp * $tmp;\n  \
    \  } @$lst];\n    return reduce {$a + $b} @$lst;\n}", "    my $total = 0;\n  \
    \  foreach my $i (@$lst) {\n        $total += int($i) ** 2;\n    }\n    return\
    \ $total;\n}", "    return sum( map { ($_ ** 2) } map { ceil($_) } @$lst );\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
