name: HumanEval_101_words_string
language: pl
prompt: "# You will be given a string of words separated by commas or spaces. Your\
  \ task is\n# to split the string into words and return an array of the words.\n\
  # For example:\n# >>> words_string(\"Hi, my name is John\")\n# [\"Hi\", \"my\",\
  \ \"name\", \"is\", \"John\"]\n# >>> words_string(\"One, two, three, four, five,\
  \ six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nsub words_string\
  \ {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_string;\n\
  \        if(eq_deeply($candidate->(\"Hi, my name is John\"),[\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->(\"One, two, three, four, five, six\"\
  ),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Hi, my name\"),[\"Hi\", \"my\", \"name\"])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"One,, two, three,\
  \ four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
  ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ahmed     , gamal\"),[\"ahmed\", \"gamal\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return split(/[\\s,]+/, $s);\n}", "    my @words = split(/\\s|,/,\
    \ $s);\n    return @words;\n}", "    my @result = split(/[, ]+/, $s);\n    return\
    \ @result;\n}", "    my(@result);\n    my(@words) = split(/[\\s,]+/, $s);\n  \
    \  foreach my $word (@words) {\n\tpush(@result, $word);\n    }\n    return @result;\n\
    }", "    return split(/[, ]+/, $s);\n}", "    my @words = split /[\\s,]+/, $s;\n\
    \    return @words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return @words;\n\
    }", "    my @words = split(/\\s|,/, $s);\n    return @words;\n}", "    return\
    \ split(/\\s*[\\s,]\\s*/, $s);\n}", "    my(@a);\n    return \\@a if !$s;\n  \
    \  @a = split(/[, ]+/, $s);\n    return \\@a;\n}", "    return [ split /[\\s,]+/,\
    \ $s ];\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", " \
    \   my @words = split /[, ]+/, $s;\n    return @words;\n}", "    my @r = split(/,|\
    \ /, $s);\n    return \\@r;\n}", "    my(@a);\n    @a = split(/[, ]+/, $s);\n\
    \    return @a;\n}", "    return split(/\\s+|,\\s*/, $s);\n}", "    my @split\
    \ = split(/\\s+|,/, $s);\n    return @split;\n}", "    my @words = split(/[, ]+/,\
    \ $s);\n    return @words;\n}", "    my(@words) = split(/[\\s,]+/, $s);\n    return\
    \ @words;\n}", "    my(@w) = split(/[\\s,]+/, $s);\n    return @w;\n}", "    my\
    \ @words = split /\\s+|,\\s*/, $s;\n    return @words;\n}", "    my(@t) = split(/\\\
    s*,\\s*/, $s);\n    return @t;\n}", "    my @words = split(/[, ]+/, $s);\n   \
    \ return @words;\n}", "    return split /[\\s,]+/, $s;\n}", "    my @words = split\
    \ /[, ]+/, $s;\n    return @words;\n}", "    my @words = split /,?\\s+/, $s;\n\
    \    return @words;\n}", "    my(@a);\n    @a = split(/[,\\s]+/, $s);\n    return\
    \ @a;\n}", "    return split /,|\\s+/, $s;\n}", "    my @a = split(/[, ]+/, $s);\n\
    \    return @a;\n}", "    return split(/[\\s,]+/, $s);\n}", "    return split(/(\\\
    s+|,)/, $s);\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    my @words = split /,?\\s+/, $s;\n    return @words;\n}", "    return\
    \ split(/[\\s,]+/, $s);\n}", "    # Split on either commas or spaces\n    my @words\
    \ = split(/,| /, $s);\n    return @words;\n}", "    my @tokens = split /[, ]+/,\
    \ $s;\n    return @tokens;\n}", "    my @w = split(/[\\s,]+/, $s);\n    return\
    \ @w;\n}", "    return split /[, ]+/, $s;\n}", "    # TODO: implement me\n   \
    \ return split(/,| /, $s);\n}", "    return split(/\\s+|,\\s*/, $s);\n}", "  \
    \  my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    return split(/\\\
    s+|,\\s*/, $s);\n}", "    my @words = split('[ ,]', $s);\n    return \\@words;\n\
    }", "    my @a = split(/\\s|,/, $s);\n    return @a;\n}", "    my @a = split /[\\\
    s,]+/, $s;\n    return @a;\n}", "    my @a = split(/[\\s,]+/, $s);\n    return\
    \ \\@a;\n}", "    return split(/[\\s,]+/, $s);\n}", "    my @a = split(\" |,\"\
    , $s);\n    return @a;\n}", "    split(/\\s+|,\\s*/, $s);\n}", "    return split\
    \ /\\s+|,\\s*/, $s;\n}", "    my @res = $s =~ /\\w+/g;\n    return @res;\n}",
  "    return split(/[\\s,]+/, $s);\n}", "    #\n    # YOUR CODE HERE\n    #\n   \
    \ my @words_string;\n    @words_string = split(/[ ,]+/, $s);\n    return @words_string;\n\
    }", "    return ($s =~ /[\\s,]+/g);\n}", "    my @words = split(/[, ]+/, $s);\n\
    \    return @words;\n}", "    my @words = split /[, ]+/, $s;\n    return @words;\n\
    }", "    my @words = ();\n    @words = split(/[,\\s]/, $s);\n    return @words;\n\
    }", "    my @w = ();\n    @w = split(/[,\\s]+/, $s);\n    return @w;\n}", "  \
    \  my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @arr = split(/[,\\\
    s]+/, $s);\n    return @arr;\n}", "    return split /[\\s,]+/, $s;\n}", "    return\
    \ grep length, split /[, ]+/, $s;\n}", "    # Split the string into an array of\
    \ words.\n    my @s = split(/\\s*[,\\s]\\s*/, $s);\n    return @s;\n}", "    return\
    \ split(/[, ]+/, $s);\n}", "    my @a = split(/\\s+|,\\s*/, $s);\n    return @a;\n\
    }", "    # print \">>> words_string($s)\\n\";\n    my @words = split(/[, ]+/,\
    \ $s);\n    # print \"@words\\n\";\n    return @words;\n}", "    $s =~ s/\\s//g;\n\
    \    return split ',', $s;\n}", "    my @words = split( /[, ]+/, $s );\n    return\
    \ \\@words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    my(@a);\n    @a = split(/[\\s,]+/, $s);\n    return @a;\n}", "    return split(/,?\\\
    s+/, $s);\n}", "    my(@words);\n    @words = split(/[, ]+/, $s);\n    return\
    \ @words;\n}", "    return split(/[\\s,]+/, $s);\n}", "    my @a = split /[, ]+/,\
    \ $s;\n    return @a;\n}", "    my @a = split(/[, ]+/, $s);\n    return @a;\n}",
  "    my @words = split /,\\s|\\s/, $s;\n    return @words;\n}", "    my @out;\n\
    \    @out = split(/\\s*[,\\s]\\s*/, $s);\n    return \\@out;\n}", "    return\
    \ grep {$_ ne \"\"} split /,|\\s+/, $s;\n}", "    my @words = split(/[, ]+/, $s);\n\
    \    return @words;\n}", "    my @words = split / |,/, $s;\n    return @words;\n\
    }", "    # We use a pattern like /(...|...|...)/ to try to match as many\n   \
    \ # things as possible between the parentheses. This pattern\n    # contains a\
    \ space or a comma followed by any number of non-comma\n    # or non-space characters,\
    \ followed by a space or a comma.\n    # The parentheses say to remember the part\
    \ between them so we can\n    # return it, while the alternations specify what\
    \ we want to match.\n    return $s =~ /((\\s|,)([^, ]+)(\\s|,))*/g;\n}", "   \
    \ return split(/,\\s|\\s/, $s);\n}", "    my @words = split(/[, ]+/, $s);\n  \
    \  return @words;\n}", "    return $s =~ /\\w+/g;\n}", "    my @a = split(/[,\
    \ ]+/, $s);\n    return @a;\n}", "    my @words = split(/\\s|,/, $s);\n    return\
    \ @words;\n}", "    $s =~ s/\\s+/,/g;\n    my @words = split(/,/, $s);\n    return\
    \ @words;\n}", "    return [split(/,\\s+|\\s+/, $s)];\n}", "    return split(/[\\\
    s,]+/, $s);\n}", "    return split /\\s*[,\\s]\\s*/, $s;\n}", "    my @words =\
    \ split(/\\s+|,\\s+/, $s);\n    return @words;\n}", "    my @words = split(/\\\
    s*\\,\\s*/, $s);\n    return @words;\n}", "    my @words = split /\\s*[,\\s]\\\
    s*/, $s;\n    return @words;\n}", "    my(@list) = split(/[\\s,]+/, $s);\n   \
    \ return \\@list;\n}", "    return split(/[\\s,]+/, $s);\n}", "    my @words =\
    \ split(/[\\s,]+/, $s);\n    return @words;\n}", "    return split /(?:\\s|,)/,\
    \ $s;\n}", "    my @words = split /[\\s,]+/, $s;\n    return @words;\n}", "  \
    \  return split(/\\s*,\\s*/, $s);\n}", "    # your code here\n    $s =~ tr/A-Z/a-z/;\n\
    \    my @array = split(' ', $s);\n    return @array;\n}", "    my(@w);\n    @w\
    \ = $s =~ /([a-z]+)/gi;\n    return @w;\n}", "    return split(/\\s*[,\\s]\\s*/,\
    \ $s);\n}", "    $s =~ s/[\\s,]+/ /g;\n    my @arr = split / /, $s;\n    return\
    \ @arr;\n}", "    return split(/[\\s,]+/, $s);\n}", "    # my @return = split(',',\
    \ $s);\n    my @return = split(/\\s+/, $s);\n    return @return;\n}", "    return\
    \ [split(/[\\s,]+/, $s)];\n}", "    # TODO: implement words_string\n    return\
    \ split(/[\\s,]+/, $s);\n}", "    my(@a);\n    @a = split(/[\\s,]+/, $s);\n  \
    \  return @a;\n}", "    my @words = split(/\\s+|,\\s*/, $s);\n    return @words;\n\
    }", "    my(@a);\n    @a = split(/[\\s,]+/, $s);\n    return @a;\n}", "    my\
    \ @words = split /\\s+|,\\s*/, $s;\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split /\\s*[,\\s]\\s*/,\
    \ $s;\n    return @words;\n}", "    my @words = split(/\\s*[,\\s]\\s*/, $s);\n\
    \    return @words;\n}", "    my @words = split(/[, ]+/, $s);\n    return @words;\n\
    }", "    # your code here\n    my @splitted = split(/[\\s,]+/, $s);\n    return\
    \ @splitted;\n}", "    return split(/[, ]+/, $s);\n}", "    my @words = split\
    \ /[, ]+/, $s;\n    return @words;\n}", "    my @array = split(/,| /, $s);\n \
    \   return @array;\n}", "    my @words = split /,|\\s+/, $s;\n    return @words;\n\
    }", "    # We need to split the string into words.\n    my @words = split /[\\\
    s,]+/, $s;\n    return @words;\n}", "    my @s = split(/[,\\s]/, $s);\n    return\
    \ @s;\n}", "    my(@l);\n    foreach my $i (split(/[\\s,]+/, $s)) {\n        if\
    \ ($i ne \"\") {\n            push(@l, $i);\n        }\n    }\n    return @l;\n\
    }", "    split /\\s*,\\s*/, $s;\n}", "    split(/[\\s,]+/, $s);\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/, |\
    \ /, $s);\n    return @words;\n}", "    # ... YOUR CODE HERE ...\n}", "    $s\
    \ =~ s/[, ]+/ /g;\n    return [split(/ /, $s)];\n}", "    my @t = split(/[\\s,]+/,\
    \ $s);\n    return @t;\n}", "    return split /[\\s,]+/, $s;\n}", "    my(@a)\
    \ = split(/[\\s,]+/, $s);\n    return @a;\n}", "    #...your code here...\n}",
  "    my(@t);\n    my(@result);\n    @t = split(/[,\\s]+/, $s);\n    for (@t) {\n\
    \tif ($_ ne \"\") {\n\t    push(@result, $_);\n\t}\n    }\n    return(@result);\n\
    }", "    my @w = split(/\\s*[,\\s]\\s*/, $s);\n    return \\@w;\n}", "    my @words\
    \ = split( /[\\s,]+/, $s );\n    return @words;\n}", "    $s =~ s/\\s*,\\s*/ /g;\n\
    \    my @a = split /\\s+/, $s;\n    return \\@a;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/\\s*\\,\\s*/, $s);\n\
    \    return @words;\n}", "    return split(/\\s+|,\\s*/, $s);\n}", "    return\
    \ split(/\\s*,\\s*/, $s);\n}", "    my @result = ();\n    foreach my $word (split\
    \ /[, ]+/, $s) {\n        push @result, $word;\n    }\n    return @result;\n}",
  "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    return split\
    \ /\\s*(?:,| )\\s*/, $s;\n}", "    my @w = split(/[, ]+/, $s);\n    return @w;\n\
    }", "    my @a = split(/[\\s,]+/, $s);\n    return \\@a;\n}", "    my(@out) =\
    \ split(/[\\s,]+/, $s);\n    return @out;\n}", "    # $s is a single string\n\
    \    return split(/[, ]+/, $s);\n}", "    my @str = split(/[,\\s]+/, $s);\n  \
    \  return @str;\n}", "    my @a = split(/\\s*[\\s,]\\s*/, $s);\n    return @a;\n\
    }", "    return ($s =~ /[a-zA-Z]+/g);\n}", "    return split(/[\\s,]+/, $s);\n\
    }", "    my @s = split(/\\s*(?:,|\\s)\\s*/, $s);\n    return \\@s;\n}", "    my\
    \ @words = split(/[, ]+/, $s);\n    return @words;\n}", "    my @l = split(/[,\
    \ ]+/, $s);\n    return \\@l;\n}", "    my @words = split(/[\\s,]+/, $s);\n  \
    \  return @words;\n}", "    my @words = split /[, ]+/, $s;\n    return @words;\n\
    }", "    my @a = split /\\s*,\\s*/, $s;\n    return @a;\n}", "    my @s = split(/[,\
    \ ]+/, $s);\n    return @s;\n}", "    my @w = split /[, ]+/, $s;\n    return \\\
    @w;\n}", "    return [split /[\\s,]+/, $s];\n}", "    return [split(/\\s+|,\\\
    s*/, $s)];\n}", "    return split(/[\\s,]+/, $s);\n}", "    my @words = split\
    \ /\\s*[,\\s]\\s*/, $s;\n    return @words;\n}", "    my @w = split / |,/, $s;\n\
    \    return @w;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    my @w = split(/[, ]+/, $s);\n    return @w;\n}", "    my @a = split /[\\\
    s,]+/, $s;\n    return @a;\n}", "    return [split /[\\s,]+/, $s];\n}", "    my\
    \ @words = split /[\\s,]+/, $s;\n    return @words;\n}", "    # Split the string\
    \ on either spaces or commas.\n    return split(/[ ,]+/, $s);\n}", "    my @w\
    \ = split(/[\\s,]+/, $s);\n    return \\@w;\n}", "    return [split /[, ]+/, $s];\n\
    }", "    my(@words) = split /\\s*,\\s*/, $s;\n    return @words;\n}", "    return\
    \ split /[\\s,]+/, $s;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ @words;\n}", "    my(@w, $w);\n    @w = split(/[\\s,]+/, $s);\n    return @w;\n\
    }", "    my @a = split(/\\s*[,\\s]\\s*/, $s);\n    return @a;\n}", "    my @words\
    \ = split /,? +/, $s;\n    return @words;\n}", "    my @words = split /\\s+|,\\\
    s*/, $s;\n    return @words;\n}", "    my(@words) = split(/\\s*[,\\s]\\s*/, $s);\n\
    \    return @words;\n}", "    my @result = split /[, ]+/, $s;\n    return @result;\n\
    }", "    my @a = split(/,| /, $s);\n    return \\@a;\n}", "    my @words = split\
    \ /[, ]+/, $s;\n    return @words;\n}", "    $s =~ s/,//g;\n    my @strings =\
    \ split(\" \", $s);\n    return @strings;\n}", "    my @retval = split(/\\s*[,\\\
    s]\\s*/, $s);\n    return \\@retval;\n}", "    my(@words) = split(/\\s*,\\s*/,\
    \ $s);\n    return @words;\n}", "    return split(/\\s+|,\\s*/, $s);\n}", "  \
    \  my @words = split(/[, ]+/, $s);\n    return @words;\n}", "    my @words = split(/,?\\\
    s+/, $s);\n    return @words;\n}", "    my @w = split(/[\\s,]+/, $s);\n    return\
    \ @w;\n}", "    my @w = split /\\s+|,\\s*/, $s;\n    return @w;\n}", "    split(/[\\\
    s,]+/, $s);\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    my @a = split /[\\s,]+/, $s;\n    return @a;\n}", "    return split(\" \",\
    \ $s);\n}", "    my @a = split(/[\\s,]+/, $s);\n    return @a;\n}", "    my @w\
    \ = split(/[\\s,]+/, $s);\n    return \\@w;\n}", "    return split /\\s*,?\\s*/,\
    \ $s;\n}", "    # Start coding here\n    my @string = split /[,\\s]+/, $s;\n \
    \   return @string;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
