language: pl
name: HumanEval_117_select_words
results:
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split /\\s+/, $s;\n   \
    \ for my $word (@words) {\n        my $c = 0;\n        for my $letter (split //,\
    \ $word) {\n            $c++ if ! is_vowel($letter);\n        }\n        push\
    \ @result, $word if $c == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_vowel called at /tmp/tmpuy0nsskm.pl line
    24.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n  \
    \  for my $word (@words) {\n        my $word_length = length($word);\n       \
    \ my @word_array = split(//, $word);\n        my $vowel_count = 0;\n        for\
    \ my $char (@word_array) {\n            if ($char eq 'a' || $char eq 'e' || $char\
    \ eq 'i' || $char eq 'o' || $char eq 'u') {\n                $vowel_count++;\n\
    \            }\n        }\n        if (($word_length - $vowel_count) == $n) {\n\
    \            push(@result, $word);\n        }\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    foreach my $word (split(' ', $s)) {\n\
    \        my $count = 0;\n        my $vowels = 0;\n        my @chars = split('',\
    \ $word);\n        foreach my $char (@chars) {\n            if($char =~ /[aeiou]/i)\
    \ {\n                $vowels++;\n            }\n            else {\n         \
    \       $count++;\n            }\n        }\n        if($count == $n) {\n    \
    \        push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(/\\s+/, $s);\n  \
    \  foreach my $word (@words) {\n        my $consonants = 0;\n        foreach my\
    \ $c (split(//, $word)) {\n            $consonants++ if $c !~ /[aeiou]/i;\n  \
    \      }\n        push @result, $word if $consonants == $n;\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @found;\n    foreach\
    \ my $word (@words) {\n        my $vowels = $word =~ tr/[aeiou]//;\n        if(length($word)\
    \ - $vowels == $n) {\n            push(@found, $word);\n        }\n    }\n   \
    \ return @found;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = split ' ', $s;\n    my @b = grep { /^[^aeiou]{$n}$/i\
    \ } @a;\n    return @b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(\" \", $s);\n    my @selected_words;\n\
    \    foreach my $word (@words) {\n        if ($word =~ /[^aeiou]{$n}/i) {\n  \
    \          push @selected_words, $word;\n        }\n    }\n    return @selected_words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @array = split(/ /, $s);\n    my @ret;\n    for (my\
    \ $i = 0; $i < scalar @array; $i++) {\n        my $word = $array[$i];\n      \
    \  if (consonants($word) == $n) {\n            push(@ret, $word);\n        }\n\
    \    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmp1q2y7179.pl line
    23.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my $vowels = join('', ('a'..'z')[0,4,8,14,20]);\n  \
    \  my @words = split(/\\s+/, $s);\n    my @result;\n    for my $word (@words)\
    \ {\n        my $c = $word =~ tr/[$vowels]//;\n        push @result, $word if\
    \ $c == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if $s eq '';\n    my @words = split(/\\s+/,\
    \ $s);\n    my @result = grep { get_num_of_consonants($_) == $n } @words;\n  \
    \  return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_num_of_consonants called at /tmp/tmpb10u24_i.pl
    line 21.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @cons = ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z');\n    my @match\
    \ = ();\n    foreach my $w (split /\\s+/, $s) {\n        my $n_cons = 0;\n   \
    \     foreach my $l (split //, $w) {\n            $n_cons++ if $l ~~ @cons;\n\
    \        }\n        push @match, $w if $n_cons == $n;\n    }\n    return @match;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmptu7tgmag.pl line 24.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @consonants =\
    \ qw(b c d f g h j k l m n p q r s t v w x y z);\n    my @consonants_in_word;\n\
    \    my @selected_words;\n    foreach my $word (@words) {\n        @consonants_in_word\
    \ = ();\n        foreach my $letter (@consonants) {\n            $letter =~ s/[^$letter]//g;\n\
    \            push @consonants_in_word, $letter if ($word =~ m/$letter/);\n   \
    \     }\n        push @selected_words, $word if ((scalar @consonants_in_word)\
    \ == $n);\n    }\n    return @selected_words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @result;\n    for(@words)\
    \ {\n        my $c = $_ =~ tr/[^aeiou]//;\n        push @result, $_ if $c == $n;\n\
    \    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @result;\n    for\
    \ my $word (@words) {\n        my $cons = num_consonants($word);\n        if ($cons\
    \ == $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num_consonants called at /tmp/tmpd2p8iw4z.pl
    line 22.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = ();\n    foreach my $word (split(/\\s+/,\
    \ $s)) {\n        my $consonants = ( $word =~ tr/bcdfghjklmnpqrstvwxyz/bcdfghjklmnpqrstvwxyz/\
    \ );\n        push @words, $word if ($consonants == $n);\n    }\n    return @words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @ans;\n    for\
    \ my $word (@words) {\n        my $c = ($word =~ tr/[^aeiou]//);\n        if ($c\
    \ == $n) {\n            push @ans, $word;\n        }\n    }\n    return @ans;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return () if $s eq '';\n    my @words = split(' ', $s);\n\
    \    return () if scalar @words == 0;\n    my @result = ();\n    foreach my $word\
    \ (@words) {\n        my $consonants = 0;\n        foreach my $char (split('',\
    \ $word)) {\n            $consonants++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $consonants == $n;\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(' ', $s);\n    foreach\
    \ (@words) {\n        if (consonants($_) == $n) {\n            push @result, $_;\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpws5p4vgg.pl line
    22.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    return grep {\n   \
    \     my $word = $_;\n        $word =~ s/[aeiou]//g;\n        length($word) ==\
    \ $n\n    } @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = grep /^(?=.*?[^\\sA-Za-z])[A-Za-z\\s]*?[^\\\
    sA-Za-z]{$n}[A-Za-z\\s]*?[^\\sA-Za-z]$/, split /\\s+/, $s;\n    my @b = map {\
    \ [split //, $_] } @a;\n    my @c = grep { join('', @$_) =~ /^[A-Za-z]*?[^\\sA-Za-z]{$n}[A-Za-z]*?$/\
    \ } @b;\n    my @d = map { join('', @$_) } @c;\n    my @e = map { $_ =~ s/[^A-Za-z]//g;\
    \ $_ } @d;\n    return @e;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
