language: pl
name: HumanEval_117_select_words
results:
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split /\\s+/, $s;\n   \
    \ for my $word (@words) {\n        my $c = 0;\n        for my $letter (split //,\
    \ $word) {\n            $c++ if ! is_vowel($letter);\n        }\n        push\
    \ @result, $word if $c == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_vowel called at /tmp/tmpuy0nsskm.pl line
    24.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n  \
    \  for my $word (@words) {\n        my $word_length = length($word);\n       \
    \ my @word_array = split(//, $word);\n        my $vowel_count = 0;\n        for\
    \ my $char (@word_array) {\n            if ($char eq 'a' || $char eq 'e' || $char\
    \ eq 'i' || $char eq 'o' || $char eq 'u') {\n                $vowel_count++;\n\
    \            }\n        }\n        if (($word_length - $vowel_count) == $n) {\n\
    \            push(@result, $word);\n        }\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    foreach my $word (split(' ', $s)) {\n\
    \        my $count = 0;\n        my $vowels = 0;\n        my @chars = split('',\
    \ $word);\n        foreach my $char (@chars) {\n            if($char =~ /[aeiou]/i)\
    \ {\n                $vowels++;\n            }\n            else {\n         \
    \       $count++;\n            }\n        }\n        if($count == $n) {\n    \
    \        push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(/\\s+/, $s);\n  \
    \  foreach my $word (@words) {\n        my $consonants = 0;\n        foreach my\
    \ $c (split(//, $word)) {\n            $consonants++ if $c !~ /[aeiou]/i;\n  \
    \      }\n        push @result, $word if $consonants == $n;\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @found;\n    foreach\
    \ my $word (@words) {\n        my $vowels = $word =~ tr/[aeiou]//;\n        if(length($word)\
    \ - $vowels == $n) {\n            push(@found, $word);\n        }\n    }\n   \
    \ return @found;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = split ' ', $s;\n    my @b = grep { /^[^aeiou]{$n}$/i\
    \ } @a;\n    return @b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(\" \", $s);\n    my @selected_words;\n\
    \    foreach my $word (@words) {\n        if ($word =~ /[^aeiou]{$n}/i) {\n  \
    \          push @selected_words, $word;\n        }\n    }\n    return @selected_words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @array = split(/ /, $s);\n    my @ret;\n    for (my\
    \ $i = 0; $i < scalar @array; $i++) {\n        my $word = $array[$i];\n      \
    \  if (consonants($word) == $n) {\n            push(@ret, $word);\n        }\n\
    \    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmp1q2y7179.pl line
    23.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my $vowels = join('', ('a'..'z')[0,4,8,14,20]);\n  \
    \  my @words = split(/\\s+/, $s);\n    my @result;\n    for my $word (@words)\
    \ {\n        my $c = $word =~ tr/[$vowels]//;\n        push @result, $word if\
    \ $c == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if $s eq '';\n    my @words = split(/\\s+/,\
    \ $s);\n    my @result = grep { get_num_of_consonants($_) == $n } @words;\n  \
    \  return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_num_of_consonants called at /tmp/tmpb10u24_i.pl
    line 21.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @cons = ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z');\n    my @match\
    \ = ();\n    foreach my $w (split /\\s+/, $s) {\n        my $n_cons = 0;\n   \
    \     foreach my $l (split //, $w) {\n            $n_cons++ if $l ~~ @cons;\n\
    \        }\n        push @match, $w if $n_cons == $n;\n    }\n    return @match;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmptu7tgmag.pl line 24.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @consonants =\
    \ qw(b c d f g h j k l m n p q r s t v w x y z);\n    my @consonants_in_word;\n\
    \    my @selected_words;\n    foreach my $word (@words) {\n        @consonants_in_word\
    \ = ();\n        foreach my $letter (@consonants) {\n            $letter =~ s/[^$letter]//g;\n\
    \            push @consonants_in_word, $letter if ($word =~ m/$letter/);\n   \
    \     }\n        push @selected_words, $word if ((scalar @consonants_in_word)\
    \ == $n);\n    }\n    return @selected_words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @result;\n    for(@words)\
    \ {\n        my $c = $_ =~ tr/[^aeiou]//;\n        push @result, $_ if $c == $n;\n\
    \    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @result;\n    for\
    \ my $word (@words) {\n        my $cons = num_consonants($word);\n        if ($cons\
    \ == $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num_consonants called at /tmp/tmpd2p8iw4z.pl
    line 22.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = ();\n    foreach my $word (split(/\\s+/,\
    \ $s)) {\n        my $consonants = ( $word =~ tr/bcdfghjklmnpqrstvwxyz/bcdfghjklmnpqrstvwxyz/\
    \ );\n        push @words, $word if ($consonants == $n);\n    }\n    return @words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @ans;\n    for\
    \ my $word (@words) {\n        my $c = ($word =~ tr/[^aeiou]//);\n        if ($c\
    \ == $n) {\n            push @ans, $word;\n        }\n    }\n    return @ans;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return () if $s eq '';\n    my @words = split(' ', $s);\n\
    \    return () if scalar @words == 0;\n    my @result = ();\n    foreach my $word\
    \ (@words) {\n        my $consonants = 0;\n        foreach my $char (split('',\
    \ $word)) {\n            $consonants++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $consonants == $n;\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(' ', $s);\n    foreach\
    \ (@words) {\n        if (consonants($_) == $n) {\n            push @result, $_;\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpws5p4vgg.pl line
    22.

    '
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    return grep {\n   \
    \     my $word = $_;\n        $word =~ s/[aeiou]//g;\n        length($word) ==\
    \ $n\n    } @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = grep /^(?=.*?[^\\sA-Za-z])[A-Za-z\\s]*?[^\\\
    sA-Za-z]{$n}[A-Za-z\\s]*?[^\\sA-Za-z]$/, split /\\s+/, $s;\n    my @b = map {\
    \ [split //, $_] } @a;\n    my @c = grep { join('', @$_) =~ /^[A-Za-z]*?[^\\sA-Za-z]{$n}[A-Za-z]*?$/\
    \ } @b;\n    my @d = map { join('', @$_) } @c;\n    my @e = map { $_ =~ s/[^A-Za-z]//g;\
    \ $_ } @d;\n    return @e;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821691
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    return [grep { count_consonants($_)\
    \ == $n } @words];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmp590bnkke.pl
    line 20.

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    foreach my $w (split(/\\s+/, $s)) {\n\
    \        if (num_consonants($w) == $n) {\n            push @result, $w;\n    \
    \    }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num_consonants called at /tmp/tmpp7ng58hy.pl
    line 21.

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @results;\n    foreach\
    \ my $word (@words) {\n        push(@results, $word) if count_consonants($word)\
    \ == $n;\n    }\n    return @results;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmpabyzzm4w.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @ret = ();\n    foreach my $word (split /\\s+/, $s)\
    \ {\n        my $c = $word =~ tr/[^aeiou]//;\n        push @ret, $word if $c ==\
    \ $n;\n    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my(@words) = split /\\s+/, $s;\n    my(@result) = ();\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split //, $word) {\n            $count++ if ($letter !~ /[aeiou]/i);\n    \
    \    }\n        push @result, $word if ($count == $n);\n    }\n    return @result;\n\
    }\n1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = ();\n    my @arr = split(/\\s+/, $s);\n\
    \    foreach my $word (@arr) {\n        if (consonants($word) == $n) {\n     \
    \       push(@words, $word);\n        }\n    }\n    return @words;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmp9letxg2r.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if $s eq '';\n    my @s = split ' ', $s;\n\
    \    my @res;\n    for my $word (@s) {\n        my $c = 0;\n        for my $chr\
    \ (split '', $word) {\n            $c++ if (index \"aeiou\", $chr) == -1;\n  \
    \      }\n        push @res, $word if $c == $n;\n    }\n    return \\@res;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    my @words_to_return;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char !~ /[aeiou]/i) {\n              \
    \  $count++;\n            }\n        }\n        if ($count == $n) {\n        \
    \    push @words_to_return, $word;\n        }\n    }\n    return @words_to_return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @selected;\n   \
    \ foreach my $word (@words) {\n        my $count = 0;\n        for (my $i = 0;\
    \ $i < length($word); $i++) {\n            if ($word =~ /^[aeiou]/i) {\n     \
    \           last;\n            } else {\n                $count++;\n         \
    \   }\n        }\n        if ($count == $n) {\n            push @selected, $word;\n\
    \        }\n    }\n    return @selected;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split /\\s+/, $s;\n   \
    \ for my $word (@words) {\n        if (count_consonants($word) == $n) {\n    \
    \        push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmpzq_7kxyy.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    $s =~ s/[^a-zA-Z\\s]//g;\n    my @s = split(\" \", $s);\n\
    \    my @r;\n    foreach my $w (@s) {\n        my $c = $w =~ tr/[^aeyuio]//;\n\
    \        push(@r, $w) if $c == $n;\n    }\n    return @r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = ();\n    my @w = split(\" \", $s);\n    for\
    \ my $w (@w) {\n        if ($w =~ tr/[b-df-hj-np-tv-z]// == $n) {\n          \
    \  push @a, $w;\n        }\n    }\n    return @a;\n}\nprint \"@{[select_words(\"\
    Mary had a little lamb\", 4)]}\\n\";\nprint \"@{[select_words(\"Mary had a little\
    \ lamb\", 3)]}\\n\";\nprint \"@{[select_words(\"simple white space\", 2)]}\\n\"\
    ;\nprint \"@{[select_words(\"Hello world\", 4)]}\\n\";\nprint \"@{[select_words(\"\
    Uncle sam\", 3)]}\\n\";\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpj2xbj1em.pl line 28, within
    string

    syntax error at /tmp/tmpj2xbj1em.pl line 28, at EOF

    Execution of /tmp/tmpj2xbj1em.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @out;\n    my @words = split(/\\s+/, $s);\n    foreach\
    \ my $word (@words) {\n        my $count = 0;\n        my @chars = split(//, $word);\n\
    \        foreach my $char (@chars) {\n            $count++ if ($char !~ /[aeiouAEIOU]/);\n\
    \        }\n        push(@out, $word) if ($count == $n);\n    }\n    return @out;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = split(/\\s+/, $s);\n    my @b = ();\n    foreach\
    \ (@a) {\n        my $k = count_consonants($_);\n        push(@b, $_) if $k ==\
    \ $n;\n    }\n    return @b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmpd9e5wfyl.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @res;\n    for my $w (split(/\\s+/, $s)) {\n    \
    \    my $v = $w;\n        $v =~ s/[aeiou]//gi;\n        push @res, $w if length($v)\
    \ == $n;\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @sel = ();\n    my @w = split(' ', $s);\n    foreach\
    \ my $w (@w) {\n        if (is_consonant($w, $n)) {\n            push(@sel, $w);\n\
    \        }\n    }\n    return @sel;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_consonant called at /tmp/tmpjblbhya4.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @s = split /\\s+/, $s;\n    my @words;\n    for(@s)\
    \ {\n        if(consonants($_) == $n) {\n            push @words, $_;\n      \
    \  }\n    }\n    return @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmp7axm6th3.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @out = ();\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        for(my $i =\
    \ 0; $i < length($word); $i++) {\n            my $char = substr($word, $i, 1);\n\
    \            if($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n                $count++;\n\
    \            }\n        }\n        if($count == $n) {\n            push(@out,\
    \ $word);\n        }\n    }\n    return @out;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @w;\n    for my $w (split(/ /, $s)) {\n        my\
    \ $m = 0;\n        $m++ while $w =~ /[^aeiou]/g;\n        push @w, $w if $m ==\
    \ $n;\n    }\n    return @w;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    $s =~ s/\\W//g;\n    my @words = split /\\s+/, $s;\n\
    \    my @r = grep {\n        my $w = $_;\n        $w =~ s/[aeiouy]//g;\n     \
    \   length($w) == $n;\n    } @words;\n    return @r;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @w = ();\n    my @t = split(' ', $s);\n    for (my\
    \ $i = 0; $i < scalar(@t); $i++) {\n        if (check($t[$i], $n)) {\n       \
    \     push(@w, $t[$i]);\n        }\n    }\n    return @w;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::check called at /tmp/tmp5mntn8d1.pl line 21.

    '
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return () if not $s;\n    my @words = grep { $_ if (y/aAeEiIoOuU//)\
    \ == $n } split \" \", $s;\n    return @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my $p = qr/([^aeiou ]{$n})/;\n    return $s =~ /\\b$p\\\
    b/g;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @w = split(/\\s+/, $s);\n    my @r;\n    for my $w\
    \ (@w) {\n        my $cn = 0;\n        $cn++ while $w =~ /[^aeiou]/g;\n      \
    \  push @r, $w if $cn == $n;\n    }\n    return @r;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004056
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my $i;\n    my @words = split(' ', $s);\n    my @new_words;\n\
    \    my $vowels = \"aeiouAEIOU\";\n    my $found;\n    my $consonants;\n    for\
    \ ($i = 0; $i < scalar(@words); $i++) {\n        $found = 0;\n        $consonants\
    \ = 0;\n        while ($found < length($words[$i])) {\n            if (index($vowels,\
    \ substr($words[$i], $found, 1)) == -1) {\n                $consonants++;\n  \
    \          }\n            $found++;\n        }\n        if ($consonants == $n)\
    \ {\n            push(@new_words, $words[$i]);\n        }\n    }\n    return @new_words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n    for\
    \ my $w (@words) {\n        my $vowels = () = $w =~ /[aeiou]/gi;\n        my $consonants\
    \ = length($w) - $vowels;\n        push @result, $w if $consonants == $n;\n  \
    \  }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n   \
    \ foreach my $word (@words) {\n        my $total = 0;\n        my @chars = split\
    \ //, $word;\n        foreach my $char (@chars) {\n            $total++ if index($CONSONANTS,\
    \ $char) >= 0;\n        }\n        push @result, $word if $total == $n;\n    }\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    my @result;\n    for\
    \ my $word (@words) {\n        my $count = 0;\n        my @chars = split '', $word;\n\
    \        for my $char (@chars) {\n            unless ($char =~ /[aeiouAEIOU]/)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @list = split /\\s+/, $s;\n    my @nlist;\n    for\
    \ my $m (@list) {\n        my $counter = 0;\n        for my $k (split '', $m)\
    \ {\n            if ($k !~ /[aeiou]/i) {\n                $counter++;\n      \
    \      }\n        }\n        if ($counter == $n) {\n            push @nlist, $m;\n\
    \        }\n    }\n    return @nlist;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @s = split(/\\s+/, $s);\n    my @consonants = grep\
    \ {tr/bcdfghjklmnpqrstvwxyz// == $n} @s;\n    return @consonants;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @ret = ();\n    my @s = split(/\\s+/, $s);\n    foreach\
    \ my $w (@s) {\n        push(@ret, $w) if (0 == $n - consonants($w));\n    }\n\
    \    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmp2b355vmv.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(/\\s+/, $s);\n  \
    \  my $i = 0;\n    while ($i < scalar(@words)) {\n        if (has_exactly_n_consonants($words[$i],\
    \ $n)) {\n            push(@result, $words[$i]);\n        }\n        $i++;\n \
    \   }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::has_exactly_n_consonants called at /tmp/tmp0yveuigz.pl
    line 23.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @r;\n    $s =~ s/(\\b)([aeiou]{$n})(\\w+)/push @r,\
    \ $3; \"$1$2\";/igxe;\n    return @r;\n}\nprint join \", \", select_words(\"Mary\
    \ had a little lamb\", 4);\nprint \"\\n\";\nprint join \", \", select_words(\"\
    Mary had a little lamb\", 3);\nprint \"\\n\";\nprint join \", \", select_words(\"\
    simple white space\", 2);\nprint \"\\n\";\nprint join \", \", select_words(\"\
    Hello world\", 4);\nprint \"\\n\";\nprint join \", \", select_words(\"Uncle sam\"\
    , 3);\nprint \"\\n\";\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: '





    '
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @selected;\n    my @words = split(/ /, $s);\n   \
    \ foreach my $word (@words) {\n        my $num_consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if($char =~ /[^aeiouAEIOU]/) {\n\
    \                $num_consonants++;\n            }\n        }\n        if($num_consonants\
    \ == $n) {\n            push(@selected, $word);\n        }\n    }\n    return\
    \ @selected;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @result;\n    my\
    \ @vowels = split(//, \"aeiou\");\n    foreach my $word (@words) {\n        my\
    \ $consonants = grep { my $letter = $_; !grep { $letter eq $_ } @vowels } split(//,\
    \ $word);\n        if ($consonants == $n) {\n            push(@result, $word);\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if $s eq '';\n    my @words = split /\\s+/,\
    \ $s;\n    my @return;\n    for (@words) {\n        my $count = 0;\n        for\
    \ (split //) {\n            $count++ if /[^aeiouAEIOU]/;\n        }\n        push\
    \ @return, $_ if $count == $n;\n    }\n    return \\@return;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my(@words, $word);\n    my @letters = split '', $s;\n\
    \    my $prev_is_letter = 0;\n    my $total_consonants = 0;\n    foreach my $letter\
    \ (@letters) {\n        if ($letter =~ /[^aeiou\\s]/i) {\n            if ($prev_is_letter)\
    \ {\n                $word .= $letter;\n            } else {\n               \
    \ $word = $letter;\n            }\n            $prev_is_letter = 1;\n        \
    \    $total_consonants++;\n        } else {\n            if ($prev_is_letter)\
    \ {\n                if ($total_consonants == $n) {\n                    push\
    \ @words, $word;\n                }\n                $total_consonants = 0;\n\
    \            }\n            $prev_is_letter = 0;\n        }\n    }\n    if ($prev_is_letter\
    \ && $total_consonants == $n) {\n        push @words, $word;\n    }\n    return\
    \ @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my(@s) = split(/ /, $s);\n    my(@n);\n    for my $i\
    \ (@s) {\n\tmy($c) = $i =~ tr/bcdfghjklmnpqrstvwxyz/bcdfghjklmnpqrstvwxyz/;\n\t\
    push(@n, $i) if ($c == $n);\n    }\n    return @n;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @array = split(/\\s+/, $s);\n    my @words = ();\n\
    \    foreach my $w (@array) {\n        my $sum = 0;\n        my @letters = split(//,\
    \ $w);\n        foreach my $l (@letters) {\n            if($l !~ /a|e|i|o|u|y/i)\
    \ {\n                $sum += 1;\n            }\n        }\n        if($sum ==\
    \ $n) {\n            push(@words, $w);\n        }\n    }\n    return @words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(/ /, $s);\n    foreach\
    \ my $word (@words) {\n        if(consonants($word) == $n) {\n            push(@result,\
    \ $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpm5514q22.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @consonants = ('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'z');\n    my @selected_words;\n    foreach my $word (@words) {\n\
    \        my $count = 0;\n        foreach my $c (@consonants) {\n            if\
    \ ($word =~ /$c/g) {\n                $count++;\n            }\n        }\n  \
    \      if ($count == $n) {\n            push(@selected_words, $word);\n      \
    \  }\n    }\n    return @selected_words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @vowels = qw/a e i o u/;\n    my @words;\n    foreach\
    \ my $w (split(/\\s+/, $s)) {\n        next if $w eq '';\n        my $c = 0;\n\
    \        foreach my $l (split(//, $w)) {\n            $c++ if !grep(/^$l$/, @vowels);\n\
    \        }\n        push @words, $w if $c == $n;\n    }\n    return @words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n  \
    \  my @consonants = ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n    my %consonants = map { $_\
    \ => 1 } @consonants;\n    my @select = grep { consonant_count($_) == $n } @words;\n\
    \    return @select;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonant_count called at /tmp/tmp4zrmc9v1.pl
    line 23.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    my @consonants = grep\
    \ { !/[aeiou]/ } split '', $_;\n    return grep { scalar @consonants == $n } @words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return grep { /^[^aeiou]{$n}/i } split(/\\s+/, $s);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(\" \", $s);\n   \
    \ for my $w (@words) {\n        my $vowels = () = $w =~ /[aeiou]/gi;\n       \
    \ my $consonants = length($w) - $vowels;\n        push @result, $w if $consonants\
    \ == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @filter = grep\
    \ {consonants($_) == $n} @words;\n    return @filter;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpll71hthv.pl line
    20.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @n_words;\n  \
    \  foreach my $word (@words) {\n        next if $word =~ /[aeiou]/;\n        push\
    \ @n_words, $word if length($word) == $n;\n    }\n    return @n_words;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(\" \", $s);\n    my @result;\n   \
    \ foreach my $word (@words) {\n        my $count = 0;\n        for(my $i = 0;\
    \ $i < length($word); $i++) {\n            my $c = substr($word, $i, 1);\n   \
    \         if($c =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n                $count++;\n\
    \            }\n        }\n        if($count == $n) {\n            push(@result,\
    \ $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    if ($s =~ /\\w+/g) {\n        while\
    \ ($s =~ /\\w+/g) {\n            my $word = $&;\n            if ($word =~ /[^aeiou]/g\
    \ && $word =~ tr/[^aeiou]// == $n) {\n                push @result, $word;\n \
    \           }\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @arr = split(/\\s+/, $s);\n    my @output = ();\n\
    \    foreach my $x (@arr) {\n        if (consonants($x) == $n) {\n           \
    \ push(@output, $x);\n        }\n    }\n    return @output;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmp6jjeg0g1.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    foreach my $word (split(' ', $s)) {\n\
    \        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz/bcdfghjklmnpqrstvwxyz/;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n   \
    \ foreach my $word (@words) {\n        if (getConsonants($word) == $n) {\n   \
    \         push @result, $word;\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::getConsonants called at /tmp/tmprs31o40u.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @filtered = ();\n\
    \    for my $word (@words) {\n        my $consonants = ($word =~ tr/bcdfghjklmnpqrstvwxyz//);\n\
    \        if ($consonants == $n) {\n            push(@filtered, $word);\n     \
    \   }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @s = split(\" \", $s);\n    my @w;\n    for my $w\
    \ (@s) {\n        my $x = $w;\n        $x =~ s/[aeiou]//g;\n        push @w, $w\
    \ if length($x) == $n;\n    }\n    return @w;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [map {$_->[0]} grep {$_->[1] == $n} map {[$_,\
    \ () = $_ =~ /[^aeiouAEIOU]/g]} split /\\s+/, $s];\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = grep { $_ =~ /^[^aeiou]{$n}\\b/ } split\
    \ /\\s+/, $s;\n    return @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    # e.g. 'Mary had a little lamb', 4\n    my @words =\
    \ split(/\\s+/, $s); # e.g. qw(Mary had a little lamb)\n    my @consonants;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        $count++ foreach\
    \ ($word =~ /[bcdfghjklmnpqrstvwxyz]/gi);\n        # $count = count_consonants($word);\n\
    \        push @consonants, $word if $count == $n;\n    }\n    return @consonants;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @arr = ();\n    my @t = split(\" \", $s);\n    foreach\
    \ my $word (@t) {\n        my $count = 0;\n        for(my $i = 0; $i < length($word);\
    \ $i++) {\n            if (is_consonant(substr($word, $i, 1))) {\n           \
    \     $count++;\n            }\n        }\n        if ($count == $n) {\n     \
    \       push(@arr, $word);\n        }\n    }\n    return @arr;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_consonant called at /tmp/tmpdc89ky2r.pl
    line 23.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    $s =~ tr/A-Z/a-z/;\n    my @words = split(/\\s+/, $s);\n\
    \    my @result;\n    foreach my $word (@words) {\n        my $count = () = $word\
    \ =~ /([^aeiou])/g;\n        push @result, $word if ($count == $n);\n    }\n \
    \   return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @vowels = split(//,\
    \ \"aeiouAEIOU\");\n    my @result;\n    for my $word (@words) {\n        my $n_consonants\
    \ = 0;\n        my @letters = split(//, $word);\n        for my $letter (@letters)\
    \ {\n            my $is_vowel = 0;\n            for my $vowel (@vowels) {\n  \
    \              if ($letter eq $vowel) {\n                    $is_vowel = 1;\n\
    \                    last;\n                }\n            }\n            if (!$is_vowel)\
    \ {\n                $n_consonants++;\n            }\n        }\n        if ($n_consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    return grep {my $result\
    \ = y/bcdfghjklmnpqrstvwxyz//c; $result == $n } @words;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @r;\n    my @words = split / /, $s;\n    foreach\
    \ my $word (@words) {\n        my $counter = 0;\n        my @characters = split\
    \ //, $word;\n        foreach my $character (@characters) {\n            if ($character\
    \ !~ /[aeiou]/i) {\n                $counter++;\n            }\n        }\n  \
    \      if ($counter == $n) {\n            push @r, $word;\n        }\n    }\n\
    \    return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @r = ();\n    my @words = split(\" \", $s);\n   \
    \ foreach my $word (@words) {\n        my $count = num_consonants($word);\n  \
    \      if ($count == $n) {\n            push(@r, $word);\n        }\n    }\n \
    \   return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num_consonants called at /tmp/tmp30yoj1oq.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @s = split / /, $s;\n    return () unless @s;\n \
    \   my @r;\n    foreach (@s) {\n        my $c = $_ =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @r, $_ if $c == $n;\n    }\n    return @r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @ret = ();\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        $count++ while\
    \ $word =~ /[^aeiouAEIOU]/g;\n        push @ret, $word if $count == $n;\n    }\n\
    \    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @consonants =\
    \ qw(b c d f g h j k l m n p q r s t v w x y z);\n    my @new_words;\n    foreach\
    \ my $word (@words) {\n        my $num_consonants = 0;\n        foreach my $c\
    \ (@consonants) {\n            if ($word =~ /$c/i) {\n                $num_consonants++;\n\
    \            }\n        }\n        if ($num_consonants == $n) {\n            push\
    \ @new_words, $word;\n        }\n    }\n    return @new_words;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @r = ();\n    foreach\
    \ my $w (@words) {\n        my $c = consonants($w);\n        if ($c == $n) {\n\
    \            push(@r, $w);\n        }\n    }\n    return @r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpgui961o5.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    # In: String $s and natural number $n\n    # Out: Array\
    \ of words from string $s that contain exactly $n consonants\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpmmfdqmxw.pl line 56, at
    end of line

    syntax error at /tmp/tmpmmfdqmxw.pl line 56, at EOF

    Execution of /tmp/tmpmmfdqmxw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = split(\" \", $s);\n    my @res = ();\n    foreach\
    \ my $word (@a) {\n        my $count = 0;\n        my @letters = split(\"\", $word);\n\
    \        foreach my $char (@letters) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push(@res, $word);\n        }\n    }\n    return @res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n  \
    \  foreach (@words) {\n        my $count = 0;\n        foreach (split //, $_)\
    \ {\n            ++$count if not /[aeiou]/i;\n        }\n        push @result,\
    \ $_ if $count == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my $f = sub { \n        my $word = shift;\n        my\
    \ $c = grep { $_ !~ /[aeiouy]/i } split //, $word;\n        return $c == $n ?\
    \ $word : undef;\n    };\n    my @tokens = grep { defined $_ } map { $f->($_)\
    \ } split / /, $s;\n    return @tokens;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @arr = split(\" \", $s);\n    my @result;\n    my\
    \ @vowels = qw(a e i o u);\n    for(my $i = 0; $i < scalar @arr; $i++) {\n   \
    \     my $count = 0;\n        for(my $j = 0; $j < length($arr[$i]); $j++) {\n\
    \            my $x = substr($arr[$i], $j, 1);\n            my $found = 0;\n  \
    \          for(my $k = 0; $k < scalar @vowels; $k++) {\n                if($x\
    \ eq $vowels[$k]) {\n                    $found = 1;\n                    last;\n\
    \                }\n            }\n            if($found == 0) {\n           \
    \     $count++;\n            }\n        }\n        if($count == $n) {\n      \
    \      push(@result, $arr[$i]);\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @w = split(/\\s+/, $s);\n    my @r;\n    for my $w\
    \ (@w) {\n        if ($w =~ tr/[bcdfghjklmnpqrstvwxyz]//) {\n            push\
    \ @r, $w if ($w =~ tr/[bcdfghjklmnpqrstvwxyz]// == $n);\n        }\n    }\n  \
    \  return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my(@a) = ();\n    my(@l) = $s =~ /([A-Za-z]*)/g;\n \
    \   for my $i (@l) {\n        push(@a, $i) if $i =~ /([^AEIOUaeiou]){$n}/;\n \
    \   }\n    return @a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    return \\@result if !$s;\n    for my\
    \ $word (split /\\s+/, $s) {\n        push @result, $word if $word =~ tr/[a-z]//\
    \ - $word =~ tr/[aeiou]// == $n;\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n   \
    \ for (@words) {\n        my $c = 0;\n        for (split //) {\n            $c++\
    \ if /[^aeiou]/i;\n        }\n        push @result, $_ if $c == $n;\n    }\n \
    \   @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @n_consonants = ();\n    my @vowels = qw(a e i o\
    \ u);\n    my @word_array = split(/\\s+/, $s);\n    foreach my $word (@word_array)\
    \ {\n        my $vowel_count = 0;\n        my $consonant_count = 0;\n        my\
    \ @letters = split(//, $word);\n        foreach my $letter (@letters) {\n    \
    \        if (index(join(\"\", @vowels), $letter) != -1) {\n                $vowel_count++;\n\
    \            } else {\n                $consonant_count++;\n            }\n  \
    \      }\n        if ($consonant_count == $n) {\n            push(@n_consonants,\
    \ $word);\n        }\n    }\n    return @n_consonants;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @s = split / /, $s;\n    my @e;\n    for my $i (@s)\
    \ {\n        my $c = 0;\n        for my $j (split //, $i) {\n            $c++\
    \ if $j =~ /[^aeiou]/i;\n        }\n        push @e, $i if $c == $n;\n    }\n\
    \    return @e;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = grep { consonants($_) == $n } split ' ',\
    \ $s;\n    return \\@words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpgmn2w39f.pl line
    19.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    my @selected;\n    foreach\
    \ my $word (@words) {\n        my $consonants = 0;\n        my @chars = split\
    \ '', $word;\n        foreach my $char (@chars) {\n            if ($char !~ /[aeiou]/i)\
    \ {\n                $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push @selected, $word;\n        }\n    }\n    return @selected;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n    foreach\
    \ my $word (@words) {\n        my $count = 0;\n        $count++ while $word =~\
    \ /[bcdfghjklmnpqrstvwxyz]/g;\n        push @result, $word if $count == $n;\n\
    \    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if $s eq '';\n    return [\n        grep {my\
    \ $c = $_; $c =~ s/[^bcdfghjklmnpqrstvwxyz]//g; \n            length($c) == $n}\
    \ split(/ /, $s)];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @found = ();\n \
    \   foreach my $word (@words) {\n        push(@found, $word) if consonants($word)\
    \ == $n;\n    }\n    return @found;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpcd79bstl.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return if(!$s);\n    return $s =~ /(\\w+)/g;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @matching_words;\n\
    \    foreach (@words) {\n        if(consonants($_) == $n) {\n            push(@matching_words,\
    \ $_);\n        }\n    }\n    return @matching_words;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpsqd51ymn.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @result;\n    for\
    \ my $word (@words) {\n        my $cnt = () = $word =~ /[^aeiou]/gi;\n       \
    \ push @result, $word if $cnt == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @selected_words;\n\
    \    foreach my $word (@words) {\n        push @selected_words, $word if num_consonants($word)\
    \ == $n;\n    }\n    return @selected_words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num_consonants called at /tmp/tmpxnb3bgzx.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    return grep {my $word\
    \ = $_; my $count = $word =~ tr/bcdfghjklmnpqrstvwxyz//; $count == $n} @words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    return grep {count_consonants($_)\
    \ == $n} @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmp17ea40_4.pl
    line 20.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my(@words) = split(/\\s+/, $s);\n    my(@selected);\n\
    \    foreach my $word (@words) {\n        my(@consonants) = ($word =~ /[^aeiou]/gi);\n\
    \        push(@selected, $word) if (@consonants == $n);\n    }\n    return @selected;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @ret = ();\n    my @words = split(/\\s+/, $s);\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $c\
    \ (split(//, $word)) {\n            if (is_consonant($c)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push(@ret,\
    \ $word);\n        }\n    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_consonant called at /tmp/tmpap1jwpo6.pl
    line 24.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if $s eq '';\n    my @result = ();\n    my\
    \ @words = split(' ', $s);\n    foreach my $word (@words) {\n        push @result,\
    \ $word if $word =~ /[aeiou]/i and consonants($word) == $n;\n    }\n    return\
    \ \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpkug8f2oj.pl line
    23.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(\" \", $s);\n    my @letters = split(\"\
    \", $s);\n    my @ans;\n    my $count;\n    for my $word (@words) {\n        $count\
    \ = 0;\n        for my $letter (@letters) {\n            if ($letter !~ /[aeiou]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push(@ans, $word);\n        }\n    }\n    return @ans;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my $num_consonants = 0;\n    my @words = ();\n    my\
    \ @results = ();\n    # split the string and place into @words array\n    @words\
    \ = split(/ /, $s);\n    foreach my $word (@words) {\n        $num_consonants\
    \ = 0;\n        # loop through each char in the word\n        foreach my $char\
    \ (split(//, $word)) {\n            # check if the char is a consonant and increment\
    \ the count\n            if ($char =~ /[^aeiou]/i) {\n                $num_consonants\
    \ += 1;\n            }\n        }\n        # if consonant count matches the n\
    \ then add to results\n        if ($num_consonants == $n) {\n            push(@results,\
    \ $word);\n        }\n    }\n    return @results;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n  \
    \  for my $word (@words) {\n        my $count = consonant_count($word);\n    \
    \    if ($count == $n) {\n            push @result, $word;\n        }\n    }\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonant_count called at /tmp/tmp0b8zd375.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @w = split /\\s+/, $s;\n    my @found;\n    foreach\
    \ my $w (@w) {\n        my $consonants = $w =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @found, $w if $consonants == $n;\n    }\n    return @found;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @arr = split(/\\s+/, $s);\n    my @new_arr = ();\n\
    \    for my $w (@arr) {\n        push @new_arr, $w if (has_n_consonants($w, $n));\n\
    \    }\n    return @new_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::has_n_consonants called at /tmp/tmpepf0l4ym.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if $s eq '';\n    my $re = qr{ (\\w+\\W+)\
    \ }xms;\n    my @result = ();\n    while ($s =~ m/$re/g) {\n        my $word =\
    \ $1;\n        $word =~ s/\\W+$//;\n        if (count_consonants($word) == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return \\@result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmpiqqd7ap0.pl
    line 25.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    foreach (split(/\\s+/, $s)) {\n   \
    \     my $c = 0;\n        while (/(b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z)/g)\
    \ {\n            $c++;\n        }\n        push @result, $_ if $c == $n;\n   \
    \ }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if $s eq '';\n    my @s = split ' ', $s;\n\
    \    my @v = grep {\n        my $s = $_;\n        $s =~ s/[aeiou]//g;\n      \
    \  length($s) == $n\n    } @s;\n    return \\@v;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @return;\n    my @arr = split(\" \", $s);\n    foreach\
    \ my $word (@arr) {\n\tmy $count = 0;\n\tmy @letters = split(\"\", $word);\n\t\
    foreach my $letter (@letters) {\n\t    $count++ if ($letter =~ /[^aeiou]/i);\n\
    \t}\n\tpush(@return, $word) if ($count == $n);\n    }\n    return @return;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @r;\n    my @w = split ' ', $s;\n    my $p = vowels();\n\
    \    foreach my $w (@w) {\n        my $c = $w =~ tr/[a-zA-Z]//;\n        $c -=\
    \ ($w =~ tr/$p//);\n        push @r, $w if $c == $n;\n    }\n    return @r;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::vowels called at /tmp/tmptjj2sm2e.pl line 21.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @arr;\n    if ($s eq \"\") {\n        return @arr;\n\
    \    }\n    my @string = split(\" \", $s);\n    foreach my $word (@string) {\n\
    \        if (vowel_counter($word) == $n) {\n            push(@arr, $word);\n \
    \       }\n    }\n    return @arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::vowel_counter called at /tmp/tmpt57_g94f.pl
    line 25.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = grep { $n == scalar(split(/[aeiou]/, $_))\
    \ } split(/ /, $s);\n    return @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(\" \", $s);\n    my @result;\n   \
    \ for my $word (@words) {\n        my $count = 0;\n        for my $c (split(\"\
    \", $word)) {\n            next if $c eq 'a' || $c eq 'e' || $c eq 'i' || $c eq\
    \ 'o' || $c eq 'u';\n            $count += 1;\n        }\n        push @result,\
    \ $word if $count == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = split(/\\s+/, $s);\n    my @b = ();\n    for\
    \ my $w (@a) {\n        if ($w =~ /[^aeiou]{$n}/) {\n            push @b, $w;\n\
    \        }\n    }\n    return @b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my $count;\n    for my $word (split(/\\\
    s+/, $s)) {\n        $count = () = $word =~ /[^aeiou]/gi;\n        push @result,\
    \ $word if $count == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @results;\n \
    \   for(@words) {\n        if(count_consonants($_) == $n) {\n            push(@results,\
    \ $_);\n        }\n    }\n    return @results;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmpbiwri95a.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(\" \", $s);\n   \
    \ foreach my $word (@words) {\n        if (num_consonants($word) == $n) {\n  \
    \          push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num_consonants called at /tmp/tmph9z8g_3a.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    my @result;\n    foreach\
    \ (@words) {\n        my $c = count_consonants($_);\n        if ($c == $n) {\n\
    \            push @result, $_;\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmplhul805r.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @temp = split(/\\s+/, $s);\n   \
    \ foreach my $i (@temp) {\n        my $count = 0;\n        while ($i =~ /[bcdfghjklmnpqrstvwxyz]/g)\
    \ {\n            $count++;\n        }\n        if ($count == $n) {\n         \
    \   push @result, $i;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @res;\n    foreach\
    \ my $word (@words) {\n        my $count = vowels_count($word);\n        if ($count\
    \ == $n) {\n            push @res, $word;\n        }\n    }\n    return @res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::vowels_count called at /tmp/tmp5idkwh7n.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    my @words_with_exactly_n_consonants\
    \ = ();\n    foreach my $word (@words) {\n        my $count = count_consonants($word);\n\
    \        if ($count == $n) {\n            push @words_with_exactly_n_consonants,\
    \ $word;\n        }\n    }\n    return @words_with_exactly_n_consonants;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmpzf97hldg.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = grep {\n        my $c = $_;\n        $c\
    \ =~ tr/bcdfghjklmnpqrstvwxyz/bcdfghjklmnpqrstvwxyz/;\n        length($c) == $n\n\
    \    } split /\\s+/, $s;\n    return @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @n_words;\n    foreach\
    \ my $word (@words) {\n        if (consonants($word) == $n) {\n            push\
    \ @n_words, $word;\n        }\n    }\n    return @n_words;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmphzejumd7.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @vowels = qw(a e i o u);\n    my @chars = split //,\
    \ $s;\n    my @words;\n    my $c = $n;\n    my $word = \"\";\n    for my $c (@chars)\
    \ {\n        if ($c eq \" \") {\n            $word and push @words, $word;\n \
    \           $word = \"\";\n            $c = $n;\n        } else {\n          \
    \  $word .= $c;\n            my $vowel = 0;\n            for my $v (@vowels) {\n\
    \                if ($c eq $v) {\n                    $vowel = 1;\n          \
    \          last;\n                }\n            }\n            $c = $n - $vowel;\n\
    \        }\n    }\n    $word and push @words, $word;\n    return [grep { length\
    \ $_ == $n } @words];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @n_con;\n    my\
    \ @letters = split('', $s);\n    my @consonants = grep {! /[aeiouAEIOU ]/} @letters;\n\
    \    for my $word (@words) {\n\tmy @cons = grep {! /[aeiouAEIOU ]/} split('',\
    \ $word);\n\tpush @n_con, $word if scalar @cons == $n;\n    }\n    return @n_con;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @selected_words;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        for (my $i =\
    \ 0; $i < length($word); $i++) {\n            if (is_consonant(substr($word, $i,\
    \ 1))) {\n                $count++;\n            }\n        }\n        if ($count\
    \ == $n) {\n            push(@selected_words, $word);\n        }\n    }\n    return\
    \ @selected_words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_consonant called at /tmp/tmpl8m_rx08.pl
    line 23.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(' ', $s);\n    foreach\
    \ my $word (@words) {\n        my $consonants = count_consonants($word);\n   \
    \     if ($consonants == $n) {\n            push @result, $word;\n        }\n\
    \    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmp3_t2hdh2.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my $final = '';\n    my @res = ();\n    my @words =\
    \ split(\" \", $s);\n    foreach my $word (@words) {\n        my $count = 0;\n\
    \        my @letters = split(\"\", $word);\n        foreach my $letter (@letters)\
    \ {\n            if ($letter =~ /[aeiou]/i) {\n                $count = $count\
    \ + 1;\n            }\n        }\n        my $consonants = scalar(@letters) -\
    \ $count;\n        if ($consonants == $n) {\n            $final = $final . $word\
    \ . \" \";\n        }\n    }\n    @res = split(\" \", $final);\n    return @res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @consonants =\
    \ grep /[^aeiou]/, 'a'..'z';\n    my @selected_words;\n    foreach my $word (@words)\
    \ {\n        my @letters = split //, $word;\n        my @consonant_letters = @letters[grep\
    \ {defined $consonants[$_]} 0..$#letters];\n        if (scalar @consonant_letters\
    \ == $n) {\n            push @selected_words, $word;\n        }\n    }\n    return\
    \ @selected_words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @output = ();\n\
    \    for (@words) {\n        if ($_ =~ /([^aeiou]{$n})/i) {\n            push\
    \ @output, $_;\n        }\n    }\n    return @output;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @s = split /\\s+/, $s;\n    return map { $_ if (y/a-zA-Z//\
    \ - y/aeiouAEIOU//) == $n } @s;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    return [grep { consonants($_)\
    \ == $n } @words];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpmciev0lh.pl line
    20.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my(@r, @w);\n    return @r if($s eq \"\");\n    @w =\
    \ split(' ', $s);\n    while(@w) {\n        my $w = shift @w;\n        my $c =\
    \ 0;\n        my @y = split('', $w);\n        while(@y) {\n            my $x =\
    \ shift @y;\n            if(($x ne 'a') and ($x ne 'e') and ($x ne 'i') and ($x\
    \ ne 'o') and ($x ne 'u')) {\n                $c++;\n            }\n        }\n\
    \        push @r, $w if($c == $n);\n    }\n    return @r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @chars = split('', $s);\n    my @words = ();\n  \
    \  my $curr_word = '';\n    my $n_consonants = 0;\n    my $word_index = 0;\n \
    \   my $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    my $vowels = \"aeiou\";\n\
    \    for(my $i = 0; $i < @chars; $i++) {\n        if($chars[$i] eq ' ') {\n  \
    \          if($n_consonants == $n) {\n                $words[$word_index] = $curr_word;\n\
    \                $word_index++;\n            }\n            $curr_word = '';\n\
    \            $n_consonants = 0;\n        } else {\n            $curr_word .= $chars[$i];\n\
    \            my $found = 0;\n            my $j = 0;\n            while($j < length($consonants)\
    \ && !$found) {\n                if($chars[$i] eq substr($consonants, $j, 1))\
    \ {\n                    $found = 1;\n                }\n                $j++;\n\
    \            }\n            if($found) {\n                $n_consonants++;\n \
    \           }\n        }\n    }\n    if($n_consonants == $n) {\n        $words[$word_index]\
    \ = $curr_word;\n    }\n    return @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @res;\n    for my $w (split /\\s+/, $s) {\n     \
    \   push @res, $w if $w =~ tr/qwrtypsdfghjklzxcvbnm// == $n;\n    }\n    return\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split /\\s+/, $s;\n   \
    \ foreach my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @s;\n    my @v = grep {((() = /([^aeiouAEIOU]*)/g)\
    \ == $n)} split ' ', $s;\n    #print \"@v\\n\";\n    return @v;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @r;\n    my @w = split /\\s+/, $s;\n    foreach my\
    \ $w (@w) {\n        my $c = 0;\n        $c++ while $w =~ /[bcdfghjklmnpqrstvwxyz]/gi;\n\
    \        push @r, $w if $c == $n;\n    }\n    return @r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if $s eq '';\n    my @a = split ' ', $s;\n\
    \    return [grep {scalar(grep {$_ !~ /[aeiou]/} split '', $_) == $n} @a];\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    if ($s eq '') {\n        return @result;\n\
    \    }\n    my @words = split(' ', $s);\n    foreach my $word (@words) {\n   \
    \     my $count = 0;\n        foreach my $c (split('', $word)) {\n           \
    \ if ($c =~ /[aeiouy]/) {\n                next;\n            }\n            $count++;\n\
    \        }\n        if ($count == $n) {\n            push(@result, $word);\n \
    \       }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    @words = grep {\n \
    \       my $temp = $_;\n        $temp =~ s/[aeiouAEIOU]//g;\n        $temp =~\
    \ s/\\s+//g;\n        length($temp) == $n;\n    } @words;\n    return @words;\n\
    }\nmy @result = select_words(\"simple white space\", 2);\nprint @result;\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @match;\n    my @words = split(' ', $s);\n    for\
    \ my $word (@words) {\n        my $consonants = $word =~ tr/bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ//;\n\
    \        if ($consonants == $n) {\n            push @match, $word;\n        }\n\
    \    }\n    return @match;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @consonants = qw(b c d f g h j k l m n p q r s t\
    \ v w x y z);\n    my @words = split(' ', $s);\n    my @result;\n    for (@words)\
    \ {\n        if (my @i = ($_ =~ /[@consonants]/g)) {\n            push @result,\
    \ $_ if @i == $n;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @list = ();\n    foreach (split(/\\s+/, $s)) {\n\
    \        push @list, $_ if (tr/[aeiou]// == $n);\n    }\n    return @list;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    return grep { word_consonants($_)\
    \ == $n } @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::word_consonants called at /tmp/tmp0nvhfl87.pl
    line 20.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @out;\n    foreach\
    \ my $word (@words) {\n        my $count = 0;\n        my @chars = split //, $word;\n\
    \        foreach my $char (@chars) {\n            if ($char =~ /[b-df-hj-np-tv-z]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push @out, $word;\n        }\n    }\n    return @out;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @selected_words;\n\
    \    foreach my $word (@words) {\n        my $num_consonants = () = $word =~ /[bcdfghjklmnpqrstvwxyz]/gi;\n\
    \        if ($num_consonants == $n) {\n            push @selected_words, $word;\n\
    \        }\n    }\n    return @selected_words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @results;\n    foreach my $word (split /\\s+/, $s)\
    \ {\n        if (num_consonants($word) == $n) {\n            push @results, $word;\n\
    \        }\n    }\n    return @results;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num_consonants called at /tmp/tmppv81vyq2.pl
    line 21.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my $f = 0;\n    my @ret;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $s2 = $s;\n    my $s3 = $s;\n    while ($s =~ m/[^AEIOUaeiou ]/g)\
    \ {\n        $i++;\n    }\n    while ($s2 =~ m/[AEIOUaeiou ]/g) {\n        $j++;\n\
    \    }\n    $j = length($s2) - $j;\n    if ($j == $n) {\n        push(@ret, $s3);\n\
    \    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if $s eq '';\n    my @words = split(/ /, $s);\n\
    \    my @results = ();\n    foreach my $word (@words) {\n        my $count = 0;\n\
    \        foreach my $char (split(//, $word)) {\n            $count++ if $char\
    \ =~ /[aeiou]/i;\n        }\n        push(@results, $word) if (length($word) -\
    \ $count) == $n;\n    }\n    return \\@results;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = grep { num_consonants($_) == $n } split(/\
    \ /, $s);\n    return @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num_consonants called at /tmp/tmpw5iw8c4z.pl
    line 19.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @selection;\n   \
    \ foreach my $word (@words) {\n        my $word_n = num_consonants($word);\n \
    \       if ($word_n == $n) {\n            push @selection, $word;\n        }\n\
    \    }\n    return @selection;\n}\nprint select_words(\"Mary had a little lamb\"\
    , 4);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::num_consonants called at /tmp/tmpno5ffy7e.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my(@words, @sounds);\n    @words = split(' ', $s);\n\
    \    foreach my $word (@words) {\n        my $vowels = 0;\n        my $consonants\
    \ = 0;\n        my @characters = split('', $word);\n        foreach my $character\
    \ (@characters) {\n            if ($character =~ /[aeiouy]/i) {\n            \
    \    $vowels++;\n            } else {\n                $consonants++;\n      \
    \      }\n        }\n        if ($consonants == $n) {\n            push(@sounds,\
    \ $word);\n        }\n    }\n    return @sounds;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @matches;\n    if ($s =~ /\\w+/) {\n        for (split(\"\
    \ \", $s)) {\n            if (length($_) == $n) {\n                push @matches,\
    \ $_;\n            }\n        }\n    }\n    return @matches;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @consonants;\n\
    \    my $consonant_count;\n    for my $word (@words) {\n        $consonant_count\
    \ = 0;\n        for my $c (split(//, $word)) {\n            $consonant_count++\
    \ if ($c =~ /[^aeiouAEIOU]/);\n        }\n        push(@consonants, $word) if\
    \ ($consonant_count == $n);\n    }\n    return @consonants;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(/\\s+/, $s);\n  \
    \  foreach my $word (@words) {\n        my $c = $word =~ tr/[^aeiouAEIOU]//;\n\
    \        if ($c == $n) {\n            push @result, $word;\n        }\n    }\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @vowels = qw(a e i o u);\n    my @arr = split /\\\
    s+/, $s;\n    my @result;\n    for my $word (@arr) {\n        my $count = 0;\n\
    \        for my $letter (split //, $word) {\n            $count++ unless grep\
    \ { $letter eq $_ } @vowels;\n        }\n        push @result, $word if $count\
    \ == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @out = ();\n\
    \    for my $word (@words) {\n        next if !$word;\n        my $consonants\
    \ = 0;\n        $consonants++ while $word =~ /([^aeiou]{1})/gi;\n        push\
    \ @out, $word if $consonants == $n;\n    }\n    return @out;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @selected;\n   \
    \ my $constant = qr/[b-df-hj-np-tv-z]/;\n    for my $word (@words) {\n       \
    \ if(length(@{[$word =~ /$constant/g]}) == $n) {\n            push @selected,\
    \ $word;\n        }\n    }\n    return @selected;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @str = split(/ /, $s);\n    foreach\
    \ my $word (@str) {\n        my $c = 0;\n        my @chars = split(//, $word);\n\
    \        foreach my $char (@chars) {\n            $c++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $c == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    $s =~ s/[^A-Za-z ]//g;\n    my @words = split ' ', $s;\n\
    \    my @array;\n    for my $word (@words) {\n        my $vowels = $word =~ tr/[aeiouAEIOU]//;\n\
    \        my $consonants = $word =~ tr/[^aeiouAEIOU]//;\n        if ($consonants\
    \ == $n) {\n            push @array, $word;\n        }\n    }\n    return @array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @matches;\n  \
    \  for my $word (@words) {\n        if (count_consonants($word) == $n) {\n   \
    \         push @matches, $word;\n        }\n    }\n    return @matches;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmpk98bstr3.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    $s =~ s/[^a-z ]//g;\n    my @words = split(\" \", $s);\n\
    \    my @selected_words;\n    foreach my $word (@words) {\n        my $count =\
    \ 0;\n        $word =~ s/[^a-z]//g;\n        foreach my $c (split(\"\", $word))\
    \ {\n            $count++ if $c !~ /[aeiou]/i;\n        }\n        push @selected_words,\
    \ $word if $count == $n;\n    }\n    return @selected_words;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @r;\n    foreach\
    \ my $w (@words) {\n        my $cc = count_consonants($w);\n        if ($cc ==\
    \ $n) {\n            push @r, $w;\n        }\n    }\n    return @r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmp2656_zrk.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @res = ();\n   \
    \ for my $w (@words) {\n        my $cons = 0;\n        for my $c (split('', $w))\
    \ {\n            if ($c !~ /[aeiou]/i) {\n                $cons++;\n         \
    \   }\n        }\n        if ($cons == $n) {\n            push @res, $w;\n   \
    \     }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @ret = ();\n   \
    \ foreach my $word (@words) {\n        my $c = 0;\n        for (my $i = 0; $i\
    \ < length($word); $i++) {\n            $c++ if (is_consonant(substr($word, $i,\
    \ 1)));\n        }\n        push(@ret, $word) if ($c == $n);\n    }\n    return\
    \ @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_consonant called at /tmp/tmplhtczhp1.pl
    line 23.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = split(/\\s+/, $s);\n    my @words;\n    foreach\
    \ my $word (@a) {\n        my $c = 0;\n        foreach my $letter (split(//, $word))\
    \ {\n            $c++ if $letter =~ /[bcdfghjklmnpqrstvwxyz]/i;\n        }\n \
    \       push @words, $word if $c == $n;\n    }\n    return @words;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @ret;\n    for my $word (split /\\s+/, $s) {\n  \
    \      my $count = () = $word =~ /[qwrtpsdfghjklzxcvbnm]/gi;\n        push @ret,\
    \ $word if $count == $n;\n    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my $regex = qr/^([a-z]*[^aeiou]){$n}/i;\n    my @words\
    \ = split /\\s+/, $s;\n    my @result = grep { /$regex/ } @words;\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @a = split /\\s+/, $s;\n    for\
    \ my $w (@a) {\n        my $v = $w;\n        $v =~ s/[aeiou]//g;\n        push\
    \ @result, $w if length($v) == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    my @words = split(' ', $s);\n    foreach\
    \ (@words) {\n        my $word = $_;\n        my $consonants = 0;\n        foreach\
    \ (split('', $word)) {\n            if (is_consonant($_)) {\n                $consonants++;\n\
    \            }\n        }\n        if ($consonants == $n) {\n            push(@result,\
    \ $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_consonant called at /tmp/tmpgqitveld.pl
    line 25.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @consonants = qw/b\
    \ c d f g h j k l m n p q r s t v w x y z/;\n    my @result;\n    foreach (@words)\
    \ {\n        my $count = 0;\n        map { $count++ if /$_/i } @consonants;\n\
    \        push @result, $_ if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @results;\n \
    \   for(@words) {\n        my $c = get_consonants($_);\n        push @results,\
    \ $_ if $c == $n;\n    }\n    return @results;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_consonants called at /tmp/tmpnby594mr.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = split(' ', $s);\n    my @b = ();\n    for (my\
    \ $i = 0; $i < @a; $i++) {\n        my $w = $a[$i];\n        my $count = 0;\n\
    \        for (my $j = 0; $j < length($w); $j++) {\n            my $c = substr($w,\
    \ $j, 1);\n            if ($c =~ /[^aeiou]/) {\n                $count++;\n  \
    \          }\n        }\n        if ($count == $n) {\n            push(@b, $w);\n\
    \        }\n    }\n    return @b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    my @consonants;\n  \
    \  foreach my $word (@words) {\n        if (consonants($word) == $n) {\n     \
    \       push @consonants, $word;\n        }\n    }\n    return @consonants;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpg0ougqw1.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @result;\n    $s =~ s/[aeiouAEIOU]//g;\n    my @words\
    \ = split(/ /, $s);\n    foreach my $w (@words) {\n        my $consonants = length($w);\n\
    \        if ($consonants == $n) {\n            push(@result, $w);\n        }\n\
    \    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @s = split /\\s+/, $s;\n    my @words;\n    foreach\
    \ my $word (@s) {\n        if (consonants($word) == $n) {\n            push @words,\
    \ $word;\n        }\n    }\n    return @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmpmlzdf696.pl line
    22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = split(/\\s+/, $s);\n    my @result = ();\n \
    \   foreach my $x (@a) {\n        my $consonants = 0;\n        while ($x =~ /[^aeiou]/g)\
    \ { $consonants++; }\n        if ($consonants == $n) { push(@result, $x); }\n\
    \    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    $s =~ s/[^A-Za-z ]+//g;\n    my @s = split(/\\s+/, $s);\n\
    \    my @t = grep { nConsonants($_) == $n } @s;\n    return @t;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::nConsonants called at /tmp/tmpi9ia6x2c.pl line
    21.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @ret = ();\n    my @words = split(/\\s+/, $s);\n\
    \    my $consonants = join('', ('b'..'d', 'f'..'h', 'j'..'n', 'p'..'t', 'v'..'z'));\n\
    \    foreach (@words) {\n        my $count = 0;\n        foreach (split //, $_)\
    \ {\n            $count++ if index($consonants, $_) != -1;\n        }\n      \
    \  push @ret, $_ if $count == $n;\n    }\n    return @ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @ret;\n    my @words = split ' ', $s;\n    my $regex\
    \ = create_regex($n);\n    for my $word (@words) {\n        push @ret, $word if\
    \ $word =~ $regex;\n    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::create_regex called at /tmp/tmpzae5rvzc.pl
    line 21.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @consonants =\
    \ map {$_ =~ s/[aeiou]//g; $_} @words;\n    my @results = ();\n    for my $i (0..$#words)\
    \ {\n        push @results, $words[$i] if (length($consonants[$i]) == $n);\n \
    \   }\n    return @results;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    return [] if !$s;\n    return [] if $n < 0;\n    my\
    \ $r = [grep {scalar(grep {$_ =~ /[bcdfghjklmnpqrstvwxyz]/i} split(//, $_)) ==\
    \ $n} split(/\\s+/, $s)];\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n   \
    \ for my $word (@words) {\n        push @result, $word if count_consonants($word)\
    \ == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_consonants called at /tmp/tmpo59ppf_r.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @a = ();\n    foreach my $e (split / /, $s) {\n \
    \       my $c = _count_consonants($e);\n        push @a, $e if $c == $n;\n   \
    \ }\n    return @a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::_count_consonants called at /tmp/tmp5fwg0vd8.pl
    line 21.

    '
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my @words = split ' ', $s;\n    my @ret = ();\n    foreach\
    \ (@words) {\n        my $len = $_ =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n        push\
    \ @ret, $_ if ($len == $n);\n    }\n    return @ret;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my($s, $n) = @_;\n    my $n_vowels = $n == 0 ? 4 : 0;\n    my @words = $s\
    \ =~ /\\b\\w+\\b/g;\n    return grep { $_ =~ tr/qwrtypsdfghjklzxcvbnm// - $_ =~\
    \ tr/aeiou// == $n } @words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004057
