name: HumanEval_97_multiply
language: pl
prompt: "# Complete the function that takes two integers and returns \n# the product\
  \ of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>>\
  \ multiply(148, 412)\n# 16\n# >>> multiply(19, 28)\n# 72\n# >>> multiply(2020, 1851)\n\
  # 0\n# >>> multiply(14, -15)\n# 20\nsub multiply {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply;\n\
  \        if(eq_deeply($candidate->(148, 412),16)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 28),72)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2020,\
  \ 1851),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(14, -15),20)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->(76, 67),42)) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17,\
  \ 27),49)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(0, 1),0)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(0, 0),0)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return sprintf(\"%d\", abs($a) % 10 * abs($b) % 10);\n}", "   \
    \ return 0 if($a == 0 || $b == 0);\n    return ($a % 10) * ($b % 10);\n}", " \
    \   my $c = $a * $b;\n    $c =~ s/\\d*(\\d).*/$1/;\n    return $c;\n}", "    ($a,\
    \ $b) = ($a < 0 ? -$a : $a, $b < 0 ? -$b : $b);\n    return ($a % 10) * ($b %\
    \ 10);\n}", "    my $product = ($a % 10) * ($b % 10);\n    return $product;\n}",
  "    $a =~ s/\\D//g;\n    $b =~ s/\\D//g;\n    return ($a * $b) % 10;\n}", "   \
    \ my $x = $a < 0 ? -$a : $a;\n    my $y = $b < 0 ? -$b : $b;\n    return ($x%10)*($y%10);\n\
    }", "    $a %= 10;\n    $b %= 10;\n    return $a * $b;\n}", "    $a = abs($a);\n\
    \    $b = abs($b);\n    return ($a%10) * ($b%10);\n}", "    my($unit1, $unit2);\n\
    \    ($unit1, $unit2) = ($a % 10, $b % 10);\n    return $unit1 * $unit2;\n}",
  "    my $prod = $a * $b;\n    return $prod % 10;\n}", "    my $absa = abs($a);\n\
    \    my $absb = abs($b);\n    return (($absa % 10) * ($absb % 10));\n}", "   \
    \ # write your code here\n    my @a = split('', $a);\n    my @b = split('', $b);\n\
    \    my $result = $a[-1] * $b[-1];\n    return $result;\n}", "    return abs($a)\
    \ % 10 * abs($b) % 10;\n}", "    $a = abs($a);\n    $b = abs($b);\n    $a %= 10;\n\
    \    $b %= 10;\n    return $a * $b;\n}", "    return ((abs($a) % 10) * (abs($b)\
    \ % 10));\n}", "    return abs($a)%10 * abs($b)%10;\n}", "    return abs($a)%10\
    \ * abs($b)%10;\n}\n1;", "    return abs($a % 10) * abs($b % 10);\n}", "    return\
    \ ($a * $b) % 10;\n}", "    return (abs($a) % 10) * (abs($b) % 10);\n}", "   \
    \ return abs( ($a % 10) * ($b % 10) );\n}", "    return abs($a * $b) % 10;\n}",
  "    return abs($a) % 10 * abs($b) % 10;\n}", "    return abs($a % 10) * abs($b\
    \ % 10);\n}", "    return $a % 10 * $b % 10;\n}", "    my @digits;\n    for ($a,\
    \ $b) {\n        $_ = abs($_);\n        push @digits, $_ % 10;\n    }\n    return\
    \ $digits[0] * $digits[1];\n}", "    $a =~ s/^-?\\d+//;\n    $b =~ s/^-?\\d+//;\n\
    \    return $a * $b;\n}", "    my $result = 0;\n    $result = ($a % 10) * ($b\
    \ % 10);\n    return $result;\n}", "    return (abs($a) % 10) * (abs($b) % 10);\n\
    }", "    return  abs($a)%10 * abs($b)%10;\n}", "    my @a = split //, $a;\n  \
    \  my @b = split //, $b;\n    my $tmp = 0;\n    my $result = 0;\n    foreach (@a)\
    \ {\n        $tmp = $b[-1] * $_;\n        if ($tmp > 10) {\n            $result\
    \ += $tmp % 10;\n        } else {\n            $result += $tmp;\n        }\n \
    \   }\n    return $result;\n}", "    return ($a % 10) * ($b % 10);\n}", "    my\
    \ $product = abs($a) * abs($b);\n    return substr($product, -1);\n}", "    my\
    \ @digits = split //, $a.$b;\n    my $prod = 1;\n    foreach my $digit (@digits)\
    \ {\n        $prod *= $digit;\n    }\n    return $prod % 10;\n}", "    return\
    \ abs($a % 10) * abs($b % 10);\n}", "    my $product = ($a % 10) * ($b % 10);\n\
    \    return $product;\n}", "    my $result = 0;\n    $result = abs($a % 10) *\
    \ abs($b % 10);\n    return $result;\n}", "    return 0 if $a == 0 || $b == 0;\n\
    \    return (abs($a) % 10) * (abs($b) % 10);\n}", "    my($c, $d) = @_;\n    $a\
    \ =~ s/\\d+\\z//;\n    $b =~ s/\\d+\\z//;\n    $c =~ s/\\A\\d+//;\n    $d =~ s/\\\
    A\\d+//;\n    $a * $b * $c * $d;\n}", "    my $c = $a*$b;\n    $c =~ /\\d$/;\n\
    \    $c\n}", "    my $p = $a * $b;\n    while (length $p > 1) {\n        $p =~\
    \ s/(\\d)(\\d+)/$1/;\n    }\n    return $p;\n}", "    return $a % 10 * $b % 10;\n\
    }", "    if ($a < 0) {\n        $a = abs($a);\n    }\n    if ($b < 0) {\n    \
    \    $b = abs($b);\n    }\n    return ($a % 10) * ($b % 10);\n}", "    # print\
    \ $a%10 * $b%10;\n    $a = abs($a);\n    $b = abs($b);\n    print $a%10 * $b%10;\n\
    \    # $a%10 * $b%10;\n}", "    return -1 if !defined $a or !defined $b;\n   \
    \ return -1 if $a == 0 or $b == 0;\n    $a = abs($a);\n    $b = abs($b);\n   \
    \ return ($a % 10) * ($b % 10);\n}", "    return abs($a) % 10 * abs($b) % 10;\n\
    }", "    $a = abs($a);\n    $b = abs($b);\n    $a %= 10;\n    $b %= 10;\n    return\
    \ $a * $b;\n}", "    return ($a*$b)%10;\n}", "    return ($a%10) * ($b%10);\n}",
  "    return 0 if $a == 0 || $b == 0;\n    return ($a % 10) * ($b % 10);\n}", " \
    \   $a %= 10;\n    $b %= 10;\n    return $a * $b;\n}", "    return undef unless\
    \ defined $a and defined $b;\n    $a = abs $a;\n    $b = abs $b;\n    return (\
    \ $a % 10 ) * ( $b % 10 );\n}", "    # My solution\n    my $result = ($a % 10)\
    \ * ($b % 10);\n    return $result;\n}", "    my($unit_a, $unit_b);\n    if($a\
    \ < 0) {\n        $unit_a = -1 * $a % 10;\n    } else {\n        $unit_a = $a\
    \ % 10;\n    }\n    if($b < 0) {\n        $unit_b = -1 * $b % 10;\n    } else\
    \ {\n        $unit_b = $b % 10;\n    }\n    return $unit_a * $unit_b;\n}", " \
    \   return abs(($a % 10) * ($b % 10));\n}", "    return abs($a)%10 * abs($b)%10;\n\
    }", "    my $result = abs($a) * abs($b);\n    my $str = reverse(sprintf(\"%d\"\
    , $result));\n    substr($str, 0, 1);\n}", "    return ($a % 10) * ($b % 10);\n\
    }", "    return $a * $b - int($a/10) * int($b/10) * 100;\n}", "    my $unita =\
    \ $a % 10;\n    my $unitb = $b % 10;\n    return $unita * $unitb;\n}", "    return\
    \ ($a * $b) % 10;\n}", "    # Good Luck!\n    my @unit_digits = (0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9);\n    my $x = abs $a % 10;\n    my $y = abs $b % 10;\n    return\
    \ $unit_digits[$x] * $unit_digits[$y];\n}", "    return $a % 10 * $b % 10;\n}",
  "    return ($a%10) * ($b%10);\n}", "    return abs($a) % 10 * abs($b) % 10;\n}",
  "    my $product = ((abs($a)%10) * (abs($b)%10));\n    return $product;\n}", " \
    \   my $p = $a * $b;\n    while ($p > 10) {\n        $p = ($p % 10) * ($p / 10);\n\
    \    }\n    return $p;\n}", "    my $x = $a < 0 ? -$a : $a;\n    my $y = $b <\
    \ 0 ? -$b : $b;\n    return ($x % 10) * ($y % 10);\n}", "    my $a_last = int(\
    \ abs($a) % 10 );\n    my $b_last = int( abs($b) % 10 );\n    return $a_last *\
    \ $b_last;\n}", "    ($a, $b) = (abs($a), abs($b));\n    $a =~ /(\\d)$/;\n   \
    \ $b =~ /(\\d)$/;\n    return $1 * $2;\n}", "    return abs($a % 10) * abs($b\
    \ % 10);\n}", "    my $r = abs($a) % 10 * abs($b) % 10;\n    return ($a > 0 &&\
    \ $b > 0 || $a < 0 && $b < 0) ? $r : -$r;\n}", "    my $c = $a * $b;\n    my $unit\
    \ = $c % 10;\n    return $unit;\n}", "    return 0 if $a == 0 || $b == 0;\n  \
    \  return 1 if $a == 1 || $b == 1;\n    my @p = split '', ($a * $b);\n    return\
    \ $p[-1];\n}", "    return ((abs($a) % 10) * (abs($b) % 10));\n}", "    return\
    \ abs($a) % 10 * abs($b) % 10;\n}", "    my $result = (abs($a) % 10) * (abs($b)\
    \ % 10);\n    return $result;\n}", "    return (abs($a)%10) * (abs($b)%10);\n}",
  "    return ( (abs($a) % 10) * (abs($b) % 10) );\n}", "    my $p = $a * $b;\n  \
    \  while ($p > 9) {\n        $p = int($p / 10);\n    }\n    return $p;\n}", " \
    \   my $c = $a * $b;\n    my $s = substr($c, -1);\n    return $s;\n}", "    my\
    \ @a = split(//, $a);\n    my @b = split(//, $b);\n    return abs($a[-1] * $b[-1]);\n\
    }", "    return abs($a) % 10 * abs($b) % 10;\n}", "    return $a % 10 * $b % 10;\n\
    }", "    my @digits = split //, $_[0];\n    my @digits2 = split //, $_[1];\n \
    \   return abs($digits[-1] * $digits2[-1]);\n}", "    abs($a % 10) * abs($b %\
    \ 10);\n}", "    $a = abs($a);\n    $b = abs($b);\n    return ($a % 10) * ($b\
    \ % 10);\n}", "    my $temp = $a * $b;\n    $temp =~ s/\\D//g;\n    return $temp;\n\
    }", "    $a =~ /(\\d)$/;\n    my $a_unit = $1;\n    $b =~ /(\\d)$/;\n    my $b_unit\
    \ = $1;\n    return $a_unit * $b_unit;\n}", "    return abs($a) % 10 * abs($b)\
    \ % 10;\n}", "    return 0 if !$a && !$b;\n    $a = abs($a);\n    $b = abs($b);\n\
    \    return $a % 10 * $b % 10;\n}", "    return 0 if !$a or !$b;\n    ($a, $b)\
    \ = ($a < 0 ? -$a : $a, $b < 0 ? -$b : $b);\n    my $p = 1;\n    while($a and\
    \ $b) {\n        $p *= $a % 10 * $b % 10;\n        $a /= 10;\n        $b /= 10;\n\
    \    }\n    return $p;\n}", "    $a = abs($a);\n    $b = abs($b);\n    $a =~ /(\\\
    d)$/;\n    $a = $1;\n    $b =~ /(\\d)$/;\n    $b = $1;\n    $a * $b;\n}", "  \
    \  return $a % 10 * $b % 10;\n}", "    return (abs($a) % 10) * (abs($b) % 10);\n\
    }", "    ($a, $b) = ($b, $a) if $a < $b;\n    my $c = $a % 10;\n    my $d = $b\
    \ % 10;\n    $c * $d;\n}", "    return abs($a % 10) * abs($b % 10);\n}", "   \
    \ ($a, $b) = ($b, $a) if $a > $b;\n    return $a * ($b % 10);\n}", "    return\
    \  abs($a) % 10 * abs($b) % 10;\n}", "    $a = abs($a);\n    $b = abs($b);\n \
    \   return ($a * $b) % 10;\n}", "    return abs($a % 10) * abs($b % 10);\n}",
  "    my $product = abs($a * $b);\n    return $product % 10;\n}", "    return $a\
    \ * $b % 10;\n}", "    return abs($a % 10) * abs($b % 10);\n}", "    return abs($a)\
    \ % 10 * abs($b) % 10;\n}", "    my($n, $m) = ($a % 10, $b % 10);\n    return\
    \ $n * $m;\n}", "    return ($a * $b) % 10;\n}", "    my $product = ($a % 10)\
    \ * ($b % 10);\n    return $product;\n}", "    # your code here...\n}", "    return\
    \ ($a % 10) * ($b % 10);\n}", "    $a = abs($a);\n    $b = abs($b);\n    return\
    \ $a % 10 * $b % 10;\n}", "    my @a = split(//, $a);\n    my @b = split(//, $b);\n\
    \    my $x = abs($a[-1]);\n    my $y = abs($b[-1]);\n    return ($x * $y);\n}",
  "    return 0 unless $a && $b;\n    $a = $a % 10;\n    $b = $b % 10;\n    return\
    \ $a * $b;\n}", "    $a = abs($a) % 10;\n    $b = abs($b) % 10;\n    return $a\
    \ * $b;\n}", "    $a = abs($a);\n    $b = abs($b);\n    return ($a % 10) * ($b\
    \ % 10);\n}", "    return abs($a % 10) * abs($b % 10);\n}", "    $a =~ /^(.).*$/;\n\
    \    my $a_unit = $1;\n    $b =~ /^(.).*$/;\n    my $b_unit = $1;\n    return\
    \ $a_unit * $b_unit;\n}", "    return (abs($a) % 10) * (abs($b) % 10);\n}", " \
    \   return ($a * $b) % 10;\n}", "    return abs($a) % 10 * abs($b) % 10;\n}",
  "    return ($a * $b) % 10;\n}", "    my $c = $a * $b;\n    return $c%10;\n}", " \
    \   my $r = $a * $b;\n    while ($r > 9) {\n        $r = reduce($r);\n    }\n\
    \    return $r;\n}", "    return ($a * $b) % 10;\n}", "    my $product = $a *\
    \ $b;\n    my @digits = split('', $product);\n    my $product_unit_digit = $digits[-1];\n\
    \    return $product_unit_digit;\n}", "    my $x = ($a < 0) ? $a * -1 : $a;\n\
    \    my $y = ($b < 0) ? $b * -1 : $b;\n    return ($x * $y) % 10;\n}", "    return\
    \ abs($a) % 10 * abs($b) % 10;\n}", "    return ($a % 10) * ($b % 10);\n}", " \
    \   return (abs($a) % 10) * (abs($b) % 10);\n}", "    return abs($a)%10 * abs($b)%10;\n\
    }", "    $a %= 10;\n    $b %= 10;\n    return $a * $b;\n}", "    return (abs $a\
    \ % 10) * (abs $b % 10);\n}", "    return 0 if $a == 0 || $b == 0;\n    return\
    \ $a * $b % 10;\n}\nsay multiply(148, 412);\nsay multiply(19, 28);\nsay multiply(2020,\
    \ 1851);\nsay multiply(14, -15);", "    my $c = $a * $b;\n    $c =~ s/\\D+//g;\n\
    \    return $c;\n}", "    my $n = $a * $b;\n    while ($n > 9) {\n        $n =~\
    \ s/0+$//;\n        $n =~ s/^0+//;\n        my @digits = split //, $n;\n     \
    \   $n = $digits[0];\n        for my $digit (@digits[1..$#digits]) {\n       \
    \     $n *= $digit;\n        }\n    }\n    return $n;\n}", "    $a = abs($a);\n\
    \    $b = abs($b);\n    $a %= 10;\n    $b %= 10;\n    return $a * $b;\n}", " \
    \   my @a = split //,$a;\n    my @b = split //,$b;\n    my $p = $a[$#a] * $b[$#b];\n\
    \    return ($p % 10);\n}", "    my($p) = abs($a * $b);\n    return $p % 10;\n\
    }", "    return abs($a) % 10 * abs($b) % 10;\n}\nsay multiply(148, 412); # 16\n\
    say multiply(19, 28); # 72\nsay multiply(2020, 1851); # 0\nsay multiply(14, -15);\
    \ # 20", "    my $ans = ($a * $b) % 10;\n    return $ans;\n}", "    return 0 if\
    \ ($a == 0 || $b == 0);\n    my $t = $a*$b % 10;\n    $t;\n}", "    return abs($a\
    \ % 10) * abs($b % 10);\n}", "    my $ans = ($a % 10) * ($b % 10);\n    return\
    \ $ans;\n}", "    return ($a * $b) % 10;\n}\nprint multiply(148, 412), \"\\n\"\
    ;\nprint multiply(19, 28), \"\\n\";\nprint multiply(2020, 1851), \"\\n\";\nprint\
    \ multiply(14, -15), \"\\n\";", "    my @n = ($a, $b);\n    for my $n (@n) {\n\
    \        if ($n < 0) {\n            $n = abs($n);\n        }\n        $n = abs($n\
    \ % 10);\n    }\n    return $n[0] * $n[1];\n}", "    return ($a % 10) * ($b %\
    \ 10);\n}", "    return abs($a % 10) * abs($b % 10);\n}", "    return (abs($a)\
    \ % 10) * (abs($b) % 10);\n}", "    return ($a % 10) * ($b % 10);\n}", "    my\
    \ $r = ($a % 10) * ($b % 10);\n    return $r;\n}", "    $a = abs($a);\n    $b\
    \ = abs($b);\n    ($a % 10) * ($b % 10);\n}", "    my $u = abs($a) % 10;\n   \
    \ my $v = abs($b) % 10;\n    return $u * $v;\n}", "    $a %= 10;\n    $b %= 10;\n\
    \    return $a * $b;\n}", "    $a = abs($a);\n    $b = abs($b);\n    while($a\
    \ > 10){\n        $a = int($a / 10);\n    }\n    while($b > 10){\n        $b =\
    \ int($b / 10);\n    }\n    return $a * $b;\n}", "    return abs($a % 10) * abs($b\
    \ % 10);\n}", "    my @a = split //, $a;\n    my @b = split //, $b;\n    my $a_unit\
    \ = $a[-1];\n    my $b_unit = $b[-1];\n    return $a_unit * $b_unit;\n}", "  \
    \  my($total) = int($a % 10) * int($b % 10);\n    return $total;\n}", "    my\
    \ $o;\n    if ($a == 0 || $b == 0) {\n        $o = 0;\n    } else {\n        $o\
    \ = $a % 10 * $b % 10;\n    }\n    return $o;\n}", "    $a = abs($a);\n    $b\
    \ = abs($b);\n    my $prod = $a % 10 * $b % 10;\n    return $prod;\n}", "    return\
    \ ($a % 10) * ($b % 10);\n}", "    return ($a % 10) * ($b % 10);\n}", "    $a\
    \ =~ s/.*([0-9]).*/$1/;\n    $b =~ s/.*([0-9]).*/$1/;\n    return $a * $b;\n}",
  "    my $c = $a % 10;\n    my $d = $b % 10;\n    return $c * $d;\n}", "    return\
    \ abs($a)%10 * abs($b)%10;\n}", "    return ($a % 10) * ($b % 10);\n}\nprint multiply(148,\
    \ 412);", "    return abs($a) % 10 * abs($b) % 10;\n}", "    $a = abs($a);\n \
    \   $b = abs($b);\n    my $c = $a % 10;\n    my $d = $b % 10;\n    return $c *\
    \ $d;\n}", "    $a %= 10;\n    $b %= 10;\n    return $a * $b;\n}", "    return\
    \ ($a * $b) % 10;\n}", "    return abs($a%10) * abs($b%10);\n}", "    return abs($a\
    \ % 10) * abs($b % 10);\n}", "    my $ab = $a * $b;\n    $ab =~ /^\\d*(.)$/;\n\
    \    return $1;\n}", "    $a =~ /(\\d)$/;\n    my $u_a = $1;\n    $b =~ /(\\d)$/;\n\
    \    my $u_b = $1;\n    return $u_a * $u_b;\n}", "    return ($a % 10) * ($b %\
    \ 10);\n}", "    $a = abs($a);\n    $b = abs($b);\n    return ($a%10) * ($b%10);\n\
    }", "    return ($a % 10) * ($b % 10);\n}", "    return ($a * $b) % 10;\n}", " \
    \   return abs($a % 10) * abs($b % 10);\n}", "    return abs($a % 10) * abs($b\
    \ % 10);\n}", "    return abs($a % 10) * abs($b % 10);\n}", "    my($p, $q) =\
    \ ($a % 10, $b % 10);\n    return $p * $q;\n}", "    return abs($a)%10 * abs($b)%10;\n\
    }", "    return ($a%10) * ($b%10);\n}", "    $a = abs($a);\n    $b = abs($b);\n\
    \    return ($a * $b) % 10;\n}", "    return ($a % 10) * ($b % 10);\n}", "   \
    \ my($aa, $bb) = (abs($a), abs($b));\n    my $product = ($aa * $bb) % 10;\n  \
    \  return ($product * ($a < 0 || $b < 0 ? -1 : 1));\n}", "    my @ar = map { abs($_)\
    \ % 10 } ($a, $b);\n    return $ar[0] * $ar[1];\n}", "    return abs(($a % 10)\
    \ * ($b % 10));\n}", "    return (abs($a) % 10) * (abs($b) % 10);\n}", "    return\
    \ abs($a) % 10 * abs($b) % 10;\n}", "    return (($a % 10) * ($b % 10));\n}",
  "    $a =~ s/\\D+//g;\n    $b =~ s/\\D+//g;\n    return ($a * $b) % 10;\n}", " \
    \   my @a = split '', abs($a);\n    my @b = split '', abs($b);\n    my $product\
    \ = $a[-1] * $b[-1];\n    return $product;\n}", "    my($unit_a, $unit_b) = ($a\
    \ % 10, $b % 10);\n    $unit_a * $unit_b;\n}", "    my $c = $a * $b;\n    my @digits\
    \ = split(//, abs($c));\n    return $digits[-1];\n}", "    my $a1 = abs($a % 10);\n\
    \    my $b1 = abs($b % 10);\n    return $a1 * $b1;\n}", "    return abs($a) %\
    \ 10 * abs($b) % 10;\n}", "    return abs($a % 10) * abs($b % 10);\n}", "    return\
    \ unless $a =~ /^-?\\d+$/ && $b =~ /^-?\\d+$/;\n    $a = abs($a);\n    $b = abs($b);\n\
    \    return ($a % 10) * ($b % 10);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
