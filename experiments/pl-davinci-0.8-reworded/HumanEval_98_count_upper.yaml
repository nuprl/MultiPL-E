name: HumanEval_98_count_upper
language: pl
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# >>> count_upper(\"aBCdEf\")\n# 1\n# >>> count_upper(\"abcdefg\"\
  )\n# 0\n# >>> count_upper(\"dBBE\")\n# 0\nsub count_upper {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_upper;\n\
  \        if(eq_deeply($candidate->(\"aBCdEf\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdefg\"),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dBBE\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"B\"),0)) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"U\"),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  EEEE\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n\
    \        if ($s =~ /[AEIOU]/i) {\n            $count++;\n        }\n    }\n  \
    \  return $count;\n}", "    my $count = 0;\n    # Your code here\n    return $count;\n\
    }", "    my $count = 0;\n    my @vowels = (\"A\", \"E\", \"I\", \"O\", \"U\");\n\
    \    # @s = split(//, $s);\n    for (my $i = 0; $i < length($s); $i++) {\n   \
    \     if ($i % 2 == 0) {\n            for my $vowel (@vowels) {\n            \
    \    if (substr($s, $i, 1) eq $vowel) {\n                    $count++;\n     \
    \           }\n            }\n        }\n    }\n    return $count;\n}", "    #\n\
    \    # 1. Get each character from the string and put it in an array.\n    #\n\
    \    my @chars = split //, $s;\n    #\n    # 2. Set up count for number of uppercase\
    \ vowels in even indices.\n    #\n    my $even_upper_vowel_count = 0;\n    #\n\
    \    # 3. Go through all the characters.\n    #\n    foreach my $char (@chars)\
    \ {\n        #\n        # 3.1. Check if the character is uppercase vowel and is\
    \ at even index.\n        #\n        if( $char =~ /[AEIOU]/ && $char ne uc($char)\
    \ ) {\n            #\n            # 3.1.1. Increase the count by 1.\n        \
    \    #\n            $even_upper_vowel_count++;\n        }\n    }\n    #\n    #\
    \ 4. Return the count.\n    #\n    return $even_upper_vowel_count;\n}", "    $s\
    \ =~ s/[aeiou]/1/gi;\n    my $c = $s =~ s/^[^1]*[1]/ /g;\n    $c += $s =~ s/[1][^1]*[1]/\
    \ /g;\n    $c;\n}", "    my $c = 0;\n    for (my $i = 0; $i < length($s); $i +=\
    \ 2) {\n        if ($s =~ /^A|E|I|O|U/i) {\n            $c++;\n        }\n   \
    \ }\n    return $c;\n}", "    my @l = split(//, $s);\n    my $counter = 0;\n \
    \   for my $i (0..@l-1) {\n        if ($i % 2 == 0 && $l[$i] =~ /[AEIOU]/) {\n\
    \            $counter++;\n        }\n    }\n    return $counter;\n}", "    return\
    \ scalar(grep { is_upper_vowel($_) } even_indexes($s));\n}", "    my $i = 0;\n\
    \    my $count = 0;\n    while($i < length($s)) {\n        if (uc(substr($s, $i,\
    \ 1)) eq substr($s, $i, 1) && $i % 2 == 0) {\n            $count++;\n        }\n\
    \        $i++;\n    }\n    return $count;\n}", "    my $count = 0;\n    for(my\
    \ $i = 0; $i < length($s); $i+=2) {\n        if(uc(substr($s, $i, 1)) eq substr($s,\
    \ $i, 1)) {\n            $count++;\n        }\n    }\n    return $count;\n}",
  "    # ...\n}", "    my $result = 0;\n    # Replace \"for my $ch...\" with a for\
    \ loop\n    my $ch = substr($s,0,1);\n    for(my $i = 0; $i<length($s); $i++)\
    \ {\n        if (is_upper($ch) && is_vowel($ch) && is_even($i)) {\n          \
    \  $result++;\n        }\n        $ch = substr($s,$i+1,1);\n    }\n    # end of\
    \ replacement\n    return $result;\n}", "    my $count = 0;\n    for (my $i =\
    \ 0; $i < length($s); $i += 2) {\n        if (uc(substr($s, $i, 1)) =~ /[AEIOU]/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n        my $ch =\
    \ substr($s, $i, 1);\n        $count++ if $ch =~ /[AEIOU]/ && $i % 2 == 0;\n \
    \   }\n    return $count;\n}", "    # YOUR CODE HERE\n    # return 0 if you don't\
    \ like this string\n    my $count = 0;\n    for(my $i = 0; $i < length($s); $i++)\
    \ {\n        my $letter = substr($s, $i, 1);\n        $count++ if uc($letter)\
    \ eq $letter && ($i % 2 == 0);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for (my $i = 0; $i < length($s); $i+=2) {\n        my $c = substr($s,\
    \ $i, 1);\n        if ($c =~ /[AEIOU]/) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i <\
    \ length($s); $i += 2) {\n        if (uc(substr($s, $i, 1)) =~ /[AEIOU]/) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    # Complete\
    \ this function\n    my $c = 0;\n    my @s = split //, $s;\n    for (my $i = 0;\
    \ $i < @s; $i++) {\n        $c++ if ($i % 2 == 0 and $s[$i] =~ /[AEIOU]/);\n \
    \   }\n    return $c;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        my $char = substr($s, $i, 1);\n        if ($char =~ /[AEIOU]/\
    \ && $i % 2 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $counter = 0;\n    my @chars = split(//, $s);\n    foreach my $i (0..$#chars)\
    \ {\n        if($i % 2 == 0) {\n            if($chars[$i] =~ /[AEIOU]/) {\n  \
    \              $counter++;\n            }\n        }\n    }\n    return $counter;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n      \
    \  if ($i % 2 == 0 && $s[$i] =~ /[AEIOU]/) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my $result = 0;\n    for(my $i = 0; $i <\
    \ length($s); $i+=2) {\n        my $char = substr($s, $i, 1);\n        if ($char\
    \ =~ /[AEIOU]/) {\n            $result++;\n        }\n    }\n    return $result;\n\
    }", "    my $cnt = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n     \
    \   my $ch = substr($s, $i, 1);\n        $cnt++ if $ch =~ /[AEIOU]/;\n    }\n\
    \    return $cnt;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        if ($i % 2 == 0 && is_upper(substr($s, $i, 1))) {\n       \
    \     $count++;\n        }\n    }\n    return $count;\n}", "    my $length = length($s);\n\
    \    my $count = 0;\n    for (my $i = 0; $i < $length; $i += 2) {\n        my\
    \ $c = substr($s, $i, 1);\n        if ($c =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my @chars = split(//, $s);\n \
    \   my $count = 0;\n    for(my $i = 0; $i < @chars; $i++) {\n        if(($i %\
    \ 2 == 0) && ($chars[$i] =~ /[AEIOU]/)) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my @l = split(//, $s);\n\
    \    my $i = 0;\n    while ($i < scalar(@l)) {\n        if ($l[$i] =~ /[AEIOU]/\
    \ && $i % 2 == 0) {\n            $count++;\n        }\n        $i++;\n    }\n\
    \    return $count;\n}", "    $s = uc($s);\n    my @a = split('', $s);\n    my\
    \ $c = 0;\n    for my $i (0..scalar(@a)) {\n        if ($i % 2 == 0) {\n     \
    \       $c++ if ($a[$i] eq 'A' || $a[$i] eq 'E' || $a[$i] eq 'I' || $a[$i] eq\
    \ 'O' || $a[$i] eq 'U');\n        }\n    }\n    return $c;\n}", "    my $x = 0;\n\
    \    my $i = 0;\n    my @vowels = split('', 'AEIOU');\n    my %vowels = map {\
    \ $_ => 1 } @vowels;\n    while ($i < length($s)) {\n        my $c = substr($s,\
    \ $i, 1);\n        if ($vowels{$c}) {\n            if ($i % 2 == 0) {\n      \
    \          $x++;\n            }\n        }\n        $i++;\n    }\n    return $x;\n\
    }", "    # iterate over each character in string\n    my $count = 0;\n    my $len\
    \ = length($s);\n    for (my $i = 0; $i < $len; $i++) {\n        # print the character\n\
    \        my $c = substr($s, $i, 1);\n        if ($c =~ /[AEIOU]/ && $i % 2 ==\
    \ 0) {\n            $count++;\n        }\n    }\n    return $count;\n}", "   \
    \ my $c = 0;\n    my @letters = split //, $s;\n    for (my $i = 0; $i < scalar\
    \ @letters; $i++) {\n        if ($i % 2 == 0) {\n            if ($letters[$i]\
    \ =~ /[A,E,I,O,U]/) {\n                $c++;\n            }\n        }\n    }\n\
    \    return $c;\n}", "    my $count = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        if(substr($s, $i, 1) =~ /[AEIOU]/ and $i % 2 == 0) {\n    \
    \        $count++;\n        }\n    }\n    return $count;\n}", "    my $c = 0;\n\
    \    for (my $i = 0; $i < length($s); $i += 2) {\n        my $ch = substr($s,\
    \ $i, 1);\n        if (isupper($ch)) {\n            $c++;\n        }\n    }\n\
    \    return $c;\n}", "    my $count = 0;\n    #\n    # write your code here\n\
    \    #\n    return $count;\n}", "    my $count = 0;\n    # Iterate through the\
    \ characters in the input string\n    for(my $i = 0; $i < length($s); $i++) {\n\
    \        # Check whether the character at position $i is an uppercase vowel.\n\
    \        # Note that the substr function takes a string as input, a start index\n\
    \        # as its second argument, and a length as its third argument.\n     \
    \   # Thus, substr($s, $i, 1) returns the one-character substring of $s\n    \
    \    # starting at index $i.\n        if($i % 2 == 0 && $UpperVowels =~ /\\Q$s\\\
    E/) {\n            $count++;\n        }\n    }\n    return $count;\n}", "    #\
    \ your code here\n}", "    my $u=0;\n    for (my $i=0; $i<length($s); $i++){\n\
    \        if ($i%2==0 and substr($s,$i,1) =~ /[AEIOU]/){\n            $u++;\n \
    \       }\n    }\n    return $u;\n}", "    my $count = 0;\n    for (my $i = 0;\
    \ $i < length($s); $i++) {\n        if ($i % 2 == 0 && is_upper(substr($s, $i,\
    \ 1))) {\n            $count++;\n        }\n    }\n    return $count;\n}", " \
    \   my $n = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n        if (substr($s,\
    \ $i, 1) =~ /[AEIOU]/) {\n            $n++;\n        }\n    }\n    return $n;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n      \
    \  $count++ if ($i % 2 == 0 && uc(substr($s, $i, 1)) =~ /[AEIOU]/);\n    }\n \
    \   return $count;\n}", "    my @vowels = ('A', 'E', 'I', 'O', 'U');\n    my $count\
    \ = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n        my $letter =\
    \ substr($s, $i, 1);\n        if ($letter ~~ @vowels) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    # TODO\n}", "    # These variables\
    \ are used to keep track of the current state\n    my $n = 0;\n    my $i = 0;\n\
    \    # Iterate over the string, looking at all vowels in even indices.\n    while\
    \ ( $i < length($s) ) {\n        if ( is_even($i) and is_upper_vowel(substr($s,\
    \ $i, 1)) ) {\n            $n++;\n        }\n        $i++;\n    }\n    return\
    \ $n;\n}", "    my $count = 0;\n    $count += 1 if ($s =~ /(.).*?\\1/);\n    return\
    \ $count;\n}", "    my @uppers = $s =~ /[AEIOU]/g;\n    my $count;\n    foreach\
    \ my $i (0..$#uppers) {\n        $count++ if $i % 2 == 0;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n      \
    \  my $ch = substr($s, $i, 1);\n        if ($ch =~ /[AEIOU]/ && $i % 2 == 0) {\n\
    \            $count += 1;\n        }\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for (my $i = 0; $i < length($s); $i+=2) {\n        my $c = substr($s,\
    \ $i, 1);\n        $count++ if ($c =~ /[AEIOU]/);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i+=2) {\n     \
    \   if (uc(substr($s, $i, 1)) eq substr($s, $i, 1)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    return 0;\n}", "    # return the\
    \ number of upper case vowels in $s\n    # that occur at even indices\n    my\
    \ $count = 0;\n    my @s = split(//, $s);\n    for(my $i = 0; $i < scalar(@s);\
    \ $i++){\n        if($i % 2 == 0 && $s[$i] =~ /[AEIOU]/){\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    return 0;\n}", "    # your code\
    \ here\n    # given a string, loop through each character\n    # for each character,\
    \ if the index of the character is even,\n    # check if the character is uppercase\n\
    \    # if it is, increase count, else, continue\n    # when the loop is finished,\
    \ return count\n    my $count = 0;\n    for (my $i = 0; $i < length($s); $i++)\
    \ {\n        if ($i % 2 == 0) {\n            if (uc(substr($s, $i, 1)) eq substr($s,\
    \ $i, 1)) {\n                $count++;\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    return scalar grep { $_ % 2 == 0 && $s =~ /[AEIOU]/ } (0..length($s)-1);\n\
    }", "    my $n = 0;\n    my $i = 0;\n    while($i < length($s)) {\n        my\
    \ $c = substr($s, $i, 1);\n        if($c =~ /[AEIOU]/ && $i % 2 == 0) {\n    \
    \        $n++;\n        }\n        $i++;\n    }\n    return $n;\n}", "    my $count\
    \ = 0;\n    my @s = split(\"\", $s);\n    for(my $i = 0; $i < @s; $i += 2) {\n\
    \        if($s[$i] =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my @chars = split //, $s;\n    my $num_uppers =\
    \ 0;\n    for (my $i = 0; $i < @chars; $i++) {\n        if ($i % 2 == 0) {\n \
    \           $num_uppers++ if $chars[$i] =~ /[AEIOU]/;\n        }\n    }\n    return\
    \ $num_uppers;\n}", "    my @upper;\n    for (my $i = 0; $i < length($s); $i++)\
    \ {\n        my $ch = substr($s, $i, 1);\n        push @upper, $ch if ($ch =~\
    \ /[aeiou]/i && $i % 2 == 0);\n    }\n    return scalar(@upper);\n}", "    my\
    \ $count = 0;\n    my @s = split(//, $s);\n    foreach my $ch (@s) {\n       \
    \ if ($ch =~ /[aeiou]/i && $ch eq uc($ch)) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my @chars = split //, $s;\n    my $count\
    \ = 0;\n    for my $i (0..$#chars) {\n        if ($i % 2 == 0 && $chars[$i] =~\
    \ /[AEIOU]/) {\n            $count++;\n        }\n    }\n    return $count;\n}",
  "    my $n = 0;\n    my $vowels = \"AEIOU\";\n    for(my $i = 0; $i < length($s);\
    \ $i += 2) {\n        $n++ if(index($vowels, uc(substr($s, $i, 1))) != -1);\n\
    \    }\n    return $n;\n}", "    my $c = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $l = substr($s, $i, 1);\n        if($l =~ /[AEIOU]/)\
    \ {\n            $c++;\n        }\n    }\n    return $c;\n}", "    my $count =\
    \ 0;\n    my @indices = split(//, $s);\n    my $index = 0;\n    foreach my $vowel\
    \ (@indices) {\n\tif ($vowel =~ /[AEIOU]/ && $index % 2 == 0) {\n\t    $count\
    \ = $count + 1;\n\t}\n\t$index = $index + 1;\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    $count++ if ($s =~ /[AEIOU]/);", "    $s =~ tr/AEOIU/AEOIU/;\n\
    \    return $s =~ tr/AEOIU//;\n}", "    my $count = 0;\n    for (my $i = 0; $i\
    \ < length($s); $i++) {\n        if (is_upper($s, $i) && $i % 2 == 0) {\n    \
    \        $count++;\n        }\n    }\n    return $count;\n}", "    my @vowels\
    \ = split //, \"AEIOU\";\n    my @a = split //, $s;\n    my $count = 0;\n    for(my\
    \ $i = 0; $i < @a; $i += 2) {\n        if(grep {$a[$i] eq $_} @vowels) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}", "    my $i = 0;\n\
    \    my $count = 0;\n    for(; $i < length($s); $i++){\n        my $cur = substr($s,\
    \ $i, 1);\n        if(uc($cur) eq $cur && $i % 2 == 0){\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    my @s = split(//,\
    \ $s);\n    for(my $i = 0; $i < length($s); $i++){\n        if($i % 2 == 0 &&\
    \ $s[$i] =~ /[AEIOU]/){\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    # TODO: Write code for count_upper here\n    # Hint: A vowel is an upper\
    \ or lowercase \"a\", \"e\", \"i\", \"o\", or \"u\"\n}", "    my $count = 0;\n\
    \    for (my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i,\
    \ 1);\n        $count++ if ($i % 2 == 0 && $c =~ /[AEIOU]/);\n    }\n    return\
    \ $count;\n}", "    return 0 unless $s;\n    my $count = 0;\n    foreach my $index\
    \ (0..length($s)-1) {\n        if ($index % 2 == 0) {\n            if ($s =~ /[A]/)\
    \ {\n                $count += 1;\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    my $s_len = length($s);\n    my $vowels = 0;\n    for (my\
    \ $i = 0; $i < $s_len; $i += 2) {\n        my $c = substr($s, $i, 1);\n      \
    \  if ($c =~ /[AEIOU]/) {\n            $vowels++;\n        }\n    }\n    return\
    \ $vowels;\n}", "    my $x;\n    my $count = 0;\n    my @uppervowels = (\"A\"\
    , \"E\", \"I\", \"O\", \"U\");\n    my @array = split(//, $s);\n    for (my $i\
    \ = 0; $i < scalar(@array); $i++) {\n        if ($i % 2 == 0) {\n            for\
    \ (my $j = 0; $j < scalar(@uppervowels); $j++) {\n                if ($array[$i]\
    \ eq $uppervowels[$j]) {\n                    $count++;\n                }\n \
    \           }\n        }\n    }\n    return $count;\n}", "    # TODO: Fill in\
    \ code here\n    my $count = 0;\n    my @up_vowel = qw/A E I O U/;\n    for (my\
    \ $i = 0; $i < length($s); $i += 2) {\n        my $char = substr($s, $i, 1);\n\
    \        $count++ if $char ~~ @up_vowel;\n    }\n    return $count;\n}", "   \
    \ my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n        my\
    \ $c = substr($s, $i, 1);\n        if ($c =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $result = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i += 2) {\n        if ($s =~ /A/i) {\n            $result++;\n\
    \        }\n    }\n    return $result;\n}", "    my $res = 0;\n    my @s = split(\"\
    \", $s);\n    for (my $i = 0; $i < @s; $i++) {\n        if ($i % 2 == 0 && $s[$i]\
    \ =~ /[AEIOU]/) {\n            $res += 1;\n        }\n    }\n    return $res;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n   \
    \     if (uc(substr($s, $i, 1)) =~ /[AEIOU]/) {\n            $count++;\n     \
    \   }\n    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i = 0;\
    \ $i < length($s); $i++) {\n        if ($i % 2 == 0 && $s =~ /[AEIOU]/) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my @chars = split //, $s;\n    my $index = 0;\n    foreach my $c (@chars)\
    \ {\n        if ($index % 2 == 0) {\n            if ($c =~ /[AEIOU]/) {\n    \
    \            $count++;\n            }\n        }\n        $index++;\n    }\n \
    \   return $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[AEIOU]/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    # your\
    \ code here\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i+=2)\
    \ {\n\tif (uc(substr($s, $i, 1)) eq substr($s, $i, 1)) {\n\t    $count++;\n\t\
    }\n    }\n    return $count;\n}", "    my $num = 0;\n    my @s = split(//, $s);\n\
    \    for (my $i = 0; $i < @s; $i += 2) {\n        $num++ if ($s[$i] =~ /[aeiou]/i\
    \ && $s[$i] =~ /[AEIOU]/);\n    }\n    return $num;\n}", "    my $count = 0;\n\
    \    my @chars = split //, $s;\n    my $i = 0;\n    while ($i < scalar @chars)\
    \ {\n        my $c = $chars[$i];\n        $count++ if $c =~ /[AEIOU]/ && $i %\
    \ 2 == 0;\n        $i++;\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    my @chars = split(//, $s);\n    foreach my $i (0..@chars-1) {\n        if\
    \ ($i % 2 == 0) {\n            $count++ if ($chars[$i] =~ /[AEIOU]/);\n      \
    \  }\n    }\n    return $count;\n}", "    my $count = 0;\n    my @upper_vowels\
    \ = qw(A E I O U);\n    for(my $i = 0; $i < length($s); $i++) {\n        if(($i\
    \ % 2 == 0) && ($s[$i] ~~ @upper_vowels)) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my $ans = 0;\n    $ans++ if (uc($s) eq $s);\n\
    \    for (my $i = 0; $i < length($s); $i++) {\n        my $char = substr($s, $i,\
    \ 1);\n        $ans++ if ($char =~ /[aeiou]/i and $i % 2 == 0);\n    }\n    return\
    \ $ans;\n}", "    my $count = 0;\n    my @s = split //, $s;\n    foreach (0..$#s)\
    \ {\n        if ($_ % 2 == 0 && $s[$_] =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my @a = split(//, $s);\n    my\
    \ $count = 0;\n    my $len = scalar(@a);\n    for (my $i = 0; $i < $len; $i++)\
    \ {\n        if ($i % 2 == 0 && $a[$i] =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    return scalar(grep{$_} map{$_\
    \ =~ /[AEIOU]/ ? 1 : 0} split(//,$s))\n}", "    my $count = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i++) {\n        if ($i % 2 == 0) {\n            if ($s\
    \ =~ /[AEIOU]/) {\n                $count++;\n            }\n        }\n    }\n\
    \    return $count;\n}", "    # your code here\n    my $count = 0;\n    for (my\
    \ $i = 0; $i < length($s); $i += 2) {\n        if ($s =~ /[AEIOU]/i) {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}", "    # TODO!\n  \
    \  my $count = 0;\n    for(my $i = 0; $i < length($s); $i++){\n        if(($i\
    \ % 2 == 0) && (uc(substr($s, $i, 1)) eq substr($s, $i, 1)) && (uc(substr($s,\
    \ $i, 1)) =~ m/[AEIOU]/)){\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    my @vowels = qw(a e i o u);\n    my $count = 0;\n    for (my\
    \ $i = 0; $i < length($s); $i += 2) {\n        my $c = substr($s, $i, 1);\n  \
    \      $count++ if grep {$c eq $_} @vowels;\n    }\n    return $count;\n}", " \
    \   return 0;\n}", "    my $u = 0;\n    my $len = length($s);\n    for(my $i =\
    \ 0; $i < $len; $i++) {\n        my $c = substr($s, $i, 1);\n        if($c =~\
    \ /[AEIOU]/ and $i % 2 == 0) {\n            $u++;\n        }\n    }\n    return\
    \ $u;\n}", "    return scalar (grep {$_ eq uc $_} $s =~ /(.)./g);\n}", "    my\
    \ $c = 0;\n    my @up = ('A', 'E', 'I', 'O', 'U');\n    for(my $i = 0; $i < length($s);\
    \ $i+=2) {\n\tmy $ch = substr($s, $i, 1);\n\tif(grep { $_ eq $ch } @up) {\n\t\
    \    $c++;\n\t}\n    }\n    return $c;\n}", "    my $count = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i++) {\n        my $char = substr($s, $i, 1);\n     \
    \   if ($char =~ /^[AEIOU]$/ && $i % 2 == 0) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}", "    my $count = 0;\n    for(my $i = 0; $i\
    \ < length($s); $i++) {\n        if($i % 2 == 0 && $s =~ /[AEIOU]/) {\n      \
    \      $count++;\n        }\n    }\n    return $count;\n}", "    # Write your\
    \ solution here\n    my $count = 0;\n    my @vowels = grep { $_ =~ m/[aeiou]/i\
    \ } (split //, $s);\n    for (my $i = 0; $i < scalar @vowels; $i++) {\n      \
    \  if ($i % 2 == 0) {\n            $count++ if $vowels[$i] =~ m/[AEIOU]/;\n  \
    \      }\n    }\n    return $count;\n}", "    my $count = 0;\n    foreach my $i\
    \ (0..length($s)-1) {\n        if ($i % 2 == 0 && $s[$i] =~ /[aeiou]/i) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}", "    my $i = 0;\n\
    \    my $count = 0;\n    while ($i < length($s)) {\n        if (substr($s, $i,\
    \ 1) =~ /[aeiou]/i) {\n            if (substr($s, $i, 1) =~ /[AEIOU]/) {\n   \
    \             $count++;\n            }\n        }\n        $i += 2;\n    }\n \
    \   return $count;\n}", "    my $count = 0;\n    my @s = split(//, $s);\n    my\
    \ $c = 0;\n    foreach my $char (@s) {\n        if ($c % 2 == 0) {\n         \
    \   if ($char =~ /^[AEIOU]$/) {\n                $count++;\n            }\n  \
    \      }\n        $c++;\n    }\n    return $count;\n}", "    # YOUR CODE HERE\n\
    \    my $i = 0;\n    my $num = 0;\n    while ($i < length($s)) {\n        if (substr($s,\
    \ $i, 1) =~ /[AEIOU]/ && $i % 2 == 0) {\n            $num++;\n        }\n    \
    \    $i++;\n    }\n    return $num;\n}", "    my $count = 0;\n    for (my $i =\
    \ 0; $i < length($s); $i+=2) {\n        if ($s =~ /[AEIOU]/i) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    my @chars\
    \ = split //, $s;\n    foreach my $i (0..@chars-1) {\n        if ($i % 2 == 0)\
    \ {\n            $count++ if ($chars[$i] =~ /[AEIOU]/);\n        }\n    }\n  \
    \  return $count;\n}", "    my $count = 0;\n    my @s = split(//, $s);\n    my\
    \ $i = 0;\n    while($i < scalar(@s)) {\n        if($s[$i] =~ /[AEIOU]/ && $i\
    \ % 2 == 0) {\n            $count++;\n        }\n        $i++;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my @letters = split(//, $s);\n    for\
    \ (my $i = 0; $i < length($s); $i++) {\n        if ($i % 2 == 0 && $letters[$i]\
    \ =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $n = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n       \
    \ my $c = substr($s, $i, 1);\n        if ($c =~ /[AEIOU]/) {\n            $n++;\n\
    \        }\n    }\n    return $n;\n}", "    my $num = 0;\n    # Loop through each\
    \ character in the string\n    for(my $i = 0; $i < length($s); $i++) {\n     \
    \   my $c = substr($s, $i, 1);\n        # Check for odd index (i.e. i % 2 == 1)\
    \ and uppercase vowel\n        if($i % 2 == 1 && $c =~ /^[AEIOU]$/) {\n      \
    \      $num++;\n        }\n    }\n    return $num;\n}", "    my $count = 0;\n\
    \    for (my $i = 0; $i < length($s); $i += 2) {\n        my $c = substr($s, $i,\
    \ 1);\n        $count++ if (is_upper($c));\n    }\n    return $count;\n}", " \
    \   return (length($s) - length(lc($s))) / 2;\n}", "    my $count = 0;\n    #\
    \ Iterate through the characters in the string\n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        # If the character is a vowel and the index is even\n     \
    \   if(is_vowel(substr($s, $i, 1)) && $i % 2 == 0) {\n            # increment\
    \ the count\n            $count++;\n        }\n    }\n    return $count;\n}",
  "    my $i;\n    my $c = 0;\n    for ($i = 0; $i < length($s); $i+=2) {\n      \
    \  my $x = substr($s, $i, 1);\n        $c++ if $x =~ /[AEIOU]/;\n    }\n    return\
    \ $c;\n}", "    my $upper_vowels = 0;\n    for (my $i = 0; $i < length($s); $i+=2)\
    \ {\n        my $char = substr($s, $i, 1);\n        $upper_vowels++ if (is_upper_vowel($char));\n\
    \    }\n    return $upper_vowels;\n}", "    my $count = 0;\n    my @vowels = split(\"\
    \", \"AEIOU\");\n    my @chars = split(\"\", $s);\n    my $idx = 0;\n    foreach\
    \ my $char (@chars) {\n        my $upper = uc($char);\n        if ($idx % 2 ==\
    \ 0 && $upper ~~ @vowels) {\n            $count++;\n        }\n        $idx++;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i <\
    \ length($s); $i += 2) {\n        my $letter = substr($s, $i, 1);\n        if\
    \ ($letter =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    # your code here\n    my $n = 0;\n    for (my $i = 0; $i <\
    \ length($s); $i+=2) {\n        if (uc($s) eq $s) {\n            $n++;\n     \
    \   }\n    }\n    return $n;\n}", "    my $res = 0;\n    my $pos = 0;\n    while\
    \ ($s =~ /[AEIOU]/g) {\n        $res++ if $pos % 2 == 0;\n        $pos++;\n  \
    \  }\n    return $res;\n}", "    my $count = 0;\n    foreach my $i (0..length($s)-1)\
    \ {\n        my $c = substr($s, $i, 1);\n        $count++ if ($c =~ /[AEIOU]/i\
    \ and $i % 2 == 0);\n    }\n    return $count;\n}", "    # YOUR CODE HERE\n  \
    \  my $count = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n    \tif ($i\
    \ % 2 == 0 && uc(substr($s, $i, 1)) eq substr($s, $i, 1)) {\n    \t\t$count++;\n\
    \    \t}\n    }\n    return $count;\n}", "    my $cnt = 0;\n    for(my $i = 0;\
    \ $i < length($s); $i++) {\n        $cnt++ if $i % 2 == 0 && $s =~ /[AEIOU]/;\n\
    \    }\n    return $cnt;\n}", "    my $count = 0;\n    my @s = split(//, $s);\n\
    \    for(my $i = 0; $i < @s; $i += 2) {\n        $count++ if $s[$i] =~ /[AEIOU]/;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my @s = split //, $s;\n\
    \    foreach my $i (0..$#s) {\n        if($i % 2 == 0) {\n            if($s[$i]\
    \ =~ /[A-Z]/) {\n                $count += 1;\n            }\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        $count++ if $i % 2 == 0\
    \ && $c =~ /[AEIOU]/;\n    }\n    return $count;\n}", "    my $count = 0;\n  \
    \  my @s = split(//, $s);\n    my $i = 0;\n    while ($i < length($s)) {\n   \
    \     if ($s[$i] =~ /[AEIOU]/ && $i % 2 == 0) {\n            $count++;\n     \
    \   }\n        $i++;\n    }\n    return $count;\n}", "    my $count = 0;\n   \
    \ my @s = split //, $s;\n    for (my $i = 0; $i < scalar @s; $i += 2) {\n    \
    \    if ($s[$i] =~ /[aeiou]/i) {\n            $count++ if uc($s[$i]) eq $s[$i];\n\
    \        }\n    }\n    return $count;\n}", "    my $result = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i++) {\n        if ($i % 2 == 0) {\n            if ($s\
    \ =~ /[AEIOU]/) {\n                $result++;\n            }\n        }\n    }\n\
    \    return $result;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        if ($s =~ /^[AEIOU]/) {\n            $count++;\n       \
    \ }\n    }\n    return $count;\n}", "    # ...\n}", "    my $count = 0;\n    my\
    \ @arr = split(//, $s);\n    for (my $i = 0; $i < scalar(@arr); $i++) {\n    \
    \    if ($i % 2 == 0) {\n            if ($arr[$i] =~ /[AEIOU]/) {\n          \
    \      $count++;\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    for (my $i = 0; $i < length($s); $i+=2) {\n        if\
    \ (uc(substr($s, $i, 1)) eq substr($s, $i, 1)) {\n            $count++;\n    \
    \    }\n    }\n    return $count;\n}", "    my $count = 0;\n    my @s = split(//,\
    \ $s);\n    my $i = 0;\n    while ($i < scalar(@s)) {\n        my $c = $s[$i];\n\
    \        if ($c =~ /[AEIOU]/i) {\n            $count++ if uc($c) eq $c;\n    \
    \    }\n        $i += 2;\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    for (my $i = 0; $i < length($s); $i+=2) {\n        if (substr($s, $i, 1)\
    \ =~ /^[AEIOU]$/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $len = length($s);\n    my $count = 0;\n    for(my $i = 0; $i < $len;\
    \ $i += 2) {\n        if($s =~ /[AEIOU]/i) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my @s = split(//, $s);\n\
    \    for(my $i = 0; $i < @s; $i++) {\n        if($i % 2 == 0) {\n            if($s[$i]\
    \ =~ /[AEIOU]/) {\n                $count++;\n            }\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $char = substr($s, $i, 1);\n        $count++ if (is_upper($char));\n\
    \    }\n    return $count;\n}", "    my $sum = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        if (uc(substr($s, $i, 1)) eq substr($s, $i, 1)) {\n    \
    \        $sum++;\n        }\n    }\n    return $sum;\n}", "    my $count = 0;\n\
    \    for(my $i = 0; $i < length($s); $i += 2) {\n        $count++ if(substr($s,\
    \ $i, 1) =~ /[AEIOU]/);\n    }\n    return $count;\n}", "    my $cnt = 0;\n  \
    \  my @s = split(//, $s);\n    for (my $i = 0; $i < length($s); $i++) {\n    \
    \    if ($i % 2 == 0) {\n            my $c = $s[$i];\n            if (uc($c) eq\
    \ $c) {\n                if ($c eq 'A' || $c eq 'E' || $c eq 'I' || $c eq 'O'\
    \ || $c eq 'U') {\n                    $cnt++;\n                }\n          \
    \  }\n        }\n    }\n    return $cnt;\n}", "    my $result = 0;\n    my $i\
    \ = 0;\n    while ($i < length($s)) {\n        if (isupper(substr($s, $i, 1))\
    \ and (not $i % 2)) {\n            $result++;\n        }\n        $i++;\n    }\n\
    \    return $result;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        if ($i % 2 == 0 && $s =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    # 0 == even\
    \ index\n    my $even = 0;\n    # Loop through the characters in the string\n\
    \    for my $ch (split //, $s) {\n        # If character is a vowel, check if\
    \ the index is even and if it's\n        # capitalized.\n        if (uc($ch) =~\
    \ /[AEIOU]/) {\n            $count++ if $even;\n        }\n        # Change the\
    \ index so that it will toggle between even and odd.\n        $even = !$even;\n\
    \    }\n    # Return the count\n    return $count;\n}", "    my $count = 0;\n\
    \    for (my $i = 0; $i < length($s); $i += 2) {\n        my $char = substr($s,\
    \ $i, 1);\n        $count++ if $char =~ /[AEIOU]/;\n    }\n    return $count;\n\
    }", "    my @vowels = (\"A\", \"E\", \"I\", \"O\", \"U\");\n    my $count = 0;\n\
    \    for (my $i = 0; $i < length($s); $i++) {\n        if ($i % 2 == 0) {\n  \
    \          for my $vowel (@vowels) {\n                if (index($s, $vowel) !=\
    \ -1) {\n                    $count++;\n                }\n            }\n   \
    \     }\n    }\n    return $count;\n}", "    my $count = 0;\n    for(my $i = 0;\
    \ $i < length($s); $i += 2) {\n        if(uc(substr($s, $i, 1)) eq substr($s,\
    \ $i, 1)) {\n            $count++;\n        }\n    }\n    return $count;\n}",
  "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i++){\n        if ($i\
    \ % 2 == 0){\n            if ($s[$i] =~ /[AEIOU]/){\n                $count ++;\n\
    \            }\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    my @letters = split('', $s);\n    foreach my $letter (@letters) {\n     \
    \   if ($letter =~ /[AEIOU]/ && $count % 2 == 0) {\n            $count++;\n  \
    \      }\n    }\n    return $count;\n}", "    return if $s eq '';\n    my @chars\
    \ = split //, $s;\n    my $upper_count = 0;\n    foreach my $char (@chars) {\n\
    \        next if $char !~ /[AEIOU]/;\n        $upper_count++;\n    }\n    return\
    \ $upper_count;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $c = substr($s, $i, 1);\n        if (index(\"AEIOU\"\
    , $c) != -1) {\n            $count++;\n        }\n    }\n    return $count;\n}",
  "    my $count = 0;\n    my @s = split(//, $s);\n    my $len = scalar(@s);\n   \
    \ for(my $i = 0; $i < $len; $i++) {\n        if($i % 2 == 0 && is_upper($s[$i]))\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for(my $i = 0; $i < length($s); $i++) {\n        if($i % 2\
    \ == 0) {\n            if(substr($s, $i, 1) =~ /[AEIOU]/) {\n                $count++;\n\
    \            }\n        }\n    }\n    return $count;\n}", "    my $c = 0;\n  \
    \  for(my $i = 0; $i < length($s); $i+=2) {\n\t$c++ if is_upper(substr($s, $i,\
    \ 1));\n    }\n    return $c;\n}", "    # TODO: replace the next line with your\
    \ code\n    return(0);\n}", "    my $count = 0;\n    foreach my $i (0..length($s)-1)\
    \ {\n        if ($i % 2 == 0) {\n            $count++ if (is_upper($s, $i));\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for(my $i\
    \ = 0; $i < length($s); $i += 2) {\n        if($s =~ /[AEIOU]/i) {\n         \
    \   $count++;\n        }\n    }\n    return $count;\n}", "    # TODO: implement\
    \ this function\n    #your code goes here\n    my $count = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        $count++\
    \ if ($c =~ /[AEIOU]/ && $i % 2 == 0);\n    }\n    return $count;\n}", "    #\
    \ YOUR CODE HERE\n}", "    # Put your code here\n}", "    my $count = 0;\n   \
    \ for(my $i = 0; $i < length($s); $i++) {\n        if(($i % 2 == 0) && (substr($s,\
    \ $i, 1) =~ /[AEIOU]/)) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my @chars = split(//, $s);\n    foreach\
    \ my $i (0..@chars-1) {\n        if ($i % 2 == 0 && $chars[$i] =~ /[AEIOU]/) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    my $counter\
    \ = 0;\n    my @chars = split(//, $s);\n    my $i = 0;\n    foreach $c (@chars)\
    \ {\n        if ($i % 2 == 0) {\n            if ($c =~ /[AEIOU]/) {\n        \
    \        $counter += 1;\n            }\n        }\n        $i += 1;\n    }\n \
    \   return $counter;\n}", "    my $count = 0;\n    my @upper = grep {uc($_) eq\
    \ $_} split //, $s;\n    for my $i (0..$#upper) {\n        $count++ if $i % 2\
    \ == 0;\n    }\n    return $count;\n}", "    my $count = 0;\n    for(my $i = 0;\
    \ $i < length($s); $i += 2) {\n        my $c = substr($s, $i, 1);\n        if(index(\"\
    AEIOU\", $c) != -1) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my @chars = split(//, $s);\n    my $i = 0;\n    while\
    \ ($i < @chars) {\n        $count++ if ($chars[$i] =~ /[AEIOU]/ and $i % 2 ==\
    \ 0);\n        $i++;\n    }\n    return $count;\n}", "    my $i = 0;\n    my $count\
    \ = 0;\n    while ($i < length($s)) {\n        my $letter = substr($s, $i, 1);\n\
    \        if ($letter =~ /[AEIOU]/ and $i % 2 == 0) {\n            $count++;\n\
    \        }\n        $i++;\n    }\n    return $count;\n}", "    $s =~ s/[^AaEeIiOoUu]//g;\n\
    \    return @_;\n}", "    my $c = 0;\n    $c++ if $s =~ /^(..)*([AEIOU])/;\n \
    \   $c++ if $s =~ /^(..)*[^AEIOU]([AEIOU])/;\n    $c++ if $s =~ /^(..)*[^AEIOU][^AEIOU]([AEIOU])/;\n\
    \    $c++ if $s =~ /^(..)*[^AEIOU][^AEIOU][^AEIOU]([AEIOU])/;\n    return $c;\n\
    }", "    #start your code here\n\t\n\tmy $len = length($s);\n\tmy $count = 0;\n\
    \tmy $i = 0;\n\t\n\twhile ($i < $len) {\n\t\tmy $temp = substr($s, $i, 1);\n\t\
    \tmy $j = ord($temp);\n\t\tif (($j >= 65) && ($j <= 90)) {\n\t\t\t$count++;\n\t\
    \t}\n\t\t$i = $i + 2;\n\t}\n\t\n\treturn $count;\n}", "    $s =~ tr/AOEIU/AOEIU/;\n\
    \    return length $s;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        $count++ if (uc(substr($s, $i, 1)) eq substr($s, $i, 1) and\
    \ $i % 2 == 0);\n    }\n    return $count;\n}", "    my $count = 0;\n    for (my\
    \ $i = 0; $i < length($s); $i++) {\n        if ($i % 2 == 0) {\n            my\
    \ $c = substr($s, $i, 1);\n            if ($c =~ /[AEIOU]/) {\n              \
    \  $count++;\n            }\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n        if ($i %\
    \ 2 == 0 && $s =~ /[AEIOU]/) {\n            $count += 1;\n        }\n    }\n \
    \   return $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        if ($s =~ /[aeiou]/i) {\n            if ($s =~ /[AEIOU]/)\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }", "    # Convert the string to an array of characters\n    my @chars = split\
    \ //, $s;\n    # Set up the counter\n    my $count = 0;\n    # Loop over the characters\
    \ (starting at the second one)\n    for my $i (1 .. $#chars) {\n        # Increment\
    \ the counter if the character is even and upper case\n        $count++ if ($i\
    \ % 2 == 0) && ($chars[$i] =~ /[AEIOU]/);\n    }\n    # Return the counter value\n\
    \    return $count;\n}", "    my $count = 0;\n    my @upper = split('', $s);\n\
    \    for my $i (0..$#upper) {\n        if ($i % 2 == 0) {\n            if ($upper[$i]\
    \ eq uc($upper[$i])) {\n                $count++;\n            }\n        }\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    # Start your code here\n\
    \    return $count;\n}", "    my $upper = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        if ($s =~ /[AEIOU]/i) {\n            $upper += 1;\n    \
    \    }\n    }\n    return $upper;\n}", "    my $count = 0;\n    for (my $i = 0;\
    \ $i < length($s); $i += 2) {\n        $count++ if $s =~ /[AEIOU]/;\n    }\n \
    \   return $count;\n}", "    my $count = 0;\n    my @vowels = qw(A E I O U);\n\
    \    for (my $i = 0; $i < length($s); $i++) {\n        if ($i % 2 == 0) {\n  \
    \          foreach my $vowel (@vowels) {\n                if (substr($s, $i, 1)\
    \ eq $vowel) {\n                    $count++;\n                }\n           \
    \ }\n        }\n    }\n    return $count;\n}", "    my @upper = $s =~ /[AEIOU]/gi;\n\
    \    return scalar @upper;\n}", "    my $count = 0;\n    my @chars = split //,\
    \ $s;\n    for (my $i = 0; $i < scalar @chars; $i++) {\n        $count++ if (is_vowel($chars[$i])\
    \ && $i % 2 == 0 && is_upper($chars[$i]));\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    my @vowels = qw(A E I O U);\n    for (my $i = 0; $i <\
    \ length($s); $i += 2) {\n        my $ch = substr($s, $i, 1);\n        if (uc($ch)\
    \ eq $ch && grep($ch eq $_, @vowels)) {\n            $count++;\n        }\n  \
    \  }\n    return $count;\n}", "    my @count = $s =~ /[AEIOU]/gi;\n    return\
    \ @count;\n}", "    my $count = 0;\n    my @chars = split(//, $s);\n    for(my\
    \ $i = 0; $i < scalar(@chars); $i++) {\n\tif(uc($chars[$i]) eq $chars[$i] && $i\
    \ % 2 == 0) {\n\t    $count++;\n\t}\n    }\n    return $count;\n}", "    # TODO\n\
    }", "    my @s = split //, $s;\n    my $count = 0;\n    my $index = 0;\n    foreach\
    \ (@s) {\n        if (index('AEIOU', $_) != -1) {\n            $count++ if ($index\
    \ % 2 == 0);\n        }\n        $index++;\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    # your code here\n    return $count;\n}", "    my $count\
    \ = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n        $count++ if substr($s,\
    \ $i, 1) =~ /[AEIOU]/;\n    }\n    return $count;\n}", "    # Insert code here\n\
    \    my $count = 0;\n    my @letters = split(//, $s);\n    my $length = scalar\
    \ @letters;\n    for (my $i = 0; $i < $length; $i++) {\n        if ($i % 2 ==\
    \ 0 && $letters[$i] =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        if($i % 2 == 0 && is_upper($s, $i)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i++) {\n        if ($i % 2 == 0) {\n            my $char\
    \ = substr($s, $i, 1);\n            if ($char =~ /[AEIOU]/) {\n              \
    \  $count++;\n            }\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    my @letters = split //, $s;\n    foreach my $i (0..$#letters)\
    \ {\n        if($i % 2 == 0 && $letters[$i] =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    return scalar grep { $s =~ /$_/\
    \ && $` % 2 == 0 } @vowels;\n}", "    my $count = 0;\n    for(my $i = 0; $i <\
    \ length($s); $i += 2) {\n        if (lc(substr($s, $i, 1)) ne substr($s, $i,\
    \ 1)) {\n            $count++;\n        }\n    }\n    return $count;\n}", "  \
    \  my $count = 0;\n    for(my $i = 0; $i < length($s); $i += 2) {\n        if($s\
    \ =~ /[aeiou]/i) {\n            $count += 1;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i += 2) {\n    \
    \    my $ch = substr($s, $i, 1);\n        if(index(\"AEIOU\", $ch) >= 0) {\n \
    \           $count++;\n        }\n    }\n    return $count;\n}", "    my $i =\
    \ 0;\n    my $upper_count = 0;\n    my @upper_vowels = ('A', 'E', 'I', 'O', 'U');\n\
    \    foreach my $char (split('', $s)) {\n        if ($i % 2 == 0) {\n        \
    \    if (grep(/^$char$/, @upper_vowels)) {\n                $upper_count++;\n\
    \            }\n        }\n        $i++;\n    }\n    return $upper_count;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
