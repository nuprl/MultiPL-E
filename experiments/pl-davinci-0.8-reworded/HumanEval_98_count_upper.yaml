name: HumanEval_98_count_upper
language: pl
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# >>> count_upper(\"aBCdEf\")\n# 1\n# >>> count_upper(\"abcdefg\"\
  )\n# 0\n# >>> count_upper(\"dBBE\")\n# 0\nsub count_upper {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_upper;\n\
  \        if(eq_deeply($candidate->(\"aBCdEf\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdefg\"),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dBBE\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"B\"),0)) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"U\"),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  EEEE\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    # Your code here.\n    $ans=0;\n    for ($i=0;$i<length($s);$i++)\n\
    \    {\n        if ( uc(substr($s,$i,1)) eq substr($s,$i,1) and $i%2==0 and substr($s,$i,1)=~m/[AEIOU]/)\n\
    \        {\n            $ans++;\n        }\n    }\n    return $ans;\n}", "   \
    \ my @count;\n    my $i = 0;\n    while ($i < length($s)) {\n        my $char\
    \ = substr($s, $i, 1);\n        if ($char =~ /[aeiou]/i) {\n            push(@count,\
    \ $char);\n        }\n        $i += 2;\n    }\n    my $count = grep(/[AEIOU]/,\
    \ @count);\n    return $count;\n}", "    my @a = split(//, $s);\n    my $c = 0;\n\
    \    for(my $i = 0; $i < scalar(@a); $i+=2) {\n        if(uc($a[$i]) eq $a[$i])\
    \ {\n            $c++;\n        }\n    }\n    return $c;\n}", "    my $count =\
    \ 0;\n    my @s = split(//, $s);\n    foreach (0..$#s) {\n        if ($_ % 2 ==\
    \ 0 && uc($s[$_]) =~ /[AEIOU]/) {\n            $count += 1;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        if($i % 2 == 0 && is_upper(substr($s, $i, 1))) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}", "    my $i = 0;\n  \
    \  my $count = 0;\n    my @vowels = (\"A\", \"E\", \"I\", \"O\", \"U\");\n   \
    \ foreach my $c (split //, $s) {\n        if ($i % 2 == 0) {\n            foreach\
    \ my $v (@vowels) {\n                if ($c eq $v) {\n                    $count\
    \ += 1;\n                }\n            }\n        }\n        $i += 1;\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    foreach my $index (0..length($s)-1)\
    \ {\n        my $l = substr($s, $index, 1);\n        $count++ if ($l =~ /[AEIOU]/\
    \ && $index % 2 == 0);\n    }\n    return $count;\n}", "    my $count = 0;\n \
    \   for(my $i = 0; $i < length($s); $i++) {\n        if($i % 2 == 0 && $s[$i]\
    \ =~ m/[AEIOU]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    $s =~ s/[a-z]//g;\n    return length($s);\n}", "    my $count = 0;\n\
    \    for (my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i,\
    \ 1);\n        $count++ if (($i % 2 == 0) && is_upper($c));\n    }\n    return\
    \ $count;\n}", "    #return ...\n}", "    #return $s =~ tr/AEIOU/aeiou/;\n   \
    \ my $count = 0;\n    my @s = split(\"\", $s);\n    for (my $i = 0; $i < scalar(@s);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            if ($s[$i] =~ /[AEIOU]/) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }", "    # You must have a check that the length of the string is not 0.\n   \
    \ # write your code here\n    return 0;\n}", "    my $count = 0;\n    my @l =\
    \ split(\"\", $s);\n    for(my $i = 0; $i < scalar(@l); $i++) {\n        if ($i\
    \ % 2 == 0) {\n            if ($l[$i] =~ /[AEIOU]/) {\n                $count++;\n\
    \            }\n        }\n    }\n    return $count;\n}", "    my $upper = 0;\n\
    \    for(my $i = 0; $i < length($s); $i++) {\n        if($i % 2 == 0 && $s =~\
    \ /[AOUIE]/) {\n            $upper++;\n        }\n    }\n    return $upper;\n}",
  "    my $t = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n        if ($i %\
    \ 2 == 0 && $s =~ /[AEIOU]/) {\n            $t++;\n        }\n    }\n    return\
    \ $t;\n}", "    my $count = 0;\n    my @chars = split //, $s;\n    my $index =\
    \ 0;\n    for my $c (@chars) {\n        if ($index % 2 == 0) {\n            if\
    \ ($c =~ /[AEIOU]/) {\n                $count++;\n            }\n        }\n \
    \       $index++;\n    }\n    return $count;\n}", "    my $i = 0;\n    my $count\
    \ = 0;\n    while($i < length($s)) {\n        my $char = substr($s, $i, 1);\n\
    \        if ($char =~ /[AEIOU]/ && $i % 2 == 0) {\n            $count++;\n   \
    \     }\n        $i++;\n    }\n    return $count;\n}", "    my $count = 0;\n \
    \   for (my $i = 0; $i < length($s); $i += 2) {\n        my $c = substr($s, $i,\
    \ 1);\n        if ($c =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    return 0 if !defined $s || $s eq '';\n    my $count\
    \ = 0;\n    for(my $i = 0; $i < length($s); $i += 2) {\n        $count++ if substr($s,\
    \ $i, 1) =~ /[AEIOU]/;\n    }\n    return $count;\n}", "    my $count = 0;\n \
    \   for(my $i = 0; $i < length($s); $i += 2) {\n        my $c = substr($s, $i,\
    \ 1);\n        if($c =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my @s = split //, $s;\n    my $count = 0;\n    for\
    \ (my $i = 0; $i < @s; $i++) {\n        if ($i % 2 == 0) {\n            if ($s[$i]\
    \ =~ /^[AEIOU]$/) {\n                $count++;\n            }\n        }\n   \
    \ }\n    return $count;\n}", "    my $i = 1;\n    my $count = 0;\n    foreach\
    \ my $letter (split(//, $s)) {\n        if ($i % 2 == 0) {\n            $count\
    \ += 1 if ($letter =~ /[AEIOU]/);\n        }\n        $i++;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i++)\
    \ {\n        if(is_upper($s, $i) && is_even($i)) {\n            $count++;\n  \
    \      }\n    }\n    return $count;\n}", "    return grep $s =~ /[AEIOU]/i, 0..(length($s)-1);\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i+=2) {\n     \
    \   $count++ if (uc(substr($s, $i, 1)) =~ /[AEIOU]/);\n    }\n    return $count;\n\
    }", "    return scalar grep {$_ =~ /^[AEIOU]$/} split //, uc $s;\n}", "    my\
    \ @upper = $s =~ /[AEIOU]/g;\n    return scalar @upper;\n}", "    my $count =\
    \ 0;\n    $count++ if ($s =~ /\\A[AEIOU]/);\n    $count++ if ($s =~ /[AEIOU]\\\
    z/);\n    while ($s =~ /[AEIOU][^AEIOU]*[AEIOU]/g) {\n        $count++;\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    foreach my $n (0..length($s)-1)\
    \ {\n        my $ch = substr($s, $n, 1);\n        if ( $n % 2 == 0 && $ch =~ /[AEIOU]/\
    \ ) {\n            $count++;\n        }\n    }\n    return $count;\n}", "    return\
    \ 0 if !$s;\n    my $upper = $s =~ tr/[AEIOU]//d;\n    return $upper;\n}", " \
    \   my $n = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n        if (uc(substr($s,\
    \ $i, 1)) eq substr($s, $i, 1)) {\n            $n++;\n        }\n    }\n    return\
    \ $n;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2)\
    \ {\n        my $c = substr($s, $i, 1);\n        $count++ if ($c =~ /[AEIOU]/);\n\
    \    }\n    return $count;\n}", "    my @chars = split(//, $s);\n    my $count\
    \ = 0;\n    foreach (0..$#chars) {\n        next if ($_ % 2 == 1);\n        next\
    \ unless ($chars[$_] =~ /[aeiou]/i);\n        $count++ if ($chars[$_] eq uc($chars[$_]));\n\
    \    }\n    return $count;\n}", "    return 0 if !defined $s;\n    return scalar\
    \ (\n        grep { $s =~ /[A-Z]/ }\n        grep { $_ % 2 == 0 }\n        0 ..\
    \ length($s) - 1\n    );\n}", "    my $count = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        if ($i % 2 == 0 && $s[$i] =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i += 2) {\n        if ($s =~ /[AEIOU]/i) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    for (my $i = 0; $i < length($s); $i+=2) {\n        $count++ if ($s =~ /[AEIOU]/i);\n\
    \    }\n    return $count;\n}", "    my $len = length($s);\n    my $count = 0;\n\
    \    for (my $i = 0; $i < $len; $i += 2) {\n        $count++ if $s =~ /A|E|I|O|U/;\n\
    \    }\n    return $count;\n}", "    return 0 unless defined $s;\n    return 0\
    \ unless length $s;\n    my $count = 0;\n    for my $i (0 .. length($s) - 1) {\n\
    \        if ($i % 2 == 0) {\n            my $ch = substr($s, $i, 1);\n       \
    \     if ($ch =~ /[AEIOU]/) {\n                $count++;\n            }\n    \
    \    }\n    }\n    return $count;\n}", "    # find the number of vowels\n    my\
    \ $count = 0;\n    for(my $i = 0; $i < length($s); $i += 2) {\n        if (substr($s,\
    \ $i, 1) =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    return $s =~ tr/[AEIOU]// % 2\n}", "    my $count = 0;\n \
    \   foreach my $i (0..length($s)-1) {\n        my $c = substr($s, $i, 1);\n  \
    \      $count++ if (is_upper($c) && is_even($i));\n    }\n    return $count;\n\
    }", "    return 0 if $s eq \"\";\n    my $count = 0;\n    if ($s =~ /^[aeiou]$/i)\
    \ {\n        $count = 1 if $s =~ /^[AEIOU]$/;\n    }\n    return $count + count_upper(substr($s,\
    \ 2));\n}", "    my $count = 0;\n    my @i = 0..length($s)-1;\n    @i = grep {$_\
    \ % 2 == 0} @i;\n    foreach my $i (@i) {\n        my $c = substr($s, $i, 1);\n\
    \        if ($c =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}", "    my $cnt = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        if ($i % 2 == 0 && $s =~ /[AEIOU]/) {\n            $cnt++;\n\
    \        }\n    }\n    return $cnt;\n}", "    my @chars = split //, $s;\n    my\
    \ $count = 0;\n    foreach my $i (0..$#chars) {\n        if (($i % 2 == 0) &&\
    \ ($chars[$i] =~ /[AEIOU]/)) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    my $ret = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n\
    \        $ret++ if (($i % 2 == 0) && ($s[$i] =~ /[AEIOU]/));\n    }\n    return\
    \ $ret;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2)\
    \ {\n        if ($s =~ /[aeiouAEIOU]/g) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my $num_upper = 0;\n    for(my $i = 0; $i\
    \ < length($s); $i++) {\n        if(($i % 2 == 0) && ($s =~ /^[AEIOU]$/)) {\n\
    \            $num_upper++;\n        }\n    }\n    return $num_upper;\n}", "  \
    \  return grep {$_ =~ /^[AEIOU]$/} split(//, $s);\n}", "    my $i = 0;\n    my\
    \ $count = 0;\n    foreach (split(//, $s)) {\n\t$count++ if ($i % 2 == 0 && $_\
    \ =~ /[AEIOU]/);\n\t$i++;\n    }\n    return $count;\n}", "    my $result = 0;\n\
    \    for(my $i = 0; $i < length($s); $i += 2) {\n        if(substr($s, $i, 1)\
    \ =~ /[AEIOU]/) {\n            $result++;\n        }\n    }\n    return $result;\n\
    }", "    my $cnt = 0;\n    foreach my $idx (0..length($s)-1) {\n        if($idx\
    \ % 2 == 0) {\n            my $c = substr($s, $idx, 1);\n            if($c =~\
    \ /[aeiou]/i) {\n                $cnt++ if($c eq uc($c));\n            }\n   \
    \     }\n    }\n    return $cnt;\n}", "    my $count = 0;\n    my @s = split //,\
    \ $s;\n    for (my $i = 0; $i < @s; $i += 2) {\n        if ($s[$i] =~ /[AEIOU]/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    my @s = split('', $s);\n    for(my $i = 0; $i < scalar(@s);\
    \ $i += 2) {\n        if($s[$i] =~ /[AEIOU]/) {\n            $count++;\n     \
    \   }\n    }\n    return $count;\n}", "    my $c = 0;\n    for (my $i = 0; $i\
    \ < length($s); $i++) {\n        if ($i % 2 == 0) {\n            my $c = substr($s,\
    \ $i, 1);\n            $c++ if ($c =~ /[AEIOU]/);\n        }\n    }\n    return\
    \ $c;\n}", "    my $count = 0;\n    my @s = split //, $s;\n    for(my $i = 0;\
    \ $i < @s; $i += 2) {\n        if($s[$i] =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    my @vowels\
    \ = split(/[aeiou]/, $s);\n    print \"@vowels\";\n}", "    my $count = 0;\n \
    \   for(my $i = 0; $i < length($s); $i += 2) {\n        my $c = substr($s, $i,\
    \ 1);\n        if($c =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my @chars = split //, $s;\n\
    \    for (my $i = 0; $i < @chars; $i += 2) {\n        $count++ if $chars[$i] =~\
    \ /[AEIOU]/;\n    }\n    return $count;\n}", "    return ($s =~ s/[AEIOU]//g)\n\
    }", "    # YOUR CODE HERE\n    return grep {$_} map {($s =~ m/[aeiou]/ig)[$_]\
    \ =~ m/[AEIOU]/ ? 1 : 0} (0..@{[$s =~ m/[aeiou]/ig]}-1);\n}", "    my $count =\
    \ 0;\n    my @array = split(\"\", $s);\n    for (my $i = 0; $i < scalar(@array);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            if ($array[$i] eq uc($array[$i]))\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i++) {\n       \
    \ if(($i % 2 == 0) && ($s =~ /[AEIOU]/)) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        if($i % 2 == 0 && $s =~ /([AEIOU])/g) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i += 2) {\n        $count++ if substr($s, $i, 1) =~ /[AEIOU]/;\n\
    \    }\n    return $count;\n}", "    my $upper_count = 0;\n    my @indices = split(//,\
    \ $s);\n    for (my $i = 0; $i < scalar(@indices); $i += 2) {\n        if ($indices[$i]\
    \ =~ /[AEIOU]/) {\n            $upper_count += 1;\n        }\n    }\n    return\
    \ $upper_count;\n}", "    my $count = 0;\n    my @vowels = ('A', 'E', 'I', 'O',\
    \ 'U');\n    for(my $i = 0; $i < length($s); $i += 2) {\n        my $ch = substr($s,\
    \ $i, 1);\n        $count++ if($ch ~~ @vowels);\n    }\n    return $count;\n}",
  "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i += 2) {\n        my\
    \ $c = substr($s, $i, 1);\n        $count++ if $c =~ /[AEIOU]/;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i +=\
    \ 2) {\n        if (uc(substr($s, $i, 1)) =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    $s =~ s/[^aeiou]//gi;\n    return\
    \ $s =~ tr/AEIOU/AEIOU/;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        $count++ if ($i % 2 == 0 and $s =~ m/$vowels/);\n    }\n  \
    \  return $count;\n}", "    my $num_upper = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $char = substr($s, $i, 1);\n        if ($char =~ /[AEIOU]/)\
    \ {\n            $num_upper++;\n        }\n    }\n    return $num_upper;\n}",
  "    my $i = 1;\n    my $sum = 0;\n    foreach (split(//, $s)) {\n        $sum++\
    \ if ($i % 2 == 0 && $i != 0 && is_upper($_));\n        $i++;\n    }\n    return\
    \ $sum;\n}", "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i += 2)\
    \ {\n        if (substr($s, $i, 1) =~ /[AEIOU]/) {\n            $count++;\n  \
    \      }\n    }\n    return $count;\n}", "    my $count = 0;\n    foreach (split\
    \ //, $s) {\n        if ($_ =~ /^[AEIOU]$/ && $count % 2 == 0) {\n           \
    \ $count++;\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n \
    \   for (my $i = 0; $i < length($s); $i++) {\n        if ($i % 2 == 0) {\n   \
    \         if ($s =~ /[AEIOU]/) {\n                $count++;\n            }\n \
    \       }\n    }\n    return $count;\n}", "    my $vowels = \"aeiouAEIOU\";\n\
    \    my $count = 0;\n    for(my $i = 0; $i < length($s); $i++){\n        if($i\
    \ % 2 == 0 && index($vowels, substr($s, $i, 1)) != -1){\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my @a = split(//, $s);\n    my\
    \ $vowels = qr/[AaEeIiOoUu]/;\n    my $c = 0;\n    for (my $i = 0; $i < @a; $i++)\
    \ {\n        if ($i % 2 == 0 && $a[$i] =~ $vowels) {\n            $c++;\n    \
    \    }\n    }\n    return $c;\n}", "    my $count = 0;\n    for(my $i = 0; $i\
    \ < length($s); $i++) {\n        if($i % 2 == 0) {\n            if($s =~ /([AEIOU])/)\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i += 2) {\n    \
    \    if(isupper(substr($s, $i, 1))) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $num = 0;\n    my @s_list = split //, $s;\n \
    \   my $s_list_length = @s_list;\n    my $i = 0;\n    while ($i < $s_list_length)\
    \ {\n        my $char = $s_list[$i];\n        if ($char =~ /[AEIOU]/ && $i % 2\
    \ == 0) {\n            $num++;\n        }\n        $i++;\n    }\n    return $num;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i+=2) {\n     \
    \   my $c = substr($s, $i, 1);\n        if ($c =~ /^[AEIOU]$/) {\n           \
    \ $count++;\n        }\n    }\n    return $count;\n}", "    return ($s =~ tr/AEIOU/AEIOU/);\n\
    }", "    my $cnt = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n        my\
    \ $c = substr($s, $i, 1);\n        $cnt++ if ($i % 2 == 0 and $c =~ /[AEIOU]/);\n\
    \    }\n    return $cnt;\n}", "    # TODO\n}", "    return unless $s;\n    my\
    \ $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n        my $letter\
    \ = substr($s, $i, 1);\n        if ($letter =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    # Your code here\n}", "    my\
    \ $count = 0;\n    # Loop from 0 to the end of $s, by 2.\n    for (my $i = 0;\
    \ $i < length($s); $i += 2) {\n        my $c = substr($s, $i, 1);\n        if\
    \ ($c =~ /[aeiou]/i) {\n            $count++ if $c eq uc($c);\n        }\n   \
    \ }\n    return $count;\n}", "    my $count = 0;\n    my @s = split(//, $s);\n\
    \    my $i = 0;\n    while($i < scalar(@s)) {\n        if ($s[$i] =~ /[AEIOU]/\
    \ and $i % 2 == 0) {\n            $count++;\n        }\n        $i++;\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    foreach (my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[AEIOU]/ &&\
    \ $i % 2 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my @string = split(//, $s);\n    my $i = 0;\n   \
    \ while ($i < @string) {\n        if ($string[$i] =~ /[AEIOU]/ && $i % 2 == 0)\
    \ {\n            $count++;\n        }\n        $i++;\n    }\n    return $count;\n\
    }", "    my $len = length($s);\n    my $i = 0;\n    my $uc = 0;\n    while ($i\
    \ < $len) {\n        if (is_upper($s[$i])) {\n            $uc = $uc + 1;\n   \
    \     }\n        $i = $i + 2;\n    }\n    return $uc;\n}", "    my $count = 0;\n\
    \    for (my $i = 0; $i < length($s); $i += 2) {\n        $count++ if ($s =~ /[AEIOU]/);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        if($i % 2 == 0) {\n            if(uc(substr($s, $i, 1)) eq\
    \ substr($s, $i, 1)) {\n                $count += 1;\n            }\n        }\n\
    \    }\n    return $count;\n}", "    my @vowels = (\"A\", \"E\", \"I\", \"O\"\
    , \"U\");\n    my $count = 0;\n    my $len = length($s);\n    for (my $i = 0;\
    \ $i < $len; $i++) {\n        my $temp = substr($s, $i, 1);\n        if ($i %\
    \ 2 == 0) {\n            if (is_upper($temp)) {\n                for (my $j =\
    \ 0; $j < scalar(@vowels); $j++) {\n                    if ($temp eq $vowels[$j])\
    \ {\n                        $count++;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}", "    my $cnt =\
    \ 0;\n    for(my $i = 0; $i < length($s); $i += 2) {\n        if(uc(substr($s,\
    \ $i, 1)) =~ /[AEIOU]/) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n   \
    \     if (uc(substr($s, $i, 1)) eq substr($s, $i, 1)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for(my $i\
    \ = 0; $i < length($s); $i += 2) {\n        if(isupper(substr($s, $i, 1))) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    my $n =\
    \ 0;\n    for(my $i = 0; $i < length($s); $i += 2) {\n        if(uc(substr($s,\
    \ $i, 1)) =~ /[AEIOU]/) {\n            $n++;\n        }\n    }\n    return $n;\n\
    }", "    my $count = 0;\n    my @s = split(//, $s);\n    my $i = 0;\n    while\
    \ ($i < @s) {\n        if ($s[$i] =~ /[AEIOU]/ && $i % 2 == 0) {\n           \
    \ $count++;\n        }\n        $i++;\n    }\n    return $count;\n}", "    my\
    \ $answer = 0;\n    my @vowels = qw/A E I O U/;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $char = substr($s, $i, 1);\n        if (grep {$_ eq $char}\
    \ @vowels) {\n            $answer++;\n        }\n    }\n    return $answer;\n}",
  "    my $count = 0;\n    my @s = split(//, $s);\n    for(my $i = 0; $i < scalar(@s);\
    \ $i++) {\n        if(($i%2 == 0) && ($s[$i] =~ /[AEIOU]/)) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $ret = 0;\n    my $pos = 0;\n\
    \    while($s =~ /([AEIOU])/g) {\n        $ret++ if ++$pos % 2 == 0;\n    }\n\
    \    return $ret;\n}", "    my $i = 0;\n    my $count = 0;\n    while ($i < length($s))\
    \ {\n        if (uc(substr($s, $i, 1)) =~ /[AEIOU]/) {\n            $count = $count\
    \ + 1;\n        }\n        $i = $i + 2;\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s,\
    \ $i, 1);\n        if($i % 2 == 0 && $c =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    my @vowels\
    \ = ('A', 'E', 'I', 'O', 'U');\n    for (my $i = 0; $i < length($s); $i += 2)\
    \ {\n        if (grep(/$s[$i]/, @vowels)) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my @s = split //, $s;\n\
    \    foreach my $i (0..$#s) {\n        if ($i % 2 == 0) {\n            if ($s[$i]\
    \ =~ /[AEIOU]/) {\n                $count++;\n            }\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    # we need to maintain state.\
    \ We need to know if we are on an even or odd index.\n    # we use the 'g' flag\
    \ to step through the string one character at a time.\n    for (my $i = 0; $i\
    \ < length($s); $i++) {\n        my $char = substr($s, $i, 1);\n        if ($i\
    \ % 2 == 0 && $char =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my @l = split(//, $s);\n   \
    \ my $i = 0;\n    foreach my $c (@l) {\n        if ($i % 2 == 0) {\n         \
    \   if ($c =~ /[AEIOU]/) {\n                $count++;\n            }\n       \
    \ }\n        $i++;\n    }\n    return $count;\n}", "    my $count = 0;\n    for(my\
    \ $i = 0; $i < length($s); $i += 2) {\n        $count++ if substr($s, $i, 1) =~\
    \ /[AEIOU]/;\n    }\n    return $count;\n}", "    return (scalar(grep { $s->[$_]\
    \ =~ /[AEIOU]/ } grep { $_ % 2 == 0 } 0 .. $#$s));\n}", "    my $count = 0;\n\
    \    for(my $i = 0; $i < length($s); $i+=2) {\n        my $ch = substr($s, $i,\
    \ 1);\n        if($ch =~ /^[AEIOU]$/) {\n            $count++;\n        }\n  \
    \  }\n    return $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $c = substr($s, $i, 1);\n        $count++ if ($c =~ /[AEIOU]/);\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my @chars = split(//,\
    \ $s);\n    foreach my $i (0..scalar(@chars)-1) {\n        if ($i % 2 == 0) {\n\
    \            if ($chars[$i] =~ /[AEIOU]/) {\n                $count++;\n     \
    \       }\n        }\n    }\n    return $count;\n}", "    return $s =~ tr/AEIOU/AEIOU/;\n\
    }", "    my $num_upper = 0;\n    $num_upper++ if $s =~ /^[AEIOU]/;\n    while\
    \ ($s =~ /.{2}([AEIOU])/g) {\n        $num_upper++;\n    }\n    return $num_upper;\n\
    }", "    # your code here\n}", "    my $cnt = 0;\n    my @l = split(\"\", $s);\n\
    \    for (my $i = 0; $i < scalar(@l); $i += 2) {\n        if ($l[$i] =~ /[AEIOU]/)\
    \ {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}", "    # ...\n\
    }", "    my $c = 0;\n    $c++ if $s =~ /^[AEOIU]/;\n    return $c + count_upper(substr($s,\
    \ 2));\n}", "    return 0 unless $s;\n    my $count = 0;\n    for (my $i = 0;\
    \ $i < length($s); $i += 2) {\n        $count++ if $s =~ /[AEIOU]/;\n    }\n \
    \   return $count;\n}", "    my $count = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[AEIOU]/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    my\
    \ $cnt = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n        $cnt++ if ($i\
    \ % 2 == 0 and substr($s, $i, 1) =~ /[AEIOU]/);\n    }\n    return $cnt;\n}",
  "    my $count = 0;\n    $count++ if ($s =~ /^A/);\n    $count++ if ($s =~ /^E/);\n\
    \    $count++ if ($s =~ /^I/);\n    $count++ if ($s =~ /^O/);\n    $count++ if\
    \ ($s =~ /^U/);\n    $count++ if ($s =~ /^Y/);\n    return $count;\n}", "    return\
    \ $s =~ tr/[AEIOU]// % 2;\n}", "    my $n = 0;\n    my $len = length($s);\n  \
    \  for (my $i = 0; $i < $len; $i += 2) {\n        if (is_upper($s, $i)) {\n  \
    \          $n++;\n        }\n    }\n    return $n;\n}", "    my $u = uc($s);\n\
    \    my $v = \"AOUI\";\n    my $n = 0;\n    while ($u =~ /(\\w)/g) {\n       \
    \ if ($v =~ /\\Q$1/) {\n            $n++;\n        }\n    }\n    return $n;\n}",
  "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i+=2) {\n        if( uc(substr($s,\
    \ $i, 1)) eq substr($s, $i, 1) ) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i+=2) {\n        $count++ if ($s =~ /^[A-Z]$/);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my @chars = split(//, $s);\n    foreach my $i (0..@chars-1)\
    \ {\n        if ($i % 2 == 0 && $chars[$i] =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i\
    \ = 0; $i < length($s); $i++) {\n        if ($i % 2 == 0 && $s =~ /[AEIOU]/) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    # return\
    \ the number of uppercase vowels in even indices.\n    my $i = 0;\n    my $num\
    \ = 0;\n    my $len = length($s);\n    while ($i < $len) {\n\tif (substr($s, $i,\
    \ 1) =~ /[AEIOU]/i && $i % 2 == 0) {\n\t    $num++;\n\t}\n\t$i++;\n    }\n   \
    \ return $num;\n}", "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i++)\
    \ {\n        my $letter = substr($s, $i, 1);\n        if($i % 2 == 0 && $letter\
    \ =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for(my $i = 0; $i < length($s); $i+=2) {\n      \
    \  if(uc(substr($s, $i, 1)) eq substr($s, $i, 1)) {\n            $count += 1;\n\
    \        }\n    }\n    return $count;\n}", "    my $k = 0;\n    $k++ if uc(substr($s,0,1))\
    \ =~ /[AEIOU]/;\n    $k++ if uc(substr($s,2,1)) =~ /[AEIOU]/;\n    $k++ if uc(substr($s,4,1))\
    \ =~ /[AEIOU]/;\n    $k++ if uc(substr($s,6,1)) =~ /[AEIOU]/;\n    return $k;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n   \
    \     if ($s =~ /[AEIOU]/i) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    return scalar(grep($_ eq uc($_), @{$s}[1,3]));\n}", "    my\
    \ $count = 0;\n    $count++ if $s =~ /[AEIOU]/;\n    return $count;\n}", "   \
    \ my $vowels = \"AEIOU\";\n    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        if ($i % 2 == 0 && index($vowels, substr($s, $i, 1)) >= 0)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    # TODO\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n      \
    \  if ($i % 2 == 0 && $s =~ /[AOUIE]/) {\n            $count++;\n        }\n \
    \   }\n    return $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $ch = substr($s, $i, 1);\n        if ($ch =~ /[aeiou]/i\
    \ && $ch eq uc($ch)) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", '    return 0 unless defined $s;', "    my $count = 0;\n    for(my $i = 0;\
    \ $i < length($s); $i += 2) {\n        if(uc(substr($s, $i, 1)) eq substr($s,\
    \ $i, 1)) {\n            $count++;\n        }\n    }\n    return $count;\n}",
  "    return scalar(grep(\n            /^[AEIOU]$/ && $_ % 2 == 0,\n            split(//,\
    \ $s)\n        ));\n}", "    my $count = 0;\n    my @list = split('', $s);\n \
    \   foreach my $i (0..$#list) {\n        if ($i % 2 == 0) {\n            $count++\
    \ if $list[$i] =~ /[AEIOU]/;\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n        $count++\
    \ if (uc(substr($s, $i, 1)) eq substr($s, $i, 1));\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    foreach my $char (split(//, $s)) {\n        #print\
    \ \"\\nChecking $char\\n\";\n        if ($char =~ /[aeiou]/i) {\n            #print\
    \ \"\\n\\tChecking vowel\\n\";\n            $count++ if ($char =~ /[AEIOU]/);\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for(my $i\
    \ = 0; $i < length($s); $i += 2) {\n        if(substr($s, $i, 1) =~ /[AEIOU]/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    my\
    \ $c = 0;\n    my @a = split(//, $s);\n    my $i = 0;\n    foreach $b (@a) {\n\
    \        if ($i % 2 == 0 && ($b eq 'A' || $b eq 'E' || $b eq 'I' || $b eq 'O'\
    \ || $b eq 'U')) {\n            $c++;\n        }\n        $i++;\n    }\n    return\
    \ $c;\n}", "    my $count = 0;\n    my @indices = get_even_indices($s);\n    foreach\
    \ my $i (@indices) {\n        if ($s =~ m/[A]/g) {\n            $count++;\n  \
    \      }\n    }\n    return $count;\n}", "    my $count = 0;\n    # Only compare\
    \ with upper case letters\n    $s =~ s/[^A-Z]//g;\n    # Put the string into an\
    \ array\n    my @a = split(//, $s);\n    # Check each letter in the array\n  \
    \  foreach my $c (@a) {\n        # If the index is even and the letter is uppercase,\
    \ then increase the count\n        if (index($s, $c) % 2 == 0 && $c =~ /[A-Z]/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    foreach my $i (0..length($s) - 1) {\n        if ($i % 2 ==\
    \ 0) {\n            my $c = substr($s, $i, 1);\n            $count++ if ($c =~\
    \ /[AEIOU]/);\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    for(my $i = 0; $i < length($s); $i += 2) {\n        if(substr($s, $i, 1)\
    \ =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n   \
    \     if ($s =~ /[aeiou]/i) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my @chars = split(//, $s);\n    foreach\
    \ my $i (0..$#chars) {\n        if($i % 2 == 0 && $chars[$i] =~ /[AEIOU]/) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    return\
    \ scalar(grep { $s =~ /$_/ } ('A', 'E', 'I', 'O', 'U'));\n}", "    my @letters\
    \ = split(//, $s);\n    my $i;\n    my $count = 0;\n    for ($i = 0; $i < @letters;\
    \ $i++) {\n        if ($i % 2 == 0 && $letters[$i] =~ /[AEIOU]/) {\n         \
    \   $count++;\n        }\n    }\n    return $count;\n}", "    my $u = 0;\n   \
    \ my $i = 0;\n    while ($i < length($s)) {\n        my $c = substr($s, $i, 1);\n\
    \        $u++ if ($c =~ /[AEIOU]/);\n        $i += 2;\n    }\n    return $u;\n\
    }", "    my $count = 0;\n    # Fill in the code\n    foreach (0..length($s)) {\n\
    \        if ($_ % 2 == 0) {\n            if ($s =~ /[AEIOU]/) {\n            \
    \    $count += 1;\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    my @a = split(//, $s);\n    for(my $i = 0; $i < scalar(@a);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            if ($a[$i] =~ /[AEIOU]/) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n   \
    \     my $c = substr($s, $i, 1);\n        $count++ if ($c =~ /[AEIOU]/);\n   \
    \ }\n    return $count;\n}", "    my $count = 0;\n    my @list = split(//, $s);\n\
    \    my $i = 0;\n    foreach my $l (@list) {\n\tif ($i % 2 == 0) {\n\t    if ($l\
    \ =~ /[AEIOU]/) {\n\t\t$count++;\n\t    }\n\t}\n\t$i++;\n    }\n    return $count;\n\
    }", "    # your code here\n    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        if ($i % 2 == 0 && $s =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $c = 0;\n    for (my $i = 0;\
    \ $i < length($s); $i++) {\n        my $ch = substr($s, $i, 1);\n        if ($ch\
    \ =~ /[AEIOU]/ && $i % 2 == 0) {\n            $c++;\n        }\n    }\n    return\
    \ $c;\n}", "    my @str = split('', $s);\n    my $count = 0;\n    foreach my $index\
    \ (1..$#str) {\n        $count += 1 if uc($str[$index]) =~ /[AEIOU]/;\n    }\n\
    \    return $count;\n}", "    my $i = 0;\n    my $total = 0;\n    while ($i <\
    \ length($s)) {\n        if (substr($s, $i, 1) =~ /[AEIOU]/ && $i % 2 == 0) {\n\
    \            $total++;\n        }\n        $i++;\n    }\n    return $total;\n}",
  "    my $vowels = \"AEIOU\";\n    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $char = substr($s, $i, 1);\n        if (index($vowels,\
    \ $char) >= 0) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $i = 0;\n    my $count = 0;\n    while ($i < length($s)) {\n\tif (is_upper_vowel($s,\
    \ $i)) {\n\t    $count++;\n\t}\n\t$i += 2;\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n        if\
    \ ($s =~ /[AEIOU]/i) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    return scalar(grep{$_ % 2 == 0 && $vowels{uc $_}} 0..length($s)-1);\n\
    }", "    my $count = 0;\n    my @s = split //, $s;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            if ($s[$i] =~ /[AEIOU]/) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }", "    my $n = 0;\n    my $i = 0;\n    my $len = length($s);\n    for (; $i\
    \ < $len; $i += 2) {\n        if ($s =~ /[AEIOU]/i) {\n            ++$n;\n   \
    \     }\n    }\n    return $n;\n}", "    $s =~ s/[^aeiou]//gi;\n    my $count\
    \ = 0;\n    for(my $i = 0; $i < length($s); $i++) {\n        if(($i % 2) == 0\
    \ && $s[$i] =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my @chars = split(//, $s);\n    for(my\
    \ $i = 0; $i < scalar(@chars); $i += 2) {\n        $count++ if(uc($chars[$i])\
    \ eq $chars[$i]);\n    }\n    return $count;\n}", "    my $count = 0;\n    for\
    \ (my $i = 0; $i < length($s); $i += 2) {\n        if (uc($s) =~ m/[aeiou]/) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    return\
    \ 0;\n}", "    my $count = 0;\n    my @arr = split('', $s);\n    for(my $i = 0;\
    \ $i < scalar(@arr); $i += 2) {\n        if(ord($arr[$i]) >= 65 && ord($arr[$i])\
    \ <= 90) {\n            $count++;\n        }\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    my @list = split(//, $s);\n    foreach my $i (0..$#list)\
    \ {\n        if($i % 2 == 0 && $list[$i] =~ /[AEIOU]/) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    foreach my\
    \ $i (0..length($s)-1) {\n        if ($i % 2 == 0) {\n            if ($s =~ m/[AEIOU]/)\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }", "    $s =~ s/[^A,E,I,O,U]//g;\n    my $count = length($s);\n    return $count\
    \ / 2;\n}", "    my $count = 0;\n    $count++ if (uc(substr($s, 0, 1)) eq substr($s,\
    \ 0, 1));\n    $count++ if (uc(substr($s, 2, 1)) eq substr($s, 2, 1));\n    $count++\
    \ if (uc(substr($s, 4, 1)) eq substr($s, 4, 1));\n    $count++ if (uc(substr($s,\
    \ 6, 1)) eq substr($s, 6, 1));\n    return $count;\n}", "    my $count = 0;\n\
    \    for(my $i = 0; $i < length($s); $i += 2) {\n        my $char = substr($s,\
    \ $i, 1);\n        if($char =~ /[AEIOU]/) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my @s = split //, $s;\n    my $result = 0;\n\
    \    for (my $i = 0; $i < @s; $i += 2) {\n        $result++ if is_upper_vowel($s[$i]);\n\
    \    }\n    return $result;\n}", "    my $count = 0;\n    for(my $i = 0; $i <\
    \ length($s); $i += 2) {\n        my $ch = substr($s, $i, 1);\n        $count++\
    \ if($ch =~ /[AEIOU]/);\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    for (my $i = 0; $i < length($s); $i += 2) {\n        if (substr($s, $i, 1)\
    \ =~ /[AEIOU]/) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    return 0 if !$s;\n    my $cnt = 0;\n    for(my $i = 0; $i < length($s);\
    \ $i += 2) {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[AEIOU]/)\
    \ {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}", "    my $count\
    \ = 0;\n    for(my $i = 0; $i < length($s); $i++) {\n        if(substr($s, $i,\
    \ 1) =~ /[AEIOU]/ && $i % 2 == 0) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $c = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i += 2) {\n        if(uc(substr($s, $i, 1)) eq substr($s, $i, 1)) {\n     \
    \       $c++;\n        }\n    }\n    return $c;\n}", "    my $count = 0;\n   \
    \ for(my $i = 0; $i < length($s); $i++) {\n        if (uc(substr($s, $i, 1)) =~\
    \ /[AEIOU]/ && $i % 2 == 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i +=\
    \ 2) {\n        if (uc($s) eq $s) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my @string = split(//, $s);\n\
    \    foreach my $i (0..$#string) {\n        if ( $i % 2 == 0 && $string[$i] =~\
    \ /[AEIOU]/ ) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my @vowels = (\"A\", \"E\", \"I\", \"O\", \"U\");\n\
    \    for (my $i = 0; $i < length($s); $i++) {\n        if (($i % 2 == 0) && (grep\
    \ {$_ eq $s[$i]} @vowels)) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    foreach my $i (0..length($s)-1) {\n  \
    \      $count++ if ($i % 2 == 0 && $s =~ /[AEIOU]/);\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n      \
    \  my $c = substr($s, $i, 1);\n        if ($i % 2 == 0 && $c =~ /[AEIOU]/) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    my @s =\
    \ split(//, $s);\n    my $count = 0;\n    for (my $i = 0; $i < scalar(@s); $i\
    \ += 2) {\n        if ($s[$i] =~ /[AEIOU]/) {\n            $count++;\n       \
    \ }\n    }\n    return $count;\n}", "    my $x;\n    $x += /[aeiou]/i && !($i++\
    \ % 2) for split(//, $s);\n    return $x;\n}", "    my $count = 0;\n    for (my\
    \ $i = 0; $i < length($s); $i++) {\n        if ($i % 2 == 0 && $s =~ /[AEIOU]/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
