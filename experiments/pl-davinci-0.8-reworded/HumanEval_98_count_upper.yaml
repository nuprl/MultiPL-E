name: HumanEval_98_count_upper
language: pl
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# >>> count_upper(\"aBCdEf\")\n# 1\n# >>> count_upper(\"abcdefg\"\
  )\n# 0\n# >>> count_upper(\"dBBE\")\n# 0\nsub count_upper {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_upper;\n\
  \        if(eq_deeply($candidate->(\"aBCdEf\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdefg\"),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dBBE\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"B\"),0)) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"U\"),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  EEEE\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    for (my $i = 0; $i < length($s); $i += 2) {\n\
    \        if ($s =~ /[AEIOU]/i) {\n            $count++;\n        }\n    }\n  \
    \  return $count;\n}", "    my $count = 0;\n    # Your code here\n    return $count;\n\
    }", "    my $count = 0;\n    my @vowels = (\"A\", \"E\", \"I\", \"O\", \"U\");\n\
    \    # @s = split(//, $s);\n    for (my $i = 0; $i < length($s); $i++) {\n   \
    \     if ($i % 2 == 0) {\n            for my $vowel (@vowels) {\n            \
    \    if (substr($s, $i, 1) eq $vowel) {\n                    $count++;\n     \
    \           }\n            }\n        }\n    }\n    return $count;\n}", "    #\n\
    \    # 1. Get each character from the string and put it in an array.\n    #\n\
    \    my @chars = split //, $s;\n    #\n    # 2. Set up count for number of uppercase\
    \ vowels in even indices.\n    #\n    my $even_upper_vowel_count = 0;\n    #\n\
    \    # 3. Go through all the characters.\n    #\n    foreach my $char (@chars)\
    \ {\n        #\n        # 3.1. Check if the character is uppercase vowel and is\
    \ at even index.\n        #\n        if( $char =~ /[AEIOU]/ && $char ne uc($char)\
    \ ) {\n            #\n            # 3.1.1. Increase the count by 1.\n        \
    \    #\n            $even_upper_vowel_count++;\n        }\n    }\n    #\n    #\
    \ 4. Return the count.\n    #\n    return $even_upper_vowel_count;\n}", "    $s\
    \ =~ s/[aeiou]/1/gi;\n    my $c = $s =~ s/^[^1]*[1]/ /g;\n    $c += $s =~ s/[1][^1]*[1]/\
    \ /g;\n    $c;\n}", "    my $c = 0;\n    for (my $i = 0; $i < length($s); $i +=\
    \ 2) {\n        if ($s =~ /^A|E|I|O|U/i) {\n            $c++;\n        }\n   \
    \ }\n    return $c;\n}", "    my @l = split(//, $s);\n    my $counter = 0;\n \
    \   for my $i (0..@l-1) {\n        if ($i % 2 == 0 && $l[$i] =~ /[AEIOU]/) {\n\
    \            $counter++;\n        }\n    }\n    return $counter;\n}", "    return\
    \ scalar(grep { is_upper_vowel($_) } even_indexes($s));\n}", "    my $i = 0;\n\
    \    my $count = 0;\n    while($i < length($s)) {\n        if (uc(substr($s, $i,\
    \ 1)) eq substr($s, $i, 1) && $i % 2 == 0) {\n            $count++;\n        }\n\
    \        $i++;\n    }\n    return $count;\n}", "    my $count = 0;\n    for(my\
    \ $i = 0; $i < length($s); $i+=2) {\n        if(uc(substr($s, $i, 1)) eq substr($s,\
    \ $i, 1)) {\n            $count++;\n        }\n    }\n    return $count;\n}",
  "    # ...\n}", "    my $result = 0;\n    # Replace \"for my $ch...\" with a for\
    \ loop\n    my $ch = substr($s,0,1);\n    for(my $i = 0; $i<length($s); $i++)\
    \ {\n        if (is_upper($ch) && is_vowel($ch) && is_even($i)) {\n          \
    \  $result++;\n        }\n        $ch = substr($s,$i+1,1);\n    }\n    # end of\
    \ replacement\n    return $result;\n}", "    my $count = 0;\n    for (my $i =\
    \ 0; $i < length($s); $i += 2) {\n        if (uc(substr($s, $i, 1)) =~ /[AEIOU]/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for (my $i = 0; $i < length($s); $i++) {\n        my $ch =\
    \ substr($s, $i, 1);\n        $count++ if $ch =~ /[AEIOU]/ && $i % 2 == 0;\n \
    \   }\n    return $count;\n}", "    # YOUR CODE HERE\n    # return 0 if you don't\
    \ like this string\n    my $count = 0;\n    for(my $i = 0; $i < length($s); $i++)\
    \ {\n        my $letter = substr($s, $i, 1);\n        $count++ if uc($letter)\
    \ eq $letter && ($i % 2 == 0);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    for (my $i = 0; $i < length($s); $i+=2) {\n        my $c = substr($s,\
    \ $i, 1);\n        if ($c =~ /[AEIOU]/) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    for (my $i = 0; $i <\
    \ length($s); $i += 2) {\n        if (uc(substr($s, $i, 1)) =~ /[AEIOU]/) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    # Complete\
    \ this function\n    my $c = 0;\n    my @s = split //, $s;\n    for (my $i = 0;\
    \ $i < @s; $i++) {\n        $c++ if ($i % 2 == 0 and $s[$i] =~ /[AEIOU]/);\n \
    \   }\n    return $c;\n}", "    my $count = 0;\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        my $char = substr($s, $i, 1);\n        if ($char =~ /[AEIOU]/\
    \ && $i % 2 == 0) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $counter = 0;\n    my @chars = split(//, $s);\n    foreach my $i (0..$#chars)\
    \ {\n        if($i % 2 == 0) {\n            if($chars[$i] =~ /[AEIOU]/) {\n  \
    \              $counter++;\n            }\n        }\n    }\n    return $counter;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
