language: pl
name: HumanEval_34_unique
results:
- exit_code: 255
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    if(!@$l) {\n        return @$l;\n    }\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjtcnkrcs.pl line 20, at
    end of line

    syntax error at /tmp/tmpjtcnkrcs.pl line 20, at EOF

    Execution of /tmp/tmpjtcnkrcs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    return undef unless defined $l;\n    my @l = @$l;\n    my %seen = ();\n \
    \   my @unique = grep { ! $seen{$_} ++ } @l;\n    return @unique;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    grep($h{$_}++ == 0, @$l);\n    keys(%h);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%s, @u);\n    map { $s{$_} = undef } @$l;\n    @u = sort { $a <=> $b }\
    \ keys %s;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    @$l = sort @$l;\n    my $i = 0;\n    while ($i < @$l) {\n        if ($i <\
    \ @$l - 1 && $l->[$i] == $l->[$i + 1]) {\n            splice @$l, $i, 1;\n   \
    \     } else {\n            $i++;\n        }\n    }\n    return @$l;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @a);\n    %h = map {($_, 1)} @$l;\n    @a = sort keys %h;\n    return\
    \ \\@a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    return sort(keys(%{{map{($_,0)} @$l}}));\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 255
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%hash);\n    my($i);\n    my(@out);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpcfca0z_o.pl line 20, at
    end of line

    syntax error at /tmp/tmpcfca0z_o.pl line 20, at EOF

    Execution of /tmp/tmpcfca0z_o.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %s;\n    @s{@$l} = ();\n    sort { $a <=> $b } keys %s;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach $i (@$l) {\n        $h{$i} = 1;\n    }\n    foreach\
    \ $i (sort keys %h) {\n        push(@r, $i);\n    }\n    return(@r);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @r);\n    foreach (@$l) { $h{$_} = 1 }\n    @r = sort keys %h;\n \
    \   return wantarray ? @r : \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%s);\n    grep( !$s{$_}++, @$l );\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 255
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%a);\n    my($r);\n    my($i);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmptr428q9n.pl line 20, at
    end of line

    syntax error at /tmp/tmptr428q9n.pl line 20, at EOF

    Execution of /tmp/tmptr428q9n.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %h;\n    return grep(!$h{$_}++, @$l);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    return unless $l;\n    return @$l if ref($l) eq 'ARRAY';\n    return values\
    \ %{{map { $_ => 1 } @_}};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 0
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my %u;\n    $u{$_} = 1 foreach @$l;\n    [sort {$a <=> $b} keys %u];\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n   \
    \     if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9,\
    \ 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%h, @u);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    foreach\
    \ my $e (sort keys %h) {\n        push(@u, $e);\n    }\n    return \\@u;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n   \
    \     if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9,\
    \ 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%seen, @ret);\n    foreach my $e (@$l) {\n        push(@ret, $e) unless\
    \ $seen{$e}++;\n    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my @u = ();\n    my %h = ();\n    foreach (@$l) {\n        unless (exists\
    \ $h{$_}) {\n            $h{$_} = 1;\n            push @u, $_;\n        }\n  \
    \  }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n\
    \    my(%seen, @uniq);\n    for my $x (@$l) {\n        push(@uniq, $x) unless\
    \ $seen{$x}++;\n    }\n    return @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
