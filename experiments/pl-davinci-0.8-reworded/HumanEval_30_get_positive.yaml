name: HumanEval_30_get_positive
language: pl
prompt: "# Return only positive numbers in the array.\n# >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
  \ -10])\n# [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n\
  \        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
  \ -2]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @positive = ();\n    for (@$l) {\n        push @positive, $_\
    \ if $_ > 0;\n    }\n    return @positive;\n}", "    my @positive = grep {$_ >\
    \ 0} @$l;\n    return @positive;\n}", "    return grep { $_ > 0 } @$l;\n}", " \
    \   return grep { $_ > 0 } @$l;\n}", "    my @s = grep $_ > 0, @$l;\n    return\
    \ @s;\n}", "    my @pos = ();\n    for (@$l) {\n        if ($_ > 0) {\n      \
    \      push @pos, $_;\n        }\n    }\n    return @pos;\n}", "    return grep\
    \ {$_ > 0} @$l;\n}", "    my @ll;\n    foreach my $el (@$l) {\n        push @ll,\
    \ $el if $el > 0;\n    }\n    return @ll;\n}", "    my @a = grep { $_ > 0 } @$l;\n\
    \    return \\@a;\n}", "    my $f = sub { return $_[0] > 0; };\n    return filter($f,\
    \ $l);\n}", "    my @positive = grep {$_ > 0} @$l;\n    return @positive;\n}",
  "    return grep { $_ > 0 } @$l;\n}", "    my @r = grep { $_ > 0 } @$l;\n    return\
    \ \\@r;\n}", "    my @a = ();\n    for my $n (@$l) {\n        if ($n > 0) {\n\
    \            push @a, $n;\n        }\n    }\n    return @a;\n}", "    my @p =\
    \ map { $_ > 0 ? $_ : () } @$l;\n    return \\@p;\n}", "    my @positive;\n  \
    \  foreach my $item (@$l) {\n        if ($item > 0) {\n            push @positive,\
    \ $item;\n        }\n    }\n    return @positive;\n}", "    return [grep { $_\
    \ > 0 } @$l];\n}", "    @$l = grep($_ > 0, @$l);\n    return $l;\n}", "    grep\
    \ { $_ > 0 } @$l;\n}", "    return grep { $_ > 0 } @$l;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
