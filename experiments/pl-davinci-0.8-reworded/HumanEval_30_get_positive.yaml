name: HumanEval_30_get_positive
language: pl
prompt: "# Return only positive numbers in the array.\n# >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
  \ -10])\n# [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n\
  \        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
  \ -2]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return grep { $_ > 0 } @$l;\n}", "    my @res = ();\n    foreach\
    \ (@$l) {\n        push @res, $_ if $_ > 0;\n    }\n    return @res;\n}", "  \
    \  return @{ $l };\n}", "    my @array;\n    foreach my $i(@$l){\n        if($i\
    \ > 0){\n            push @array, $i;\n        }\n    }\n    return \\@array;\n\
    }", "    return grep { $_ > 0 } @$l;\n}", "    my @result = ();\n    for my $elem\
    \ (@$l) {\n        if ($elem > 0) {\n            push @result, $elem;\n      \
    \  }\n    }\n    return @result;\n}", "    my @result = ();\n    foreach (@$l)\
    \ {\n        push @result, $_ if $_ > 0;\n    }\n    return @result;\n}", "  \
    \  my @l2 = ();\n    foreach my $i (@$l) {\n        if ($i > 0) {\n          \
    \  push @l2, $i;\n        }\n    }\n    return @l2;\n}", "    return grep { $_\
    \ > 0 } @$l;\n}", "    my @out;\n    for my $n (@$l) {\n        push @out, $n\
    \ if $n > 0;\n    }\n    return @out;\n}", "    grep { $_ > 0 } @$l;\n}", "  \
    \  my @res = ();\n    for my $i (@$l) {\n        if ($i > 0) {\n            push\
    \ @res, $i;\n        }\n    }\n    return @res;\n}", "    my $ret = [ grep { $_\
    \ > 0 } @$l ];\n    return $ret;\n}", "    my @p = ();\n    foreach (@$l) {\n\
    \        push @p, $_ if $_ > 0;\n    }\n    return @p;\n}", "    return grep {$_\
    \ > 0} @$l;\n}", "    my $ret = [];\n    foreach (@$l) {\n        push @$ret,\
    \ $_ if $_ > 0;\n    }\n    return $ret;\n}", "    my @positive = grep {$_ > 0}\
    \ @$l;\n    return @positive;\n}", "    my $i = 0;\n    my @x = map { $i++ if\
    \ $_ > 0; $_ } @$l;\n    return @x[ grep { $x[$_] > 0 } (0..$#x) ];\n}", "   \
    \ grep($_ > 0, @$l);\n}", "    my @nums = ();\n    foreach my $num (@$l) {\n \
    \       if ($num > 0) {\n            push @nums, $num;\n        }\n    }\n   \
    \ return @nums;\n}", "    my @positive = ();\n    foreach my $x (@$l) {\n    \
    \    if ($x > 0) {\n            push @positive, $x;\n        }\n    }\n    return\
    \ @positive;\n}", "    return [grep { $_ > 0 } @$l];\n}", "    return [grep {\
    \ $_ > 0 } @$l];\n}", "    grep { $_ > 0 } @$l;\n}", "    my @positive = ();\n\
    \    for(my $i = 0; $i < scalar(@$l); $i++){\n        if($$l[$i] > 0){\n     \
    \       push(@positive, $$l[$i]);\n        }\n    }\n    return @positive;\n}",
  "    my @a = ();\n    for (@$l) {\n        push @a, $_ if $_ > 0;\n    }\n    return\
    \ @a;\n}", "    return grep { $_ > 0 } @$l;\n}", "    return [ grep { $_ > 0 }\
    \ @$l ];\n}", "    my @ret = ();\n    for my $el (@$l) {\n        push @ret, $el\
    \ if $el > 0;\n    }\n    @ret;\n}", "    my @l2 = grep { $_ > 0 } @$l;\n    return\
    \ \\@l2;\n}", "    $l; #delete this and fill in the missing part below.\n}", " \
    \   my @pos;\n    for(@$l) {\n        push @pos, $_ if $_ > 0;\n    }\n    @pos;\n\
    }", "    my @ret = grep { $_ > 0 } @$l;\n    return \\@ret;\n}", "    return [grep\
    \ { $_ > 0 } @$l];\n}", "    return grep($_ > 0, @$l);\n}", "    my(@result) =\
    \ ();\n    for my $i (@$l) {\n        if ($i > 0) {\n            push @result,\
    \ $i;\n        }\n    }\n    return @result;\n}", "    return [ grep {$_ > 0}\
    \ @$l ];\n}", "    my @ret = ();\n    for my $num (@$l) {\n        if ($num >\
    \ 0) {\n            push @ret, $num;\n        }\n    }\n    return @ret;\n}",
  "    my @res = ();\n    foreach my $n (@$l) {\n        if ($n > 0) {\n         \
    \   push @res, $n;\n        }\n    }\n    return @res;\n}", "    my @ret = grep\
    \ {$_ > 0} @$l;\n    return @ret;\n}", "    my @l = @$l;\n    @l = grep { $_ >\
    \ 0 } @l;\n    return \\@l;\n}", "    my @a = ();\n    foreach (@$l) {\n     \
    \   push @a, $_ if $_ > 0;\n    }\n    return @a;\n}", "    my @res = ();\n  \
    \  foreach my $x (@$l) {\n        if ($x > 0) {\n            push @res, $x;\n\
    \        }\n    }\n    return @res;\n}", "    my @a = grep { $_ > 0 } @$l;\n \
    \   return \\@a;\n}", "    my @m = map { $_ if $_ > 0 } @$l;\n    return \\@m;\n\
    }", "    my @result = ();\n    for(@$l) {\n        if($_ > 0) {\n            push\
    \ @result, $_;\n        }\n    }\n    return @result;\n}", "    my @arr;\n   \
    \ foreach my $num (@$l) {\n        if ($num > 0) {\n            push @arr, $num;\n\
    \        }\n    }\n    return @arr;\n}", "    my @ret;\n    for my $i (@$l) {\n\
    \        push @ret, $i if $i > 0;\n    }\n    return @ret;\n}", "    return grep\
    \ {$_ > 0} @$l;\n}", "    my $r = [];\n    for(@$l) {\n        push @$r, $_ if\
    \ $_ > 0;\n    }\n    return $r;\n}", "    my @pos = grep { $_ > 0 } @$l;\n  \
    \  return \\@pos;\n}", "    my $result = [];\n    map { push @$result, $_ if $_\
    \ > 0 } @$l;\n    return $result;\n}", "    my @list = @$l;\n    my @positive\
    \ = grep { $_ > 0 } @list;\n    return @positive;\n}", "    $l =~ s/[^\\d-]/ /g;\n\
    \    my @n = split /\\s+/, $l;\n    my @p = ();\n    foreach (@n) {\n        push\
    \ @p, $_ if $_ > 0;\n    }\n    return @p;\n}", "    my @n = grep {\n        $_\
    \ > 0\n    } @$l;\n    return \\@n;\n}", "    return [map {$_ >= 0 ? $_ : ()}\
    \ @$l];\n}", "    return list_filter($l, sub { $_[0] > 0 });\n}", "    my @new_array\
    \ = ();\n    foreach (@$l) {\n        if ($_ > 0) {\n            push(@new_array,\
    \ $_);\n        }\n    }\n    return @new_array;\n}", "    return [ grep { $_\
    \ > 0 } @$l ];\n}", "    return $l->grep(sub { return $_ > 0 });\n}", "    my\
    \ $i = 0;\n    my @result = ();\n    while ($i < scalar(@$l)) {\n        if ($l->[$i]\
    \ > 0) {\n            push(@result, $l->[$i]);\n        }\n        $i++;\n   \
    \ }\n    return @result;\n}", "    return grep { $_ > 0 } @$l;\n}", "    return\
    \ [ grep { $_ > 0 } @$l ];\n}", "    my @answer = grep( $_ > 0, @$l );\n    return\
    \ \\@answer;\n}", "    my @res = grep $_ > 0, @$l;\n    return @res;\n}", "  \
    \  my @new_list = grep {$_ > 0} @$l;\n    return @new_list;\n}", "    return grep\
    \ { $_ > 0 } @$l;\n}", "    my @new_list = ();\n    foreach my $item (@$l) {\n\
    \tif ($item > 0) {\n\t    push @new_list, $item;\n\t}\n    }\n    return @new_list;\n\
    }", "    my @r = ();\n    foreach my $elem (@$l) {\n        if ($elem > 0) {\n\
    \            push @r, $elem;\n        }\n    }\n    return @r;\n}", "    my @new\
    \ = ();\n    for my $x (@$l) {\n        if ($x > 0) {\n            push @new,\
    \ $x;\n        }\n    }\n    return @new;\n}", "    my @ret = grep { $_ > 0 }\
    \ @$l;\n    return @ret;\n}", "    my @m = ();\n    for my $x (@$l) {\n\tif ($x\
    \ > 0) {\n\t    push @m, $x;\n\t}\n    }\n    return @m;\n}", "    my @new_l =\
    \ ();\n    foreach my $x (@$l) {\n        if ($x > 0) {\n            push @new_l,\
    \ $x;\n        }\n    }\n    return @new_l;\n}", "    return [grep $_ > 0, @$l];\n\
    }", "    my @positives = grep {$_ > 0} @$l;\n    return @positives;\n}", "   \
    \ [ grep { $_ > 0 } @$l ];\n}", "    return [grep { $_ > 0 } @$l];\n}", "    [\
    \ grep { $_ > 0 } @$l ];\n}", "    my @p;\n    foreach my $n (@$l) {\n       \
    \ if ($n > 0) {\n            push @p, $n;\n        }\n    }\n    return @p;\n}",
  "    return grep { $_ > 0 } @$l;\n}", "    my @positives = grep { $_ > 0 } @$l;\n\
    \    return @positives;\n}", "    grep { $_ > 0 } @$l;\n}", "    return [ grep\
    \ {$_ > 0} @$l ];\n}", "    return $m = [ grep { $_ > 0 } @$l ];\n}", "    my\
    \ @positives = ();\n    for my $e (@$l) {\n        if ($e > 0) {\n           \
    \ push @positives, $e;\n        }\n    }\n    return @positives;\n}", "    my\
    \ @l = @$l;\n    my @positive = grep $_ > 0, @l;\n    return @positive;\n}", " \
    \   my @l = @$l;\n    my @result = ();\n    for my $num (@l) {\n        if ($num\
    \ > 0) {\n            push @result, $num;\n        }\n    }\n    return @result;\n\
    }", "    my @p;\n    for my $x (@$l) {\n        push @p, $x if $x > 0;\n    }\n\
    \    return @p;\n}", "    my $new = [];\n    for my $e (@$l) {\n        push @$new,\
    \ $e if $e > 0;\n    }\n    return $new;\n}", "    return grep { $_ > 0 } @$l;\n\
    }", "    my @result = ();\n    for my $i (0 .. $#$l) {\n        my $num = $l->[$i];\n\
    \        if ($num > 0) {\n            push @result, $num;\n        }\n    }\n\
    \    return \\@result;\n}", "    my @result = ();\n    foreach my $i (@$l) {\n\
    \        if ($i > 0) {\n            push @result, $i;\n        }\n    }\n    return\
    \ @result;\n}", "    return [map { $_ > 0 ? $_ : () } @$l];\n}", "    my @positive\
    \ = grep { $_ > 0 } @$l;\n    return \\@positive;\n}", "    my @result = grep\
    \ { $_ > 0 } @$l;\n    return @result;\n}", "    return grep { $_ > 0 } @$l;\n\
    }", "    $l = [grep {$_ > 0} @$l];\n    return $l;\n}", "    my(@p);\n    foreach\
    \ my $x (@$l) {\n        push(@p, $x) if $x > 0;\n    }\n    return @p;\n}", " \
    \   my @positives = ();\n    foreach (@$l) {\n        if ($_ > 0) {\n        \
    \    push @positives, $_;\n        }\n    }\n    return @positives;\n}", "   \
    \ my @pos_nums = grep { $_ > 0 } @$l;\n    return @pos_nums;\n}", "    my $result\
    \ = [];\n    for my $n (@$l) {\n        push @$result, $n if $n > 0;\n    }\n\
    \    return $result;\n}", "    my @result = map($_ > 0 ? $_ : (), @$l);\n    return\
    \ \\@result;\n}", "    return grep { $_ > 0 } @$l;\n}", "    my @res = grep {\n\
    \        $_ > 0\n    } @$l;\n    return \\@res;\n}", "    my @pos = ();\n    foreach\
    \ my $e (@$l) {\n        if ($e > 0) {\n            push @pos, $e;\n        }\n\
    \    }\n    return @pos;\n}", "    my @out = grep { $_ > 0 } @$l;\n    return\
    \ @out;\n}", "    my @answer = ();\n    # Push positive numbers in the array.\n\
    \    foreach my $num (@$l) {\n        if ($num > 0) {\n            push @answer,\
    \ $num;\n        }\n    }\n    return @answer;\n}", "    my @ret;\n    while (my\
    \ $n = shift @$l) {\n        push @ret, $n if $n > 0;\n    }\n    return @ret;\n\
    }", "    return grep { $_ > 0 } @$l;\n}", "    my $result = [];\n    for my $el(@$l)\
    \ {\n        if ($el > 0) {\n            push(@$result, $el);\n        }\n   \
    \ }\n    return $result;\n}", "    my @pos = ();\n    foreach my $n(@$l) {\n \
    \       if ($n > 0) {\n            push @pos, $n;\n        }\n    }\n    return\
    \ @pos;\n}", "    return grep { $_ > 0 } @$l;\n}", "    my @output;\n    for(@$l)\
    \ {\n        push @output, $_ if $_ > 0;\n    }\n    return @output;\n}", "  \
    \  my @ret;\n    foreach my $i (@$l) {\n        push @ret, $i if $i > 0;\n   \
    \ }\n    return @ret;\n}", "    my $filtered = filter($l, sub {$_[0] > 0});\n\
    \    return $filtered;\n}", "    my @result = ();\n    for my $i (@$l) {\n   \
    \     if ($i > 0) {\n            push @result, $i;\n        }\n    }\n    return\
    \ @result;\n}", "    my @positive = grep { $_ > 0 } @$l;\n    return \\@positive;\n\
    }", "    my $r = [];\n    for(@$l) {\n        if($_ > 0) {\n            push @$r,\
    \ $_;\n        }\n    }\n    return $r;\n}", "    return grep {$_ > 0} @$l;\n}",
  "    return grep { $_ > 0 } @$l;\n}", "    my @positives = grep { $_ > 0 } @$l;\n\
    \    return \\@positives;\n}", "    return [grep { $_ > 0 } @$l];\n}", "    my\
    \ @positive = ();\n    foreach my $x (@$l) {\n        if ($x > 0) {\n        \
    \    push @positive, $x;\n        }\n    }\n    return @positive;\n}", "    my\
    \ @n = ();\n    for my $i (@$l) {\n        push @n, $i if $i > 0;\n    }\n   \
    \ return @n;\n}", "    return [grep { $_ > 0 } @$l];\n}", "    my $r = [];\n \
    \   for my $i (@$l) {\n        push @$r, $i if $i > 0;\n    }\n    return $r;\n\
    }", "    my @list = @$l;\n    my @positive = ();\n    for my $item (@list) {\n\
    \        if ($item > 0) {\n            push @positive, $item;\n        }\n   \
    \ }\n    return @positive;\n}", "    my @result = ();\n    foreach my $e (@$l)\
    \ {\n        if ($e > 0) {\n            push @result, $e;\n        }\n    }\n\
    \    return @result;\n}", "    return grep {$_ > 0} @$l;\n}", "    grep { $_ >\
    \ 0 } @$l;\n}", "    # your code goes here\n    my @result = grep {$_ > 0} @$l;\n\
    \    return @result;\n}", "    my @positives = ();\n    for my $elt (@$l) {\n\
    \        if ($elt > 0) {\n            push @positives, $elt;\n        }\n    }\n\
    \    return @positives;\n}", "    my @res = ();\n    for my $i (@$l) {\n     \
    \   if ($i > 0) {\n            push @res, $i;\n        }\n    }\n    return @res;\n\
    }", "    return [ grep { $_ > 0 } @$l ];\n}", "    my @new_list = map { $_ > 0\
    \ ? $_ : () } @$l;\n    return @new_list;\n}", "    return filter {$_ >= 0} @$l;\n\
    }", "    my @return;\n    for my $item (@$l) {\n        push @return, $item if\
    \ $item > 0;\n    }\n    return @return;\n}", "    return grep {$_ > 0} @$l;\n\
    }", "    my @p;\n    foreach my $e (@$l) {\n        push @p, $e if $e > 0;\n \
    \   }\n    return @p;\n}", "    my @positives = grep { $_ > 0 } @$l;\n    return\
    \ \\@positives;\n}", "    my @result = grep {$_ > 0} @$l;\n    return \\@result;\n\
    }", "    return [ grep { $_ > 0 } @$l ];\n}", "    return grep { $_ > 0 } @$l;\n\
    }", "    my @result = ();\n    for my $i (@$l) {\n        if ($i > 0) {\n    \
    \        push @result, $i;\n        }\n    }\n    return @result;\n}", "    my\
    \ @list = ();\n    foreach my $i (@$l) {\n        if ($i > 0) {\n            push\
    \ @list, $i;\n        }\n    }\n    return @list;\n}", "    return [grep { $_\
    \ > 0 } @$l];\n}", "    my @nums = split /\\s+/, $l;\n    my @new_nums = ();\n\
    \    for my $n (@nums) {\n        if ($n > 0) {\n            push @new_nums, $n;\n\
    \        }\n    }\n    return \\@new_nums;\n}", "    my @positive = ();\n    foreach\
    \ (@$l) {\n        push @positive, $_ if ($_ > 0);\n    }\n    return @positive;\n\
    }", "    return (grep { $_ > 0 } @$l);\n}", "    [grep $_ > 0, @$l];\n}", "  \
    \  my @s = grep {$_ > 0} @$l;\n    return \\@s;\n}", "    my @result = ();\n \
    \   foreach my $element (@$l) {\n        if ($element > 0) {\n            push\
    \ @result, $element;\n        }\n    }\n    return @result;\n}", "    return map\
    \ { $_ > 0 ? $_ : () } @$l;\n}", "    @{$l} = grep $_ > 0, @{$l};\n    return\
    \ $l;\n}", "    my $rs = [];\n    foreach (@$l) {\n        push(@$rs, $_) if $_\
    \ > 0;\n    }\n    return $rs;\n}", "    my @res = ();\n    my $max = @$l;\n \
    \   foreach my $item (@$l) {\n        if ($item > 0) {\n            push @res,\
    \ $item;\n        }\n    }\n    return @res;\n}", "    return grep {$_ > 0} @$l;\n\
    }", "    $l = [$l] unless ref $l eq 'ARRAY';\n    my @ret = ();\n    for my $item\
    \ (@$l) {\n        push @ret, $item if $item > 0;\n    }\n    return \\@ret;\n\
    }", "    my @positive = ();\n    foreach my $i (@$l) {\n        if ($i > 0) {\n\
    \            push @positive, $i;\n        }\n    }\n    return @positive;\n}",
  "    my $i = 0;\n    my @r = ();\n    while ($i < scalar(@$l)) {\n        if ($l->[$i]\
    \ > 0) {\n            push @r, $l->[$i];\n        }\n        $i++;\n    }\n  \
    \  return @r;\n}", "    [grep { $_ > 0 } @$l];\n}", "    return [grep { $_ > 0\
    \ } @$l];\n}", "    [ grep { $_ > 0 } @$l ];\n}", "    return grep { $_ > 0 }\
    \ @$l;\n}", "    return (grep {$_ > 0} @$l);\n}", "    my @positive = grep { $_\
    \ > 0 } @$l;\n    return \\@positive;\n}", "    grep { $_ > 0 } @$l;\n}", "  \
    \  my @result = grep {$_ > 0} @$l;\n    return \\@result;\n}", "    return [grep\
    \ { $_ > 0 } @$l];\n}", "    return [grep { $_ > 0 } @$l];\n}", "    my $result\
    \ = [];\n    for my $i (@$l) {\n        if ($i > 0) {\n            push @$result,\
    \ $i;\n        }\n    }\n    return $result;\n}", "    my @ret = ();\n    for\
    \ my $n (@$l) {\n        if ($n > 0) {\n            push @ret, $n;\n        }\n\
    \    }\n    return @ret;\n}", "    return list(grep {  $_ > 0; } @$l);\n}", " \
    \   my @new_list = ();\n    for my $e (@$l) {\n        if ($e > 0) {\n       \
    \     push @new_list, $e;\n        }\n    }\n    return @new_list;\n}", "    my\
    \ @out;\n    my @nums = @$l;\n    for my $n (@nums) {\n        if($n >= 0) {\n\
    \            push @out, $n;\n        }\n    }\n    return @out;\n}", "    my @r\
    \ = grep {$_ > 0} @$l;\n    return @r;\n}", "    my @new;\n    for my $e (@$l)\
    \ {\n        push @new, $e if $e > 0;\n    }\n    return @new;\n}", "    my @result\
    \ = ();\n    for my $i (@$l) {\n        if ($i > 0) {\n            push @result,\
    \ $i;\n        }\n    }\n    return @result;\n}", "    return grep { $_ > 0 }\
    \ @$l;\n}", "    my(@pos) = grep $_ > 0, @$l;\n    return @pos;\n}", "    return\
    \ grep($_ > 0, @$l);\n}", "    my @pos = ();\n    for (@$l) {\n        if ($_\
    \ > 0) {\n            push @pos, $_;\n        }\n    }\n    return @pos;\n}",
  "    my(@positive);\n    for my $x (@$l) {\n        if ($x > 0) {\n            push\
    \ @positive, $x;\n        }\n    }\n    @positive;\n}", "    my @pos;\n    my\
    \ $i;\n    foreach $i (@$l) {\n        if ($i > 0) {\n            push @pos, $i;\n\
    \        }\n    }\n    return @pos;\n}", "    return [grep { $_ > 0 } @$l];\n}",
  "    my @result = ();\n    foreach(@$l) {\n        if($_ > 0) {\n            push(@result,\
    \ $_);\n        }\n    }\n    return @result;\n}", "    my @p = ();\n    for my\
    \ $n (@$l) {\n        push @p, $n if $n > 0;\n    }\n    return @p;\n}", "   \
    \ my $i;\n    my @positive;\n    for($i = 0; $i < @$l; $i++) {\n        if ($l->[$i]\
    \ > 0) {\n            push @positive, $l->[$i];\n        }\n    }\n    return\
    \ @positive;\n}", "    return grep {$_ > 0} @$l;\n}", "    my @ret = ();\n   \
    \ for my $i (@$l) {\n        if ($i > 0) {\n            push @ret, $i;\n     \
    \   }\n    }\n    return @ret;\n}", "    my @ll = ();\n    for my $e (@$l) {\n\
    \        push @ll, $e if $e > 0;\n    }\n    return @ll;\n}", "    return [grep\
    \ { $_ > 0 } @$l];\n}", "    my @new_array = ();\n    for(@$l) {\n        if($_\
    \ > 0) {\n            push @new_array, $_;\n        }\n    }\n    return @new_array;\n\
    }", "    my @ret = ();\n    for my $x (@$l) {\n        if ($x > 0) {\n       \
    \     push @ret, $x;\n        }\n    }\n    return @ret;\n}", "    my(@l) = @$l;\n\
    \    my(@pos) = ();\n    foreach my $num (@l) {\n        if ($num > 0) {\n   \
    \         push(@pos, $num);\n        }\n    }\n    return @pos;\n}", "    my @result\
    \ = ();\n    my @numbers = @$l;\n    foreach my $number (@numbers) {\n       \
    \ if ($number > 0) {\n            push @result, $number;\n        }\n    }\n \
    \   return @result;\n}", "    # your code here\n}", "    grep { $_ > 0 } @$l;\n\
    }", "    my @pos = grep { $_ > 0 } @$l;\n    return \\@pos;\n}", "    return [grep\
    \ { $_ > 0 } @$l];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
