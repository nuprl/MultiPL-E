name: HumanEval_78_hex_key
language: pl
prompt: "# You have been tasked to write a function that receives \n# a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n# digits that are primes\
  \ (prime number, or a prime, is a natural number \n# greater than 1 that is not\
  \ a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n# So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is\
  \ always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n\
  # Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\")\n# 2\n# >>> hex_key(\"\
  ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n# 6\n# >>> hex_key(\"2020\"\
  )\n# 2\nsub hex_key {\n    my($num) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
  \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
  ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $cnt = 0;\n    my %primes = (0 => 1, 1 => 1, 4 => 1, 6 => 1,\
    \ 8 => 1, A => 1, C => 1, E => 1);\n    my @nums = split(//, $num);\n    foreach\
    \ my $n (@nums) {\n        unless (defined $primes{$n}) {\n            $cnt++;\n\
    \        }\n    }\n    return $cnt;\n}", "    my $res = 0;\n    my %primes = (\n\
    \        2 => 1,\n        3 => 1,\n        5 => 1,\n        7 => 1,\n        'B'\
    \ => 1,\n        'D' => 1,\n    );\n    while ($num) {\n        my $rem = chop\
    \ $num;\n        $res++ if exists $primes{$rem};\n    }\n    return $res;\n}",
  "    $num =~ s/[^0-9A-F]//g;\n    my $ret = 0;\n    $ret++ if $num =~ /(2|3|5|7|B|D)/;\n\
    \    return $ret;\n}", "    my %primes = (2 => 2, 3 => 3, 5 => 5, 7 => 7, 11 =>\
    \ 11, 13 => 13);\n    my $sum = 0;\n    my @nums = split //, $num;\n    foreach\
    \ my $num (@nums) {\n        $sum += exists $primes{hex $num} ? 1 : 0;\n    }\n\
    \    return $sum;\n}", "    my @hex = split //, $num;\n    my $primes = 0;\n \
    \   foreach my $hex (@hex) {\n        if ($hex =~ /[2357BDF]/) {\n           \
    \ $primes++;\n        }\n    }\n    return $primes;\n}", "    my @primes = qw(2\
    \ 3 5 7 B D);\n    my $result = 0;\n    for my $i (split(//, $num)) {\n      \
    \  $result++ if $i ~~ @primes;\n    }\n    return $result;\n}", "    my @p = split\
    \ //,$num;\n    my $sum = 0;\n    for my $t (@p){\n        my $c = hex $t;\n \
    \       if(($c == 2) || ($c == 3) || ($c == 5) || ($c == 7) || ($c == 11) || ($c\
    \ == 13)){\n            $sum += 1;\n        }\n    }\n    return $sum;\n}", " \
    \   my @nums = split('', $num);\n    my $cnt = 0;\n    foreach my $n (@nums) {\n\
    \        if($n =~ /[2357BD]/) {\n            $cnt++;\n        }\n    }\n    return\
    \ $cnt;\n}", "    my $result = 0;\n    my @primes = qw(2 3 5 7 B D);", "    my\
    \ @primes = qw(2 3 5 7 B D);\n    my $hex_key = 0;\n    if ($num =~ /[0-9A-F]/){\n\
    \        for my $digit (split //, $num){\n            for my $prime (@primes){\n\
    \                if ($digit eq $prime){\n                    $hex_key++;\n   \
    \             }\n            }\n        }\n    }\n    return $hex_key;\n}", " \
    \   my @d = split '',$num;\n    my $c = 0;\n    $c++ if (any {$_ eq \"2\"} @d);\n\
    \    $c++ if (any {$_ eq \"3\"} @d);\n    $c++ if (any {$_ eq \"5\"} @d);\n  \
    \  $c++ if (any {$_ eq \"7\"} @d);\n    $c++ if (any {$_ eq \"B\"} @d);\n    $c++\
    \ if (any {$_ eq \"D\"} @d);\n    return $c;\n}", "    my @hex_digits = ('2','3','5','7','B','D');\n\
    \    my $count = 0;\n    foreach my $digit (@hex_digits) {\n        $count +=\
    \ () = $num =~ /$digit/g;\n    }\n    return $count;\n}", "    my @hex = qw(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F);\n    my @primes = qw(2 3 5 7 B D);\n    my %primes\
    \ = map {$_ => 1} @primes;\n    my @nums = split //, $num;\n    my $count = 0;\n\
    \    foreach my $num (@nums) {\n        if (exists $primes{$num}) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}", "    $num = uc($num);\n\
    \    my $count = 0;\n    my @primes = qw(2 3 5 7 B D);\n    for (my $i = 0; $i\
    \ < length($num); $i++) {\n        for my $prime (@primes) {\n            if (substr($num,\
    \ $i, 1) eq $prime) {\n                $count++;\n            }\n        }\n \
    \   }\n    return $count;\n}", "    my $count = 0;\n    my @nums = split('', $num);\n\
    \    my @primes = qw(2 3 5 7 B D);\n    foreach my $x (@nums) {\n      if (index(join('',\
    \ @primes), $x) != -1) {\n        $count++;\n      }\n    }\n    return $count;\n\
    }\n1;", "    my @list = split //, $num;\n    my $count = 0;\n    my %hexmap =\
    \ (\n        \"2\" => 1,\n        \"3\" => 1,\n        \"5\" => 1,\n        \"\
    7\" => 1,\n        \"B\" => 1,\n        \"D\" => 1,\n    );\n    map {\n     \
    \   $count += $hexmap{$_} if defined $hexmap{$_};\n    } @list;\n    return $count;\n\
    }", "    my @digits = split('', uc($num));\n    my $total = 0;\n    foreach my\
    \ $d (@digits) {\n        $total++ if ($d =~ /[2357BD]/);\n    }\n    return $total;\n\
    }", "    my @arr = split(//, $num);\n    my $count = 0;\n    foreach my $i (@arr)\
    \ {\n        if ($i =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    # Your code here!\n}", "    my $n = 0;\n    for\
    \ my $i (split //, $num) {\n        $n++ if (is_prime(hex($i)));\n    }\n    return\
    \ $n;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
