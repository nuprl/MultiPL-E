name: HumanEval_154_cycpattern_check
language: pl
prompt: "# You are given 2 words. You need to return 1 if the second word or any of\
  \ its rotations is a substring in the first word\n# >>> cycpattern_check(\"abcd\"\
  , \"abd\")\n# \"\"\n# >>> cycpattern_check(\"hello\", \"ell\")\n# 1\n# >>> cycpattern_check(\"\
  whassup\", \"psus\")\n# \"\"\n# >>> cycpattern_check(\"abab\", \"baa\")\n# 1\n#\
  \ >>> cycpattern_check(\"efef\", \"eeff\")\n# \"\"\n# >>> cycpattern_check(\"himenss\"\
  , \"simen\")\n# 1\nsub cycpattern_check {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cycpattern_check;\n\
  \        if(eq_deeply($candidate->(\"xyzw\", \"xyw\"),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"yello\"\
  , \"ell\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"whattup\", \"ptut\"),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"efef\"\
  , \"fee\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"abab\", \"aabb\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"winemtt\"\
  , \"tinem\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $result = 0;\n    my @b = split(//, $b);\n    for(my $i = 0;\
    \ $i < length($b); $i++) {\n        $result = index($a, join('', @b)) if index($a,\
    \ join('', @b)) != -1;\n        push @b, shift @b;\n    }\n    return $result;\n\
    }", "    return 1 if index($a, $b) != -1;\n    return \"\" if length($b) == 1;\n\
    \    my $c = substr($b, 0, 1);\n    return cycpattern_check($a, substr($b, 1).$c);\n\
    }", "    my $b_length = length($b);\n    for(my $i = 0; $i < $b_length; $i++)\
    \ {\n        if(index($a, substr($b, $i)) != -1) {\n            return 1;\n  \
    \      }\n    }\n    return '';\n}", "    for (my $i = 0; $i < length($b); $i++)\
    \ {\n        $b = substr($b, 1) . substr($b, 0, 1);\n        if ($a =~ /$b/) {\n\
    \            return 1;\n        }\n    }\n    return \"\";\n}", "    my @a = split\
    \ //, $a;\n    my @b = split //, $b;\n    my $size = @b;\n    my @rotate = @b;\n\
    \    #my $flag = 0;\n    for (my $i = 0; $i < $size; $i++) {\n        for (my\
    \ $j = 0; $j < $size; $j++) {\n            $rotate[$j] = $b[($j+$i)%$size];\n\
    \        }\n        print \"@rotate \";\n        #die \"DEBUG\";\n        my $c\
    \ = join '', @rotate;\n        if ($a =~ /$c/) {\n            return 1;\n    \
    \    }\n    }\n    return \"\";\n}", "    my $ret = \"\";\n    my $k = 0;\n  \
    \  while ($k < length($b)) {\n        my $i = 0;\n        my $j = $k;\n      \
    \  while ($i < length($b) && $j < length($b)) {\n            if (substr($a, $i,\
    \ 1) ne substr($b, $j, 1)) {\n                last;\n            }\n         \
    \   $i++;\n            $j++;\n        }\n        if ($i == length($b)) {\n   \
    \         $ret = 1;\n            last;\n        }\n        $k++;\n    }\n    return\
    \ $ret;\n}", "    return \"\" if length($a) < length($b);\n    $b = substr($b,\
    \ 0, length($b)-1);\n    my $pattern = join \"|\", $b, unpack(\"(A[1]\" x length($b))[1..length($b)]);\n\
    \    return $a =~ /$pattern/ ? 1 : \"\";\n}\n \n1;", "    my $len = length($b);\n\
    \    for (my $i = 0; $i < $len; $i++) {\n        $b = substr($b, 1, $len - 1)\
    \ . substr($b, 0, 1);\n        return 1 if $a =~ /$b/;\n    }\n    return '';\n\
    }", "    # Your code here\n    my $c=$b.$b;\n    if($a=~m/$b/){\n        return\
    \ 1;\n    }\n    elsif($a=~m/$c/){\n        return 1;\n    }\n    else{\n    \
    \    return \"\";\n    }\n}", "    my @a = split('', $a);\n    my @b = split('',\
    \ $b);\n    my $b_len = scalar @b;\n    my $shift = 0;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $found = 0;\n    while($i < $b_len) {\n        if($b[$i] eq\
    \ $a[$j]) {\n            ++$i;\n            ++$j;\n            if($j >= $b_len)\
    \ {\n                $j = 0;\n            }\n        } else {\n            if($shift\
    \ == 0) {\n                $shift = $i + 1;\n            }\n            $i = $shift;\n\
    \            $j = 0;\n        }\n        if($i == $b_len) {\n            $found\
    \ = 1;\n            last;\n        }\n    }\n    return $found;\n}", "    # \n\
    }", "    return ($a =~ /$b/) ? 1 : '';\n}", "    return 1 if $a =~ /$b/;\n   \
    \ $b =~ /(.+)(.)./;\n    my $front = $1;\n    my $last = $2;\n    return cycpattern_check($a,\
    \ $front.$last.$front);\n}", "    return '' if length($a) < length($b);\n    $b\
    \ = substr($b, -1, 1) . substr($b, 0, length($b) - 1);\n    my $flag = '';\n \
    \   while($b ne substr($a, 0, length($b))) {\n        $b = substr($b, -1, 1) .\
    \ substr($b, 0, length($b) - 1);\n        $flag = 1;\n    }\n    return $flag;\n\
    }", "    return 1 if $a =~ /$b/;\n    return 1 if $a =~ /$b/;\n    return 1 if\
    \ $a =~ /$b/;\n    return 1 if $a =~ /$b/;\n    return 1 if $a =~ /$b/;\n    return\
    \ 1 if $a =~ /$b/;\n    return 1 if $a =~ /$b/;\n    return \"\";\n}", "    my\
    \ $n = length($b);\n    for (my $i = 0; $i < $n; $i++) {\n        if (index($a,\
    \ substr($b, $i)) >= 0) {\n            return 1;\n        }\n    }\n    return\
    \ '';\n}", "    my $result = \"\";\n    my $len = length($b);\n    for (my $i\
    \ = 0; $i < $len; $i++) {\n        $b = substr($b, 1, $len - 1) . substr($b, 0,\
    \ 1);\n        $result = 1 if ($a =~ /$b/);\n    }\n    return $result;\n}", " \
    \   my $len = length($b);\n    my $i = 0;\n    while($i < $len){\n        my $c\
    \ = substr($b, 0, 1, '') . $b;\n        if(index($a, $c) != -1){\n           \
    \ return 1;\n        }\n        $i++;\n    }\n    return \"\";\n}", "    my $rotated\
    \ = cycpattern_rotate($b);\n    if($a =~ /$b/ || $a =~ /$rotated/) {\n       \
    \ return 1;\n    }\n    return \"\";\n}", "    my @a = split('', $a);\n    my\
    \ @b = split('', $b);\n    my $flag = 0;\n    if (scalar(@a) < scalar(@b)) {\n\
    \        return 0;\n    }\n    for (my $i = 0; $i < scalar(@a); $i++) {\n    \
    \    if ($a[$i] eq $b[0]) {\n            for (my $j = 1; $j < scalar(@b); $j++)\
    \ {\n                if ($a[($i + $j) % scalar(@a)] ne $b[$j]) {\n           \
    \         $flag = 0;\n                    last;\n                }\n         \
    \       $flag = 1;\n            }\n            if ($flag == 1) {\n           \
    \     return 1;\n            }\n        }\n    }\n    return 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
