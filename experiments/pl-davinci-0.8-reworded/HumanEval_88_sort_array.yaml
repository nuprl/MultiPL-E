name: HumanEval_88_sort_array
language: pl
prompt: "# Given an array of non-negative integers, return a copl of the given array\
  \ after sorting,\n# you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n# >>> sort_array([5])\n\
  # [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array([2,\
  \ 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\nsub sort_array {\n    my($array)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
  \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42,\
  \ 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
  \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    return [] if(!@$array);\n    my $first = $array->[0];\n    my $last\
    \ = $array->[$#$array];\n    if($first + $last > 0){\n        my @sorted = sort\
    \ {$a <=> $b} @$array;\n        return \\@sorted;\n    }else{\n        my @sorted\
    \ = sort {$b <=> $a} @$array;\n        return \\@sorted;\n    }\n}", "    $array\
    \ = [] if !defined $array;\n    return $array if @$array < 2;\n    my $fn = (\
    \ $array->[0] + $array->[-1] ) % 2 == 0 ? sub { $b <=> $a } : sub { $a <=> $b\
    \ };\n    return [ sort $fn @$array ];\n}\n1;", "    my $length = @$array;\n \
    \   if($length == 0){\n        return $array;\n    }elsif($length == 1){\n   \
    \     return $array;\n    }else{\n        my $first_index = $array->[0];\n   \
    \     my $last_index = $array->[$length-1];\n        my $sum = $first_index +\
    \ $last_index;\n        if($sum % 2 == 0){\n            return [reverse sort {$a\
    \ <=> $b} @$array];\n        }else{\n            return [sort {$a <=> $b} @$array];\n\
    \        }\n    }\n}", "    my $array_size = scalar @$array;\n    return $array\
    \ if $array_size == 0 || $array_size == 1;\n    my $odd = $array->[0] + $array->[-1]\
    \ % 2;\n    if ($odd) {\n        return [sort {$a <=> $b} @$array];\n    } else\
    \ {\n        return [sort {$b <=> $a} @$array];\n    }\n}", "    my $sum = $array->[0]\
    \ + $array->[-1];\n    if ($sum % 2 == 0) {\n        return [sort {$b <=> $a}\
    \ @$array];\n    } else {\n        return [sort {$a <=> $b} @$array];\n    }\n\
    }\n1;", "    if(scalar(@$array) == 0) {\n        return [];\n    }\n    if(scalar(@$array)\
    \ == 1) {\n        return [@$array];\n    }\n    my $s = $array->[0] + $array->[-1];\n\
    \    if($s % 2 == 0) {\n        @$array = sort {$b <=> $a} @$array;\n    } else\
    \ {\n        @$array = sort {$a <=> $b} @$array;\n    }\n    return $array;\n}",
  "    my $sum = 0;\n    $sum += $_ for @$array;\n    my @sorted_array = sort {$a\
    \ <=> $b} @$array;\n    @sorted_array = reverse @sorted_array if $sum % 2 == 0;\n\
    \    return \\@sorted_array;\n}", "    if ( @$array == 0 || @$array == 1 ) {\n\
    \        return $array;\n    }\n    my @sorted = sort { $a <=> $b } @$array;\n\
    \    my $f_index = $sorted[0];\n    my $l_index = $sorted[-1];\n    my $sum =\
    \ $f_index + $l_index;\n    if ( $sum % 2 == 0 ) {\n        return reverse @sorted;\n\
    \    }\n    else {\n        return @sorted;\n    }\n}", "    my $len = scalar\
    \ @$array;\n    my $first = $array->[0];\n    my $last = $array->[$len - 1];\n\
    \    my $sum = $first + $last;\n    if ($sum % 2) {\n        return sort {$a <=>\
    \ $b} @$array;\n    } else {\n        return sort {$b <=> $a} @$array;\n    }\n\
    }", "    return [] if @$array == 0;\n    return [sort {$a <=> $b} @$array] if\
    \ @$array == 1;\n    my($first, $last) = @$array[0, -1];\n    if(($first + $last)\
    \ % 2 == 0) {\n        return [sort {$b <=> $a} @$array];\n    }\n    else {\n\
    \        return [sort {$a <=> $b} @$array];\n    }\n}", "    my @sorted_array\
    \ = @$array;\n    if(@sorted_array == 0) {\n        return @sorted_array;\n  \
    \  }\n    my $last_index = @sorted_array - 1;\n    my $sum = $sorted_array[0]\
    \ + $sorted_array[$last_index];\n    my $order = $sum % 2 == 0 ? 1 : 0;\n    if($order\
    \ == 1) {\n        @sorted_array = sort {$b <=> $a} @sorted_array;\n    } else\
    \ {\n        @sorted_array = sort {$a <=> $b} @sorted_array;\n    }\n    return\
    \ @sorted_array;\n}", "    return $array if @$array <= 1;\n    my @copy = @$array;\n\
    \    my $first = shift @copy;\n    my $last = pop @copy;\n    if ($first + $last)\
    \ % 2 {\n        return [$first, @{sort_array(\\@copy)}, $last];\n    } else {\n\
    \        return [$last, @{sort_array(\\@copy)}, $first];\n    }\n}", "    my $len\
    \ = @$array;\n    if ($len < 2) {\n        return $array;\n    }\n    my $first\
    \ = @$array[0];\n    my $last = @$array[$len - 1];\n    if ($first + $last) %\
    \ 2 == 0 {\n        my @result = reverse @$array;\n        return \\@result;\n\
    \    }\n    return $array;\n}", "    my $size = @$array;\n    my @sorted_array\
    \ = ();\n    if ($size > 0) {\n\tif (($array->[0] + $array->[$size - 1]) % 2 ==\
    \ 0) {\n\t    @sorted_array = sort {$b <=> $a} @$array;\n\t} else {\n\t    @sorted_array\
    \ = sort {$a <=> $b} @$array;\n\t}\n    }\n    return @sorted_array;\n}", "  \
    \  my $len = scalar @$array;\n    my $i = 0;\n    my $j = $len - 1;\n    my $tmp;\n\
    \    if ($len == 0 || $len == 1) {\n        return $array;\n    }\n    while ($i\
    \ <= $j) {\n        if (($array->[$i] + $array->[$j]) % 2 == 0) {\n          \
    \  $tmp = $array->[$i];\n            $array->[$i] = $array->[$j];\n          \
    \  $array->[$j] = $tmp;\n        }\n        $i++;\n        $j--;\n    }\n    @$array\
    \ = sort {$a <=> $b} @$array;\n    return $array;\n}", "    my @new_array = ();\n\
    \    if(!@$array){\n        return [];\n    }\n    if(@$array == 1){\n       \
    \ return [@$array];\n    }\n    if(($array->[0] + $array->[$#$array]) % 2 == 0){\n\
    \        @new_array = reverse @$array;\n    }\n    else{\n        @new_array =\
    \ sort {$a <=> $b} @$array;\n    }\n    return [@new_array];\n}", "    return\
    \ [] if @$array == 0;\n    return [$array->[0]] if @$array == 1;\n    my($first,\
    \ $last) = @$array[0, -1];\n    my($sorted) = $first + $last % 2 ? [sort {$a <=>\
    \ $b} @$array] : [sort {$b <=> $a} @$array];\n    return $sorted;\n}", "    return\
    \ [] if @$array == 0;\n    return [$array->[0]] if @$array == 1;\n    my @result\
    \ = sort { $a <=> $b } @$array;\n    if (($array->[0] + $array->[-1]) % 2 == 0)\
    \ {\n        @result = reverse @result;\n    }\n    return \\@result;\n}", " \
    \   my $array_len = scalar @$array;\n    return [] if $array_len == 0;\n    my\
    \ @sorted_array = sort { $a <=> $b } @$array;\n    if(($sorted_array[0] + $sorted_array[-1])\
    \ % 2 == 0) {\n        @sorted_array = reverse @sorted_array;\n    }\n    return\
    \ \\@sorted_array;\n}", "    my $length = scalar @$array;\n    my @sorted_array\
    \ = ();\n    if($length == 0) {\n        return $array;\n    }\n    if($length\
    \ == 1) {\n        return $array;\n    }\n    if($length == 2) {\n        if(($array->[0]\
    \ + $array->[1]) % 2 == 0) {\n            @sorted_array = ($array->[1], $array->[0]);\n\
    \        }\n        else {\n            @sorted_array = ($array->[0], $array->[1]);\n\
    \        }\n        return \\@sorted_array;\n    }\n    if(($array->[0] + $array->[1])\
    \ % 2 == 0) {\n        @sorted_array = sort {$b <=> $a} @$array;\n    }\n    else\
    \ {\n        @sorted_array = sort {$a <=> $b} @$array;\n    }\n    return \\@sorted_array;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
