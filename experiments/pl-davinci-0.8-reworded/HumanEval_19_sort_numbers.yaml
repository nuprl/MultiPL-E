name: HumanEval_19_sort_numbers
language: pl
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers\
  \ {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numbers;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"three\"),\"three\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  three five nine\"),\"three five nine\")) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"five zero four seven\
  \ nine eight\"),\"zero four five seven eight nine\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"six five four three\
  \ two one zero\"),\"zero one two three four five six\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my(@numbers) = split(/\\s+/, $numbers);\n    my(@sorted_numbers)\
    \ = sort { $english_numbers{$a} <=> $english_numbers{$b} } @numbers;\n    return\
    \ join(' ', @sorted_numbers);\n}", "    my @nums = split / /, $numbers;\n    my\
    \ @sorted = sort { $nums{$a} <=> $nums{$b} } @nums;\n    return join ' ', @sorted;\n\
    }", "    my @input = split(' ', $numbers);\n    my %digits = (\n        'zero'\
    \ => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n   \
    \     'four' => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven'\
    \ => 7,\n        'eight' => 8,\n        'nine' => 9,\n    );\n    my @output =\
    \ sort { $digits{$a} <=> $digits{$b} } @input;\n    return join(' ', @output);\n\
    }", "    my %num2int = ('zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four'\
    \ => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9);\n \
    \   my @int_nums = map { $num2int{$_} } split(/ /, $numbers);\n    my @sorted_nums\
    \ = sort { $a <=> $b } @int_nums;\n    my %int2num = reverse %num2int;\n    return\
    \ join(' ', map { $int2num{$_} } @sorted_nums);\n}", "    my(@numbers) = split('\
    \ ', $numbers);\n    my(@words) = map { word_to_numeral($_) } @numbers;\n    my(@sorted)\
    \ = sort { $a <=> $b } @words;\n    my(@results) = map { numeral_to_word($_) }\
    \ @sorted;\n    return join(' ', @results);\n}", "    my @numbers = split(/ /,\
    \ $numbers);\n    my @sorted = sort { $numeral{$a} <=> $numeral{$b} } @numbers;\n\
    \    return join ' ', @sorted;\n}", "    my %map = qw(zero 0 one 1 two 2 three\
    \ 3 four 4 five 5 six 6 seven 7 eight 8 nine 9);\n    my @numbers = split / /,\
    \ $numbers;\n    my @nums = map $map{$_}, @numbers;\n    my @sorted = sort {$a\
    \ <=> $b} @nums;\n    my @result = map {$numbers[$_]} @sorted;\n    return join\
    \ \" \", @result;\n}", "    my %numvals = ('zero' => 0, 'one' => 1, 'two' => 2,\
    \ 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' =>\
    \ 8, 'nine' => 9);\n    my @nums = split(' ', $numbers);\n    my @sortnums = map\
    \ { $numvals{$_} } @nums;\n    my @sorted = sort { $a <=> $b } @sortnums;\n  \
    \  return join(' ', @nums[@sorted]);\n}", "    my %number = (\n        'zero'\
    \  => 0,\n        'one'   => 1,\n        'two'   => 2,\n        'three' => 3,\n\
    \        'four'  => 4,\n        'five'  => 5,\n        'six'   => 6,\n       \
    \ 'seven' => 7,\n        'eight' => 8,\n        'nine'  => 9,\n    );\n    my\
    \ @numbers = split(/ /, $numbers);\n    @numbers = sort { $number{$a} <=> $number{$b}\
    \ } @numbers;\n    return join(' ', @numbers);\n}", "    my(@numbers) = split(/\
    \ /, $numbers);\n    my(@num_order) = qw(zero one two three four five six seven\
    \ eight nine);\n    my(%numbers) = map { $_ => $num_order[$_] } (0..9);\n    return\
    \ join(\" \", sort { $numbers{$a} cmp $numbers{$b} } @numbers);\n}", "    my %hash;\n\
    \    my @numbers = split(/ /, $numbers);\n    for my $num (@numbers) {\n     \
    \   $hash{$num} = $numerals{$num};\n    }\n    my @sorted = sort { $hash{$a} <=>\
    \ $hash{$b} } keys %hash;\n    return join \" \", @sorted;\n}", "    my @numbers\
    \ = split(/ /, $numbers);\n    my @sort_numbers = ();\n    foreach my $number\
    \ (@numbers) {\n        push(@sort_numbers, numeral_to_int($number));\n    }\n\
    \    @sort_numbers = sort {$a <=> $b} @sort_numbers;\n    my $sort_numbers = join(\"\
    \ \", @sort_numbers);\n    return $sort_numbers;\n}", "    my @keys = qw(zero\
    \ one two three four five six seven eight nine);\n    my %nummap = map {$keys[$_]\
    \ => $_} (0..9);\n    my @sort = map {$keys[$_]} sort {$a <=> $b} map {$nummap{$_}}\
    \ split(\" \", $numbers);\n    return join(\" \", @sort);\n}", "    my @list =\
    \ split(/ /, $numbers);\n    return join(\" \", sort { number_to_int($a) <=> number_to_int($b)\
    \ } @list);\n}", "    my %numbers = (\n\t\"zero\" => 0,\n\t\"one\" => 1,\n\t\"\
    two\" => 2,\n\t\"three\" => 3,\n\t\"four\" => 4,\n\t\"five\" => 5,\n\t\"six\"\
    \ => 6,\n\t\"seven\" => 7,\n\t\"eight\" => 8,\n\t\"nine\" => 9,\n    );\n    my\
    \ %numbers_reverse = reverse %numbers;\n    my @numbers = split(/ /, $numbers);\n\
    \    my @sorted_numbers = sort { $numbers{$a} <=> $numbers{$b} } @numbers;\n \
    \   my $out = join(\" \", @sorted_numbers);\n    return $out;\n}", "    my @numbers\
    \ = split / /, $numbers;\n    my %numberals = (\n        'zero' => 0,\n      \
    \  'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' =>\
    \ 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n     \
    \   'eight' => 8,\n        'nine' => 9,\n    );\n    my @nums = ();\n    foreach\
    \ my $numeral (@numbers) {\n        push @nums, $numberals{$numeral};\n    }\n\
    \    my @sorted = sort { $a <=> $b } @nums;\n    my @sorted_words = ();\n    foreach\
    \ my $num (@sorted) {\n        foreach my $word (keys %numberals) {\n        \
    \    if ($numberals{$word} == $num) {\n                push @sorted_words, $word;\n\
    \            }\n        }\n    }\n    return join \" \", @sorted_words;\n}", " \
    \   my(@nums) = split(/ /, $numbers);\n    my(@sorted) = ();\n    my(%sort_num);\n\
    \    $sort_num{'zero'} = 0;\n    $sort_num{'one'} = 1;\n    $sort_num{'two'} =\
    \ 2;\n    $sort_num{'three'} = 3;\n    $sort_num{'four'} = 4;\n    $sort_num{'five'}\
    \ = 5;\n    $sort_num{'six'} = 6;\n    $sort_num{'seven'} = 7;\n    $sort_num{'eight'}\
    \ = 8;\n    $sort_num{'nine'} = 9;\n    foreach my $num (@nums) {\n        push\
    \ @sorted, $sort_num{$num};\n    }\n    my(@sorted_num) = sort {$a <=> $b} @sorted;\n\
    \    my(@sorted_words) = ();\n    foreach my $sorted_num (@sorted_num) {\n   \
    \     my($sorted_word) = ();\n        foreach my $word (keys %sort_num) {\n  \
    \          if ($sort_num{$word} == $sorted_num) {\n                $sorted_word\
    \ = $word;\n            }\n        }\n        push @sorted_words, $sorted_word;\n\
    \    }\n    my($sorted_string) = join(' ', @sorted_words);\n    return $sorted_string;\n\
    }", "    my(@nums) = split / /, $numbers;\n    my(@numbers) = sort { map { $_\
    \ eq \"zero\" ? 0 : $_ eq \"one\" ? 1 : $_ eq \"two\" ? 2 : $_ eq \"three\" ?\
    \ 3 : $_ eq \"four\" ? 4 : $_ eq \"five\" ? 5 : $_ eq \"six\" ? 6 : $_ eq \"seven\"\
    \ ? 7 : $_ eq \"eight\" ? 8 : $_ eq \"nine\" ? 9 : -1; } ($a, $b) } @nums;\n \
    \   return join \" \", @numbers;\n}", "    my %numberals = (\n        zero  =>\
    \ 0,\n        one   => 1,\n        two   => 2,\n        three => 3,\n        four\
    \  => 4,\n        five  => 5,\n        six   => 6,\n        seven => 7,\n    \
    \    eight => 8,\n        nine  => 9,\n    );\n    my @numbers = split ' ', $numbers;\n\
    \    my @sorted  = map {$numberals{$_}} sort {$numberals{$a} <=> $numberals{$b}}\
    \ @numbers;\n    return join ' ', @sorted;\n}", "    my @numbers = split(/ /,\
    \ $numbers);\n    return join(\" \", sort {\n        {\n            'zero' =>\
    \ 0,\n            'one' => 1,\n            'two' => 2,\n            'three' =>\
    \ 3,\n            'four' => 4,\n            'five' => 5,\n            'six' =>\
    \ 6,\n            'seven' => 7,\n            'eight' => 8,\n            'nine'\
    \ => 9,\n        }->{$a} <=> {\n            'zero' => 0,\n            'one' =>\
    \ 1,\n            'two' => 2,\n            'three' => 3,\n            'four' =>\
    \ 4,\n            'five' => 5,\n            'six' => 6,\n            'seven' =>\
    \ 7,\n            'eight' => 8,\n            'nine' => 9,\n        }->{$b}\n \
    \   } @numbers);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
