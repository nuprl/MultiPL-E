name: HumanEval_134_check_if_last_char_is_a_letter
language: pl
prompt: "# Create a function that returns 1 if the last character\n# of a given string\
  \ is an alphabetical character and is not\n# a part of a word, and  otherwise.\n\
  # Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>>\
  \ check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\
  apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\
  \n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter\
  \ {\n    my($txt) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n\
  \        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $last_char = substr($txt, length($txt) - 1, 1);\n    if($last_char\
    \ =~ /[a-zA-Z]/){\n\tmy @words = split(/ /, $txt);\n\tmy $last_word = $words[$#words];\n\
    \tif(length($last_word) == 1){\n\t    return 1;\n\t}\n    }\n    return \"\";\n\
    }", "    my($txt_trim) = trim($txt);\n    my($ln) = length($txt_trim);\n    my($lc)\
    \ = substr($txt_trim, $ln - 1, 1);\n    if(is_alphabet($lc)) {\n        if( (\
    \ $txt_trim =~ / $lc / ) || ( $txt_trim =~ /$lc$/ ) ) {\n            return \"\
    \";\n        }\n        else {\n            return 1;\n        }\n    }\n    else\
    \ {\n        return \"\";\n    }\n}", "    return is_alphabet($txt) && (split\
    \ /\\s+/, $txt)[-1] ne $txt ? 1 : \"\";\n}", "    # your code goes here\n}", " \
    \   return (substr($txt, -1) =~ /\\w/) ? 0 : 1;\n}", "    return if(!$txt);\n\
    \    if($txt =~ /\\w(\\s+)/) {\n        return \"\";\n    }\n    if($txt =~ /\\\
    w$/) {\n        return 1;\n    }\n    return \"\";\n}", "    my $ret = \"\";\n\
    \    my $is_last_char_letter = 0;\n    my $is_last_char_part_of_word = 0;\n  \
    \  my $is_last_char_letter_and_not_part_of_word = 0;\n    # my $last_char = ????\n\
    \    if ($last_char =~ /[[:alpha:]]/) {\n        $is_last_char_letter = 1;\n \
    \   } else {\n        $is_last_char_letter = 0;\n    }\n    if ($txt =~ /\\w$/)\
    \ {\n        $is_last_char_part_of_word = 1;\n    } else {\n        $is_last_char_part_of_word\
    \ = 0;\n    }\n    if ($is_last_char_letter && !$is_last_char_part_of_word) {\n\
    \        $is_last_char_letter_and_not_part_of_word = 1;\n    } else {\n      \
    \  $is_last_char_letter_and_not_part_of_word = 0;\n    }\n    if ($is_last_char_letter_and_not_part_of_word)\
    \ {\n        $ret = 1;\n    } else {\n        $ret = \"\";\n    }\n    return\
    \ $ret;\n}", "    $txt =~ s/\\s+$//;\n    return (substr($txt, -1) =~ /^[A-Za-z]$/)\
    \ ? 1 : \"\";\n}", "    my($pos);\n    $pos = length($txt);\n    if ( ( $pos ==\
    \ 0 ) ||\n         ( $txt !~ /[a-zA-Z]$/ ) ||\n         ( $txt =~ /[a-zA-Z]\\\
    s$/ ) ) {\n        return \"\";\n    }\n    return 1;\n}", "    return \"\" if\
    \ $txt eq \"\";\n    my $last_char = substr $txt, -1;\n    my $last_char_is_not_letter\
    \ = $last_char !~ /[a-zA-Z]/;\n    my $txt_without_last_char = substr $txt, 0,\
    \ -1;\n    return 1 if $last_char_is_not_letter && $txt_without_last_char =~ /\
    \ /;\n    return \"\";\n}", "    return substr($txt, -1) =~ /[a-zA-Z]/ && $txt\
    \ !~ /\\S\\s/ ? 1 : '';\n}", "    return 0 if (length($txt) == 0);\n    my $last_char\
    \ = $txt;\n    my $len = length($txt);\n    while ($len > 0) {\n        $last_char\
    \ = substr($txt, $len - 1, 1);\n        if ($last_char =~ /\\w/) {\n         \
    \   last;\n        }\n        $len--;\n    }\n    if ($last_char =~ /\\w/) {\n\
    \        my $prev_last_char = $txt;\n        if ($len > 1) {\n            $prev_last_char\
    \ = substr($txt, $len - 2, 1);\n        }\n        if ($prev_last_char =~ /\\\
    s/) {\n            return 1;\n        }\n    }\n    return 0;\n}", "    # remove\
    \ any space before end of text\n    $txt =~ s/\\s+$//;\n    # if there is still\
    \ a space in the text,\n    # the last character is not a letter.\n    return($txt\
    \ =~ /\\s/) ? '' : 1;\n}", "    if ($txt =~ /\\w+$/) {\n        return \"\";\n\
    \    }\n    else {\n        return 1;\n    }\n}", "    my $result = \"\";\n  \
    \  my $last_char = substr($txt, -1);\n    if (is_alphabetical($last_char) && !check_if_letter_in_word($txt))\
    \ {\n        $result = 1;\n    }\n    return $result;\n}", "    my($result);\n\
    \    if (length($txt) > 0) {\n        if (substr($txt, -1) =~ /\\w/) {\n     \
    \       $result = \"\";\n        } else {\n            $result = 1;\n        }\n\
    \    } else {\n        $result = \"\";\n    }\n    return $result;\n}", "    $txt\
    \ =~ s/\\s+$//;\n    my @words = split(/\\s+/, $txt);\n    my $last_word = pop\
    \ @words;\n    $last_word =~ /([a-zA-Z])$/;\n    return $1;\n}", "    if (length($txt)\
    \ == 0) {\n        return \"\";\n    }\n    my @words = split / /, $txt;\n   \
    \ my $last_word = $words[$#words];\n    if ($last_word =~ /^[a-zA-Z]+$/) {\n \
    \       return 1;\n    }\n    return \"\";\n}", "    return \"\";\n}", "    my\
    \ $ret = \"\";\n    my $last_char = \"\";\n    my $second_last_char = \"\";\n\
    \    if ($txt eq \"\") {\n        return $ret;\n    } else {\n        my @chars\
    \ = split(//, $txt);\n        my $last_char = $chars[$#chars];\n        my $second_last_char\
    \ = $chars[$#chars - 1];\n        if ($last_char =~ /^[[:alpha:]]$/ && $second_last_char\
    \ =~ /^[[:space:]]$/) {\n            $ret = 1;\n        }\n        return $ret;\n\
    \    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
