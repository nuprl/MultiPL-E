name: HumanEval_134_check_if_last_char_is_a_letter
language: pl
prompt: "# Create a function that returns 1 if the last character\n# of a given string\
  \ is an alphabetical character and is not\n# a part of a word, and '' otherwise.\n\
  # Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>>\
  \ check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\
  apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\
  \n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter\
  \ {\n    my($txt) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n\
  \        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return '' if $txt =~ /\\s/ && substr($txt, -1) =~ /[a-zA-Z]/;\n\
    \    return 1;\n}", "    # 1. Find the last character\n    # 2. Find the index\
    \ of the last character\n    # 3. Return the character if it is the last one and\
    \ is not\n    #    part of a word", "    return '' unless $txt;\n    return 1\
    \ unless $txt =~ /\\s$/;\n    $txt =~ s/\\s+$//;\n    return 1 unless $txt =~\
    \ /\\s/;\n    return '';\n}", "    my $last_chr = substr $txt, -1;\n    if ($last_chr\
    \ =~ /[A-Za-z]/) {\n        return 1;\n    }\n    return '';\n}", "    if( $txt\
    \ eq '' ) {\n        return '';\n    }\n    my $l = substr($txt, -1);\n    if(\
    \ $l =~ /[a-zA-Z]/ ) {\n        return 1;\n    }\n    return '';\n}", "    my\
    \ $n = length($txt);\n    if ($n == 0) {\n        return \"\";\n    } else {\n\
    \        my $last = substr($txt, $n-1, 1);\n        if (substr($txt, $n-2, 1)\
    \ =~ /\\w/) {\n            return \"\";\n        } else {\n            if ($last\
    \ =~ /\\w/) {\n                return 1;\n            } else {\n             \
    \   return \"\";\n            }\n        }\n    }\n}", "    my $return_val = '';\n\
    \    # Code goes here...\n    if ($txt=~/\\b[A-Za-z]\\b$/) {\n        $return_val\
    \ = 1;\n    }\n    return $return_val;\n}", "    my $res = '';\n    my $len =\
    \ length($txt);\n    if ($len) {\n        my $ch = substr($txt, $len - 1, 1);\n\
    \        my $ord = ord($ch);\n        if (($ord >= 65 and $ord <= 90) or ($ord\
    \ >= 97 and $ord <= 122)) {\n            if ($len == 1) {\n                $res\
    \ = 1;\n            }\n            else {\n                my $ch2 = substr($txt,\
    \ $len - 2, 1);\n                my $ord2 = ord($ch2);\n                if ($ord2\
    \ == 32) {\n                    $res = 1;\n                }\n            }\n\
    \        }\n    }\n    return $res;\n}", "    my $str = \"\";\n    my $flag =\
    \ 0;\n    my $len = length($txt);\n    if($len == 0) {\n        return \"\";\n\
    \    } else {\n        my $char = substr($txt, $len-1, 1);\n        if($char =~\
    \ /^[a-zA-Z]$/) {\n            my $sub_str = substr($txt, 0, $len-1);\n      \
    \      my @arr = split(\" \", $sub_str);\n            my $last_word = pop(@arr);\n\
    \            if(($last_word =~ /^$char$/) || ($last_word =~ /^$char[a-z]*$/))\
    \ {\n                return \"\";\n            } else {\n                return\
    \ 1;\n            }\n        } else {\n            return \"\";\n        }\n \
    \   }\n}", "    return () unless length($txt);\n    return substr($txt, length($txt)\
    \ - 1, 1) !~ /\\s/;\n}", "    my $return_val = \"\";\n    my $pattern = \".*[a-z]\"\
    ;\n    if($txt =~ m/$pattern/i) {\n        $return_val = 1;\n    }\n    return\
    \ $return_val;\n}", "    # Replace code below (1 line)\n    $txt =~ s/\\s+$//;\n\
    \    if($txt =~ /\\w$/) {\n        return \"\";\n    } else {\n        return\
    \ 1;\n    }\n    # End of replace\n}", "    # >>> your code goes here <<<\n}",
  "    $txt =~ s/\\s*$//;\n    if ($txt =~ /([a-zA-Z])$/) {\n        return 1;\n \
    \   }\n    return '';\n}", "    # Don't forget to delete the next line, and write\
    \ your code below.\n    return 0;\n}", "    my $letter = substr($txt, -1);\n \
    \   if($letter =~ /[A-Za-z]/ && $letter =~ / /) {\n        return 1;\n    } else\
    \ {\n        return '';\n    }\n}", "    return 1 if $txt =~ /\\S\\s(\\S)$/;\n\
    \    return '';\n}", "    $txt =~ s/^\\s+|\\s+$//g;\n    my @arr = split(/\\s+/,\
    \ $txt);\n    my $lastchar = substr($arr[$#arr], -1);\n    if ($lastchar =~ /[a-zA-Z]/)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    return \"\" if(!$txt);\n\
    \    my $result = 0;\n    if($txt =~ /[a-zA-Z](\\s+[a-zA-Z]*)$/){\n        $result\
    \ = 1;\n    }\n    return $result;\n}", "    my $retval = '';\n    $txt =~ s/\\\
    s*(\\w+)$/$1/;\n    $retval = 1 if ($txt =~ /\\w/);\n    return $retval;\n}",
  "    my $len = length($txt);\n    my $last = substr($txt,$len-1,1);\n    if ($last\
    \ =~ /[a-zA-Z]/ && !($last =~ /\\w/)) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    # Write code here.\n    my $flag = 0;\n    my $last_char = \"\
    \";\n    if($txt ne \"\"){\n        $last_char = substr($txt, length($txt)-1,\
    \ 1);\n        if($last_char !~ /[[:alpha:]]/){\n            $flag = 1;\n    \
    \    }\n    }\n    return $flag;\n}", "    $txt =~ /([a-zA-Z])\\s$/;\n    if ($1)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    # check if last character\
    \ is a letter, if not return \"\"\n    if($txt =~ /^\\S*\\s*\\S*$/ ) {\n     \
    \   return 1;\n    }\n    return \"\";\n}", "    my $cnt = 0;\n    $cnt = 1 if\
    \ $txt =~ / [a-zA-Z] $/x;\n    return $cnt;\n}", "    # YOUR CODE HERE\n}", " \
    \   # fill in your code here\n    $txt =~ /\\S\\s$/;\n    # return ...\n    return\
    \ 0 + !!$&;\n}", "    my($last_chr) = $txt;\n    if (length($txt) > 0) {\n   \
    \     $last_chr = substr($txt, length($txt) - 1, 1);\n    }\n    my(@res) = ($last_chr,\
    \ $last_chr);\n    if (is_alphabetical($last_chr) == 0) {\n        @res = ($last_chr,\
    \ '');\n    }\n    return @res;\n}", "    if($txt =~ m/^.*([a-zA-Z])\\s*$/) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    # TODO:\
    \ Write your code below\n    return 0;\n}", "    return ( ( $txt =~ m/([[:alpha:]])(\\\
    s*$)/ ) ? 1 : '' );\n}", "    my @words = split(/ /, $txt);\n    my $last_word\
    \ = $words[-1];\n    my $pos = -1;\n    while (1) {\n        last if ((($last_word)\
    \ =~ m/\\s$/) or ($pos < -length($last_word)));\n        $pos--;\n        if ($last_word\
    \ =~ m/^[a-zA-Z]$/) {\n            return 1;\n        }\n    }\n    return \"\"\
    ;\n}", "    my $result = '';\n    # ", "    if($txt =~ /[a-zA-Z]\\s+\\Z/){\n \
    \       return 1;\n    }\n    return '';\n}", "    return \"\" if $txt eq \"\"\
    ;\n    my @chars = split(\"\", $txt);\n    my $last_char = $chars[-1];\n    if\
    \ ( $last_char =~ /[a-zA-Z]/ && $txt !~ /\\S$last_char\\S/ ) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my $ret = \"\";\n    my $len = length($txt);\n\
    \    my $last_char = \"\";\n    my $space_at_end = 0;\n    # If there is a space\
    \ at the end of the text then last\n    # character is not a part of a word.\n\
    \    if($txt =~ / $/) {\n        $space_at_end = 1;\n    }\n    # Text has to\
    \ have at least one character to have a last character.\n    if($len > 0) {\n\
    \        $last_char = substr($txt, -1);\n        if(($last_char =~ /\\w/) && (!($last_char\
    \ =~ /\\d/)) && ($space_at_end)) {\n            $ret = 1;\n        }\n    }\n\
    \    return $ret;\n}", "    if ( $txt =~ /[A-Za-z]\\s*$/ ) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my $last_char = substr($txt, -1);\n    if (\
    \ $last_char =~ /[\\p{Alpha}]/ ) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    my @t = split(' ', $txt);\n    my $i = $#t;\n    my $last_char = '';\n\
    \    if (defined $t[$i]) {\n        $last_char = substr($t[$i], -1);\n    }\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        return 1;\n    }\n    return '';\n\
    }", "    return ($txt =~ m/\\b[a-zA-Z]\\s*$/) ? 1 : '';\n}", "    if(($txt =~\
    \ /\\S$/) && ($txt =~ /[a-zA-Z]$/)){\n        return 1;\n    }\n    else{\n  \
    \      return \"\";\n    }\n}", "    return 1 if $txt =~ /\\b(\\w)\\s*\\z/;\n\
    \    return '';\n}", "    my $ret = '';\n    if (substr($txt, -1) =~ /[a-zA-Z]/\
    \ && $txt !~ /\\S\\s$/) {\n        $ret = 1;\n    }\n    return $ret;\n}", " \
    \   return 1 if $txt =~ m/\\w\\s$/;\n    return '';\n}", "    my($len, $last_char);\n\
    \    $len = length($txt);\n    return \"\" if $len == 0;\n    $last_char = substr($txt,\
    \ $len - 1, 1);\n    return 1 if $last_char =~ /[a-zA-Z]/ && $last_char !~ /\\\
    w/;\n    return \"\";\n}", "    my $last = substr $txt, -1;\n    if($last =~ /[A-Za-z]/)\
    \ {\n        return 1;\n    } else {\n        return '';\n    }\n}", "    if (length($txt)\
    \ == 0) {\n        return \"\";\n    }\n    my @words = split(' ', $txt);\n  \
    \  my $last_word = pop(@words);\n    my $last_char = substr($last_word, -1);\n\
    \    if ($last_char =~ /[a-zA-Z]/) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    if($txt =~ /[^\\s]\\b\\s*$/) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    if ($txt eq \"\") {\n        return \"\";\n    }\n    my @fields\
    \ = split(\" \", $txt);\n    my $last = pop @fields;\n    if ($last =~ /^[a-zA-Z]$/)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    # Enter your code here\n\
    }", "    if ($txt =~ /\\w$/) {\n        return '';\n    }\n    else {\n      \
    \  return 1;\n    }\n}", "    if ($txt =~ m/\\w$/) {\n        return '';\n   \
    \ }\n    return 1;\n}", "    # your code here\n}", "    return (length($txt)>0\
    \ && $txt !~ /[^a-zA-Z]$/) ? 1 : '';\n}", "    my $result = '';\n    my $last_char\
    \ = substr($txt, -1);\n    if ($last_char =~ /\\w$/) {\n        $result = 1;\n\
    \    } else {\n        $result = '';\n    }\n    return $result;\n}", "    my\
    \ $flag = 1;\n    my $l = length($txt);\n    my $char = substr($txt, $l-1, 1);\n\
    \    my $char2 = substr($txt, $l-2, 1);\n    if(($char =~ /\\W/) || ($char2 =~\
    \ /\\w/)){\n        $flag = '';\n    }\n    return $flag;\n}", "    my $length\
    \ = length($txt);\n    if($length==0) {\n\treturn \"\";\n    }\n    else {\n\t\
    $txt =~ /(\\w)(\\s*$)/;\n\tif($2==\"\") {\n\t    return \"\";\n\t}\n\telse {\n\
    \t    return 1;\n\t}\n    }\n}", "    my $length = length($txt);\n    my $last_letter\
    \ = substr($txt, $length - 1, 1);\n    my $is_alpha = substr($txt, $length - 2,\
    \ 1);\n    my $is_digit = substr($txt, $length - 2, 1);\n    if (length($txt)\
    \ == 0) {\n        return \"\";\n    } elsif ($last_letter !~ /[a-zA-Z]/i) {\n\
    \        return \"\";\n    } elsif ($is_alpha =~ /[a-zA-Z]/i || $is_digit =~ /[0-9]/i)\
    \ {\n        return \"\";\n    } else {\n        return 1;\n    }\n}", "    if\
    \ ($txt =~ m{[^\\w]$}) {\n        return 1;\n    }\n    return \"\";\n}", "  \
    \  return '' unless $txt;\n    my $ltr = substr($txt, -1);\n    if ($ltr =~ /[a-zA-Z]/\
    \ && $txt !~ /\\b$ltr$/) {\n        return 1;\n    }\n    return '';\n}", "  \
    \  # Solution.\n    if (length($txt) == 0) {\n        return \"\";\n    }\n  \
    \  my $last_char = substr($txt, length($txt) - 1, 1);\n    if (index(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    , $last_char) != -1) {\n        return 1;\n    }\n    return \"\";\n}", "    my\
    \ $ret = '';\n    if ($txt =~ /\\w$/) {\n        $ret = 1;\n    }\n    return\
    \ $ret;\n}", "    my @words = split(/\\s+/, $txt);\n    my $last_word = pop @words;\n\
    \    return 1 if length($last_word) == 1 && $last_word =~ /\\w/;\n    return '';\n\
    }", "    my @arr = split(//, $txt);\n    my $ch = $arr[-1];\n    my $len = length($txt);\n\
    \    if ( $ch =~ /[a-zA-Z]/ ) {\n        if ( $txt =~ / $/ ) {\n            return\
    \ \"\";\n        }\n        else {\n            return 1;\n        }\n    }\n\
    \    else {\n        return \"\";\n    }\n}", "    # your code goes here\n}",
  "    my $last = substr($txt, -1);\n    if (ord($last) < ord('a') || ord($last) >\
    \ ord('z')) {\n        return \"\";\n    }\n    my $i = rindex($txt, ' ');\n \
    \   if ($i == -1) {\n        return 1;\n    }\n    my $second_last = substr($txt,\
    \ $i - 1, 1);\n    if (ord($second_last) < ord('a') || ord($second_last) > ord('z'))\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    # END_YOUR_CODE\n  \
    \  my @words = split(' ', $txt);\n    my $last = pop @words;\n    return ($last\
    \ =~ /\\w/ ? '' : 1);\n}", "    if($txt eq \"\"){\n        return \"\";\n    }\n\
    \    my @words = split(\" \", $txt);\n    my $last = @words;\n    $last--;\n \
    \   my $char = @words[$last];\n    if($char =~ /[a-zA-Z]/){\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my $i = length($txt);\n    while($i > 0 &&\
    \ substr($txt,$i-1,1) =~ /\\s/) {\n        $i--;\n    }\n    if($i > 0 && substr($txt,$i-1,1)\
    \ =~ /[a-zA-Z]/) {\n        return 1;\n    }\n    return \"\";\n}", "    if ($txt\
    \ =~ /\\w+\\s*[a-zA-Z]$/) {\n        return \"\";\n    }\n    else {\n       \
    \ return 1;\n    }\n}", "    return if (!$txt);\n    my @chars = split('', $txt);\n\
    \    my $last_char = $chars[-1];\n    my $last_char_is_letter = 0;\n    if ($last_char\
    \ =~ /[a-zA-Z]/) {\n        my $txt_len = length($txt);\n        my $tmp_txt =\
    \ substr($txt, 0, $txt_len - 1);\n        my @last_two_chars = ($last_char, $tmp_txt);\n\
    \        if ($last_two_chars[1] =~ / $last_two_chars[0]$/) {\n            $last_char_is_letter\
    \ = 1;\n        }\n    }\n    return $last_char_is_letter;\n}", "    # Write your\
    \ code here\n}", "    return '1' if $txt =~ / [a-zA-Z]( |$)/;\n    return '';\n\
    }", "    my $curr = '';\n    #-----\n    # Write code here\n    my @arr = split('\
    \ ', $txt);\n    my $str = pop @arr;\n    if ($str =~ /[a-zA-Z]$/) {\n       \
    \ $curr = 1;\n    }\n    return $curr;\n}", "    if (length($txt) > 0) {\n   \
    \     my($last_char) = chop($txt);\n        if ($last_char =~ /[A-Za-z]/) {\n\
    \            return 1;\n        }\n    }\n    return \"\";\n}", "    my $end_letter\
    \ = substr($txt, -1);\n    return $end_letter =~ /[a-zA-Z]/ ? 1 : '';\n}", " \
    \   my $out = $txt;\n    $out =~ s/.*(\\s+[a-zA-Z])$/$1/;\n    return($out eq\
    \ $txt ? '' : 1);\n}", "    my $last_char = substr($txt, -1);\n    if ($last_char\
    \ =~ /\\w/) {\n        # If the last character is not a word or a number,\n  \
    \      # it is a non-word character.\n        return \"\";\n    }\n    else {\n\
    \        return 1;\n    }\n}", "    $txt =~ s/\\s+$//;\n    if ($txt) {\n    \
    \    return substr($txt, -1, 1) =~ /[a-zA-Z]/ ? 1 : '';\n    }\n    else {\n \
    \       return '';\n    }\n}", "    $txt =~ s/\\s+$//;\n    $txt =~ s/.*\\s([a-zA-Z])/$1/;\n\
    \    if ($txt =~ /[a-zA-Z]/) {\n        return 1;\n    }\n    return '';\n}",
  "    my($n);\n    if ($txt =~ /[a-zA-Z][ ]+$/) {\n        $n = 1;\n    } else {\n\
    \        $n = '';\n    }\n    return $n;\n}", "    my $s = \"\";\n    if ($txt\
    \ =~ /\\b\\w$/) {\n        return $s;\n    } else {\n        return 1;\n    }\n\
    }", "    my $last_char = substr($txt, -1);\n    if (index(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    , $last_char) != -1) {\n        return $last_char;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my $last_letter = substr $txt, -1;\n    my $is_letter\
    \ = index $txt, $last_letter;\n    my $is_letter_last = rindex $txt, $last_letter;\n\
    \    if ( $is_letter != $is_letter_last ) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    my $rv = '';\n    if ($txt) {\n        my $l = substr($txt,\
    \ -1);\n        if ($l =~ /[a-zA-Z]/) {\n            $rv = 1;\n        }\n   \
    \ }\n    return $rv;\n}", "    # TODO: write your code here.\n}", "    return\
    \ ($txt =~ /\\b\\w$/) ? '' : 1;\n}", "    $txt =~ s/\\s+$//;\n    my $last = substr($txt,\
    \ -1);\n    if ($last =~ /[a-zA-Z]/) {\n        return 1;\n    }\n    return '';\n\
    }", "    if ( $txt =~ /([a-zA-Z])\\s*$/){\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    my $is_a_letter = 0;\n    if ($txt =~ /\\s*[^\\s]$/) {\n   \
    \     $is_a_letter = 1;\n    }\n    return $is_a_letter;\n}", "    my $result\
    \ = '';\n    if ($txt) {\n        my @words = split /\\s+/, $txt;\n        my\
    \ $last_word = pop @words;\n        if ($last_word) {\n            my $last_char\
    \ = substr $last_word, -1;\n            $result = is_char_alphabetical($last_char)\
    \ ? 1 : '';\n        }\n    }\n    return $result;\n}", "    $txt =~ /(\\w)\\\
    s+/ ? '' : $1;\n}", "    my $return_val = '';\n    my $ch = substr($txt, -1);\n\
    \    if ( !($ch =~ /\\w/) ) {\n        if ( $ch =~ /[a-zA-Z]/ ) {\n          \
    \  $return_val = 1;\n        }\n    }\n    return $return_val;\n}", "    # Place\
    \ the solution between here\n    if ($txt =~ /\\w\\s$/) {\n        $txt =~ s/\\\
    s$//;\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n   \
    \ # and here\n}", "    my $ans = \"\";\n    if ($txt =~ /[a-zA-Z]\\s/){\n    \
    \    $ans = 1;\n    }\n    return $ans;\n}", "    if ($txt =~ m/[a-zA-Z] $/ ){\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my @txt\
    \ = split(/\\s+/, $txt);\n    foreach my $i (@txt) {\n\tif ($i =~ /[a-zA-Z]$/)\
    \ {\n\t    return 1;\n\t}\n    }\n    return \"\";\n}", "    my $result = \"\"\
    ;\n    my $l = (split(' ', $txt))[-1];\n    print \"l: $l\\n\";\n    if (length($l)\
    \ > 0) {\n        if (length($l) == 1) {\n            $result = 1;\n        }\
    \ else {\n            $result = \"\";\n        }\n    }\n    return $result;\n\
    }", "    $txt =~ s/\\s+$//;\n    my $last_char = substr($txt, -1);\n    return\
    \ $last_char =~ /^[A-Za-z]$/ ? 1 : '';\n}", "    if ( $txt =~ /\\w\\z/ ) {\n \
    \       if ( $txt =~ /\\s\\z/ ) {\n            return \"\";\n        }\n     \
    \   else {\n            return 1;\n        }\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    if($txt =~ /\\w\\b$/) {\n        return 1;\n    }\n \
    \   return '';\n}", "    return $txt =~ m/(?<![\\w ])(\\w)$/ ? 1 : '';\n}\nprint\
    \ check_if_last_char_is_a_letter(\"apple pie\") . \"\\n\";\nprint check_if_last_char_is_a_letter(\"\
    apple pi e\") . \"\\n\";\nprint check_if_last_char_is_a_letter(\"apple pi e \"\
    ) . \"\\n\";\nprint check_if_last_char_is_a_letter(\"\") . \"\\n\";", "    my\
    \ @words = split(/\\s+/, $txt);\n    my $last_word = pop @words;\n    my $last_char\
    \ = substr($last_word, -1);\n    return $last_char =~ /[a-zA-Z]/ ? 1 : '';\n}",
  "    if(!defined($txt)) {\n        $txt = \"\";\n    }\n    my $msg = \"\";\n  \
    \  my $rst = \"\";\n    if($txt ne \"\") {\n        my $len = length($txt);\n\
    \        my $last = substr($txt, $len - 1, 1);\n        if($last =~ /[A-Za-z]/)\
    \ {\n            my $i = $len - 2;\n            while($i >= 0) {\n           \
    \     my $c = substr($txt, $i, 1);\n                if($c =~ /[A-Za-z]/) {\n \
    \                   $rst = \"\";\n                    last;\n                }\n\
    \                if($c =~ /\\s/) {\n                    $rst = 1;\n          \
    \          last;\n                }\n                $i--;\n            }\n  \
    \      }\n    }\n    return $rst;\n}", "    my($last_char);\n    my($len);\n \
    \   my($i);\n    my($in_word);\n    my($is_letter);", "    my @characters = split(//,\
    \ $txt);\n    my $last_char = $characters[-1];\n    my $second_last_char = $characters[-2];\n\
    \    my $third_last_char = $characters[-3];\n    if(defined $third_last_char &&\
    \ defined $second_last_char && defined $last_char) {\n        if ($last_char =~\
    \ /[a-zA-Z]/ && $second_last_char !~ /[a-zA-Z]/ && $third_last_char !~ /[a-zA-Z]/)\
    \ {\n            return \"1\";\n        }\n    }\n    return \"\";\n}", "    return\
    \ ($txt =~ /(\\w) \\z/x) ? \"\" : $1;\n}", "    my $l = $txt;\n    my $ret = '';\n\
    \    $l =~ s/^.*\\s([A-Za-z]+)$/$1/;\n    $ret = 1 if ($l ne $txt);\n    return\
    \ $ret;\n}", "    my $has_last_letter = rindex($txt, \" \") != length($txt) -\
    \ 1 && $txt =~ / \\w$/;\n    return $has_last_letter ? 1 : \"\";\n}", "    my\
    \ $result = \"\";\n    if($txt =~ m/[a-zA-Z]$/){\n        $result = 1;\n    }\n\
    \    return $result;\n}", "    if($txt =~ /(\\w*)$/) {\n        return \"\"\n\
    \    } elsif($txt =~ /\\W(\\w*)$/) {\n        return \"\"\n    } elsif($txt =~\
    \ /(\\w*)[^\\w](\\w*)$/) {\n        return 1\n    }\n}", "    if ($txt =~ /(\\\
    w)\\s$/) {\n        return 0;\n    } elsif ($txt =~ /(\\w)$/) {\n        return\
    \ 1;\n    } else {\n        return '';\n    }\n}", "    # Your code here\n}",
  "    my $check = 0;\n    if ( $txt =~ /\\w+/ ) {\n        my @words = split /\\\
    s+/, $txt;\n        my $word = pop @words;\n        if ( $word =~ /^\\w$/ ) {\n\
    \            $check = 1;\n        }\n    }\n    return $check;\n}", "    if($txt\
    \ =~ /[^a-z]$/i){\n        return \"\";\n    }else{\n        return 1;\n    }\n\
    }", "    if ($txt =~ /(\\s+\\w+$)|(\\s+\\w+\\s+$)/) {\n        return \"\";\n\
    \    }\n    else {\n        return 1;\n    }\n}", "    my $rev = reverse($txt);\n\
    \    if($rev =~ /^\\s*(\\S)\\s*$/){\n        my $l = $1;\n        if($l =~ /[a-zA-Z]/){\n\
    \            return 1;\n        }\n    }\n    return \"\";\n}", "    if (length($txt)\
    \ == 0) {\n        return \"\";\n    } else {\n        my @words = split(/ /,\
    \ $txt);\n        my $last_word = $words[$#words];\n        my $last_char = substr($last_word,\
    \ length($last_word) - 1, 1);\n        my $last_char_ascii = ord($last_char);\n\
    \        if (($last_char_ascii >= 65 && $last_char_ascii <= 90) ||\n         \
    \   ($last_char_ascii >= 97 && $last_char_ascii <= 122)) {\n            return\
    \ 1;\n        } else {\n            return \"\";\n        }\n    }\n}", "    if\
    \ ($txt =~ /\\w$/) {\n        return '';\n    }\n    else {\n        return 1;\n\
    \    }\n}", "    return if !defined $txt;\n    if ( $txt !~ /\\S+$/ ) {\n    \
    \    return;\n    }\n    else {\n        return 1;\n    }\n}", "    return \"\"\
    \ if !$txt;\n    my @tmp = split(/ /, $txt);\n    my $last_word = $tmp[$#tmp];\n\
    \    return \"\" if $last_word !~ /[a-zA-Z]$/;\n    return \"\" if $last_word\
    \ =~ /[0-9]$/;\n    return \"\" if length($last_word) == 1;\n    return 1;\n}",
  "    # Add code here\n    return '';\n}", "    # YOUR CODE HERE\n    if ($txt =~\
    \ /[a-zA-Z]\\s/) {\n        return '';\n    } else {\n        return 1;\n    }",
  "    # --\n    if($txt=~/([a-zA-Z])\\s+$/){\n        return 1;\n    }\n    return\
    \ '';\n}", "    if ($txt =~ /(\\w) $/) {\n        return \"\";\n    } else {\n\
    \        return 1;\n    }\n}", "    return ($txt =~ /(\\s*\\w*)(\\w+\\s*$)/) ?\
    \ '' : 1;\n}", "    my($last_letter) = 1;\n    return($last_letter);\n}", "  \
    \  $txt =~ /(\\w*)(\\s*$)/;\n    return length($1) == 0 ? \"\" : 1;\n}", "   \
    \ my($last_char) = substr($txt, -1);\n    if (length($txt) > 0 && $last_char =~\
    \ /[a-zA-Z]/ && $last_char !~ /[a-zA-Z]\\w/ ) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    return $txt =~ /(?<!\\S)\\w$/ ? 1 :\
    \ '';\n}", "    return \"\" if $txt eq \"\";\n    return \"\" if $txt !~ /\\b\\\
    w+\\b[a-z]\\b/i;\n    return 1;\n}", "    if( $txt =~ /\\S([A-Za-z])(?!\\S)/ )\
    \ {\n        return 1;\n    }\n    return '';\n}", "    # >>> your code here <<<\n\
    \    if (length($txt)==0){\n        return \"\";\n    }\n    my $chars=length($txt);\n\
    \    my $last=chop($txt);\n    if($last eq \" \"){\n        return \"\";\n   \
    \ }elsif($last=~/\\w/){\n        return 1;\n    }else{\n        return \"\";\n\
    \    }\n}", "    my $result = '';\n    my $regx = qr/(?:\\s[a-z])$/;\n    if($txt\
    \ =~ $regx){\n    \t$result = 1;\n    }else{\n    \t$result = '';\n    }\n   \
    \ return $result;\n}", "    return 1 if $txt =~ m/\\b\\w+\\b$/;\n    return \"\
    \";\n}", "    my @chars = split //, $txt;\n    my $last = pop @chars;\n    my\
    \ $word = 1;\n    if ($last =~ /\\s/) {\n        $word = '';\n    }\n    if ($last\
    \ =~ /[a-zA-Z]/) {\n        return $word;\n    }\n    return $word;\n}", "   \
    \ my $txt2 = '';\n    for (my $i = length($txt)-1; $i >= 0; $i--) {\n        $txt2\
    \ = substr($txt, $i, 1);\n        last if $txt2 ne \" \";\n    }\n    $txt2 =~\
    \ /^[a-zA-Z]$/ ? 1 : '';\n}", "    chomp($txt);\n    return '' if $txt eq '';\n\
    \    my @chars = split(//, $txt);\n    my $last_char = $chars[-1];\n    return\
    \ '' if $last_char =~ /\\W/;\n    return 1 if $last_char =~ /\\w/;\n}", "    my\
    \ $ret;\n    # Fill in your code here\n    $ret = '1' if( (substr($txt, -1) =~\
    \ /[a-zA-Z]/) && (substr($txt, -2, 1) !~ /[a-zA-Z]/) );\n    return $ret;\n}",
  "    my @words = split(\" \", $txt);\n    my $last_word = $words[-1];\n    my $last_char\
    \ = substr($last_word, -1);\n    if ($last_char =~ /[a-zA-Z]/ && $last_char !~\
    \ /[\\w]/) {\n        return 1;\n    }\n    return \"\";\n}", "    if($txt =~\
    \ m/\\w$/g){\n        return '';\n    }else{\n        return 1;\n    }\n}", " \
    \   return substr( reverse($txt), 0, 1 ) =~ /\\s|\\W/ ? \"\" : 1;\n}", "    return\
    \ $txt =~ /\\S*[a-zA-Z]\\s*$/ ? 1 : '';\n}", "    if ($txt =~ /(\\S)\\s*$/) {\n\
    \        if ($1 =~ /[a-zA-Z]/) {\n            return 1;\n        }\n    }\n  \
    \  return \"\";\n}", "    my($retval) = \"\";\n    if ($txt =~ /\\b\\w+$/) {\n\
    \        $retval = \"\";\n    } else {\n        $retval = 1;\n    }\n    return\
    \ $retval;\n}", "    if(length($txt) > 0){\n        my @words = split(' ', $txt);\n\
    \        if(length($words[-1]) > 0){\n            my $lastChar = substr($words[-1],\
    \ -1);\n            if($lastChar =~ /[[:alpha:]]/){\n                return $lastChar;\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    my $return_value\
    \ = '';\n    $txt =~ /[A-Za-z]$/ && $txt =~ /[A-Za-z] (?!.*[A-Za-z])/ && ($return_value\
    \ = 1);\n    return $return_value;\n}", "    if (length($txt) > 0) {\n       \
    \ my @chars = split('', $txt);\n        my $prev_char = '';\n        my $last_char\
    \ = '';\n        foreach my $char (@chars) {\n            if ($char =~ /^[a-zA-Z]$/)\
    \ {\n                $last_char = $char;\n            }\n            if ($char\
    \ =~ /\\s/ && $prev_char =~ /^[a-zA-Z]$/) {\n                $last_char = '';\n\
    \            }\n            $prev_char = $char;\n        }\n        if ($last_char\
    \ =~ /^[a-zA-Z]$/) {\n            return 1;\n        }\n    }\n    return '';\n\
    }", "    # your code here\n    if ($txt eq '') {\n        return '';\n    }\n\
    \    if ($txt =~ /\\w*([^\\s\\w]\\z)/) {\n        return 1;\n    }\n    return\
    \ '';\n}", "    my $last_char = substr $txt, -1;\n    if ($last_char =~ m/[a-zA-Z]/)\
    \ {\n        return 1;\n    } else {\n        return '';\n    }\n}", "    my $t\
    \ = substr $txt, -1;\n    return 1 if ($t =~ /[A-Za-z]/);\n    return \"\";\n}",
  "    $txt =~ s/\\s+$//;\n    if (length($txt) == 0) {\n        return '';\n    }\n\
    \    my @chars = split('', $txt);\n    my $len = scalar(@chars);\n    my $last_char\
    \ = $chars[$len - 1];\n    if ($last_char =~ /^[a-zA-Z]$/) {\n        return 1;\n\
    \    }\n    return '';\n}", "    if($txt eq \"\") {\n        return \"\";\n  \
    \  } else {\n        my @split_txt = split(' ', $txt);\n        my $last_word\
    \ = $split_txt[$#split_txt];\n        my $last_letter = substr($last_word, -1);\n\
    \        if($last_letter =~ /[a-zA-Z]/ && $last_letter !~ /\\w/) {\n         \
    \   return 1;\n        } else {\n            return \"\";\n        }\n    }\n}",
  "    ######################\n    # ... your code here ...\n    ######################\n\
    }", "    if($txt =~ /\\S$/) {\n        return 1;\n    }\n    return '';\n}", " \
    \   my $ch = substr($txt, -1);\n    if(index('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\
    \ $ch) != -1) {\n        if(index($txt, ' ') != -1) {\n            if(index($txt,\
    \ ' ') == length($txt) - 2) {\n                return 1;\n            }\n    \
    \    }\n    }\n    return '';\n}", "    my $last_character = substr($txt, -1);\n\
    \    return length($txt) == 0 || $last_character =~ /\\s/ || $last_character !~\
    \ /\\w/ ? \"\" : 1;\n}", "    my $last_word_start = index($txt, ' ');\n    if\
    \ ($last_word_start == -1) {\n        return \"\";\n    } else {\n        $last_word_start\
    \ = rindex($txt, ' ', $last_word_start - 1);\n        if ($last_word_start ==\
    \ -1) {\n            $last_word_start = 0;\n        } else {\n            $last_word_start++;\n\
    \        }\n    }\n    my $last_word = substr($txt, $last_word_start);\n    if\
    \ ($last_word =~ /\\p{L}$/) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    my $lc = substr $txt, -1;\n    my $rc = substr $txt,\
    \ -2, 1;\n    return \"\" if $rc =~ /\\s/;\n    return $lc =~ /[a-zA-Z]/ ? 1 :\
    \ \"\";\n}", "    return '' if $txt eq '';\n    my($last_char) = substr($txt,\
    \ -1);\n    my($pre_last_char) = substr($txt, -2, 1);\n    if ($last_char =~ /\\\
    W/ && $pre_last_char =~ /\\w/) {\n        return 1;\n    }\n    return '';\n}",
  "    if($txt !~ m/\\w$/) {\n        return 1;\n    } else {\n        return \"\"\
    ;\n    }\n}", "    return 1 if $txt =~ m/\\w(\\s+\\w)?(\\s+\\w)?$/;\n    return\
    \ \"\";\n}", "    # your code goes here\n}\n1;", "    return 'unimplemented';\n\
    }", "    my $ret;\n    my $last_char;\n    my $last_char_is_a_letter;\n    my\
    \ $last_char_is_not_a_letter;\n    my $last_char_is_a_space;\n    my $last_char_is_not_a_space;\n\
    \    my $last_char_of_this_word;\n    my $last_char_of_previous_word;\n    my\
    \ $word_count;\n    my $previous_word_count;\n    my $len;\n    my $i;\n    my\
    \ $this_char;\n    my $this_char_is_a_letter;\n    my $this_char_is_not_a_letter;\n\
    \    my $this_char_is_a_space;\n    my $this_char_is_not_a_space;\n    my $is_the_last_char_of_a_word;\n\
    \    $ret = \"\";\n    if($txt ne \"\") {\n        $len = length($txt);\n    \
    \    $word_count = 0;\n        $last_char_of_this_word = \"\";\n        $last_char_of_previous_word\
    \ = \"\";\n        for($i = 0; $i < $len; $i++) {\n            $this_char = substr($txt,\
    \ $i, 1);\n            $this_char_is_a_letter = ($this_char =~ /[a-zA-Z]/);\n\
    \            $this_char_is_not_a_letter = !$this_char_is_a_letter;\n         \
    \   $this_char_is_a_space = ($this_char eq \" \");\n            $this_char_is_not_a_space\
    \ = !$this_char_is_a_space;\n            if($this_char_is_a_letter) {\n      \
    \          $last_char_of_this_word = $this_char;\n            }\n            if($this_char_is_a_space)\
    \ {\n                $last_char_of_previous_word = $last_char_of_this_word;\n\
    \                $word_count++;\n            }\n       ", "    if (length($txt)\
    \ < 1) {\n        return '';\n    } elsif (length($txt) < 2) {\n        return\
    \ '' if (length($txt) < 1);\n        return 1 if ($txt =~ /^[a-zA-Z]$/);\n   \
    \     return '';\n    } elsif ($txt =~ /^.*\\s+[a-zA-Z]$/) {\n        return 1;\n\
    \    } else {\n        return '';\n    }\n}", "    my @words = split(' ', $txt);\n\
    \    if(scalar(@words) > 0) {\n\tif($words[-1] =~ /\\w+/) {\n\t    return \"\"\
    ;\n\t}\n\treturn 1;\n    }\n    return \"\";\n}", "    my $result = \"\";\n  \
    \  my $last_char_is_a_letter = 1;\n    my $last_char_is_a_space = 1;\n    for\
    \ (my $i = 0; $i < length($txt); $i++) {\n        my $char = substr($txt, $i,\
    \ 1);\n        if ($char =~ /[a-zA-Z]/) {\n            $last_char_is_a_letter\
    \ = 1;\n            $last_char_is_a_space = 0;\n        } else {\n           \
    \ $last_char_is_a_letter = 0;\n            $last_char_is_a_space = 1;\n      \
    \  }\n    }\n    if ($last_char_is_a_letter && $last_char_is_a_space) {\n    \
    \    $result = 1;\n    } else {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    if ($txt =~ /[a-zA-Z]\\s/) {\n        return '';\n    }\n    elsif ($txt\
    \ =~ /[a-zA-Z]/) {\n        return 1;\n    }\n    else {\n        return '';\n\
    \    }\n}", "    if($txt =~ /\\w\\s$/) {\n\treturn \"\";\n    } else {\n\treturn\
    \ 1;\n    }\n}", "    my $letter_check = \"\";\n    if (length($txt) > 0) {\n\
    \        my $n = length($txt);\n        my $letter = substr($txt, $n-1, 1);\n\
    \        if ($letter =~ /[A-Za-z]/) {\n            $letter_check = 1;\n      \
    \  }\n    }\n    return $letter_check;\n}", "    # your code goes here\n}", " \
    \   my $is_last_char_a_letter = '';\n    my $is_last_char_the_last_char_of_a_word\
    \ = '';\n    my $char_before_last_char = undef;\n    my $last_char = undef;\n\
    \    my $number_of_words = 0;\n    my $number_of_chars = 0;\n    for (my $i =\
    \ 0; $i < length($txt); $i++) {\n        $char_before_last_char = $last_char;\n\
    \        $last_char = substr($txt, $i, 1);\n        $number_of_chars++;\n    \
    \    if ($last_char =~ /\\s/) {\n            $number_of_words++;\n        }\n\
    \    }\n    if ($last_char =~ /\\w/) {\n        $is_last_char_a_letter = 1;\n\
    \    }\n    if ($char_before_last_char =~ /\\s/) {\n        $is_last_char_the_last_char_of_a_word\
    \ = 1;\n    }\n    if ($is_last_char_a_letter and $is_last_char_the_last_char_of_a_word)\
    \ {\n        return 1;\n    }\n    else {\n        return '';\n    }\n}", "  \
    \  my $lastChar;\n    if ($txt) {\n        $lastChar = substr($txt, -1);\n   \
    \     if ($lastChar =~ m/[a-zA-Z]/) {\n            if ($txt =~ m/ $lastChar$/)\
    \ {\n                return 1;\n            }\n        }\n    }\n    return '';\n\
    }", "    return '' if length($txt) == 0;\n    my $last = substr($txt, -1);\n \
    \   if ($last =~ /[a-zA-Z]/) {\n        if ($txt =~ /\\s$/) {\n            return\
    \ '';\n        }\n        else {\n            return 1;\n        }\n    }\n  \
    \  else {\n        return '';\n    }\n}", "    return \"\" if $txt eq \"\";\n\
    \    my @chars = split \"\", $txt;\n    my $last = pop @chars;\n    return \"\"\
    \ if $last eq \" \";\n    return 1;\n}\nprint \"\\n\";", "    my $result = '';\n\
    \    # Implementation here", "    return '' if $txt eq '';\n    my $ch = chop\
    \ $txt;\n    return check_if_last_char_is_a_letter($txt) if $ch eq ' ';\n    return\
    \ ($ch =~ /^[a-zA-Z]$/) ? 1 : '';\n}", "    my @arr = split(\" \", $txt);\n  \
    \  my $element = @arr[-1];\n    my $result = (grep(/[a-zA-Z]/, $element)) ? \"\
    \" : 1;\n    return $result;\n}", "    my $result = 0;\n    my $last = (split(/\\\
    s+/, $txt))[-1];\n    if ($last && $last =~ /[a-zA-Z]$/) {\n        $result =\
    \ 1;\n    }\n    return $result;\n}", "    my @chars = split('', $txt);\n    my\
    \ $prev = ' ';\n    my $curr = pop @chars;\n    if (length($txt) == 0) {\n   \
    \     return \"\";\n    }\n    while ($curr =~ /[a-zA-Z]/) {\n        $prev =\
    \ $curr;\n        $curr = pop @chars;\n    }\n    if ($prev =~ /[a-zA-Z]/ && $curr\
    \ =~ /\\s/) {\n        return 1;\n    }\n    return \"\";\n}", "    # Your code\
    \ goes here.\n    my @char_array = split //, $txt;\n    my $flag = 0;\n    foreach\
    \ my $c(@char_array){\n    \tif(($c ge 'a' && $c le 'z') || ($c ge 'A' && $c le\
    \ 'Z')){\n    \t\t$flag = 1;\n    \t}\n    \telse{\n    \t\t$flag = 0;\n    \t\
    }\n    }\n    if($flag == 1){\n    \treturn 1;\n    }\n    else{\n    \treturn\
    \ \"\";\n    }\n}", "    my @words = split(/ /, $txt);\n    if (@words){\n   \
    \     my $last_word = pop @words;\n        my $last_char = substr($last_word,\
    \ -1);\n        if ($last_char =~ /[a-zA-Z]/){\n            return 1;\n      \
    \  }\n    }\n    return '';\n}", "    if ($txt =~ /\\s$/) {\n        return \"\
    \";\n    } elsif ($txt =~ /[A-Za-z]$/) {\n        return 1;\n    } else {\n  \
    \      return \"\";\n    }\n}", "    my $last_ch = substr $txt, -1;\n    if ($last_ch\
    \ =~ /[A-Za-z]/) {\n        return 1;\n    }\n    return '';\n}", "    my $len\
    \ = length($txt);\n    return \"\" if $len == 0;\n    my $last_char = substr($txt,\
    \ $len - 1, 1);\n    if ( $last_char =~ /\\w/ ) {\n        return \"\";\n    }\
    \ else {\n        return 1;\n    }\n}", "    # TODO - write this function\n  \
    \  my @char = split(//, $txt);\n    my $last = pop @char;\n    if ( $last =~ m/[a-zA-Z]/\
    \ ) {\n        return $last;\n    }\n    else {\n        return;\n    }\n}", " \
    \   return 1 if $txt =~ /\\w+\\s+(\\w)$/ and $1 !~ /\\w/;\n    return '';\n}",
  "    return \"\" if $txt eq \"\";\n    my $last = chop($txt);\n    return (\"\"\
    \ if $last =~ /\\s/ && $txt =~ /\\w$/);\n    return 1;\n}", "    if ($txt =~ /[a-zA-Z]\\\
    s*$/) {\n        return 1;\n    }\n    return '';\n}", "    # >> your code here\
    \ <<\n    return 1;\n}", "    if (substr($txt, -1) =~ /\\w/){\n        return\
    \ \"\";\n    }\n    return 1;\n}", "    my $last_char = substr($txt, -1);\n  \
    \  if($last_char =~ /[a-zA-Z]/) {\n        my $space_count = 0;\n        for(my\
    \ $i = length($txt) - 1; $i >= 0; $i--) {\n            if(substr($txt, $i, 1)\
    \ eq \" \") {\n                $space_count++;\n            }\n            else\
    \ {\n                last;\n            }\n        }\n        if($space_count\
    \ % 2 == 0) {\n            return 1;\n        }\n        else {\n            return\
    \ \"\";\n        }\n    }\n    else {\n        return \"\";\n    }\n}", "    my\
    \ $result = '';\n    # replace this code with yours\n    return $result;\n}",
  "    my $ret = \"\";\n    if(defined($txt) && $txt ne \"\") {\n        my @arr =\
    \ split(/ /, $txt);\n        my $last = $arr[$#arr];\n        my $last_char =\
    \ substr($last, -1);\n        if($last_char !~ /\\s/ && $last_char =~ /[a-zA-Z]/)\
    \ {\n            $ret = 1;\n        }\n    }\n    return $ret;\n}", "    # Add\
    \ code here\n    my $length=length($txt);\n    my $last=substr($txt, $length-1,1);\n\
    \    #print $last;\n    if(substr($txt, $length-1,1) =~ /^[A-Za-z]$/ && substr($txt,\
    \ $length-2,1) =~ /^[\\s]$/){\n        return 1;\n    }else{\n        return \"\
    \";\n    }\n}", "    # Add code here\n}", "    return '' if $txt =~ /[a-z]\\s$/i;\n\
    \    return 1 if $txt =~ /[a-z]$/i;\n    return '';\n}", "    if ($txt eq \"\"\
    ) {\n        return \"\";\n    }", "    #write your code here\n    if ($txt =~\
    \ m/\\w+\\s\\w+\\s\\w+$/g) {\n        return 1;\n    } else {\n        return\
    \ '';\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
