name: HumanEval_134_check_if_last_char_is_a_letter
language: pl
prompt: "# Create a function that returns 1 if the last character\n# of a given string\
  \ is an alphabetical character and is not\n# a part of a word, and  otherwise.\n\
  # Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>>\
  \ check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\
  apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\
  \n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter\
  \ {\n    my($txt) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n\
  \        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $last_char = substr($txt, length($txt) - 1, 1);\n    if($last_char\
    \ =~ /[a-zA-Z]/){\n\tmy @words = split(/ /, $txt);\n\tmy $last_word = $words[$#words];\n\
    \tif(length($last_word) == 1){\n\t    return 1;\n\t}\n    }\n    return \"\";\n\
    }", "    my($txt_trim) = trim($txt);\n    my($ln) = length($txt_trim);\n    my($lc)\
    \ = substr($txt_trim, $ln - 1, 1);\n    if(is_alphabet($lc)) {\n        if( (\
    \ $txt_trim =~ / $lc / ) || ( $txt_trim =~ /$lc$/ ) ) {\n            return \"\
    \";\n        }\n        else {\n            return 1;\n        }\n    }\n    else\
    \ {\n        return \"\";\n    }\n}", "    return is_alphabet($txt) && (split\
    \ /\\s+/, $txt)[-1] ne $txt ? 1 : \"\";\n}", "    # your code goes here\n}", " \
    \   return (substr($txt, -1) =~ /\\w/) ? 0 : 1;\n}", "    return if(!$txt);\n\
    \    if($txt =~ /\\w(\\s+)/) {\n        return \"\";\n    }\n    if($txt =~ /\\\
    w$/) {\n        return 1;\n    }\n    return \"\";\n}", "    my $ret = \"\";\n\
    \    my $is_last_char_letter = 0;\n    my $is_last_char_part_of_word = 0;\n  \
    \  my $is_last_char_letter_and_not_part_of_word = 0;\n    # my $last_char = ????\n\
    \    if ($last_char =~ /[[:alpha:]]/) {\n        $is_last_char_letter = 1;\n \
    \   } else {\n        $is_last_char_letter = 0;\n    }\n    if ($txt =~ /\\w$/)\
    \ {\n        $is_last_char_part_of_word = 1;\n    } else {\n        $is_last_char_part_of_word\
    \ = 0;\n    }\n    if ($is_last_char_letter && !$is_last_char_part_of_word) {\n\
    \        $is_last_char_letter_and_not_part_of_word = 1;\n    } else {\n      \
    \  $is_last_char_letter_and_not_part_of_word = 0;\n    }\n    if ($is_last_char_letter_and_not_part_of_word)\
    \ {\n        $ret = 1;\n    } else {\n        $ret = \"\";\n    }\n    return\
    \ $ret;\n}", "    $txt =~ s/\\s+$//;\n    return (substr($txt, -1) =~ /^[A-Za-z]$/)\
    \ ? 1 : \"\";\n}", "    my($pos);\n    $pos = length($txt);\n    if ( ( $pos ==\
    \ 0 ) ||\n         ( $txt !~ /[a-zA-Z]$/ ) ||\n         ( $txt =~ /[a-zA-Z]\\\
    s$/ ) ) {\n        return \"\";\n    }\n    return 1;\n}", "    return \"\" if\
    \ $txt eq \"\";\n    my $last_char = substr $txt, -1;\n    my $last_char_is_not_letter\
    \ = $last_char !~ /[a-zA-Z]/;\n    my $txt_without_last_char = substr $txt, 0,\
    \ -1;\n    return 1 if $last_char_is_not_letter && $txt_without_last_char =~ /\
    \ /;\n    return \"\";\n}", "    return substr($txt, -1) =~ /[a-zA-Z]/ && $txt\
    \ !~ /\\S\\s/ ? 1 : '';\n}", "    return 0 if (length($txt) == 0);\n    my $last_char\
    \ = $txt;\n    my $len = length($txt);\n    while ($len > 0) {\n        $last_char\
    \ = substr($txt, $len - 1, 1);\n        if ($last_char =~ /\\w/) {\n         \
    \   last;\n        }\n        $len--;\n    }\n    if ($last_char =~ /\\w/) {\n\
    \        my $prev_last_char = $txt;\n        if ($len > 1) {\n            $prev_last_char\
    \ = substr($txt, $len - 2, 1);\n        }\n        if ($prev_last_char =~ /\\\
    s/) {\n            return 1;\n        }\n    }\n    return 0;\n}", "    # remove\
    \ any space before end of text\n    $txt =~ s/\\s+$//;\n    # if there is still\
    \ a space in the text,\n    # the last character is not a letter.\n    return($txt\
    \ =~ /\\s/) ? '' : 1;\n}", "    if ($txt =~ /\\w+$/) {\n        return \"\";\n\
    \    }\n    else {\n        return 1;\n    }\n}", "    my $result = \"\";\n  \
    \  my $last_char = substr($txt, -1);\n    if (is_alphabetical($last_char) && !check_if_letter_in_word($txt))\
    \ {\n        $result = 1;\n    }\n    return $result;\n}", "    my($result);\n\
    \    if (length($txt) > 0) {\n        if (substr($txt, -1) =~ /\\w/) {\n     \
    \       $result = \"\";\n        } else {\n            $result = 1;\n        }\n\
    \    } else {\n        $result = \"\";\n    }\n    return $result;\n}", "    $txt\
    \ =~ s/\\s+$//;\n    my @words = split(/\\s+/, $txt);\n    my $last_word = pop\
    \ @words;\n    $last_word =~ /([a-zA-Z])$/;\n    return $1;\n}", "    if (length($txt)\
    \ == 0) {\n        return \"\";\n    }\n    my @words = split / /, $txt;\n   \
    \ my $last_word = $words[$#words];\n    if ($last_word =~ /^[a-zA-Z]+$/) {\n \
    \       return 1;\n    }\n    return \"\";\n}", "    return \"\";\n}", "    my\
    \ $ret = \"\";\n    my $last_char = \"\";\n    my $second_last_char = \"\";\n\
    \    if ($txt eq \"\") {\n        return $ret;\n    } else {\n        my @chars\
    \ = split(//, $txt);\n        my $last_char = $chars[$#chars];\n        my $second_last_char\
    \ = $chars[$#chars - 1];\n        if ($last_char =~ /^[[:alpha:]]$/ && $second_last_char\
    \ =~ /^[[:space:]]$/) {\n            $ret = 1;\n        }\n        return $ret;\n\
    \    }\n}", "    return $txt;\n}", "    return 0;\n}", "    if ( $txt =~ /([A-Za-z])\\\
    s*$/ ) {\n        return 1;\n    }\n    return '';\n}", "    return $txt =~ /\\\
    b(\\w+)\\b\\W$/;\n}", "    # Write the code to return the expected value here\n\
    }", "    # my $last_char = chop $txt;\n    if ($txt =~ /[a-zA-Z]$/) {\n      \
    \  return 1;\n    } else {\n        return \"\";\n    }\n}", "    my @txt = split(\"\
    \ \", $txt);\n    my $chr = chop $txt[-1];\n    if ( $chr =~ /[a-zA-Z]/ ) {\n\
    \        print \"1\\n\";\n    } else {\n        print \"\\n\";\n    }\n}", " \
    \   my $alpha_regex = qr/[A-Za-z]/;\n    if($txt =~ /$alpha_regex\\s/) {\n   \
    \     return \"\";\n    }\n    else {\n        return 1;\n    }\n}", "    if (\
    \ $txt =~ /(\\S)(\\s)([A-Za-z])(\\s)$/ ) {\n        return 1;\n    }\n    else\
    \ {\n        return '';\n    }\n}", "    my $last_char = substr($txt, -1);\n \
    \   if ($last_char =~ /[A-Za-z]/ and ($txt =~ / $last_char$/)) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    return 1 if($txt =~ /\\s[a-zA-Z]$/);\n\
    \    return \"\";\n}", "    if (length($txt) == 0) {\n        return \"\";\n \
    \   }\n    my $last = substr($txt, -1);\n    if ($last =~ /[a-zA-Z]/) {\n    \
    \    return 1;\n    }\n    return \"\";\n}", "    $txt =~ s/\\s*$//; # remove\
    \ trailing spaces\n    if ($txt =~ /[a-zA-Z]$/) {\n        return 1;\n    }\n\
    \    return \"\";\n}", "    my $retval = '';\n    if ($txt =~ /(\\S)\\s$/) {\n\
    \        my $letter = $1;\n        if ($letter =~ /[a-zA-Z]/) {\n            $retval\
    \ = 1;\n        }\n    }\n    return $retval;\n}", "    my($result);\n    my($value);\n\
    \    #\n    $value =  substr($txt, -1);\n    if ($value =~ /\\w$/) {\n       \
    \ $result = 1;\n    } else {\n        $result = \"\";\n    }\n    return $result;\n\
    }", "    my $rc = 0;\n    # Remove the last char if it is blank.\n    chop($txt)\
    \ if $txt && $txt =~ /\\s$/;\n    # Check if the last char is an alphabetical\
    \ character.\n    $rc = $txt && $txt =~ /\\w$/ ? 1 : 0;\n    return $rc;\n}",
  "    my $ret = \"\";\n    my $num = length($txt);\n    my $last_char = substr($txt,\
    \ $num-1, 1);\n    if ($num > 0) {\n        if ($last_char =~ /[a-zA-Z]/) {\n\
    \            $ret = \"1\";\n        }\n    }\n    return $ret;\n}", "    return\
    \ if (!$txt);\n    $txt =~ s/[^\\w\\s]$//;\n    return $txt ? 1 : '';\n}", " \
    \   return $txt if $txt =~ /(\\w)\\s\\1$/;\n    return \"\";\n}", "    my @words\
    \ = split(/ /, $txt);\n    my $last_word = pop @words;\n    my $last_char = substr($last_word,\
    \ -1);\n    return $last_char =~ /^[a-zA-Z]$/ ? 1 : '';\n}", "    my $is_alpha\
    \ = 0;\n    my $output = \"\";\n    # If a non-empty string was passed, check\
    \ if the last\n    # character is a letter.\n    if (defined($txt) && $txt ne\
    \ \"\") {\n        # Find the last character of the string.\n        my $last_character\
    \ = substr($txt, length($txt) - 1, 1);\n        # Check if it is a letter.\n \
    \       if ( $last_character =~ /[a-zA-Z]/ ) {\n            $is_alpha = 1;\n \
    \       }\n    }\n    # If the last character is a letter, return 1, else \"\"\
    .\n    if ($is_alpha) {\n        $output = 1;\n    }\n    return $output;\n}",
  "    # TODO - Implement this function\n}", "    # TODO - add your code here\n  \
    \  if(length($txt) == 0){\n      return \"\";\n    }\n    my $last = substr($txt,\
    \ -1);\n    if($last eq \" \"){\n      return \"\";\n    }\n    if($last =~ /[a-zA-Z]/){\n\
    \      return 1;\n    }\n    return \"\";\n}", "    my @words = split(/ /, $txt);\n\
    \    my $lastword = $words[$#words];\n    if ($lastword =~ /[a-zA-Z]$/) {\n\t\
    return 1;\n    } else {\n\treturn \"\";\n    }\n}", "    return 1 if($txt =~ /\\\
    w(\\s+)([a-z])$/i);\n    return \"\";\n}", "    if(lc(substr($txt, -1)) =~ /[a-z]/\
    \ and !(lc(substr($txt, -2, 1)) =~ /[a-z]/)){\n        return \"1\";\n    }else{\n\
    \        return \"\";\n    }\n}", "    my $rv = \"\";\n    my $length = length($txt);\n\
    \    if($length>0) {\n        if($txt =~ m/^.+([a-zA-Z])$/) {\n            $rv\
    \ = 1;\n        }\n    }\n    return $rv;\n}", "    if($txt =~ /\\s*[a-zA-Z]$/s)\
    \ {\n        return 1;\n    }\n    return '';\n}", "    my $ret;\n    # Fill in\
    \ code\n    return $ret;\n}", "    # Write your code below this line.\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    chomp($txt);\n    my $result;\n    if($txt =~ /\\s\\\
    w+$/){\n        $result = 1;\n    } else {\n        $result = \"\";\n    }\n \
    \   return $result;\n}", "    return \"\" if $txt eq \"\";\n    my @chars = split(//,\
    \ $txt);\n    return \"\" if $chars[-1] !~ /[a-zA-Z]/;\n    return \"\" if $chars[-2]\
    \ =~ /[a-zA-Z]/;\n    return 1;\n}", "    my @words = split(' ', $txt);\n    my\
    \ $last_word = pop @words;\n    my $last_letter = substr($last_word, -1);\n  \
    \  return $last_letter =~ /[a-zA-Z]/ && !($txt =~ /[a-zA-Z]$/);\n}", "    # Perform\
    \ the actions as described in the assignment\n    # and return the correct values.\n\
    \    # Note: Use the correct regular expression.\n}", "    my $ret;\n    if(($txt\
    \ =~ /^(.*) ([a-zA-Z])$/) || ($txt =~ /^([a-zA-Z])$/)){\n        $ret = 1;\n \
    \   }\n    return $ret;\n}", "    my($retVal) = \"\";\n    if ($txt =~ /\\w(\\\
    w*[a-zA-Z]+)+\\s*$/) {\n        $retVal = \"1\";\n    }\n    return $retVal;\n\
    }", "    return $txt;\n}", "    my $last = substr($txt, -1);\n    my $result =\
    \ \"\";\n    if($last =~ /\\w/){\n        $result = \"1\";\n    }\n    return\
    \ $result;\n}", "    if ($txt =~ /\\w\\b/) {\n        return 1;\n    }\n    else\
    \ {\n        return \"\";\n    }\n}", "    my @words = split(/\\s+/, $txt);\n\
    \    my $last_char_of_the_last_word = substr(pop(@words), -1);\n    if ($last_char_of_the_last_word\
    \ =~ /[a-zA-Z]/) {\n        return 1;\n    }\n    return \"\";\n}", "    # Write\
    \ your code here\n}", "    my $ret = \"\";\n    if($txt =~ /[a-zA-Z]\\s$/) {\n\
    \        $ret = 1;\n    }\n    return $ret;\n}", "    my $return = \"\";\n   \
    \ my $word = \"\";\n    my $word_count = 0;\n    my $i;\n    my $j;\n    for ($i\
    \ = 0; $i < length($txt); $i++) {\n        if (substr($txt, $i, 1) eq \" \") {\n\
    \            if ($word ne \"\") {\n                for ($j = 0; $j < length($word);\
    \ $j++) {\n                    if (!(($word =~ m/\\d/) || ($word =~ m/[\\]\\[.,!?;:_-]/)))\
    \ {\n                        $word_count++;\n                    }\n         \
    \       }\n            }\n            $word = \"\";\n        } else {\n      \
    \      $word = $word . substr($txt, $i, 1);\n        }\n    }\n    if ($word ne\
    \ \"\") {\n        for ($j = 0; $j < length($word); $j++) {\n            if (!(($word\
    \ =~ m/\\d/) || ($word =~ m/[\\]\\[.,!?;:_-]/))) {\n                $word_count++;\n\
    \            }\n        }\n    }\n    if ($word_count == 0) {\n        $return\
    \ = \"\";\n    } else {\n        $return = 1;\n    }\n    return $return;\n}",
  "    if ($txt =~ /(\\w)$/) {\n        return \"\";\n    }\n    elsif ($txt =~ /([a-zA-Z])$/)\
    \ {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", " \
    \   return \"\";\n}", "    if ($txt) {\n        my $last = substr($txt, -1);\n\
    \        my $prev = substr($txt, -2, 1);\n        return $last =~ /\\w/ && $prev\
    \ !~ /\\w/ ? 1 : '';\n    }\n    return '';\n}", "    my @array = split / /, $txt;\n\
    \    my $last_element =  $array[-1];\n    if ($last_element =~ /^[a-zA-Z]$/) {\n\
    \        return $last_element;\n    }\n    else {\n        return \"\";\n    }\n\
    }", "    return \"\" if (not $txt);\n    my @words = split(/\\s+/, $txt);\n  \
    \  foreach my $word (@words) {\n        next if ($word =~ /[^a-zA-Z]$/);\n   \
    \     return \"1\";\n    }\n    return \"\";\n}", "    $txt =~ s/(\\w).*$/$1/;\n\
    \    return 1 if $txt !~ /\\s/;\n    return;\n}", "    my($i, $j, $len, $ch, $is_letter);\n\
    \    $len = length($txt);\n    $is_letter = 0;\n    for($i = $len-1; $i >= 0;\
    \ $i--) {\n        $ch = substr($txt, $i, 1);\n        if($ch =~ /\\w/) {\n  \
    \          $is_letter = 1;\n            last;\n        }\n    }\n    return $is_letter;\n\
    }", "    if ($txt eq \"\") {\n        return \"\";\n    }\n    my $last = substr($txt,\
    \ -1);\n    if ($last =~ /[A-Za-z]/) {\n        return \"1\";\n    }\n    return\
    \ \"\";\n}", "    my($flag) = \"\";\n    # Check if there is any character in\
    \ the string\n    if (length($txt) > 0) {\n        # Get the last character\n\
    \        my($last_char) = substr($txt, -1);\n        # Check if last character\
    \ is an alphabetical character\n        if ($last_char =~ /[a-zA-Z]/) {\n    \
    \        # Check if the last character is a part of a word\n            if ($txt\
    \ =~ /$last_char\\s/) {\n                $flag = 1;\n            }\n        }\n\
    \    }\n    return $flag;\n}", "    if ($txt eq \"\") {\n        return \"\";\n\
    \    }\n    if ($txt =~ /^\\s*\\w+\\s*$/) {\n        return \"\";\n    }\n   \
    \ return 1;\n}", "    return 0;\n}", "    my $last_char = substr($txt, length($txt)\
    \ - 1, 1);\n    if(substr($txt, length($txt) - 2, 1) =~ /\\s/ and $last_char =~\
    \ /[a-zA-Z]/) {\n        return 1;\n    }\n    return \"\";\n}", "    # Put your\
    \ code here\n}", "    return $txt =~ m/\\p{isAlpha}$/m;\n}", "    if ($txt =~\
    \ /[a-zA-Z]$/) {\n        return 1;\n    }\n    return \"\";\n}", "    if ($txt\
    \ =~ /(\\s*)(\\w*)$/) {\n        return \"\";\n    } else {\n        return 1;\n\
    \    }\n}", "    my $len = length($txt);\n    if($len == 0) {\n        return\
    \ \"\";\n    }\n    if($txt =~ /^.*\\s[a-zA-Z]\\s*$/) {\n        return 1;\n \
    \   }\n    else {\n        return \"\";\n    }\n}", "    return if $txt eq \"\"\
    ;\n    if ($txt =~ /^.*?\\w$/) {\n        return \"\"\n    } else {\n        return\
    \ 1\n    }\n}", "    # TODO: return 1 if the last character of a given string\n\
    \    # is an alphabetical character and is not a part of a word,\n    # and return\
    \ an empty string otherwise.\n    my @v;\n    if( $txt =~ m/.*(\\w)$/ ){\n   \
    \     return \"\";\n    }else{\n        return 1;\n    }\n}", "    $txt =~ s/[\\\
    s+]$//;\n    $txt =~ s/.*\\s+//;\n    if (lc($txt) ne $txt && $txt !~ /\\s/) {\n\
    \        return 1;\n    }\n    return \"\";\n}", "    my $return_val = \"\";\n\
    \    my $len = length($txt);\n    if ( $len > 0 ) {\n        my $last_char = substr($txt,$len-1,1);\n\
    \        if ( $last_char =~ /[a-zA-Z]/ && $last_char !~ /[a-zA-Z][0-9]/ && $last_char\
    \ !~ /[0-9][a-zA-Z]/ ) {\n            $return_val = 1;\n        }\n    }\n   \
    \ return $return_val;\n}", "    my $flag = 0;\n    my $len = length($txt);\n \
    \   my $last = chop($txt);\n    if ( ( ord($last) > 64 ) && ( ord($last) < 91\
    \ ) || ( ord($last) > 96 ) && ( ord($last) < 123 ) ) {\n        if ( $len == 1\
    \ ) {\n            $flag = 1;\n        }\n        else {\n            if ( $last\
    \ eq \" \" ) {\n                my $second_last = chop($txt);\n              \
    \  if ( ( ord($second_last) > 64 ) && ( ord($second_last) < 91 ) || ( ord($second_last)\
    \ > 96 ) && ( ord($second_last) < 123 ) ) {\n                    $flag = 1;\n\
    \                }\n            }\n            else {\n                $flag =\
    \ 1;\n            }\n        }\n    }\n    return $flag;\n}", "    my @words =\
    \ split(/ /, $txt);\n    my $last_word = pop @words;\n    $last_word =~ s/\\s+$//;\n\
    \    return \"\" if ($last_word eq \"\");\n    return 1 if ($last_word =~ /\\\
    w$/);\n    return \"\";\n}", "    if ($txt =~ /(\\w+)$/) {\n        return \"\"\
    ;\n    } else {\n        return 1;\n    }\n}", "    my @array = split(/ /, $txt);\n\
    \    my $last  = pop @array;\n    if(!$last) {\n        return \"\";\n    }\n\
    \    if($last =~ /[a-zA-Z]/ && $last !~ /^[a-zA-Z]{1,}$/) {\n        return 1;\n\
    \    }\n    return \"\";\n}", "    return \"\" if (!$txt);\n    my $res = \"\"\
    ;\n    my @words = split(/ /, $txt);\n    my $last_word = $words[$#words];\n \
    \   my $last_char = substr($last_word, -1);\n    $res = is_alpha($last_char) ?\
    \ 1 : \"\" if ($last_char);\n    return $res;\n}", "    return ( $txt =~ / [a-z]\
    \ $/x ) ? 1 : \"\";\n}", "    my($not_empty_txt) = $txt ne \"\";\n    my($has_space)\
    \ = $txt =~ m/ /;\n    my($last_char) = substr($txt, length($txt) - 1, 1);\n \
    \   my($check_last_char) = $last_char =~ m/[a-zA-Z]/;\n    my($check_word) = !($has_space\
    \ && $check_last_char);\n    my($result) = $not_empty_txt && $check_word;\n  \
    \  return $result;\n}", "    my $result = \"\";\n    if ( $txt ) {\n        $result\
    \ = substr($txt, -1, 1);\n        if ( $result =~ /\\w/ ) {\n            $result\
    \ = \"\";\n        }\n    }\n    return $result;\n}", "    $txt =~ s/\\s+$//;\
    \ # remove trailing spaces\n    return \"\" if !$txt;\n    return \"\" if $txt\
    \ =~ /\\w$/;\n    return \"1\";\n}", "    if(length($txt) == 0) {\n        return\
    \ '';\n    }\n    my @arr = split(/ /, $txt);\n    my $len = scalar(@arr);\n \
    \   my $lastWord = $arr[$len - 1];\n    if(length($lastWord) == 0) {\n       \
    \ return '';\n    }\n    my $lastChar = substr($lastWord, -1);\n    if(($lastChar\
    \ ge 'a' && $lastChar le 'z')\n    || ($lastChar ge 'A' && $lastChar le 'Z'))\
    \ {\n        return '1';\n    }\n    return '';\n}", "    my $txt_len = length($txt);\n\
    \    return \"\" if $txt_len == 0;\n    my $last_char = substr($txt, $txt_len\
    \ - 1, 1);\n    return \"\" if $last_char eq \" \";\n    my $before_last_char\
    \ = substr($txt, $txt_len - 2, 1);\n    return \"\" if $before_last_char eq \"\
    \ \";\n    return 1;\n}", "    if ($txt =~ m/\\s[a-zA-Z]$/) {\n        return\
    \ 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    if($txt =~ m/[a-zA-Z]\\\
    s+$/ ){\n        return 1;\n    }\n    return '';\n}", "    return $txt =~ /\\\
    s(\\w)$/ ? $1 : \"\";\n}", "    $txt =~ s/\\s+$//;\n    if ($txt =~ /\\w$/) {\n\
    \        return 1;\n    }\n    return \"\";\n}", "    if($txt =~ /(\\S)$/){\n\
    \        return 1 if($1 !~ /\\w/);\n    }\n    return \"\";\n}", "    if($txt=~m/\\\
    w\\s$/){\n        return 1;\n    }\n    return 0;\n}", "    my $flag = \"\";\n\
    \    my $i;\n    my $j;\n    my $c;\n    my $tmp;\n    my $len;\n    my $tmp_str;\n\
    \    my $tmp_str1;\n    $tmp_str1 = \"\";\n    $tmp_str = \"\";\n    $len = length($txt);\n\
    \    if ($len != 0) {\n        $i = $len - 1;\n        while ($i >= 0) {\n   \
    \         $c = substr($txt, $i, 1);\n            if (($c ge \"a\") && ($c le \"\
    z\")) {\n                $tmp_str = $c . $tmp_str;\n            }\n          \
    \  else {\n                if (($c ge \"A\") && ($c le \"Z\")) {\n           \
    \         $tmp_str = $c . $tmp_str;\n                }\n                else {\n\
    \                    if ($tmp_str ne \"\") {\n                        $tmp_str1\
    \ = $tmp_str;\n                        $tmp_str = \"\";\n                    }\n\
    \                }\n            }\n            $i = $i - 1;\n        }\n     \
    \   if ($tmp_str ne \"\") {\n            $tmp_str1 = $tmp_str;\n        }\n  \
    \      $len = length($tmp_str1);\n        if ($len != 0) {\n            $i = 0;\n\
    \            $j = 1;\n            while ($j < $len) {\n                $c = substr($tmp_str1,\
    \ $i, 1);\n                if (($c ge \"a\") && ($c le \"z\")) {\n           \
    \         $i = $j;\n                }\n                else {\n              \
    \      if (($c ge \"A\") && ($c le \"Z\")) {\n                        $i = $j;\n\
    \                    }\n                }\n                $j = $j + 1;\n    \
    \        }\n            $c = substr($tmp_str1, $i, 1);\n            if (($c ge\
    \ \"a\") && ($c le \"z\")) {\n                $flag = 1;\n            }\n    \
    \        else {\n                if (($c ge \"A\") && ($c le \"Z\")) {\n     \
    \               $flag = 1;\n                }\n            }\n        }\n   ",
  "    my($lastchar) = chop($txt);\n    if ($lastchar =~ m/[a-zA-Z]/) {\n        return\
    \ 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my $last_character\
    \ = substr($txt, -1);\n    if ($last_character =~ /[a-zA-Z]/ and $last_character\
    \ !~ /\\w/) {\n        return 1;\n    }\n    return '';\n}", "    $txt =~ s/\\\
    s+$//;\n    if ( ( $txt =~ /\\w$/ ) and ( $txt !~ /\\w $/ ) ) {\n        return\
    \ 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my $ret = \"\"\
    ;\n    my $last = chop($txt);\n    if ($last =~ /\\w/) {\n        $ret = 1;\n\
    \    }\n    return $ret;\n}", "    #if( $txt =~ /.*(\\w)\\s*$/ ) {\n    #    return\
    \ $1;\n    #} else {\n    #    return '';\n    #}\n    #my $len = length($txt);\n\
    \    #my $last_char = substr($txt, $len-1, 1);\n    #my $prev_char = substr($txt,\
    \ $len-2, 1);\n    #if( $last_char =~ /\\w/ && $prev_char !~ /\\w/ ) {\n    #\
    \    return $last_char;\n    #} else {\n    #    return '';\n    #}\n    if( $txt\
    \ =~ /\\b\\w$/ ) {\n        return '';\n    } else {\n        if( $txt =~ /\\\
    b(\\w)\\s*$/ ) {\n            return $1;\n        } else {\n            return\
    \ '';\n        }\n    }\n}", "    if(($txt =~ /^.*[a-z]$/i) && ($txt !~ /^.*[a-z][a-z]$/i))\
    \ {\n        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my\
    \ $retval = \"\";\n    if (length($txt) > 0) {\n        my $lastChar = substr($txt,\
    \ -1);\n        if (($lastChar =~ /[a-zA-Z]/) && ($lastChar !~ /\\w/)) {\n   \
    \         $retval = 1;\n        }\n    }\n    return $retval;\n}", "    return\
    \ $txt =~ m/\\w\\z/ ? '' : 1;\n}", "    my($result);\n    # Write your code here...\n\
    \    return($result);\n}", "    # Your code goes here\n    my $last_char= substr\
    \ $txt, -1;\n    if($last_char =~ /[a-zA-Z]/){\n      print $last_char;\n    }\n\
    \    else{\n      print \"\";\n    }\n}", "    # ... \n}", "    my @arr = split(\"\
    \ \", $txt);\n    my $last_word = pop @arr;\n    my $last_letter = substr($last_word,\
    \ -1);\n    if(substr($last_word, -1) =~ /[a-zA-Z]/){\n        return 1;\n   \
    \ }else{\n        return \"\";\n    }\n}", "    $txt =~ /(\\w)(?=[\\s]*$)/;\n\
    \    return $1 ? 1 : '';\n}", "    return if ! defined $txt;\n    return 1 if\
    \ $txt =~ /\\w+\\s\\b\\w/;\n    return;\n}", "    my $result = \"\";\n    my $len\
    \ = length($txt);\n    my $last_char = substr($txt, $len - 1, 1);\n    my $prev_char\
    \ = substr($txt, $len - 2, 1);\n    if ($prev_char ne \" \") {\n        if ($last_char\
    \ =~ /[A-Za-z]/) {\n            $result = 1;\n        }\n    }\n    return $result;\n\
    }", "    my $match = substr($txt, -1);\n    my $rc = \"\";\n    # check if the\
    \ last character is an alphabetical character and\n    # is not a part of a word\n\
    \    if ( $match =~ /[a-zA-Z]/ && $txt !~ /\\w\\s$/ ) {\n        $rc = 1;\n  \
    \  }\n    return $rc;\n}", "    my($last_char) = substr($txt, -1);\n    my($retval)\
    \ = \"\";\n    $last_char = lc($last_char);\n    if ($last_char =~ /[a-z]/) {\n\
    \        $retval = 1;\n    }\n    return $retval;\n}", "    my $i;\n    my $j;\n\
    \    my $c;\n    my $len;\n    my $last_char;\n    my $letter_count;\n    $len\
    \ = length($txt);\n    if ($len == 0) {\n        return \"\";\n    }\n    $last_char\
    \ = 0;\n    $letter_count = 0;\n    for ($i = 0; $i < $len; $i++) {\n        $c\
    \ = substr($txt, $i, 1);\n        if (($c >= \"a\") && ($c <= \"z\")) {\n    \
    \        $letter_count++;\n            $last_char = $i;\n        }\n    }\n  \
    \  if ($letter_count == 0) {\n        return \"\";\n    }\n    if ($letter_count\
    \ == 1) {\n        return 1;\n    }\n    for ($i = 0; $i < $len; $i++) {\n   \
    \     $c = substr($txt, $i, 1);\n        if (($c == \" \") && ($i != ($len - 1)))\
    \ {\n            if ($i == $last_char) {\n                return 1;\n        \
    \    }\n        }\n    }\n    return \"\";\n}", "    return \"\" if $txt eq \"\
    \";\n    if ($txt =~ /(\\w)\\s*$/) {\n        return 1;\n    }\n    return \"\"\
    ;\n}", "    return '' if ($txt eq '');\n    my $last_char = chop($txt);\n    if\
    \ ($last_char =~ /[a-zA-Z]/){\n        return '' if ($txt =~ /\\w$last_char/);\n\
    \        return 1;\n    }\n    return '';\n}", "    my $len = length($txt);\n\
    \    my $last = substr($txt, $len-1, 1);\n    my $result = '';\n    my $answer\
    \ = '';\n    if ( $last =~ /[a-zA-Z]/ ) {\n        $result = 1;\n    } else {\n\
    \        $result = '';\n    }\n    if ( $result ) {\n        if ( $len > 1 ) {\n\
    \            my $sec_last = substr($txt, $len-2, 1);\n            if ( $sec_last\
    \ !~ /[a-zA-Z]/ ) {\n                $answer = $result;\n            }\n     \
    \   } else {\n            $answer = $result;\n        }\n    }\n    return $answer;\n\
    }", "    chomp($txt);\n    my @str = split(' ', $txt);\n    my $last = $str[-1];\n\
    \    my $last_char = substr($last, -1);\n    if ($last_char =~ /^[a-zA-Z]$/) {\n\
    \        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    $txt\
    \ =~ s/^\\s+|\\s+$//g;\n    my $last_char = substr $txt, -1;\n    if ( ord($last_char)\
    \ >= 97 && ord($last_char) <= 122 ) {\n        return 1;\n    }\n    else {\n\
    \        return '';\n    }\n}", "    return $txt =~ /(\\b\\w+)\\s+([a-zA-Z])$/;\n\
    }", "    if($txt =~ m/\\w\\s+\\z/){\n        return \"\";\n    } else {\n    \
    \    return 1;\n    }\n}", "    return $txt =~ m/\\p{Alpha}(?!\\p{Alpha})\\z/;\n\
    }", "    my $rev_txt = reverse($txt);\n    my $rev_txt_len = length($rev_txt);\n\
    \    my $last_char = substr($rev_txt, 0, 1);\n    my $prev_char = substr($rev_txt,\
    \ 1, 1);\n    if($rev_txt_len > 1 && $last_char =~ /[a-zA-Z]/ && $prev_char !~\
    \ /[a-zA-Z]/) {\n        return 1;\n    }\n    return \"\";\n}", "    my $len\
    \ = length($txt);\n    if ($len > 0 && ord(substr($txt, -1)) >= 97 && ord(substr($txt,\
    \ -1)) <= 122) {\n        for (my $i = 0; $i < $len - 1; $i++) {\n           \
    \ if (ord(substr($txt, $i, 1)) >= 97 && ord(substr($txt, $i, 1)) <= 122) {\n \
    \               return \"\";\n            }\n        }\n        return 1;\n  \
    \  }\n    return \"\";\n}", "    return 1 if $txt =~ /\\S\\s+\\z/;\n    return\
    \ \"\";\n}", "    my $result = \"\";\n    my $len = length($txt);\n    if ($len\
    \ > 0) {\n        my $last_char = substr($txt, $len - 1, 1);\n        if ($last_char\
    \ =~ /[a-zA-Z]/) {\n            if ($txt =~ /[a-zA-Z]$/) {\n                $result\
    \ = 1;\n            }\n        }\n    }\n    return $result;\n}", "    # TODO:\
    \ you must fill in this function\n    $txt =~ /(\\w+)([^a-zA-Z]+$)/;\n    my $word\
    \ = $1;\n    my $char = $2;\n    return $char;\n}", "    if ($txt =~ /(\\w)(?:[^\\\
    w\\d]+)$/) {\n        return $1;\n    }\n    else {\n        return \"\";\n  \
    \  }\n}", "    # ...\n}", "    my $ans = \"\";\n    if($txt eq \"\") {\n     \
    \   $ans = \"\";\n    } elsif($txt =~ /^[A-Za-z]+\\s[A-Za-z]+\\s$/) {\n      \
    \  $ans = 1;\n    } else {\n        $ans = \"\";\n    }\n    return $ans;\n}",
  "    # Fill in the code here.\n}", "    if ($txt =~ /[a-zA-Z]$/) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    if ($txt eq '') {\n        return '';\n\
    \    }\n    my $prev = '';\n    for (my $i = length($txt) - 1; $i >= 0; $i--)\
    \ {\n        my $c = substr($txt, $i, 1);\n        if ($c =~ /[a-zA-Z]/) {\n \
    \           if ($prev eq '' || $prev =~ /\\s/) {\n                return 1;\n\
    \            }\n            return '';\n        }\n        $prev = $c;\n    }\n\
    \    return '';\n}", "    if ( $txt =~ /\\s[a-zA-Z]\\s$/ ) {\n        return '1';\n\
    \    }\n    return '';\n}", "    my($pos);\n    my($i);\n    my($ch);\n    my($len);\n\
    \    my($flag);\n    my($retval);", "    $txt =~ s/^\\s+|\\s+$//g;\n    my @chars\
    \ = split(\"\", $txt);\n    my $len = @chars;\n    if ($len == 0) {\n        return\
    \ \"\";\n    } else {\n        my $last_char = $chars[$len - 1];\n        if ($last_char\
    \ =~ /[a-zA-Z]/ && $last_char !~ / /) {\n            return 1;\n        } else\
    \ {\n            return \"\";\n        }\n    }\n}", "    my $result = \"\";\n\
    \    my $last_letter_index = rindex($txt, \" \");\n    if ($last_letter_index\
    \ == -1) {\n        $last_letter_index = length($txt);\n    }\n    if ($last_letter_index\
    \ == 0) {\n        $result = \"\";\n    } else {\n        my $last_letter = substr($txt,\
    \ $last_letter_index - 1, 1);\n        if (index(\"abcdefghijklmnopqrstuvwxyz\"\
    , $last_letter) != -1) {\n            $result = 1;\n        }\n    }\n    return\
    \ $result;\n}", "    return 1 if $txt =~ /\\p{Alpha}$/;\n    return;\n}", "  \
    \  return \"\" if $txt eq \"\";\n    return \"\" if substr($txt, -1) =~ /[^A-Za-z]/;\n\
    \    my @words = split(/ /, $txt);\n    my $last_word = $words[-1];\n    return\
    \ 1 if substr($last_word, -1) =~ /[A-Za-z]/;\n    return \"\";\n}", "    return\
    \ $txt =~ /\\w\\s[^\\w]$/ ? 1 : '';\n}", "    my $ret = \"\";\n    if($txt =~\
    \ /[a-zA-Z]\\s$/) {\n        $ret = 1;\n    }\n    return $ret;\n}", "    return\
    \ $txt =~ /^.*\\s+[a-z]$/i;\n}", "    return $txt;\n}", "    my $tmp1 = substr\
    \ $txt, -1;\n    my $tmp2 = substr $txt, -2, 1;\n    if($tmp1 =~ /[a-zA-Z]/ &&\
    \ $tmp2 =~ /\\s/){\n        return 1;\n    }\n    else{\n        return \"\";\n\
    \    }\n}", "    # Add your code here\n}", "    # Fill in code here\n    $txt\
    \ =~ /\\b\\w(\\w*)\\W\\b/g;\n    if ($1 eq \"\" or $1 eq \"e\") {\n        return\
    \ \"\";\n    } else {\n        return 1;\n    }\n}", "    my($first, $last);\n\
    \    # remove any leading and trailing spaces\n    $txt =~ s/^\\s+//; $txt =~\
    \ s/\\s+$//;\n    # if the string has at least one character and if\n    # the\
    \ last character is an alphabetical character\n    if (length($txt) > 0 && $txt\
    \ =~ /[a-zA-Z]$/) {\n        # separate the string into two parts\n        ($first,\
    \ $last) = ($txt =~ /^(.*?)\\s*(\\S+)$/);\n        # if the last part is an alphabetical\
    \ character\n        if ($last =~ /^[a-zA-Z]$/) {\n            # return 1\n  \
    \          return 1;\n        }\n    }\n    # return empty\n    return \"\";\n\
    }", "    my $last_char = undef;\n    my $length = length($txt);\n    if ( $length\
    \ > 0 ) {\n        $last_char = substr($txt, $length - 1, 1);\n    }\n    if (\
    \ $last_char =~ /[a-zA-Z]/ ) {\n        return 1;\n    }\n    return \"\";\n}",
  "    my($last_char) = substr($txt, -1);\n    if ($last_char =~ /\\w/ && $last_char\
    \ !~ /\\s/) {\n        return $last_char;\n    }\n    return \"\";\n}", "    $txt\
    \ =~ /\\S(\\S+)$/;\n    my $txt_out = $1;\n    if($txt_out =~ /\\w/){\n\tprint\
    \ \"\\n\";\n    }\n    else{\n\tprint 1;\n    }\n}", "    #...\n}", "    my($result)\
    \ = \"\";\n    # your code goes here...\n    return $result;\n}", "    if($txt\
    \ =~ /\\s$/ || $txt =~ /$/){\n        return \"\";\n    }\n    else{\n       \
    \ return 1;\n    }\n}", "    return 1 if substr($txt, -1) =~ /^[a-zA-Z]$/ && substr($txt,\
    \ -2, 1) =~ /^[\\s]$/;\n    return;\n}", "    my($len) = length($txt);\n    #\
    \ If the string is empty or has only one character\n    # return empty string\n\
    \    if ($len <= 1) {\n        return \"\";\n    }\n    # If the last character\
    \ is an alphabet and there is\n    # an empty space before that, then return 1\n\
    \    if ($txt =~ /\\s[a-zA-Z]$/) {\n        return 1;\n    }\n    # Else return\
    \ empty string\n    return \"\";\n}", "    #write your logic here\n    return\
    \ 1 if $txt =~ /.+\\s[a-z]$/i;\n    return \"\";\n}", "    my @chars = split(//,\
    \ $txt);\n    my $nchars = @chars;\n    return \"\" if $nchars == 0;\n    return\
    \ \"\" if $chars[$nchars-1] =~ /\\s/;\n    return \"\" if $chars[$nchars-1] =~\
    \ /\\d/;\n    return 1;\n}", "    \n    #write your code here\n    return \"\"\
    ;\n}", "    my $success = \"\";\n    my $char = substr($txt, -1);\n    if ( $char\
    \ =~ /[a-zA-Z]/ ) {\n        if ( $txt =~ /$char\\s$/ ) {\n            return\
    \ $success;\n        } else {\n            return 1;\n        }\n    } else {\n\
    \        return $success;\n    }\n}", "    my $result = \"\";\n    my $lastChar\
    \ = chop($txt);\n    if ( $lastChar =~ /[a-zA-Z]/ ) {\n        $result = \"1\"\
    ;\n    }\n    return $result;\n}", "    my $last_char = substr($txt, -1);\n  \
    \  my $ret = '';\n    if($last_char =~ /[a-zA-Z]/) {\n        $ret = 1;\n    }\n\
    \    return $ret;\n}", "    my $last_char = substr($txt, -1);\n    my $result\
    \ = \"\";\n    if ( $last_char !~ /\\w/ ) {\n        $result = 1;\n    }", " \
    \   if (substr($txt, -1) eq \" \") {\n        return substr($txt, -2, 1);\n  \
    \  }\n    return \"\";\n}", "    my($last_char) = substr($txt, -1);\n    my($last_char_asc)\
    \ = ord($last_char);\n    if ($last_char_asc > 96 && $last_char_asc < 123) {\n\
    \        return \"\";\n    }\n    elsif ($last_char_asc > 64 && $last_char_asc\
    \ < 91) {\n        return \"\";\n    }\n    return 1;\n}", "    my $char = chop($txt);\n\
    \    if($char =~ /\\w/ && $txt =~ /\\s$/) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    if ($txt =~ /\\S+\\s+[a-zA-Z]$/) {\n        return 1;\n    }\n\
    \    return \"\";\n}", "    # return an empty string if the input is empty\n \
    \   if ($txt =~ /^$/) {\n        return \"\";\n    }\n    # remove trailing spaces\n\
    \    $txt =~ s/\\s+$//;\n    # return 1 if the last character is an alphabetical\
    \ character\n    # and is not part of a word\n    if ($txt =~ /[a-zA-Z]$/) {\n\
    \        return 1;\n    }\n    # return an empty string otherwise\n    return\
    \ \"\";\n}", "    if($txt =~ /\\s*\\w*(\\W)$/){\n        return $1;\n    }\n \
    \   return \"\";\n}", "    my($re) = qr/(^[a-zA-Z]+$)/;\n    my($ret) = \"\";\n\
    \    if ($txt =~ $re) {\n        $ret = 1;\n    }\n    return $ret;\n}", "   \
    \ $txt =~ s/\\s+$//;\n    if (length($txt) == 0) {\n        return \"\";\n   \
    \ }\n    my($last_char) = substr($txt, -1);\n    return \"\" if ($last_char =~\
    \ /\\s/);\n    my($prev_char) = substr($txt, -2, 1);\n    return ($prev_char =~\
    \ /\\s/) ? 1 : \"\";\n}", "    my($length) = length($txt);\n    return \"\" if($length\
    \ == 0);\n    my($last_char) = substr($txt, $length - 1, 1);\n    return $last_char\
    \ =~ /[A-Za-z]/ ? 1 : \"\";\n}", "    my $ret = \"\";\n    # Your code here",
  '    my $last_char = substr $txt, -1;', "    my $ans = '';\n    $txt =~ s/\\s+$//;\n\
    \    my $len = length($txt);\n    if ($len == 0) {\n        $ans = '';\n    }\
    \ elsif ($len == 1) {\n        $ans = ($txt =~ /[a-zA-Z]/) ? 1 : '';\n    } else\
    \ {\n        $ans = ($txt =~ /\\s[a-zA-Z]$/) ? 1 : '';\n    }\n    return $ans;\n\
    }", "    my $ret_val = \"\";\n    if ( $txt =~ /\\w\\s+\\z/ ) {\n        # print\
    \ \"It is part of a word\\n\";\n    }\n    else {\n        # print \"Is the last\
    \ char an alphabetical character?\\n\";\n        if ( $txt =~ /\\w\\z/ ) {\n \
    \           # print \"Yes, it is.\\n\";\n            $ret_val = 1;\n        }\n\
    \        else {\n            # print \"No, it is not.\\n\";\n        }\n    }\n\
    \    return $ret_val;\n}", "    my $txt_len = length($txt);\n    my $last_char\
    \ = substr($txt, -1);\n    if ($txt_len > 0 && index($LETTERS, $last_char) !=\
    \ -1) {\n        my $prev_char = substr($txt, -2, 1);\n        if (index($SPACE,\
    \ $prev_char) != -1) {\n            return 1;\n        }\n    }\n    return \"\
    \";\n}", "    my @lst = split(/\\s+/, $txt);\n    my $last_word = pop(@lst);\n\
    \    my $last_char = chop($last_word);\n    if ($last_char =~ /^[a-zA-Z]$/) {\n\
    \        return $last_char;\n    }\n    return \"\";\n}", "    my $last = substr($txt,\
    \ -1);\n    my $previous = substr($txt, -2, 1);\n    return '' if $last !~ /[a-zA-Z]/;\n\
    \    return 1 if $previous =~ /\\s/;\n    return '';\n}", "    if ($txt =~ /(.)\\\
    s*$/) {\n        if ($1 =~ /^[a-zA-Z]/) {\n            return 1;\n        }\n\
    \    }\n    return '';\n}", "    my @words = split / /, $txt;\n    my $last_word\
    \ = pop @words;\n    my $length = length $last_word;\n    return substr($last_word,\
    \ $length - 1, 1) =~ /[a-zA-Z]/ ? \"\" : 1;\n}", "    return $txt =~ /[A-Za-z]\\\
    s*$/ ? 1 : '';\n}", "    my $char = substr($txt, -1);\n    if($char =~ /^\\p{IsAlnum}$/\
    \ and $char !~ /^\\p{IsWord}$/) {\n        return 1;\n    }\n    return \"\";\n\
    }", "    return \"\" if !$txt;\n    $txt =~ s/\\s+$//g;\n    return 1 if $txt\
    \ =~ m/\\s\\w$/;\n    return \"\";\n}", "    my $last_char = substr $txt, -1;\n\
    \    if (defined $last_char and $last_char =~ m/[a-zA-Z]/){\n        return 1;\n\
    \    }\n    return \"\";\n}", "    my $rc = \"\";\n    if (defined($txt) && $txt\
    \ ne \"\") {\n        my $i = length($txt) - 1;\n        my $ch = substr($txt,\
    \ $i, 1);\n        if ($ch =~ /[a-zA-Z]/) {\n            $rc = \"1\";\n      \
    \  }\n    }\n    return $rc;\n}", "    if ($txt =~ /(?<=[ \\s])[a-zA-Z]/m){\n\
    \        return 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my\
    \ @ltxt = split(//, $txt);\n    my $last = $ltxt[$#ltxt];\n    my $ans = ($last\
    \ =~ /\\w/ && $last !~ /\\s/) ? 1 : \"\";\n    return $ans;\n}", "    # TODO -\
    \ Write your code below this comment\n    if(!defined($txt)){\n      return \"\
    \";\n    }\n    my @temp_txt = split \" \", $txt;\n    my $last_txt = $temp_txt[@temp_txt-1];\n\
    \    if($last_txt =~ /[a-zA-Z]$/){\n      return 1;\n    }else{\n      return\
    \ \"\";\n    }\n}", "    my($last_char) = substr($txt, -1);\n    my($last_char_is_a_letter)\
    \ = ($last_char =~ /[a-zA-Z]/);\n    my($next_to_last_char) = substr($txt, -2,\
    \ 1);\n    my($next_to_last_char_is_not_a_letter) = ($next_to_last_char !~ /[a-zA-Z]/);\n\
    \    my($ret_val) = \"\";\n    if (($last_char_is_a_letter) && ($next_to_last_char_is_not_a_letter))\
    \ {\n        $ret_val = 1;\n    }\n    return($ret_val);\n}", "    if ($txt =~\
    \ /\\S+\\s+\\S+[a-zA-Z]$/) {\n        return 1;\n    } else {\n        return\
    \ \"\";\n    }\n}", "    # given a string $txt, write your code here\n    # hint:\
    \ this can be solved with one line of code\n    # hint: think about the following\
    \ functions:\n    # chomp(), substr(), length(), rindex()\n    return \"\";\n}",
  "    my $result = '';\n    my $len = length($txt);\n    return $result if($len ==\
    \ 0);\n    if( ($len == 1) && (substr($txt, $len-1, 1) =~ /[a-zA-Z]/) ) {\n  \
    \      $result = 1;\n    } elsif( ($len > 1) && \n             (substr($txt, $len-1,\
    \ 1) =~ /[a-zA-Z]/) &&\n             (substr($txt, $len-2, 1) =~ /\\s/)\n    \
    \       ) {\n        $result = 1;\n    }\n    return $result;\n}", "    return\
    \ '' unless $txt;\n    my @words = split(/\\s+/, $txt);\n    foreach my $word\
    \ (@words) {\n        return '' if $word =~ /.$/;\n    }\n    return 1;\n}", " \
    \   #\n    # YOUR CODE GOES HERE\n    #\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
