name: HumanEval_63_fibfib
language: pl
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nsub fibfib {\n  \
  \  my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n\
  \        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(1),0)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $x = 0;\n    my $y = 0;\n    my $z = 1;\n    for (1..$n) {\n\
    \        $x = $y;\n        $y = $z;\n        $z = $x + $y + $z;\n    }\n    return\
    \ $x;\n}\nfibfib(1);\nfibfib(5);\nfibfib(8);", "    # your code here\n    my $f\
    \ = 0;\n    my $s = 0;\n    my $t = 1;\n    my $r = 0;\n    if ($n == 0) {\n \
    \       return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if\
    \ ($n == 2) {\n        return 1;\n    }\n    if ($n > 2) {\n        for (1..$n-2)\
    \ {\n            $r = $f + $s + $t;\n            $f = $s;\n            $s = $t;\n\
    \            $t = $r;\n        }\n    }\n    return $r;\n}", "    return 0 if\
    \ $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n    return fibfib($n-1)\
    \ + fibfib($n-2) + fibfib($n-3);\n}", "    my @values = (0, 0, 1);\n    for my\
    \ $i (3..$n) {\n        push @values, $values[-1] + $values[-2] + $values[-3];\n\
    \    }\n    return $values[-1];\n}", "    return 0 if $n < 1;\n    return 0 if\
    \ $n == 1;\n    return 1 if $n == 2;\n    return fibfib($n-1) + fibfib($n-2) +\
    \ fibfib($n-3);\n}\n ", "    return 0 if $n == 0;\n    return 0 if $n == 1;\n\
    \    return 1 if $n == 2;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }", "    if ($n == 0) {\n        return 0;\n    } elsif ($n == 1) {\n        return\
    \ 0;\n    } elsif ($n == 2) {\n        return 1;\n    } else {\n        return\
    \ fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n    }\n}", "    if($n == 0) {\n\
    \        return 0;\n    } elsif($n == 1) {\n        return 0;\n    } elsif($n\
    \ == 2) {\n        return 1;\n    } else {\n        return fibfib($n-1) + fibfib($n-2)\
    \ + fibfib($n-3);\n    }\n}", "    return 0 if $n < 1;\n    return 0 if $n ==\
    \ 1;\n    return 1 if $n == 2;\n    my($n1, $n2, $n3) = (0, 0, 1);\n    for(my\
    \ $i = 3; $i <= $n; $i++) {\n        my($sum) = $n1 + $n2 + $n3;\n        $n1\
    \ = $n2;\n        $n2 = $n3;\n        $n3 = $sum;\n    }\n    return $n3;\n}",
  "    my($a, $b, $c, $d);\n    if ($n == 0) {\n        return 0;\n    } elsif ($n\
    \ == 1) {\n        return 0;\n    } elsif ($n == 2) {\n        return 1;\n   \
    \ } elsif ($n == 3) {\n        return 1;\n    } elsif ($n == 4) {\n        return\
    \ 2;\n    } elsif ($n == 5) {\n        return 4;\n    } else {\n        $a = 0;\n\
    \        $b = 0;\n        $c = 1;\n        $d = 1;\n        for (my $i = 6; $i\
    \ <= $n; $i++) {\n            $a = $b;\n            $b = $c;\n            $c =\
    \ $d;\n            $d = $a + $b + $c;\n        }\n        return $d;\n    }\n}",
  "    return 0 if $n <= 1;\n    return 1 if $n == 2;\n    return fibfib($n-1) + fibfib($n-2)\
    \ + fibfib($n-3);\n}", "    if($n < 3) {\n        return $n-1;\n    }\n    return\
    \ fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "    my $x = 0;\n    my $y\
    \ = 0;\n    my $z = 1;\n    while($n > 2) {\n        ($x, $y, $z) = ($y, $z, $x\
    \ + $y + $z);\n        $n--;\n    }\n    return $z;\n}", "    my @fibfibs = (0,\
    \ 0, 1);\n    if ($n <= 2) {\n        return $fibfibs[$n];\n    }\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        push @fibfibs, $fibfibs[$i-1] + $fibfibs[$i-2]\
    \ + $fibfibs[$i-3];\n    }\n    return $fibfibs[$n];\n}", "    my(@fib) = (0,\
    \ 0, 1);\n    my($i);\n    if ($n <= 2) {\n        return $fib[$n];\n    }\n \
    \   for ($i = 3; $i <= $n; $i++) {\n        $fib[$i] = $fib[$i-1] + $fib[$i-2]\
    \ + $fib[$i-3];\n    }\n    return $fib[$n];\n}", "    my $a = 0;\n    my $b =\
    \ 0;\n    my $c = 1;\n    my $res = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n\
    \        $res = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c\
    \ = $res;\n    }\n    return $res;\n}", "    if ($n < 0) {\n        return -1;\n\
    \    }\n    my @fib = (0, 0, 1);\n    for (my $i = 3; $i <= $n; $i++) {\n    \
    \    $fib[$i % 3] = $fib[($i - 1) % 3] + $fib[($i - 2) % 3] + $fib[($i - 3) %\
    \ 3];\n    }\n    return $fib[$n % 3];\n}", "    my @fibs = (0, 0, 1);\n    for\
    \ my $i (3..$n) {\n        $fibs[$i] = $fibs[$i-1] + $fibs[$i-2] + $fibs[$i-3];\n\
    \    }\n    return $fibs[$n];\n}", "    die \"ERROR: fibfib called with no argument\"\
    \ unless defined $n;\n    die \"ERROR: fibfib called with non-number argument\"\
    \ unless $n =~ /^\\d+$/;\n    return 0 if ($n <= 1);\n    my $a = 0;\n    my $b\
    \ = 0;\n    my $c = 1;\n    for (my $i = 2; $i <= $n; $i++) {\n        $a = $b;\n\
    \        $b = $c;\n        $c = $a + $b + $c;\n    }\n    return $c;\n}", "  \
    \  return 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n\
    \    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
