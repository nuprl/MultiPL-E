name: HumanEval_162_string_to_md5
language: pl
prompt: "# Given a string 'text', return its md5 hash equivalent string.\n# If 'text'\
  \ is an empty string, return undef.\n# >>> string_to_md5(\"Hello world\")\n# \"\
  3e25960a79dbc69b674cd4ec67a72c62\"\nsub string_to_md5 {\n    my($text) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_to_md5;\n\
  \        if(eq_deeply($candidate->(\"Hello world\"),\"3e25960a79dbc69b674cd4ec67a72c62\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return undef if $text eq \"\";\n    my $md5 = Digest::MD5->new;\n\
    \    $md5->add($text);\n    return $md5->hexdigest;\n}", "    return undef if\
    \ (not $text);\n    my $md5 = md5_hex($text);\n    return $md5;\n}", "    return\
    \ undef if !$text;\n    return Digest::MD5::md5_hex($text);\n}", "    return undef\
    \ if !$text;\n    return Digest::MD5::md5_hex($text);\n}", "    return undef if\
    \ !$text;\n    return md5_hex($text);\n}", "    return undef if ($text eq '');\n\
    \    return md5_hex($text);\n}", "    return undef if $text eq \"\";\n    return\
    \ Digest::MD5::md5_hex($text);\n}", "    if (length($text) == 0) {\n        return\
    \ undef;\n    } else {\n        return md5_hex($text);\n    }\n}", "    return\
    \ undef if ($text eq \"\");\n    return md5_hex($text);\n}", "    return undef\
    \ if(!$text);\n    return md5_hex($text);\n}", "    my $digest = undef;\n    if\
    \ ($text ne \"\") {\n        my $md5 = Digest::MD5->new;\n        $md5->add($text);\n\
    \        $digest = $md5->hexdigest;\n    }\n    return $digest;\n}", "    if (\
    \ !$text ) {\n        return undef;\n    }\n    my $md5 = Digest::MD5->new();\n\
    \    $md5->add($text);\n    return $md5->hexdigest();\n}", "    return undef if\
    \ !defined($text) || $text eq \"\";\n    return md5_hex($text);\n}", "    return\
    \ undef if !defined($text) || !length($text);\n    return Digest::MD5::md5_hex($text);\n\
    }", "    return undef if($text eq \"\");\n    return Digest::MD5::md5_hex($text);\n\
    }", "    return unless(defined($text));\n    my $ctx = Digest::MD5->new;\n   \
    \ $ctx->add($text);\n    return $ctx->hexdigest;\n}", "    return unless ($text);\n\
    \    return md5_hex($text);\n}", "    return undef if !defined($text) || $text\
    \ eq \"\";\n    return Digest::MD5::md5_hex($text);\n}", "    return(md5_hex($text));\n\
    }", "    return defined($text) ? md5_hex($text) : undef;\n}", "    return undef\
    \ if (!defined($text) || $text eq '');\n    return md5_hex($text);\n}", "    if\
    \ ($text) {\n        return md5_hex($text);\n    }\n    return undef;\n}", " \
    \   my $digest = undef;\n    $digest = md5_hex($text) if $text;\n    return $digest;\n\
    }", "    my $retval = undef;\n    if ($text) {\n        $retval = md5_hex($text);\n\
    \    }\n    return $retval;\n}", "    if ($text) {\n        return md5_hex($text);\n\
    \    }\n    return undef;\n}", "    return undef if(!defined($text) || $text eq\
    \ \"\");\n    return md5_hex($text);\n}", "    my $md5 = Digest::MD5->new;\n \
    \   $md5->add($text);\n    return $md5->hexdigest;\n}", "    if ($text) {\n  \
    \      my $md5 = md5_hex($text);\n        return $md5;\n    }\n    return undef;\n\
    }", '    my($md5);', "    if ($text ne \"\") {\n        return md5_hex($text);\n\
    \    } else {\n        return undef;\n    }\n}", "    return unless($text);\n\
    \    return md5_hex($text);\n}", "    return undef if !$text;\n    my $md5 = Digest::MD5->new;\n\
    \    $md5->add($text);\n    return $md5->hexdigest;\n}", '    my($result);', " \
    \   if ($text) {\n        return md5_hex($text);\n    }\n    return undef;\n}",
  "    return undef if !defined($text) || ($text eq '');\n    return md5_hex($text);\n\
    }", "    if ($text eq \"\") { return undef; }\n    else { return Digest::MD5::md5_hex($text);\
    \ }\n}", "    return undef if ( $text eq \"\" );\n    return md5_hex($text);\n\
    }", "    return undef if(!$text);\n    my $md5 = new Digest::MD5;\n    $md5->add($text);\n\
    \    return $md5->hexdigest;\n}", "    return undef if(! defined $text);\n   \
    \ return md5_hex($text);\n}", "    if (length($text) > 0) {\n        my $md5 =\
    \ md5_hex($text);\n        return $md5;\n    }\n    return undef;\n}", "    if\
    \ (length($text) > 0) {\n        my $md5 = new Digest::MD5;\n        $md5->add($text);\n\
    \        return $md5->hexdigest;\n    } else {\n        return undef;\n    }\n\
    }", "    return undef if $text eq \"\";\n    my $md5 = md5_hex($text);\n    return\
    \ $md5;\n}", "    my $md5;\n    if ( $text ne \"\" ) {\n        my $hash = md5_hex($text);\n\
    \        $md5 = \"\".$hash;\n    }\n    return $md5;\n}", "    return md5_hex($text);\n\
    }", "    return undef if $text eq '';\n    return md5_hex($text);\n}", "    return\
    \ undef if $text eq '';\n    return Digest::MD5::md5_hex($text);\n}", "    return\
    \ undef if ( $text eq '' );\n    my $md5 = md5_hex($text);\n    return $md5;\n\
    }", "    defined($text) or return undef;\n    return md5_hex($text);\n}", "  \
    \  return undef if ($text eq '');\n    my $md5 = md5_hex($text);\n    return $md5;\n\
    }", "    if ($text eq \"\") {\n        return undef;\n    }\n    return md5_hex($text);\n\
    }", "    return undef if !defined($text) || $text eq \"\";\n    return md5_hex($text);\n\
    }", "    return undef if(!defined($text) || $text eq \"\");\n    return md5_hex($text);\n\
    }", "    return undef if ! $text;\n    return Digest::MD5::md5_hex($text);\n}",
  "    my $md5 = md5_hex($text);\n    return $md5;\n}", '    my($md5);', '    my($output);',
  "    return undef if ($text eq \"\");\n    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n\
    \    return $md5->hexdigest;\n}", "    if ($text eq \"\") {\n        return undef;\n\
    \    }\n    return Digest::MD5::md5_hex($text);\n}", "    my $md5 = undef;\n \
    \   if ($text =~ /\\S+/) {\n        $md5 = md5_hex($text);\n    }\n    return\
    \ $md5;\n}", "    if(length($text) == 0) {\n        return undef;\n    }\n   \
    \ return Digest::MD5::md5_hex($text);\n}", "    my $md5 = undef;\n    if ($text)\
    \ {\n        $md5 = Digest::MD5::md5_hex($text);\n    }\n    return $md5;\n}",
  "    return undef if $text eq \"\";\n    return md5_hex($text);\n}", "    my $digest\
    \ = md5_hex($text);\n    return $digest;\n}", "    if ( $text eq \"\" ) {\n  \
    \      return undef;\n    } else {\n        return md5_hex($text);\n    }\n}",
  "    if ($text) {\n        my $ctx = Digest::MD5->new;\n        $ctx->add($text);\n\
    \        return $ctx->hexdigest;\n    }\n    return undef;\n}", "    return undef\
    \ if ($text eq '');\n    return md5_hex($text);\n}", "    return undef if (!$text);\n\
    \    return Digest::MD5::md5_hex($text);\n}", "    return undef if(not defined\
    \ $text);\n    return md5_hex($text);\n}", "    return defined($text) ? md5_hex($text)\
    \ : undef;\n}", '    my($md5);', "    return undef if !$text;\n    return md5_hex($text);\n\
    }", "    if(defined($text) && $text ne \"\") {\n        return md5_hex($text);\n\
    \    }\n    return undef;\n}", "    return undef if $text eq \"\";\n    my $md5\
    \ = Digest::MD5->new;\n    $md5->add($text);\n    return $md5->hexdigest;\n}",
  "    if ($text eq \"\") {\n        return undef;\n    }\n    else {\n        return\
    \ Digest::MD5::md5_hex($text);\n    }\n}", "    return unless $text;\n    return\
    \ md5_hex($text);\n}", "    return undef if(!defined($text) || $text eq \"\");\n\
    \    return Digest::MD5::md5_hex($text);\n}", "    my $md5 = undef;\n    if (defined($text)\
    \ && $text ne \"\") {\n        my $ctx = Digest::MD5->new;\n        $ctx->add($text);\n\
    \        $md5 = $ctx->hexdigest;\n    }\n    return $md5;\n}", "    if (defined($text)\
    \ && length($text) > 0) {\n        return md5_hex($text);\n    }\n    return undef;\n\
    }", "    defined($text) && length($text) > 0 ? md5_hex($text) : undef;\n}", " \
    \   return undef if $text eq \"\";\n    return Digest::MD5::md5_hex($text);\n}",
  "    return undef if (!$text);\n    my $digest = md5_hex($text);\n    return $digest;\n\
    }", "    return \"\";\n    return undef unless(defined($text));\n    return md5_hex($text);\n\
    }", "    return undef if not $text;\n    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n\
    \    return $md5->hexdigest;\n}", "    return undef if (! defined($text));\n \
    \   return Digest::MD5::md5_hex($text);\n}", "    return undef if ($text eq \"\
    \");\n    my $md5_value = md5_hex($text);\n    return $md5_value;\n}", "    my($hasher)\
    \ = new Digest::MD5;\n    if ($text) {\n\t$hasher->add($text);\n\treturn $hasher->hexdigest;\n\
    \    } else {\n\treturn undef;\n    }\n}", "    return if !$text;\n    # read\
    \ perldoc -f md5 and see the return value of md5 is a 16-byte/128-bit\n    # binary\
    \ string. We need to convert it to 32-byte/256-bit hex string for\n    # display.\n\
    \    # BEWARE: This function does NOT return 16-byte binary string.\n    return\
    \ lc unpack(\"H*\", md5($text));\n}", "    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n\
    \    my $hashed = $md5->hexdigest;\n    return $hashed;\n}", "    return unless\
    \ $text;\n    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n    return $md5->hexdigest;\n\
    }", "    $text =~ s/\\s//g;\n    return undef if $text eq \"\";\n    return md5_hex($text);\n\
    }", "    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n    return $md5->hexdigest;\n\
    }", "    return md5_hex($text);\n}", "    return undef if !defined($text) || $text\
    \ eq \"\";\n    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n    return\
    \ $md5->hexdigest;\n}", "    return undef if !$text;\n    return md5_hex($text);\n\
    }", "    return undef if !defined($text) || $text eq \"\";\n    return Digest::MD5::md5_hex($text);\n\
    }", "    my($md5) = Digest::MD5->new;\n    $md5->add($text);\n    return $md5->hexdigest;\n\
    }", "    if (!defined($text) || $text eq \"\") {\n        return undef;\n    }\n\
    \    return md5_hex($text);\n}", "    return md5_hex($text);\n}", "    my $md5;\n\
    \    eval {\n        $md5 = md5_hex($text);\n    };\n    if ($@) {\n        warn\
    \ 'md5_hex() failed: ' . $@;\n        return undef;\n    }\n    return $md5;\n\
    }", "    return undef if $text eq '';\n    return Digest::MD5::md5_hex($text);\n\
    }", "    return undef if !$text;\n    return md5_hex($text);\n}", "    if(!defined($text)\
    \ || $text eq \"\") {\n        return undef;\n    }", "    return undef if (!defined($text)\
    \ || $text eq '');\n    return md5_hex($text);\n}", "    return undef if !$text;\n\
    \    my $md5 = md5_hex($text);\n    return $md5;\n}", '    my($md5_bytes);', " \
    \   if(not defined $text or not length $text) {\n        return undef;\n    }",
  "    return undef if($text eq '');\n    return md5_hex($text);\n}", "    if (!defined($text)\
    \ || $text eq \"\") {\n        return undef;\n    }\n    my $ctx = Digest::MD5->new;\n\
    \    $ctx->add($text);\n    return $ctx->hexdigest;\n}", "    my $ctx = Digest::MD5->new;\n\
    \    if ($text eq \"\") {\n        return undef;\n    }\n    $ctx->add($text);\n\
    \    return $ctx->hexdigest;\n}", "    if ($text) {\n        my $md5 = Digest::MD5->new;\n\
    \        $md5->add($text);\n        return $md5->hexdigest;\n    }\n    return\
    \ undef;\n}", "    return undef if(!defined($text) || !length($text));\n    return\
    \ Digest::MD5::md5_hex($text);\n}", "    if (!defined($text) || $text eq \"\"\
    ) {\n        return undef;\n    }\n    my $ctx = Digest::MD5->new;\n    $ctx->add($text);\n\
    \    return $ctx->hexdigest;\n}", "    return if !$text;\n    my $ctx = Digest::MD5->new;\n\
    \    $ctx->add($text);\n    return $ctx->hexdigest;\n}", "    return '' unless\
    \ defined $text;\n    my $digest = md5_hex($text);\n    return $digest;\n}", " \
    \   return undef if (length($text) == 0);\n    return Digest::MD5::md5_hex($text);\n\
    }", "    return undef if ( $text eq \"\" );\n    my $md5 = md5_hex($text);\n \
    \   return $md5;\n}", '    my($crypto);', "    return md5_hex($text);\n}", " \
    \   return undef if ( !defined($text) || $text eq '' );\n    return md5_hex($text);\n\
    }", "    return \"\" unless $text;\n    my $md5 = Digest::MD5->new();\n    $md5->add($text);\n\
    \    return $md5->hexdigest();\n}", "    return undef if ( ! defined $text ||\
    \ $text eq '' );\n    my $md5 = Digest::MD5->new();\n    $md5->add($text);\n \
    \   return $md5->hexdigest();\n}", "    return undef if ! defined $text;\n   \
    \ return md5_hex($text);\n}", "    return undef if (not defined $text);\n    return\
    \ undef if ($text eq \"\");\n    my $digest = md5_hex($text);\n    return $digest;\n\
    }", "    return undef if ( !defined($text) || $text eq '' );\n    return md5_hex($text);\n\
    }", "    my $md5 = new Digest::MD5();\n    $md5->add($text);\n    return $md5->hexdigest();\n\
    }", "    if (! defined($text)) {\n        return undef;\n    }\n    else {\n \
    \       return Digest::MD5::md5_hex($text);\n    }\n}", "    if (! defined($text))\
    \ {\n        return undef;\n    }\n    return Digest::MD5::md5_hex($text);\n}",
  "    return undef if ! $text;\n    my $ctx = Digest::MD5->new;\n    $ctx->add($text);\n\
    \    return $ctx->hexdigest;\n}", "    my $ctx = Digest::MD5->new;\n    $ctx->add($text);\n\
    \    my $md5 = $ctx->hexdigest;\n    return $md5;\n}", "    return undef if !$text;\n\
    \    return md5_hex($text);\n}", "    if( $text ) {\n        return Digest::MD5::md5_hex($text);\n\
    \    }\n    return undef;\n}", "    return undef if !$text;\n    return md5_hex($text);\n\
    }", "    if ($text eq \"\") {\n        return undef;\n    }\n    else {\n    \
    \    my $hash = md5_hex($text);\n        return $hash;\n    }\n}", "    return\
    \ undef if !defined($text) || $text eq \"\";\n    return Digest::MD5::md5_hex($text);\n\
    }", "    return undef if (!defined($text) || $text eq '');\n    return md5_hex($text);\n\
    }", '    my($tmp, $md5);', "    return undef if ($text eq \"\");\n    my $md5\
    \ = md5_hex($text);\n    return $md5;\n}", "    return if !defined($text);\n \
    \   if (length($text) > 0) {\n        my $ctx = Digest::MD5->new;\n        $ctx->add($text);\n\
    \        return $ctx->hexdigest;\n    }\n    return;\n}", "    return undef if\
    \ !defined($text) || ($text eq '');\n    return md5_hex($text);\n}", "    return\
    \ unless defined $text;\n    return md5_hex($text);\n}", "    if (defined($text)\
    \ && length($text) > 0) {\n        return md5_hex($text);\n    }\n    return undef;\n\
    }", "    return undef if ! defined $text;\n    my $md5 = Digest::MD5->new;\n \
    \   $md5->add($text);\n    return $md5->hexdigest;\n}", "    if ($text eq \"\"\
    ) { return undef; }\n    return Digest::MD5::md5_hex($text);\n}", "    return\
    \ undef if $text eq \"\";\n    return Crypt::Digest::MD5->new->add($text)->hexdigest;\n\
    }", "    return undef if !$text;\n    return $text if $text =~ /^[0-9a-f]{32}$/;\n\
    \    return Digest::MD5::md5_hex($text);\n}", "    return undef if $text eq \"\
    \";\n    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n    return $md5->hexdigest;\n\
    }", "    return undef if (!$text);\n    return Digest::MD5::md5_hex($text);\n}",
  "    return undef if(! defined $text || $text eq '');\n    my $md5 = Digest::MD5->new();\n\
    \    $md5->add($text);\n    return $md5->hexdigest();\n}", "    if ( $text eq\
    \ '' ) {\n        return undef;\n    }\n    return md5_hex($text);\n}", "    return\
    \ undef if !$text;\n    my $md5 = new Digest::MD5;\n    $md5->add($text);\n  \
    \  return $md5->hexdigest;\n}", "    return undef if !defined($text) || $text\
    \ eq \"\";\n    my $ctx = Digest::MD5->new;\n    $ctx->add($text);\n    return\
    \ $ctx->hexdigest;\n}", "    my $md5 = md5_hex($text);\n    return $md5;\n}",
  "    if (length($text) == 0) {\n        return undef;\n    }\n    return md5_hex($text);\n\
    }", '    my($hash);', "    my $md5 = undef;\n    if (defined($text) && length($text)\
    \ > 0) {\n        $md5 = Digest::MD5::md5_hex($text);\n    }\n    return $md5;\n\
    }", "    #return Digest::MD5::md5_hex($text);\n    return undef if $text eq \"\
    \";\n    return md5_hex($text);\n}", "    my $md5_str = '';\n    eval {\n    \
    \    $md5_str = Digest::MD5::md5_hex($text);\n    };\n    if($@) {\n        print\
    \ STDERR (\"WARNING: string_to_md5() - Caught exception: $@\");\n        return\
    \ undef;\n    }\n    return $md5_str;\n}", "    return undef if ($text eq \"\"\
    );\n    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n    return $md5->hexdigest;\n\
    }", "    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n    return $md5->hexdigest;\n\
    }", "    return undef if (!$text);\n    return md5_hex($text);\n}", "    if( !$text\
    \ ) {\n        return undef;\n    }\n    my $md5 = Digest::MD5->new();\n    $md5->add($text);\n\
    \    return $md5->hexdigest();\n}", "    my $md5;\n    return undef if ($text\
    \ eq '');\n    $md5 = md5_hex($text);\n    return $md5;\n}", "    return undef\
    \ if $text eq '';\n    return md5_hex($text);\n}", "    return undef if !$text;\n\
    \    return md5_hex($text);\n}", "    return undef if !$text;\n    return md5_hex($text);\n\
    }", "    return undef if (!defined($text) || $text eq '');\n    return md5_hex($text);\n\
    }", "    my($md5) = new Digest::MD5;\n    $md5->add($text);\n    return $md5->hexdigest();\n\
    }", "    return undef if $text eq \"\";\n    return Digest::MD5::md5_hex($text);\n\
    }", "    $text || return undef;\n    return md5_hex($text);\n}", "    return undef\
    \ if ( !$text );\n    return md5_hex($text);\n}", "    my $md5;\n    if ($text)\
    \ {\n        $md5 = md5_hex($text);\n    }\n    return $md5;\n}", "    my $hash\
    \ = Digest::MD5->new;\n    $hash->add($text);\n    return $hash->hexdigest;\n}",
  "    if (defined($text) && ($text ne \"\")) {\n        return substr(md5_hex($text),\
    \ 0, 32);\n    }\n    return undef;\n}", "    my $retval = undef;\n    if ($text)\
    \ {\n        $retval = md5_hex($text);\n    }\n    return $retval;\n}", '    my
    $md5_hash;', "    return undef if not defined $text;\n    return md5_hex($text);\n\
    }", "    if (!defined($text) || $text eq \"\") {\n        return undef;\n    }\n\
    \    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n    return $md5->hexdigest;\n\
    }", '    my($md5);', "    return undef if $text eq '';\n    my $md5 = md5_hex($text);\n\
    \    return $md5;\n}", "    return undef if (length($text) == 0);\n    return\
    \ md5_hex($text);\n}", "    return undef if(!$text);\n    return Digest::MD5::md5_hex($text);\n\
    }", "    return undef if !$text;\n    return Digest::MD5::md5_hex($text);\n}",
  "    return undef if($text eq \"\");\n    return md5_hex($text);\n}", "    my $md5;\n\
    \    if(!$text) {\n        return undef;\n    }\n    if($md5 = new Digest::MD5())\
    \ {\n        $md5->add($text);\n        return $md5->hexdigest();\n    }\n   \
    \ return undef;\n}", "    if(!defined($text) || $text eq \"\") {\n        return\
    \ undef;\n    }\n    return Digest::MD5::md5_hex($text);\n}", "    return undef\
    \ if $text eq \"\";\n    # Digest::MD5 is available on all supported platforms\
    \ (as of 2009-07-21)\n    return md5_hex($text);\n}", "    # Based on http://www.perlmonks.org/?node_id=388747\n\
    \    return Digest::MD5::md5_hex($text);\n}", "    if (! defined($text)) {\n \
    \       return undef;\n    }\n    return md5_hex($text);\n}", "    $text =~ s/\\\
    s+//g;\n    if(! $text){\n        return undef;\n    }\n    my $md5 = new Digest::MD5;\n\
    \    $md5->add($text);\n    return $md5->hexdigest;\n}", "    return undef if(!defined($text)\
    \ || $text eq \"\");\n    return md5_hex($text);\n}", "    return undef if !defined($text)\
    \ || $text eq \"\";\n    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n\
    \    return $md5->hexdigest;\n}", "    return undef if $text eq \"\";\n    return\
    \ md5_hex($text);\n}", "    my $digest = md5_hex($text);\n    return $digest;\n\
    }", "    return undef if $text eq \"\";\n    return md5_hex($text);\n}", '    my($md5sum);',
  "    return undef if(!$text);\n    return Digest::MD5::md5_hex($text);\n}", "  \
    \  return undef if !defined($text) || $text eq \"\";\n    return md5_hex($text);\n\
    }", "    my $md5 = Digest::MD5->new;\n    $md5->add($text);\n    my $digest =\
    \ $md5->hexdigest;\n    return $digest;\n}", "    return undef if $text eq \"\"\
    ;\n    return Digest::MD5::md5_hex($text);\n}", "    return undef if ( $text eq\
    \ '' );\n    return md5_hex($text);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
