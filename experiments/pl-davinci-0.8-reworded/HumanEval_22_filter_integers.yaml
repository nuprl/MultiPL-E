name: HumanEval_22_filter_integers
language: pl
prompt: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
  a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
  \ 2, 3]\nsub filter_integers {\n    my($values) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9,\
  \ \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result = grep(/^\\d+$/, @$values);\n    return \\@result;\n\
    }", "    $values //= [];\n    my @result = grep { _is_integer($_) } @$values;\n\
    \    return \\@result;\n}", "    return [ grep { is_integer($_) } @$values ];\n\
    }", "    @$values = grep {/^\\d+$/} @$values;\n    return $values;\n}", "    my\
    \ @integers = grep { is_integer($_) } @$values;\n    return \\@integers;\n}",
  "    my @integers = grep { is_integer($_) } @$values;\n    return \\@integers;\n\
    }", "    # write me!\n    my @int;\n    foreach my $val (@$values) {\n       \
    \ if (looks_like_number($val)) {\n            push @int, $val;\n        }\n  \
    \  }\n    return \\@int;\n}", "    return [grep { ref($_) eq '' and $_ =~ /^\\\
    d+$/ } @$values];\n}", "    return grep { is_integer($_) } @$values;\n}", "  \
    \  my @result = ();\n    foreach my $val (@$values) {\n        push @result, $val\
    \ if $val =~ /^\\d+$/;\n    }\n    return @result;\n}", "    return if !defined\
    \ $values;\n    return if ref $values ne 'ARRAY';\n    my @ret;\n    for my $value\
    \ (@$values) {\n        push @ret, $value if is_integer($value);\n    }\n    @ret;\n\
    }", "    my @result = grep { !ref($_) } @$values;\n    return \\@result;\n}",
  "    @$values = grep {\n        Scalar::Util::looks_like_number($_) &&\n       \
    \ int($_) == $_\n    } @$values;\n    return;\n}", "    return grep { is_integer($_)\
    \ } @$values;\n}", "    return [ grep { _is_integer($_) } @$values ];\n}", " \
    \   # 1. Check if $values is an ARRAY reference.\n    #\n    # 2. Filter the array\
    \ for integers only.\n    #\n    # 3. Return the filtered array.\n    #\n    #\
    \ Replace the lines below with your code.\n    return [];\n}", "    my @ints =\
    \ grep {$_ =~ /^\\d+$/} @$values;\n    return \\@ints;\n}", "    my @ret;\n  \
    \  foreach my $v (@$values) {\n        if (is_integer($v)) {\n            push\
    \ @ret, $v;\n        }\n    }\n    return @ret;\n}", "    return grep { !ref($_)\
    \ && $_ =~ /^[0-9]+$/ } @$values;\n}", "    my @integers = grep { isint($_) }\
    \ @$values;\n    return \\@integers;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
