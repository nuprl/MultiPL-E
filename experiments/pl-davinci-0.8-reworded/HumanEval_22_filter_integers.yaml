name: HumanEval_22_filter_integers
language: pl
prompt: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
  a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
  \ 2, 3]\nsub filter_integers {\n    my($values) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9,\
  \ \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result = grep(/^\\d+$/, @$values);\n    return \\@result;\n\
    }", "    $values //= [];\n    my @result = grep { _is_integer($_) } @$values;\n\
    \    return \\@result;\n}", "    return [ grep { is_integer($_) } @$values ];\n\
    }", "    @$values = grep {/^\\d+$/} @$values;\n    return $values;\n}", "    my\
    \ @integers = grep { is_integer($_) } @$values;\n    return \\@integers;\n}",
  "    my @integers = grep { is_integer($_) } @$values;\n    return \\@integers;\n\
    }", "    # write me!\n    my @int;\n    foreach my $val (@$values) {\n       \
    \ if (looks_like_number($val)) {\n            push @int, $val;\n        }\n  \
    \  }\n    return \\@int;\n}", "    return [grep { ref($_) eq '' and $_ =~ /^\\\
    d+$/ } @$values];\n}", "    return grep { is_integer($_) } @$values;\n}", "  \
    \  my @result = ();\n    foreach my $val (@$values) {\n        push @result, $val\
    \ if $val =~ /^\\d+$/;\n    }\n    return @result;\n}", "    return if !defined\
    \ $values;\n    return if ref $values ne 'ARRAY';\n    my @ret;\n    for my $value\
    \ (@$values) {\n        push @ret, $value if is_integer($value);\n    }\n    @ret;\n\
    }", "    my @result = grep { !ref($_) } @$values;\n    return \\@result;\n}",
  "    @$values = grep {\n        Scalar::Util::looks_like_number($_) &&\n       \
    \ int($_) == $_\n    } @$values;\n    return;\n}", "    return grep { is_integer($_)\
    \ } @$values;\n}", "    return [ grep { _is_integer($_) } @$values ];\n}", " \
    \   # 1. Check if $values is an ARRAY reference.\n    #\n    # 2. Filter the array\
    \ for integers only.\n    #\n    # 3. Return the filtered array.\n    #\n    #\
    \ Replace the lines below with your code.\n    return [];\n}", "    my @ints =\
    \ grep {$_ =~ /^\\d+$/} @$values;\n    return \\@ints;\n}", "    my @ret;\n  \
    \  foreach my $v (@$values) {\n        if (is_integer($v)) {\n            push\
    \ @ret, $v;\n        }\n    }\n    return @ret;\n}", "    return grep { !ref($_)\
    \ && $_ =~ /^[0-9]+$/ } @$values;\n}", "    my @integers = grep { isint($_) }\
    \ @$values;\n    return \\@integers;\n}", "    return [grep { is_integer($_) }\
    \ @$values];\n}", "    my @integers = ();\n    for my $value (@$values) {\n  \
    \      if ($value !~ /^-?\\d+$/) {\n            next;\n        }\n        push\
    \ @integers, $value;\n    }\n    return \\@integers;\n}", "    my @integers =\
    \ grep { is_integer($_) } @$values;\n    return @integers;\n}", "    return [grep\
    \ { _is_integer($_) } @$values];\n}", "    my @res = ();\n    foreach my $v (@$values)\
    \ {\n        if($v != 0 && $v eq int($v)) {\n            push @res, $v;\n    \
    \    }\n    }\n    return \\@res;\n}", "    die \"Filter_integers: argument is\
    \ not array reference\" unless ref($values) eq \"ARRAY\";\n    return [ grep {\
    \ /^\\d+$/ } @$values ];\n}", "    return [grep { Scalar::Util::looks_like_number($_)\
    \ } @$values];\n}", "    my @int_values = ();\n    foreach my $value (@$values)\
    \ {\n        push @int_values, $value if is_integer($value);\n    }\n    return\
    \ @int_values;\n}", "    my @integers = grep { type($_) == INTEGER } @$values;\n\
    \    \\@integers;\n}", "    my @integers = grep {\n        my $is_integer = 0;\n\
    \        if ( Scalar::Util::looks_like_number($_) ) {\n            $is_integer\
    \ = ( Scalar::Util::looks_like_number($_) && int($_) == $_ )\n               \
    \ || ( ( ! Scalar::Util::looks_like_number($_) ) && int(0+$_) == 0+$_ );\n   \
    \     }\n        $is_integer;\n    } @$values;\n    return \\@integers;\n}", " \
    \   my @result = ();\n    foreach my $value (@$values) {\n        if (defined($value)\
    \ && !ref($value) && looks_like_number($value)) {\n            push @result, $value;\n\
    \        }\n    }\n    return @result;\n}", "    return unless defined $values;\n\
    \    return grep {\n        ref $_ ? 0 : Scalar::Util::looks_like_number($_) &&\
    \ int($_) == $_\n    } @$values;\n}", "    grep {\n        if (ref($_) eq \"ARRAY\"\
    ) {\n            filter_integers($_);\n        } elsif (ref($_) eq \"HASH\") {\n\
    \            filter_integers(values(%$_));\n        } else {\n            isint($_);\n\
    \        }\n    } @$values;\n}", "    return [grep { Scalar::Util::looks_like_number($_)\
    \ } @$values];\n}", "    return [ grep { is_integer($_) } @$values ];\n}", " \
    \   return [ map { $_->$_isa(\"PPI::Token::Number\") && $_->content =~ /^\\d+$/\
    \ ? $_->content : () } @$values ];\n}", "    my @result = ();\n    foreach my\
    \ $val (@$values) {\n        if(is_integer($val)) {\n            push @result,\
    \ $val;\n        }\n    }\n    return \\@result;\n}", "    return [ grep { $_\
    \ =~ /^\\d+$/ } @$values ];\n}", "    my @integers = grep {\n        ref $_ eq\
    \ '' && $_ =~ /^-?\\d+$/;\n    } @$values;\n    return \\@integers;\n}", "   \
    \ return [ grep { is_integer($_) } @$values ];\n}", "    return [ grep { int($_)\
    \ eq $_ } @$values ];\n}", "    return grep { Scalar::Util::looks_like_number($_)\
    \ } @$values;\n}", "    return [\n        grep { defined $_ && $_ eq int($_) }\n\
    \        @$values\n    ];\n}", "    my @results = ();\n    foreach my $value (@$values)\
    \ {\n        if(is_integer($value)) {\n            push(@results, $value);\n \
    \       }\n    }\n    return @results;\n}", "    my @result = ();\n    for my\
    \ $element (@$values) {\n        push @result, $element if $element =~ /^\\d+$/;\n\
    \    }\n    return \\@result;\n}", "    my @values = grep {Scalar::Util::looks_like_number($_)\
    \ && !Scalar::Util::looks_like_number($_ + 0) && /^[+-]?\\d+$/} @$values;\n  \
    \  return @values;\n}", "    my @integers = grep { is_integer($_) } @$values;\n\
    \    return @integers;\n}", "    return grep {\n        my $x = $_;\n        !ref($x)\
    \ && Scalar::Util::looks_like_number($x) && int($x) == $x;\n    } @$values;\n}",
  "    return [grep { is_integer($_) } @$values];\n}", "    my $i = 0;\n    my @result\
    \ = ();\n    foreach my $value (@$values) {\n        push @result, $value if (is_integer($value));\n\
    \    }\n    return \\@result;\n}", "    return [\n        grep { \n          \
    \  $DB::single=1; \n            is_int($_)\n        } @$values\n    ];\n}", " \
    \   return [ grep { Scalar::Util::looks_like_number($_) && int($_) == $_ } @$values\
    \ ];\n}", "    return grep {/^\\d+$/} @$values;\n}", "    return [\n        grep\
    \ { ref $_ eq '' && /^-?\\d+$/ }\n        @$values\n    ];\n}", "    my @result\
    \ = ();\n    foreach my $item (@$values) {\n        if (defined($item) && is_integer($item))\
    \ {\n            push @result, $item;\n        }\n    }\n    return @result;\n\
    }", "    return [ grep { !ref($_) && $_ == int($_) } @$values ];\n}", "    return\
    \ [ grep { $_ % 1 == 0 } @$values ];\n}", "    my @integers = ();\n    for my\
    \ $i (@$values) {\n        if (looks_like_number($i) && int($i) == $i) {\n   \
    \         push @integers, $i;\n        }\n    }\n    return \\@integers;\n}",
  "    return [grep {is_integer($_)} @$values];\n}", "    my @integers = grep { !\
    \ ref($_) && is_integer($_) } @$values;\n    return \\@integers;\n}", "    return\
    \ grep { Scalar::Util::looks_like_number($_) } @$values;\n}", "    if(ref($values)\
    \ ne \"ARRAY\") {\n        die(\"Not an array ref\");\n    }\n    return grep\
    \ { $_ =~ /^\\d+$/ } @$values;\n}", "    return [ grep { is_integer($_) } @$values\
    \ ];\n}", "    my @res = map { $_ =~ /^\\d+$/ ? $_ : () } @$values;\n    return\
    \ \\@res;\n}", "    return [ grep { is_integer($_) } @$values ];\n}", "    return\
    \ [ grep { Scalar::Util::looks_like_number($_) && int($_) == $_ } @$values ];\n\
    }", "    grep {is_integer($_)} @$values;\n}", "    my @result = grep {!ref($_)\
    \ && $_ =~ /^[-+]?\\d+$/} @$values;\n    return @result;\n}", "    my @ints =\
    \ ();\n    foreach my $val (@$values) {\n        if ( ! ref($val) && $val =~ /^-?\\\
    d+$/ ) {\n            push @ints, $val;\n        }\n    }\n    return \\@ints;\n\
    }", "    my @result = ();\n    foreach my $value (@$values) {\n        if( is_number($value)\
    \ && int($value) == $value ) {\n            push @result, $value;\n        }\n\
    \    }\n    return \\@result;\n}", "    return [\n        grep {\n           \
    \ is_int($_)\n        } @$values\n    ];\n}", "    my $filtered = [];\n    return\
    \ $filtered unless $values;\n    for my $v (@$values) {\n        push @$filtered,\
    \ $v if looks_like_number($v) && int($v) == $v;\n    }\n    return $filtered;\n\
    }", "    my $is_integer = sub { (not ref($_[0])) and $_[0] =~ /^\\d+$/ };\n  \
    \  return filter(array => $values, pred => $is_integer);\n}", "    return [ grep\
    \ { _is_int($_) } @$values ];\n}", "    my @filtered_values = ();\n    for my\
    \ $value (@$values) {\n        push @filtered_values, $value if (is_integer($value));\n\
    \    }\n    return @filtered_values;\n}", "    my @integers = grep {\n       \
    \ not (\n            ref($_) or\n            not(defined($_)) or\n           \
    \ ($_ eq \"\") or\n            (not($_ =~ /^\\-?\\d+$/))\n        )\n    } @$values;\n\
    \    @integers;\n}", "    my @result = grep { $_ =~ /^[\\d]+$/ } @$values;\n \
    \   return \\@result;\n}", "    my $values_ref = is_arrayref($values) ? $values\
    \ : [$values];\n    my @output = ();\n    foreach my $val (@{$values_ref}) {\n\
    \        if (is_integer($val)) {\n            push(@output, $val);\n        }\n\
    \    }\n    return @output;\n}", "    return [grep {is_integer($_)} @$values];\n\
    }", "    if(not is_arrayref($values)) {\n        croak(\"values is not an array\
    \ ref\");\n    }\n    my @ret;\n    foreach my $v (@$values) {\n        push(@ret,\
    \ $v) if is_integer($v);\n    }\n    return \\@ret;\n}", "    return [grep { UNIVERSAL::isa($_,\
    \ \"Math::BigInt\") || !ref($_) && /^\\d+$/ } @$values];\n}", "    return [grep\
    \ {!ref($_) && $_ !~ /[^0-9]/} @$values];\n}", "    my @rv;\n    foreach my $value\
    \ (@$values) {\n        if (ref($value) && $value =~ /:/) {\n            push\
    \ @rv, $value if is_int($value);\n        } else {\n            push @rv, $value\
    \ if $value =~ /^\\d+$/;\n        }\n    }\n    return \\@rv;\n}", "    my $new_array\
    \ = [];\n    for my $value (@$values) {\n        push @$new_array, $value if is_int($value);\n\
    \    }\n    return $new_array;\n}", "    return [ grep { is_integer($_) } @$values\
    \ ];\n}", "    return [ grep { defined $_ and !ref $_ and $_ =~ /^\\d+$/ } @$values\
    \ ];\n}", "    return grep { Scalar::Util::looks_like_number($_) && (int($_) ==\
    \ $_) } @$values;\n}", "    return grep {_is_integer($_)} @$values;\n}", "   \
    \ return [grep { $_ eq int($_) } @$values];\n}", "    return [ grep { is_int($_)\
    \ } @$values ];\n}", "    my @integers = grep(/^[0-9]+$/, @$values);\n    return\
    \ @integers;\n}", "    return grep {\n        Scalar::Util::looks_like_number($_)\
    \ &&\n        $_ == int($_)\n    } @$values;\n}", "    return grep { defined($_)\
    \ && !ref($_) && $_ =~ /^\\d+$/ } @$values;\n}", "    return grep {\n        not\
    \ ref($_) and\n        $_ =~ /^-?[0-9]+$/\n    } @$values;\n}", "    return grep\
    \ { is_integer($_) } @$values;\n}", "    my @newvalues = ();\n    foreach my $val\
    \ (@$values) {\n        if (defined($val) && (!ref($val))) {\n            if ($val\
    \ =~ /^(\\d+)$/) {\n                push(@newvalues, $val);\n            }\n \
    \       }\n    }\n    return \\@newvalues;\n}", "    return grep { !ref $_ &&\
    \ $_ =~ /^\\d+$/ } @$values;\n}", "    return [ grep { Scalar::Util::looks_like_number($_)\
    \ } @$values ];\n}", "    return grep { is_int($_) } @$values;\n}", "    return\
    \ scalar(grep {int($_) == $_} @$values);\n}", "    return () unless $values;\n\
    \    my @result = ();\n    foreach my $value (@$values) {\n        next unless\
    \ is_integer($value);\n        push @result, $value;\n    }\n    return @result;\n\
    }", "    return [grep {is_integer($_)} @$values];\n}", "    return grep { is_integer($_)\
    \ } @$values;\n}", "    my $ref = ref($values);\n    my @ret = ();\n    if ($ref\
    \ eq \"ARRAY\") {\n        @ret = grep {is_integer($_)} @$values;\n    }\n   \
    \ return @ret;\n}", "    return [ grep { Scalar::Util::looks_like_number($_) &&\
    \ /^\\d+$/ } @$values ];\n}", "    return [ grep { is_integer($_) } @$values ];\n\
    }", "    return [ grep { is_integer($_) } @$values ];\n}", "    return map { int($_)\
    \ } grep { $_ =~ /^\\d+$/ } @$values;\n}", "    return [ grep {/^\\d+$/} @$values\
    \ ];\n}", "    my @retval = ();\n    foreach my $value (@$values) {\n        if(looks_like_number($value))\
    \ {\n            push(@retval, $value);\n        }\n    }\n    return @retval;\n\
    }", "    return $values;\n}", "    return [ grep {_is_integer($_)} @$values ];\n\
    }", "    my @results = grep {_is_integer($_)} @$values;\n    return \\@results;\n\
    }", "    my $integers = [];\n    for my $val (@$values) {\n        if(looks_like_number($val)\
    \ && int($val) == $val) {\n            push @$integers, $val;\n        }\n   \
    \ }\n    return $integers;\n}", "    return filter(\n        sub {\n         \
    \   my($value) = @_;\n            return is_integer($value);\n        },\n   \
    \     $values\n    );\n}", "    return [ grep { is_integer($_) } @$values ];\n\
    }", "    return grep { int($_) == $_ } @$values;\n}", "    return [ grep { is_integer($_)\
    \ } @$values ];\n}", "    return [ grep { defined $_ && Scalar::Util::looks_like_number($_)\
    \ && \"$_\" =~ /^\\d+$/ } @$values ];\n}", "    return unless $values;\n    my\
    \ @res = ();\n    foreach my $val (@$values) {\n        push @res, $val if $val\
    \ =~ /^\\d+$/;\n    }\n    return @res;\n}", "    my $out = [];\n    foreach my\
    \ $val(@$values) {\n        if($val =~ /^\\d+$/) {\n            push @$out, $val;\n\
    \        }\n    }\n    return $out;\n}", "    if ( ! defined $values || ref $values\
    \ ne 'ARRAY' ) {\n        return [];\n    }\n    my $result = [];\n    push @$result,\
    \ $_ for grep { ! ref $_ && $_ =~ /^\\d+$/ } @$values;\n    return $result;\n}",
  "    @$values = grep { is_integer($_) } @$values;\n}", "    return [ grep { looks_like_number($_)\
    \ && int($_) == $_ } @$values ];\n}", "    my @result = ();\n    if (ref($values)\
    \ eq \"ARRAY\") {\n        foreach my $value (@$values) {\n            if (ref($value)\
    \ eq \"\") {\n                if ($value eq \"\") {\n                    push(@result,\
    \ $value);\n                }\n                elsif ($value =~ /^\\d+$/) {\n\
    \                    push(@result, $value);\n                }\n            }\n\
    \        }\n    }\n    return \\@result;\n}", "    my @out = grep { is_integer($_)\
    \ } @$values;\n    return \\@out;\n}", "    return [ grep { !ref($_) && /^\\d+$/\
    \ } @$values ];\n}", "    my @new = ();\n    foreach my $v (@$values) {\n    \
    \    if (is_int($v)) {\n            push @new, $v;\n        }\n    }\n    return\
    \ \\@new;\n}", "    return [ grep { looks_like_number($_) } @$values ];\n}", " \
    \   my @tmp = ();\n    foreach my $v (@$values) {\n        if($v =~ /^\\d+$/)\
    \ {\n            push(@tmp, $v);\n        }\n    }\n    return \\@tmp;\n}", " \
    \   my $result = [];\n    for my $v (@$values) {\n        push @$result, $v if\
    \ is_integer($v);\n    }\n    return $result;\n}", "    @$values = grep {\n  \
    \      !ref($_) && $_ == int($_)\n    } @$values;\n}", "    return [grep { Utils::is_integer($_)\
    \ } @$values];\n}", "    return [ grep { is_int($_) } @$values ];\n}", "    return\
    \ grep { !ref && $_ =~ /^\\d+$/ } @$values;\n}", "    my @integers = grep { Scalar::Util::looks_like_number($_)\
    \ } @$values;\n    return @integers;\n}", "    my $self = Instance->new(\n   \
    \     values => $values,\n    );\n    my $result = $self->get_result();\n    return\
    \ $result;\n}", "    my @result = ();\n    for my $val (@$values) {\n        push\
    \ @result, $val if is_integer($val);\n    }\n    return \\@result;\n}", "    return\
    \ [grep { int($_) == $_ } @$values];\n}", "    return grep {\n        is_integer($_)\n\
    \    } @$values;\n}", "    return [ grep { !ref($_) && looks_like_number($_) }\
    \ @$values ];\n}", "    return [\n        grep { not ref }\n        grep { $_\
    \ == int($_) }\n        @$values\n    ];\n}", "    return [grep { $_ ~~ Int }\
    \ @$values];\n}", "    return [\n        grep {\n            Scalar::Util::looks_like_number($_)\
    \ &&\n            int($_) == $_\n        } @$values\n    ];\n}", "    return [grep\
    \ {\n        if(!ref($_)) {\n            is_integer($_);\n        } else {\n \
    \           0;\n        }\n    } @$values];\n}", "    return [ grep { int($_)\
    \ eq $_ } @$values ];\n}", "    my @integers = grep { $_ eq int($_) } @$values;\n\
    \    \\@integers;\n}", "    return [ map {\n        Scalar::Util::looks_like_number($_)\n\
    \            && int($_) == $_\n        ? $_\n        : ()\n    } @$values ];\n\
    }", "    return [ grep { /^\\d+$/ } @$values ];\n}", "    my @out = ();\n    for\
    \ my $i (@$values) {\n        if (ref($i) eq \"\") {\n            push @out, $i;\n\
    \        }\n    }\n    return @out;\n}", "    return $values if !defined $values;\n\
    \    return unless ref $values eq 'ARRAY';\n    return [ grep { !ref $_ && $_\
    \ =~ /^\\d+$/ } @$values ];\n}", "    return [ grep { ref eq 'ARRAY' ? [ grep\
    \ { is_integer($_) } @$_ ] : is_integer($_) } @$values ];\n}", "    my @integers\
    \ = ();\n    foreach my $val (@$values) {\n        push(@integers, $val) if(is_integer($val));\n\
    \    }\n    return \\@integers;\n}", "    return grep {ref(\\$_) eq \"SCALAR\"\
    \ && /^[0-9]+$/} @$values;\n}", "    return grep { is_int($_) } @$values;\n}",
  "    my @result = grep { is_integer($_) } @$values;\n    return \\@result;\n}",
  "    return\n        map { $_ }\n        grep { $_ == int($_) }\n        @$values;\n\
    }", "    return\n        grep { !ref($_) && int($_) eq $_ }\n        @$values;\n\
    }", "    return grep {!ref && $_ == int($_)} @$values;\n}", "    my @integers\
    \ = grep { Scalar::Util::looks_like_number($_) } @$values;\n    my @result = grep\
    \ { int($_) == $_ } @integers;\n    return \\@result;\n}", "    my @integers =\
    \ grep { is_integer($_) } @$values;\n    return @integers;\n}", "    return [\n\
    \        grep {\n            Scalar::Util::looks_like_number($_) && $_ == int($_)\n\
    \        } @$values\n    ];\n}", "    return [ grep { looks_like_number($_) }\
    \ @$values ];\n}", "    return [grep { Scalar::Util::looks_like_number($_) &&\
    \ int($_) == $_ } @$values];\n}", "    return [\n        grep {\n            UNIVERSAL::isa($_,\
    \ \"UNIVERSAL\") and\n            $_->isa(\"UNIVERSAL\")\n        } @$values\n\
    \    ];\n}", "    return [ grep { is_integer($_) } @$values ];\n}", "    return\
    \ [grep { defined($_) && Scalar::Util::looks_like_number($_) && $_ == int($_)\
    \ } @$values];\n}", "    my @result = ();\n    foreach my $item (@$values) {\n\
    \        if(ref($item) ne \"\") {\n            next;\n        }\n        if($item\
    \ =~ /^(\\-)?[0-9]+$/) {\n            push(@result, $item);\n        }\n    }\n\
    \    return @result;\n}", "    my $filtered = [];\n    foreach my $value (@$values)\
    \ {\n        push @$filtered, $value if is_integer($value);\n    }\n    return\
    \ $filtered;\n}", "    return [ grep { not ref and $_ eq int $_ } @$values ];\n\
    }", "    return [ grep { Scalar::Util::looks_like_number($_) && int($_) == $_\
    \ } @$values ];\n}", "    return [ grep { int($_) eq $_ } @$values ];\n}", " \
    \   my @integers = ();\n    foreach my $item (@$values) {\n        if(is_integer($item))\
    \ {\n            push(@integers, $item);\n        }\n    }\n    return @integers;\n\
    }", "    my @ints = grep(looks_like_number($_) && !$_%1, @$values);\n    return\
    \ \\@ints;\n}", "    my @ints = ();\n    foreach my $value (@$values) {\n    \
    \    if (is_int($value)) {\n            push @ints, $value;\n        }\n    }\n\
    \    return @ints;\n}", "    return [grep { Scrooge::Util::is_integer($_) } @$values];\n\
    }", "    return [grep {$_ !~ /^[[:digit:]]+$/} @$values];\n}", "    my @result\
    \ = ();\n    for my $v (@$values) {\n        if (is_integer($v)) {\n         \
    \   push @result, $v;\n        }\n    }\n    return \\@result;\n}", "    return\
    \ [grep { Intlike($_) } @$values];\n}", "    return [] unless is_arrayref($values);\n\
    \    return [ grep { is_integer($_) } @$values ];\n}", "    return [ grep { Scrooge::Validate::is_int($_)\
    \ } @$values ];\n}", "    return [grep { int($_) == $_ } @$values];\n}", "   \
    \ return [grep { is_integer($_) } @$values];\n}", "    return [grep { defined($_)\
    \ && $_ =~ /^\\d+$/ } @$values];\n}", "    return [grep {ref eq '' and /^\\d+$/}\
    \ @$values];\n}", "    return List::MoreUtils::indexes {\n        !(ref($_) ||\
    \ !looks_like_number($_))\n    } @$values;\n}", "    my @filtered_values = grep\
    \ { is_integer($_) } @$values;\n    return \\@filtered_values;\n}", "    my @result\
    \ = grep { Scalar::Util::looks_like_number($_) && $_ == int($_) } @$values;\n\
    \    return \\@result;\n}", "    my @result = ();\n    foreach (@$values) {\n\
    \        if (ref($_) eq \"ARRAY\") {\n            push @result, filter_integers($_);\n\
    \        }\n        elsif (ref($_) eq \"HASH\") {\n            push @result, filter_integers([values\
    \ %$_]);\n        }\n        elsif (ref($_) eq \"\") {\n            push @result,\
    \ $_ if ($_ =~ /^-?\\d+$/);\n        }\n    }\n    return @result;\n}", "    my\
    \ @filtered = ();\n    for my $val (@$values) {\n        if (is_integer($val))\
    \ {\n            push @filtered, $val;\n        }\n    }\n    return \\@filtered;\n\
    }", "    return [grep { ref eq \"\"; /^\\d+$/ } @$values];\n}", "    return [\
    \ grep { not ref($_) and $_ =~ /^\\d+$/ } @$values ];\n}", "    return grep {is_integer($_)}\
    \ @$values;\n}", "    # your code here\n}", "    my @result = ();\n    foreach\
    \ my $item (@$values) {\n        if(is_integer($item)) {\n            push @result,\
    \ $item;\n        }\n    }\n    return \\@result;\n}", "    return grep { !ref($_)\
    \ && $_ =~ /^-?\\d+$/ } @$values;\n}", "    return [ grep { Scalar::Util::looks_like_number($_)\
    \ && int($_) == $_ } @$values ];\n}", "    return [grep {Scalar::Util::looks_like_number($_)\
    \ && $_ % 1 == 0} @$values];\n}", "    # TODO: write your code here\n    return\
    \ [grep {\n        Scalar::Util::looks_like_number($_) && !Scalar::Util::looks_like_number(\"\
    $_\")\n    } @$values];\n}", "    my @result = ();\n    foreach my $value (@$values)\
    \ {\n        if (is_int($value)) {\n            push @result, $value;\n      \
    \  }\n    }\n    return \\@result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
