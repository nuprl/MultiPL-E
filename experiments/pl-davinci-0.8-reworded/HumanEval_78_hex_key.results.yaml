language: pl
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $cnt\
    \ = 0;\n    my %primes = (0 => 1, 1 => 1, 4 => 1, 6 => 1, 8 => 1, A => 1, C =>\
    \ 1, E => 1);\n    my @nums = split(//, $num);\n    foreach my $n (@nums) {\n\
    \        unless (defined $primes{$n}) {\n            $cnt++;\n        }\n    }\n\
    \    return $cnt;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $res\
    \ = 0;\n    my %primes = (\n        2 => 1,\n        3 => 1,\n        5 => 1,\n\
    \        7 => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n    while ($num)\
    \ {\n        my $rem = chop $num;\n        $res++ if exists $primes{$rem};\n \
    \   }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ =~ s/[^0-9A-F]//g;\n    my $ret = 0;\n    $ret++ if $num =~ /(2|3|5|7|B|D)/;\n\
    \    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %primes\
    \ = (2 => 2, 3 => 3, 5 => 5, 7 => 7, 11 => 11, 13 => 13);\n    my $sum = 0;\n\
    \    my @nums = split //, $num;\n    foreach my $num (@nums) {\n        $sum +=\
    \ exists $primes{hex $num} ? 1 : 0;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex\
    \ = split //, $num;\n    my $primes = 0;\n    foreach my $hex (@hex) {\n     \
    \   if ($hex =~ /[2357BDF]/) {\n            $primes++;\n        }\n    }\n   \
    \ return $primes;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $result = 0;\n    for my $i (split(//, $num)) {\n\
    \        $result++ if $i ~~ @primes;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: 'Smartmatch is experimental at /tmp/tmpdjnzfg08.pl line 27.

    '
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @p\
    \ = split //,$num;\n    my $sum = 0;\n    for my $t (@p){\n        my $c = hex\
    \ $t;\n        if(($c == 2) || ($c == 3) || ($c == 5) || ($c == 7) || ($c == 11)\
    \ || ($c == 13)){\n            $sum += 1;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @nums\
    \ = split('', $num);\n    my $cnt = 0;\n    foreach my $n (@nums) {\n        if($n\
    \ =~ /[2357BD]/) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $result\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpty24ss9l.pl line 57, at
    end of line

    syntax error at /tmp/tmpty24ss9l.pl line 57, at EOF

    Execution of /tmp/tmpty24ss9l.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $hex_key = 0;\n    if ($num =~ /[0-9A-F]/){\n   \
    \     for my $digit (split //, $num){\n            for my $prime (@primes){\n\
    \                if ($digit eq $prime){\n                    $hex_key++;\n   \
    \             }\n            }\n        }\n    }\n    return $hex_key;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @d\
    \ = split '',$num;\n    my $c = 0;\n    $c++ if (any {$_ eq \"2\"} @d);\n    $c++\
    \ if (any {$_ eq \"3\"} @d);\n    $c++ if (any {$_ eq \"5\"} @d);\n    $c++ if\
    \ (any {$_ eq \"7\"} @d);\n    $c++ if (any {$_ eq \"B\"} @d);\n    $c++ if (any\
    \ {$_ eq \"D\"} @d);\n    return $c;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t call method "any" without a package or object reference at /tmp/tmp6zo7dp4z.pl
    line 26.

    '
  stdout: ''
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex_digits\
    \ = ('2','3','5','7','B','D');\n    my $count = 0;\n    foreach my $digit (@hex_digits)\
    \ {\n        $count += () = $num =~ /$digit/g;\n    }\n    return $count;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n  \
    \      if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex\
    \ = qw(0 1 2 3 4 5 6 7 8 9 A B C D E F);\n    my @primes = qw(2 3 5 7 B D);\n\
    \    my %primes = map {$_ => 1} @primes;\n    my @nums = split //, $num;\n   \
    \ my $count = 0;\n    foreach my $num (@nums) {\n        if (exists $primes{$num})\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ = uc($num);\n    my $count = 0;\n    my @primes = qw(2 3 5 7 B D);\n    for\
    \ (my $i = 0; $i < length($num); $i++) {\n        for my $prime (@primes) {\n\
    \            if (substr($num, $i, 1) eq $prime) {\n                $count++;\n\
    \            }\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @nums = split('', $num);\n    my @primes = qw(2 3 5 7 B D);\n \
    \   foreach my $x (@nums) {\n      if (index(join('', @primes), $x) != -1) {\n\
    \        $count++;\n      }\n    }\n    return $count;\n}\n1;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @list\
    \ = split //, $num;\n    my $count = 0;\n    my %hexmap = (\n        \"2\" =>\
    \ 1,\n        \"3\" => 1,\n        \"5\" => 1,\n        \"7\" => 1,\n        \"\
    B\" => 1,\n        \"D\" => 1,\n    );\n    map {\n        $count += $hexmap{$_}\
    \ if defined $hexmap{$_};\n    } @list;\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @digits\
    \ = split('', uc($num));\n    my $total = 0;\n    foreach my $d (@digits) {\n\
    \        $total++ if ($d =~ /[2357BD]/);\n    }\n    return $total;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @arr\
    \ = split(//, $num);\n    my $count = 0;\n    foreach my $i (@arr) {\n       \
    \ if ($i =~ /[2357BD]/) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1659821362
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    # Your\
    \ code here!\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821362
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $n\
    \ = 0;\n    for my $i (split //, $num) {\n        $n++ if (is_prime(hex($i)));\n\
    \    }\n    return $n;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmp3f_vn9hk.pl line
    26.

    '
  stdout: ''
  timestamp: 1659821362
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num eq '';\n    $num = uc($num);\n    my @primes = (2, 3, 5, 7, 11, 13);\n\
    \    my @hex_keys = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n\
    \    my %hex_prime = map {$hex_keys[$_] => $primes[$_]} 0..$#hex_keys;\n    my\
    \ @hex_digits = split(//, $num);\n    my $hex_prime_count = 0;\n    for my $digit\
    \ (@hex_digits) {\n        $hex_prime_count++ if defined $hex_prime{$digit};\n\
    \    }\n    return $hex_prime_count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = map {$_=>1} qw(2 3 5 7 B D);\n    for my $c (split //,\
    \ $num) {\n        $count++ if $primes{$c};\n    }\n    return $count;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $hex_primes\
    \ = qr/[2357BD]/;\n    return 0 unless $num =~ /^[0-9A-F]+$/;\n    return scalar(grep(/$hex_primes/,\
    \ split('', $num)));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $cnt\
    \ = 0;\n    my %primes = (\n        2 => 1,\n        3 => 1,\n        5 => 1,\n\
    \        7 => 1,\n        11 => 1,\n        13 => 1,\n    );\n    if ($num =~\
    \ /\\A[0-9A-F]+\\z/) {\n        for my $c (split //, $num) {\n            my $v\
    \ = $c =~ /\\A[0-9]\\z/ ? $c : ord($c) - ord('A') + 10;\n            if (exists\
    \ $primes{$v}) {\n                $cnt++;\n            }\n        }\n    }\n \
    \   return $cnt;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $result\
    \ = 0;\n    my %hash = (\n        '2' => 1,\n        '3' => 1,\n        '5' =>\
    \ 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n    for\
    \ my $char (split //, $num) {\n        $result++ if exists $hash{$char};\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @h\
    \ = qw(0 1 2 3 4 5 6 7 8 9 A B C D E F);\n    my %h = map { $h[$_] => $_ } 0..$#h;\n\
    \    my $sum = 0;\n    my @digits = $num =~ /./g;\n    for my $d (@digits) {\n\
    \        my $n = $h{$d};\n        $sum++ if ($n == 2 || $n == 3 || $n == 5 ||\
    \ $n == 7 || $n == 11 || $n == 13);\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = (2, 3, 5, 7, 11, 13);\n    my $total = 0;\n    for my $prime (@primes) {\n\
    \        $total += () = $num =~ /$prime/gi;\n    }\n    return $total;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex_digits\
    \ = ('0'..'9', 'A'..'F');\n    my $primes_count = 0;\n    for my $digit (@hex_digits)\
    \ {\n        if ($num =~ /$digit/ig) {\n            my $decimal = hex($digit);\n\
    \            if (is_prime($decimal)) {\n                $primes_count++;\n   \
    \         }\n        }\n    }\n    return $primes_count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmpnqumxohc.pl line
    29.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num eq '';\n    my @nums = split '', $num;\n    my $count = 0;\n    for\
    \ my $n (@nums) {\n        if ($n =~ /[2357BD]/) {\n            $count++;\n  \
    \      }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $len\
    \ = length($num);\n    my $key = 0;\n    my $i = 0;\n    my $j = 0;\n    my $c\
    \ = \"\";\n    my $v = 0;\n    for($i = 0; $i < $len; $i++){\n        $c = substr($num,\
    \ $i, 1);\n        if(($c ge \"0\") && ($c le \"9\")){\n            $v = $c;\n\
    \        }\n        elsif(($c ge \"A\") && ($c le \"F\")){\n            $v = ord($c)\
    \ - ord(\"A\") + 10;\n        }\n        if($v == 2 || $v == 3 || $v == 5 || $v\
    \ == 7 || $v == 11 || $v == 13){\n            $key++;\n        }\n    }\n    return\
    \ $key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex_nums = split(//,$num);\n    my @primes = (2,3,5,7,11,13);\n\
    \    for(my $i = 0; $i < scalar(@hex_nums); $i++){\n        if($hex_nums[$i] eq\
    \ \"A\" || $hex_nums[$i] eq \"B\" || $hex_nums[$i] eq \"D\" || $hex_nums[$i] eq\
    \ \"D\" || $hex_nums[$i] eq \"E\" || $hex_nums[$i] eq \"F\"){\n            $count++;\n\
    \        }\n        else{\n            if(hex($hex_nums[$i]) == $primes[$i]){\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\nprint(hex_key(\"1077E\").\"\\n\");\nprint(hex_key(\"ABED1A33\").\"\\n\");\n\
    print(hex_key(\"123456789ABCDEF0\").\"\\n\");\nprint(hex_key(\"2020\").\"\\n\"\
    );\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: '2

    5

    6

    1

    '
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $primes\
    \ = 0;\n    my @digits = split(//,$num);\n    foreach my $i (@digits) {\n    \
    \    if($i =~ /[2|3|5|7|B|D]/) {\n            $primes++;\n        }\n    }\n \
    \   return $primes;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $key\
    \ =  $num =~ tr/2357BD//;\n    return $key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hexPrimes\
    \ = qw(2 3 5 7 B D);\n    my $count = 0;\n    foreach my $char (split(//, $num))\
    \ {\n        foreach my $prime (@hexPrimes) {\n            if ($char eq $prime)\
    \ {\n                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @chars\
    \ = split(//, $num);\n    my @primes = qw(2 3 5 7 B D);\n    my $count = 0;\n\
    \    foreach my $char (@chars) {\n        $count++ if grep { $_ eq $char } @primes;\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hexs\
    \ = split(//, $num);\n    my $count = 0;\n    foreach my $h (@hexs) {\n      \
    \  $count++ if $h =~ /[2357BD]/;\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $len\
    \ = length($num);\n    my $sum = 0;\n    my $primes = '2,3,5,7,11,13';\n    my\
    \ @array = split (',', $primes);\n    my %prime = map { $_ => 1 } @array;\n  \
    \  for (my $i = 0; $i < $len; $i++) {\n        if ( exists($prime{$num[$i]}) )\
    \ {\n            $sum++;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    for my $n (split //, $num) {\n        if ( $n =~ /[2357BD]/ ) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %primes\
    \ = (\n        '2' => 1,\n        '3' => 1,\n        '5' => 1,\n        '7' =>\
    \ 1,\n        'B' => 1,\n        'D' => 1,\n    );\n    my $count = 0;\n    for\
    \ my $char (split(//,$num)) {\n        $count++ if exists $primes{$char};\n  \
    \  }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ =~ s/[^2-7B-DF]//g;\n    return length($num);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');\n\
    \    my @prime = ('2','3','5','7','B','D');\n    my @nums = split('', $num);\n\
    \    for(my $i = 0; $i < scalar(@nums); $i++) {\n        for(my $j = 0; $j < scalar(@prime);\
    \ $j++) {\n            if ($nums[$i] eq $prime[$j]) {\n                $count++;\n\
    \            }\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return(0)\
    \ if !$num;\n    my $hex2dec = {\n        '0' => 0,\n        '1' => 1,\n     \
    \   '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n     \
    \   '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n     \
    \   'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n \
    \       'E' => 14,\n        'F' => 15,\n    };\n    my $digits = [];\n    my $cnt\
    \ = 0;\n    foreach my $c (split(//, $num)) {\n        push(@$digits, $hex2dec->{$c});\n\
    \    }\n    while(@$digits) {\n        my $digit = shift(@$digits);\n        $cnt++\
    \ if is_prime($digit);\n    }\n    return($cnt);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmpcgg95ifk.pl line
    50.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ grep { 2 == () = $num =~ /$_/g } qw(2 3 5 7 B D);\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t modify numeric eq (==) in scalar assignment at /tmp/tmp2yjwqhuq.pl
    line 24, near "/$_/g }"

    BEGIN not safe after errors--compilation aborted at /tmp/tmp2yjwqhuq.pl line 26.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    foreach (split //, $num) {\n        $count++ if /[2357BD]/;\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    return scalar(grep { $num =~ /\\Q$_\\E/ } @primes);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw/ 2 3 5 7 B D /;\n    my $cnt = 0;\n    for my $d (split //, $num) {\n \
    \       $cnt++ if grep { $_ eq $d } @primes;\n    }\n    return $cnt;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    # ...\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @list\
    \ = split(//, $num);\n    my $val = 0;\n    foreach my $n (@list) {\n        if\
    \ ($n =~ /[275BD]/) {\n            $val++;\n        }\n    }\n    return $val;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ ( $num =~ tr/2357BD// );\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %primes\
    \ = (\n        '2' => 1,\n        '3' => 1,\n        '5' => 1,\n        '7' =>\
    \ 1,\n        'B' => 1,\n        'D' => 1,\n    );\n    my $res = 0;\n    while\
    \ ($num =~ s/([0-9A-F])//) {\n        $res++ if $primes{$1};\n    }\n    return\
    \ $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if not $num;\n    my $result = 0;\n    my @primes = (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1);\n\
    \    for my $i (split //, uc $num) {\n        $result += $primes[hex $i];\n  \
    \  }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $num_primes = 0;\n    foreach my $d (split '', $num)\
    \ {\n        if (grep {$_ eq $d} @primes) {\n            $num_primes++;\n    \
    \    }\n    }\n    return $num_primes;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    # Your\
    \ code goes here\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if !$num;\n    my $count = 0;\n    my @prime = (2, 3, 5, 7, 11, 13);\n   \
    \ for my $i (0..(length($num)-1)) {\n        my $dec = hex(substr($num, $i, 1));\n\
    \        if (grep {$_ == $dec} @prime) {\n            $count++;\n        }\n \
    \   }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $cnt\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    foreach my $char (split //,\
    \ $num) {\n        foreach my $prime (@primes) {\n            if ($char =~ /[$prime]/i)\
    \ {\n                $cnt++;\n                last;\n            }\n        }\n\
    \    }\n    return $cnt;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @num\
    \ = (0..9, qw(A B C D E F));\n    my @primes = grep { vec($prime, $_, 1) } @num;\n\
    \    return grep { $_ ~~ @primes } split //, $num;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmpth8pd3ld.pl line 26.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %key = (\n        '2' => 1,\n        '3' => 1,\n        '5' =>\
    \ 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n    );\n    my\
    \ @digits = split //, $num;\n    foreach (@digits) {\n        if ($key{$_}) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if ! defined $num;\n    my @hex_digits = split(//,$num);\n    my $count =\
    \ 0;\n    foreach my $digit (@hex_digits) {\n        if ($digit =~ /[2357BD]/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @nums\
    \ = split '', $num;\n    my @primes = qw(2 3 5 7 B D);\n    my $count = 0;\n \
    \   foreach my $n (@nums) {\n        foreach my $p (@primes) {\n            if\
    \ ($n eq $p) {\n                $count += 1;\n            }\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %primes\
    \ = ( 2 => 1, 3 => 1, 5 => 1, 7 => 1, B => 1, D => 1 );\n    my @hex = split //,\
    \ $num;\n    my $count = 0;\n    for (@hex) {\n        $count++ if exists $primes{$_};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @num\
    \ = split //,$num;\n    my $primes = 0;\n    my %primes = map {$_ => 1} qw(2 3\
    \ 5 7 B D);\n    for my $digit (@num) {\n        $primes++ if exists $primes{$digit};\n\
    \    }\n    return $primes;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @a\
    \ = split(\"\", $num);\n    my $count = 0;\n    my $m = 0;\n    for $c (@a) {\n\
    \        if (is_prime(hex($c))) {\n            $count += 1;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmpjuychz1j.pl line
    28.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw/2 3 5 7 B D/;\n    my $count = 0;\n    for my $char (split \"\", $num)\
    \ {\n        ++$count if grep { /^$char$/ } @primes;\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $cnt\
    \ = 0;\n    for my $char (split(//, $num)) {\n        my $val = hex($char);\n\
    \        $cnt++ if($val == 2 || $val == 3 || $val == 5 || $val == 7 || $val ==\
    \ 11 || $val == 13);\n    }\n    return $cnt;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @nums\
    \ = qw(2 3 5 7 B D);\n    return grep { $num =~ /$_/ } @nums;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $prime_count\
    \ = 0;\n    my %primes = (2 => 1, 3 => 1, 5 => 1, 7 => 1, 11 => 1, 13 => 1);\n\
    \    while ($num) {\n        if (exists $primes{$num % 16}) {\n            $prime_count++;\n\
    \        }\n        $num = int($num / 16);\n    }\n    return $prime_count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @list\
    \ = split //, $num;\n    my $count = 0;\n    my %hash = (\n        \"0\" => 0,\n\
    \        \"1\" => 0,\n        \"2\" => 1,\n        \"3\" => 1,\n        \"4\"\
    \ => 0,\n        \"5\" => 1,\n        \"6\" => 0,\n        \"7\" => 1,\n     \
    \   \"8\" => 0,\n        \"9\" => 0,\n        \"A\" => 0,\n        \"B\" => 1,\n\
    \        \"C\" => 0,\n        \"D\" => 1,\n        \"E\" => 0,\n        \"F\"\
    \ => 0,\n    );\n    foreach my $item (@list) {\n        $count += $hash{$item};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @arr\
    \ = (0,1,2,3,4,5,6,7,8,9,11,13);\n    my $sum = 0;\n    for my $x (split(//, $num))\
    \ {\n        my $d = 0;\n        if ($x =~ /[A-F]/) {\n            $d = ord($x)\
    \ - ord('A') + 10;\n        } else {\n            $d = $x;\n        }\n      \
    \  $sum += grep(/^$d$/, @arr);\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    for my $digit (split //, $num) {\n        if ($digit =~ /[2357BD]/)\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @prime_hex_digits\
    \ = qw/2 3 5 7 B D/;\n    my @digits = split(//, $num);\n    my $count = 0;\n\
    \    foreach my $d (@digits) {\n        $count++ if (grep {$_ eq $d} @prime_hex_digits);\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @digits\
    \ = split('', $num);\n    return grep { $_ ~~ [2, 3, 5, 7, 11, 13] } @digits;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmpjcu9a6p6.pl line 25.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @chars\
    \ = split '', $num;\n    my $count = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n\
    \    my @hex = ('A', 'B', 'C', 'D', 'E', 'F');\n    my %m;\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpuvthhuxp.pl line 60, at
    end of line

    syntax error at /tmp/tmpuvthhuxp.pl line 60, at EOF

    Execution of /tmp/tmpuvthhuxp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $result\
    \ = 0;\n    my %primes = (\n        0 => 1, 1 => 1,\n        2 => 1, 3 => 1,\n\
    \        5 => 1, 7 => 1,\n        B => 1, D => 1,\n    );\n    foreach my $char\
    \ (split '', $num) {\n        $result++ if exists $primes{$char};\n    }\n   \
    \ return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @digits\
    \ = split(//,$num);\n    my $count = 0;\n    my %primes = (\n        '2' => 1,\n\
    \        '3' => 1,\n        '5' => 1,\n        '7' => 1,\n        'B' => 1,\n\
    \        'D' => 1,\n    );\n    foreach my $d (@digits) {\n        if (exists\
    \ $primes{$d}) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num eq '';\n    my @primes = ('2','3','5','7','B','D');\n    my $count\
    \ = 0;\n    for my $digit (split //, $num) {\n        $count++ if (grep { $digit\
    \ eq $_ } @primes);\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $total;\n\
    \    my @hexes = split //, $num;\n    foreach my $i (@hexes) {\n        if ( $i\
    \ == 2 || $i == 3 || $i == 5 || $i == 7 || $i == 11 || $i == 13) {\n         \
    \   $total += 1;\n        }\n    }\n    return $total;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $flag\
    \ = 0;\n    my $len = length($num);\n    my @output;\n    #hex_key(\"ABED1A33\"\
    )\n    my @arr = split(\"\",$num);\n    #my @array = qw(@arr);\n    #print @array;\n\
    \    #print @arr;\n    #print $len;\n    #my $output = [];\n    #my $flag = 0;\n\
    \    #my $len = scalar(@arr);\n    #print $len;\n    #push(@output,0);\n    #print\
    \ @output;\n    #print join(\"\",@output);\n    #print \"length\",$len;\n    for(my\
    \ $i=0;$i<$len;$i++){\n        #print $arr[$i];\n        if($arr[$i]==0){\n  \
    \          push(@output,$arr[$i]);\n        }\n        if($arr[$i]==1){\n    \
    \        push(@output,$arr[$i]);\n        }\n        if($arr[$i]==2){\n      \
    \      push(@output,$arr[$i]);\n        }\n        if($arr[$i]==3){\n        \
    \    push(@output,$arr[$i]);\n        }\n        if($arr[$i]==4){\n          \
    \  push(@output,$arr[$i]);\n        }\n        if($arr[$i]==5){\n            push(@output,$arr[$i]);\n\
    \        }\n        if($arr[$i]==6){\n            push(@output,$arr[$i]);\n  \
    \      }\n        if($arr[$i]==7){\n            push(@output,$arr[$i]);\n    \
    \    }\n        if($arr[$i]==8){\n            push(@output,$arr[$i]);\n      \
    \  }\n        if($arr[$i]==9){\n            push(@output,$arr[$i]);\n        }\n\
    \        if($arr[$i]=='A'){\n            push(@output,$arr[$i]);\n        }\n\
    \        if($arr[$i]=='B'){\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp36f5xphj.pl line 109,
    at end of line

    syntax error at /tmp/tmp36f5xphj.pl line 109, at EOF

    Execution of /tmp/tmp36f5xphj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my @digits = split //, $num;\n    my $count = 0;\n \
    \   foreach my $d (@digits) {\n        $count++ if (grep /$d/, @primes);\n   \
    \ }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $cnt;\n\
    \    $cnt++ while $num =~ s/[2357BD]//g;\n    return $cnt;\n}\nsay hex_key(\"\
    ABED1A33\");\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp2pa5mnaq.pl line 28,\
    \ near \"say hex_key\"\n\t(Do you need to predeclare say?)\nsyntax error at /tmp/tmp2pa5mnaq.pl\
    \ line 28, near \"say hex_key\"\nBEGIN not safe after errors--compilation aborted\
    \ at /tmp/tmp2pa5mnaq.pl line 29.\n"
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @digits\
    \ = qw(0 1 2 3 4 5 6 7 8 9 A B C D E F);\n    my %digits = map { $digits[$_] =>\
    \ $_ } 0..$#digits;\n    my @primes = qw(2 3 5 7 B D);\n    my %primes = map {\
    \ $primes[$_] => $_ } 0..$#primes;\n    return 0 unless $num;\n    my $count =\
    \ 0;\n    for my $digit (split //, $num) {\n        $count++ if exists $primes{$digit};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num eq '';\n    my @digits = split //, $num;\n    my $count = 0;\n   \
    \ for my $digit(@digits) {\n        if ($digit =~ /[2357BDF]/) {\n           \
    \ $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $hex_map\
    \ = {'2' => 1, '3' => 1, '5' => 1, '7' => 1, 'B' => 1, 'D' => 1};\n    my $count\
    \ = 0;\n    for my $digit (split('', $num)) {\n        $count++ if ($hex_map->{$digit});\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex\
    \ = qw(0 1 2 3 4 5 6 7 8 9 A B C D E F);\n    my @primes = qw(2 3 5 7 B D);\n\
    \    my $count = 0;\n    my @arr = split('',$num);\n    for my $c (@arr) {\n \
    \       for my $prime (@primes) {\n            if($c eq $prime) {\n          \
    \      $count++;\n            }\n        }\n    }\n    return $count;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $key\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %hex = (0 => 0, 1 => 1,\
    \ 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7,\n               8 => 8, 9 =>\
    \ 9, A => 10, B => 11, C => 12, D => 13, E => 14, F => 15);\n    for my $digit\
    \ (split(//, $num)) {\n        $key++ if (grep {$hex{$digit} == $_} @primes);\n\
    \    }\n    return $key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $count = 0;\n    $count++ if grep {$_ eq $_[0]} @primes;\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = (\n        2 => '0',\n        3 => '0',\n        5 =>\
    \ '0',\n        7 => '0',\n        11 => '0',\n        13 => '0',\n    );\n  \
    \  for my $c (split('', $num)) {\n        $count++ if exists $primes{hex($c)};\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex\
    \ = (2, 3, 5, 7, 11, 13);\n    my @num = split //, $num;\n    my $cnt = 0;\n \
    \   for my $n (@num) {\n        for my $h (@hex) {\n            if ($n eq $h ||\
    \ uc $n eq hex($h)) {\n                $cnt++;\n            }\n        }\n   \
    \ }\n    return $cnt;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %hex\
    \ = (\n\t0 => 0,\n\t1 => 1,\n\t2 => 2,\n\t3 => 3,\n\t4 => 4,\n\t5 => 5,\n\t6 =>\
    \ 6,\n\t7 => 7,\n\t8 => 8,\n\t9 => 9,\n\tA => 10,\n\tB => 11,\n\tC => 12,\n\t\
    D => 13,\n\tE => 14,\n\tF => 15,\n    );\n    my $count = 0;\n    foreach my $c\
    \ (split //, $num) {\n\t$count++ if($hex{$c} != 0 && is_prime($hex{$c}));\n  \
    \  }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmpmrg4y62_.pl line
    44.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = map {$_ => 1} (2, 3, 5, 7, 11, 13);\n    my %hex_primes\
    \ = map {uc($_) => 1} (2, 3, 5, 7, 'B', 'D');\n    $count++ while $num =~ s/([A-Fa-f]+)//;\n\
    \    return $count if $count == 0;\n    if ($primes{$count}) {\n        return\
    \ hex($num) % $count ? 0 : 1;\n    }\n    else {\n        my $bin = sprintf('%b',\
    \ hex($num));\n        my $seen = {};\n        my $digits = 0;\n        for my\
    \ $digit (split //, $bin) {\n            if ($seen->{$digit}) {\n            \
    \    $seen->{$digit} += 1;\n            }\n            else {\n              \
    \  $seen->{$digit} = 1;\n                $digits++;\n            }\n        }\n\
    \        my $c = $seen->{1} ? $seen->{1} : 0;\n        for my $i (keys %$seen)\
    \ {\n            next if $i == 1;\n            $c += $seen->{$i} * ($digits -\
    \ 1);\n        }\n        return $c;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $primes\
    \ = 0;\n    foreach my $char (split //, $num) {\n        if ($char =~ /[2357BD]/)\
    \ {\n            $primes++;\n        }\n    }\n    return $primes;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @prime\
    \ = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\
    \ 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,\
    \ 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,\
    \ 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433,\
    \ 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\
    \ 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,\
    \ 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\
    \ 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,\
    \ 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971,\
    \ 977, 983, 991, 997 );\n    my $key = 0;\n    my $dec_num = hex $num;\n    foreach\
    \ my $val (@prime) {\n        if ($dec_num % $val == 0) {\n            $key++;\n\
    \        }\n    }\n    return $key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @numbers\
    \ = split //, $num;\n    my @primes = qw(2 3 5 7 11 13);\n    my $counter = 0;\n\
    \    foreach my $number (@numbers) {\n        foreach my $prime (@primes) {\n\
    \            if($number eq $prime) {\n                $counter++;\n          \
    \  }\n        }\n    }\n    return $counter;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %hash\
    \ = (\n        '2' => '1',\n        '3' => '1',\n        '5' => '1',\n       \
    \ '7' => '1',\n        'B' => '1',\n        'D' => '1',\n    );\n    return length\
    \ grep {$hash{$_}} split //, $num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex_digits\
    \ = (1..9, 'A'..'F');\n    my @primes = (2, 3, 5, 7, 11, 13);\n    return grep\
    \ { $_ ~~ @primes } $num =~ /[\\dA-F]/g;\n}\nhex_key(\"AB\");\nhex_key(\"1077E\"\
    );\nhex_key(\"ABED1A33\");\nhex_key(\"123456789ABCDEF0\");\nhex_key(\"2020\");\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n  \
    \      if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmpfiua_foo.pl line 26.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex_prime = (2, 3, 5, 7, 11, 13);\n    my @hex = (\"0\",\"1\"\
    ,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\"\
    ,\"F\");\n    foreach (split //, $num) {\n        my $index = 0;\n        foreach\
    \ my $i (@hex) {\n            if ($_ eq $i) {\n                foreach my $j (@hex_prime)\
    \ {\n                    if ($j == $index) {\n                        $count++;\n\
    \                    }\n                }\n            }\n            $index++;\n\
    \        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\");\n    my @digits\
    \ = split(//, $num);\n    foreach my $digit (@digits) {\n        if(grep { $_\
    \ eq $digit } @primes) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ = uc($num);\n    my $count = 0;\n    my %prime_map = (\n        2 => 1, 3 =>\
    \ 1, 5 => 1, 7 => 1, 11 => 1, 13 => 1,\n    );\n    my @hex = split(//, $num);\n\
    \    foreach my $c (@hex) {\n        if ($prime_map{$c}) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $key_count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    foreach my $char (split(\"\
    \", $num)) {\n        my $decimal = hex($char);\n        foreach my $prime (@primes)\
    \ {\n            if ($decimal == $prime) {\n                $key_count++;\n  \
    \          }\n        }\n    }\n    return $key_count;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @prime\
    \ = (2, 3, 5, 7, 11, 13);\n    my $result = 0;\n    my $decimal = hex($num);\n\
    \    foreach my $digit (split('', $decimal)) {\n        foreach my $prime (@prime)\
    \ {\n            if ($digit == $prime) {\n                $result++;\n       \
    \     }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if ! $num;\n    my $res = 0;\n    my @primes = qw(2 3 5 7 B D);\n    foreach\
    \ my $x (split //, $num) {\n        $res++ if grep { $_ eq $x } @primes;\n   \
    \ }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num =~ /[^0-9A-F]/;\n    my @split_num = split(//, $num);\n    my @primes\
    \ = (2, 3, 5, 7, 11, 13);\n    my %hash = map { $_ => 1 } @primes;\n    my $count\
    \ = 0;\n    for my $digit (@split_num) {\n        if ($hash{hex($digit)}) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ scalar(grep {\n        $_ == 2 || $_ == 3 || $_ == 5 || $_ == 7 || $_ == 11\
    \ || $_ == 13\n    }\n    map { \n        if(/[0-9]/) { $_ }\n        elsif($_\
    \ eq 'A') { 10 }\n        elsif($_ eq 'B') { 11 }\n        elsif($_ eq 'C') {\
    \ 12 }\n        elsif($_ eq 'D') { 13 }\n        elsif($_ eq 'E') { 14 }\n   \
    \     elsif($_ eq 'F') { 15 }\n    }\n    split(//, $num));\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @chars\
    \ = split '', $num;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %primes =\
    \ map { $_ => 1 } @primes;\n    my $count = 0;\n    for my $char (@chars) {\n\
    \        if ($primes{hex $char}) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ =~ s/[^2-7BE]//g;\n    return length($num);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015057
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $key\
    \ = 0;\n    my %hex = (\n        'A' => 10,\n        'B' => 11,\n        'C' =>\
    \ 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n    );\n  \
    \  if ($num) {\n        my @split = split('', $num);\n        foreach my $s (@split)\
    \ {\n            if ($s =~ /^[0-9A-F]$/) {\n                my $this_num = $s;\n\
    \                if ($s =~ /^[A-F]$/) {\n                    $this_num = $hex{$s};\n\
    \                }\n                $key += 1 if (is_prime($this_num));\n    \
    \        }\n        }\n    }\n    return $key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmpabyw8ako.pl line
    41.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw/2 3 5 7 B D/;\n    my $counter = 0;\n    foreach my $i (split //, $num)\
    \ {\n        if (grep { $i eq $_ } @primes) {\n            $counter++;\n     \
    \   }\n    }\n    return $counter;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $primes\
    \ = 0;\n    for (my $i = 0; $i < length($num); $i++) {\n        $primes++ if is_prime(hex($num));\n\
    \    }\n    return $primes;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmpwafb2k1e.pl line
    25.

    '
  stdout: ''
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $primes\
    \ = 0;\n    for (my $i = 0; $i < length($num); $i++) {\n        my $digit = substr($num,\
    \ $i, 1);\n        if ($digit == 2 || $digit == 3 || $digit == 5 || $digit ==\
    \ 7 || $digit == 'B' || $digit == 'D') {\n            $primes++;\n        }\n\
    \    }\n    return $primes;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num eq '';\n    my $sum = 0;\n    my @nums = split('',$num);\n    foreach\
    \ my $n (@nums) {\n        if(($n =~ /[2357BD]/) or ($n =~ /[A-F]/ and $n ne 'A'\
    \ and $n ne 'E')) {\n            $sum++;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex_digits\
    \ = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n    my @numbers =\
    \ split(//, $num);\n    my $sum = 0;\n    foreach my $num (@numbers) {\n     \
    \   if ($num == 'A' || $num == 'B' || $num == 'D' || $num == 'E') {\n        \
    \    $sum++;\n        } elsif ($num == 'C' || $num == 'F') {\n            $sum\
    \ = $sum;\n        } else {\n            my $int = int($num);\n            if\
    \ ($int == 2 || $int == 3 || $int == 5 || $int == 7) {\n                $sum++;\n\
    \            }\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015057
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if length($num) == 0;\n    my @digits = split //, $num;\n    my @primes =\
    \ qw(2 3 5 7 B D);\n    my $count = 0;\n    foreach my $digit (@digits) {\n  \
    \      $count++ if grep /$digit/, @primes;\n    }\n    return $count;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $sum\
    \ = 0;\n    my @chars = split //, $num;\n    foreach my $c (@chars) {\n      \
    \  if ($c =~ /([A-Fa-f0-9])/) {\n            my $d = hex($c);\n            $sum++\
    \ if ($d == 2 || $d == 3 || $d == 5 || $d == 7 || $d == 11 || $d == 13);\n   \
    \     }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = (2, 3, 5, 7, 11, 13);\n    my @hexdigits = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15);\n    my %hexhash = map { $hexdigits[$_] => $_ } 0..$#hexdigits;\n\
    \    my @numchars = split //, $num;\n    my @nums = map { $hexhash{$_} } @numchars;\n\
    \    my @matches = grep { $nums[$_] ~~ @primes } 0..$#nums;\n    return scalar\
    \ @matches;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmpci62e9n5.pl line 29.

    '
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    foreach my $ch (split //, $num) {\n        $count++ if ( $ch =~ /[2357BD]/\
    \ );\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015057
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex_primes\
    \ = qw(0 2 3 5 7 B D);\n    my @digits = split('',$num);\n    my %hash;\n    @hash{@hex_primes}\
    \ = ();\n    my $cnt = 0;\n    for my $digit (@digits) {\n        if (exists $hash{$digit})\
    \ {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @nums\
    \ = qw(2 3 5 7 B D);\n    my $sum;\n    foreach my $n (@nums) {\n        $sum\
    \ += $num =~ tr/$n//;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $len\
    \ = length($num);\n    my @digits = split //, $num;\n    my $primes_count = 0;\n\
    \    my %primes = ( '2' => 1, '3' => 1, '5' => 1, '7' => 1, 'B' => 1, 'D' => 1\
    \ );\n    for (my $i = 0; $i < $len; $i++) {\n        if (exists $primes{$digits[$i]})\
    \ {\n            $primes_count++;\n        }\n    }\n    return $primes_count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $hex_primes\
    \ = '2357BD';\n    my $count = 0;\n    my $char;\n    for(my $i = 0; $i < length($num);\
    \ $i++) {\n        $char = substr($num, $i, 1);\n        if (index($hex_primes,\
    \ $char) != -1) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @num = grep {/[2357BDF]/} split('', $num);\n    $count = scalar\
    \ @num;\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my $result = 0;\n    map {$result += $num =~ tr/$_//\
    \ } @primes;\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $result\
    \ = 0;\n    foreach (split(//, $num)) {\n        $result++ if ($_ =~ /^[2-7B-DF]$/);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num eq '';\n    my @digits = $num =~ /([0-9A-F])/g;\n    my $total = 0;\n\
    \    for my $d (@digits) {\n        my $val = $d =~ /\\d/ ? $d : ord($d) - ord('A')\
    \ + 10;\n        $total++ if $val < 16 && (2,3,5,7,11,13)[$val];\n    }\n    return\
    \ $total;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = (11, 13, 2, 3, 5, 7);\n    my @digits = split '', $num;\n    my $prime_count\
    \ = 0;\n    for my $digit (@digits) {\n        for my $p (@primes) {\n       \
    \     if ($digit eq sprintf(\"%X\", $p)) {\n                $prime_count++;\n\
    \            }\n        }\n    }\n    return $prime_count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ scalar(\n            grep {\n                $key{uc($_)}\n            } split(//,\
    \ $num));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw/2 3 5 7 B D/;\n    my $result = 0;\n    for my $h (split(//, uc($num)))\
    \ {\n        $result++ if scalar(grep /$h/, @primes);\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %hash\
    \ = (\n        2 => 1,\n        3 => 1,\n        5 => 1,\n        7 => 1,\n  \
    \      B => 1,\n        D => 1,\n    );\n    return scalar grep { $hash{$_} }\
    \ split '', $num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if ($num eq \"\");\n    my $result = 0;\n    while ($num =~ m/(0x?)(.*)/)\
    \ {\n        my($f, $r) = ($1, $2);\n        $result += $r =~ tr/2BDE//;\n   \
    \     $num = $f;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $sum\
    \ = 0;\n    foreach (split //, $num) {\n        $sum++ if ($_ =~ /[023578BD]/);\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = qw(2 3 5 7 B D);\n    foreach my $char (split(//, $num))\
    \ {\n        foreach my $prime (@primes) {\n            if ($char eq $prime) {\n\
    \                $count++;\n            }\n        }\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %hex_primes = (\n        \"2\" => 1,\n        \"3\" => 1,\n   \
    \     \"5\" => 1,\n        \"7\" => 1,\n        \"B\" => 1,\n        \"D\" =>\
    \ 1,\n    );\n    for my $digit (split(\"\", $num)) {\n        if (defined $hex_primes{$digit})\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %prime\
    \ = map {$_ => 1} qw(2 3 5 7 B D);\n    my $count = 0;\n    $count++ while $num\
    \ =~ /([2-7B-DF])/g;\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    # FILL\
    \ CODE HERE.\n    return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ =~ s/\\D//g;\n    my $count = 0;\n    for my $t (split //, $num) {\n       \
    \ $count += $t =~ /^(2|3|5|7|[Bb]|[Dd])$/ ? 1 : 0;\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ =~ s/[^2-7B-D]//g;\n    return length($num);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %hex = (\n        '0' => 0,\n        '1' => 1,\n        '2' =>\
    \ 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' =>\
    \ 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' =>\
    \ 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E'\
    \ => 14,\n        'F' => 15,\n    );\n    # When the number of hexadecimal is\
    \ even, the result will always be 2 or 0,\n    # so it is not necessary to check,\
    \ so we'll look only odd numbers.\n    if(length($num) % 2 == 1) {\n        my\
    \ $max = $num;\n        $max =~ s/[0-9]//g;\n        $max = length($max);\n  \
    \      # However, we need to check only the longest sequence of numbers\n    \
    \    # that is smaller or equal to the half of the number length.\n        if($max\
    \ > length($num) / 2) {\n            $max = length($num) / 2;\n        }\n   \
    \     for(my $i = 0; $i < $max; $i++) {\n            my $val = 0;\n          \
    \  for(my $j = 0; $j < $i + 1; $j++) {\n                $val += $hex{substr($num,$j,1)};\n\
    \                if($j < $i) {\n                    $val *= 16;\n            \
    \    }\n            }\n            # This is the sieve of Eratosthenes, but in\
    \ a very limited range.\n            my $temp = $val;\n            for(my $k =\
    \ 2; $k <= $val; $k++) {\n                if($temp % $k == 0) {\n            \
    \        $count++;\n                    last;\n                }\n           \
    \ }\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ =~ tr/A-F//d;\n    my $sum = 0;\n    my $count = 0;\n    my @nums = split //,\
    \ $num;\n    foreach (@nums) {\n        $sum += $_;\n    }\n    while($sum > 0)\
    \ {\n        if($sum % 2 != 0) {\n            $count++;\n        }\n        $sum\
    \ = $sum / 2;\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num eq '';\n    $num = uc($num);\n    my @digits = split(//, $num);\n\
    \    my $prime_count = 0;\n    foreach my $d (@digits) {\n        if ($d =~ /[2357BD]/)\
    \ {\n            $prime_count++;\n        }\n    }\n    return $prime_count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @prime_list\
    \ = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\");\n    my @num_list = split (//,\
    \ $num);\n    my $prime_cnt = 0;\n    for my $i (@num_list) {\n        $prime_cnt++\
    \ if (grep {$_ eq $i} @prime_list);\n    }\n    return $prime_cnt;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    # Fill\
    \ in the function\n    my $count=0;\n    my @array=split(\"\", $num);\n    foreach\
    \ my $num(@array){\n        if($num=~/[2,3,5,7,B,D]/i){\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if not $num;\n    my $hex = {\n        '0' => 0,\n        '1' => 1,\n    \
    \    '2' => 2,\n        '3' => 3,\n        '4' => 4,\n        '5' => 5,\n    \
    \    '6' => 6,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n    \
    \    'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15,\n    };\n    my @nums = split //, $num;\n\
    \    my $cnt = 0;\n    for my $digit (@nums) {\n        $cnt++ if grep { $_ ==\
    \ $hex->{$digit} } (2, 3, 5, 7, 11, 13);\n    }\n    return $cnt;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num eq '';\n    my @digits = $num =~ /\\w/g;\n    my $len = scalar @digits;\n\
    \    my @primes = qw( 2 3 5 7 B D );\n    my $key = 0;\n    foreach my $digit\
    \ (@digits) {\n        if (grep /^$digit$/, @primes) {\n            $key++;\n\
    \        }\n    }\n    return $key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = (2, 3, 5, 7, 11, 13);\n    my $hex = qr/[0-9A-F]/;\n    my @chars = split(//,\
    \ $num);\n    my $result = 0;\n    for my $char (@chars) {\n        if ($char\
    \ =~ /$hex/) {\n            for my $prime (@primes) {\n                if ($char\
    \ =~ /$prime/) {\n                    $result += 1;\n                }\n     \
    \       }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num eq '';\n    my @hex = qw( 0 1 2 3 4 5 6 7 8 9 A B C D E F );\n   \
    \ my @dec = map{ hex } @hex;\n    my %hex = map{ $hex[$_] => $dec[$_] } 0..$#hex;\n\
    \    my @hex_num = split(//, $num);\n    my @dec_num = map{ $hex{$_} } @hex_num;\n\
    \    my $count = 0;\n    for my $dec_num (@dec_num) {\n        $count++ if is_prime($dec_num);\n\
    \    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmpvt5h4ghh.pl line
    32.

    '
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @spli=split(//,$num);\n\
    \    my $counter = 0;\n    foreach my $ele (@spli){\n        if($ele eq '2' ||\
    \ $ele eq '3' || $ele eq '5' || $ele eq '7' || $ele eq 'B' || $ele eq 'D'){\n\
    \            $counter++;\n        }\n    }\n    return $counter;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $total\
    \ = 0;\n    my %hex_primes = map { ($_ => 1) } (2, 3, 5, 7, 11, 13);\n    foreach\
    \ my $char (split //, $num) {\n        if ($hex_primes{hex($char)}) {\n      \
    \      $total++;\n        }\n    }\n    return $total;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %prime_hex = (\n        2 => 0,\n        3 => 0,\n        5 =>\
    \ 0,\n        7 => 0,\n        11 => 0,\n        13 => 0,\n    );\n    foreach\
    \ my $digit (split('', $num)) {\n        if (exists $prime_hex{hex($digit)}) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @digits = split(//, $num);\n    my @primes = (2, 3, 5, 7, 11, 13);\n\
    \    my %hex = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n  \
    \      '3' => 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n  \
    \      '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n \
    \       'B' => 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n\
    \        'F' => 15,\n    );\n    foreach my $d (@digits) {\n        if (grep(/$hex{$d}/,\
    \ @primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n  \
    \      if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ =~ s/^[+-]//;\n    my $result = 0;\n    my @digits = split //, $num;\n    my\
    \ @primes = qw (2 3 5 7 B D);\n    for my $digit (@digits) {\n        for my $prime\
    \ (@primes) {\n            if ($digit eq $prime) {\n                $result++;\n\
    \            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @digits\
    \ = (\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\");\n    my $count = 0;\n    foreach my $dig (@digits) {\n\
    \        if ($num =~ /$dig/){\n            $count += 1;\n        }\n    }\n  \
    \  return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %key\
    \ = (\n        \"A\" => 11,\n        \"B\" => 12,\n        \"C\" => 13,\n    \
    \    \"D\" => 14,\n        \"E\" => 15,\n        \"F\" => 16,\n    );\n    my\
    \ @arr = split(\"\",$num);\n    my $count = 0;\n    foreach my $i (@arr) {\n \
    \       if (exists $key{$i}) {\n            $i = $key{$i};\n        }\n      \
    \  if ($i == 2 || $i == 3 || $i == 5 || $i == 7 || $i == 11 || $i == 13) {\n \
    \           $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my @digits = split(\"\",$num);\n    my %map = map {\
    \ $_ => 1 } @primes;\n    my $count = 0;\n    for my $dig (@digits) {\n      \
    \  $count++ if $map{$dig};\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $cnt;\n\
    \    foreach my $char (split //, $num) {\n        if ($char ~~ ['2', '3', '5',\
    \ '7', 'B', 'D']) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: 'Smartmatch is experimental at /tmp/tmp33jffjmt.pl line 26.

    '
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $result\
    \ = 0;\n    foreach my $digit (split //, $num) {\n        my $decimal = hex($digit);\n\
    \        my $is_prime = 1;\n        for (my $i = 2; $i < $decimal; $i++) {\n \
    \           if ($decimal % $i == 0) {\n                $is_prime = 0;\n      \
    \          last;\n            }\n        }\n        $result += $is_prime;\n  \
    \  }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @nums\
    \ = split(//, $num);\n    my $n = 0;\n    for(@nums) {\n        if($_ == '0' ||\
    \ $_ == '1' || $_ == '3' || $_ == '5' || $_ == '7' ||\n           $_ == '9' ||\
    \ $_ == 'B' || $_ == 'D' || $_ == 'F') {\n           $n++;\n        }\n    }\n\
    \    return $n;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $cnt\
    \ = 0;\n    my %primes = map { $_ => 1 } (2, 3, 5, 7, 11, 13);\n    return 0 unless\
    \ $num;\n    for my $h (split //, $num) {\n        $cnt++ if ($primes{hex($h)});\n\
    \    }\n    return $cnt;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ -1 if($num eq '');\n    my $res = () = $num =~ /[2-7BD]/g;\n    return $res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my @num_array = split //, $num;\n    my $count = 0;\n\
    \    for (@num_array) {\n        if (grep {$_ eq $_} @primes) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = ('2' => 1, '3' => 1, '5' => 1, '7' => 1, 'B' => 1, 'D'\
    \ => 1);\n    for (my $i = 0; $i < length($num); $i++) {\n        if ($primes{substr($num,\
    \ $i, 1)}) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n  \
    \      if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if(!$num);\n    my %hex_primes = (\n        '2' => 1,\n        '3' => 1,\n\
    \        '5' => 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n\
    \    );\n    my $n_hex_primes = 0;\n    foreach my $digit (split //, $num) {\n\
    \        $n_hex_primes++ if(exists $hex_primes{$digit});\n    }\n    return $n_hex_primes;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    my %hexnum = (\n        '0'\
    \ => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n        '4'\
    \ => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n        '8'\
    \ => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n        'C'\
    \ => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n    );\n\
    \    foreach my $char (split //, $num) {\n        foreach my $p (@primes) {\n\
    \            if ($hexnum{$char} == $p) {\n                $count++;\n        \
    \    }\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = ('2','3','5','7','B','D');\n    my $count = 0;\n    for my $p (@primes) {\n\
    \        if ( $num =~ /$p/ ) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015058
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $dec\
    \ = hex $num;\n    my $result = 0;\n    my $i = 0;\n    while ($i < length $num)\
    \ {\n        my $dec_digit = substr($dec, $i, 1);\n        if (is_prime($dec_digit))\
    \ {\n            $result += 1;\n        }\n        $i += 1;\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"\
    ),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmpzkrrfgob.pl line
    29.

    '
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $key\
    \ = 0;\n    my @digits = split //, $num;\n    my %primes = (\n        '2' => 1,\n\
    \        '3' => 1,\n        '5' => 1,\n        '7' => 1,\n        'B' => 1,\n\
    \        'D' => 1,\n    );\n    foreach my $digit (@digits) {\n        if( exists($primes{$digit})\
    \ ) {\n            $key++;\n        }\n    }\n    return $key;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = qw(2 1 3 1 5 1 7 1 B 1 D 1);\n    for my $c (split //,\
    \ uc $num) {\n        $count++ if $primes{$c};\n    }\n    return $count;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n  \
    \      if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $result\
    \ = 0;\n    my @numbers = split //, $num;\n    foreach my $n (@numbers) {\n  \
    \      if ($n =~ /[2|3|5|7|B|D]/) {\n            $result++;\n        }\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $ans\
    \ = 0;\n    my @prime = qw(B D);\n    my %primes = map { $_ => 1 } @prime;\n \
    \   my $hex_num = oct(\"0x$num\");\n    my @digits = reverse split //, $hex_num;\n\
    \    for (@digits) {\n        $ans++ if exists $primes{$_};\n    }\n    return\
    \ $ans;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %primes = map { $_ => 1 } (2, 3, 5, 7, 11, 13);\n    foreach my\
    \ $i (split //, $num) {\n        $count++ if exists $primes{hex($i)};\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @arr\
    \ = split '', $num;\n    my $count = 0;\n    foreach (@arr) {\n        if ($_\
    \ eq '2' || $_ eq '3' || $_ eq '5' || $_ eq '7' || $_ eq 'B' || $_ eq 'D') {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @primes\
    \ = qw(2 3 5 7 B D);\n    my @char = split(//, $num);\n    my $ret = 0;\n    for\
    \ my $char (@char) {\n        for my $prime (@primes) {\n            if ($char\
    \ eq $prime) {\n                $ret++;\n            }\n        }\n    }\n   \
    \ return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @num\
    \ = split //, $num;\n    my @prime = qw/2 3 5 7 B D/;\n    my %num = map { $_\
    \ => 1 } @num;\n    return scalar( grep { exists $num{$_} } @prime );\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015058
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = split(//, $num);\n    foreach my $value (@hex) {\n     \
    \   if ($value =~ /(2|3|5|7|B|D)/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nsay \"hex_key(\\\"AB\\\") = \", hex_key(\"AB\");\nsay\
    \ \"hex_key(\\\"1077E\\\") = \", hex_key(\"1077E\");\nsay \"hex_key(\\\"ABED1A33\\\
    \") = \", hex_key(\"ABED1A33\");\nsay \"hex_key(\\\"123456789ABCDEF0\\\") = \"\
    , hex_key(\"123456789ABCDEF0\");\nsay \"hex_key(\\\"2020\\\") = \", hex_key(\"\
    2020\");\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "String found where operator expected at /tmp/tmpnqdfk8fh.pl line 33, near\
    \ \"say \"hex_key(\\\"AB\\\") = \"\"\n\t(Do you need to predeclare say?)\nString\
    \ found where operator expected at /tmp/tmpnqdfk8fh.pl line 34, near \"say \"\
    hex_key(\\\"1077E\\\") = \"\"\n\t(Do you need to predeclare say?)\nString found\
    \ where operator expected at /tmp/tmpnqdfk8fh.pl line 35, near \"say \"hex_key(\\\
    \"ABED1A33\\\") = \"\"\n\t(Do you need to predeclare say?)\nString found where\
    \ operator expected at /tmp/tmpnqdfk8fh.pl line 36, near \"say \"hex_key(\\\"\
    123456789ABCDEF0\\\") = \"\"\n\t(Do you need to predeclare say?)\nString found\
    \ where operator expected at /tmp/tmpnqdfk8fh.pl line 37, near \"say \"hex_key(\\\
    \"2020\\\") = \"\"\n\t(Do you need to predeclare say?)\nsyntax error at /tmp/tmpnqdfk8fh.pl\
    \ line 33, near \"say \"hex_key(\\\"AB\\\") = \"\"\nBEGIN not safe after errors--compilation\
    \ aborted at /tmp/tmpnqdfk8fh.pl line 38.\n"
  stdout: ''
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @nums\
    \ = grep {hex($_) ~~ (2,3,5,7,11,13)} split //, uc $num;\n    return scalar @nums;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Smartmatch is experimental at /tmp/tmprzcao39o.pl line 24.

    '
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    foreach my $digit (split //,\
    \ $num) {\n        my $digit_val = hex($digit);\n        $count++ if grep {$_\
    \ == $digit_val} @primes;\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex_primes\
    \ = qw(2 3 5 7 B D);\n    my @hex_digits = split //, $num;\n    my $cnt = 0;\n\
    \    foreach my $hex_digit (@hex_digits) {\n\t$cnt++ if grep {$_ eq $hex_digit}\
    \ @hex_primes;\n    }\n    return $cnt;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex\
    \ = split //, uc $num;\n    my $count = 0;\n    foreach (@hex) {\n        $count++\
    \ if /[2357BD]/;\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my @hex = ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F');\n\
    \    my %hex = map { $hex[$_] => 1 } 0..$#hex;\n    foreach my $i (0..length($num)-1)\
    \ {\n        $count++ if defined $hex{substr($num,$i,1)};\n    }\n    return $count;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %digits;\n\
    \    @digits{0 .. 9, 'A' .. 'F'} = (0 .. 15);\n    my $count = 0;\n    foreach\
    \ my $char (split //, $num) {\n        my $dec = $digits{$char};\n        next\
    \ if $dec == 1;\n        $count++ if (($dec == 2) || ($dec == 3) || ($dec == 5)\
    \ || ($dec == 7) ||\n                     ($dec == 11) || ($dec == 13));\n   \
    \ }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @digit_as_array\
    \ = split //, $num;\n    my $count = 0;\n    my %hash = (\n        '2' => '0',\n\
    \        '3' => '0',\n        '5' => '0',\n        '7' => '0',\n        'B' =>\
    \ '0',\n        'D' => '0',\n    );\n    my @prime_numbers = keys %hash;\n   \
    \ for my $digit(@digit_as_array) {\n        for my $prime(@prime_numbers) {\n\
    \            if ($digit eq $prime) {\n                $count++;\n            }\n\
    \        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ =~ s/[^2-7B-DF]//g;\n    $num =~ s/[2357BDF]//g;\n    length($num);\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if $num eq '';\n    my $count = 0;\n    my @chars = split //, $num;\n    for\
    \ (@chars) {\n        #$count++ if $prime_numbers{$_};\n        $count++ if $_\
    \ eq '2' || $_ eq '3' || $_ eq '5' || $_ eq '7' ||\n                    $_ eq\
    \ 'B' || $_ eq 'D';\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ =~ tr/0-9ABCDEF//cd;\n    my $n = 0;\n    while ($num =~ /(.)/g) {\n       \
    \ my $c = $1;\n        if ($c eq '2' || $c eq '3' || $c eq '5' || $c eq '7' ||\
    \ $c eq 'B' || $c eq 'D') {\n            $n++;\n        }\n    }\n    return $n;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $tmp\
    \ = 0;\n    my @numarr = split(//, $num);\n    my $len = scalar @numarr;\n   \
    \ my @number = map{ \n                if($_ =~ /A|B|C|D|E|F/){\n             \
    \       $tmp = ord($_) - 55;\n                }\n                else{\n     \
    \               $tmp = $_;\n                }\n                push(@numarr, $tmp);\
    \ \n            }@numarr;\n    my $res = 0;\n    my $i = 0;\n    my $flag = 0;\n\
    \    my @primelist = (2, 3, 5, 7, 11, 13);\n    foreach $i (@numarr){\n      \
    \  foreach $flag (@primelist){\n            if($i == $flag){\n               \
    \ $res++;\n            }\n        }\n    }\n    return $res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    foreach (split(//,$num)) {\n        if ($_ eq \"2\" || $_ eq \"3\"\
    \ || $_ eq \"5\" || $_ eq \"7\" || $_ eq \"B\" || $_ eq \"D\") {\n           \
    \ $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @numbers\
    \ = split(//, $num);\n    my @primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"\
    D\");\n    my $is_prime;\n    my $prime_number = 0;\n    foreach my $number (@numbers)\
    \ {\n        foreach my $prime (@primes) {\n            if ($number eq $prime)\
    \ {\n                $is_prime = 1;\n                last;\n            }\n  \
    \      }\n        if ($is_prime) {\n            $prime_number += 1;\n        \
    \    $is_prime = 0;\n        }\n    }\n    return $prime_number;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %map = ('0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4,\n   \
    \     '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9,\n        'A' => 10, 'B'\
    \ => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15);\n    for (my $i = 0; $i\
    \ < length($num); $i++) {\n        my $c = substr($num, $i, 1);\n        my $d\
    \ = $map{$c};\n        if ($d >= 2 && $d <= 13 && is_prime($d)) {\n          \
    \  $count++;\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmp1ulq9_oe.pl line
    31.

    '
  stdout: ''
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hextable\
    \ = ('0'..'9', 'A'..'F');\n    my $result = 0;\n    my %is_prime = (2 => 1, 3\
    \ => 1, 5 => 1, 7 => 1, 11 => 1, 13 => 1);\n    foreach my $i (split //, $num)\
    \ {\n        $result++ if $is_prime{$i};\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $counter\
    \ = 0;\n    my %hash = (2 => 1,3 => 1,5 => 1,7 => 1,B => 1,D => 1);\n    my @split\
    \ = split(//, $num);\n    foreach my $digit (@split) {\n        $counter += $hash{$digit};\n\
    \    }\n    return $counter;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @list\
    \ = qw(2 3 5 7 B D);\n    my $cnt = 0;\n    if (length($num) != 0) {\n       \
    \ for my $c (split(//,$num)) {\n            $cnt++ if grep /^$c$/, @list;\n  \
    \      }\n    }\n    return $cnt;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    # your\
    \ code goes here\n    my $count = 0;\n    my @nums = split(//, $num);\n    foreach\
    \ my $n (@nums) {\n        if (is_prime($n)) {\n            $count++;\n      \
    \  }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmpoi5qnl7z.pl line
    28.

    '
  stdout: ''
  timestamp: 1660015058
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $result\
    \ = 0;\n    my @nums = split //, $num;\n    for my $n (@nums) {\n        $result++\
    \ if is_prime($n);\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmpvjlzpxvm.pl line
    27.

    '
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    return\
    \ 0 if(! $num);\n    my %hex_table = (\n        '2' => 1,\n        '3' => 1,\n\
    \        '5' => 1,\n        '7' => 1,\n        'B' => 1,\n        'D' => 1,\n\
    \    );\n    my $result = 0;\n    foreach my $i (split(//,$num)) {\n        $result\
    \ += $hex_table{$i} ? 1 : 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $sum\
    \ = 0;\n    my @primes = (2, 3, 5, 7, 11, 13);\n    for my $c (split //, $num)\
    \ {\n        my $digit = hex($c);\n        if (grep {$_ == $digit} @primes) {\n\
    \            $sum++;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $ct\
    \ = 0;\n    my @hex = ('2','3','5','7','B','D');\n    my @num = split(//,$num);\n\
    \    foreach my $n (@num) {\n        if(grep { $_ eq $n } @hex){\n           \
    \ $ct += 1;\n        }\n    }\n    return $ct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @hex\
    \ = ('0'..'9', 'A'..'F');\n    my @primes = ('2','3','5','7','B','D');\n    my\
    \ $hex_key = 0;\n    foreach my $h (split //, $num) {\n        if (grep {$_ eq\
    \ $h} @primes) {\n            $hex_key++;\n        }\n    }\n    return $hex_key;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 255
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %hexes = (\n        A => 11,\n        B => 12,\n        C => 13,\n\
    \        D => 14,\n        E => 15,\n        F => 16,\n    );\n    foreach my\
    \ $digit (split //, $num) {\n        if ($digit =~ /[A-F]/) {\n            $digit\
    \ = $hexes{$digit};\n        }\n        $count++ if is_prime($digit);\n    }\n\
    \    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_prime called at /tmp/tmp4f0qrz5v.pl line
    37.

    '
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    $num\
    \ = uc($num);\n    my $cnt = 0;\n    for my $a (split //, $num) {\n        $cnt++\
    \ if $a =~ /[2357BD]/;\n    }\n    return $cnt;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $re\
    \ = qr/[ABD]/;\n    my @m = $num =~ /$re/g;\n    return scalar @m;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my @digits\
    \ = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A'..'F');\n    my @primes = (2, 3, 5, 7, 11,\
    \ 13);\n    my $count = 0;\n    for my $char (split //, $num) {\n        for my\
    \ $digit (@digits) {\n            if ($char eq $digit) {\n                for\
    \ my $prime (@primes) {\n                    if ($char eq $prime) {\n        \
    \                $count++;\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my %primes\
    \ = (\n        2 => 1, 3 => 1, 5 => 1, 7 => 1, 11 => 1, 13 => 1,\n    );\n   \
    \ my $count = 0;\n    for (split \"\", $num) {\n        $count++ if exists $primes{hex\
    \ $_};\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
- exit_code: 0
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\"\
    )\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n\
    # 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $count\
    \ = 0;\n    my %hex = ( 0=>0, 1=>1, 2=>2, 3=>3, 4=>4, 5=>5, 6=>6, \n         \
    \       7=>7, 8=>8, 9=>9, A=>10, B=>11, C=>12, D=>13, \n                E=>14,\
    \ F=>15 );\n    my @nums = split //, $num;\n    foreach my $n (@nums) {\n    \
    \    $count++ if (2 == $hex{$n} || 3 == $hex{$n} || \n                     5 ==\
    \ $hex{$n} || 7 == $hex{$n} || \n                     11 == $hex{$n} || 13 ==\
    \ $hex{$n});\n    }\n    return $count;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!
  timestamp: 1660015058
