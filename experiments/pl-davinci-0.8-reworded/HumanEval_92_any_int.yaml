name: HumanEval_92_any_int
language: pl
prompt: "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers\
  \ is equal to the sum of the other two, and all numbers are integers.\n# Returns\
  \ false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# 1\n# >>> any_int(3,\
  \ 2, 2)\n# \"\"\n# >>> any_int(3, -2, 1)\n# 1\n# >>> any_int(3.6, -2.2, 2)\n# \"\
  \"\nsub any_int {\n    my($x, $y, $z) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&any_int;\n\
  \        if(eq_deeply($candidate->(2, 3, 1),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2.5, 2, 3),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.5,\
  \ 5, 3.5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->(2, 6, 2),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2, 2),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2.2,\
  \ 2.2, 2.2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(-4, 6, 2),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 1, 1),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
  \ 4, 7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(3.0, 4, 7),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return ($x == $y + $z || $y == $x + $z || $z == $x + $y) && int($x)\
    \ == $x && int($y) == $y && int($z) == $z ? 1 : \"\";\n}", "    return (($x ==\
    \ $y + $z) || ($y == $x + $z) || ($z == $x + $y)) && ($x == int($x)) && ($y ==\
    \ int($y)) && ($z == int($z));\n}", "    # this is the \"default\" return value\n\
    \    # could be changed to 0\n    my $retval = \"\";\n    # compare each of the\
    \ numbers to the sum of the other two\n    # if the comparison passes, and both\
    \ numbers are integer,\n    # return 1\n    if ($x == $y + $z && int($x) == $x\
    \ && int($y) == $y && int($z) == $z) {\n        $retval = 1;\n    }\n    elsif\
    \ ($y == $x + $z && int($x) == $x && int($y) == $y && int($z) == $z) {\n     \
    \   $retval = 1;\n    }\n    elsif ($z == $x + $y && int($x) == $x && int($y)\
    \ == $y && int($z) == $z) {\n        $retval = 1;\n    }\n    return $retval;\n\
    }", "    $x = floor($x);\n    $y = floor($y);\n    $z = floor($z);\n    if (($x\
    \ == $y + $z) || ($y == $x + $z) || ($z == $x + $y)) {\n        return 1;\n  \
    \  }\n    else {\n        return \"\";\n    }\n}", "    return 1 if (($x + $y\
    \ == $z) || ($x + $z == $y) || ($y + $z == $x));\n    return \"\";\n}", "    return\
    \ (( $x == $y + $z || $y == $x + $z || $z == $x + $y ) && ( int($x) == $x && int($y)\
    \ == $y && int($z) == $z ) ? 1 : \"\");\n}", "    return ($x + $y == $z || $x\
    \ + $z == $y || $y + $z == $x) && ($x == int($x) && $y == int($y) && $z == int($z));\n\
    }", "    return unless $x == int($x) && $y == int($y) && $z == int($z);\n    return\
    \ 1 if ($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x);\n    return;\n}",
  "    my @x = ($x, $y, $z);\n    my $max = max_val(@x);\n    my $sum = 0;\n    foreach\
    \ (@x) {\n        if ($_ != $max) {\n            $sum += $_;\n        }\n    }\n\
    \    if ($sum == $max) {\n        return 1;\n    }\n    else {\n        return\
    \ '';\n    }\n}", "    return ($x == $y + $z || $y == $x + $z || $z == $x + $y)\
    \ &&\n        int($x) == $x && int($y) == $y && int($z) == $z;\n}", "    if(($x\
    \ == $y + $z) || ($y == $x + $z) || ($z == $x + $y)){\n        return 1;\n   \
    \ }else{\n        return \"\";\n    }\n}", "    return (($x == $y + $z || $y ==\
    \ $x + $z || $z == $x + $y) && ($x == int($x) && $y == int($y) && $z == int($z)))\
    \ ? \"1\" : \"\";\n}", "    if(($x == $y + $z || $y == $x + $z || $z == $x + $y)\
    \ && ($x % 1 == 0) && ($y % 1 == 0) && ($z % 1 == 0)){\n        print \"1\";\n\
    \    }\n    else{\n        print \"\";\n    }\n}", "    return ( int($x) + int($y)\
    \ == int($z) || int($x) + int($z) == int($y) || int($y) + int($z) == int($x) );\n\
    }", "    return 0 if grep(!defined($_) || $_ !~ /^\\d+$/, ($x, $y, $z));\n   \
    \ return 1 if $x == $y + $z || $y == $x + $z || $z == $x + $y;\n    return 0;\n\
    }", "    return ($x+$y==$z or $x+$z==$y or $y+$z==$x) && $x=~/^\\d+$/ && $y=~/^\\\
    d+$/ && $z=~/^\\d+$/;\n}", "    return ( $x == $y + $z || $y == $x + $z || $z\
    \ == $x + $y ) && ( $x =~ /^\\d+$/ && $y =~ /^\\d+$/ && $z =~ /^\\d+$/ );\n}\n\
    my $a = any_int(3, -2, 1);\nmy $b = any_int(3.6, -2.2, 2);\nmy $c = any_int(5,\
    \ 2, 7);\nmy $d = any_int(3, 2, 2);\nsay $a, $b, $c, $d;", "    if (is_int($x)\
    \ && is_int($y) && is_int($z)) {\n        if ($x == $y + $z) {\n            return\
    \ 1;\n        } elsif ($y == $x + $z) {\n            return 1;\n        } elsif\
    \ ($z == $x + $y) {\n            return 1;\n        } else {\n            return\
    \ \"\";\n        }\n    } else {\n        return \"\";\n    }\n}", "    my $s\
    \ = $x + $y;\n    return ( is_int($s) && is_int($z) && ($s == $z || $s == $x ||\
    \ $s == $y) );\n}", "    if ($x != $y + $z && $y != $x + $z && $z != $x + $y)\
    \ {\n        return \"\";\n    } elsif ($x == int($x) && $y == int($y) && $z ==\
    \ int($z)) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
