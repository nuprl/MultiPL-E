name: HumanEval_67_fruit_distribution
language: pl
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\n# >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n# 8\n\
  # >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution(\"\
  2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution(\"100 apples and\
  \ 1 oranges\", 120)\n# 19\nsub fruit_distribution {\n    my($s, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fruit_distribution;\n\
  \        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 19),8)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  5 apples and 6 oranges\", 21),10)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"0 apples and 1 oranges\", 3),2))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1 apples and 0 oranges\", 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 100),95))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  2 apples and 3 oranges\", 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"1 apples and 100 oranges\", 120),19))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $n - ( split(/ and /, $s) )[0] - ( split(/ and /, $s) )[1];\n\
    }", "    my($a, $o) = split /\\s/, $s;\n    return $n - $a - $o;\n}", "    $s\
    \ =~ /([\\d]+) apples and ([\\d]+) oranges/;\n    return $n - $1 - $2;\n}", " \
    \   $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return $n - $1 - $2;\n}", " \
    \   my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    my $t = $a + $o;\n\
    \    return $n - $t;\n}", "    $s =~ /(\\d+)\\s+apples\\s+and\\s+(\\d+)\\s+oranges/;\n\
    \    return $n - $1 - $2;\n}", "    my $mango = $n;\n    my @apple_or_orange =\
    \ $s =~ /(\\d+)/g;\n    $mango -= $_ for @apple_or_orange;\n    return $mango;\n\
    }", "    my($x, $y) = split(\" \", $s =~ /(\\d+) (\\w+)/);\n    $n - $x - $y;\n\
    }", "    my ($a, $o) = split / (?:apples|oranges) and /, $s;\n    return $n -\
    \ $a - $o;\n}", "    $s =~ /(\\d+)\\s+(\\w+)\\s+and\\s+(\\d+)\\s+(\\w+)/;\n  \
    \  return $n - $1 - $3;\n}", "    if($s =~ /(\\d+)\\s+apples/){\n        my $a\
    \ = $1;\n        if($s =~ /(\\d+)\\s+oranges/){\n            my $o = $1;\n   \
    \         return $n-($a+$o);\n        }\n    }\n}", "    my($a, $o) = split /\
    \ /, $s;\n    $a =~ s/[a-z]//g;\n    $o =~ s/[a-z]//g;\n    return $n - $a - $o;\n\
    }", "    return $n - (() = $s =~ /\\d+/g);\n}", "    my ($a, $o) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    return $n - $a - $o;\n}\nuse Test::More;\n\
    is fruit_distribution(\"5 apples and 6 oranges\", 19), 8, '5 apples and 6 oranges';\n\
    is fruit_distribution(\"0 apples and 1 oranges\", 3), 2, '0 apples and 1 oranges';\n\
    is fruit_distribution(\"2 apples and 3 oranges\", 100), 95, '2 apples and 3 oranges';\n\
    is fruit_distribution(\"100 apples and 1 oranges\", 120), 19, '100 apples and\
    \ 1 oranges';\ndone_testing;", "    my($apples, $oranges) = $s =~ /(\\d+) apples\
    \ and (\\d+) oranges/;\n    $n - $apples - $oranges;\n}", "    my($a, $o) = $s\
    \ =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my @str\
    \ = split(/\\sand\\s/, $s);\n    $str[0] =~ s/\\D//g;\n    $str[1] =~ s/\\D//g;\n\
    \    my $m = $n - $str[0] - $str[1];\n    return $m;\n}", "    my ($a, $o) = $s\
    \ =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my ($a,\
    \ $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "  \
    \  if ($s =~ /([0-9]+) apples and ([0-9]+) oranges/) {\n        return $n - $1\
    \ - $2;\n    }\n}", "    my($apples, $oranges) = $s =~ /(\\d+) apples and (\\\
    d+) oranges/;\n    return $n - $apples - $oranges;\n}", "    my($apples, $oranges)\
    \ = ($s =~ /(\\d+) apples and (\\d+) oranges/);\n    $n - $apples - $oranges;\n\
    }", "    my $sum = 0;\n    my @arr = split(/ /, $s);\n    $sum += $arr[0];\n \
    \   $sum += $arr[2];\n    return $n - $sum;\n}", "    my($a, $o) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    return $n - $a - $o;\n}", "    $s =~ s/\\\
    s+and\\s+/:/;\n    $s =~ s/\\s+/:/g;\n    my @total = split /:/, $s;\n    my $total\
    \ = $total[0] + $total[1];\n    return $n - $total;\n}", "    my $total = 0;\n\
    \    $s =~ /(\\d+)\\s+(\\w+)\\s+and\\s+(\\d+)\\s+(\\w+)/;\n    if ($2 eq \"apples\"\
    ) {\n        $total = $1 + $3;\n    } else {\n        $total = $1 + $3;\n    }\n\
    \    $n - $total;\n}", "    my($aa, $oa, $nf) = ($s =~ /(\\d+) apples and (\\\
    d+) oranges/);\n    $n - $aa - $oa;\n}", "    my($a, $o) = ($s =~ /^(\\d+) apples\
    \ and (\\d+) oranges$/);\n    return $n - $a - $o;\n}", "    my $pat = '([0-9]+)\
    \ apples and ([0-9]+) oranges';\n    my ($a, $o) = $s =~ /$pat/;\n    my $t =\
    \ $a + $o;\n    $n - $t;\n}", "    my ($a, $o) = $s =~ /(\\d+) apples and (\\\
    d+) oranges/;\n    $n - $a - $o;\n}", "    $s =~ s/(?:$&)//;\n    my $m = 0;\n\
    \    $m = (split(/ /, $s))[0];\n    return $n - $m;\n}", "    my @dist = split(/\
    \ and /, $s);\n    my $sum = 0;\n    foreach my $x (@dist) {\n        $sum +=\
    \ int(substr($x, 0, index($x, ' ')));\n    }\n    return $n - $sum;\n}", "   \
    \ my($apple, $orange) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $apple\
    \ - $orange;\n}", "    my @s = split / and | /, $s;\n    my $a = $s[0];\n    my\
    \ $o = $s[2];\n    my $m = $n - $a - $o;\n    return $m;\n}", "    my($oranges,\
    \ $apples);\n    if ($s =~ /^\\s*(\\d+)\\s+oranges\\s+and\\s+(\\d+)\\s+apples\\\
    s*$/) {\n        ($oranges, $apples) = ($1, $2);\n    } else {\n        die \"\
    Bad fruit distribution string: $s\";\n    }\n    $n - $oranges - $apples;\n}",
  "    my $apple = 0;\n    my $orange = 0;\n    if($s =~ /(\\d+)\\s+apples\\s+and\\\
    s+(\\d+)\\s+oranges/){\n        $apple = $1;\n        $orange = $2;\n    }\n \
    \   return $n - $apple - $orange;\n}", "    my @array = split / and | /, $s;\n\
    \    return $n - ($array[0] + $array[2]);\n}", "    my($str) = $s;\n    $str =~\
    \ s/[^\\d]//g;\n    return $n - $str;\n}", "    my @arr = split(/\\sand\\s/, $s);\n\
    \    my $fruits = 0;\n    for(my $i = 0; $i < @arr; $i++) {\n        if($arr[$i]\
    \ =~ /(\\d+)\\s(\\w+)/) {\n            $fruits += $1;\n        }\n    }\n    return\
    \ $n - $fruits;\n}", "    my @fruits = split(/\\s/, $s);\n    return ($n - $fruits[0]\
    \ - $fruits[3]);\n}", "    my($a, $o) = ($s =~ /(\\d+) apples and (\\d+) oranges/);\n\
    \    return $n - $a - $o;\n}", "    my $num_apples = $s =~ /(\\d+) apples/;\n\
    \    my $num_oranges = $s =~ /(\\d+) oranges/;\n    $n - $num_apples - $num_oranges;\n\
    }", "    my($a, $o) = split / and /, $s;\n    $a =~ s/\\D+//g;\n    $o =~ s/\\\
    D+//g;\n    return $n - $a - $o;\n}", "    my @list = $s =~ /(\\d+)/g;\n    return\
    \ $n - ($list[0] + $list[1]);\n}", "    my @a = split / /, $s;\n    return $n\
    \ - @a[0] - @a[3];\n}", "    my $subtract;\n    if ($s =~ /(\\d+) apples and (\\\
    d+) oranges/) {\n        $subtract = $1 + $2;\n    }\n    return $n - $subtract;\n\
    }", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return $n\
    \ - $a - $o;\n}", "    my ($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    $n - $a - $o;\n}", "    my $sum = 0;\n    my $i;\n    my @words = split(/\
    \ /, $s);\n    if($words[1] eq \"apples\") {\n        $sum += $words[0];\n   \
    \     $i = $words[0];\n    } else {\n        $sum += $words[2];\n        $i =\
    \ $words[2];\n    }\n    $n -= $sum;\n    return $n - $i;\n}", "    # your code\
    \ here...\n    my @fruits = split / /, $s;\n    my $sum = 0;\n    $sum += $fruits[0]\
    \ if $fruits[0] =~ /^\\d+$/;\n    $sum += $fruits[2] if $fruits[2] =~ /^\\d+$/;\n\
    \    return $n - $sum;\n}", "    # your code here\n}", "    my($a, $o) = $s =~\
    \ /^(\\d+) apples and (\\d+) oranges$/;\n    $n - $a - $o;\n}", "    my($apples,\
    \ $oranges) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $apples - $oranges;\n\
    }", "    my $m = $n;\n    if ($s =~ /(\\d+) apples and (\\d+) oranges/) {\n  \
    \      $m -= $1 + $2;\n    }\n    return $m;\n}", "    my $mangoes = 0;\n    $s\
    \ =~ s/[^0-9]//g;\n    my ($apples, $oranges) = split(\"\", $s);\n    $mangoes\
    \ = $n - $apples - $oranges;\n    return $mangoes;\n}", "    my $sum = 0;\n  \
    \  if ($s =~ /([0-9]+) apples and ([0-9]+) oranges/) {\n        $sum = $1 + $2;\n\
    \    }\n    return $n - $sum;\n}", "    my $pattern = qr/^(\\d+) apples and (\\\
    d+) oranges$/;\n    if($s =~ $pattern){\n        return $n - $1 - $2;\n    }\n\
    \    return -1;\n}", "    my @s = split / and /, $s;\n    my $a = $s[0];\n   \
    \ my $o = $s[1];\n    $a =~ s/\\D+//g;\n    $o =~ s/\\D+//g;\n    return $n -\
    \ $a - $o;\n}", "    my $sum;\n    my $x;\n    if ($s =~ /^\\d+\\s+apples\\s+and\\\
    s+\\d+\\s+oranges/) {\n        ($x, $sum) = split /\\s+and\\s+/, $s;\n       \
    \ $sum += $x;\n    }\n    return $n - $sum;\n}", "    if($s=~/(\\d+)\\s+apples/\
    \ and $s=~/(\\d+)\\s+oranges/){\n        return $n - $1 - $2;\n    }\n}", "  \
    \  my($a, $o) = split /\\s+/, $s;\n    return $n - $a - $o;\n}", "    my @arr\
    \ = split /\\s+and\\s+/, $s;\n    my $f1 = $arr[0];\n    my $f2 = $arr[1];\n \
    \   my $f1_num = substr($f1, 0, length($f1) - 6);\n    my $f2_num = substr($f2,\
    \ 0, length($f2) - 7);\n    $n - $f1_num - $f2_num;\n}", "    my ($apples, $oranges)\
    \ = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $apples - $oranges;\n}",
  "    # Your code here\n}", "    my($na, $no) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    return $n - $na - $no;\n}", "    $s =~ s/ apples//;\n    $s =~ s/ oranges//;\n\
    \    my($apple, $orange) = split \" and \", $s;\n    return $n - $apple - $orange;\n\
    }", "    my($aa, $oo, $mm);\n    if($s =~ /(\\d+) apples and (\\d+) oranges/){\n\
    \        $aa = $1;\n        $oo = $2;\n    }\n    $mm = $n - $aa - $oo;\n    return\
    \ $mm;\n}", "    my @fruits = split(/\\s+/, $s);\n    $fruits[0] + $fruits[4]\
    \ == $n ? $n - @fruits : $n - @fruits + 1;\n}", "    my $apples = ($s =~ /(\\\
    d+)/)[0];\n    my $oranges = ($s =~ /(\\d+)/)[1];\n    return $n - $apples - $oranges;\n\
    }", "    my ($apple, $orange) = split ' ', $s;\n    my $mango = $n - $apple -\
    \ $orange;\n    return $mango;\n}", "    my $d = $n;\n    $s =~ s/\\D+//g;\n \
    \   for (split \"\", $s) {\n        $d -= $_;\n    }\n    return $d;\n}", "  \
    \  my $mango = 0;\n    $mango = $n;\n    if ($s =~ /(\\d+) apples and (\\d+) oranges/)\
    \ {\n        $mango -= $1;\n        $mango -= $2;\n    }\n    return $mango;\n\
    }", "    my($a, $o) = $s =~ /\\d+/g;\n    return $n - $a - $o;\n}", "    $s =~\
    \ s/.*(\\d+)\\s+apples and\\s+(\\d+)\\s+oranges.*/$1 $2/;\n    my($x, $y) = split(/\\\
    s+/, $s);\n    $n - $x - $y;\n}", "    my($apples, $oranges) = $s =~ /(\\d+) apples\
    \ and (\\d+) oranges/;\n    return $n - $apples - $oranges;\n}", "    my $t;\n\
    \    if($s =~ /(\\d+) apples and (\\d+) oranges/i) {\n        $t = $1 + $2;\n\
    \    }\n    return $n - $t;\n}", "    my $ans = 0;\n    # your code here\n   \
    \ return $ans;\n}", "    my($a, $o) = $s =~ /(\\d+) apples.*?(\\d+) oranges/;\n\
    \    return $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\\
    d+) oranges/;\n    $n - $a - $o;\n}", "    my($apples, $oranges) = $s =~ /^(\\\
    d+) apples and (\\d+) oranges$/;\n    $n - $apples - $oranges;\n}", "    my ($a,\
    \ $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "  \
    \  $s =~ /(\\d+) .* (\\d+)/;\n    return $n - $1 - $2;\n}", "    # we need to\
    \ save only the ' and ' part, which is the orange part\n    my $m = $s;\n    $m\
    \ =~ s/^\\d* apples and //;\n    # then get the number of apples and oranges\n\
    \    $s =~ /(\\d*)/;\n    my $t = $1;\n    # $n - $t is the total number of apples\
    \ and oranges\n    # return the number of mangoes\n    $n - $t - $m;\n}", "  \
    \  # your code here\n    my @split_s = split(/ /, $s);\n    my $apples = $split_s[0];\n\
    \    my $oranges = $split_s[4];\n    return $n - $apples - $oranges;\n}", "  \
    \  my $m = 0;\n    if($s =~ /(\\d+) apples and (\\d+) oranges/){\n        $m =\
    \ $n - $1 - $2;\n    }\n    return $m;\n}", "    my ($a, $o) = $s =~ /\\d+/g;\n\
    \    return $n - $a - $o;\n}", "    $s =~ s/[a-z\\s]//g;\n    return $n - $s;\n\
    }", "    my ($aa, $ao) = split /\\s*[a-z]*\\s*/, $s;\n    my $sum = $aa + $ao;\n\
    \    return $n - $sum;\n}", "    my($a, $o) = $s =~ /(\\d+) (?:apples|apple) and\
    \ (\\d+) (?:oranges|orange)/;\n    $n - $a - $o;\n}", "    my $mangoes;\n    if\
    \ ($s =~ /(\\d+) apples and (\\d+) oranges/) {\n        $mangoes = $n - $1 - $2;\n\
    \    }\n    return $mangoes;\n}", "    my $a = 0;\n    my $o = 0;\n    if ($s\
    \ =~ /(\\d+) apples and (\\d+) oranges/) {\n        $a = $1;\n        $o = $2;\n\
    \    }\n    return $n - $a - $o;\n}", "    $s =~ /^(\\d+) apples and (\\d+) oranges$/;\n\
    \    return $n - $1 - $2;\n}\nprint fruit_distribution(\"5 apples and 6 oranges\"\
    , 19), \"\\n\";\nprint fruit_distribution(\"0 apples and 1 oranges\", 3), \"\\\
    n\";\nprint fruit_distribution(\"2 apples and 3 oranges\", 100), \"\\n\";\nprint\
    \ fruit_distribution(\"100 apples and 1 oranges\", 120), \"\\n\";\nprint \"\\\
    n\";", "    my $a = $s =~ /^(\\d+) apples/ ? $1 : 0;\n    my $o = $s =~ /(\\d+)\
    \ oranges$/ ? $1 : 0;\n    $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+)\
    \ apples and (\\d+) oranges/;\n    return $n - $a - $o;\n}", "    return $n;\n\
    }", "    my @fruit = split(' ', $s);\n    my $num_fruit = $fruit[0] + $fruit[3];\n\
    \    $n - $num_fruit;\n}", "    my ($a, $o) = $s =~ /(\\d+) apples and (\\d+)\
    \ oranges/;\n    return $n - $a - $o;\n}", "    my $r = join '', $s =~ /\\d+/g;\n\
    \    return 0 if $r == 0;\n    return $n - $r;\n}", "    my ($n1, $n2) = $s =~\
    \ /(\\d+) apples and (\\d+) oranges/;\n    return $n - $n1 - $n2;\n}", "    my\
    \ ($apple, $orange) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return $n\
    \ - $apple - $orange;\n}", "    my($apples, $oranges) = split(/ apples and /,\
    \ $s);\n    return $n - $apples - $oranges;\n}", "    my($a, $o) = ($s =~ /(\\\
    d+) apples and (\\d+) oranges/);\n    return $n - $a - $o;\n}", "    my($a, $o)\
    \ = split(/ and /, $s);\n    $a =~ s/ (apples?)//;\n    $o =~ s/ (oranges?)//;\n\
    \    $n - $a - $o;\n}", "    my $res = 0;\n    my($apples, $oranges) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    $res = $n - $apples - $oranges;\n    return\
    \ $res;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n   \
    \ $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    return $n - $a - $o;\n}", "    my @a = ($s =~ /(\\d+)/g);\n    $n - $a[0]\
    \ - $a[1];\n}", "    die \"not enough fruit ($n < \", fruit_count($s), \")\"\n\
    \      if $n < fruit_count($s);\n    $n - fruit_count($s);\n}", "    my ($apples,\
    \ $oranges) = ($s =~ /(\\d+) apples/), ($s =~ /(\\d+) oranges/);\n    return $n\
    \ - $apples - $oranges;\n}\nfruit_distribution(\"5 apples and 6 oranges\", 19);\n\
    fruit_distribution(\"0 apples and 1 oranges\", 3);\nfruit_distribution(\"2 apples\
    \ and 3 oranges\", 100);\nfruit_distribution(\"100 apples and 1 oranges\", 120);",
  "    my($apples, $oranges) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return\
    \ $n - $apples - $oranges;\n}", "    my ($x, $y) = $s =~ /(\\d+) apples and (\\\
    d+) oranges/;\n    $n - $x - $y;\n}", "    my ($a, $o) = $s =~ /(\\d+) apples\
    \ and (\\d+) oranges/;\n    return $n - $a - $o;\n}", "    my($a, $o) = $s =~\
    \ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my $a = ()\
    \ = $s =~ /(\\d*)\\s*apples/;\n    my $o = () = $s =~ /(\\d*)\\s*oranges/;\n \
    \   return $n - $a - $o;\n}", "    \n    my $apples = ($s =~ s/\\d+ apples//)?$&:0;\n\
    \    my $oranges = ($s =~ s/\\d+ oranges//)?$&:0;\n    \n    return $n - $apples\
    \ - $oranges;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    return $n - $a - $o;\n}", "    my $ret = $n;\n    if ($s =~ /([0-9]+) apples/)\
    \ {\n        $ret -= $1;\n    }\n    if ($s =~ /([0-9]+) oranges/) {\n       \
    \ $ret -= $1;\n    }\n    return $ret;\n}", "    my @s = split /\\s+/, $s;\n \
    \   my $sum = $s[0] + $s[-1];\n    return $n - $sum;\n}", "    my($apples, $oranges)\
    \ = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return $n - $apples - $oranges;\n\
    }\nprint \"Task 25:\\n\";\nprint fruit_distribution(\"5 apples and 6 oranges\"\
    , 19), \"\\n\";\nprint fruit_distribution(\"0 apples and 1 oranges\", 3), \"\\\
    n\";\nprint fruit_distribution(\"2 apples and 3 oranges\", 100), \"\\n\";\nprint\
    \ fruit_distribution(\"100 apples and 1 oranges\", 120), \"\\n\";", "    my $sum\
    \ = 0;\n    my $sum1 = 0;\n    my $sum2 = 0;\n    my $a = 0;\n    my $o = 0;\n\
    \    if ($s =~ m/[a-zA-Z]+/){\n    $sum = $`;\n    $sum1 = $sum =~ tr/0-9//;\n\
    \    $sum2 = $s =~ tr/0-9//;\n    $a = $s =~ tr/a-zA-Z//;\n    $o = $sum2 - $sum1;\n\
    \    my $m = $n - ($sum1 + $a);\n    return $m;\n    }\n}", "    my($a, $o) =\
    \ split(/\\s+/, $s);\n    return $n - $a - $o;\n}", "    my $a = (split(\" apples\
    \ and \", $s))[0];\n    my $o = (split(\" oranges\", (split(\" apples and \",\
    \ $s))[1]))[0];\n    return $n - $a - $o;\n}", "    my $a = () = $s =~ /(?<=\\\
    d) apples/g;\n    my $o = () = $s =~ /(?<=\\d) oranges/g;\n    return $n - $a\
    \ - $o;\n}", "    my @a = map {/\\d+/} $s =~ /(\\d+ apples and \\d+ oranges)/g;\n\
    \    my $a = eval join '+', @a;\n    $n - $a;\n}", "    my ($a, $o) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    return $n - $a - $o;\n}", "    my @s = split(\"\
    \ \", $s);\n    return $n - $s[0] - $s[2];\n}", "    my($aa, $oo) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    $n - $aa - $oo;\n}", "    return $n - ( ()\
    \ = $s =~ /\\d+/g );\n}", "    # your code here\n    my ($a, $o) = ($s =~ /\\\
    d+ apples and \\d+ oranges/);\n    $n - $a - $o;\n}", "    my($a, $o) = $s =~\
    \ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my $apple =\
    \ my $orange = 0;\n    $apple++ while $s =~ /apples/gi;\n    $orange++ while $s\
    \ =~ /oranges/gi;\n    $n - $apple - $orange;\n}", "    my($a, $o) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    return $n - $a - $o;\n}", "    my($a, $o)\
    \ = ($s =~ /(\\d+) apples and (\\d+) oranges/);\n    return $n - $a - $o;\n}",
  "    my @arr = split(' ', $s);\n    my $a = $arr[0];\n    my $o = $arr[2];\n   \
    \ return $n - $a - $o;\n}", "    return 0 if $n == 0;\n    my ($apples, $oranges)\
    \ = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $apples + $oranges > $n ? return\
    \ 0 : return $n - $apples - $oranges;\n}", "    my($n_apples, $n_oranges) = ($s\
    \ =~ /(\\d+) apples and (\\d+) oranges/);\n    return $n - $n_apples - $n_oranges;\n\
    }", "    my $total = 0;\n    my @fruits = split /\\s+/, $s;\n    for (0..$#fruits)\
    \ {\n        if ($fruits[$_] =~ /\\d+/) {\n            $total += $fruits[$_];\n\
    \        }\n    }\n    $n - $total;\n}", "    $s =~ s/[^\\d]//g;\n    $n - $s;\n\
    }", "    $s =~ s/ and /\\n/;\n    my @a = split /\\n/, $s;\n    my $sum = 0;\n\
    \    foreach my $i (@a) {\n        my @b = split / /, $i;\n        $sum += $b[0];\n\
    \    }\n    return $n - $sum;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and\
    \ (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples\
    \ and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    \n    my($a, $o) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    $s =~ /(\\d+)\\s*[a-z]+\\\
    s*[a-z]+\\s*(\\d+)/i;\n    my $a = $1;\n    my $o = $2;\n    my $m = $n - $a -\
    \ $o;\n    return $m;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    $n - $a - $o;\n}", "    my $s = '100 apples and 1 oranges';\n    $s =~ s/[^\\\
    d]//g;\n    $n - $s;\n}", "    $s =~ /(\\d+) apples and (\\d+) oranges/;\n   \
    \ return $n - $1 - $2;\n}", "    my $mango = 0;\n    my $s1 = $s;\n    $s1 =~\
    \ s/\\D//g;\n    $mango = $n - $s1;\n    return $mango;\n}", "    $s =~ /\\d+\
    \ apples and \\d+ oranges/;\n    return $n - ($1 + $2);\n}", "    my @s = split\
    \ \" \", $s;\n    my $sum = $s[0] + $s[4];\n    return $n - $sum;\n}", "    my\
    \ $f = $n;\n    my $m = 0;\n    my @a = split(/ and | /, $s);\n    $m = $a[0]\
    \ if $a[0] =~ /\\d+/;\n    $m = $a[1] if $a[1] =~ /\\d+/;\n    $f = $f - $m;\n\
    \    return $f;\n}", "    my($a, $o) = split(' ', $s);\n    my $sum = $a + $o;\n\
    \    $n - $sum;\n}", "    $s =~ /(\\d+) apples and (\\d+) oranges/;\n    my $t\
    \ = $1 + $2;\n    return $n - $t;\n}", "    my ($a, $o) = $s =~ /(\\d+) apples\
    \ and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my($as, $os) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    return $n - $as - $os;\n}", "    #your code\
    \ here\n}", "    my($a, $o);\n    if($s =~ /^(\\d+) apples and (\\d+) oranges$/)\
    \ {\n        ($a, $o) = ($1, $2);\n    }\n    else {\n        die \"invalid input\
    \ string\\n\";\n    }\n    $n - $a - $o;\n}", "    my $sum;\n    for (split /\\\
    s+/, $s) {\n        $sum += /^\\d+$/ ? $_ : 0;\n    }\n    return $n - $sum;\n\
    }", "    return $n - ( $s =~ tr/a-z// );\n}", "    \n    my ($a, $o) = split \"\
    \ \", $s;\n    return $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples\
    \ and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my $m = 0;\n    my($aa, $oa)\
    \ = split / and | oranges? | apples? /, $s;\n    $m = $n - $aa - $oa;\n    $m;\n\
    }", "    my($fruit1, $fruit2) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n  \
    \  $n - $fruit1 - $fruit2;\n}", "    my($a, $o) = $s =~ /^(\\d+) apples and (\\\
    d+) oranges$/;\n    return $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\d+)\
    \ apples and (\\d+) oranges/;\n    my $t = $a + $o;\n    $n - $t;\n}", "    #\
    \ your code here\n}", "    # find the number of apples, oranges and mango in the\
    \ basket\n    my $a = ($s =~ s/([0-9]+) apples and [0-9]+ oranges/$1/r);\n   \
    \ my $o = ($s =~ s/[0-9]+ apples and ([0-9]+) oranges/$1/r);\n    my $m = $n -\
    \ $a - $o;\n    return $m;\n}", "    return $n;\n}", "    my $aa = $s =~ tr{a}{a};\n\
    \    my $oo = $s =~ tr{o}{o};\n    return $n - $aa - $oo;\n}", "    if($s =~ /(\\\
    d+) (\\w+) and (\\d+) (\\w+)/){\n        my $apples = $1;\n        my $oranges\
    \ = $3;\n        my $total = $apples + $oranges;\n        return $n - $total;\n\
    \    }\n}", "    my($a, $o) = split / apples and /, $s;\n    return $n - $a -\
    \ $o;\n}", "    my($o, $a) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return\
    \ $n - $o - $a;\n}", "    my($orange, $apple) = $s =~ /(\\d+) oranges and (\\\
    d+) apples/;\n    $n - $orange - $apple;\n}", "    my($apples, $oranges);\n  \
    \  if($s =~ /(\\d+) apples and (\\d+) oranges/){\n        $apples = $1;\n    \
    \    $oranges = $2;\n    }\n    return $n - $apples - $oranges;\n}", "    $s =~\
    \ s/\\D/ /g;\n    my @s = split / /, $s;\n    return $n - ($s[0] + $s[1]);\n}",
  "    my($a, $o) = ($s =~ /(\\d+) apples and (\\d+) oranges/);\n    return $n - $a\
    \ - $o;\n}", "    my ($a, $o) = split ' ', $s;\n    $n - $a - $o;\n}", "    my($a,\
    \ $o);\n    ($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a\
    \ - $o;\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n   \
    \ $n - $a - $o;\n}", "    $s =~ /([0-9]+) apples and ([0-9]+) oranges/;\n    my\
    \ $sum = $1 + $2;\n    $n - $sum;\n}", "    my ($a, $o) = ($s =~ /(\\d+) apples\
    \ and (\\d+) oranges/);\n    return $n - $a - $o;\n}", "    my @fruits = split\
    \ / and /, $s;\n    my $sum = 0;\n    for (@fruits) {\n        my ($num, $name)\
    \ = /(\\d+) (\\w+)/;\n        $sum += $num;\n    }\n    return $n - $sum;\n}",
  "    my($apple, $orange, $mango) = split /\\s+/, $s;\n    $mango = $n - $apple -\
    \ $orange;\n    return $mango;\n}", "    return $n - ($s =~ tr/0-9//);\n}", " \
    \   # your code here\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n\
    \    return $n - $a - $o;\n}", "    my ($a, $o) = $s =~ /(\\d+) apples and (\\\
    d+) oranges/;\n    $n - $a - $o;\n}", "    my($a, $o) = ($s =~ /^(\\d+) apples\
    \ and (\\d+) oranges$/);\n    $n - $a - $o;\n}", "    my($a, $o) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my $m = 0;\n    if\
    \ ($s =~ /(\\d+) apples and (\\d+) oranges/) {\n        my $sum = $1 + $2;\n \
    \       if ($sum < $n) {\n            $m = $n - $sum;\n        }\n    }\n    return\
    \ $m;\n}", "    my($a, $o) = split(' ', $s);\n    $a =~ s/\\D//g;\n    $o =~ s/\\\
    D//g;\n    return $n - $a - $o;\n}\nprint fruit_distribution(\"5 apples and 6\
    \ oranges\", 19), \"\\n\";\nprint fruit_distribution(\"0 apples and 1 oranges\"\
    , 3), \"\\n\";\nprint fruit_distribution(\"2 apples and 3 oranges\", 100), \"\\\
    n\";\nprint fruit_distribution(\"100 apples and 1 oranges\", 120), \"\\n\";",
  "    my @s = split / and | /, $s;\n    return $n - $s[0] - $s[2];\n}", "    my @nums\
    \ = map { $_ == int($_) ? $_ : () }\n        map { my $f = eval($_); ($f > 0 ?\
    \ $f : ()) }\n        split /(?<=\\D)\\s*(?=\\d)/, $s;\n    $n - sum(@nums);\n\
    }", "    return $n - ($s =~ tr/0-9//);\n}\nprint fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19), \"\\n\";\nprint fruit_distribution(\"0 apples and 1 oranges\"\
    , 3), \"\\n\";\nprint fruit_distribution(\"2 apples and 3 oranges\", 100), \"\\\
    n\";\nprint fruit_distribution(\"100 apples and 1 oranges\", 120), \"\\n\";",
  "    # ...\n}", "    my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n  \
    \  return $n - $a - $o;\n}", "    my($apples, $oranges) = $s =~ /(\\d+) apples\
    \ and (\\d+) oranges/;\n    $n - $apples - $oranges;\n}", "    my($a, $o) = split\
    \ /\\s*apples and\\s*/, $s;\n    $n - $a - $o;\n}", "    # your code goes here\n\
    \    my($apple, $orange) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return\
    \ $n - $apple - $orange;\n}", "    \n}", "    my($a, $o) = $s =~ /(\\d+) apples\
    \ and (\\d+) oranges/;\n    $n - $a - $o;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
