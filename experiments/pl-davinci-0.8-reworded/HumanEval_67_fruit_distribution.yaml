name: HumanEval_67_fruit_distribution
language: pl
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\n# >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n# 8\n\
  # >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution(\"\
  2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution(\"100 apples and\
  \ 1 oranges\", 120)\n# 19\nsub fruit_distribution {\n    my($s, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fruit_distribution;\n\
  \        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 19),8)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  5 apples and 6 oranges\", 21),10)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"0 apples and 1 oranges\", 3),2))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1 apples and 0 oranges\", 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 100),95))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  2 apples and 3 oranges\", 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"1 apples and 100 oranges\", 120),19))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $n - ( split(/ and /, $s) )[0] - ( split(/ and /, $s) )[1];\n\
    }", "    my($a, $o) = split /\\s/, $s;\n    return $n - $a - $o;\n}", "    $s\
    \ =~ /([\\d]+) apples and ([\\d]+) oranges/;\n    return $n - $1 - $2;\n}", " \
    \   $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return $n - $1 - $2;\n}", " \
    \   my($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    my $t = $a + $o;\n\
    \    return $n - $t;\n}", "    $s =~ /(\\d+)\\s+apples\\s+and\\s+(\\d+)\\s+oranges/;\n\
    \    return $n - $1 - $2;\n}", "    my $mango = $n;\n    my @apple_or_orange =\
    \ $s =~ /(\\d+)/g;\n    $mango -= $_ for @apple_or_orange;\n    return $mango;\n\
    }", "    my($x, $y) = split(\" \", $s =~ /(\\d+) (\\w+)/);\n    $n - $x - $y;\n\
    }", "    my ($a, $o) = split / (?:apples|oranges) and /, $s;\n    return $n -\
    \ $a - $o;\n}", "    $s =~ /(\\d+)\\s+(\\w+)\\s+and\\s+(\\d+)\\s+(\\w+)/;\n  \
    \  return $n - $1 - $3;\n}", "    if($s =~ /(\\d+)\\s+apples/){\n        my $a\
    \ = $1;\n        if($s =~ /(\\d+)\\s+oranges/){\n            my $o = $1;\n   \
    \         return $n-($a+$o);\n        }\n    }\n}", "    my($a, $o) = split /\
    \ /, $s;\n    $a =~ s/[a-z]//g;\n    $o =~ s/[a-z]//g;\n    return $n - $a - $o;\n\
    }", "    return $n - (() = $s =~ /\\d+/g);\n}", "    my ($a, $o) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    return $n - $a - $o;\n}\nuse Test::More;\n\
    is fruit_distribution(\"5 apples and 6 oranges\", 19), 8, '5 apples and 6 oranges';\n\
    is fruit_distribution(\"0 apples and 1 oranges\", 3), 2, '0 apples and 1 oranges';\n\
    is fruit_distribution(\"2 apples and 3 oranges\", 100), 95, '2 apples and 3 oranges';\n\
    is fruit_distribution(\"100 apples and 1 oranges\", 120), 19, '100 apples and\
    \ 1 oranges';\ndone_testing;", "    my($apples, $oranges) = $s =~ /(\\d+) apples\
    \ and (\\d+) oranges/;\n    $n - $apples - $oranges;\n}", "    my($a, $o) = $s\
    \ =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my @str\
    \ = split(/\\sand\\s/, $s);\n    $str[0] =~ s/\\D//g;\n    $str[1] =~ s/\\D//g;\n\
    \    my $m = $n - $str[0] - $str[1];\n    return $m;\n}", "    my ($a, $o) = $s\
    \ =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my ($a,\
    \ $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "  \
    \  if ($s =~ /([0-9]+) apples and ([0-9]+) oranges/) {\n        return $n - $1\
    \ - $2;\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
