language: pl
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @res;\n    foreach my $i (sort { $b <=> $a } keys\
    \ @$nums) {\n        push @res, $nums->[$i];\n    }\n    return @res;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $num_points = {};\n    foreach my $index (0..$#$nums)\
    \ {\n        my $point = sum_of_digits($nums->[$index]);\n        push @{$num_points->{$point}},\
    \ $index;\n    }\n    my @sorted_points = sort {$a <=> $b} keys %$num_points;\n\
    \    my @sorted_nums = ();\n    foreach my $point (@sorted_points) {\n       \
    \ push @sorted_nums, @{$num_points->{$point}};\n    }\n    my @result = ();\n\
    \    foreach my $index (@sorted_nums) {\n        push @result, $nums->[$index];\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmprsmvjn4c.pl
    line 14.

    '
  stdout: ''
  timestamp: 1659821205
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if !scalar @$nums;\n    return sort {\n   \
    \     sum_digits($a) <=> sum_digits($b) || $a <=> $b\n    } @$nums;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpbcy3ybd4.pl line
    14.

    '
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = ();\n    foreach my $num (@$nums) {\n  \
    \      my $sum = 0;\n        $sum += $_ for(split //, $num);\n        push @result,\
    \ [$num, $sum];\n    }\n    @result = sort { $a->[1] <=> $b->[1] || $a->[0] <=>\
    \ $b->[0] } @result;\n    return [map { $_->[0] } @result];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %sum;\n    my @sorted;\n    my $i = 0;\n    foreach\
    \ my $num (@$nums) {\n        my $j = $num;\n        my $sum = 0;\n        while\
    \ ($j) {\n            $sum += $j % 10;\n            $j = int($j / 10);\n     \
    \   }\n        $sum{$sum} = [] unless exists $sum{$sum};\n        push @{$sum{$sum}},\
    \ $i;\n        $i++;\n    }\n    foreach my $s (sort {$a <=> $b} keys %sum) {\n\
    \        foreach my $idx (@{$sum{$s}}) {\n            push @sorted, $nums->[$idx];\n\
    \        }\n    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @new_nums = @$nums;\n    #Defines the sort order\n\
    \    my $sub_to_sort = sub {\n        my ($a, $b) = @_;\n        #This is the\
    \ 'sum of digits' function.\n        my $sum_of_digits = sub {\n            #Splits\
    \ the number into an array of digits\n            my @digits = split(//, $_[0]);\n\
    \            my $sum = 0;\n            for my $d (@digits) {\n               \
    \ $sum += $d;\n            }\n            return $sum;\n        };\n        #compares\
    \ the sums\n        my $sum_a = $sum_of_digits->($a);\n        my $sum_b = $sum_of_digits->($b);\n\
    \        if ($sum_a == $sum_b) {\n            #if they are equal, order by the\
    \ index in the original array\n            return ($nums->[$a] <=> $nums->[$b]);\n\
    \        }\n        else {\n            #if they are not equal, order by the sum\n\
    \            return ($sum_a <=> $sum_b);\n        }\n    };\n    #creates an array\
    \ of indices\n    my @indices = 0..$#new_nums;\n    #sorts the array of indices\n\
    \    @indices = sort $sub_to_sort @indices;\n    my @result = ();\n    #pushes\
    \ the sorted array of indices into the @result array\n    for my $i (@indices)\
    \ {\n        push(@result, $new_nums[$i]);\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %h;\n    my $i = 0;\n    foreach my $n (@$nums) {\n\
    \        my $s = 0;\n        for (my $n = abs($n); $n; $n /= 10) {\n         \
    \   $s += $n % 10;\n        }\n        $h{$s} ||= [];\n        push @{$h{$s}},\
    \ $nums->[$i++];\n    }\n    my @res;\n    my @nums = sort { $a <=> $b } keys\
    \ %h;\n    foreach my $n (@nums) {\n        my @ss = sort { $a <=> $b } @{$h{$n}};\n\
    \        foreach my $s (@ss) {\n            push @res, $s;\n        }\n    }\n\
    \    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    @$nums = sort {sum_of_digits($a) <=> sum_of_digits($b)\
    \ || $a <=> $b} @$nums;\n    return $nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpsprq37dq.pl
    line 12.

    '
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {\n            ($a =~ tr/0-9//) <=>\
    \ ($b =~ tr/0-9//) ||\n            $nums->[$a] <=> $nums->[$b]\n    } 0..$#$nums;\n\
    \    return [@{$nums}[@sorted]];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $length = scalar @$nums;\n    for(my $i = 0; $i <\
    \ $length; $i++) {\n        for(my $j = $i + 1; $j < $length; $j++) {\n      \
    \      if($nums->[$i] == $nums->[$j]) {\n                next;\n            }\n\
    \            my $n1 = $nums->[$i];\n            my $n2 = $nums->[$j];\n      \
    \      my $sum1 = 0;\n            my $sum2 = 0;\n            while($n1) {\n  \
    \              $sum1 += $n1 % 10;\n                $n1 /= 10;\n            }\n\
    \            while($n2) {\n                $sum2 += $n2 % 10;\n              \
    \  $n2 /= 10;\n            }\n            if($sum1 == $sum2) {\n             \
    \   if($i > $j) {\n                    $nums->[$i] = $nums->[$j];\n          \
    \          $nums->[$j] = $n1;\n                }\n            }\n            if($sum1\
    \ > $sum2) {\n                $nums->[$i] = $nums->[$j];\n                $nums->[$j]\
    \ = $n1;\n            }\n        }\n    }\n    return $nums;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @new_nums = @$nums;\n    my @output;\n    #use selection\
    \ sort\n    for(my $i = 0; $i < scalar @new_nums; $i++){\n        my $min = $i;\n\
    \        for(my $j = $i + 1; $j < scalar @new_nums; $j++){\n            my $sum1\
    \ = sum_digits($new_nums[$j]);\n            my $sum2 = sum_digits($new_nums[$min]);\n\
    \            if($sum1 < $sum2 || ($sum1 == $sum2 && $new_nums[$j] < $new_nums[$min])){\n\
    \                $min = $j;\n            }\n        }\n        if($min != $i){\n\
    \            my $temp = $new_nums[$i];\n            $new_nums[$i] = $new_nums[$min];\n\
    \            $new_nums[$min] = $temp;\n        }\n    }\n    @output = @new_nums;\n\
    \    return @output;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpy06dvzl2.pl line
    18.

    '
  stdout: ''
  timestamp: 1659821205
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return sort { sum_digits($a) <=> sum_digits($b) } @$nums;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp3ffsunbr.pl line
    12.

    '
  stdout: ''
  timestamp: 1659821205
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %nums;\n    foreach my $i (0..$#$nums) {\n       \
    \ $nums{$i} = sum_digits($nums->[$i]);\n    }\n    my @sorted = map { $nums->[$_]\
    \ } sort { $nums{$a} <=> $nums{$b} } keys %nums;\n    return \\@sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpwjsv26cj.pl line
    14.

    '
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return $nums if @$nums == 0;\n    my %sum;\n    for (my\
    \ $i = 0; $i < @$nums; $i++) {\n        my $sum = 0;\n        for (split //, abs($nums->[$i]))\
    \ {\n            $sum += $_;\n        }\n        if (!defined $sum{$sum}) {\n\
    \            $sum{$sum} = [];\n        }\n        push @{$sum{$sum}}, $nums->[$i];\n\
    \    }\n    my @nums;\n    foreach my $sum (sort {$a <=> $b} keys %sum) {\n  \
    \      push @nums, @{$sum{$sum}};\n    }\n    return \\@nums;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @output;\n    my %hash;\n    for(my $i = 0; $i < scalar\
    \ @$nums; $i++) {\n        $hash{$i} = 0;\n        my @digits = split //, $nums->[$i];\n\
    \        for(my $j = 0; $j < scalar @digits; $j++) {\n            $hash{$i} +=\
    \ $digits[$j];\n        }\n    }\n    foreach my $key (sort {$hash{$a} <=> $hash{$b}}\
    \ keys %hash) {\n        push @output, $nums->[$key];\n    }\n    return @output;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %map = ();\n    foreach my $num (@$nums) {\n     \
    \   my $digits_sum = 0;\n        while($num) {\n            $digits_sum += $num\
    \ % 10;\n            $num /= 10;\n        }\n        push @{$map{$digits_sum}},\
    \ $num;\n    }\n    my @sorted_keys = sort {$a <=> $b} keys %map;\n    my @sorted_nums\
    \ = ();\n    foreach my $key (@sorted_keys) {\n        push @sorted_nums, @{$map{$key}};\n\
    \    }\n    return \\@sorted_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if !@$nums;\n    return [sort { $a <=> $b }\
    \ @$nums] if @$nums < 2;\n    my $result = [];\n    my $temp = {};\n    my $i\
    \ = 0;\n    while ($i < @$nums) {\n        my $num = $nums->[$i];\n        if\
    \ (!exists $temp->{$num}) {\n            my $point = 0;\n            my $n = $num;\n\
    \            if ($n < 0) {\n                $n = -$n;\n            }\n       \
    \     while ($n > 0) {\n                $point += $n % 10;\n                $n\
    \ = int($n / 10);\n            }\n            $temp->{$num} = $point;\n      \
    \  }\n        $i++;\n    }\n    my @sort_keys = sort { $temp->{$a} <=> $temp->{$b}\
    \ || $a <=> $b } keys %$temp;\n    for my $k (@sort_keys) {\n        push @$result,\
    \ $k;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { to_num($a) <=> to_num($b) } @$nums;\n\
    \    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::to_num called at /tmp/tmpcm_0lzsy.pl line 12.

    '
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return sort {\n        (split '', $a) <=> (split '',\
    \ $b)\n    } @$nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash;\n    my $idx = 0;\n    for my $num (@$nums)\
    \ {\n        my $n = 0;\n        my $m = $num;\n        while ($m > 0) {\n   \
    \         $n += $m % 10;\n            $m = int($m / 10);\n        }\n        $hash{$n}\
    \ = [] unless defined $hash{$n};\n        push @{$hash{$n}}, $idx;\n        $idx++;\n\
    \    }\n    my @keys = sort {$a <=> $b} keys %hash;\n    my @res;\n    for my\
    \ $key (@keys) {\n        for my $idx (@{$hash{$key}}) {\n            push @res,\
    \ $nums->[$idx];\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821205
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if not @$nums;\n    my %nums = ();\n    my\
    \ @keys = ();\n    foreach my $num (@$nums) {\n        my $key = _get_num_key($num);\n\
    \        push @keys, $key;\n        if (not exists $nums{$key}) {\n          \
    \  $nums{$key} = [];\n        }\n        push @{$nums{$key}}, $num;\n    }\n \
    \   my @sorted_keys = sort {$a <=> $b} @keys;\n    my @sorted_nums = ();\n   \
    \ foreach my $key (@sorted_keys) {\n        push @sorted_nums, @{$nums{$key}};\n\
    \    }\n    return \\@sorted_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::_get_num_key called at /tmp/tmpz9qokt2h.pl
    line 16.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { sum_of_digits($a) <=> sum_of_digits($b)\
    \ } @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp4zdw0x5d.pl
    line 12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_nums = map {$_->[0]} sort {$a->[1] <=> $b->[1]}\
    \ map {[$_, sum_digits($_)]} @$nums;\n    return \\@sorted_nums;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp9tznkocu.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $points = 0;\n    my @ordered_nums = ();\n    if (!@$nums)\
    \ {\n        return [];\n    }\n    for my $n (@$nums) {\n        my $num = $n;\n\
    \        my $current_points = 0;\n        while ($num) {\n            $current_points\
    \ += $num % 10;\n            $num = int($num / 10);\n        }\n        $points\
    \ += $current_points;\n        push @ordered_nums, {points => $current_points,\
    \ num => $n};\n    }\n    @ordered_nums = sort {$a->{points} <=> $b->{points}}\
    \ @ordered_nums;\n    return [map {$_->{num}} @ordered_nums];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = sort { sum_digits($a) <=> sum_digits($b)\
    \ } @$nums;\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpyijoa76c.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @res = sort {&by_score($a, $b)} @$nums;\n    return\
    \ \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::by_score called at /tmp/tmpdvuo_d1e.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %points;\n    for my $i (@$nums) {\n        my $p\
    \ = 0;\n        map { $p += $_ } split '', $i;\n        push @{$points{$p}}, $i;\n\
    \    }\n    my @out;\n    for my $k (sort { $a <=> $b } keys %points) {\n    \
    \    push @out, @{$points{$k}};\n    }\n    return \\@out;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {sum_digits($a) <=> sum_digits($b)}\
    \ @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpiv4ic8xm.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @nums = @$nums;\n    my @result;\n    my %data;\n\
    \    foreach my $num (@nums) {\n        my $sum = 0;\n        for my $char (split\
    \ //, abs($num)) {\n            $sum += $char;\n        }\n        push @{$data{$sum}},\
    \ $num;\n    }\n    foreach my $key (sort {$a <=> $b} keys %data) {\n        foreach\
    \ my $num (@{$data{$key}}) {\n            push @result, $num;\n        }\n   \
    \ }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $sum_of_digit = 0;\n    my @sum_of_digit = ();\n \
    \   my @res = ();\n    for(my $i = 0; $i < scalar(@$nums); $i++) {\n        if($nums->[$i]\
    \ =~ /\\d+/) {\n            my @digit = split('', $nums->[$i]);\n            $sum_of_digit\
    \ = 0;\n            for(my $j = 0; $j < scalar(@digit); $j++) {\n            \
    \    $sum_of_digit += $digit[$j];\n            }\n            @sum_of_digit =\
    \ (@sum_of_digit, $sum_of_digit);\n        } else {\n            @sum_of_digit\
    \ = (@sum_of_digit, 0);\n        }\n    }\n    my @bubble_nums = @$nums;\n   \
    \ my @bubble_sum_of_digit = @sum_of_digit;\n    for(my $i = 0; $i < scalar(@bubble_nums);\
    \ $i++) {\n        for(my $j = 0; $j < scalar(@bubble_nums) - 1; $j++) {\n   \
    \         if($bubble_sum_of_digit[$j] > $bubble_sum_of_digit[$j + 1]) {\n    \
    \            my $temp = $bubble_sum_of_digit[$j];\n                $bubble_sum_of_digit[$j]\
    \ = $bubble_sum_of_digit[$j + 1];\n                $bubble_sum_of_digit[$j + 1]\
    \ = $temp;\n                $temp = $bubble_nums[$j];\n                $bubble_nums[$j]\
    \ = $bubble_nums[$j + 1];\n                $bubble_nums[$j + 1] = $temp;\n   \
    \         }\n        }\n    }\n    for(my $i = 0; $i < scalar(@bubble_nums); $i++)\
    \ {\n        for(my $j = 0; $j < scalar(@$nums); $j++) {\n           \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp24bpbkob.pl line 75, at
    end of line

    syntax error at /tmp/tmp24bpbkob.pl line 75, at EOF

    Execution of /tmp/tmp24bpbkob.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if (scalar(@$nums) == 0);\n    my %nums_with_sum\
    \ = ();\n    my @result = ();\n    foreach my $i (0..$#{$nums}) {\n        my\
    \ $sum = sum_of_digits($nums->[$i]);\n        push(@{$nums_with_sum{$sum}}, $i);\n\
    \    }\n    foreach my $i (sort {$a <=> $b} keys %nums_with_sum) {\n        foreach\
    \ my $j (sort {$a <=> $b} @{$nums_with_sum{$i}}) {\n            push(@result,\
    \ $nums->[$j]);\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp60on_hft.pl
    line 16.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $result = [];\n    foreach my $i (0..$#$nums) {\n\
    \        my $sum = 0;\n        for my $d (split '', $nums->[$i]) {\n         \
    \   $sum += $d;\n        }\n        push @$result, { index => $i, sum => $sum,\
    \ num => $nums->[$i] };\n    }\n    $result = [ sort { $a->{sum} <=> $b->{sum}\
    \ || $a->{index} <=> $b->{index} } @$result ];\n    my $ret = [];\n    foreach\
    \ my $item (@$result) {\n        push @$ret, $item->{num};\n    }\n    return\
    \ $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    # Sorting algorithm used in the task is bubble sort.\n\
    \    # In-place sorting is used.\n    my $size = scalar @$nums;\n    if ($size\
    \ < 2) {\n        return $nums;\n    }\n    my $swapped = 1;\n    while ($swapped)\
    \ {\n        $swapped = 0;\n        for (my $i = 0; $i < $size - 1; $i++) {\n\
    \            my $first_sum = sum_of_digits($nums->[$i]);\n            my $second_sum\
    \ = sum_of_digits($nums->[$i + 1]);\n            if ($first_sum > $second_sum)\
    \ {\n                ($nums->[$i], $nums->[$i + 1]) = ($nums->[$i + 1], $nums->[$i]);\n\
    \                $swapped = 1;\n            }\n        }\n    }\n    return $nums;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpthvd5z1u.pl
    line 22.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @arr = sort { $a <=> $b } @$nums;\n    my %map;\n\
    \    for my $item (@arr) {\n        my $sum = 0;\n        $sum += $_ for split(//,\
    \ abs($item));\n        $map{$sum} = [] unless exists $map{$sum};\n        push\
    \ @{$map{$sum}}, $item;\n    }\n    my @ret;\n    for my $key (sort { $a <=> $b\
    \ } keys %map) {\n        push @ret, @{$map{$key}};\n    }\n    @ret;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {\n        sum_of_digits($a) <=> sum_of_digits($b)\
    \ || $a <=> $b\n    } @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpubjvkwsp.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %sum_idx = ();\n    for (my $i = 0; $i < scalar(@$nums);\
    \ $i++) {\n        my $sum = 0;\n        my $x = $nums->[$i];\n        while ($x\
    \ > 0) {\n            $sum += $x % 10;\n            $x /= 10;\n        }\n   \
    \     $sum_idx{$sum} = [] unless exists $sum_idx{$sum};\n        push(@{$sum_idx{$sum}},\
    \ $i);\n    }\n    my @idxs = sort { $a <=> $b } keys %sum_idx;\n    my @res =\
    \ ();\n    for (my $i = 0; $i < scalar(@idxs); $i++) {\n        for (my $j = 0;\
    \ $j < scalar(@{$sum_idx{$idxs[$i]}}); $j++) {\n            push(@res, $nums->[$sum_idx{$idxs[$i]}->[$j]]);\n\
    \        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { $a <=> $b}  @$nums;\n    my @r;\n\
    \    my $n = 0;\n    my $dig_sum = 0;\n    my $max_dig_sum = 0;\n    while (1)\
    \ {\n        my $min_dig_sum = $dig_sum;\n        $dig_sum = 0;\n        for (my\
    \ $j = 0; $j < @sorted; $j++) {\n            $dig_sum = get_sum_of_digits($sorted[$j]);\n\
    \            if ($min_dig_sum == $dig_sum) {\n                push @r, $sorted[$j];\n\
    \                splice @sorted, $j, 1;\n                $j--;\n            }\n\
    \        }\n        last if (@sorted == 0);\n    }\n    return @r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_sum_of_digits called at /tmp/tmpcosm7ki6.pl
    line 21.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = map { $_->[0] }\n                 sort {\
    \ $a->[1] <=> $b->[1] }\n                 map { [$_, sum_digits($_)] }\n     \
    \            @$nums;\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp1ure542b.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash;\n    my @arr;\n    my @arr2;\n    my @arr3;\n\
    \    for my $i (@$nums) {\n        my $sum = 0;\n        my $copy = $i;\n    \
    \    while ($copy != 0) {\n            $sum += $copy % 10;\n            $copy\
    \ = $copy / 10;\n        }\n        push @arr, $sum;\n        push @arr2, $i;\n\
    \    }\n    @hash{@arr} = @arr2;\n    my @keys = sort {$a <=> $b} keys %hash;\n\
    \    for my $j (@keys) {\n        push @arr3, $hash{$j};\n    }\n    return @arr3;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_by_digits_sum =\n        map { $_->[0] }\n\
    \        sort { $a->[1] <=> $b->[1] || $a->[2] <=> $b->[2] }\n        map { [$_,\
    \ sum_of_digits($_), $nums->[$_]] }\n        0 .. $#$nums;\n    return \\@sorted_by_digits_sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpviwl4egy.pl
    line 15.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = map { $_->[0] } sort { $a->[1] <=> $b->[1]\
    \ }\n                                  map { [$_, _sum_digits($_)] }\n       \
    \                           @$nums;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::_sum_digits called at /tmp/tmp5pdj8foj.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_nums = sort { $a <=> $b } @$nums;\n    my\
    \ %sum_hash;\n    for my $num (@sorted_nums) {\n        my $sum = 0;\n       \
    \ $sum += $_ for split(//, abs($num));\n        push @{$sum_hash{$sum}}, $num;\n\
    \    }\n    my @sorted_sum_nums;\n    for my $key (sort { $a <=> $b } keys %sum_hash)\
    \ {\n        push @sorted_sum_nums, @{$sum_hash{$key}};\n    }\n    return \\\
    @sorted_sum_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $array = [];\n    foreach my $num (@$nums) {\n   \
    \     my $digits = [];\n        while ($num) {\n            my $digit = $num %\
    \ 10;\n            push @$digits, $digit;\n            $num = int($num / 10);\n\
    \        }\n        my $point = 0;\n        foreach my $digit (@$digits) {\n \
    \           $point += $digit;\n        }\n        push @$array, [$point, $num];\n\
    \    }\n    $array = [sort {$a->[0] <=> $b->[0] || $a->[1] <=> $b->[1]} @$array];\n\
    \    $array = [map {$_->[1]} @$array];\n    return $array;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_nums = sort {\n        sum_of_digits($a) <=>\
    \ sum_of_digits($b)\n        ||\n        $a <=> $b\n    } @$nums;\n    return\
    \ \\@sorted_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpph_8yf6g.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = ();\n    foreach my $num (@$nums) {\n  \
    \      push @result, $num;\n    }\n    return sort { $a <=> $b } @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @results = map { [$_, sum_of_digits($_)] } @$nums;\n\
    \    @results = sort { $a->[1] <=> $b->[1] || $a->[0] <=> $b->[0] } @results;\n\
    \    return [map { $_->[0] } @results];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpybkv13y_.pl
    line 12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [sort {digit_sum($a) <=> digit_sum($b) || $a <=>\
    \ $b} @$nums];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::digit_sum called at /tmp/tmpvcmgb_4r.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if ! @$nums;\n    my @index = 0..$#$nums;\n\
    \    my @sums = map { sum($_) } @$nums;\n    my @sorted = map { $nums->[$_] }\n\
    \        sort { $sums[$a] <=> $sums[$b] || $a <=> $b } @index;\n    return \\\
    @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp8k3_ifij.pl line 14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = ();\n    my @sum_array = ();\n    my @nums_array\
    \ = ();\n    my $i = 0;\n    foreach my $num (@$nums) {\n        push @sum_array,\
    \ sum_of_digits($num);\n        push @nums_array, $num;\n    }\n    #print \"\
    @sum_array\\n\";\n    #print \"@nums_array\\n\";\n    #print \"@nums\\n\";\n \
    \   my @sum_array_sort = sort {$a <=> $b} @sum_array;\n    #print \"@sum_array_sort\\\
    n\";\n    for (my $j = 0; $j < @sum_array_sort; $j++) {\n        for (my $k =\
    \ 0; $k < @sum_array; $k++) {\n            if ($sum_array_sort[$j] == $sum_array[$k])\
    \ {\n                push @result, $nums_array[$k];\n                splice(@sum_array,\
    \ $k, 1);\n                splice(@nums_array, $k, 1);\n                $k--;\n\
    \            }\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpu2uf5g6r.pl
    line 17.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if scalar @$nums == 0;\n    my @vals = map\
    \ { sum_of_digits($_) } @$nums;\n    my @sorted = sort { $vals[$a] <=> $vals[$b]\
    \ || $a <=> $b } 0..$#$nums;\n    return [@$nums[@sorted]];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpz2mxbv_z.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @a = map { [sum_digits($_), $_] } @$nums;\n    @a\
    \ = sort { $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] } @a;\n    return [map {\
    \ $_->[1] } @a];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpo4aeequp.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return sort {\n        if ($a == $b) {\n            return\
    \ $a <=> $b;\n        }\n        else {\n            return sum_digits($a) <=>\
    \ sum_digits($b);\n        }\n    } @$nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpodbq0msp.pl line
    17.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = @$nums;\n    @sorted = sort { _sum($a) <=>\
    \ _sum($b) } @sorted;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::_sum called at /tmp/tmp6e_e3gwp.pl line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = map { $_->[0] }\n                 sort {\
    \ $a->[1] <=> $b->[1] || $a->[2] <=> $b->[2] }\n                 map { [$_, sum_digits($_),\
    \ $_] }\n                 @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp68jshfxo.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {\n        sum_of_digits($a) <=> sum_of_digits($b)\n\
    \        || $a <=> $b\n    } @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpsl07hzse.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {\n        my $sum1 = 0;\n        my\
    \ $sum2 = 0;\n        my $i1 = $a;\n        my $i2 = $b;\n        while ($i1)\
    \ {\n            $sum1 += $i1 % 10;\n            $i1 /= 10;\n        }\n     \
    \   while ($i2) {\n            $sum2 += $i2 % 10;\n            $i2 /= 10;\n  \
    \      }\n        return $sum1 == $sum2 ? $a <=> $b : $sum1 <=> $sum2;\n    }\
    \ @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    #my %nums_sums;\n    my %nums_sums = map { $_ => sum_digits($_)\
    \ } @$nums;\n    #print \"hi \" . $nums_sums{$nums->[0]} . \"\\n\";\n    #foreach\
    \ (@$nums) {\n    #    $nums_sums{$_} = sum_digits($_);\n    #}\n    my @order_nums\
    \ = sort { $nums_sums{$a} <=> $nums_sums{$b} } @$nums;\n    return @order_nums;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpyd514d0h.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return $nums unless @$nums;\n    my %sum_of_digits =\
    \ map { $_ => sum_of_digits($_) } @$nums;\n    my @res = sort {\n        $sum_of_digits{$a}\
    \ <=> $sum_of_digits{$b} or\n        $a <=> $b\n    } @$nums;\n    return \\@res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmppcna6u33.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @idx = (0..$#{$nums});\n    my @tmp = sort {abs($a)\
    \ % 10 + abs($a)/10 % 10 + abs($a)/100 <=>\n                    abs($b) % 10 +\
    \ abs($b)/10 % 10 + abs($b)/100 ||\n                    $idx[$a] <=> $idx[$b]}\
    \ @{$nums};\n    return \\@tmp;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $unpacked = pack \"i*\", @$nums;\n    return [] unless\
    \ $unpacked;\n    my @tr;\n    while($unpacked =~ /(.{4})/g) {\n        push @tr,\
    \ [unpack('i', $1), $.-1];\n    }\n    my @arr = map {$_->[0]} sort {$a->[1] <=>\
    \ $b->[1]} map {[$_, sum($_)]} @tr;\n    return \\@arr;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmpa102wfyc.pl line 18.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %sums;\n    my @nums;\n    my @results;\n    foreach\
    \ my $num (@$nums) {\n        my $sum = sum_digits($num);\n        push @{$sums{$sum}},\
    \ $num;\n    }\n    foreach my $sum (sort {$a <=> $b} keys %sums) {\n        push\
    \ @nums, @{$sums{$sum}};\n    }\n    foreach my $num (@$nums) {\n        foreach\
    \ my $new_num (@nums) {\n            if ($num == $new_num) {\n               \
    \ push @results, $new_num;\n            }\n        }\n    }\n    return @results;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpw25jll1z.pl line
    16.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if !@$nums;\n    return [sort {$a <=> $b} @$nums]\
    \ if scalar(@$nums) == 1;\n    my $max_digit_sum = 0;\n    foreach my $n (@$nums)\
    \ {\n        my $digit_sum = digit_sum($n);\n        $max_digit_sum = $digit_sum\
    \ if $digit_sum > $max_digit_sum;\n    }\n    my @buckets = ([]) x ($max_digit_sum\
    \ + 1);\n    for(my $i = 0; $i < scalar(@$nums); $i++) {\n        my $digit_sum\
    \ = digit_sum($nums->[$i]);\n        push @{$buckets[$digit_sum]}, $nums->[$i];\n\
    \    }\n    my @result = ();\n    foreach my $bucket (@buckets) {\n        foreach\
    \ my $n (@$bucket) {\n            push @result, $n;\n        }\n    }\n    return\
    \ \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::digit_sum called at /tmp/tmpf517g1kg.pl line
    16.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    $nums ||= [];\n    return [ sort { sum_digits($a) <=>\
    \ sum_digits($b) } @$nums ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpwj1ky8it.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {\n        my $a_sum = sum_digits($a);\n\
    \        my $b_sum = sum_digits($b);\n        if ($a_sum == $b_sum) {\n      \
    \      return $a <=> $b;\n        }\n        return $a_sum <=> $b_sum;\n    }\
    \ @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpf6d46err.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { $a->[0] <=> $b->[0] }\n         \
    \        map { [ sum(split //, $_), $_ ] }\n                 @$nums;\n    return\
    \ [ map { $_->[1] } @sorted ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmpfv_jvt4x.pl line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @unsorted = @$nums;\n    my @sorted;\n    my $unsorted_len\
    \ = scalar @unsorted;\n    my $i = 0;\n    while ($i < $unsorted_len) {\n    \
    \    my $min_sum = 9999999;\n        my $min_idx = 0;\n        for my $j (0..$#unsorted)\
    \ {\n            my $sum = sum_digits($unsorted[$j]);\n            if ($sum <\
    \ $min_sum) {\n                $min_sum = $sum;\n                $min_idx = $j;\n\
    \            }\n        }\n        $sorted[$i] = $unsorted[$min_idx];\n      \
    \  $unsorted[$min_idx] = undef;\n        $i++;\n    }\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpr751f5am.pl line
    20.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @res = ();\n    for my $i (0..$#{$nums}) {\n     \
    \   my $s = $nums->[$i];\n        my $sum = 0;\n        while ($s != 0) {\n  \
    \          $sum += $s % 10;\n            $s = int($s / 10);\n        }\n     \
    \   push @res, [$i, $sum];\n    }\n    my @sort_res = sort {$a->[1] <=> $b->[1]}\
    \ @res;\n    my @answer = ();\n    for my $i (0..$#sort_res) {\n        push @answer,\
    \ $nums->[$sort_res[$i]->[0]];\n    }\n    return @answer;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash = ();\n    for my $num (@$nums) {\n        my\
    \ $val = sum_digits($num);\n        push @{$hash{$val}}, $num;\n    }\n    my\
    \ @result = ();\n    for my $val (sort {$a <=> $b} keys %hash) {\n        push\
    \ @result, @{$hash{$val}};\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp9602uh5x.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %sums = map {$_ => sum(split(\"\", $_))} @$nums;\n\
    \    return [sort {$sums{$a} <=> $sums{$b} || $a <=> $b} @$nums];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp9g9alvfk.pl line 12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $cmp = sub {\n        my($a, $b) = @_;\n        my\
    \ $a_sum = sum(split //, $a);\n        my $b_sum = sum(split //, $b);\n      \
    \  if ($a_sum != $b_sum) {\n            return $a_sum <=> $b_sum;\n        }\n\
    \        else {\n            return $a <=> $b;\n        }\n    };\n    return\
    \ [ sort {$cmp->($a, $b)} @$nums ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp645tb0gk.pl line 14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash;\n    foreach my $num (@$nums) {\n        my\
    \ $result = sum_of_digits($num);\n        $hash{$result} = [] unless exists $hash{$result};\n\
    \        push @{$hash{$result}}, $num;\n    }\n    my @sorted_hash = sort {$a\
    \ <=> $b} keys %hash;\n    my @final_array;\n    foreach my $sum (@sorted_hash)\
    \ {\n        push @final_array, @{$hash{$sum}};\n    }\n    return \\@final_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmph5b9bu9j.pl
    line 14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { sum_of_digits($a) <=> sum_of_digits($b)\
    \ } @$nums;\n    my %index;\n    $index{$_} = $_ for 0..$#sorted;\n    my @ordered\
    \ = sort { $index{$a} <=> $index{$b} } @sorted;\n    return \\@ordered;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp54n4ii9o.pl
    line 12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %points = map { $_ => get_sum_of_digits($_) } @$nums;\n\
    \    my @sorted = sort {\n        $points{$a} <=> $points{$b}\n        ||\n  \
    \      $a <=> $b\n    } @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_sum_of_digits called at /tmp/tmpug7iqqtt.pl
    line 12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %lookup = ();\n    for my $i (0..$#$nums) {\n    \
    \    my $sum = sum_digits($nums->[$i]);\n        $lookup{$sum} //= [];\n     \
    \   push @{$lookup{$sum}}, $i;\n    }\n    my @sorted = sort { $a <=> $b } keys\
    \ %lookup;\n    return map {\n        $nums->[$_]\n    } map {\n        @{$lookup{$_}}\n\
    \    } @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpt23x8692.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash;\n    my @res;\n    foreach my $num(@$nums){\n\
    \        $hash{$num} = sum_of_digits($num);\n    }\n    foreach my $key(sort {$hash{$a}\
    \ <=> $hash{$b}} keys %hash){\n        push @res, $key;\n    }\n    return @res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpj744ovi2.pl
    line 15.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %points;\n    foreach my $i (@$nums) {\n        $points{$i}\
    \ = sum_digits($i);\n    }\n    return [\n        map { $nums->[$_] }\n      \
    \  sort { $points{$nums->[$a]} <=> $points{$nums->[$b]}\n            || $a <=>\
    \ $b\n        }\n        0..$#$nums\n    ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpqm_7glla.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %sum_of_digits;\n    foreach my $number (@$nums) {\n\
    \        my $sum = 0;\n        $sum += int($_) foreach split(//, $number);\n \
    \       push @{$sum_of_digits{$sum}}, $number;\n    }\n    my @sorted = sort {$a\
    \ <=> $b} keys %sum_of_digits;\n    return [map { @{$sum_of_digits{$_}} } @sorted];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @res;\n    @res = sort { sum_digits($a) <=> sum_digits($b)\
    \ } @$nums;\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp5gx6lxv7.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if @$nums == 0;\n    my @sorted = sort {sum_of_digits($a)\
    \ <=> sum_of_digits($b)} @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp7v5ugm4o.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash;\n    foreach my $num (@$nums) {\n        my\
    \ $sum = 0;\n        while ($num) {\n            $sum += $num % 10;\n        \
    \    $num /= 10;\n        }\n        push @{$hash{$sum}}, $num;\n    }\n    my\
    \ @keys = sort {$a <=> $b} keys %hash;\n    my @res;\n    foreach my $key (@keys)\
    \ {\n        foreach my $num (@{$hash{$key}}) {\n            push @res, $num;\n\
    \        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %h;\n    for my $i (0..@$nums-1) {\n        $h{sprintf(\"\
    %s_%d\", sum_of_digits($nums->[$i]), $i)} = $nums->[$i];\n    }\n    my @res =\
    \ sort {$a <=> $b} map { $h{$_} } keys %h;\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpni6tqrtv.pl
    line 14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    # TODO: your code here\n    return [];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $result = sub {\n        my($a, $b) = @_;\n      \
    \  my $a_sum = sum_of_digits($a);\n        my $b_sum = sum_of_digits($b);\n  \
    \      if ($a_sum == $b_sum) {\n            my $a_index = index_of($a, $nums);\n\
    \            my $b_index = index_of($b, $nums);\n            return $a_index <=>\
    \ $b_index;\n        }\n        return $a_sum <=> $b_sum;\n    };\n    my @sorted\
    \ = sort $result @$nums;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpl13qh_85.pl
    line 14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    # TODO: implement this function\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $sum = sum(@$nums);\n    say $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp87pm38k1.pl line 12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [sort {sum_digits($a) <=> sum_digits($b) or $a\
    \ <=> $b} @$nums];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpkfgbb3ey.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %sum_to_nums;\n    foreach my $num (@$nums) {\n  \
    \      my $sum = 0;\n        $sum += $_ for split(//, abs($num));\n        push\
    \ @{$sum_to_nums{$sum}}, $num;\n    }\n    my @sorted = sort {$a <=> $b} keys\
    \ %sum_to_nums;\n    my @res;\n    foreach my $sum (@sorted) {\n        push @res,\
    \ @{$sum_to_nums{$sum}};\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return () unless $nums;\n    return sort { $a <=> $b\
    \ } sort { sum($a) <=> sum($b) } @$nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp94n0bfgv.pl line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ret;\n    foreach my $num (@$nums) {\n        push\
    \ @ret, {\n            num => $num,\n            points => sum_of_digits($num),\n\
    \        };\n    }\n    @ret = sort {\n        $a->{points} <=> $b->{points} ||\n\
    \        $a->{num} <=> $b->{num}\n    } @ret;\n    return [map { $_->{num} } @ret];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp44_y_hm9.pl
    line 14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash;\n    foreach my $num(@$nums){\n        my $temp\
    \ = $num;\n        my $sum = 0;\n        while($temp > 0){\n            $sum +=\
    \ $temp % 10;\n            $temp = int($temp / 10);\n        }\n        if(defined\
    \ $hash{$sum}){\n            $hash{$sum} = [[$num], $hash{$sum}];\n        }else{\n\
    \            $hash{$sum} = $num;\n        }\n    }\n    my @sorted = sort {$a\
    \ <=> $b} keys %hash;\n    my @result;\n    foreach my $key(@sorted){\n      \
    \  if(ref($hash{$key}) eq 'ARRAY'){\n            my $result = $hash{$key};\n \
    \           @result = (@result, @{$result->[0]}, @{$result->[1]});\n        }else{\n\
    \            push @result, $hash{$key};\n        }\n    }\n    return \\@result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @order;\n    for my $i (0..$#{$nums}) {\n        my\
    \ $key = 0;\n        my $val = $nums->[$i];\n        if ($val < 0) {\n       \
    \     $val = 0 - $val;\n        }\n        for my $c (split //, $val) {\n    \
    \        $key += $c;\n        }\n        push @order, [$key, $val, $i];\n    }\n\
    \    @order = sort {\n        $a->[0] <=> $b->[0] || $a->[2] <=> $b->[2]\n   \
    \ } @order;\n    my @result;\n    for my $i (0..$#order) {\n        push @result,\
    \ $order[$i][1];\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @nums = @$nums;\n    my @ret;\n    foreach my $num\
    \ (@nums) {\n        my $sum = 0;\n        while ($num > 0) {\n            $sum\
    \ += $num % 10;\n            $num /= 10;\n        }\n        push @ret, [$sum,\
    \ $num];\n    }\n    return [map { $ret[$_][1] } sort { $ret[$a][0] <=> $ret[$b][0]\
    \ } 0..$#ret];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash;\n    for (my $i = 0; $i < scalar @$nums; $i++)\
    \ {\n        my $sum = 0;\n        my $j = abs($nums->[$i]);\n        while ($j)\
    \ {\n            $sum += $j % 10;\n            $j /= 10;\n        }\n        push\
    \ @{$hash{$sum}}, $nums->[$i];\n    }\n    my @result;\n    for my $k (sort {$a\
    \ <=> $b} keys %hash) {\n        for (my $i = 0; $i < scalar @{$hash{$k}}; $i++)\
    \ {\n            push @result, $hash{$k}->[$i];\n        }\n    }\n    return\
    \ \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ordered = sort { sum_digits($a) <=> sum_digits($b)\
    \ } @$nums;\n    return \\@ordered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpthv2weh0.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @r = map { [$_, sum($_)] } @$nums;\n    return [\n\
    \        map { $_->[0] }\n        sort { $a->[1] <=> $b->[1] }\n        sort {\
    \ $a->[0] <=> $b->[0] }\n        @r\n    ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmpqfngbu71.pl line 12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ret = ();\n    while (scalar(@{$nums}) > 0) {\n \
    \       my $max_idx = 0;\n        my $max_points = 0;\n        for (my $i = 0;\
    \ $i < scalar(@{$nums}); $i++) {\n            my $item = $nums->[$i];\n      \
    \      my $points = sum_digits($item);\n            if ($points > $max_points)\
    \ {\n                $max_points = $points;\n                $max_idx = $i;\n\
    \            }\n        }\n        push(@ret, $nums->[$max_idx]);\n        splice(@{$nums},\
    \ $max_idx, 1);\n    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpsyku_2i0.pl line
    18.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = sort {\n        my $a_points = sum_of_digits($a);\n\
    \        my $b_points = sum_of_digits($b);\n        $a_points <=> $b_points\n\
    \    } @$nums;\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp1lozncu0.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @nums = @$nums;\n    my @sorted = sort { point_sum($a)\
    \ <=> point_sum($b) || $a <=> $b } @nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::point_sum called at /tmp/tmpp9giqn5d.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %h = ();\n    for my $i (0..$#$nums) {\n        my\
    \ $s = 0;\n        while($nums->[$i]) {\n            $s += $nums->[$i] % 10;\n\
    \            $nums->[$i] /= 10;\n        }\n        $h{$s} = [] unless exists\
    \ $h{$s};\n        push @{$h{$s}}, $i;\n    }\n    my @ret = ();\n    for my $s\
    \ (sort {$a <=> $b} keys %h) {\n        push @ret, @{$h{$s}};\n    }\n    @ret\
    \ = map {$nums->[$_]} @ret;\n    return \\@ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $sum;\n    my %hash;\n    for my $num (@$nums) {\n\
    \        $sum = 0;\n        for my $digit (split //, $num) {\n            $sum\
    \ += $digit;\n        }\n        $hash{$num} = $sum;\n    }\n    my @result =\
    \ sort {$hash{$a} <=> $hash{$b}} keys %hash;\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {$a->[0] <=> $b->[0] or $a->[1] <=>\
    \ $b->[1]}\n        map {[sum_digits($_), $_]} @$nums;\n    return [map {$_->[1]}\
    \ @sorted];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp3k60xwf2.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { sum_digits($a) <=> sum_digits($b)\
    \ } @$nums;\n    my @ordered;\n    my %map = ();\n    my $ind = 0;\n    for my\
    \ $i (@sorted) {\n        push @ordered, $i;\n        $map{$i} = $ind++;\n   \
    \ }\n    my @result = sort {$map{$a} <=> $map{$b}} @ordered;\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpyb6nvgtf.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return sort { _points($a) <=> _points($b) || $a <=> $b\
    \ } @$nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::_points called at /tmp/tmpoeur62ai.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    # TODO: Return the list of numbers sorted by the sum\
    \ of their digits.\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return sort {\n        ($a + $b) <=> ($c + $d) ||\n \
    \       ($nums->[$a] <=> $nums->[$b])\n    } (0 .. $#$nums);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @r = ();\n    my @s = ();\n    foreach my $num (@$nums)\
    \ {\n        my $s = 0;\n        foreach my $digit (split //, $num) {\n      \
    \      $s += $digit;\n        }\n        push @s, $s;\n        push @r, $num;\n\
    \    }\n    my @indices = sort {$s[$a] <=> $s[$b]} 0..scalar(@s)-1;\n    return\
    \ [map {$r[$_]} @indices];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {\n        my $sum1 = int(abs($a) /\
    \ 10) + $a % 10;\n        my $sum2 = int(abs($b) / 10) + $b % 10;\n        if\
    \ ($sum1 != $sum2) {\n            return $sum1 <=> $sum2;\n        } else {\n\
    \            return $a <=> $b;\n        }\n    } @$nums;\n    return \\@sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = map {$_->[0]} sort {$a->[1] <=> $b->[1]}\
    \ map {[$_, sums_of_digits($_)]} @$nums;\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sums_of_digits called at /tmp/tmpv7qkboj6.pl
    line 12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = ();\n    my %sum = ();\n    foreach my $num\
    \ (@$nums) {\n        my $sum = 0;\n        while ($num > 0) {\n            $sum\
    \ += $num % 10;\n            $num = int($num / 10);\n        }\n        push @{$sum{$sum}},\
    \ $num;\n    }\n    foreach my $s (sort {$a <=> $b} keys %sum) {\n        push\
    \ @result, @{$sum{$s}};\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash = ();\n    for (my $i = 0; $i < scalar @$nums;\
    \ $i++) {\n        my $sum = 0;\n        $sum += $_ for split //, abs($nums->[$i]);\n\
    \        push @{$hash{$sum}}, $nums->[$i];\n    }\n    my @result = ();\n    foreach\
    \ my $key (sort {$a <=> $b} keys %hash) {\n        foreach my $value (@{$hash{$key}})\
    \ {\n            push @result, $value;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    if (@$nums == 0) {\n        return [];\n    }\n    my\
    \ $sum = 0;\n    foreach (@$nums) {\n        $sum += $_;\n    }\n    return []\
    \ if $sum == 0;\n    my $point_ref = {};\n    my $key_ref = {};\n    my $count\
    \ = 0;\n    foreach (@$nums) {\n        my $points = $_ > 0 ? $_ : ($_ * -1);\n\
    \        my $point = 0;\n        while ($points > 0) {\n            $point +=\
    \ $points % 10;\n            $points = int($points / 10);\n        }\n       \
    \ if (defined $point_ref->{$point}) {\n            push @{$point_ref->{$point}},\
    \ $_;\n        } else {\n            $point_ref->{$point} = [$_];\n        }\n\
    \        if (defined $key_ref->{$point}) {\n            push @{$key_ref->{$point}},\
    \ $count;\n        } else {\n            $key_ref->{$point} = [$count];\n    \
    \    }\n        $count++;\n    }\n    my @points = sort {$a <=> $b} keys %$point_ref;\n\
    \    my @keys = ();\n    foreach (@points) {\n        push @keys, @{$key_ref->{$_}};\n\
    \    }\n    my @result = ();\n    foreach (@keys) {\n        push @result, $nums->[$_];\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    # Split the array ref\n    my @nums = @$nums;\n    my\
    \ @ans;\n    # Use a hash to store the sum of digits as key and index as value\n\
    \    my %nums;\n    # Store index value in keys\n    for my $i (0..$#nums) {\n\
    \        $nums{$i} = $nums[$i];\n    }\n    # Iterate through keys (index) and\
    \ find sum of digits.\n    for my $k (keys %nums) {\n        my $sum = 0;\n  \
    \      my $num = $nums{$k};\n        # If negative, convert to positive.\n   \
    \     if ($num < 0) {\n            $num = 0 - $num;\n        }\n        # Iterate\
    \ through digits\n        for my $x (split //, $num) {\n            $sum += $x;\n\
    \        }\n        # Add the index and sum of digits to hash.\n        $nums{$k}\
    \ = $sum;\n    }\n    # Sort the hash values (sum of digits)\n    # and push sorted\
    \ index numbers to array\n    for my $k (sort {$nums{$a} <=> $nums{$b}} keys %nums)\
    \ {\n        push @ans, $k;\n    }\n    # Sorted array to return\n    my @ans2;\n\
    \    # Iterate through sorted index numbers\n    # and push corresponding elements\
    \ to array\n    for my $i (@ans) {\n        push @ans2, $nums[$i];\n    }\n  \
    \  return @ans2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @return;\n    foreach my $i (0..@$nums-1) {\n    \
    \    my $sum_of_digits = sum_of_digits($nums->[$i]);\n        $return[$sum_of_digits]\
    \ = $nums->[$i];\n    }\n    return grep(defined, @return);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp1pil9krr.pl
    line 14.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $i = 0;\n    my %hash = ();\n    my $max_sum = 0;\n\
    \    foreach my $n (@$nums) {\n        my $sum = sum_of_digits($n);\n        $hash{$n}\
    \ = $sum;\n        if ($sum > $max_sum) {\n            $max_sum = $sum;\n    \
    \    }\n    }\n    my @sorted_nums = ();\n    for (my $i = 0; $i <= $max_sum;\
    \ $i++) {\n        foreach my $n (@$nums) {\n            if ($hash{$n} == $i)\
    \ {\n                push @sorted_nums, $n;\n            }\n        }\n    }\n\
    \    return @sorted_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpf0i03rk1.pl
    line 16.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %sums;\n    my @res;\n    foreach my $num (@$nums)\
    \ {\n        $sums{$num} = 0;\n        while ($num) {\n            $sums{$num}\
    \ += $num % 10;\n            $num /= 10;\n        }\n    }\n    foreach my $num\
    \ (sort {$sums{$a} <=> $sums{$b} || $a <=> $b} @$nums) {\n        push @res, $num;\n\
    \    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { get_digit_sum($a) <=> get_digit_sum($b)\
    \ } @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_digit_sum called at /tmp/tmp0o9e_7ab.pl
    line 12.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return $nums unless @$nums;\n    my $sums = [ map { abs($_)\
    \ } @$nums ];\n    foreach my $i (0 .. $#$sums) {\n        while ($sums->[$i]\
    \ >= 10) {\n            my $t = $sums->[$i];\n            $sums->[$i] = 0;\n \
    \           while ($t > 0) {\n                $sums->[$i] += $t % 10;\n      \
    \          $t /= 10;\n            }\n        }\n    }\n    my @idx = sort {\n\
    \        $sums->[$a] <=> $sums->[$b]\n            ||\n        $a <=> $b\n    }\
    \ 0 .. $#$sums;\n    return [ map { $nums->[$_] } @idx ];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = ();\n    foreach my $num (@$nums) {\n  \
    \      my $sum = 0;\n        for my $char (split //, $num) {\n            $sum\
    \ += $char;\n        }\n        push @result, [$num, $sum];\n    }\n    @result\
    \ = sort { $a->[1] <=> $b->[1] } @result;\n    @result = map { $_->[0] } @result;\n\
    \    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @a = @$nums;\n    my %sums;\n    my @res;\n    for\
    \ my $i (0..$#a) {\n        my $n = $a[$i];\n        my $sum = 0;\n        if\
    \ ($n < 0) {\n            $n = -$n;\n        }\n        while ($n > 0) {\n   \
    \         $sum += $n % 10;\n            $n = int($n / 10);\n        }\n      \
    \  if (!exists $sums{$sum}) {\n            $sums{$sum} = [];\n        }\n    \
    \    push @{$sums{$sum}}, $i;\n    }\n    for my $sum (sort {$a <=> $b} keys %sums)\
    \ {\n        my $arr = $sums{$sum};\n        my @ind = sort {$a <=> $b} @$arr;\n\
    \        for my $i (@ind) {\n            push @res, $a[$i];\n        }\n    }\n\
    \    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    if (ref($nums) ne 'ARRAY') {\n        return undef;\n\
    \    }\n    if (@$nums == 0) {\n        return $nums;\n    }\n    my @output =\
    \ map {$_} @$nums;\n    for my $i (0..$#output) {\n        my $v = 0;\n      \
    \  for my $j (split(//, $output[$i])) {\n            $v += $j;\n        }\n  \
    \      $output[$i] = $v;\n    }\n    my @index = map {$_} 0..$#output;\n    @index\
    \ = sort {\n        if ($output[$a] != $output[$b]) {\n            return $output[$a]\
    \ <=> $output[$b];\n        }\n        return $a <=> $b;\n    } @index;\n    my\
    \ @ret = map {$nums->[$_]} @index;\n    return \\@ret;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %nums_hash = map { $_ => get_sum_of_digits($_) } @$nums;\n\
    \    my @nums_arr = sort { $nums_hash{$a} <=> $nums_hash{$b} } @$nums;\n    return\
    \ \\@nums_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_sum_of_digits called at /tmp/tmpeub_z5ef.pl
    line 12.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = ();\n    foreach my $num (@$nums) {\n  \
    \      push @sorted, $num;\n    }\n    my @sorted_digits = ();\n    foreach my\
    \ $sorted (@sorted) {\n        my $sum = 0;\n        my @digits = split //, $sorted;\n\
    \        foreach my $digit (@digits) {\n            $sum += $digit;\n        }\n\
    \        push @sorted_digits, $sum;\n    }\n    my @sorted_indices = sort { $sorted_digits[$a]\
    \ <=> $sorted_digits[$b] } 0 .. $#sorted_digits;\n    my @final_nums = ();\n \
    \   foreach my $index (@sorted_indices) {\n        push @final_nums, $sorted[$index];\n\
    \    }\n    return @final_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = ();\n    my %index = ();\n    my %sum =\
    \ ();\n    my @keys = ();\n    my @sorted = ();\n    my $sum = 0;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $key = 0;\n    my $k = 0;\n    my $prev_sum = 0;\n\
    \    for($i = 0; $i < scalar(@$nums); $i++){\n        $sum = 0;\n        @keys\
    \ = split(//, $nums->[$i]);\n        for($j = 0; $j < scalar(@keys); $j++){\n\
    \            $sum += $keys[$j];\n        }\n        $sum{$nums->[$i]} = $sum;\n\
    \        $index{$nums->[$i]} = $i;\n    }\n    @sorted = sort {$sum{$a} <=> $sum{$b}}\
    \ keys %sum;\n    $prev_sum = -1;\n    for($k = 0; $k < scalar(@sorted); $k++){\n\
    \        if($sum{$sorted[$k]} == $prev_sum){\n            $prev_sum = $sum{$sorted[$k]};\n\
    \            push(@result, $sorted[$k - 1]);\n            $key = splice(@sorted,\
    \ $k - 1, 1);\n            push(@result, $key);\n            $k -= 1;\n      \
    \  }\n        else{\n            $prev_sum = $sum{$sorted[$k]};\n            push(@result,\
    \ $sorted[$k]);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = ();\n    my %map = ();\n    for my $num\
    \ (@$nums) {\n        my $sum = 0;\n        my $n = $num;\n        if ($n < 0)\
    \ {\n            $n = -$n;\n        }\n        while ($n > 0) {\n            $sum\
    \ += $n % 10;\n            $n = int($n / 10);\n        }\n        $map{$num} =\
    \ $sum;\n    }\n    my @sorted = sort {$map{$a} <=> $map{$b}} keys %map;\n   \
    \ return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = ();\n    my @index_sum_hash = ();\n    for\
    \ my $index (0..$#{$nums}) {\n        my $item = $nums->[$index];\n        my\
    \ $sum = abs($item);\n        my $digit_sum = 0;\n        while ($sum > 0) {\n\
    \            $digit_sum += $sum % 10;\n            $sum = int($sum / 10);\n  \
    \      }\n        push @index_sum_hash, [$index, $digit_sum];\n    }\n    my @sorted_index_sum_hash\
    \ = sort { $a->[1] <=> $b->[1] } @index_sum_hash;\n    for my $item (@sorted_index_sum_hash)\
    \ {\n        push @result, $nums->[$item->[0]];\n    }\n    return \\@result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return sort { abs($a) % 10 + abs($a) / 10 % 10 <=> abs($b)\
    \ % 10 + abs($b) / 10 % 10 || $a <=> $b } @$nums;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ret;\n    for my $i (0..$#$nums) {\n        my $sum\
    \ = 0;\n        for my $c (split(//, $nums->[$i])) {\n            $sum += $c;\n\
    \        }\n        push @ret, [$sum, $i, $nums->[$i]];\n    }\n    @ret = sort\
    \ { $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] } @ret;\n    return [map { $_->[2]\
    \ } @ret];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $map = {};\n    my $sums = [];\n    my $i = 0;\n \
    \   foreach my $num (@$nums) {\n        my $sum = 0;\n        my $copy = $num;\n\
    \        while ($copy > 0) {\n            $sum += $copy % 10;\n            $copy\
    \ = int($copy / 10);\n        }\n        $map->{$sum} = [] unless exists $map->{$sum};\n\
    \        push @{$map->{$sum}}, $num;\n        push @$sums, $sum;\n    }\n    my\
    \ $res = [];\n    foreach my $sum (sort {$a <=> $b} @$sums) {\n        foreach\
    \ my $num (@{$map->{$sum}}) {\n            push @$res, $num;\n        }\n    }\n\
    \    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { $a->[0] <=> $b->[0] || $a->[1] <=>\
    \ $b->[1] }\n                 map { [sum_digits($_), $_] } @$nums;\n    return\
    \ [map { $_->[1] } @sorted];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp090hudbx.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return sort {\n        sum_of_digits($a) <=> sum_of_digits($b)\
    \ ||\n        $nums->[$a] <=> $nums->[$b]\n    } 0..$#$nums;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp9ywco83j.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014015
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    # TODO: write the code for the exercise\n    return $nums;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014015
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $sums;\n    foreach my $n (@$nums) {\n        my $sum\
    \ = sum_digits($n);\n        if(exists $sums->{$sum}) {\n            push @{$sums->{$sum}},\
    \ $n;\n        } else {\n            $sums->{$sum} = [$n];\n        }\n    }\n\
    \    my @result;\n    my @sums = sort {$a <=> $b} keys %$sums;\n    foreach my\
    \ $sum (@sums) {\n        push @result, @{$sums->{$sum}};\n    }\n    return \\\
    @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpwnnz1oz6.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash;\n    my @result;\n    my @sorted;\n    my $sum\
    \ = 0;\n    foreach my $num (@$nums) {\n        $sum = 0;\n        $sum += $_\
    \ for split //, $num;\n        $hash{$num} = $sum;\n    }\n    @sorted = sort\
    \ {$hash{$a} <=> $hash{$b}} keys %hash;\n    foreach my $key (@sorted) {\n   \
    \     push @result, $key;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {\n        my($a_sum) = sum(split(//,\
    \ abs($a)));\n        my($b_sum) = sum(split(//, abs($b)));\n        $a_sum <=>\
    \ $b_sum\n    } @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp4y15c0jm.pl line 13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = ();\n    my %result = ();\n    if (@$nums\
    \ == 0) {\n        return [];\n    }\n    foreach my $num (@$nums) {\n       \
    \ $result{$num} = sum_digits($num);\n    }\n    foreach my $num (sort { $result{$a}\
    \ <=> $result{$b} || $a <=> $b } keys %result) {\n        push @result, $num;\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmplgbz1llf.pl line
    18.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted =\n        map { $_->[0] }\n        sort {\
    \ $a->[1] <=> $b->[1] }\n        map { [$_, sum_of_digits($_)] }\n        @$nums;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpdvl2fwxk.pl
    line 15.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @arr = @$nums;\n    if(scalar @arr == 0){\n      \
    \  return @arr;\n    }\n    foreach my $i (0..(scalar @arr)-1){\n        foreach\
    \ my $j ($i+1..(scalar @arr)-1){\n            my $sum1 = $arr[$i];\n         \
    \   my $sum2 = $arr[$j];\n            if($sum1 < 0){\n                $sum1 =\
    \ -$sum1;\n            }\n            if($sum2 < 0){\n                $sum2 =\
    \ -$sum2;\n            }\n            while ($sum1 > 0){\n                $sum1\
    \ = $sum1/10;\n            }\n            while ($sum2 > 0){\n               \
    \ $sum2 = $sum2/10;\n            }\n            if($sum1 > $sum2){\n         \
    \       my $temp = $arr[$i];\n                $arr[$i] = $arr[$j];\n         \
    \       $arr[$j] = $temp;\n            }\n        }\n    }\n    return @arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_nums = sort { sum_digits($a) <=> sum_digits($b)\
    \ } @$nums;\n    return \\@sorted_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpvyxo460n.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = ();\n    my %digits_sum_hash = ();\n   \
    \ my $digits_sum = 0;\n    my $digit = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $digit_count = 0;\n    my $num = 0;\n    my $max_digit_count = 0;\n    my\
    \ $max_digit_count_index = 0;\n    my $max_digit_count_num = 0;\n    my $sorted_num\
    \ = 0;\n    if (defined($nums)) {\n        $i = 0;\n        foreach $num (@{$nums})\
    \ {\n            $digits_sum = 0;\n            $digit_count = 0;\n           \
    \ while (1) {\n                $digit = $num % 10;\n                $num = $num\
    \ / 10;\n                $digits_sum += $digit;\n                if ($num == 0)\
    \ {\n                    last;\n                }\n                $digit_count++;\n\
    \            }\n            if ($max_digit_count < $digit_count) {\n         \
    \       $max_digit_count = $digit_count;\n                $max_digit_count_index\
    \ = $i;\n                $max_digit_count_num = $nums->[$i];\n            }\n\
    \            if (exists($digits_sum_hash{$digits_sum})) {\n                $digits_sum_hash{$digits_sum}->[0]\
    \ += 1;\n                push @{$digits_sum_hash{$digits_sum}->[1]}, $nums->[$i];\n\
    \            } else {\n                $digits_sum_hash{$digits_sum} = [1, [$nums->[$i]]];\n\
    \            }\n            $i++;\n        }\n        while (1) {\n          \
    \  $sorted_num = $max_digit_count_num;\n            foreach $num (@{$nums}) {\n\
    \                if ($num != $sorted_num) {\n                    $digits_sum =\
    \ 0;\n                    $digit_count = 0;\n                    while (1) {\n\
    \                        $digit = $num % 10;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjgod21oh.pl line 91, at
    end of line

    syntax error at /tmp/tmpjgod21oh.pl line 91, at EOF

    Execution of /tmp/tmpjgod21oh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_nums = sort {\n        sum_of_digits($a) <=>\
    \ sum_of_digits($b)\n    } @$nums;\n    return @sorted_nums;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmprmypyfpn.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @nums = @$nums;\n    my %index;\n    for (my $i =\
    \ 0; $i < @nums; $i++) {\n        my $sum = 0;\n        my $num = $nums[$i];\n\
    \        while ($num != 0) {\n            $sum += $num % 10;\n            $num\
    \ /= 10;\n        }\n        $index{$i} = $sum;\n    }\n    my @sorted = sort\
    \ { $index{$a} <=> $index{$b} } keys %index;\n    return map { $nums[$_] } @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_nums = map { $_->[0] }\n        sort { $a->[1]\
    \ <=> $b->[1] }\n        map { [$_, get_digit_sum($_)] }\n        @$nums;\n  \
    \  return @sorted_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_digit_sum called at /tmp/tmpzvk2ibr6.pl
    line 14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @out = ();\n    foreach my $n (@$nums) {\n       \
    \ my $sum = sum_of_digits($n);\n        push @out, [$n, $sum];\n    }\n    @out\
    \ = sort {$a->[1] <=> $b->[1] or $a->[0] <=> $b->[0]} @out;\n    return [map {$_->[0]}\
    \ @out];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpim__gi7k.pl
    line 14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %hash = ();\n    my $index = 0;\n    foreach my $num\
    \ (@$nums) {\n        my $digits_sum = 0;\n        while ($num > 0) {\n      \
    \      $digits_sum += $num % 10;\n            $num /= 10;\n        }\n       \
    \ $hash{$digits_sum} = [] unless exists $hash{$digits_sum};\n        push @{$hash{$digits_sum}},\
    \ [$index, $nums->[$index]];\n        $index++;\n    }\n    my @sorted_nums =\
    \ ();\n    foreach my $value (sort keys %hash) {\n        foreach my $value2 (sort\
    \ {$a->[0] <=> $b->[0]} @{$hash{$value}}) {\n            push @sorted_nums, $value2->[1];\n\
    \        }\n    }\n    return \\@sorted_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if ! @$nums;\n    my @res = sort {\n      \
    \  sum_digits($a) <=> sum_digits($b)\n        ||\n        $a <=> $b\n    } @$nums;\n\
    \    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp965a4r2o.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $new_nums = [];\n    return $new_nums unless defined\
    \ $nums;\n    my $result = [];\n    my $length = scalar @$nums;\n    for (my $i\
    \ = 0; $i < $length; $i++) {\n        $new_nums->[$i] = sum_of_digits($nums->[$i]);\n\
    \    }\n    for (my $i = 0; $i < $length; $i++) {\n        my $min = $i;\n   \
    \     for (my $j = $i + 1; $j < $length; $j++) {\n            if ($new_nums->[$j]\
    \ < $new_nums->[$min]) {\n                $min = $j;\n            }\n        }\n\
    \        if ($min != $i) {\n            my $tmp = $new_nums->[$i];\n         \
    \   $new_nums->[$i] = $new_nums->[$min];\n            $new_nums->[$min] = $tmp;\n\
    \            $tmp = $nums->[$i];\n            $nums->[$i] = $nums->[$min];\n \
    \           $nums->[$min] = $tmp;\n        }\n    }\n    return $nums;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpei_w456j.pl
    line 16.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $arr_ref = [];\n    foreach my $n (@$nums) {\n   \
    \     my $sum = 0;\n        foreach my $d (split //, $n) {\n            $sum +=\
    \ $d;\n        }\n        push @$arr_ref, [$n, $sum];\n    }\n    return [map\
    \ {$_->[0]} sort {$a->[1] <=> $b->[1]} @$arr_ref];\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ret;\n    if (scalar(@$nums) == 0) {\n        return\
    \ $nums;\n    }\n    foreach my $key (@$nums) {\n        my $k = $key;\n     \
    \   my $r = 0;\n        while ($k) {\n            $r += $k % 10;\n           \
    \ $k = int($k / 10);\n        }\n        $ret[$r] = $key;\n    }\n    return @ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_nums = @$nums;\n    # ...\n    return @sorted_nums;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    if(@$nums == 0) {\n        return @$nums;\n    }\n  \
    \  my @sorted = sort {\n        my $sum1 = sum(split //, abs($a));\n        my\
    \ $sum2 = sum(split //, abs($b));\n        $sum1 <=> $sum2 or\n        $a <=>\
    \ $b\n    } @$nums;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmpou2rtouf.pl line 16.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {\n        my @a_digits = split //,\
    \ $a;\n        my @b_digits = split //, $b;\n        sum(@a_digits) <=> sum(@b_digits)\n\
    \            ||\n        $a <=> $b\n    } @$nums;\n    return \\@sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmpetgb0ggy.pl line 15.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @nums = @$nums;\n    @nums = map { $_->[0] }\n   \
    \         sort { $a->[1] <=> $b->[1] || $a->[2] <=> $b->[2] }\n            map\
    \ { [ $_, sum_digits($_), $count++ ] }\n            @nums;\n    return \\@nums;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpql2rliup.pl line
    15.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ordered = sort { sum_digits($a) <=> sum_digits($b)\
    \ or $a <=> $b } @$nums;\n    return \\@ordered;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp3sy18k9m.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @indexed_nums = map { [sum_digits($_), $_] } @$nums;\n\
    \    my @sorted_nums = sort { $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] } @indexed_nums;\n\
    \    return [map { $_->[1] } @sorted_nums];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp1kh3kvnj.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if (scalar(@$nums) == 0);\n    return [sort\
    \ {\n        if ($a == $b) {\n            $a <=> $b;\n        } else {\n     \
    \       sum_digits($a) <=> sum_digits($b);\n        }\n    } @$nums];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpx8x_ihus.pl line
    17.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $result = [];\n    my %indexes = ();\n    foreach\
    \ my $i (0..$#$nums) {\n        my $score = 0;\n        $score += $_ for (split\
    \ //, $nums->[$i]);\n        $indexes{$score} //= [];\n        push @{$indexes{$score}},\
    \ $i;\n    }\n    foreach my $score (sort {$a <=> $b} keys %indexes) {\n     \
    \   foreach my $i (@{$indexes{$score}}) {\n            push @$result, $nums->[$i];\n\
    \        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @nums = @$nums;\n    # 0\n    return [] if !@nums;\n\
    \    my @sum_nums = map{sum_of_digits($_)} @nums;\n    my %num2idx = ();\n   \
    \ my @idxs = (0..(@nums-1));\n    for my $i (@idxs){\n        $num2idx{$nums[$i]}\
    \ = $i;\n    }\n    # 1\n    my @ret = sort {$sum_nums[$a] <=> $sum_nums[$b]}\
    \ @idxs;\n    # 2\n    @ret = map{$nums[$_]} @ret;\n    return \\@ret;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp1fvmkffy.pl
    line 15.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    @$nums = sort {sum_of_digits($a) <=> sum_of_digits($b)\
    \ || $a <=> $b} @$nums;\n    return $nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpsprq37dq.pl
    line 12.

    '
  stdout: ''
  timestamp: 1659821205
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ordered = map { $_->[0] }\n        sort { $a->[1]\
    \ <=> $b->[1] || $a->[2] <=> $b->[2] }\n        map { [$_, sum_digits($_), $_]\
    \ }\n        @$nums;\n    return \\@ordered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpv4m6fmzn.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_indexes =\n      sort { sum_of_digits($nums->[$a])\
    \ <=> sum_of_digits($nums->[$b]) }\n      0 .. $#$nums;\n    return [ map { $nums->[$_]\
    \ } @sorted_indexes ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpka4xh516.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_indexes = sort {\n        sum_of_digits($nums->[$a])\
    \ <=> sum_of_digits($nums->[$b]) ||\n        $a <=> $b\n    } 0..$#$nums;\n  \
    \  return [map { $nums->[$_] } @sorted_indexes];\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmph8g0o3la.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {\n        my $sum_a = sum(split(//,\
    \ abs($a)));\n        my $sum_b = sum(split(//, abs($b)));\n        if ($sum_a\
    \ == $sum_b) {\n            return $a <=> $b;\n        }\n        return $sum_a\
    \ <=> $sum_b;\n    } @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp4px9lnt7.pl line 13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_nums = sort { digit_sum($a) <=> digit_sum($b)\
    \ } @$nums;\n    return @sorted_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::digit_sum called at /tmp/tmpv__3t0w4.pl line
    12.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = map {$_->[0]}\n        sort {$a->[1] <=>\
    \ $b->[1] || $a->[2] <=> $b->[2]}\n        map {[$_, digsum($_), $_ == abs($_)\
    \ ? -1 : -2]}\n        @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::digsum called at /tmp/tmptf99ard6.pl line 14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ret;\n    my %hash;\n    my @sum;\n    foreach my\
    \ $i (@$nums) {\n        my $sum = 0;\n        $sum += $_ for split //, abs($i);\n\
    \        push @sum, $sum;\n        $hash{$sum} = [] unless exists $hash{$sum};\n\
    \        push @{$hash{$sum}}, $i;\n    }\n    foreach my $i (sort {$a <=> $b}\
    \ @sum) {\n        push @ret, @{$hash{$i}};\n    }\n    return \\@ret;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    # This has a lot of assumptions in it.\n    # It will\
    \ not work with non-integer numbers,\n    # and it will produce strange results\
    \ for numbers\n    # with more than one digit which sum to the same value.\n \
    \   # But it's close enough for me.\n    return (sort { digitsum($a) <=> digitsum($b)\
    \ or $a <=> $b } @$nums);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::digitsum called at /tmp/tmpl_esdl_a.pl line
    17.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort {\n        $a <=> $b\n    } @$nums;\n\
    \    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if !$nums || @$nums == 0;\n    return $nums\
    \ if @$nums == 1;\n    my @ans = sort { $a <=> $b } @$nums;\n    my @num_index;\n\
    \    for my $i (0..$#ans) {\n        my $num = $ans[$i];\n        my $sum = 0;\n\
    \        my $n = $num;\n        while ($n != 0) {\n            $sum += $n % 10;\n\
    \            $n = int($n / 10);\n        }\n        push @num_index, [$num, $i,\
    \ $sum];\n    }\n    @num_index = sort { $a->[2] <=> $b->[2] || $a->[1] <=> $b->[1]\
    \ } @num_index;\n    @ans = map { $_->[0] } @num_index;\n    return \\@ans;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { $a->[0] <=> $b->[0] || $a->[1] <=>\
    \ $b->[1] }\n    map { [sum_digits($_), $_] } @$nums;\n    return [map { $_->[1]\
    \ } @sorted];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpu82r0fvu.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    # TODO Implement me!\n    my @result = sort {\n     \
    \   digits_sum($a) <=> digits_sum($b)\n        || $a <=> $b\n    } @$nums;\n \
    \   return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::digits_sum called at /tmp/tmp3ujemtdk.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %nums_hash = ();\n    for my $num (@$nums) {\n   \
    \     my $sum = 0;\n        while($num) {\n            $sum += $num % 10;\n  \
    \          $num = int($num / 10);\n        }\n        push @{$nums_hash{$sum}},\
    \ $num;\n    }\n    my @sorted_keys = sort {$a <=> $b} keys %nums_hash;\n    my\
    \ @res = ();\n    for my $sum (@sorted_keys) {\n        push @res, @{$nums_hash{$sum}};\n\
    \    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return $nums if scalar @$nums == 0;\n    my @sorted_nums\
    \ = sort { $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] } map { [sum_digits($_),\
    \ $_] } @$nums;\n    return [map { $_->[1] } @sorted_nums];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpomr1m32o.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if @$nums == 0;\n    my @nums = @$nums;\n \
    \   my @sorted_nums = sort { points($a) <=> points($b) || $a <=> $b } @nums;\n\
    \    return \\@sorted_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::points called at /tmp/tmpitf6hgeh.pl line 14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %h;\n    for my $idx (0..$#$nums) {\n        my $sum\
    \ = 0;\n        $sum += $_ for split //, abs $nums->[$idx];\n        push @{$h{$sum}},\
    \ $idx;\n    }\n    my @result;\n    for my $sum (sort {$a <=> $b} keys %h) {\n\
    \        my @idx = @{$h{$sum}};\n        push @result, @{$nums}[@idx];\n    }\n\
    \    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if (!$nums || @$nums == 0);\n    my %H;\n \
    \   foreach my $num (@$nums) {\n        my $sum = 0;\n        while ($num > 0)\
    \ {\n            $sum += $num % 10;\n            $num /= 10;\n        }\n    \
    \    push @{$H{$sum}}, $num;\n    }\n    my @sorted_nums = ();\n    foreach my\
    \ $k (sort {$a <=> $b} keys %H) {\n        push @sorted_nums, @{$H{$k}};\n   \
    \ }\n    return \\@sorted_nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $size = @$nums;\n    if ($size == 0) {\n        return\
    \ $nums;\n    }\n    my @array = ();\n    my $i = 0;\n    while ($i < $size) {\n\
    \        my $n = $nums->[$i];\n        if ($n == 0) {\n            push @array,\
    \ $n;\n        } else {\n            my $s = 0;\n            if ($n < 0) {\n \
    \               $n = -$n;\n            }\n            while ($n > 0) {\n     \
    \           $s += $n % 10;\n                $n = int($n / 10);\n            }\n\
    \            push @array, [$i, $s];\n        }\n        $i++;\n    }\n    @array\
    \ = sort { $a->[1] <=> $b->[1] } @array;\n    my @sorted = ();\n    for my $item\
    \ (@array) {\n        if (@$item == 1) {\n            push @sorted, $item->[0];\n\
    \        } else {\n            push @sorted, $nums->[$item->[0]];\n        }\n\
    \    }\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $sum = sub {\n        my($num) = @_;\n        my $total\
    \ = 0;\n        while ($num) {\n            $total += $num % 10;\n           \
    \ $num /= 10;\n        }\n        return $total;\n    };\n    return sort {\n\
    \        if ($sum->($a) == $sum->($b)) {\n            return $a <=> $b;\n    \
    \    }\n        return $sum->($a) <=> $sum->($b);\n    } @$nums;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    $nums or return [];\n    [sort {\n        lc($a->[0])\
    \ cmp lc($b->[0])\n        or\n        $a->[1] <=> $b->[1]\n    } map {\n    \
    \    my $temp = 0;\n        $temp += $_ for split(//, abs $_);\n        [$temp,\
    \ $_]\n    } @$nums];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %sum_index_hash;\n    for (my $i = 0; $i < scalar\
    \ @$nums; $i++) {\n        my $temp = $nums->[$i];\n        my $sum = 0;\n   \
    \     while ($temp != 0) {\n            $sum += $temp % 10;\n            $temp\
    \ = int($temp / 10);\n        }\n        push @{$sum_index_hash{$sum}}, $i;\n\
    \    }\n    my @keys = sort keys %sum_index_hash;\n    my @result;\n    for (my\
    \ $i = 0; $i < scalar @keys; $i++) {\n        for (my $j = 0; $j < scalar @{$sum_index_hash{$keys[$i]}};\
    \ $j++) {\n            push @result, $nums->[$sum_index_hash{$keys[$i]}->[$j]];\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if scalar @$nums == 0;\n    my %hash;\n   \
    \ for my $i (0..scalar @$nums - 1) {\n        my $sum = 0;\n        my $num =\
    \ $nums->[$i];\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = int($num / 10);\n        }\n        push @{$hash{$sum}}, $i;\n\
    \    }\n    my @results;\n    for my $key (sort {$a <=> $b} keys %hash) {\n  \
    \      my $arr = $hash{$key};\n        @$arr = sort {$a <=> $b} @$arr;\n     \
    \   for my $pos (@$arr) {\n            push @results, $nums->[$pos];\n       \
    \ }\n    }\n    return \\@results;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ret = sort {\n        my $a_sum = get_sum_of_digits($a);\n\
    \        my $b_sum = get_sum_of_digits($b);\n        if ($a_sum == $b_sum) {\n\
    \            return ($a <=> $b);\n        } else {\n            return ($a_sum\
    \ <=> $b_sum);\n        }\n    } @$nums;\n    return \\@ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::get_sum_of_digits called at /tmp/tmp182ynqar.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = ();\n    my @sort_nums = ();\n    my @idx\
    \ = ();\n    my $len = @$nums;\n    my $t;\n    my $k;\n    my $j;\n    for($t\
    \ = 0; $t < $len; $t++) {\n        $k = split_digits($nums->[$t]);\n        push(@sort_nums,\
    \ $k);\n        push(@idx, $t);\n    }\n    for($t = 1; $t < $len; $t++) {\n \
    \       $k = $sort_nums[$t];\n        $j = $idx[$t];\n        $len = $t - 1;\n\
    \        while($len >= 0 && $sort_nums[$len] > $k) {\n            $sort_nums[$len\
    \ + 1] = $sort_nums[$len];\n            $idx[$len + 1] = $idx[$len];\n       \
    \     $len--;\n        }\n        $sort_nums[$len + 1] = $k;\n        $idx[$len\
    \ + 1] = $j;\n    }\n    for($t = 0; $t < @$nums; $t++) {\n        push(@result,\
    \ $nums->[$idx[$t]]);\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::split_digits called at /tmp/tmpiexf_uwr.pl
    line 20.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return [] if !@$nums;\n    # TODO: implement order_by_points\n\
    \    my @sorted_nums = sort { a($a) <=> a($b) } @$nums;\n    return \\@sorted_nums;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::a called at /tmp/tmpt84aoc0n.pl line 14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %new;\n    for my $k (0..scalar(@$nums)-1) {\n   \
    \     $new{$k} = sum_of_digits($nums->[$k]);\n    }\n    my @res = map {\n   \
    \     $nums->[$_]\n    } sort {\n        $new{$a} <=> $new{$b}\n    } keys %new;\n\
    \    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpgqma9bhz.pl
    line 14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    @$nums = sort {\n        $a = sum_digits($a);\n     \
    \   $b = sum_digits($b);\n        return $a <=> $b || $nums->[$a] <=> $nums->[$b];\n\
    \    } @$nums;\n    return $nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpubfaix6i.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { int(sum(split //, $a)) <=> int(sum(split\
    \ //, $b)) } @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp7kt93_ng.pl line 12.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = sort { sum_of_digits($a) <=> sum_of_digits($b)\
    \ || $a <=> $b } @$nums;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpo9wbfja6.pl
    line 12.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = sort {\n        sum_digits($a) <=> sum_digits($b)\n\
    \        || $a <=> $b\n    } @$nums;\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpj91ubtka.pl line
    13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $index = 0;\n    my @indexed = map {\n        [$_,\
    \ $index++, sum_digits($_)]\n    } @$nums;\n    my @sorted = sort {\n        $a->[2]\
    \ <=> $b->[2]\n        || $a->[1] <=> $b->[1]\n    } @indexed;\n    return [map\
    \ { $_->[0] } @sorted];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -11, -32, 43,\
    \ 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp_cr7y5r5.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    @{$nums} = map { $_->[0] }\n        sort { $a->[1] <=>\
    \ $b->[1] || $a->[2] <=> $b->[2] }\n        map { [$_, sum_digits($_), $i++] }\n\
    \        @{$nums};\n    return $nums;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmpccaxp8p9.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my $indices = [0..$#$nums];\n    my @pairs = sort {\n\
    \        sum_digits($a) <=> sum_digits($b)\n        || $indices->[$a] <=> $indices->[$b]\n\
    \    } @$nums;\n    @pairs;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_digits called at /tmp/tmp2m042a9k.pl line
    14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted = map { $_->[0] }\n                sort {\
    \ $a->[1] <=> $b->[1] }\n                map { [$_, sum_of_digits($_)] }\n   \
    \             @$nums;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp557tvhvg.pl
    line 14.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = map { $_->[0] } sort { $a->[1] <=> $b->[1]\
    \ } map { [$_, sum_of_digits($_)] } @$nums;\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmp4ytk0nsz.pl
    line 12.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my %sums;\n    for my $n (@$nums) {\n        my $sum\
    \ = 0;\n        for my $digit (split //, $n) {\n            $sum += $digit;\n\
    \        }\n        push @{$sums{$sum}}, $n;\n    }\n    my @nums = map { @{$sums{$_}}\
    \ } sort { $a <=> $b } keys %sums;\n    return \\@nums;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ret;\n    if(!defined($nums)) {\n        return @ret;\n\
    \    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpq0u6p1uv.pl line 47, at
    end of line

    syntax error at /tmp/tmpq0u6p1uv.pl line 47, at EOF

    Execution of /tmp/tmpq0u6p1uv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @res = ();\n    my %hash = ();\n    for (my $i = 0;\
    \ $i < scalar(@$nums); $i++) {\n        my $res = 0;\n        for (my $j = 0;\
    \ $j < length($nums->[$i]); $j++) {\n            $res += substr($nums->[$i], $j,\
    \ 1);\n        }\n        push(@{$hash{$res}}, $nums->[$i]);\n    }\n    for my\
    \ $key (sort {$a <=> $b} keys %hash) {\n        for (my $i = 0; $i < scalar(@{$hash{$key}});\
    \ $i++) {\n            push(@res, $hash{$key}[$i]);\n        }\n    }\n    return\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @sorted_nums = map {$_->[0]}\n                   \
    \   sort { $a->[1] <=> $b->[1] }\n                      map { [$_, join '', sort\
    \ split //, $_] }\n                      @$nums;\n    return \\@sorted_nums;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @result = sort {my($a_sum) = sum($a); my($b_sum) =\
    \ sum($b); $a_sum <=> $b_sum || $a <=> $b} @$nums;\n    return \\@result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum called at /tmp/tmp9rocxorf.pl line 12.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    return map { $_->[0] } sort { $a->[1] <=> $b->[1] } map\
    \ {\n        [ $_, sum_of_digits($_) ]\n    } @$nums;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&order_by_points;\n        if(eq_deeply($candidate->([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::sum_of_digits called at /tmp/tmpgu58annf.pl
    line 13.

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 255
  program: "# Write a function which sorts the given array of integers\n# in ascending\
    \ order according to the sum of their digits.\n# Note: if there are several items\
    \ with similar sum of their digits,\n# order them based on their index in original\
    \ array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1,\
    \ -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n \
    \   my($nums) = @_;\n    my @ans;\n    my @sum_of_digits = map { sumofdigits($_)\
    \ } @$nums;\n    my %index;\n    @index{@$nums} = 0..$#$nums;\n    my @unique_sum_of_digits\
    \ = sort { $a <=> $b } uniq @sum_of_digits;\n    for my $i (@unique_sum_of_digits)\
    \ {\n        push @ans, sort { $index{$a} <=> $index{$b} }\n                 \
    \    grep { sumofdigits($_) == $i } @$nums;\n    }\n    return \\@ans;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&order_by_points;\n\
    \        if(eq_deeply($candidate->([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Array found where operator expected at /tmp/tmp67_8466u.pl line 16, near\
    \ \"uniq @sum_of_digits\"\n\t(Do you need to predeclare uniq?)\nsyntax error at\
    \ /tmp/tmp67_8466u.pl line 16, near \"uniq @sum_of_digits\"\nBEGIN not safe after\
    \ errors--compilation aborted at /tmp/tmp67_8466u.pl line 23.\n"
  stdout: ''
  timestamp: 1660014016
