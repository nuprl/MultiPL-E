name: HumanEval_158_find_max
language: pl
prompt: "# Write a function that accepts an array of strings.\n# The array contains\
  \ different words. Return the word with maximum number\n# of unique characters.\
  \ If multiple strings have maximum number of unique\n# characters, return the one\
  \ which comes first in lexicographical order.\n# >>> find_max([\"name\", \"of\"\
  , \"string\"])\n# \"string\"\n# >>> find_max([\"name\", \"enam\", \"game\"])\n#\
  \ \"enam\"\n# >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\nsub find_max\
  \ {\n    my($words) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n\
  \        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"\
  cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\"\
  , \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\",\
  \ \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max_word = \"\";\n    my $max_char = 0;\n    for my $word (@$words)\
    \ {\n        my $char = unique_char($word);\n        if ($char > $max_char) {\n\
    \            $max_char = $char;\n            $max_word = $word;\n        }\n \
    \   }\n    return $max_word;\n}", "    my $max_word = \"\";\n    my $max_count\
    \ = 0;\n    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_len = 0;\n    my $min_word = $words->[0];\n    foreach my $word (@$words)\
    \ {\n        my $len = length(uniq_chars($word));\n        if($len > $max_len)\
    \ {\n            $max_len = $len;\n            $min_word = $word;\n        }\n\
    \        elsif($len == $max_len) {\n            if($word lt $min_word) {\n   \
    \             $min_word = $word;\n            }\n        }\n    }\n    return\
    \ $min_word;\n}", "    my $maxWord;\n    my $maxUniqueLetters = 0;\n    foreach\
    \ my $word (@$words) {\n        my %wordLetters;\n        foreach my $letter (split\
    \ //, $word) {\n            $wordLetters{$letter} = 1;\n        }\n        my\
    \ $numUniqueLetters = scalar keys %wordLetters;\n        if ($numUniqueLetters\
    \ > $maxUniqueLetters) {\n            $maxUniqueLetters = $numUniqueLetters;\n\
    \            $maxWord = $word;\n        }\n    }\n    return $maxWord;\n}", " \
    \   my($word, $maxword);\n    my $max = 0;\n    foreach $word (@$words) {\n  \
    \      my $length = scalar(keys %{{map {$_, 1} split //, $word}});\n        if\
    \ ($length > $max) {\n            $max = $length;\n            $maxword = $word;\n\
    \        }\n    }\n    return $maxword;\n}", "    my $max_count = 0;\n    my $max_word;\n\
    \    foreach my $word (@$words) {\n        my %chars;\n        @chars{split //,\
    \ $word} = ();\n        my $count = scalar keys %chars;\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my %uniques = map { $_ => 1\
    \ } @$words;\n    my $winner;\n    for my $word (@$words) {\n        for my $c\
    \ (split //, $word) {\n            delete $uniques{$word} if $uniques{$c};\n \
    \       }\n        $winner = $word if $uniques{$word};\n    }\n    return $winner;\n\
    }", "    return reduce { scalar keys %{{map {($_, 1)} split(//, $a)}} > scalar\
    \ keys %{{map {($_, 1)} split(//, $b)}} ? $a : $b } @$words;\n}", "    my %lengths;\n\
    \    for my $word (@$words) {\n        my %chars;\n        for my $char (split\
    \ //, $word) {\n            $chars{$char} = 1;\n        }\n        $lengths{$word}\
    \ = scalar keys %chars;\n    }\n    my @sorted = sort {$lengths{$b} <=> $lengths{$a}\
    \ or $a cmp $b} keys %lengths;\n    return $sorted[0];\n}", "    my @words = @$words;\n\
    \    my $max_word = \"\";\n    my $max_unique_chars = 0;\n    for my $word (@words)\
    \ {\n        my %seen = ();\n        my $unique_chars = 0;\n        for my $char\
    \ (split //, $word) {\n            $unique_chars++ if !exists $seen{$char};\n\
    \            $seen{$char} = 1;\n        }\n        if ($unique_chars > $max_unique_chars)\
    \ {\n            $max_unique_chars = $unique_chars;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_count = 0;\n    my\
    \ $max_word = \"\";\n    for my $word (@$words) {\n        my %seen;\n       \
    \ for my $char (split \"\", $word) {\n            $seen{$char} = 1;\n        }\n\
    \        my $count = scalar keys %seen;\n        if ($count > $max_count || ($count\
    \ == $max_count && $word lt $max_word)) {\n            $max_count = $count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    my $max = 0;\n    my $selected = \"\";\n    foreach my $word (@$words) {\n\
    \        my $set = {};\n        foreach my $c (split //, $word) {\n          \
    \  $set->{$c} = 1;\n        }\n        my $length = scalar keys %$set;\n     \
    \   if ($length > $max) {\n            $max = $length;\n            $selected\
    \ = $word;\n        }\n    }\n    return $selected;\n}", "    my($word) = '';\n\
    \    my($count) = 0;\n    my($result) = '';\n    foreach $word (@$words) {\n \
    \       if (unique_chars($word) > $count) {\n            $count = unique_chars($word);\n\
    \            $result = $word;\n        }\n    }\n    return $result;\n}", "  \
    \  my $max_word = \"\";\n    my $max_uniq_chars = 0;\n    foreach my $word (@$words)\
    \ {\n        my $num_uniq_chars = uniq_chars($word);\n        if ($num_uniq_chars\
    \ > $max_uniq_chars) {\n            $max_uniq_chars = $num_uniq_chars;\n     \
    \       $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "   \
    \ my $max_wrd = $words->[0];\n    my $max_count = unique_chars($max_wrd);\n  \
    \  foreach my $wrd (@$words) {\n        my $count = unique_chars($wrd);\n    \
    \    if ($count > $max_count ||\n            ($count == $max_count && $wrd lt\
    \ $max_wrd)) {\n            $max_wrd = $wrd;\n            $max_count = $count;\n\
    \        }\n    }\n    return $max_wrd;\n}", "    my $max_count = 0;\n    my $max_word;\n\
    \    for my $word (@$words) {\n        my $count = unique_char_count($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max;\n    my %count;\n    foreach my $w (@$words) {\n        $count{$w} = length(join('',\
    \ keys(%{{ map { ($_, 1) } (split('', $w))}})));\n        $max = $w unless $max;\n\
    \        if ($count{$w} > $count{$max}) {\n            $max = $w;\n        } elsif\
    \ ($count{$w} == $count{$max}) {\n            $max = ($w lt $max) ? $w : $max;\n\
    \        }\n    }\n    return $max;\n}", "    # max is the index of the word with\
    \ maximum number of unique characters.\n    my $max = 0;\n    # Go over each word\
    \ and keep track of:\n    #   - the number of unique characters in each word,\n\
    \    #   - the number of unique characters in the most unique word so far,\n \
    \   #   - and the index of the most unique word so far.\n    for my $i (0 .. $#$words)\
    \ {\n        my %chars;\n        my $word = $words->[$i];\n        for my $char\
    \ (split //, $word) {\n            $chars{$char} = 1;\n        }\n        my $n\
    \ = scalar keys %chars;\n        my $best = scalar keys %{ { split //, $words->[$max]\
    \ } };\n        if ($n > $best) {\n            $max = $i;\n        }\n    }\n\
    \    return $words->[$max];\n}", "    my $m = 0;\n    my $k = \"\";\n    for my\
    \ $w (@$words) {\n        my %vis = ();\n        for my $c (split //, $w) {\n\
    \            $vis{$c} = 1;\n        }\n        my $n = scalar keys %vis;\n   \
    \     if ($n > $m) {\n            $m = $n;\n            $k = $w;\n        }\n\
    \    }\n    return $k;\n}", "    my @words = @$words;\n    my %max_word;\n   \
    \ my %seen;\n    my $max = 0;\n    foreach my $word (@words) {\n        # %seen\
    \ = ();\n        my $count = 0;\n        foreach my $char (split('', $word)) {\n\
    \            next if exists $seen{$char};\n            $seen{$char} = 1;\n   \
    \         $count++;\n        }\n        if ($count > $max) {\n            $max\
    \ = $count;\n            %max_word = ($word => $count);\n        }\n    }\n  \
    \  foreach my $word (keys %max_word) {\n        return $word;\n    }\n}", "  \
    \  my %chars;\n    my $max_count = 0;\n    my $max_string = \"\";\n    for my\
    \ $word (@$words) {\n        for my $char (split(//, $word)) {\n            $chars{$char}++;\n\
    \        }\n        my $count = scalar keys %chars;\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_string = $word;\n    \
    \    }\n        %chars = ();\n    }\n    return $max_string;\n}", "    my $max_word\
    \ = '';\n    my $count = 0;\n    for my $word (@$words) {\n        my %uniq_chars\
    \ = map { $_ => 1 } split(//, $word);\n        my $uniq_count = scalar keys %uniq_chars;\n\
    \        if ($uniq_count > $count) {\n            $count = $uniq_count;\n    \
    \        $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "  \
    \  my $max_word = $words->[0];\n    my $max_chars = scalar(unique_chars($max_word));\n\
    \    for my $word (@$words) {\n        my $chars = scalar(unique_chars($word));\n\
    \        if($chars > $max_chars) {\n            $max_chars = $chars;\n       \
    \     $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max = 0;\n    my $result = '';\n    for my $word (@$words) {\n        my $characters\
    \ = {};\n        for my $char (split //, $word) {\n            $characters->{$char}\
    \ = 1;\n        }\n        my $count = scalar keys %$characters;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $result = $word;\n      \
    \  }\n    }\n    return $result;\n}", "    my $max_length = 0;\n    my $max_string\
    \ = \"\";\n    foreach my $word (@$words) {\n        my $unique_characters = uniq_characters($word);\n\
    \        if (length($unique_characters) > $max_length) {\n            $max_length\
    \ = length($unique_characters);\n            $max_string = $word;\n        }\n\
    \    }\n    return $max_string;\n}", "    my %max_hash;\n    for my $word (@$words)\
    \ {\n        my %temp_hash;\n        for my $char (split //, $word) {\n      \
    \      $temp_hash{$char} = 1;\n        }\n        my $size = scalar keys %temp_hash;\n\
    \        if (!defined $max_hash{size} || $size > $max_hash{size}) {\n        \
    \    $max_hash{size} = $size;\n            $max_hash{word} = $word;\n        }\n\
    \    }\n    return $max_hash{word};\n}", "    my $max = '';\n    foreach my $word\
    \ (@$words) {\n        if(length($word) > length($max)) {\n            $max =\
    \ $word;\n        }\n    }\n    return $max;\n}", "    my($max_word) = shift @$words;\n\
    \    my($max_count) = get_uniq_count($max_word);\n    foreach my $word (@$words)\
    \ {\n        my($count) = get_uniq_count($word);\n        if($count > $max_count\
    \ || ($count == $max_count && $word lt $max_word)) {\n            $max_word =\
    \ $word;\n            $max_count = $count;\n        }\n    }\n    return $max_word;\n\
    }", "    my $max_word = \"\";\n    my $max_uniq = 0;\n    foreach my $word (@$words)\
    \ {\n        my $uniq = uniq_chars($word);\n        if ($uniq > $max_uniq ||\n\
    \            ($uniq == $max_uniq && $word lt $max_word)) {\n            $max_word\
    \ = $word;\n            $max_uniq = $uniq;\n        }\n    }\n    return $max_word;\n\
    }", "    my $max = \"\";\n    my $max_count = 0;\n    foreach my $word (@$words)\
    \ {\n        my $count = unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max = $word;\n            $max_count = $count;\n        }\n\
    \    }\n    return $max;\n}", "    my $max_word = $words->[0];\n    my $max_uniq\
    \ = uniq_chars($max_word);\n    for my $word (@$words) {\n        my $uniq = uniq_chars($word);\n\
    \        if ($uniq > $max_uniq) {\n            $max_uniq = $uniq;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my $result\
    \ = \"\";\n    my $max_len = 0;\n    foreach my $word (@$words) {\n        my\
    \ $len = length(scalar keys %{{ map { $_ => 1 } split //, $word }});\n       \
    \ if ($len > $max_len) {\n            $max_len = $len;\n            $result =\
    \ $word;\n        }\n    }\n    return $result;\n}", "    my($max_word) = $words->[0];\n\
    \    my($max_uniq_char) = count_uniq_char($max_word);\n    for my $i (1..$#$words)\
    \ {\n        my($word) = $words->[$i];\n        my($uniq_char) = count_uniq_char($word);\n\
    \        if ($uniq_char > $max_uniq_char ||\n            ($uniq_char == $max_uniq_char\
    \ && $word lt $max_word)) {\n            $max_word = $word;\n            $max_uniq_char\
    \ = $uniq_char;\n        }\n    }\n    return $max_word;\n}", "    my($max);\n\
    \    my(%uniq, @uniq);\n    my(@words) = sort(@$words);\n    foreach my $word\
    \ (@words) {\n        $uniq{$word} = [ uniq(split(//, $word)) ];\n    }\n    $max\
    \ = 0;\n    @uniq = ();\n    foreach my $word (keys %uniq) {\n        my($len)\
    \ = scalar(@{$uniq{$word}});\n        if($len > $max) {\n            $max = $len;\n\
    \            @uniq = ();\n        }\n        if($len == $max) {\n            push(@uniq,\
    \ $word);\n        }\n    }\n    return $uniq[0];\n}", "    my($max, $maxword);\n\
    \    foreach my $word (@$words) {\n        my %hash;\n        $hash{$_} = 1 foreach\
    \ split(//, $word);\n        my $count = scalar keys %hash;\n        if(!$max\
    \ || $count > $max) {\n            $max = $count;\n            $maxword = $word;\n\
    \        }\n    }\n    return $maxword;\n}", "    my %count;\n    my %count_max;\n\
    \    my @len;\n    my $count = 0;\n    my $max = 0;\n    my $max_word;\n    my\
    \ $r = 0;\n    my $l = 0;\n    my $u = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $tmp = 0;\n    my $tmp1 = 0;\n    my $tmp2 = 0;\n    foreach my $word (@$words)\
    \ {\n        $count{$word} = 0;\n        $count_max{$word} = 0;\n        $len[$i]\
    \ = length($word);\n        $i++;\n    }\n    for ($j = 0; $j < $i; $j++) {\n\
    \        $tmp = $len[$j];\n        for ($u = 0; $u < $tmp; $u++) {\n         \
    \   my $letter = substr($words->[$j], $u, 1);\n            if (!defined($count{$words->[$j]}))\
    \ {\n                $count{$words->[$j]} = 0;\n            }\n            if\
    \ (!defined($count_max{$words->[$j]})) {\n                $count_max{$words->[$j]}\
    \ = 0;\n            }\n            $count{$words->[$j]}++;\n            if (!defined($count_max{$words->[$j]}))\
    \ {\n                $count_max{$words->[$j]} = 0;\n            }\n          \
    \  if ($u < ($tmp - 1)) {\n                $tmp1 = substr($words->[$j], $u+1,\
    \ 1);\n                if ($letter ne $tmp1) {\n                    $count_max{$words->[$j]}++;\n\
    \                }\n            } else {\n                $count_max{$words->[$j]}++;\n\
    \            }\n        }\n    }\n    foreach my $w (keys %count_max) {\n    \
    \    if ($count_max{$w} > $max) {\n            $max = $count_max{$w};\n      \
    \      $max_word = $w;\n        }\n    }\n   ", "    my($max_string) = \"\";\n\
    \    my($max_count) = 0;\n    foreach my $word (@$words) {\n        my(%char_counts)\
    \ = ();\n        foreach my $char (split(//, $word)) {\n            $char_counts{$char}++;\n\
    \        }\n        my($unique_count) = scalar(keys(%char_counts));\n        if($unique_count\
    \ > $max_count) {\n            $max_count = $unique_count;\n            $max_string\
    \ = $word;\n        }\n    }\n    return $max_string;\n}", "    my $max = \"\"\
    ;\n    my $max_num = 0;\n    for my $word (@$words) {\n        my %chars;\n  \
    \      for my $c (split(//, $word)) {\n            $chars{$c} = 1;\n        }\n\
    \        my $n = scalar(keys %chars);\n        if ($n > $max_num) {\n        \
    \    $max = $word;\n            $max_num = $n;\n        } elsif ($n == $max_num)\
    \ {\n            if ($word lt $max) {\n                $max = $word;\n       \
    \     }\n        }\n    }\n    return $max;\n}", "    return '' unless @$words;\n\
    \    my $max_word = $words->[0];\n    my $max_unique = 0;\n    foreach my $word\
    \ (@$words) {\n        my $unique = get_unique_chars($word);\n        if($unique\
    \ > $max_unique) {\n            $max_unique = $unique;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}", "    my $max;\n    my\
    \ $count = 1;\n    my $max_count = 1;\n    my %freq;\n    foreach my $word (@$words)\
    \ {\n        $max = $word;\n        $count = 1;\n        %freq = ();\n       \
    \ for (my $i = 0; $i < length($word); $i++) {\n            my $char = substr($word,\
    \ $i, 1);\n            if (exists $freq{$char}) {\n                $count--;\n\
    \            } else {\n                $count++;\n            }\n            $freq{$char}\
    \ = $i;\n        }\n        if ($count > $max_count) {\n            $max_count\
    \ = $count;\n            $max = $word;\n        }\n    }\n    return $max;\n}",
  "    my %word_lengths;\n    foreach my $word (@$words) {\n        my %seen;\n  \
    \      foreach my $letter (split(//, $word)) {\n            $seen{$letter} = 1;\n\
    \        }\n        $word_lengths{$word} = scalar(keys %seen);\n    }\n    return\
    \ (sort {$word_lengths{$b} <=> $word_lengths{$a} || $a cmp $b}\n            (keys\
    \ %word_lengths))[0];\n}", "    my $max_chars = 0;\n    my $max_word;\n    for\
    \ my $word (@$words) {\n        my %char_count;\n        for my $c (split //,\
    \ $word) {\n            $char_count{$c}++;\n        }\n        my $num_unique_chars\
    \ = scalar keys %char_count;\n        if ( $num_unique_chars > $max_chars ) {\n\
    \            $max_chars = $num_unique_chars;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_string = \"\";\n  \
    \  my $max_count = 0;\n    foreach my $w (@$words) {\n        my $count = count_unique_chars($w);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_string = $w;\n        }\n    }\n    return $max_string;\n}", "   \
    \ my @chars = ();\n    my $max = '';\n    my $i;\n    for $i (0..$#{$words}) {\n\
    \        $chars[$i] = [uniq(split(//, $words->[$i]))];\n        if (@{$chars[$i]}\
    \ > @{$chars[$max]}) {\n            $max = $i;\n        }\n    }\n    return $words->[$max];\n\
    }", "    # First, find the word with maximum number of unique characters.\n  \
    \  my $max = 0;\n    my $winner = \"\";\n    foreach my $word (@$words) {\n  \
    \      my %chars = ();\n        foreach my $c (split //, $word) {\n          \
    \  $chars{$c} = 1;\n        }\n        my $num = scalar keys %chars;\n       \
    \ if ($num > $max) {\n            $max = $num;\n            $winner = $word;\n\
    \        }\n    }\n    # Second, find the word with maximum number of unique characters\
    \ that\n    # appears first in lexicographical order.\n    my $lexmax = \"\";\n\
    \    foreach my $word (@$words) {\n        my %chars = ();\n        foreach my\
    \ $c (split //, $word) {\n            $chars{$c} = 1;\n        }\n        my $num\
    \ = scalar keys %chars;\n        if ($num == $max) {\n            if ($lexmax\
    \ eq \"\" || $word lt $lexmax) {\n                $lexmax = $word;\n         \
    \   }\n        }\n    }\n    # Return this winner.\n    return $lexmax;\n}", " \
    \   my $max_length = 0;\n    my $max_length_word = \"\";\n    foreach my $word\
    \ (@$words) {\n        my $length = length(uniq_letters($word));\n        if ($length\
    \ > $max_length) {\n            $max_length = $length;\n            $max_length_word\
    \ = $word;\n        }\n    }\n    return $max_length_word;\n}", "    my %chars;\n\
    \    my $max = 0;\n    my $ret = \"\";\n    for my $word (@$words) {\n       \
    \ %chars = ();\n        for my $c (split //, $word) {\n            $chars{$c}\
    \ = 1;\n        }\n        my $uniques = scalar keys %chars;\n        if ($uniques\
    \ > $max) {\n            $max = $uniques;\n            $ret = $word;\n       \
    \ }\n    }\n    return $ret;\n}", "    my $max = (sort { length($b) <=> length($a)\
    \ || $a cmp $b } @$words)[0];\n    return $max;\n}", "    my $result = \"\";\n\
    \    my $count = 0;\n    foreach my $word (@$words) {\n        my %hash = map\
    \ { $_ => 1 } split //, $word;\n        my $hash_count = scalar keys %hash;\n\
    \        if ($hash_count > $count) {\n            $count = $hash_count;\n    \
    \        $result = $word;\n        }\n    }\n    return $result;\n}", "    my\
    \ $max = \"\";\n    my $count = 0;\n    foreach my $word (@$words) {\n       \
    \ my $characters = get_unique_characters($word);\n        my $size = scalar @$characters;\n\
    \        if ($size > $count) {\n            $max = $word;\n            $count\
    \ = $size;\n        }\n    }\n    return $max;\n}", "    my $result = \"\";\n\
    \    my $max_len = 0;\n    for (@$words) {\n        my %c;\n        @c{split \"\
    \"} = ();\n        my $size = keys %c;\n        if ($size > $max_len || $size\
    \ == $max_len && $_ lt $result) {\n            $max_len = $size;\n           \
    \ $result = $_;\n        }\n    }\n    return $result;\n}", "    my @chars;\n\
    \    my %hash;\n    my $max = 0;\n    my $word;\n    my $result;\n    foreach\
    \ my $word (@$words) {\n        @chars = split //, $word;\n        foreach my\
    \ $char (@chars) {\n            $hash{$char} = 1;\n        }\n        if(scalar\
    \ keys %hash > $max) {\n            $max = scalar keys %hash;\n            $result\
    \ = $word;\n        }\n        %hash = ();\n    }\n    return $result;\n}", " \
    \   my $maxWord = \"\";\n    my $maxCount = 0;\n    foreach my $word (@$words)\
    \ {\n        my $count = uniq_count($word);\n        if ($count > $maxCount) {\n\
    \            $maxCount = $count;\n            $maxWord = $word;\n        }\n \
    \   }\n    return $maxWord;\n}", "    my $max = \"\";\n    foreach my $word (@$words)\
    \ {\n        if (unique_count($word) > unique_count($max)) {\n            $max\
    \ = $word;\n        }\n    }\n    return $max;\n}", "    my($max_word, $max_len)\
    \ = ();\n    for my $word (@$words) {\n        my($len) = scalar(uniq_chars($word));\n\
    \        if (!defined($max_len) || $len > $max_len) {\n            $max_len =\
    \ $len;\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n\
    }", "    my $result = \"\";\n    my $max;\n    my $index = 0;\n    foreach my\
    \ $item (@$words) {\n        if (!defined $max) {\n            $max = uniques($item);\n\
    \            $result = $item;\n        } elsif (scalar(uniques($item)) > $max)\
    \ {\n            $max = uniques($item);\n            $result = $item;\n      \
    \  }\n        $index++;\n    }\n    return $result;\n}", "    my $max = {\n  \
    \      'word' => undef,\n        'unique_chars' => 0,\n    };\n    foreach my\
    \ $word (@$words) {\n        my $uniq = count_unique_chars($word);\n        if\
    \ ($uniq > $max->{'unique_chars'}) {\n            $max->{'word'} = $word;\n  \
    \          $max->{'unique_chars'} = $uniq;\n        }\n    }\n    return $max->{'word'};\n\
    }", "    my($max) = '';\n    foreach my $i (@$words) {\n        if ($max eq ''\
    \ || length(uniq_char($i)) > length(uniq_char($max))) {\n            $max = $i;\n\
    \        }\n    }\n    return $max;\n}", "    my $max_word = \"\";\n    my $max_count\
    \ = 0;\n    foreach my $word (@$words) {\n        my $len = length $word;\n  \
    \      my $u_len = scalar(uniq split(//, $word));\n        if ($u_len > $max_count)\
    \ {\n            $max_count = $u_len;\n            $max_word = $word;\n      \
    \  } elsif ($u_len == $max_count) {\n            if ($word lt $max_word) {\n \
    \               $max_word = $word;\n            }\n        }\n    }\n    return\
    \ $max_word;\n}", "    my @words = @$words;\n    my %result;\n    for my $word\
    \ (@words) {\n        my %letters;\n        @letters{split //, $word} = ();\n\
    \        $result{$word} = keys %letters;\n    }\n    my @w = sort { $result{$b}\
    \ <=> $result{$a} || $a cmp $b } @words;\n    return $w[0];\n}", "    my %max;\n\
    \    my $max_len = 0;\n    for my $word (@$words) {\n        my %table;\n    \
    \    $table{$_}++ for split //, $word;\n        my $len = scalar keys %table;\n\
    \        if ($len > $max_len) {\n            $max_len = $len;\n            $max{$word}\
    \ = 1;\n        } elsif ($len == $max_len) {\n            $max{$word} = 1;\n \
    \       }\n    }\n    return (sort keys %max)[0];\n}", "    my($max,$max_word);\n\
    \    foreach my $word (@$words) {\n        my $count = unique_chars($word);\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}", "    my $max_word = $words->[0];\n\
    \    my $max_word_len = 0;\n    for my $word (@$words) {\n        my $len = length(uniq_chars($word));\n\
    \        if ($len > $max_word_len) {\n            $max_word = $word;\n       \
    \     $max_word_len = $len;\n        }\n    }\n    return $max_word;\n}", "  \
    \  my @words = @$words;\n    my $max_string = '';\n    my $max_length = 0;\n \
    \   for my $word (@words) {\n        my $length = uniq_chars($word);\n       \
    \ if ($length > $max_length) {\n            $max_length = $length;\n         \
    \   $max_string = $word;\n        }\n    }\n    return $max_string;\n}", "   \
    \ my $max_word = $words->[0];\n    my $max_len = length(uniq($words->[0]));\n\
    \    foreach my $word (@$words) {\n        my $len = length(uniq($word));\n  \
    \      if ($len > $max_len) {\n            $max_len = $len;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}", "    my @uniq_words =\
    \ map { [$_, uniq_chars($_)] } @$words;\n    return maxstr @uniq_words;\n}", " \
    \   my @uniq_counts = map { [$_, scalar(uniq(split('', $_))) ] } @$words;\n  \
    \  my @sorted = sort { $b->[1] <=> $a->[1] } @uniq_counts;\n    return $sorted[0]->[0];\n\
    }", "    my %count;\n    my $max_count = 0;\n    my $max_word = '';\n    for my\
    \ $word (@$words) {\n        for my $char (split //, $word) {\n            $count{$word}{$char}\
    \ = 1;\n        }\n        my $current_count = scalar keys %{$count{$word}};\n\
    \        if ($current_count > $max_count ||\n            ($current_count == $max_count\
    \ && $word lt $max_word)) {\n            $max_count = $current_count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_chars = 0;\n    my $max_word;\n    for my $word (@$words) {\n        my\
    \ $num_chars = keys %{{ map {$_, 1} split '', $word }};\n        if ($num_chars\
    \ > $max_chars) {\n            $max_chars = $num_chars;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}", "    my %map = ();\n\
    \    my $max = \"\";\n    my $max_u = 0;\n    foreach (@$words) {\n        my\
    \ %m = ();\n        foreach (split //, $_) {\n            $m{$_} = 1;\n      \
    \  }\n        my $unique = scalar keys %m;\n        $map{$_} = $unique;\n    \
    \    if ($unique > $max_u) {\n            $max = $_;\n            $max_u = $unique;\n\
    \        }\n    }\n    return $max;\n}", "    my %counts;\n    my $max = 0;\n\
    \    my $str = \"\";\n    for my $w (@$words) {\n        my $c = count_unique($w);\n\
    \        if ($c > $max) {\n            $max = $c;\n            $str = $w;\n  \
    \      }\n    }\n    return $str;\n}", "    my $max = \"\";\n    my $max_size\
    \ = 0;\n    foreach (@$words) {\n        my %chars;\n        foreach (split //,\
    \ $_) {\n            $chars{$_} = 1;\n        }\n        my $size = scalar keys\
    \ %chars;\n        if ($size > $max_size) {\n            $max = $_;\n        \
    \    $max_size = $size;\n        }\n    }\n    return $max;\n}", "    my $max_string\
    \ = $words->[0];\n    my $max_len = max_unique_characters($max_string);\n    foreach\
    \ my $word (@$words) {\n        my $len = max_unique_characters($word);\n    \
    \    if ($len > $max_len) {\n            $max_len = $len;\n            $max_string\
    \ = $word;\n        }\n    }\n    return $max_string;\n}", "    my %uniques;\n\
    \    for my $word (@$words) {\n        my %letters;\n        $letters{$_}++ for\
    \ (split(//, $word));\n        $uniques{$word} = keys %letters;\n    }\n    my\
    \ @max_uniques = sort {$uniques{$b} <=> $uniques{$a}} grep {$uniques{$_} == max(values\
    \ %uniques)} keys %uniques;\n    return $max_uniques[0];\n}", "    my($word,$max,$max_word);\n\
    \    $max = 0;\n    foreach $word (@$words) {\n        my(%letters);\n       \
    \ # get only unique characters\n        my(@unique) = grep { ! $letters{$_}++\
    \ } split(//,$word);\n        if (scalar(@unique) > $max) {\n            $max\
    \ = scalar(@unique);\n            $max_word = $word;\n        }\n    }\n    return\
    \ $max_word;\n}", "    return undef unless defined $words;\n    my($max_uniq_chars,\
    \ $result) = (0, undef);\n    for my $word (@$words) {\n        my $uniq_chars\
    \ = 0;\n        for my $c (split //, $word) {\n            $uniq_chars++ if index($word,\
    \ $c) == rindex($word, $c);\n        }\n        if($uniq_chars > $max_uniq_chars\
    \ ||\n           ($uniq_chars == $max_uniq_chars && $word lt $result)) {\n   \
    \         $max_uniq_chars = $uniq_chars;\n            $result = $word;\n     \
    \   }\n    }\n    return $result;\n}", "    my $max_len = 0;\n    my $max_word\
    \ = '';\n    for my $word (@$words) {\n        my $len = length $word;\n     \
    \   if ($len > $max_len) {\n            $max_len = $len;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}", "    my $word = shift\
    \ @$words;\n    my %chars;\n    @chars{ split //, $word } = ();\n    for my $w\
    \ ( @$words ) {\n        my %chars;\n        @chars{ split //, $w } = ();\n  \
    \      if ( keys %chars > keys %chars ) {\n            $word = $w;\n        }\n\
    \    }\n    return $word;\n}", "    my $max_len = 0;\n    my $max_word = \"\"\
    ;\n    for my $word (@$words) {\n        if (uniq_len($word) > $max_len) {\n \
    \           $max_len = uniq_len($word);\n            $max_word = $word;\n    \
    \    }\n    }\n    return $max_word;\n}", "    my($max_word) = $words->[0];\n\
    \    my($max_count) = count_unique_chars($max_word);\n    for my $word (@$words)\
    \ {\n        my($count) = count_unique_chars($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}", "    my %count;\n    for my $word (@$words)\
    \ {\n        $count{$word} = eval '$'.$word.' =~ tr/a-z//';\n    }\n    return\
    \ (sort { $count{$b} <=> $count{$a} || $a cmp $b } @$words)[0];\n}", "    my($max_word)\
    \ = \"\";\n    my($max_chars) = 0;\n    foreach my $word (@$words) {\n       \
    \ my(%seen);\n        foreach my $ch (split(//, $word)) {\n            if (!$seen{$ch})\
    \ {\n                $seen{$ch} = 1;\n            }\n        }\n        my($num_chars)\
    \ = scalar(keys(%seen));\n        if ($num_chars > $max_chars ||\n           \
    \     ($num_chars == $max_chars && $word lt $max_word)) {\n            $max_chars\
    \ = $num_chars;\n            $max_word = $word;\n        }\n    }\n    return\
    \ $max_word;\n}", "    my %hash = ();\n    for my $word (@$words) {\n        my\
    \ $key = join('', sort split(//, $word));\n        $hash{$key} = $word;\n    }\n\
    \    my @keys = sort keys %hash;\n    return $hash{$keys[-1]};\n}", "    my @words\
    \ = @$words;\n    my $max_count = 0;\n    my $max_word = '';\n    for my $word\
    \ (@words) {\n        my $count = count_unique_chars($word);\n        if ($count\
    \ > $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my @words = @$words;\n    my\
    \ $max = $words[0];\n    my $index = 0;\n    my $max_index = 0;\n    my $max_len\
    \ = 0;\n    my %hash = ();\n    my $length = 0;\n    foreach my $word (@words)\
    \ {\n        %hash = ();\n        $length = 0;\n        foreach my $char (split\
    \ //, $word) {\n            if (!exists $hash{$char}) {\n                $hash{$char}\
    \ = $char;\n                $length++;\n            }\n        }\n        if ($length\
    \ > $max_len) {\n            $max_len = $length;\n            $max_index = $index;\n\
    \        }\n        $index++;\n    }\n    return $words[$max_index];\n}", "  \
    \  my %data;\n    my %count;\n    my $max_count = 0;\n    my $max_word;\n    foreach\
    \ my $word (@$words) {\n        $data{$word} = {};\n        foreach my $char (split\
    \ //, $word) {\n            $data{$word}{$char}++;\n        }\n        $count{$word}\
    \ = scalar keys %{$data{$word}};\n        if ($count{$word} > $max_count) {\n\
    \            $max_count = $count{$word};\n            $max_word = $word;\n   \
    \     }\n    }\n    return $max_word;\n}", "    my $best_word = \"\";\n    my\
    \ $best_unique_letters = 0;\n    for my $word (@$words) {\n        my %letters;\n\
    \        @letters{split //, $word} = ();\n        my $unique_letters = scalar\
    \ keys %letters;\n        if ($unique_letters > $best_unique_letters || ($unique_letters\
    \ == $best_unique_letters && $word lt $best_word)) {\n            $best_word =\
    \ $word;\n            $best_unique_letters = $unique_letters;\n        }\n   \
    \ }\n    return $best_word;\n}", "    my $max_count = 0;\n    my $max_word = \"\
    \";\n    foreach my $word (@$words) {\n        my $count = unique_count($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my($word,\
    \ $max, $max_word);\n    foreach $word (@$words) {\n        my %chars;\n     \
    \   my $ch;\n        my $unique = 0;\n        foreach $ch (split //, $word) {\n\
    \            if (!$chars{$ch}) {\n                $chars{$ch} = 1;\n         \
    \       $unique++;\n            }\n        }\n        if ($unique > $max) {\n\
    \            $max = $unique;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}", "    my $max_len = 0;\n    my $max_word = \"\";\n\
    \    for my $word (@$words) {\n        my %chars;\n        for my $char (split\
    \ //, $word) {\n            $chars{$char} = 1;\n        }\n        my $len = scalar\
    \ keys %chars;\n        if ($len > $max_len) {\n            $max_len = $len;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    my $max = 0;\n    my $word = \"\";\n    foreach my $word (@$words) {\n    \
    \    my %count = ();\n        my $unique = 0;\n        my @char = split(//, $word);\n\
    \        foreach my $char (@char) {\n            $count{$char}++;\n        }\n\
    \        foreach my $char (keys %count) {\n            if ($count{$char} == 1)\
    \ {\n                $unique++;\n            }\n        }\n        if ($unique\
    \ > $max) {\n            $max = $unique;\n            $word = $word;\n       \
    \ }\n    }\n    return $word;\n}", "    my @temp;\n    foreach my $word (@$words)\
    \ {\n        my $characters = get_unique_characters($word);\n        my $length\
    \ = scalar(@$characters);\n        push @temp, [$word, $length];\n    }\n    @temp\
    \ = sort { $b->[1] <=> $a->[1] || $a->[0] cmp $b->[0] } @temp;\n    return $temp[0][0];\n\
    }", "    my($max_word, $max_count) = (\"\", 0);\n    foreach my $word (@$words)\
    \ {\n        my %uniq_chars = ();\n        foreach my $char (split //, $word)\
    \ {\n            $uniq_chars{$char} = 1;\n        }\n        my $uniq_chars_count\
    \ = scalar keys %uniq_chars;\n        if ($uniq_chars_count > $max_count ||\n\
    \            ($uniq_chars_count == $max_count && $word lt $max_word)) {\n    \
    \        $max_word = $word;\n            $max_count = $uniq_chars_count;\n   \
    \     }\n    }\n    return $max_word;\n}", "    my($max_word) = $words->[0];\n\
    \    my($max_unique) = length(unpack(\"%32U*\", $max_word));\n    for (my($i)\
    \ = 1; $i < @$words; $i++) {\n        my($unique) = length(unpack(\"%32U*\", $words->[$i]));\n\
    \        if ($unique > $max_unique) {\n            $max_unique = $unique;\n  \
    \          $max_word = $words->[$i];\n        }\n    }\n    return $max_word;\n\
    }", "    my %dic;\n    my $max;\n    foreach (@$words) {\n        $dic{$_} = {};\n\
    \        foreach (split(\"\", $_)) {\n            $dic{$_}{$_} = 1;\n        }\n\
    \        if(!defined($max) || scalar(keys %{$dic{$_}}) > scalar(keys %{$dic{$max}}))\
    \ {\n            $max = $_;\n        }\n    }\n    return $max;\n}", "    my $max\
    \ = \"\";\n    foreach my $word (@$words) {\n        if ($max eq \"\" || num_unique($word)\
    \ > num_unique($max)) {\n            $max = $word;\n        }\n    }\n    return\
    \ $max;\n}", "    my $result = '';\n    my $count = 0;\n    foreach my $word (@$words)\
    \ {\n        my $n = num_unique_chars($word);\n        if ($n > $count) {\n  \
    \          $count = $n;\n            $result = $word;\n        }\n    }\n    return\
    \ $result;\n}", "    my($max_word) = \"\";\n    my($max_len) = 0;\n    foreach\
    \ my $word (@$words) {\n        my($set) = {};\n        foreach my $char (split\
    \ //, $word) {\n            $set->{$char} = 1;\n        }\n        my($len) =\
    \ scalar(keys %$set);\n        if ($len > $max_len) {\n            $max_len =\
    \ $len;\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n\
    }", "    my $max_word = $words->[0];\n    my $max_unique = 0;\n    for my $word\
    \ (@$words) {\n        my $unique = 0;\n        my %chars;\n        for my $char\
    \ (split //, $word) {\n            next if $chars{$char};\n            $chars{$char}\
    \ = 1;\n            $unique++;\n        }\n        if ($unique > $max_unique)\
    \ {\n            $max_unique = $unique;\n            $max_word = $word;\n    \
    \    }\n    }\n    return $max_word;\n}", "    my %count;\n    foreach my $word\
    \ (@$words) {\n        my %tmp;\n        $tmp{$_} = 1 foreach split(//, $word);\n\
    \        $count{$word} = scalar keys %tmp;\n    }\n    my @max = sort grep { $count{$_}\
    \ == $count{ $words->[0] } } @$words;\n    return $max[0];\n}", "    my $output\
    \ = \"\";\n    my $max = 0;\n    for my $word (@$words) {\n        my %count;\n\
    \        for my $ch (split //, $word) {\n            $count{$ch} = 1;\n      \
    \  }\n        my $num = scalar keys %count;\n        if ($num > $max) {\n    \
    \        $max = $num;\n            $output = $word;\n        }\n    }\n    return\
    \ $output;\n}", "    my $max = 0;\n    my $word = \"\";\n    foreach my $w (@$words)\
    \ {\n        my %seen;\n        @seen{split //, $w} = ();\n        my $count =\
    \ scalar keys %seen;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $word = $w;\n        }\n    }\n    return $word;\n}", "    my %count;\n\
    \    my $max = 0;\n    my $max_word = \"\";\n    for my $word (@$words) {\n  \
    \      my %seen;\n        my $n_unique = 0;\n        for my $char (split //, $word)\
    \ {\n            $n_unique++ unless $seen{$char}++;\n        }\n        if ($n_unique\
    \ > $max) {\n            $max = $n_unique;\n            $max_word = $word;\n \
    \       }\n    }\n    return $max_word;\n}", "    my $max_word = $words->[0];\n\
    \    my $max_count = count_unique($max_word);\n    for my $i (1..$#$words) {\n\
    \        my $word = $words->[$i];\n        my $count = count_unique($word);\n\
    \        if ($count > $max_count) {\n            $max_word = $word;\n        \
    \    $max_count = $count;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ %count;\n    $count{$_}++ for @$words;\n    return [sort {\n        length($b)\
    \ <=> length($a) ||\n        $count{$b} <=> $count{$a} ||\n        $a cmp $b\n\
    \    } @$words]->[0];\n}", "    my($best) = $words->[0];\n    my($count) = count_unique_characters($best);\n\
    \    foreach my $i (1..$#$words) {\n        my($candidate) = $words->[$i];\n \
    \       my($candidate_count) = count_unique_characters($candidate);\n        if\
    \ ($candidate_count > $count) {\n            $best = $candidate;\n           \
    \ $count = $candidate_count;\n        }\n    }\n    return $best;\n}", "    my($max_len,\
    \ $max_index) = 0;\n    for my $index (0..$#$words) {\n        my($len) = length(uniq($$words[$index]));\n\
    \        if($len > $max_len) {\n            $max_len = $len;\n            $max_index\
    \ = $index;\n        }\n    }\n    return $$words[$max_index];\n}", "    my $max\
    \ = 0;\n    my $max_word = '';\n    for my $word (@$words) {\n        my %uniq;\n\
    \        @uniq{split //, $word} = ();\n        my $unique_chars = scalar keys\
    \ %uniq;\n        if ($unique_chars > $max) {\n            $max = $unique_chars;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    my $max_word = $words->[0];\n    my $max_len = 0;\n    for my $word (@$words)\
    \ {\n        my $len = length(uniq($word));\n        if ($len > $max_len || ($len\
    \ == $max_len && $word lt $max_word)) {\n            $max_word = $word;\n    \
    \        $max_len = $len;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ %unique_chars = ();\n    for my $word (@$words) {\n        my %c = ();\n   \
    \     for my $c (split //, $word) {\n            $c{$c} = 1;\n        }\n    \
    \    $unique_chars{$word} = scalar keys %c;\n    }\n    # for my $k (keys %unique_chars)\
    \ {\n    #     print \"$k => $unique_chars{$k}\\n\";\n    # }\n    my $max = 0;\n\
    \    my $max_word = '';\n    for my $k (keys %unique_chars) {\n        if ($unique_chars{$k}\
    \ > $max) {\n            $max = $unique_chars{$k};\n            $max_word = $k;\n\
    \        }\n    }\n    # return the first one that has max unique chars\n    return\
    \ $max_word;\n}", "    my $max = \"\";\n    foreach my $word (@$words) {\n   \
    \     my %seen;\n        my $count = 0;\n        foreach my $char (split \"\"\
    , $word) {\n            $count++ if !$seen{$char}++;\n        }\n        $max\
    \ = $word if $count > length($max);\n    }\n    return $max;\n}", "    my $max_unique\
    \ = 0;\n    my $max_word = '';\n    for my $word (@$words) {\n        my %chars;\n\
    \        for my $char (split //, $word) {\n            $chars{$char} = 1;\n  \
    \      }\n        my $num_unique = scalar keys %chars;\n        if($num_unique\
    \ > $max_unique) {\n            $max_unique = $num_unique;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}", "    return first {\n\
    \        get_unique_chars($_) == max(map { get_unique_chars($_) } @$words)\n \
    \   } @$words;\n}", "    my($max_len, $max_word);\n    for my $word (@$words)\
    \ {\n        my $len = get_length($word);\n        if (!defined($max_len) || $len\
    \ > $max_len) {\n            $max_len = $len;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_unique = 0;\n    my\
    \ $max_word;\n    foreach my $word (@$words) {\n        my $unique = keys %{{map\
    \ {$_ => 1} split(\"\", $word)}};\n        if ($unique > $max_unique) {\n    \
    \        $max_unique = $unique;\n            $max_word = $word;\n        }\n \
    \   }\n    return $max_word;\n}", "    my $max_word = \"\";\n    my $max_chars\
    \ = 0;\n    for my $word (@$words) {\n        my %chars;\n        for my $c (split\
    \ //, $word) {\n            $chars{$c} = 1;\n        }\n        my $num_chars\
    \ = scalar keys %chars;\n        if ($num_chars > $max_chars ||\n            ($num_chars\
    \ == $max_chars && $word lt $max_word)) {\n            $max_chars = $num_chars;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    my $max_len = 0;\n    my $max_word = '';\n    for my $word (@$words) {\n  \
    \      my $len = keys %{{map { $_ => 1 } split //, $word}};\n        if ($len\
    \ > $max_len) {\n            $max_len = $len;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $result = \"\";\n    my\
    \ $max_size = 0;\n    foreach my $word (@$words) {\n        my $size = size_of_unique_characters($word);\n\
    \        if ($size > $max_size) {\n            $max_size = $size;\n          \
    \  $result = $word;\n        }\n    }\n    return $result;\n}", "    my $result\
    \ = $words->[0];\n    my $count = 0;\n    foreach my $word(@$words) {\n      \
    \  my $word_uniq = {};\n        foreach my $letter(split(//, $word)) {\n     \
    \       $word_uniq->{$letter} = 1;\n        }\n        my $n = scalar(keys %$word_uniq);\n\
    \        if ($n > $count) {\n            $count = $n;\n            $result = $word;\n\
    \        }\n    }\n    return $result;\n}", "    my $max_word = $words->[0];\n\
    \    my $max_count = 0;\n    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count ||\n            ($count == $max_count && $word\
    \ lt $max_word)) {\n            $max_word = $word;\n            $max_count = $count;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_word = \"\";\n    my\
    \ $max_char_num = 0;\n    foreach my $word (@$words) {\n        my %char_num;\n\
    \        my $char_num = 0;\n        for (my $i = 0; $i < length($word); $i++)\
    \ {\n            if (!defined($char_num{substr($word, $i, 1)})) {\n          \
    \      $char_num{substr($word, $i, 1)} = 1;\n                $char_num++;\n  \
    \          }\n        }\n        if ($char_num > $max_char_num) {\n          \
    \  $max_char_num = $char_num;\n            $max_word = $word;\n        }\n   \
    \ }\n    return $max_word;\n}", "    my @words = @$words;\n    my $max_word =\
    \ $words[0];\n    my $max_unique_chars = @{[uniq $words[0]]};\n    for my $word\
    \ (@words) {\n        my $unique_chars = @{[uniq $word]};\n        if ($unique_chars\
    \ > $max_unique_chars) {\n            $max_word = $word;\n            $max_unique_chars\
    \ = $unique_chars;\n        }\n    }\n    return $max_word;\n}", "    my %count\
    \ = ();\n    my $max = 0;\n    my $word;\n    foreach my $word (@$words) {\n \
    \       my %map = ();\n        foreach my $c (split(//, $word)) {\n          \
    \  $map{$c} = 1;\n        }\n        my $count = scalar(keys %map);\n        if\
    \ ($count > $max) {\n            $max = $count;\n            $word = $word;\n\
    \        }\n    }\n    return $word;\n}", "    my($i, $unique_chars, $word_map);\n\
    \    my($num_words) = scalar(@$words);\n    my($max_word, $max_num) = (\"\", 0);",
  "    my $max_word = $words->[0];\n    my $max_count = count_unique_chars($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count || ($count == $max_count && $word lt $max_word))\
    \ {\n            $max_word = $word;\n            $max_count = $count;\n      \
    \  }\n    }\n    return $max_word;\n}", "    my($cnt) = 0;\n    my($max_cnt) =\
    \ 0;\n    my($result) = \"\";\n    my($word) = \"\";\n    foreach $word (@$words)\
    \ {\n        $cnt = count_unique($word);\n        if ($cnt > $max_cnt) {\n   \
    \         $max_cnt = $cnt;\n            $result = $word;\n        }\n    }\n \
    \   return $result;\n}", "    my $max = 0;\n    my $max_word = \"\";\n    foreach\
    \ my $word (@$words) {\n        my %seen;\n        my $chars = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if (!$seen{$char}) {\n          \
    \      $chars++;\n                $seen{$char} = 1;\n            }\n        }\n\
    \        if ($chars > $max) {\n            $max = $chars;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}", "    my($word, $max)\
    \ = \"\";\n    my(%h);\n    foreach $word (@$words) {\n        my(@array) = split(//,\
    \ $word);\n        %h = ();\n        foreach $ch (@array) {\n            $h{$ch}\
    \ = 1;\n        }\n        my($count) = scalar(keys(%h));\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $result = $word;\n      \
    \  }\n    }\n    return $result;\n}", "    my $max_char = undef;\n    my $max_num\
    \ = 0;\n    foreach (@$words) {\n        my $num = length(uniq_char($_));\n  \
    \      if ($num > $max_num) {\n            $max_num = $num;\n            $max_char\
    \ = $_;\n        }\n    }\n    return $max_char;\n}", "    my($max) = 0;\n   \
    \ my($max_word) = \"\";\n    for(my($i) = 0; $i < scalar(@$words); $i++) {\n \
    \       my($str) = $words->[$i];\n        my(%seen) = ();\n        for(my($j)\
    \ = 0; $j < length($str); $j++) {\n            $seen{substr($str, $j, 1)} = 1;\n\
    \        }\n        my($count) = scalar(keys(%seen));\n        if($count > $max)\
    \ {\n            $max = $count;\n            $max_word = $str;\n        }\n  \
    \  }\n    return $max_word;\n}", "    my $max = $words->[0];\n    my $max_u =\
    \ unique_characters($max);\n    foreach my $w (@$words) {\n        my $u = unique_characters($w);\n\
    \        if ($u > $max_u) {\n            $max = $w;\n            $max_u = $u;\n\
    \        }\n    }\n    return $max;\n}", "    my $max_chars = 0;\n    my $max_word\
    \ = '';\n    foreach my $word (@$words) {\n        my $chars = get_unique_chars($word);\n\
    \        if (scalar(@$chars) > $max_chars) {\n            $max_chars = scalar(@$chars);\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    my $max = -1;\n    my $result = \"\";\n    for (@$words) {\n        my $count\
    \ = uniq_chars_count($_);\n        if ($count > $max) {\n            $max = $count;\n\
    \            $result = $_;\n        }\n    }\n    return $result;\n}", "    my\
    \ $word_max = $words->[0];\n    my $word_max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my %chars = ();\n        foreach my $char (split(//, $word))\
    \ {\n            $chars{$char} = 1;\n        }\n        my $count = scalar(keys\
    \ %chars);\n        if ($count > $word_max_count) {\n            $word_max = $word;\n\
    \            $word_max_count = $count;\n        }\n    }\n    return $word_max;\n\
    }", "    my($max_word, $max_count) = (\"\", -1);\n    for my $word (@$words) {\n\
    \        my %count;\n        for my $c (split //, $word) {\n            $count{$c}++;\n\
    \        }\n        my $count = scalar keys %count;\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}", "    my $max_word = $words->[0];\n   \
    \ my $max_count = 0;\n    foreach my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_uniq = 0;\n    my $max_word = undef;\n    for my $word (@$words) {\n  \
    \      my $uniq = get_uniq_chars($word);\n        if (!defined($max_word) || $uniq\
    \ > $max_uniq ||\n            ($uniq == $max_uniq && $word lt $max_word)) {\n\
    \            $max_uniq = $uniq;\n            $max_word = $word;\n        }\n \
    \   }\n    return $max_word;\n}", "    my($max) = '';\n    my($res) = '';\n  \
    \  my(%hash) = ();\n    foreach $word (@$words) {\n        foreach $chr (split\
    \ //, $word) {\n            if (not exists $hash{$chr}) {\n                $hash{$chr}\
    \ = 1;\n            }\n        }\n        if (scalar(keys %hash) > $max) {\n \
    \           $max = scalar(keys %hash);\n            $res = $word;\n        }\n\
    \        %hash = ();\n    }\n    return $res;\n}", "    my %letters;\n    my %letters_count;\n\
    \    my @max;\n    for my $word (@$words) {\n        for my $letter (split //,\
    \ $word) {\n            if (!$letters{$word}{$letter}) {\n                $letters{$word}{$letter}\
    \ = 1;\n                $letters_count{$word}++;\n            }\n        }\n \
    \   }\n    for my $word (keys %letters_count) {\n        if (!@max) {\n      \
    \      @max = ($word, $letters_count{$word});\n        } elsif ($letters_count{$word}\
    \ > $max[1]) {\n            @max = ($word, $letters_count{$word});\n        }\
    \ elsif ($letters_count{$word} == $max[1]) {\n            if ($word lt $max[0])\
    \ {\n                @max = ($word, $letters_count{$word});\n            }\n \
    \       }\n    }\n    return $max[0];\n}", "    my %word_char_count;\n    for\
    \ my $word (@$words) {\n        my %chars;\n        for my $c (split(//, $word))\
    \ {\n            $chars{$c} = 1;\n        }\n        $word_char_count{$word} =\
    \ scalar(keys %chars);\n    }\n    my $max_chars = 0;\n    my $word_max_chars;\n\
    \    for my $word (keys %word_char_count) {\n        if ($word_char_count{$word}\
    \ > $max_chars) {\n            $max_chars = $word_char_count{$word};\n       \
    \     $word_max_chars = $word;\n        }\n    }\n    return $word_max_chars;\n\
    }", "    my $s = \"\";\n    foreach my $w (@$words) {\n        if ($s eq \"\"\
    \ || unique_count($w) > unique_count($s)) {\n            $s = $w;\n        }\n\
    \    }\n    return $s;\n}", "    my $max = \"\";\n    my $max_len = 0;\n    for\
    \ my $word (@$words) {\n        my $unique_count = count_unique($word);\n    \
    \    if ($unique_count > $max_len) {\n            $max = $word;\n            $max_len\
    \ = $unique_count;\n        }\n    }\n    return $max;\n}", "    my %count = ();\n\
    \    for my $word (@$words) {\n        for my $c (split //, $word) {\n       \
    \     $count{$c}++;\n        }\n    }\n    my $max_length = 0;\n    my $max_word\
    \ = '';\n    while (my ($word, $count) = each %count) {\n        if ($count >=\
    \ $max_length) {\n            $max_length = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_word = \"\";\n    my\
    \ $max_uniq = 0;\n    for my $word (@$words) {\n        my $uniq = scalar(uniq_chars($word));\n\
    \        if($uniq > $max_uniq) {\n            $max_uniq = $uniq;\n           \
    \ $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my $max\
    \ = $words->[0];\n    my $max_count = 0;\n    for (@$words) {\n        my %seen;\n\
    \        my $count = 0;\n        for (split //) {\n            $count++ unless\
    \ $seen{$_}++;\n        }\n        if ($count > $max_count) {\n            $max\
    \ = $_;\n            $max_count = $count;\n        }\n    }\n    return $max;\n\
    }", "    my $max = \"\";\n    my $max_chars = 0;\n    foreach my $word (@$words)\
    \ {\n        my $unique_chars = &unique_chars($word);\n        if ((length($word)\
    \ > length($max)) || \n           ((length($word) == length($max)) && ($unique_chars\
    \ > $max_chars))) {\n            $max = $word;\n            $max_chars = $unique_chars;\n\
    \        }\n    }\n    return $max;\n}", "    my $max_word = $words->[0];\n  \
    \  my $max_uniq_chars = scalar uniq @{$words->[0]};\n    foreach my $word (@$words)\
    \ {\n        my $uniq_chars = scalar uniq @$word;\n        if ($uniq_chars > $max_uniq_chars)\
    \ {\n            $max_uniq_chars = $uniq_chars;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_word = \"\";\n    my\
    \ $max_chars = 0;\n    foreach my $word (@$words) {\n        my $chars = unique_chars($word);\n\
    \        if ($chars > $max_chars) {\n            $max_chars = $chars;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max = shift @$words;\n    for my $word (@$words) {\n        if (length $word\
    \ > length $max) {\n            $max = $word;\n        }\n    }\n    return $max;\n\
    }", "    my $max_count = 0;\n    my $max_word = \"\";\n    for my $word (@$words)\
    \ {\n        my $char_count = count_unique_chars($word);\n        if ($char_count\
    \ > $max_count) {\n            $max_count = $char_count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}", "    my $max_word = $words->[0];\n\
    \    my $max_chars = Set::Scalar->new(split //, $max_word);\n    for my $i (1\
    \ .. @$words - 1) {\n        my $word = $words->[$i];\n        my $chars = Set::Scalar->new(split\
    \ //, $word);\n        if ($chars->size > $max_chars->size ||\n            ($chars->size\
    \ == $max_chars->size && $word lt $max_word)) {\n            $max_word = $word;\n\
    \            $max_chars = $chars;\n        }\n    }\n    return $max_word;\n}",
  "    my $max_word = \"\";\n    my $max_count = 0;\n    foreach my $word (@$words)\
    \ {\n        my $unique_count = unique_chars($word);\n        if ($unique_count\
    \ > $max_count ||\n                ($unique_count == $max_count && $word lt $max_word))\
    \ {\n            $max_word = $word;\n            $max_count = $unique_count;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_words = {};\n    for\
    \ my $word (@$words) {\n        my $chars = {};\n        for my $char (split //,\
    \ $word) {\n            $chars->{$char} = 1;\n        }\n        my $num_unique_chars\
    \ = scalar keys %$chars;\n        $max_words->{$num_unique_chars} //= [];\n  \
    \      push @{$max_words->{$num_unique_chars}}, $word;\n    }\n    my $max_num_unique_chars\
    \ = (sort {$b <=> $a} keys %$max_words)[0];\n    return $max_words->{$max_num_unique_chars}[0];\n\
    }", "    my($max) = $words->[0];\n    my($max_count) = scalar(keys %{counts(split(\"\
    \", $max))});\n    foreach my $word (@$words) {\n        my($count) = scalar(keys\
    \ %{counts(split(\"\", $word))});\n        if ($count > $max_count) {\n      \
    \      $max = $word;\n            $max_count = $count;\n        }\n    }\n   \
    \ return $max;\n}", "    my($max_word) = $words->[0];\n    foreach my $word (@$words)\
    \ {\n        if (length($word) > length($max_word)) {\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}", "    my $max_word = \"\"\
    ;\n    my $max_words_length = 0;\n    foreach my $word (@$words) {\n        my\
    \ %seen;\n        my $length = 0;\n        foreach my $char (split //, $word)\
    \ {\n            $length++ if (!$seen{$char});\n            $seen{$char} = 1;\n\
    \        }\n        if ($length > $max_words_length || ($length == $max_words_length\
    \ && $word lt $max_word)) {\n            $max_word = $word;\n            $max_words_length\
    \ = $length;\n        }\n    }\n    return $max_word;\n}\nmy @arr = (\"name\"\
    , \"of\", \"string\");\nprint \"find_max(\\\"name\\\", \\\"of\\\", \\\"string\\\
    \") = \".find_max(\\@arr).\"\\n\";\n@arr = (\"name\", \"enam\", \"game\");\nprint\
    \ \"find_max(\\\"name\\\", \\\"enam\\\", \\\"game\\\") = \".find_max(\\@arr).\"\
    \\n\";\n@arr = (\"aaaaaaa\", \"bb\", \"cc\");\nprint \"find_max(\\\"aaaaaaa\\\"\
    , \\\"bb\\\", \\\"cc\\\") = \".find_max(\\@arr).\"\\n\";", "    my $n = @$words;\n\
    \    if ($n == 0) {\n        return undef;\n    }\n    if ($n == 1) {\n      \
    \  return $words->[0];\n    }\n    my $best = $words->[0];\n    my $max = count_unique($best);\n\
    \    for (my $i = 1; $i < $n; $i++) {\n        my $word = $words->[$i];\n    \
    \    my $c = count_unique($word);\n        if ($c > $max) {\n            $max\
    \ = $c;\n            $best = $word;\n        }\n    }\n    return $best;\n}",
  "    my @words = @$words;\n    @words = sort {length($b) <=> length($a)} @words;\n\
    \    my %max = ();\n    while(@words > 0) {\n        my $word = shift @words;\n\
    \        my %w_map = map {$_ => 1} split //, $word;\n        my $len = keys %w_map;\n\
    \        $max{$len} = $word;\n    }\n    return (values %max)[0];\n}", "    my\
    \ $max = $words->[0];\n    my $unique_chars = num_unique_chars($max);\n    for\
    \ my $word (@$words) {\n        my $word_chars = num_unique_chars($word);\n  \
    \      if($word_chars > $unique_chars) {\n            $max = $word;\n        \
    \    $unique_chars = $word_chars;\n        }\n    }\n    return $max;\n}", " \
    \   my $max = 0;\n    my $word = '';\n    foreach (@$words) {\n        my $uniq\
    \ = scalar(uniq_chars($_));\n        if ($uniq > $max) {\n            $max = $uniq;\n\
    \            $word = $_;\n        }\n    }\n    return $word;\n}", "    # Convert\
    \ $words to a list so it's easy to use.\n    my @words = @$words;\n    # We'll\
    \ store the max word and count here.\n    my $max_word = $words[0];\n    my $max_count\
    \ = 0;\n    # Loop through the words in @words\n    foreach my $word (@words)\
    \ {\n        # Count the unique characters in this word.\n        my $count =\
    \ unique_chars($word);\n        # Is this the max so far?\n        if ($count\
    \ > $max_count) {\n            # Yes, update $max_word and $max_count.\n     \
    \       $max_word = $word;\n            $max_count = $count;\n        }\n    }\n\
    \    # Return the max word.\n    return $max_word;\n}", "    my $max = $words->[0];\n\
    \    my $max_len = length($max);\n    for my $word (@$words) {\n        if ($max_len\
    \ < length($word)) {\n            $max = $word;\n            $max_len = length($word);\n\
    \        }\n    }\n    return $max;\n}", "    my($unique_letters, $max, $max_word);\n\
    \    foreach my $word (@$words) {\n        $unique_letters = uniq($word);\n  \
    \      my $number_of_unique_letters = scalar(@$unique_letters);\n        if(!defined($max)\
    \ || $number_of_unique_letters > $max) {\n            $max = $number_of_unique_letters;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    # YOUR CODE HERE\n}", "    my $max_unique = 1;\n    my $max_str;\n    for my\
    \ $str (@$words) {\n        my $uni = uniq_chars($str);\n        if ($uni > $max_unique)\
    \ {\n            $max_unique = $uni;\n            $max_str = $str;\n        }\
    \ elsif ($uni == $max_unique) {\n            if ($str lt $max_str) {\n       \
    \         $max_str = $str;\n            }\n        }\n    }\n    return $max_str;\n\
    }", "    my $max_word = '';\n    my $max_uniq = 0;\n    for my $word (@$words)\
    \ {\n        my $uniq = uniq_chars($word);\n        if (length($uniq) > $max_uniq)\
    \ {\n            $max_uniq = length($uniq);\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_word = \"\";\n    my\
    \ $max_count = 0;\n    for(@$words) {\n        my %counts;\n        @counts{split(\"\
    \", $_)} = ();\n        my $count = scalar keys %counts;\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $_;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_string = \"\";\n  \
    \  my $max_number = 0;\n    foreach my $word (@$words) {\n        my $number =\
    \ unique_characters($word);\n        if ($number > $max_number) {\n          \
    \  $max_number = $number;\n            $max_string = $word;\n        }\n    }\n\
    \    return $max_string;\n}", "    my $max_length = 0;\n    my $first_word;\n\
    \    for my $word (@$words) {\n        if (!defined $first_word) {\n         \
    \   $first_word = $word;\n        }\n        my $length = unique_characters($word);\n\
    \        if ($length > $max_length) {\n            $max_length = $length;\n  \
    \          $first_word = $word;\n        }\n    }\n    return $first_word;\n}",
  "    my $max_word = $words->[0];\n    my $max_num_uniq_chars = num_uniq_chars($max_word);\n\
    \    for my $i (1..$#$words) {\n        my $num_uniq_chars = num_uniq_chars($words->[$i]);\n\
    \        if($num_uniq_chars > $max_num_uniq_chars\n           || ($num_uniq_chars\
    \ == $max_num_uniq_chars\n               && $words->[$i] lt $max_word)) {\n  \
    \          $max_word = $words->[$i];\n            $max_num_uniq_chars = $num_uniq_chars;\n\
    \        }\n    }\n    return $max_word;\n}", "    my %max_word;\n    my %max_word_char_count;\n\
    \    foreach my $word (@$words) {\n        my %char_count;\n        @char_count{split(//,\
    \ $word)} = ();\n        my $char_count = scalar keys %char_count;\n        $max_word{$char_count}\
    \ = $word;\n        $max_word_char_count{$word} = $char_count;\n    }\n    my\
    \ $max_char_count = max keys %max_word;\n    my @max_words = grep { $max_word_char_count{$_}\
    \ == $max_char_count } @$words;\n    return min @max_words;\n}", "    my $max\
    \ = \"\";\n    my $word = \"\";\n    my $count = 0;\n    my %hash = ();\n    for\
    \ my $i (@$words) {\n        for my $j (split(//, $i)) {\n            if (!exists\
    \ $hash{$j}) {\n                $hash{$j} = $j;\n                $count++;\n \
    \           }\n        }\n        if ($count > length($max)) {\n            $max\
    \ = $i;\n        }\n        elsif ($count == length($max)) {\n            if ($i\
    \ lt $max) {\n                $max = $i;\n            }\n        }\n        %hash\
    \ = ();\n        $count = 0;\n    }\n    return $max;\n}", "    my $max = 0;\n\
    \    my $max_word = \"\";\n    for my $word (@$words) {\n        my %m;\n    \
    \    for my $char (split //, $word) {\n            if (! exists $m{$char}) {\n\
    \                $m{$char} = 1;\n            }\n        }\n        my $count =\
    \ scalar keys %m;\n        if ($count >= $max) {\n            $max = $count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    my $max = \"\";\n    my $max_len = 0;\n    for my $word (@$words) {\n     \
    \   my %chars;\n        for my $char (split //, $word) {\n            $chars{$char}\
    \ = 1;\n        }\n        my $len = scalar keys %chars;\n        if ($len > $max_len)\
    \ {\n            $max = $word;\n            $max_len = $len;\n        }\n    }\n\
    \    return $max;\n}", "    my($max_word, $max_word_length) = (\"\", 0);\n   \
    \ for my $word (@$words) {\n        if ($max_word_length < length($word)) {\n\
    \            $max_word = $word;\n            $max_word_length = length($word);\n\
    \        }\n    }\n    $max_word;\n}", "    my %count;\n    my @chars;\n    my\
    \ $max = 0;\n    my $max_count = 0;\n    my $max_idx = 0;\n    foreach my $word\
    \ (@$words) {\n        $count{$word} = 0;\n        @chars = split(//, $word);\n\
    \        foreach my $char (@chars) {\n            $count{$word} += 1 if (!(grep\
    \ /$char/, @chars[0..$#chars-1]));\n        }\n        if ($count{$word} > $max_count)\
    \ {\n            $max_count = $count{$word};\n            $max_idx = $max;\n \
    \       }\n        $max += 1;\n    }\n    return $words->[$max_idx];\n}", "  \
    \  my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words) {\n  \
    \      my $score = score($word);\n        if ($score > $max) {\n            $max\
    \ = $score;\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n\
    }", "    my $max_word = \"\";\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $chars = {};\n        for my $c (split //, $word) {\n        \
    \    $chars->{$c} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_words = [];\n    my $max_length = 0;\n    for my $word (@$words) {\n  \
    \      my $unique_letters = get_unique_letters($word);\n        my $length = scalar\
    \ @$unique_letters;\n        if ($length > $max_length) {\n            $max_length\
    \ = $length;\n            $max_words = [$word];\n        } elsif ($length == $max_length)\
    \ {\n            push @$max_words, $word;\n        }\n    }\n    return $max_words->[0];\n\
    }", "    my $max = $words->[0];\n    my $max_count = count_unique_characters($max);\n\
    \    for my $i (1..$#$words) {\n        my $count = count_unique_characters($words->[$i]);\n\
    \        if ($count > $max_count) {\n            $max = $words->[$i];\n      \
    \      $max_count = $count;\n        }\n    }\n    return $max;\n}", "    my @sorted\
    \ = sort { unique_char_count($b) <=> unique_char_count($a) } @$words;\n    return\
    \ $sorted[0];\n}", "    # $words is a reference to an array of words\n    my $max_word\
    \ = undef; # which word is the current maximum word?\n    my $max_count = 0; \
    \   # how many unique characters does the maximum word have?\n    foreach my $word\
    \ (@$words) {\n        my $count = count_uniq($word);\n        if (not defined\
    \ $max_word or $count > $max_count) {\n            $max_word = $word;\n      \
    \      $max_count = $count;\n        }\n    }\n    return $max_word;\n}", "  \
    \  my %unique;\n    foreach my $word (@$words) {\n        $unique{$word} = uniq_chars($word);\n\
    \    }\n    my $max = '';\n    my $max_count = 0;\n    while (my($word, $count)\
    \ = each %unique) {\n        if ($count > $max_count) {\n            $max = $word;\n\
    \            $max_count = $count;\n        }\n    }\n    return $max;\n}", " \
    \   my $max = \"\";\n    my $max_size = 0;\n    foreach (@$words) {\n        my\
    \ $size = uniq(split //, $_);\n        if ($size > $max_size) {\n            $max\
    \ = $_;\n            $max_size = $size;\n        }\n    }\n    return $max;\n}",
  "    my($max_word) = ' ';\n    my($max_count) = 0;\n    foreach my $word (@$words)\
    \ {\n        my(%char_count);\n        for my $i (0..length($word)-1) {\n    \
    \        my($char) = substr($word, $i, 1);\n            $char_count{$char} = 1;\n\
    \        }\n        my($count) = scalar(keys %char_count);\n        if($count\
    \ > $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    # simple performance optimization,\
    \ for small input\n    return $words->[0] if $#{$words} == 0;\n    # keep track\
    \ of \"best\" (max_count_so_far, last_lex_max)\n    my $max_count_so_far = 0;\n\
    \    my $last_lex_max;\n    foreach my $word (@{$words}) {\n        my %counts;\n\
    \        # word (hopefully) should not have zero length\n        # so: count number\
    \ of different chars (not letters)\n        # and replace counts{$c} with the\
    \ value 1 for each char\n        ++$counts{$_} foreach split('', $word);\n   \
    \     my $uniq_count = scalar keys %counts;\n        if ($uniq_count > $max_count_so_far)\
    \ {\n            $max_count_so_far = $uniq_count;\n            $last_lex_max =\
    \ $word;\n        } elsif ($uniq_count == $max_count_so_far and\n            \
    \     $word lt $last_lex_max) {\n            $last_lex_max = $word;\n        }\n\
    \    }\n    return $last_lex_max;\n}", "    my %unique_chars = ();\n    for my\
    \ $word (@$words) {\n        my %chars = ();\n        for my $char (split '',\
    \ $word) {\n            $chars{$char} = 1;\n        }\n        $unique_chars{$word}\
    \ = scalar keys %chars;\n    }\n    my $largest = (sort { $unique_chars{$b} <=>\
    \ $unique_chars{$a} } keys %unique_chars)[0];\n    return $largest;\n}", "   \
    \ my $max_chars = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $chars = {};\n        foreach my $char (split(//, $word)) {\n\
    \            $chars->{$char} = 1;\n        }\n        my $chars_size = scalar(keys\
    \ %$chars);\n        if ($chars_size > $max_chars) {\n            $max_chars =\
    \ $chars_size;\n            $max_word = $word;\n        } elsif ($chars_size ==\
    \ $max_chars) {\n            if ($word lt $max_word) {\n                $max_word\
    \ = $word;\n            }\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_count = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words) {\n\
    \        my %count = ();\n        @count{ split(\"\", $word) } = (1) x length($word);\n\
    \        my $count = scalar keys %count;\n        if ($count > $max_count) {\n\
    \            $max_count = $count;\n            $max_word = $word;\n        }\n\
    \    }\n    return $max_word;\n}", "    my($word, $max, $word_max) = 0;\n    while($word\
    \ < @$words) {\n        my $sorted = join '', sort split '', $words->[$word];\n\
    \        my $unique = $sorted =~ s/(.)\\1//g;\n        if($unique > $max) {\n\
    \            $max = $unique;\n            $word_max = $word;\n        }\n    \
    \    $word++;\n    }\n    return $words->[$word_max];\n}", "    return undef unless\
    \ @$words;\n    my @sorted = sort {\n        if (max_chars($a) == max_chars($b))\
    \ {\n            $a cmp $b;\n        } else {\n            max_chars($b) <=> max_chars($a);\n\
    \        }\n    } @$words;\n    return $sorted[0];\n}", "    my $max_count = 0;\n\
    \    my $max_word;\n    for my $word (@$words) {\n        my $count = count_unique_characters($word);\n\
    \        if (!$max_word || $count > $max_count || ($count == $max_count && $word\
    \ lt $max_word)) {\n            $max_count = $count;\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}", "    my $max = -1;\n  \
    \  my $best_word = \"\";\n    for my $word (@$words) {\n        my %cnt;\n   \
    \     for my $c (split(\"\", $word)) {\n            $cnt{$c} = 1;\n        }\n\
    \        my $nunique = scalar(keys %cnt);\n        if ($nunique > $max) {\n  \
    \          $max = $nunique;\n            $best_word = $word;\n        }\n    }\n\
    \    return $best_word;\n}", "    my $max_word = '';\n    my $max_num_chars =\
    \ 0;\n    foreach my $word (@$words) {\n        my $chars = get_unique_chars($word);\n\
    \        my $num_chars = @$chars;\n        if ( (!$max_word) || ($num_chars >\
    \ $max_num_chars) ) {\n            $max_word = $word;\n            $max_num_chars\
    \ = $num_chars;\n        }\n    }\n    return $max_word;\n}", "    return undef\
    \ unless $words;\n    my $max_word = $words->[0];\n    my $max_count = count_unique_chars($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $result = \"\";\n    my $max_uniq = 0;\n    for my $word (@$words) {\n     \
    \   my %char_count;\n        $char_count{$_}++ for split(\"\", $word);\n     \
    \   my $uniq = keys %char_count;\n        if ($uniq > $max_uniq) {\n         \
    \   $max_uniq = $uniq;\n            $result = $word;\n        }\n    }\n    return\
    \ $result;\n}", "    my $max_unique = 0;\n    my $max_index = 0;\n    for my $i\
    \ (0..@$words-1) {\n        my $word = $words->[$i];\n        my $unique = { map\
    \ { $_ => 1 } split(//, $word) };\n        if (scalar(keys %$unique) > $max_unique)\
    \ {\n            $max_unique = scalar(keys %$unique);\n            $max_index\
    \ = $i;\n        }\n    }\n    return $words->[$max_index];\n}", "    my $max\
    \ = 0;\n    my $max_word = undef;\n    for my $word (@$words) {\n        my %char\
    \ = ();\n        for my $char (split //, $word) {\n            $char{$char} =\
    \ 1;\n        }\n        my $num_unique = scalar keys %char;\n        if ($num_unique\
    \ > $max) {\n            $max = $num_unique;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}", "    my $max_word = $words->[0];\n\
    \    my $max_count = unique_char_count($max_word);\n    foreach my $word (@$words)\
    \ {\n        my $count = unique_char_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_word = $word;\n            $max_count = $count;\n      \
    \  }\n    }\n    return $max_word;\n}", "    my $max = $words->[0];\n    my $length\
    \ = length $max;\n    my $max_hash = {};\n    foreach my $word (@$words) {\n \
    \       my $word_hash = {};\n        my $current_length = length $word;\n    \
    \    foreach my $char (split '', $word) {\n            $word_hash->{$char}++;\n\
    \        }\n        my $num_uniq = scalar keys %$word_hash;\n        if ($num_uniq\
    \ > $length) {\n            $max = $word;\n            $length = $current_length;\n\
    \            $max_hash = $word_hash;\n        } elsif ($num_uniq == $length) {\n\
    \            if ($word lt $max) {\n                $max = $word;\n           \
    \     $length = $current_length;\n                $max_hash = $word_hash;\n  \
    \          }\n        }\n    }\n    return $max;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
