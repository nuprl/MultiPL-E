language: pl
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $open = 0;\n    for my $c (split //, $brackets)\
    \ {\n        if ($c eq '<') {\n            $open++;\n        } elsif ($c eq '>')\
    \ {\n            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ '';\n        }\n    }\n    if ($open != 0) {\n        return '';\n    }\n  \
    \  return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my($i);\n    my($n_lt) = 0;\n    my($n_gt) =\
    \ 0;\n    for($i = 0; $i < length($brackets); $i++) {\n\tmy($c) = substr($brackets,\
    \ $i, 1);\n\tif($c eq \"<\") {\n\t    $n_lt++;\n\t} elsif($c eq \">\") {\n\t \
    \   $n_gt++;\n\t} else {\n\t    return \"\";\n\t}\n\tif($n_gt > $n_lt) {\n\t \
    \   return \"\";\n\t}\n    }\n    if($n_lt != $n_gt) {\n\treturn \"\";\n    }\n\
    \    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    while ($brackets =~ s/<[^<>]*>//) {};\n    if\
    \ ($brackets eq \"\") {\n        return 1;\n    } else {\n        return \"\"\
    ;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 1
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $bracket_count = 0;\n    for my $ch (split\
    \ //, $brackets) {\n        if ($ch eq '<') {\n            $bracket_count++;\n\
    \        } elsif ($ch eq '>') {\n            $bracket_count--;\n        }\n  \
    \      if ($bracket_count < 0) {\n            return;\n        }\n    }\n    return\
    \ $bracket_count == 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 1
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $result = 1;\n    my $stack = 0;\n    my\
    \ $c;\n    for(my $i = 0; $i < length($brackets); $i++) {\n        $c = substr($brackets,\
    \ $i, 1);\n        if($c eq \"<\") {\n            $stack++;\n        } elsif($c\
    \ eq \">\") {\n            $stack--;\n        }\n        if($stack < 0) {\n  \
    \          $result = 0;\n            last;\n        }\n    }\n    if($stack !=\
    \ 0) {\n        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"\
    <>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    >\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $count = 0;\n    for my $ch (split //, $brackets)\
    \ {\n        if ($ch eq '<') {\n            $count++;\n        }\n        elsif\
    \ ($ch eq '>') {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return \"\";\n        }\n    }\n    return ($count == 0) ? 1 : \"\
    \";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n\
    \        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $level = 0;\n    for (my $i = 0; $i < length($brackets);\
    \ $i++) {\n        if (substr($brackets, $i, 1) eq \"<\") {\n            $level++;\n\
    \        }\n        elsif (substr($brackets, $i, 1) eq \">\") {\n            $level--;\n\
    \        }\n        if ($level < 0) {\n            return \"\";\n        }\n \
    \   }\n    if ($level == 0) {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $count = 0;\n    for my $chr (split //, $brackets)\
    \ {\n        if ($chr eq '<') {\n            $count++;\n        }\n        else\
    \ {\n            $count--;\n        }\n        return \"\" if $count < 0;\n  \
    \  }\n    return \"\" if $count != 0;\n    return 1;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"\
    <>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    >\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $count = 0;\n    foreach my $b (split(//,\
    \ $brackets)) {\n        if ($b eq \"<\") {\n            $count++;\n        }\n\
    \        elsif ($b eq \">\") {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return \"\";\n        }\n    }\n    return $count == 0 ?\
    \ 1 : \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my @stack;\n    foreach my $b (split(//, $brackets))\
    \ {\n        if ($b eq \"<\") {\n            push(@stack, $b);\n        }\n  \
    \      elsif ($b eq \">\") {\n            return \"\" if @stack == 0;\n      \
    \      my $t = pop(@stack);\n            return \"\" if $t ne \"<\";\n       \
    \ }\n    }\n    return \"\" if @stack > 0;\n    return 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"\
    <>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    >\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $counter = 0;\n    foreach my $char (split\
    \ //, $brackets) {\n        if ($char eq \"<\") {\n            $counter++;\n \
    \       }\n        elsif ($char eq \">\") {\n            $counter--;\n       \
    \ }\n        else {\n            return '';\n        }\n        if ($counter <\
    \ 0) {\n            return '';\n        }\n    }\n    return $counter == 0 ? 1\
    \ : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n\
    \        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 1
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $opening_count = 0;\n    my $closing_count\
    \ = 0;\n    for (my $i = 0; $i < length($brackets); $i++) {\n        if (substr($brackets,\
    \ $i, 1) eq \"<\") {\n            $opening_count++;\n        } elsif (substr($brackets,\
    \ $i, 1) eq \">\") {\n            $closing_count++;\n        }\n    }\n    if\
    \ ($opening_count == $closing_count) {\n        return 1;\n    } else {\n    \
    \    return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 1
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $l = ($brackets =~ s/</</g); # number of\
    \ left brackets\n    my $r = ($brackets =~ s/>/>/g); # number of right brackets\n\
    \    return $l == $r ? 1 : undef;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"\
    <>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    >\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my($opening_count) = 0;\n    foreach my $character\
    \ (split //, $brackets) {\n        if ($character eq \"<\") {\n            $opening_count++;\n\
    \        } elsif ($character eq \">\") {\n            if ($opening_count > 0)\
    \ {\n                $opening_count--;\n            } else {\n               \
    \ return \"\";\n            }\n        } else {\n            return \"\";\n  \
    \      }\n    }\n    if ($opening_count == 0) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"\
    <>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    >\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 255
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    return 1 if ($brackets eq '');\n    return ''\
    \ if ($brackets =~ /^>/);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpm6ucivj3.pl line 70, at
    end of line

    syntax error at /tmp/tmpm6ucivj3.pl line 70, at EOF

    Execution of /tmp/tmpm6ucivj3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1659821527
- exit_code: 1
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my($i, $j, $k, $len, $opening_brackets, $closing_brackets);\n\
    \    $len = length($brackets);\n    if ($len == 0) { return; }\n    if ($len %\
    \ 2 == 1) { return; }\n    $opening_brackets = $closing_brackets = 0;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if (substr($brackets, $i, 1) eq \"<\")\
    \ {\n            $opening_brackets++;\n        }\n        elsif (substr($brackets,\
    \ $i, 1) eq \">\") {\n            $closing_brackets++;\n        }\n        if\
    \ ($closing_brackets > $opening_brackets) { return; }\n    }\n    if ($opening_brackets\
    \ == $closing_brackets) { return(1); }\n    return;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"\
    <>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    >\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $count = 0;\n    for my $i (0 .. length($brackets)\
    \ - 1) {\n        $count += substr($brackets, $i, 1) eq '<' ? 1 : -1;\n      \
    \  return '' if $count < 0;\n    }\n    return $count ? '' : 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"\
    <>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    >\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 255
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    if(correct_bracketing1($brackets) eq \"1\")\
    \ { return 1; }\n    else { return \"\"; }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"\
    <>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    >\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::correct_bracketing1 called at /tmp/tmp2ouz07pd.pl
    line 13.

    '
  stdout: ''
  timestamp: 1659821527
- exit_code: 1
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my $left;\n    my $right;\n    while ($brackets\
    \ =~ s/<>//g) {\n        $left++;\n        $right++;\n    }\n    if ($left ==\
    \ $right) {\n        return 1;\n    }\n    else {\n        return \"\";\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n\
    \        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821527
- exit_code: 0
  program: "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening\
    \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\"\
    )\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"\
    <<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing\
    \ {\n    my($brackets) = @_;\n    my @stack;\n    for my $c (split //, $brackets)\
    \ {\n        if ($c eq '<') {\n            push @stack, $c;\n        }\n     \
    \   elsif ($c eq '>') {\n            if (@stack && $stack[-1] eq '<') {\n    \
    \            pop @stack;\n            }\n            else {\n                return\
    \ '';\n            }\n        }\n    }\n    return '' if @stack;\n    return 1;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n\
    \        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    <><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821527
