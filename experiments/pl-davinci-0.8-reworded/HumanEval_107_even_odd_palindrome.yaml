name: HumanEval_107_even_odd_palindrome
language: pl
prompt: "# Given a positive integer n, return an array that has the number of even\
  \ and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n\
  # Example 1:\n# >>> even_odd_palindrome(3)\n# [1, 2]\n# Explanation:\n# Integer\
  \ palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example\
  \ 2:\n# >>> even_odd_palindrome(12)\n# [4, 6]\n# Explanation:\n# Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  # Note:\n# 1. 1 <= n <= 10^3\n# 2. returned array has the number of even and odd\
  \ integer palindromes respectively.\nsub even_odd_palindrome {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_palindrome;\n\
  \        if(eq_deeply($candidate->(123),[8, 13])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(12),[4, 6])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),[1,\
  \ 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),[6,\
  \ 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),[5,\
  \ 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),[4,\
  \ 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[4,\
  \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[0,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $even = 0;\n    my $odd = 0;\n    for (my $i = 1; $i <= $n;\
    \ $i++) {\n        if (is_palindrome($i)) {\n            if ($i % 2 == 0) {\n\
    \                $even++;\n            } else {\n                $odd++;\n   \
    \         }\n        }\n    }\n    return [$even, $odd];\n}", "    my($n_odd,\
    \ $n_even);\n    if($n == 1) {\n        return [0, 1];\n    }\n    if($n < 10)\
    \ {\n        return [1, $n - 1];\n    }\n    if($n >= 10) {\n        if($n % 2\
    \ == 0) {\n            $n_even = $n/2;\n            $n_odd = $n/2;\n        }\
    \ else {\n            $n_even = int($n/2);\n            $n_odd = int($n/2) + 1;\n\
    \        }\n    }\n    return [$n_even, $n_odd];\n}", "    my $even_count = 0;\n\
    \    my $odd_count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        if($i\
    \ <= 10) {\n            if($i % 2 == 0) {\n                $even_count++;\n  \
    \          } else {\n                $odd_count++;\n            }\n        } else\
    \ {\n            my $str = reverse(\"$i\");\n            if(\"$i\" eq $str) {\n\
    \                if($i % 2 == 0) {\n                    $even_count++;\n     \
    \           } else {\n                    $odd_count++;\n                }\n \
    \           }\n        }\n    }\n    return [$even_count, $odd_count];\n}", " \
    \   my($count_even, $count_odd) = (0, 0);\n    for(my $i = 1; $i <= $n; $i++)\
    \ {\n        my $palindrome = is_palindrome($i);\n        if($palindrome) {\n\
    \            if($i % 2 == 0) {\n                $count_even++;\n            }\
    \ else {\n                $count_odd++;\n            }\n        }\n    }\n   \
    \ return [$count_even, $count_odd];\n}", "    my @res = (0, 0);\n    return @res\
    \ if $n <= 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        my $t = $i;\n  \
    \      my $r = 0;\n        while ($t) {\n            $r = $r * 10 + $t % 10;\n\
    \            $t /= 10;\n        }\n        $res[$r % 2] += 1 if $r <= $n;\n  \
    \  }\n    return @res;\n}", "    my($even_count, $odd_count) = (0, 0);\n    if\
    \ ($n > 0) {\n        $even_count = int(($n / 10) * 4);\n        $odd_count =\
    \ int($n - $even_count);\n    }\n    return [$even_count, $odd_count];\n}\nprint\
    \ join(', ', @{even_odd_palindrome(3)}), \"\\n\";\nprint join(', ', @{even_odd_palindrome(12)}),\
    \ \"\\n\";\nprint join(', ', @{even_odd_palindrome(100)}), \"\\n\";", "    my\
    \ $odd_cnt = 0;\n    my $even_cnt = 0;\n    foreach my $i (1..$n) {\n        my\
    \ $reversed = reverse($i);\n        if ($i == $reversed) {\n            $i % 2\
    \ == 0 ? $even_cnt++ : $odd_cnt++;\n        }\n    }\n    return [$even_cnt, $odd_cnt];\n\
    }", "    my $even = 0;\n    my $odd = 0;\n    if ($n >= 1 && $n <= 1000) {\n \
    \       for (my $i = 1; $i <= $n; $i++) {\n            if (is_palindrome($i))\
    \ {\n                if ($i % 2 == 0) {\n                    $even++;\n      \
    \          } else {\n                    $odd++;\n                }\n        \
    \    }\n        }\n    }\n    return [$even, $odd];\n}", "    my($i,$count);\n\
    \    my @retval = ();\n    for ($i = 1; $i <= $n; $i++) {\n        if (is_palindrome($i))\
    \ {\n            if ($i % 2 == 0) {\n                $retval[0]++;\n         \
    \   } else {\n                $retval[1]++;\n            }\n        }\n    }\n\
    \    return @retval;\n}", "    my @res = (0, 0);\n    for my $i (1..$n) {\n  \
    \      if ($i >= 1 && $i <= 9) {\n            $res[0]++;\n        }\n        elsif\
    \ ($i == 11) {\n            $res[1]++;\n        }\n        elsif ($i % 11 == 0)\
    \ {\n            $res[0]++;\n        }\n        else {\n            $res[1]++;\n\
    \        }\n    }\n    return @res;\n}", "    my $even = 1;\n    my $odd = 0;\n\
    \    for (my $i = 1; $i <= $n; $i++) {\n        $even += 1 if _is_palindrome($i)\
    \ && ($i % 2 == 0);\n        $odd += 1 if _is_palindrome($i) && ($i % 2 == 1);\n\
    \    }\n    return [$even, $odd];\n}", "    # write your code here\n    my @result\
    \ = (0, 0);\n    if ($n <= 1) {\n        return @result;\n    }\n    for (my $i\
    \ = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result[0]++;\n\
    \        } else {\n            $result[1]++;\n        }\n    }\n    return @result;\n\
    }", "    my $even_num = 0;\n    my $odd_num = 0;\n    for (my $i = 1; $i <= $n;\
    \ $i++) {\n        if ($i < 10) {\n            $odd_num++;\n        } elsif ($i\
    \ == reverse($i)) {\n            if (length($i) % 2 == 0) {\n                $even_num++;\n\
    \            } else {\n                $odd_num++;\n            }\n        }\n\
    \    }\n    return [$even_num, $odd_num];\n}", "    my $i = 1;\n    my $j = 1;\n\
    \    my $str = '';\n    my($count_even, $count_odd) = (0, 0);\n    for (1..$n)\
    \ {\n        $str = reverse($_);\n        if ($str eq $_) {\n            if (length($str)\
    \ % 2 == 0) {\n                $count_even++;\n            } else {\n        \
    \        $count_odd++;\n            }\n        }\n    }\n    return [$count_even,\
    \ $count_odd];\n}", "    my @result = (0, 0);\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        if ($i < 10) {\n            $result[$i % 2]++;\n        } else {\n\
    \            my $num = $i;\n            my $reverse = 0;\n            while ($num\
    \ > 0) {\n                $reverse = $reverse * 10 + $num % 10;\n            \
    \    $num /= 10;\n            }\n            $result[$reverse == $i ? 0 : 1]++;\n\
    \        }\n    }\n    return @result;\n}", '    my @counts = (0, 0);', "    my($count_even,\
    \ $count_odd) = (0, 0);\n    for (my $i = 1; $i <= $n; $i++) {\n        my($number)\
    \ = sprintf(\"%b\", $i);\n        my(@array) = split('', $number);\n        my($count_1)\
    \ = scalar(grep{$_ eq '1'} @array);\n        $count_even++ if $count_1 % 2 ==\
    \ 0;\n        $count_odd++ if $count_1 % 2 == 1;\n    }\n    return [$count_even,\
    \ $count_odd];\n}", "    die 'Wrong input' if $n <= 0;\n    my $count = 0;\n \
    \   my($even, $odd) = (0, 0);\n    my $half_digits = int(length($n) / 2);\n  \
    \  my @digits = split(//, $n);\n    while ($count <= $half_digits) {\n       \
    \ if (@digits) {\n            my $t = pop @digits;\n            unshift @digits,\
    \ $t;\n        }\n        if ($count == $half_digits) {\n            if (length($n)\
    \ % 2 == 0) {\n                $even++ if @digits == 0;\n            } else {\n\
    \                my $number = join('', @digits);\n                $even++ if $number\
    \ == 0;\n                $odd++ if $number > 0;\n            }\n        } else\
    \ {\n            my $number = join('', @digits);\n            $even++ if $number\
    \ % 2 == 0;\n            $odd++ if $number % 2 != 0;\n        }\n        $count++;\n\
    \    }\n    return [$even, $odd];\n}", "    my $even = 0;\n    my $odd = 0;\n\
    \    for(my $i = 1; $i <= $n; $i++) {\n        if($i < 10) {\n            $odd++;\n\
    \        }\n        elsif($i % 10 == 0) {\n            next;\n        }\n    \
    \    else {\n            if(is_palindrome($i)) {\n                $i % 2 == 0\
    \ ? $even++ : $odd++;\n            }\n        }\n    }\n    return [$even, $odd];\n\
    }", "    return $n >= 1 && $n <= 10**3 ? [$n-1, $n] : undef;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
