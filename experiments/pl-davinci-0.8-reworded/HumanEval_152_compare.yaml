name: HumanEval_152_compare
language: pl
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\n# >>> compare([1, 2,\
  \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare([0, 5,\
  \ 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\nsub compare {\n    my($game,\
  \ $guess) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0,\
  \ 0, 0, 0, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0,\
  \ 0, 0, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    for (my $i = 0; $i < @$game; $i++) {\n       \
    \ my $diff = ($game->[$i] - $guess->[$i]);\n        push @result, abs($diff);\n\
    \    }\n    return @result;\n}", "    my @result;\n    for my $ind(0..@$game-1)\
    \ {\n        my $value = @$game[$ind];\n        my $guess_value = @$guess[$ind];\n\
    \        if($value == $guess_value) {\n            push @result, 0;\n        }\
    \ else {\n            push @result, abs($value - $guess_value);\n        }\n \
    \   }\n    return @result;\n}", "    my @errors;\n    for (my $i = 0; $i < @$game;\
    \ $i++) {\n        my $err = $game->[$i] - $guess->[$i];\n        push @errors,\
    \ $err > 0 ? $err : -$err;\n    }\n    return @errors;\n}", "    my @game = @$game;\n\
    \    my @guess = @$guess;\n    my @res;\n    for (my $i = 0; $i < @game; $i++)\
    \ {\n        $res[$i] = abs($game[$i] - $guess[$i]);\n    }\n    return @res;\n\
    }", "    my @results;\n    foreach my $i (0..$#game) {\n        push @results,\
    \ abs($game->[$i] - $guess->[$i]);\n    }\n    return @results;\n}", "    my @result;\n\
    \    foreach my $idx (0..$#game) {\n        if ($game[$idx] == $guess[$idx]) {\n\
    \            push @result, 0;\n        } else {\n            push @result, abs($game[$idx]\
    \ - $guess[$idx]);\n        }\n    }\n    return @result;\n}", "    my @diff;\n\
    \    foreach my $num (0..$#{$game}) {\n        my $d = $game->[$num] - $guess->[$num];\n\
    \        push @diff, $d if $d != 0;\n    }\n    return @diff;\n}", "    die \"\
    Both arrays must be of equal length\" if (scalar @$game != scalar @$guess);\n\
    \    my @output;\n    for my $i (0..scalar @$game - 1) {\n        push @output,\
    \ abs $game->[$i] - $guess->[$i];\n    }\n    return @output;\n}", "    my @results;\n\
    \    my $index = 0;\n    my $i = 0;\n    my $index_r = 0;\n    my $index_g = 0;\n\
    \    for my $i ( 0 .. $#game ) {\n        if($game[$i] < $guess[$i]) {\n     \
    \       $index_r = $guess[$i] - $game[$i];\n            $results[$i] = $index_r;\n\
    \        }\n        elsif($game[$i] > $guess[$i]) {\n            $index_g = $game[$i]\
    \ - $guess[$i];\n            $results[$i] = $index_g;\n        }\n        else\
    \ {\n            $results[$i] = 0;\n        }\n    }\n    return @results;\n}",
  "    my @result;\n    for (my $i = 0; $i < scalar @$game; $i++) {\n        if ($game->[$i]\
    \ == $guess->[$i]) {\n            push @result, 0;\n        } else {\n       \
    \     push @result, abs($game->[$i] - $guess->[$i]);\n        }\n    }\n    return\
    \ @result;\n}", "    my @res;\n    foreach (0..$#game) {\n        if ($game[$_]\
    \ == $guess[$_]) {\n            push @res, 0;\n        } else {\n            push\
    \ @res, abs($game[$_] - $guess[$_]);\n        }\n    }\n    return @res;\n}",
  "    my @scores;\n    for my $i (0..$#game) {\n        $scores[$i] = abs($game[$i]\
    \ - $guess[$i]);\n    }\n    return @scores;\n}", "    my @res;\n    for my $i\
    \ (0..$#{$game}) {\n        push @res, abs($game->[$i] - $guess->[$i]);\n    }\n\
    \    return @res;\n}", "    die \"length mismatch\" unless @$game == @$guess;\n\
    \    my @result;\n    foreach my $i (0..@$game-1) {\n        $result[$i] = abs($game->[$i]\
    \ - $guess->[$i]);\n    }\n    return @result;\n}", "    my @result;\n    for\
    \ my $i (0..$#game) {\n        my $score = $game->[$i];\n        my $target =\
    \ $guess->[$i];\n        if ($score == $target) {\n            push @result, 0;\n\
    \        } else {\n            push @result, abs($score - $target);\n        }\n\
    \    }\n    return @result;\n}", "    my @results;\n    foreach my $i (0..scalar(@$game)\
    \ - 1) {\n        if ($game->[$i] != $guess->[$i]) {\n            my $result =\
    \ abs($game->[$i] - $guess->[$i]);\n            push @results, $result;\n    \
    \    } else {\n            push @results, 0;\n        }\n    }\n    return @results;\n\
    }", "    my @err = map { abs($game->[$_] - $guess->[$_]) } 0..$#$game;\n    return\
    \ @err;\n}", "    my @distance = map { abs($game->[$_] - $guess->[$_]) } 0..$#$game;\n\
    \    return @distance;\n}", "    my @array;\n    for my $index (0..$#game) {\n\
    \        if ($game[$index] != $guess[$index]) {\n            push @array, abs($game[$index]\
    \ - $guess[$index]);\n        }\n        else {\n            push @array, 0;\n\
    \        }\n    }\n    return @array;\n}", "    my @guess = @$guess;\n    my @game\
    \ = @$game;\n    my @result;\n    for (my $i = 0; $i < @guess; $i++) {\n     \
    \   if ($guess[$i] > $game[$i]) {\n            push @result, $guess[$i] - $game[$i];\n\
    \        } elsif ($guess[$i] < $game[$i]) {\n            push @result, $game[$i]\
    \ - $guess[$i];\n        } else {\n            push @result, 0;\n        }\n \
    \   }\n    return @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
