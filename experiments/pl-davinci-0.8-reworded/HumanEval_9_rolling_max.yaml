name: HumanEval_9_rolling_max
language: pl
prompt: "# From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2, 3,\
  \ 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\nsub rolling_max {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rolling_max;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2,\
  \ 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 3, 2, 1]),[4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    my $max = $numbers->[0];\n    push @result, $max;\n\
    \    for my $i (1 .. $#$numbers) {\n        if ($numbers->[$i] > $max) {\n   \
    \         $max = $numbers->[$i];\n        }\n        push @result, $max;\n   \
    \ }\n    return \\@result;\n}", "    my @results;\n    my $max_so_far = $numbers->[0];\n\
    \    for my $i (0 .. $#$numbers) {\n        $max_so_far = $numbers->[$i] if $numbers->[$i]\
    \ > $max_so_far;\n        $results[$i] = $max_so_far;\n    }\n    return \\@results;\n\
    }", "    my $max = 0;\n    my @rolling_max;\n    foreach my $num (@$numbers) {\n\
    \        $max = $num if $num > $max;\n        push @rolling_max, $max;\n    }\n\
    \    return \\@rolling_max;\n}", "    return if not defined $numbers;\n    return\
    \ [$numbers->[0]] if $#$numbers == 0;\n    my $result = [$numbers->[0]];\n   \
    \ foreach my $i (1 .. $#$numbers) {\n        push @$result, $result->[-1] > $numbers->[$i]\
    \ ? $result->[-1] : $numbers->[$i];\n    }\n    return $result;\n}", "    my $max\
    \ = $numbers->[0];\n    my @maxes = ($max);\n    for my $num (@$numbers[1..$#$numbers])\
    \ {\n        if ($num > $max) {\n            $max = $num;\n        }\n       \
    \ push @maxes, $max;\n    }\n    return \\@maxes;\n}", "    return [map { max\
    \ @$numbers[0..$_] } (0..$#$numbers)];\n}", "    my @result;\n    my $max = 0;\n\
    \    for my $i (0 .. $#$numbers) {\n        $max = $numbers->[$i] if $numbers->[$i]\
    \ > $max;\n        $result[$i] = $max;\n    }\n    return \\@result;\n}", "  \
    \  my $result = [];\n    my $max = 0;\n    for my $number (@$numbers) {\n    \
    \    $max = $number if $number > $max;\n        push @$result, $max;\n    }\n\
    \    return $result;\n}", "    my $result = [];\n    my $max = undef;\n    foreach\
    \ my $number (@$numbers) {\n        if(!defined($max) || $number > $max) {\n \
    \           $max = $number;\n        }\n        push @$result, $max;\n    }\n\
    \    return $result;\n}", "    my @result;\n    my $max = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $max = $number if $number > $max;\n        push @result,\
    \ $max;\n    }\n    return \\@result;\n}", "    my @rolling_max;\n    my $max_so_far\
    \ = -1;\n    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n        my $number\
    \ = $numbers->[$i];\n        $max_so_far = max($max_so_far, $number);\n      \
    \  $rolling_max[$i] = $max_so_far;\n    }\n    return \\@rolling_max;\n}", " \
    \   my $total_elements = scalar @$numbers;\n    my @result = ();\n    for (my\
    \ $i = 0; $i < $total_elements; $i++) {\n        my $current_max = $numbers->[$i];\n\
    \        for (my $j = $i; $j < $total_elements; $j++) {\n            if ($numbers->[$j]\
    \ > $current_max) {\n                $current_max = $numbers->[$j];\n        \
    \    }\n        }\n        push @result, $current_max;\n    }\n    return @result;\n\
    }", "    my $roll = [];\n    my $max  = 0;\n    for my $i (0 .. $#$numbers) {\n\
    \        my $value = $numbers->[$i];\n        if ($value > $max) {\n         \
    \   $max = $value;\n        }\n        $roll->[$i] = $max;\n    }\n    return\
    \ $roll;\n}", "    my @rolling_max = map { (max($numbers->@[0..$_]))[-1] } (0..$#$numbers);\n\
    \    return \\@rolling_max;\n}", "    my @result;\n    my $max = 0;\n    for my\
    \ $i (0 .. $#$numbers) {\n        my $number = $numbers->[$i];\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n        $result[$i] = $max;\n\
    \    }\n    return \\@result;\n}", "    my $maximum = $numbers->[0];\n    return\
    \ [ map { $maximum = $_ if $_ > $maximum; $maximum } @$numbers ];\n}", "    my\
    \ @ret = ();\n    my $max = 0;\n    foreach my $n (@$numbers) {\n        if ($n\
    \ > $max) {\n            $max = $n;\n        }\n        push @ret, $max;\n   \
    \ }\n    return \\@ret;\n}", "    my @max;\n    my $current_max = undef;\n   \
    \ for my $number (@$numbers) {\n        $current_max = $number if !defined $current_max\
    \ || $number > $current_max;\n        push @max, $current_max;\n    }\n    return\
    \ \\@max;\n}", "    my @rolling_max = ();\n    my $max = $numbers->[0];\n    push\
    \ @rolling_max, $max;\n    for my $num (1..$#$numbers) {\n        if ($numbers->[$num]\
    \ > $max) {\n            $max = $numbers->[$num];\n        }\n        push @rolling_max,\
    \ $max;\n    }\n    return \\@rolling_max;\n}", '    my @res = (undef);', "  \
    \  my $index = 0;\n    my $current_max = $numbers->[$index];\n    my @result =\
    \ (undef) x scalar(@$numbers);\n    foreach my $element (@$numbers) {\n      \
    \  $result[$index] = $current_max;\n        if ($element > $current_max) {\n \
    \           $current_max = $element;\n        }\n        $index++;\n    }\n  \
    \  return \\@result;\n}", "    my($max, @result);\n    foreach my $n (@$numbers)\
    \ {\n        if ($n > $max) {\n            $max = $n;\n        }\n        push\
    \ @result, $max;\n    }\n    return \\@result;\n}", "    my @max = ();\n    my\
    \ $max_so_far = 0;\n    foreach my $num (@$numbers) {\n        if ($num > $max_so_far)\
    \ {\n            $max_so_far = $num;\n        }\n        push @max, $max_so_far;\n\
    \    }\n    return \\@max;\n}", "    my $max = 0;\n    my @result;\n    foreach\
    \ my $number (@$numbers) {\n        $max = $number if $number > $max;\n      \
    \  push @result, $max;\n    }\n    return \\@result;\n}", "    my $result = [];\n\
    \    my $max = -1;\n    for my $n (@$numbers) {\n        $max = $n if $n > $max;\n\
    \        push @$result, $max;\n    }\n    return $result;\n}", "    my $max  \
    \    = -1e38;\n    my @maximums = map {\n        if ($_ > $max) {\n          \
    \  $max = $_;\n        }\n        $max;\n    } @$numbers;\n    return \\@maximums;\n\
    }", "    my $max = $numbers->[0];\n    my @results = ($max);\n    for my $i (1\
    \ .. $#$numbers) {\n        $max = max($max, $numbers->[$i]);\n        push @results,\
    \ $max;\n    }\n    return \\@results;\n}", "    my @maximums = map { max(@$numbers[0..$_])\
    \ } 0..$#$numbers;\n    return \\@maximums;\n}", "    return [map {\n        my\
    \ $m = $_;\n        map { max($m, $_) } @$numbers[0 .. $_]\n    } 0 .. @$numbers\
    \ - 1];\n}", "    my $max = 0;\n    my @result;\n    push @result, $max;\n   \
    \ foreach my $i (@$numbers) {\n        $max = max($max, $i);\n        push @result,\
    \ $max;\n    }\n    return \\@result;\n}", "    my $max = 0;\n    my @rolling_max\
    \ = ();\n    foreach my $n (@$numbers) {\n        $max = $n if $n > $max;\n  \
    \      push @rolling_max, $max;\n    }\n    return \\@rolling_max;\n}", "    my\
    \ $max = -1;\n    return [map {$max = max($max, $_)} @$numbers];\n}", "    my\
    \ $result = [];\n    my $max_so_far = $numbers->[0];\n    push(@$result, $max_so_far);\n\
    \    for (my $i = 1; $i < scalar(@$numbers); $i++) {\n        if ($numbers->[$i]\
    \ > $max_so_far) {\n            $max_so_far = $numbers->[$i];\n        }\n   \
    \     push(@$result, $max_so_far);\n    }\n    return $result;\n}", "    my $result\
    \ = [];\n    my $current_max = undef;\n    for my $element (@$numbers) {\n   \
    \     if (defined $current_max) {\n            $current_max = max($current_max,\
    \ $element);\n        } else {\n            $current_max = $element;\n       \
    \ }\n        push @$result, $current_max;\n    }\n    return $result;\n}", " \
    \   if (ref($numbers) ne 'ARRAY') {\n        die(\"Invalid numbers list: $numbers\"\
    );\n    }\n    my $max = 0;\n    my @roll_max = ();\n    foreach my $num (@$numbers)\
    \ {\n        push(@roll_max, $max);\n        if ($num > $max) {\n            $max\
    \ = $num;\n        }\n    }\n    return @roll_max;\n}", "    my $max = 0;\n  \
    \  return [map { $max = $_ > $max ? $_ : $max } @$numbers];\n}", "    my @rolling\
    \ = (0);\n    my $max = 0;\n    for(my $i = 0; $i < scalar(@$numbers); $i++) {\n\
    \        if ($numbers->[$i] > $max) {\n            $max = $numbers->[$i];\n  \
    \      }\n        push @rolling, $max;\n    }\n    return @rolling;\n}", "   \
    \ my @result;\n    push @result, $numbers->[0];\n    for my $idx (1 .. $#$numbers)\
    \ {\n        push @result, max($result[-1], $numbers->[$idx]);\n    }\n    return\
    \ \\@result;\n}", "    my $res = [];\n    my $max = -Infinity;\n    for my $number\
    \ (@$numbers) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        push @$res, $max;\n    }\n    return $res;\n}", "    my $max\
    \ = $numbers->[0];\n    return [map { $max = $_ if $_ > $max; $max } @$numbers];\n\
    }", "    my @ans = map {\n        my $max = $numbers->[$_];\n        foreach my\
    \ $i ($_ .. $#$numbers) {\n            $max = $numbers->[$i] if $numbers->[$i]\
    \ > $max;\n        }\n        $max;\n    } 0 .. $#$numbers;\n    return @ans;\n\
    }", "    # add empty element as 1st element, as we are starting from 2nd number\n\
    \    unshift @$numbers, undef;\n    my $max;\n    return [ map {\n        if ($_\
    \ > $max) {\n            $max = $_;\n        }\n        $max;\n    } @$numbers\
    \ ];\n}", "    return [] if @$numbers == 0;\n    my $max = $numbers->[0];\n  \
    \  my @result = ($max);\n    for my $i (1 .. $#$numbers) {\n        $max = $numbers->[$i]\
    \ if $numbers->[$i] > $max;\n        push @result, $max;\n    }\n    return \\\
    @result;\n}", "    my($max) = 0;\n    my(@result);\n    for my $number (@$numbers)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       push @result, $max;\n    }\n    return \\@result;\n}", "    die \"Not\
    \ implemented\";\n}", "    my $max_so_far = $numbers->[0];\n    my @result = ($max_so_far);\n\
    \    for my $i (1 .. $#$numbers) {\n        my $num = $numbers->[$i];\n      \
    \  if ($num > $max_so_far) {\n            $max_so_far = $num;\n        }\n   \
    \     push @result, $max_so_far;\n    }\n    return \\@result;\n}", "    my @max;\n\
    \    my $current_max = -1e10;\n    foreach my $number (@$numbers) {\n        $current_max\
    \ = max($current_max, $number);\n        push @max, $current_max;\n    }\n   \
    \ return \\@max;\n}", "    my $max = -1;\n    return [map {$max = max($max, $_)}\
    \ @$numbers];\n}", "    my @result;\n    my $max = $numbers->[0];\n    push @result,\
    \ $max;\n    for my $i (1 .. $#$numbers) {\n        $max = max($max, $numbers->[$i]);\n\
    \        push @result, $max;\n    }\n    return \\@result;\n}", "    my @max;\n\
    \    my $max = -1;\n    foreach my $number (@$numbers) {\n        $max = $number\
    \ if $number > $max;\n        push @max, $max;\n    }\n    return \\@max;\n}",
  "    my $current_max = $numbers->[0];\n    my @rolling_max = ($current_max);\n \
    \   for my $n (@$numbers[1..$#$numbers]) {\n        $current_max = $n if $n >\
    \ $current_max;\n        push @rolling_max, $current_max;\n    }\n    return \\\
    @rolling_max;\n}", "    my $max = -1;\n    return map {\n        $max = $_ if\
    \ $max < $_;\n        $max;\n    } @$numbers;\n}", "    my $i = 0;\n    my $len\
    \ = scalar @$numbers;\n    my @result = ();\n    while ($i < $len) {\n       \
    \ my $j = $i;\n        my $max = $numbers->[$i];\n        while ($j < $len) {\n\
    \            $max = $numbers->[$j] if $numbers->[$j] > $max;\n            $j++;\n\
    \        }\n        push @result, $max;\n        $i++;\n    }\n    return \\@result;\n\
    }", "    my @maxes = (shift @$numbers);\n    for my $n (@$numbers) {\n       \
    \ push @maxes, max($n, $maxes[-1]);\n    }\n    return @maxes;\n}", "    my @result;\n\
    \    my $previous_max = -9999;\n    for my $number (@$numbers) {\n        $previous_max\
    \ = $number if $number > $previous_max;\n        push @result, $previous_max;\n\
    \    }\n    return \\@result;\n}", "    my @result;\n    my $max = $numbers->[0];\n\
    \    push @result, $max;\n    for (my $i = 1; $i < @$numbers; $i++) {\n      \
    \  if ($numbers->[$i] > $max) {\n            $max = $numbers->[$i];\n        }\n\
    \        push @result, $max;\n    }\n    return \\@result;\n}", "    my $max =\
    \ 0;\n    my @result;\n    foreach (@$numbers) {\n        $max = $max > $_ ? $max\
    \ : $_;\n        push @result, $max;\n    }\n    return \\@result;\n}", "    if(ref($numbers)\
    \ ne 'ARRAY') {\n        die \"Only arrays as input please\\n\";\n    }\n    my\
    \ @out;\n    my $current_max = undef;\n    for my $n (@$numbers) {\n        if(!defined($current_max)\
    \ || $n > $current_max) {\n            $current_max = $n;\n        }\n       \
    \ push @out, $current_max;\n    }\n    return \\@out;\n}", "    return [] unless\
    \ @$numbers;\n    my $max = $numbers->[0];\n    my @rolling_max = ($max);\n  \
    \  foreach my $number (@$numbers[1..$#$numbers]) {\n        if ($number > $max)\
    \ {\n            $max = $number;\n        }\n        push @rolling_max, $max;\n\
    \    }\n    return \\@rolling_max;\n}", "    my $current_max = shift @$numbers;\n\
    \    my @output = ($current_max);\n    for my $number (@$numbers) {\n        $current_max\
    \ = max($current_max, $number);\n        push @output, $current_max;\n    }\n\
    \    return \\@output;\n}", "    my $max_here = $numbers->[0];\n    my @result\
    \ = ($max_here);\n    foreach my $i (1 .. $#$numbers) {\n        my $n = $numbers->[$i];\n\
    \        if ($n > $max_here) {\n            $max_here = $n;\n        }\n     \
    \   push @result, $max_here;\n    }\n    return \\@result;\n}", "    my $max =\
    \ shift @$numbers;\n    return [$max, map { $max = max($max, $_) } @$numbers];\n\
    }", "    my @res = ($numbers->[0]);\n    for (my $i = 1; $i < @$numbers; $i++)\
    \ {\n        push @res, max($res[-1], $numbers->[$i]);\n    }\n    return \\@res;\n\
    }", "    my $max = $numbers->[0];\n    my @maxs = ($max);\n    for my $number\
    \ (@$numbers[1..$#$numbers]) {\n        $max = $number if $number > $max;\n  \
    \      push @maxs, $max;\n    }\n    return \\@maxs;\n}", "    my $max = -1;\n\
    \    my @maxes = ();\n    for my $number (@$numbers) {\n        $max = $number\
    \ if $number > $max;\n        push @maxes, $max;\n    }\n    return \\@maxes;\n\
    }", "    my @maxes = ();\n    my $max = undef;\n    for my $number (@$numbers)\
    \ {\n        $max = $number if !defined($max) || $number > $max;\n        push\
    \ @maxes, $max;\n    }\n    return \\@maxes;\n}", "    my @max = map {-inf} 1..scalar(@$numbers);\n\
    \    my $max_i = 0;\n    for (0..scalar(@$numbers)-1) {\n        if ($$numbers[$_]\
    \ > $max[$max_i]) {\n            $max[++$max_i] = $$numbers[$_];\n        }\n\
    \    }\n    return [ @max[1..$max_i] ];\n}", "    my $max = $numbers->[0];\n \
    \   return [map {\n        $max = $_ if $_ > $max;\n        $max;\n    } @$numbers];\n\
    }", "    my @result;\n    my $max = -1;\n    for my $num (@$numbers) {\n     \
    \   if ($num > $max) {\n            $max = $num;\n        }\n        push @result,\
    \ $max;\n    }\n    return \\@result;\n}", "    my @result;\n    my $max = $numbers->[0];\n\
    \    for ( my $i = 0; $i < scalar @$numbers; $i++ ) {\n        $max = $numbers->[$i]\
    \ if ( $numbers->[$i] > $max );\n        $result[$i] = $max;\n    }\n    return\
    \ \\@result;\n}", "    my $max = -infinity;\n    [ map {\n        $max = max($max,\
    \ $_);\n        $max;\n    } @$numbers ];\n}", "    my $length = scalar @$numbers;\n\
    \    my @result = ();\n    push @result, $numbers->[0];\n    for (my $i = 1; $i\
    \ < $length; $i++) {\n        push @result, max($result[$i - 1], $numbers->[$i]);\n\
    \    }\n    return \\@result;\n}", "    my $current_max = $numbers->[0];\n   \
    \ my @rolling_max = ($current_max);\n    for my $i (1 .. $#$numbers) {\n     \
    \   $current_max = max($current_max, $numbers->[$i]);\n        push @rolling_max,\
    \ $current_max;\n    }\n    return \\@rolling_max;\n}", "    my $max = 0;\n  \
    \  my @maxes = ();\n    for my $number (@$numbers) {\n        $max = $number if\
    \ $number > $max;\n        push @maxes, $max;\n    }\n    return \\@maxes;\n}",
  "    my $max = 0;\n    return map { $max = $_ > $max ? $_ : $max } @$numbers;\n}",
  "    my $max_value = $numbers->[0];\n    my @result = ( $max_value );\n    foreach\
    \ my $number (@$numbers[1..$#$numbers]) {\n        $max_value = $number if $number\
    \ > $max_value;\n        push @result, $max_value;\n    }\n    return \\@result;\n\
    }", "    my @result;\n    my $last_max = undef;\n    for my $number (@$numbers)\
    \ {\n        my $max = $last_max // $number;\n        if ($number > $max) {\n\
    \            $max = $number;\n        }\n        push @result, $max;\n       \
    \ $last_max = $max;\n    }\n    return \\@result;\n}", "    my $max = -1;\n  \
    \  return [map { $max = $_ if $max < $_; $max } @$numbers];\n}", "    my @maxs\
    \ = ($numbers->[0]);\n    for my $idx (1 .. $#$numbers) {\n        push @maxs,\
    \ max($maxs[-1], $numbers->[$idx]);\n    }\n    return \\@maxs;\n}", "    my $result\
    \ = [];\n    push @$result, $numbers->[0];\n    for my $i (1 .. @$numbers - 1)\
    \ {\n        my $prev = $result->[-1];\n        my $curr = $numbers->[$i];\n \
    \       if ($curr > $prev) {\n            push @$result, $curr;\n        } else\
    \ {\n            push @$result, $prev;\n        }\n    }\n    return $result;\n\
    }", "    return [map { max(@$numbers[0..$_]) } 0..$#$numbers];\n}", "    my $max_found\
    \ = -1;\n    my @ret;\n    foreach my $num (@$numbers) {\n        $max_found =\
    \ $num if $num > $max_found;\n        push @ret, $max_found;\n    }\n    return\
    \ \\@ret;\n}", "    my $max_so_far = $numbers->[0];\n    my @result = ($max_so_far);\n\
    \    for my $next_num (@$numbers[1..$#$numbers]) {\n        if ($next_num > $max_so_far)\
    \ {\n            $max_so_far = $next_num;\n        }\n        push @result, $max_so_far;\n\
    \    }\n    return \\@result;\n}", "    my $max = $numbers->[0];\n    my @result\
    \ = ($max);\n    for my $i (1 .. $#$numbers) {\n        $max = max($max, $numbers->[$i]);\n\
    \        push @result, $max;\n    }\n    return \\@result;\n}", "    my @result;\n\
    \    my $max = undef;\n    for my $i (0 .. $#$numbers) {\n        $max = $numbers->[$i]\
    \ if not defined $max or $numbers->[$i] > $max;\n        $result[$i] = $max;\n\
    \    }\n    return \\@result;\n}", "    my $max = [];\n    my $max_seen = undef;\n\
    \    for my $x (@$numbers) {\n        if (not defined $max_seen or $x > $max_seen)\
    \ {\n            $max_seen = $x;\n        }\n        push @$max, $max_seen;\n\
    \    }\n    return $max;\n}", "    my @max;\n    my $max = 0;\n    for my $n (@$numbers)\
    \ {\n        $max = $n if $n > $max;\n        push @max, $max;\n    }\n    return\
    \ \\@max;\n}", "    my @max;\n    my $current_max = $numbers->[0];\n    for my\
    \ $number (@$numbers) {\n        $current_max = $number if $number > $current_max;\n\
    \        push @max, $current_max;\n    }\n    return \\@max;\n}", "    my @results;\n\
    \    my $max = -1;\n    for my $n (@$numbers) {\n        if ($n > $max) {\n  \
    \          $max = $n;\n        }\n        push @results, $max;\n    }\n    return\
    \ \\@results;\n}", "    my @rolling_max;\n    my $max = undef;\n    for my $number\
    \ (@$numbers) {\n        if(not defined $max or $number > $max) {\n          \
    \  $max = $number;\n        }\n        push @rolling_max, $max;\n    }\n    return\
    \ \\@rolling_max;\n}", "    my @result;\n    my $max = 0;\n    for my $number\
    \ (@$numbers) {\n        $max = $number if $number > $max;\n        push @result,\
    \ $max;\n    }\n    return \\@result;\n}", "    my $max = 0;\n    my @result;\n\
    \    push @result, $max;\n    for my $number (@$numbers) {\n        $max = $number\
    \ if $number > $max;\n        push @result, $max;\n    }\n    return \\@result;\n\
    }", "    my @result;\n    my $rolling_max = 0;\n    for my $num (@$numbers) {\n\
    \        $rolling_max = $num if $num > $rolling_max;\n        push @result, $rolling_max;\n\
    \    }\n    return \\@result;\n}", "    my @max;\n    my $current_max = $numbers->[0];\n\
    \    for (my $i = 0; $i < scalar @$numbers; $i++) {\n        if ($numbers->[$i]\
    \ > $current_max) {\n            $current_max = $numbers->[$i];\n        }\n \
    \       push @max, $current_max;\n    }\n    return \\@max;\n}", "    return map\
    \ {\n        Math::IntSeq::Max->new([ $numbers->@[ 0 .. $_ ] ])->current;\n  \
    \  } 0 .. $#$numbers;\n}", "    my @rolling_max = ();\n    my $current_max = -1e9;\n\
    \    for my $number (@$numbers) {\n        if ($number > $current_max) {\n   \
    \         $current_max = $number;\n        }\n        push @rolling_max, $current_max;\n\
    \    }\n    return \\@rolling_max;\n}", "    my $max = $numbers->[0];\n    return\
    \ [map { $max = $_ if $_ > $max; $max } @$numbers];\n}", "    my $max_so_far =\
    \ undef;\n    my @rolling_max;\n    for my $number (@$numbers) {\n        if (not\
    \ defined $max_so_far or $number > $max_so_far) {\n            $max_so_far = $number;\n\
    \        }\n        push @rolling_max, $max_so_far;\n    }\n    return \\@rolling_max;\n\
    }", "    my @max = ();\n    my $max = $numbers->[0];\n    push @max, $max;\n \
    \   for my $number ( @$numbers[1..$#$numbers] ) {\n        if ( $number > $max\
    \ ) {\n            $max = $number;\n        }\n        push @max, $max;\n    }\n\
    \    return \\@max;\n}", "    my $max = 0;\n    my @maxes = ();\n    for my $number\
    \ (@$numbers) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        push @maxes, $max;\n    }\n    return \\@maxes;\n}", "   \
    \ my $num_numbers = scalar(@$numbers);\n    my @maxs = ();\n    foreach my $i\
    \ (0..$num_numbers-1) {\n        $maxs[$i] = max @$numbers[0..$i];\n    }\n  \
    \  return @maxs;\n}", "    my @rolling_max;\n    my $max_so_far = $numbers->[0];\n\
    \    for my $i (0 .. $#$numbers) {\n        $max_so_far = $numbers->[$i] if $numbers->[$i]\
    \ > $max_so_far;\n        $rolling_max[$i] = $max_so_far;\n    }\n    return \\\
    @rolling_max;\n}", "    my @result;\n    push @result, $numbers->[0];\n    for\
    \ my $i (1 .. $#$numbers) {\n        push @result, $result[-1] > $numbers->[$i]\
    \ ? $result[-1] : $numbers->[$i];\n    }\n    return \\@result;\n}", "    my @result;\n\
    \    my $max = undef;\n    foreach my $num (@$numbers) {\n        if(not defined\
    \ $max or $num > $max) {\n            $max = $num;\n        }\n        push @result,\
    \ $max;\n    }\n    return \\@result;\n}", "    my $n = @$numbers;\n    my @maximums\
    \ = ($numbers->[0]);\n    for my $i (1 .. $n - 1) {\n        my $max = max($numbers->[$i],\
    \ $maximums[$i - 1]);\n        push @maximums, $max;\n    }\n    return \\@maximums;\n\
    }", "    my @result;\n    my $max = 0;\n    for my $number(@$numbers) {\n    \
    \    $max = $number if $number > $max;\n        push @result, $max;\n    }\n \
    \   return \\@result;\n}", "    my @result;\n    my $max = $numbers->[0];\n  \
    \  for(my $i = 0; $i < scalar(@$numbers); $i++) {\n        if($numbers->[$i] >\
    \ $max) {\n            $max = $numbers->[$i];\n        }\n        push @result,\
    \ $max;\n    }\n    return \\@result;\n}", "    my @result;\n    my $max = 0;\n\
    \    for(@$numbers) {\n        $max = $_ if $max < $_;\n        push @result,\
    \ $max;\n    }\n    @result;\n}", "    my($max, @result);\n    for my $number\
    \ (@$numbers) {\n        $max = $number if not defined $max or $number > $max;\n\
    \        push @result, $max;\n    }\n    return \\@result;\n}", "    my @roll\
    \ = ();\n    my $max = undef;\n    for my $num (@$numbers) {\n        $max = $num\
    \ if not defined $max or $num > $max;\n        push @roll, $max;\n    }\n    return\
    \ \\@roll;\n}", "    my $max = -1;\n    my @result;\n    foreach my $number (@$numbers)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       push @result, $max;\n    }\n    return \\@result;\n}", "    my $max =\
    \ undef;\n    my @result = ();\n    for my $number (@$numbers) {\n        if(defined\
    \ $max) {\n            $max = $number if $number > $max;\n        } else {\n \
    \           $max = $number;\n        }\n        push @result, $max;\n    }\n \
    \   return \\@result;\n}", "    die \"no numbers\" unless @$numbers;\n    my @result\
    \ = ($numbers->[0]);\n    my $max = $numbers->[0];\n    foreach my $number (@$numbers[1..$#$numbers])\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       push @result, $max;\n    }\n    return \\@result;\n}", "    my $max =\
    \ shift @$numbers;\n    my @result = ($max);\n    for my $number (@$numbers) {\n\
    \        $max = max($max, $number);\n        push @result, $max;\n    }\n    return\
    \ \\@result;\n}", "    my($max, @result);\n    for my $number (@$numbers) {\n\
    \        $max = max($max, $number);\n        push @result, $max;\n    }\n    return\
    \ \\@result;\n}", "    my $max = 0;\n    my @max_so_far = ();\n    foreach my\
    \ $n (@$numbers) {\n        $max = $n if $n > $max;\n        push @max_so_far,\
    \ $max;\n    }\n    return \\@max_so_far;\n}", "    my @results;\n    my $max\
    \ = undef;\n    foreach my $number (@$numbers) {\n        if (!defined($max) ||\
    \ $number > $max) {\n            $max = $number;\n        }\n        push @results,\
    \ $max;\n    }\n    return \\@results;\n}", "    my @result;\n    my $max = 0;\n\
    \    for my $number (@$numbers) {\n        $max = $number if $number > $max;\n\
    \        push @result, $max;\n    }\n    return \\@result;\n}", "    my @current_max\
    \ = ();\n    my $current_max = undef;\n    foreach my $number (@$numbers) {\n\
    \        if (!defined($current_max) || $number > $current_max) {\n           \
    \ $current_max = $number;\n        }\n        push @current_max, $current_max;\n\
    \    }\n    return \\@current_max;\n}", "    my @result;\n    my $max = undef;\n\
    \    foreach my $number (@$numbers) {\n        $max = $number if !defined($max)\
    \ || $number > $max;\n        push @result, $max;\n    }\n    return \\@result;\n\
    }", "    my $result = [$numbers->[0]];\n    for my $number (@$numbers[1..$#$numbers])\
    \ {\n        my $last_max = $result->[-1];\n        push @$result, $number > $last_max\
    \ ? $number : $last_max;\n    }\n    return $result;\n}", "    my @maxs = ();\n\
    \    my $max_so_far = $numbers->[0];\n    for my $n (@$numbers) {\n        $max_so_far\
    \ = $n if $n > $max_so_far;\n        push @maxs, $max_so_far;\n    }\n    return\
    \ \\@maxs;\n}", "    return [ map { max(@$numbers[0..$_]) } (0..$#$numbers) ];\n\
    }", "    my $max = 0;\n    my @maxes = ();\n    for my $number (@$numbers) {\n\
    \        $max = $number if $number > $max;\n        push @maxes, $max;\n    }\n\
    \    return \\@maxes;\n}", "    my @maxes = ();\n    my $current_max = 0;\n  \
    \  for my $number (@$numbers) {\n        $current_max = $number if $number > $current_max;\n\
    \        push @maxes, $current_max;\n    }\n    return \\@maxes;\n}", "    my\
    \ $max      = undef;\n    my @rolling  = map {\n        if ($_ > $max) {\n   \
    \         $max = $_;\n        }", "    my @max;\n    my $current_max = 0;\n  \
    \  for (my $i = 0; $i < scalar @$numbers; $i++) {\n        $current_max = $numbers->[$i]\
    \ if ($numbers->[$i] > $current_max);\n        $max[$i] = $current_max;\n    }\n\
    \    return \\@max;\n}", "    my $max = undef;\n    return map { $max = max($max,\
    \ $_) } @$numbers;\n}", "    my @result;\n    my $max = 0;\n    for my $number\
    \ (@$numbers) {\n        $max = $number if $number > $max;\n        push @result,\
    \ $max;\n    }\n    return \\@result;\n}", "    my $max = 0;\n    my @max_values\
    \ = map { $max = $_ > $max ? $_ : $max; $max } @$numbers;\n    return \\@max_values;\n\
    }", "    my @res = ();\n    my $max = undef;\n    for(my $i = 0; $i < scalar(@$numbers);\
    \ $i++) {\n        if(!defined($max) || $numbers->[$i] > $max) {\n           \
    \ $max = $numbers->[$i];\n        }\n        push(@res, $max);\n    }\n    return\
    \ \\@res;\n}", "    my($max, @result);\n    for my $number (@$numbers) {\n   \
    \     if( !defined $max || $number > $max ) {\n            $max = $number;\n \
    \       }\n        push @result, $max;\n    }\n    return \\@result;\n}", "  \
    \  die unless ref($numbers) eq 'ARRAY';\n    my $max = undef;\n    my @rollmax\
    \ = ();\n    for my $i (0..$#$numbers) {\n        $max = $numbers->[$i] if !defined($max)\
    \ || $numbers->[$i] > $max;\n        push @rollmax, $max;\n    }\n    return \\\
    @rollmax;\n}", "    my @result;\n    my $current_max = 0;\n    for my $number\
    \ (@$numbers) {\n        $current_max = $number if $number > $current_max;\n \
    \       push @result, $current_max;\n    }\n    return \\@result;\n}", "    my\
    \ @ret;\n    my $max = -1;\n    for my $num (@$numbers) {\n        if ($num >\
    \ $max) {\n            $max = $num;\n        }\n        push @ret, $max;\n   \
    \ }\n    return \\@ret;\n}", "    my $num_items = scalar @$numbers;\n    my @output\
    \ = ($numbers->[0]);\n    for (my $i = 1; $i < $num_items; $i++) {\n        my\
    \ $max = $output[$i - 1];\n        if ($numbers->[$i] > $max) {\n            $max\
    \ = $numbers->[$i];\n        }\n        push @output, $max;\n    }\n    return\
    \ \\@output;\n}", "    my @result;\n    my $max_number = $numbers->[0];\n    foreach\
    \ my $number (@$numbers) {\n        if ($number > $max_number) {\n           \
    \ $max_number = $number;\n        }\n        push @result, $max_number;\n    }\n\
    \    return \\@result;\n}", "    my $max = -1;\n    return [ map { $max = max($max,\
    \ $_) } @$numbers ];\n}", "    my $max = undef;\n    map { $max = $_ if not defined\
    \ $max or $_ > $max; $max } @$numbers;\n}", "    my $length = scalar @$numbers;\n\
    \    my @rolling_max = ();\n    my $max = $numbers->[0];\n    push @rolling_max,\
    \ $max;\n    for my $i (1 .. $length - 1) {\n        $max = $numbers->[$i] if\
    \ $numbers->[$i] > $max;\n        push @rolling_max, $max;\n    }\n    return\
    \ \\@rolling_max;\n}", "    my @res = (shift @$numbers);\n    while (@$numbers)\
    \ {\n        push @res, max(@res[-1], shift @$numbers);\n    }\n    return @res;\n\
    }", "    my $rolling_max = [ $numbers->[0] ];\n    for my $i (1 .. $#$numbers)\
    \ {\n        push @$rolling_max, max($rolling_max->[-1], $numbers->[$i]);\n  \
    \  }\n    return $rolling_max;\n}", "    my $max = 0;\n    my @result;\n    for\
    \ my $number (@$numbers) {\n        $max = $number if $number > $max;\n      \
    \  push @result, $max;\n    }\n    return \\@result;\n}", "    my @maxes = ($numbers->[0]);\n\
    \    foreach my $index (1 .. scalar(@$numbers) - 1) {\n        push @maxes, max($maxes[-1],\
    \ $numbers->[$index]);\n    }\n    return \\@maxes;\n}", "    my @maxs = (shift\
    \ @$numbers);\n    for my $num (@$numbers) {\n        push @maxs, $num > $maxs[-1]\
    \ ? $num : $maxs[-1];\n    }\n    return \\@maxs;\n}", "    my @result;\n    my\
    \ $max = $numbers->[0];\n    foreach my $number (@$numbers) {\n        $max =\
    \ $number if $number > $max;\n        push @result, $max;\n    }\n    return \\\
    @result;\n}", "    my @max;\n    my $max = $numbers->[0];\n    push @max, $max;\n\
    \    for my $i (1 .. $#$numbers) {\n        $max = max($max, $numbers->[$i]);\n\
    \        push @max, $max;\n    }\n    return \\@max;\n}", "    my @result;\n \
    \   my $max = 0;\n    for my $num (@$numbers) {\n        if ($num > $max) {\n\
    \            $max = $num;\n        }\n        push @result, $max;\n    }\n   \
    \ return \\@result;\n}", "    my @max_so_far = ();\n    my $max = $numbers->[0];\n\
    \    foreach my $i (1 .. $#$numbers) {\n        if ($numbers->[$i] > $max) {\n\
    \            $max = $numbers->[$i];\n        }\n        push @max_so_far, $max;\n\
    \    }\n    return \\@max_so_far;\n}", "    # TODO\n}", "    my @max;\n    my\
    \ $current_max = 0;\n    for (@$numbers) {\n        $current_max = $_ if $_ >\
    \ $current_max;\n        push @max, $current_max;\n    }\n    return \\@max;\n\
    }", "    my $max_so_far = 0;\n    my @return_values = ();\n    for my $n (@$numbers)\
    \ {\n        if ($n > $max_so_far) {\n            $max_so_far = $n;\n        }\n\
    \        push @return_values, $max_so_far;\n    }\n    return @return_values;\n\
    }", "    my $max = 0;\n    my @maxes = ();\n    for my $number (@$numbers) {\n\
    \        $max = $number if $number > $max;\n        push @maxes, $max;\n    }\n\
    \    return \\@maxes;\n}", "    my $best_so_far = undef;\n    return [ map { $best_so_far\
    \ = $_ if(!defined($best_so_far) || $best_so_far < $_); $best_so_far } @$numbers\
    \ ];\n}", "    my $max = undef;\n    my @result = map {\n        my $num = $_;\n\
    \        $max = $num if !defined($max) || $num > $max;\n        $max;\n    } @$numbers;\n\
    \    return \\@result;\n}", "    my @rolling_max = ();\n    for my $i (0 .. $#{$numbers})\
    \ {\n        push @rolling_max, max($numbers->[$i], $rolling_max[$i - 1] // 0);\n\
    \    }\n    return \\@rolling_max;\n}", "    my @sorted = sort { $b <=> $a } @$numbers;\n\
    \    my $max = shift @sorted;\n    my @maxs = ($max);\n    while(@sorted) {\n\
    \        my $n = shift @sorted;\n        push @maxs, $max;\n        $max = $n\
    \ if $n > $max;\n    }\n    return @maxs;\n}", "    my $max = shift @$numbers;\n\
    \    my @result = ($max);\n    for my $number (@$numbers) {\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n        push @result, $max;\n\
    \    }\n    return \\@result;\n}", "    my @result;\n    my $max = -1e10;\n  \
    \  foreach my $x (@$numbers) {\n        if ($x > $max) {\n            $max = $x;\n\
    \        }\n        push @result, $max;\n    }\n    return \\@result;\n}", " \
    \   my @result;\n    my $max = $numbers->[0];\n    foreach my $number (@$numbers)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       push @result, $max;\n    }\n    return \\@result;\n}", "    my $max =\
    \ 0;\n    my @result;\n    for (@$numbers) {\n        $max = $_ if $_ > $max;\n\
    \        push @result, $max;\n    }\n    return \\@result;\n}", "    my @output\
    \ = ();\n    my $max = $numbers->[0];\n    push @output, $max;\n    foreach my\
    \ $i (1..$#$numbers) {\n        if ($numbers->[$i] > $max) {\n            $max\
    \ = $numbers->[$i];\n        }\n        push @output, $max;\n    }\n    return\
    \ \\@output;\n}", "    my @max_seen;\n    my $max = 0;\n    for my $i (0 .. $#$numbers)\
    \ {\n        $max = $numbers->[$i] if $numbers->[$i] > $max;\n        push @max_seen,\
    \ $max;\n    }\n    return \\@max_seen;\n}", "    my @out = ($numbers->[0]);\n\
    \    for my $i (1 .. $#$numbers) {\n        $out[$i] = $out[$i - 1] > $numbers->[$i]\
    \ ? $out[$i - 1] : $numbers->[$i];\n    }\n    return \\@out;\n}", "    my $max;\n\
    \    return [ map { $max = $_ > $max ? $_ : $max } @$numbers ];\n}", "    my @numbers\
    \ = @$numbers;\n    return unless @numbers;\n    my @maxes = ($numbers[0]);\n\
    \    for my $i (1 .. $#numbers) {\n        push @maxes, $numbers[$i] > $maxes[-1]\
    \ ? $numbers[$i] : $maxes[-1];\n    }\n    return @maxes;\n}", "    my @result;\n\
    \    my $current_max = $numbers->[0];\n    push @result, $current_max;\n    for\
    \ my $i (1 .. @$numbers - 1) {\n        if ($numbers->[$i] > $current_max) {\n\
    \            $current_max = $numbers->[$i];\n        }\n        push @result,\
    \ $current_max;\n    }\n    return \\@result;\n}", "    my $retval = [];\n   \
    \ my $running_max = 0;\n    for my $number (@$numbers) {\n        if ($number\
    \ > $running_max) {\n            $running_max = $number;\n        }\n        push\
    \ @$retval, $running_max;\n    }\n    return $retval;\n}", "    my @res = @$numbers;\n\
    \    for my $i (1 .. $#$numbers) {\n        if ($numbers->[$i] > $res[$i - 1])\
    \ {\n            $res[$i] = $numbers->[$i];\n        } else {\n            $res[$i]\
    \ = $res[$i - 1];\n        }\n    }\n    return \\@res;\n}", "    my @result;\n\
    \    my $max_number = undef;\n    foreach my $number (@$numbers) {\n        if(!defined($max_number)\
    \ || $number > $max_number) {\n            $max_number = $number;\n        }\n\
    \        push @result, $max_number;\n    }\n    return \\@result;\n}", "    my\
    \ @rolling = ();\n    my $current_max = 0;\n    for my $number (@$numbers) {\n\
    \        $current_max = $number if $number > $current_max;\n        push @rolling,\
    \ $current_max;\n    }\n    return \\@rolling;\n}", "    my @result;\n    my $max\
    \ = -1;\n    for my $number (@$numbers) {\n        $max = $number if $number >\
    \ $max;\n        push @result, $max;\n    }\n    return \\@result;\n}", "    my\
    \ $max = $numbers->[0];\n    my @result = ($max);\n    for my $i (1 .. $#$numbers)\
    \ {\n        my $next = $numbers->[$i];\n        $max = $next if $next > $max;\n\
    \        push @result, $max;\n    }\n    return \\@result;\n}", "    my($max)\
    \ = undef;\n    my(@result) = ();\n    foreach my $n (@$numbers) {\n        $max\
    \ = $n if (!defined($max) || $n > $max);\n        push(@result, $max);\n    }\n\
    \    return @result;\n}", "    return [] if not @$numbers;\n    my $stack = [$numbers->[0]];\n\
    \    my $maxs = [$numbers->[0]];\n    for my $number (@$numbers[1..$#$numbers])\
    \ {\n        if ($number < $stack->[-1]) {\n            push @$stack, $number;\n\
    \        } else {\n            while (@$stack and $number > $stack->[-1]) {\n\
    \                pop @$stack;\n            }\n            push @$stack, $number;\n\
    \        }\n        push @$maxs, $stack->[-1];\n    }\n    return $maxs;\n}",
  "    my @maxes = (pop @$numbers);\n    foreach my $n (@$numbers) {\n        push\
    \ @maxes, $n > $maxes[-1] ? $n : $maxes[-1];\n    }\n    return \\@maxes;\n}",
  "    my $results = [];\n    my $max     = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $max = $number if $number > $max;\n        push @$results, $max;\n\
    \    }\n    return $results;\n}", "    my @max = map {$_} @$numbers;\n    for\
    \ (my $i = 1; $i < @max; $i++) {\n        $max[$i] = $max[$i - 1] if $max[$i -\
    \ 1] > $max[$i];\n    }\n    return \\@max;\n}", "    my @result;\n    my $current_max\
    \ = undef;\n    for my $number (@$numbers) {\n        if (!defined($current_max)\
    \ || $number > $current_max) {\n            $current_max = $number;\n        }\n\
    \        push @result, $current_max;\n    }\n    return \\@result;\n}", "    my\
    \ $max = $numbers->[0];\n    return $numbers if @$numbers == 1;\n    return [\n\
    \        $max,\n        (map {\n            $max = $_ if $_ > $max;\n        \
    \    $max;\n        } @$numbers[1..$#$numbers])\n    ];\n}", "    return [] if\
    \ @$numbers == 0;\n    return [$numbers->[0]] if @$numbers == 1;\n    my $max\
    \ = $numbers->[0];\n    my @maxs = ($max);\n    for my $number (@$numbers[1..$#$numbers])\
    \ {\n        $max = max($max, $number);\n        push @maxs, $max;\n    }\n  \
    \  return \\@maxs;\n}", "    my @max_so_far = ($numbers->[0]);\n    for my $i\
    \ (1 .. $#$numbers) {\n        push @max_so_far, max($max_so_far[-1], $numbers->[$i]);\n\
    \    }\n    return \\@max_so_far;\n}", "    my @maxes = ();\n    my $max = undef;\n\
    \    for my $num (@$numbers) {\n        if(!defined($max) || $num > $max) {\n\
    \            $max = $num;\n        }\n        push @maxes, $max;\n    }\n    return\
    \ \\@maxes;\n}", "    return [ map { my $t = $_; max(@$numbers[0..$t]) } 0..$#$numbers\
    \ ];\n}", "    my @result;\n    my $current_max = $numbers->[0];\n    push @result,\
    \ $current_max;\n    for my $i (1 .. $#$numbers) {\n        $current_max = max($current_max,\
    \ $numbers->[$i]);\n        push @result, $current_max;\n    }\n    return \\\
    @result;\n}", "    my @result;\n    my $max = $numbers->[0];\n    push @result,\
    \ $max;\n    for my $number (@$numbers[1..$#$numbers]) {\n        $max = $number\
    \ if $number > $max;\n        push @result, $max;\n    }\n    return \\@result;\n\
    }", "    my $max = $numbers->[0];\n    return map { $max = $_ if $_ > $max; $max\
    \ } @$numbers;\n}", "    my @result;\n    my $max = undef;\n    for my $i (0 ..\
    \ $#$numbers) {\n        if (!defined($max) || $numbers->[$i] > $max) {\n    \
    \        $max = $numbers->[$i];\n        }\n        push @result, $max;\n    }\n\
    \    return \\@result;\n}", "    my $current_max = -infinity;\n    return map\
    \ {\n        $current_max = max($current_max, $_);\n        $current_max;\n  \
    \  } @$numbers;\n}", "    my @max;\n    my $m = -1;\n    for my $n (@$numbers)\
    \ {\n        $m = $n if $n > $m;\n        push @max, $m;\n    }\n    return \\\
    @max;\n}", "    my $max = 0;\n    my @result;\n    foreach (@$numbers) {\n   \
    \     if ($_ > $max) {\n            $max = $_;\n        }\n        push @result,\
    \ $max;\n    }\n    return \\@result;\n}", "    my $numbers_len = scalar @$numbers;\n\
    \    my @maxes = (0);\n    for my $i (1 .. $numbers_len - 1) {\n        $maxes[$i]\
    \ = max($maxes[$i - 1], $numbers->[$i]);\n    }\n    return \\@maxes;\n}", " \
    \   my $max = -INFINITY;\n    my @rolling;\n    for my $n (@$numbers) {\n    \
    \    if ($n > $max) {\n            $max = $n;\n        }\n        push @rolling,\
    \ $max;\n    }\n    return \\@rolling;\n}", "    my @rolling_max;\n    my $max\
    \ = 0;\n    for my $n (@$numbers) {\n        $max = $n if $n > $max;\n       \
    \ push @rolling_max, $max;\n    }\n    return \\@rolling_max;\n}", "    my @max;\n\
    \    my $max = $numbers->[0];\n    for my $num (@$numbers) {\n        $max = $num\
    \ if $num > $max;\n        push @max, $max;\n    }\n    return \\@max;\n}", " \
    \   my @answer = (undef);\n    my $maximum = 0;\n    for my $i (0 .. $#$numbers)\
    \ {\n        if ($numbers->[$i] > $maximum) {\n            $maximum = $numbers->[$i];\n\
    \        }\n        $answer[$i] = $maximum;\n    }\n    return \\@answer;\n}",
  "    my($max) = undef;\n    my(@maxes) = map {\n        $max = ($max > $_) ? $max\
    \ : $_;\n        $max;\n    } @$numbers;\n    return \\@maxes;\n}", "    my @max_so_far\
    \ = map {$_->[0]} List::Util::pairwise {[max($a, $b)]} [], @$numbers;\n    \\\
    @max_so_far;\n}", "    my @maxes = $numbers->[0];\n    for my $i (1 .. $#$numbers)\
    \ {\n        $maxes[$i] = max($maxes[$i - 1], $numbers->[$i]);\n    }\n    return\
    \ \\@maxes;\n}", "    my $rolling_max = [];\n    my $maximum = -1;\n    my $i\
    \ = 0;\n    while ($i < scalar(@$numbers)) {\n        $maximum = $numbers->[$i]\
    \ if $numbers->[$i] > $maximum;\n        $rolling_max->[$i] = $maximum;\n    \
    \    $i++;\n    }\n    return $rolling_max;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
