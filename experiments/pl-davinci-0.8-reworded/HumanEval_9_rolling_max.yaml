name: HumanEval_9_rolling_max
language: pl
prompt: "# From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2, 3,\
  \ 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\nsub rolling_max {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rolling_max;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2,\
  \ 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 3, 2, 1]),[4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    my $max = $numbers->[0];\n    push @result, $max;\n\
    \    for my $i (1 .. $#$numbers) {\n        if ($numbers->[$i] > $max) {\n   \
    \         $max = $numbers->[$i];\n        }\n        push @result, $max;\n   \
    \ }\n    return \\@result;\n}", "    my @results;\n    my $max_so_far = $numbers->[0];\n\
    \    for my $i (0 .. $#$numbers) {\n        $max_so_far = $numbers->[$i] if $numbers->[$i]\
    \ > $max_so_far;\n        $results[$i] = $max_so_far;\n    }\n    return \\@results;\n\
    }", "    my $max = 0;\n    my @rolling_max;\n    foreach my $num (@$numbers) {\n\
    \        $max = $num if $num > $max;\n        push @rolling_max, $max;\n    }\n\
    \    return \\@rolling_max;\n}", "    return if not defined $numbers;\n    return\
    \ [$numbers->[0]] if $#$numbers == 0;\n    my $result = [$numbers->[0]];\n   \
    \ foreach my $i (1 .. $#$numbers) {\n        push @$result, $result->[-1] > $numbers->[$i]\
    \ ? $result->[-1] : $numbers->[$i];\n    }\n    return $result;\n}", "    my $max\
    \ = $numbers->[0];\n    my @maxes = ($max);\n    for my $num (@$numbers[1..$#$numbers])\
    \ {\n        if ($num > $max) {\n            $max = $num;\n        }\n       \
    \ push @maxes, $max;\n    }\n    return \\@maxes;\n}", "    return [map { max\
    \ @$numbers[0..$_] } (0..$#$numbers)];\n}", "    my @result;\n    my $max = 0;\n\
    \    for my $i (0 .. $#$numbers) {\n        $max = $numbers->[$i] if $numbers->[$i]\
    \ > $max;\n        $result[$i] = $max;\n    }\n    return \\@result;\n}", "  \
    \  my $result = [];\n    my $max = 0;\n    for my $number (@$numbers) {\n    \
    \    $max = $number if $number > $max;\n        push @$result, $max;\n    }\n\
    \    return $result;\n}", "    my $result = [];\n    my $max = undef;\n    foreach\
    \ my $number (@$numbers) {\n        if(!defined($max) || $number > $max) {\n \
    \           $max = $number;\n        }\n        push @$result, $max;\n    }\n\
    \    return $result;\n}", "    my @result;\n    my $max = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $max = $number if $number > $max;\n        push @result,\
    \ $max;\n    }\n    return \\@result;\n}", "    my @rolling_max;\n    my $max_so_far\
    \ = -1;\n    for (my $i = 0; $i < scalar(@$numbers); $i++) {\n        my $number\
    \ = $numbers->[$i];\n        $max_so_far = max($max_so_far, $number);\n      \
    \  $rolling_max[$i] = $max_so_far;\n    }\n    return \\@rolling_max;\n}", " \
    \   my $total_elements = scalar @$numbers;\n    my @result = ();\n    for (my\
    \ $i = 0; $i < $total_elements; $i++) {\n        my $current_max = $numbers->[$i];\n\
    \        for (my $j = $i; $j < $total_elements; $j++) {\n            if ($numbers->[$j]\
    \ > $current_max) {\n                $current_max = $numbers->[$j];\n        \
    \    }\n        }\n        push @result, $current_max;\n    }\n    return @result;\n\
    }", "    my $roll = [];\n    my $max  = 0;\n    for my $i (0 .. $#$numbers) {\n\
    \        my $value = $numbers->[$i];\n        if ($value > $max) {\n         \
    \   $max = $value;\n        }\n        $roll->[$i] = $max;\n    }\n    return\
    \ $roll;\n}", "    my @rolling_max = map { (max($numbers->@[0..$_]))[-1] } (0..$#$numbers);\n\
    \    return \\@rolling_max;\n}", "    my @result;\n    my $max = 0;\n    for my\
    \ $i (0 .. $#$numbers) {\n        my $number = $numbers->[$i];\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n        $result[$i] = $max;\n\
    \    }\n    return \\@result;\n}", "    my $maximum = $numbers->[0];\n    return\
    \ [ map { $maximum = $_ if $_ > $maximum; $maximum } @$numbers ];\n}", "    my\
    \ @ret = ();\n    my $max = 0;\n    foreach my $n (@$numbers) {\n        if ($n\
    \ > $max) {\n            $max = $n;\n        }\n        push @ret, $max;\n   \
    \ }\n    return \\@ret;\n}", "    my @max;\n    my $current_max = undef;\n   \
    \ for my $number (@$numbers) {\n        $current_max = $number if !defined $current_max\
    \ || $number > $current_max;\n        push @max, $current_max;\n    }\n    return\
    \ \\@max;\n}", "    my @rolling_max = ();\n    my $max = $numbers->[0];\n    push\
    \ @rolling_max, $max;\n    for my $num (1..$#$numbers) {\n        if ($numbers->[$num]\
    \ > $max) {\n            $max = $numbers->[$num];\n        }\n        push @rolling_max,\
    \ $max;\n    }\n    return \\@rolling_max;\n}", '    my @res = (undef);']
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
