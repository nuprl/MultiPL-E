name: HumanEval_89_encrypt
language: pl
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# >>> encrypt(\"hi\")\n# \"lm\"\n# >>> encrypt(\"\
  asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt(\"gf\")\n# \"kj\"\n# >>> encrypt(\"\
  et\")\n# \"ix\"\nsub encrypt {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n\
  \        if(eq_deeply($candidate->(\"hi\"),\"lm\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"\
  ewhjklnop\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"gf\"),\"kj\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  faewfawefaewg\"),\"jeiajeaijeiak\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),\"e\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    my @a = split(//, $s);\n    my @c = ();\n    for (my $i = 0; $i\
    \ < @a; $i++) {\n        my $c = ord($a[$i]) + ($i * 2);\n        if ($c > ord('z'))\
    \ {\n            $c -= 26;\n        }\n        push(@c, chr($c));\n    }\n   \
    \ return join('', @c);\n}", "    $s =~ tr/a-z/c-za-b/;\n    return $s;\n}", " \
    \   my $out = \"\";\n    my $length = length($s);\n    for (my $i = 0; $i < $length;\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n\
    \            my $n = ord($c) - ord('a');\n            $n = ($n + 4) % 26;\n  \
    \          $c = chr($n + ord('a'));\n        }\n        $out .= $c;\n    }\n \
    \   return $out;\n}", "    $s =~ tr/a-z/c-za-b/;\n    return $s;\n}", "    $s\
    \ =~ tr/a-z/c-za-b/;\n    return $s;\n}", "    my $ret = \"\";\n    my $sz = length($s);\n\
    \    for (my $i = 0; $i < $sz; $i++) {\n        my $c = substr($s, $i, 1);\n \
    \       my $ord = ord($c);\n        my $ord2 = $ord - (96 + (2 * 2)) % 26;\n \
    \       if ($ord2 < 97) {\n            $ord2 += 26;\n        }\n        $ret .=\
    \ chr($ord2);\n    }\n    return $ret;\n}", "    my $orig_str = $s;\n    my $new_str\
    \ = \"\";\n    my $new_char = \"\";\n    for(my $i = 0; $i < length($s); $i++){\n\
    \        my $char = substr($s, $i, 1);\n        if($char =~ /[a-y]/){\n      \
    \      $new_char = chr(ord($char) + 2);\n        }\n        elsif($char =~ /[z]/){\n\
    \            $new_char = chr(ord($char) - 24);\n        }\n        elsif($char\
    \ =~ /[A-Y]/){\n            $new_char = chr(ord($char) + 2);\n        }\n    \
    \    elsif($char =~ /[Z]/){\n            $new_char = chr(ord($char) - 24);\n \
    \       }\n        $new_str = $new_str . $new_char;\n    }\n    return $new_str;\n\
    }", "    my @a = split \"\", $s;\n    for(my $i = 0; $i < @a; $i++) {\n      \
    \  if ($a[$i] eq \"y\") {\n            $a[$i] = \"a\";\n        } elsif ($a[$i]\
    \ eq \"z\") {\n            $a[$i] = \"b\";\n        } else {\n            $a[$i]\
    \ = chr(ord($a[$i]) + 2);\n        }\n    }\n    return join \"\", @a;\n}", " \
    \   my $r = \"\";\n    my $i;\n    for ($i = 0; $i < length($s); $i += 1) {\n\
    \        $r .= &rot(substr($s, $i, 1), 2 * ($i + 1));\n    }\n    return $r;\n\
    }", "    # ...\n}", "    $s =~ tr/a-z/c-za-b/;\n    return $s;\n}", "    my($result)\
    \ = \"\";\n    for(my($i) = 0; $i < length($s); $i++) {\n        my($j) = ord(substr($s,\
    \ $i, 1)) - ord('a');\n        $j = $j * 2;\n        $j = $j % 26;\n        $result\
    \ .= chr($j + ord('a'));\n    }\n    return $result;\n}", "    my($t) = '';\n\
    \    my($c);\n    for $c (split(//, $s)) {\n        $t .= chr(ord($c) + 2 * 2);\n\
    \    }\n    return $t;\n}", "    my $result = '';\n    foreach (split '', $s)\
    \ {\n        $result .= chr(ord($_) + 2 * 2);\n    }\n    return $result;\n}",
  '    return $s if $s =~ /^$/;', "    return join('', map {\n        chr(((ord($_)\
    \ - 97) * 2) % 26 + 97)\n    } split //, $s);\n}", "    my $index;\n    my $index1;\n\
    \    my $alphabet;\n    my $alphabet1;\n    my $encrypt_str;\n    my $encrypt_str1;\n\
    \    my $alpha_length;\n    $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    $alpha_length\
    \ = 26;\n    $alphabet1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    $encrypt_str = \"\
    \";\n    $encrypt_str1 = \"\";\n    foreach my $char (split //, $s) {\n      \
    \  $index = index($alphabet, $char);\n        $index1 = index($alphabet1, $char);\n\
    \        if ($index > -1) {\n            $encrypt_str .= substr($alphabet, ($index\
    \ + 2 * 2) % $alpha_length, 1);\n        } elsif ($index1 > -1) {\n          \
    \  $encrypt_str1 .= substr($alphabet1, ($index1 + 2 * 2) % $alpha_length, 1);\n\
    \        } else {\n            $encrypt_str .= $char;\n        }\n    }\n    return\
    \ $encrypt_str . $encrypt_str1;\n}", "    my @a = split(\"\", $s);\n    my $cs\
    \ = \"\";\n    foreach my $l (@a) {\n        if ($l eq \"z\") {\n            $cs\
    \ .= \"b\";\n        } elsif ($l eq \"y\") {\n            $cs .= \"a\";\n    \
    \    } else {\n            $cs .= chr(ord($l) + 2);\n        }\n    }\n    return\
    \ $cs;\n}", "    my $enc = \"\";\n    my $i;\n    foreach my $c (split //, $s)\
    \ {\n        $i = ord($c) - 97;\n        $i += 2;\n        $i *= 2;\n        $i\
    \ = ($i % 26) + 97;\n        $enc .= chr($i);\n    }\n    return $enc;\n}", " \
    \   my $r = \"\";\n    foreach (split //, $s) {\n        $r .= chr((ord($_) -\
    \ 96 + 4) % 26 + 96);\n    }\n    return $r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
