name: HumanEval_94_skjkasdkd
language: pl
prompt: "# You are given an array of integers.\n# You need to find the largest prime\
  \ value and return the sum of its digits.\n# Examples:\n# >>> skjkasdkd([0, 3, 2,\
  \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>>\
  \ skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n\
  # >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9,\
  \ 3])\n# 13\n# >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n\
  # 11\n# >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd([0, 8, 1, 2,\
  \ 1, 7])\n# 7\nsub skjkasdkd {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&skjkasdkd;\n\
  \        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
  \ 4, 32, 3, 2, 32, 324, 4, 3]),10)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3,\
  \ 40, 1, 2, 1, 2, 4, 2, 5, 1]),25)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278,\
  \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->([0, 724, 32, 71, 99,\
  \ 32, 6, 0, 5, 91, 83, 0, 5, 6]),11)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
  \ 8, 1, 2, 1, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([8191]),19)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([8191, 123456, 127,\
  \ 7]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([127, 97, 8192]),10)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($max) = 0;\n    for my $x (@$lst) {\n        my($p) = 1;\n \
    \       for my $y (2 .. $x) {\n            my($ok) = 1;\n            for my $z\
    \ (2 .. $y - 1) {\n                if($y % $z == 0) {\n                    $ok\
    \ = 0;\n                    last;\n                }\n            }\n        \
    \    if($ok) {\n                $p = $y;\n            }\n        }\n        if($p\
    \ > $max) {\n            $max = $p;\n        }\n    }\n    return reduce {$a +\
    \ $b} map {$_ - ord('0')} split //, \"$max\";\n}", "    my($res) = 0;\n    foreach\
    \ my $x (@$lst) {\n        my($i, $j) = (0, $x);\n        while ($j >= 2) {\n\
    \            my($t) = ($j % 2) ? 2 : 1;\n            while (($j % $t) == 0) {\n\
    \                $j /= $t;\n                $i = $t if ($t > $i);\n          \
    \  }\n            ++$t;\n        }\n        $res += $i if ($i > $res);\n    }\n\
    \    my($ans) = 0;\n    while ($res > 0) {\n        $ans += $res % 10;\n     \
    \   $res /= 10;\n    }\n    return $ans;\n}", "    my $total = 0;\n    $total\
    \ = max(map { $_ =~ m/^(\\d+)$/; $1} grep { is_prime($_) } @$lst);\n    return\
    \ sum(split(//, $total));\n}", "    my $prime = filter(is_prime, map { $lst->[$_]\
    \ } 0 .. $lst->$#*);\n    my $largest = reduce {$a > $b ? $a : $b} @$prime;\n\
    \    my $x = reduce {$a + $b} map { $_ - '0' } split //, $largest;\n    return\
    \ $x;\n}", "    my $max = $lst->[0];\n    foreach my $e (@$lst) {\n        if($e\
    \ > $max) {\n            $max = $e;\n        }\n    }\n    if(isPrime($max)) {\n\
    \        my $digitsum = 0;\n        my $sum = 0;\n        my $rev = reverse $max;\n\
    \        while($rev) {\n            $digitsum = ($rev % 10);\n            $sum\
    \ += $digitsum;\n            $rev = int($rev / 10);\n        }\n        return\
    \ $sum;\n    }\n    else {\n        my $prev = 0;\n        my $curr = 2;\n   \
    \     while($curr < $max) {\n            $prev = $curr;\n            $curr = nextPrime($curr);\n\
    \        }\n        my $digitsum = 0;\n        my $sum = 0;\n        my $rev =\
    \ reverse $prev;\n        while($rev) {\n            $digitsum = ($rev % 10);\n\
    \            $sum += $digitsum;\n            $rev = int($rev / 10);\n        }\n\
    \        return $sum;\n    }\n}", "    my($r, $r2, $r3);\n    ($r, $r2, $r3) =\
    \ (0, 0, 0);\n    ($r, $r2, $r3) = ($r, $r2, $r3);\n    while (($r2 < (length($lst)))\
    \ && ($r2 < (length($lst)))) {\n        $r2 = ($r2 + 1);\n        if ((($r2 >=\
    \ ((length($lst)) - 1)) || (int(($lst)[$r2]) < int(($lst)[($r2 + 1)]))) && (($r2\
    \ <= 1) || (int(($lst)[$r2]) > int(($lst)[($r2 - 1)])))) {\n            $r3 =\
    \ ($r3 + int(($lst)[$r2]));\n        }\n    }\n    $r = $r3;\n    return $r;\n\
    }", "    my($t);\n    $t = largestPrime($lst);\n    return sumDigits($t);\n}",
  "    my $result = 0;\n    my $count = 0;\n    my $lst_length = @$lst;\n    for my\
    \ $i ( 0 .. $lst_length-1 ) {\n        if ($lst->[$i] > $result && is_prime($lst->[$i]))\
    \ {\n            $result = $lst->[$i];\n        }\n    }\n    while ($result >\
    \ 0) {\n        $count += $result % 10;\n        $result = int($result / 10);\n\
    \    }\n    return $count;\n}", "    my $ret = 0;\n    my $max = 0;\n    for (split(//,\
    \ join('', @$lst))) {\n        if ($_ % 2 == 0) {\n            $ret += $_;\n \
    \       }\n        else {\n            if ($_ > $max) {\n                $max\
    \ = $_;\n            }\n        }\n    }\n    return $ret + $max;\n}", "    #my\
    \ @primes = grep{is_prime($_)} reverse sort @$lst;\n    #my $max = $primes[0];\n\
    \    my $max = 0;\n    for my $prime(grep{is_prime($_)} @$lst){\n        $max\
    \ = $prime if $prime > $max;\n    }\n    my $sum = 0;\n    while($max > 0){\n\
    \        $sum += $max % 10;\n        $max = int($max / 10);\n    }\n    return\
    \ $sum;\n}", "    my $n = $lst->[-1];\n    my $p = 0;\n    my $i = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n          \
    \  while ($n % $i == 0) {\n                $n /= $i;\n            }\n        }\n\
    \        $i += 1;\n    }\n    my $s = 0;\n    while ($p > 0) {\n        $s +=\
    \ $p % 10;\n        $p /= 10;\n    }\n    return $s;\n}", "    my $prime = 0;\n\
    \    my $sum = 0;\n    my $n = @$lst;\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $k = 0;\n    my $count = 0;\n    $i = 0;\n    while ($i < $n) {\n        $count\
    \ = 0;\n        $j = 0;\n        while ($j < $n) {\n            if ($i % @$lst[$j]\
    \ == 0) {\n                $count = $count + 1;\n            }\n            $j\
    \ = $j + 1;\n        }\n        if ($count == 2) {\n            $prime = @$lst[$i];\n\
    \        }\n        $i = $i + 1;\n    }\n    $k = 0;\n    while ($k < $n) {\n\
    \        if (@$lst[$k] == $prime) {\n            $i = 0;\n            while ($i\
    \ < $n) {\n                if (@$lst[$i] % @$lst[$k] == 0) {\n               \
    \     @$lst[$i] = @$lst[$i] / @$lst[$k];\n                }\n                $i\
    \ = $i + 1;\n            }\n        }\n        $k = $k + 1;\n    }\n    $j = 0;\n\
    \    while ($j < $n) {\n        $sum = $sum + @$lst[$j];\n        $j = $j + 1;\n\
    \    }\n    return $sum;\n}", "    my($l) = map(@$_, @$lst);\n    my($p) = 0;\n\
    \    my($m) = 0;\n    while ($l) {\n        my($n) = $l % 10;\n        $l = int($l\
    \ / 10);\n        if ($n) {\n            $p = $n;\n            $m = 1;\n     \
    \   }\n    }\n    if ($m) {\n        $p;\n    } else {\n        0;\n    }\n}",
  "    my $res = 0;\n    my $prime = -1;\n    for my $num ( @$lst ) {\n        $prime\
    \ = $num if $num > $prime && $num < 100 && is_prime($num);\n    }\n    while ($prime\
    \ > 0) {\n        $res += $prime % 10;\n        $prime = int $prime / 10;\n  \
    \  }\n    return $res;\n}", "    $lst //= [];\n    my $s = 0;\n    for (@$lst)\
    \ {\n        if (my $p = is_prime($_)) {\n            if ($p > $s) {\n       \
    \         $s = $p;\n            }\n        }\n    }\n    my $ret = 0;\n    while\
    \ ($s) {\n        $ret += $s % 10;\n        $s /= 10;\n    }\n    return $ret;\n\
    }", "    my $lastprime = 0;\n    my $sum = 0;\n    my $curval = 0;\n    for $curval\
    \ (@$lst) {\n\tif (is_prime($curval)) {\n\t    $lastprime = $curval;\n\t}\n  \
    \  }\n    while ($lastprime > 0) {\n\t$sum += $lastprime % 10;\n\t$lastprime =\
    \ int($lastprime / 10);\n    }\n    return $sum;\n}", "    my $max = 0;\n    my\
    \ @prime = (0, 1, 2, 3, 5, 7);\n    my $count = @prime;\n    for (0..$#$lst) {\n\
    \        if ($lst->[$_] == 2 || $lst->[$_] == 3 || $lst->[$_] == 5 || $lst->[$_]\
    \ == 7) {\n            $max = $lst->[$_] if $lst->[$_] > $max;\n        }\n  \
    \      else {\n            my $is_prime = 1;\n            for my $p (@prime) {\n\
    \                if ($lst->[$_] % $p == 0) {\n                    $is_prime =\
    \ 0;\n                    last;\n                }\n            }\n          \
    \  if ($is_prime) {\n                $max = $lst->[$_] if $lst->[$_] > $max;\n\
    \                $prime[$count++] = $lst->[$_];\n            }\n        }\n  \
    \  }\n    my $ret = 0;\n    while ($max > 0) {\n        $ret += $max % 10;\n \
    \       $max /= 10;\n    }\n    return $ret;\n}", "    my $num = 0;\n    foreach\
    \ my $i ( @$lst ) {\n        $num = $i if $i > $num && $i % 2 && $i % 3 && $i\
    \ % 5 && $i % 7;\n    }\n    my $res = 0;\n    foreach my $i ( split '', $num\
    \ ) {\n        $res += $i;\n    }\n    return $res;\n}", "    my $largest = 0;\n\
    \    for my $n (@$lst) {\n        if ($n > $largest) {\n            $largest =\
    \ $n;\n        }\n    }\n    my $sum = 0;\n    while ($largest) {\n        $sum\
    \ += $largest % 10;\n        $largest = int($largest / 10);\n    }\n    return\
    \ $sum;\n}", "    my $result = -1;\n    for my $i (0 .. $#$lst) {\n        for\
    \ my $j (0 .. $#$lst) {\n            my $num = $lst->[$i] + $lst->[$j];\n    \
    \        if(is_prime($num)) {\n                my $sum = sum_digits($num);\n \
    \               if($sum > $result) {\n                    $result = $sum;\n  \
    \              }\n            }\n        }\n    }\n    return $result;\n}", " \
    \   my($ret) = 0;\n    foreach (sort {$b <=> $a} @$lst) {\n        my($cur) =\
    \ $_;\n        while (1) {\n            $cur /= 2 while $cur % 2 == 0;\n     \
    \       $cur /= 3 while $cur % 3 == 0;\n            $cur /= 5 while $cur % 5 ==\
    \ 0;\n            if ($cur == 1) {\n                foreach my $d (split //, $_)\
    \ {\n                    $ret += $d;\n                }\n                last;\n\
    \            }\n            last if ++$cur >= $_;\n        }\n    }\n    return\
    \ $ret;\n}", "    return 0 if(scalar(@$lst) == 0);\n    my $max_prime_val = -1;\n\
    \    for(my $i = 0; $i < scalar(@$lst); $i++){\n        if($lst->[$i] > $max_prime_val\
    \ && &is_prime($lst->[$i])){\n            $max_prime_val = $lst->[$i];\n     \
    \   }\n    }\n    my $sum = 0;\n    while($max_prime_val > 0){\n        $sum +=\
    \ $max_prime_val % 10;\n        $max_prime_val = int($max_prime_val / 10);\n \
    \   }\n    return $sum;\n}", "    $lst = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1,\
    \ 2, 1, 2, 4, 2, 5, 1];\n    my $primeval = 0;\n    for (my $i = 0; $i < scalar(@$lst);\
    \ $i++) {\n        my $possible = $lst->[$i];\n        if ($possible > $primeval\
    \ && isprime($possible)) {\n            $primeval = $possible;\n        }\n  \
    \  }\n    return $primeval > 0 ? sum(split(//, $primeval)) : 0;\n}", "    my $max\
    \ = $lst->max();\n    my $sum = 0;\n    while ($max > 0) {\n        $sum += $max\
    \ % 10;\n        $max = int($max / 10);\n    }\n    return $sum;\n}", "    my\
    \ $n = 0;\n    for my $i (0 .. $#{$lst}) {\n        for my $j ($i .. $#{$lst})\
    \ {\n            my $m = 1;\n            for my $k ($i .. $j) {\n            \
    \    $m *= $lst->[$k];\n            }\n            if (isprime($m)) {\n      \
    \          $n = max($n, $m);\n            }\n        }\n    }\n    $n;\n}", " \
    \   my $m = max($lst);\n    my $f = 0;\n    if (is_prime($m)) {\n        $f =\
    \ 1;\n    } else {\n        foreach my $i (reverse(2..$m-1)) {\n            if\
    \ ($m % $i == 0) {\n                if (is_prime($i)) {\n                    $f\
    \ = 1;\n                    $m = $i;\n                    last;\n            \
    \    }\n            }\n        }\n    }\n    return 0 if ($f == 0);\n    my $sum\
    \ = 0;\n    while ($m != 0) {\n        $sum += $m % 10;\n        $m = int($m /\
    \ 10);\n    }\n    return $sum;\n}", "    my $res = 0;\n    my $max = max($lst);\n\
    \    my $l_len = scalar(@$lst);\n    my $max_digits = length($max);\n    my $single_max\
    \ = $max;\n    my $res1 = 0;\n    my $i = 0;\n    for($i = 0; $i < $l_len; $i++)\
    \ {\n        $res1 = $lst->[$i];\n        if($res1 > $max_digits) {\n        \
    \    $max_digits = length($res1);\n            $single_max = $res1;\n        }\n\
    \    }\n    $res = sum_digits($single_max);\n    return $res;\n}\n1;", "    my\
    \ $res;\n    my $l = @$lst;\n    my @primes = grep { is_prime($_) } @$lst;\n \
    \   my $max = ( sort { $b <=> $a } @primes )[0];\n    my @digits = split //, $max;\n\
    \    for (@digits) {\n        $res += $_;\n    }\n    return $res;\n}", "    my\
    \ $aux_f0 = $lst->[0];\n    my $aux_f1 = largest_prime_factor($aux_f0);\n    my\
    \ $aux_f2 = 0;\n    my $aux_f3 = 0;\n    my $aux_f4 = 0;\n    my $aux_f5 = 0;\n\
    \    my $aux_f6 = 0;\n    my $aux_f7 = 0;\n    my $aux_f8 = 0;\n    my $aux_f9\
    \ = 0;\n    my $aux_f10 = 0;\n    my $aux_f11 = 0;\n    my $aux_f12 = 0;\n   \
    \ my $aux_f13 = 0;\n    my $aux_f14 = 0;\n    my $aux_f15 = 0;\n    my $aux_f16\
    \ = 0;\n    my $aux_f17 = 0;\n    my $aux_f18 = 0;\n    my $aux_f19 = 0;\n   \
    \ my $aux_f20 = 0;\n    my $aux_f21 = 0;\n    my $aux_f22 = 0;\n    my $aux_f23\
    \ = 0;\n    my $aux_f24 = 0;\n    my $aux_f25 = 0;\n    my $aux_f26 = 0;\n   \
    \ my $aux_f27 = 0;\n    my $aux_f28 = 0;\n    my $aux_f29 = 0;\n    my $aux_f30\
    \ = 0;\n    my $aux_f31 = 0;\n    my $aux_f32 = 0;\n    my $aux_f33 = 0;\n   \
    \ my $aux_f34 = 0;\n    my $aux_f35 = 0;\n    my $aux_f36 = 0;\n    my $aux_f37\
    \ = 0;\n    my $aux_f38 = 0;\n    my $aux_f39 = 0;\n    my $aux_f40 = 0;\n   \
    \ my $aux_f41 = 0;\n    my $aux_f42 = 0;\n    my $aux_f43 = 0;\n    my $aux_f44\
    \ = 0;\n    my", "    my $max = 0;\n    foreach my $n (@$lst) {\n        $max\
    \ = $n if $n % 2 and $n > $max;\n    }\n    return sum(split //, $max);\n}", " \
    \   my($res);\n    #$res = 0;\n    #@res = ();\n    #for (my $i = 0; $i < @{$lst};\
    \ $i++){\n    #    if ($lst->[$i] >= $res && &is_prime($lst->[$i])){\n    #  \
    \      $res = $lst->[$i];\n    #    }\n    #}\n    #for (my $j = 0; $j < length($res);\
    \ $j++){\n    #    push(@res,substr($res,$j,1));\n    #}\n    #return &sum(@res);\n\
    \    $res = &max(&prime_factors(@{$lst}));\n    return $res;\n}", "    my($m)\
    \ = 0;\n    for my $x (@$lst) {\n        $m = max($m, $x);\n    }\n    while (!is_prime($m))\
    \ {\n        $m -= 1;\n    }\n    my($r) = 0;\n    while ($m > 0) {\n        $r\
    \ += $m % 10;\n        $m /= 10;\n    }\n    return $r;\n}", "    my $t0 = 0;\n\
    \    my $t1 = -1;\n    while (1) {\n        last unless (scalar @$lst > $t1);\n\
    \        $t0 = ($t0 + $lst->[$t1]);\n        $t1 = ($t1 + 1);\n    }\n    return\
    \ $t0;\n}", "    my @lst = grep {$_ >= 0} @$lst;\n    return 0 if @lst == 0;\n\
    \    my $n = $lst[0];\n    my $i = 0;\n    while ($i < @lst) {\n        my $m\
    \ = $lst[$i];\n        $i++;\n        $n = $m if $m > $n;\n    }\n    return 0\
    \ if $n == 0;\n    my $s = 0;\n    while ($n > 0) {\n        $s += $n % 10;\n\
    \        $n = int($n / 10);\n    }\n    return $s;\n}", "    my $sum = 0;\n  \
    \  my $value = 0;\n    foreach my $num (@$lst) {\n        if (is_prime($num))\
    \ {\n            if ($num > $value) {\n                $value = $num;\n      \
    \      }\n        }\n    }\n    my @digits = split //, $value;\n    foreach my\
    \ $digit (@digits) {\n        $sum += $digit;\n    }\n    return $sum;\n}", " \
    \   my(@lst) = @$lst;\n    my($rv);\n    my($i, $l);\n    $rv = 0;\n    $l = 0;\n\
    \    $i = 0;\n    while ($i < scalar(@lst)) {\n        my($res);\n        my($is_prime);\n\
    \        $res = $lst[$i];\n        $is_prime = 1;\n        if ($res > 1) {\n \
    \           my($j);\n            $j = 2;\n            while ($j < $res) {\n  \
    \              if ($res % $j == 0) {\n                    $is_prime = 0;\n   \
    \                 last;\n                }\n                $j = $j + 1;\n   \
    \         }\n        } else {\n            $is_prime = 0;\n        }\n       \
    \ if ($is_prime) {\n            $l = $res;\n        }\n        $i = $i + 1;\n\
    \    }\n    while ($l > 0) {\n        $rv = $rv + $l % 10;\n        $l = int($l\
    \ / 10);\n    }\n    return $rv;\n}", "    my(%cnt);\n    for my $n (@$lst) {\n\
    \        my($d) = $n;\n        while($d > 1) {\n            for my $m (2..$d)\
    \ {\n                if($d % $m == 0) {\n                    $cnt{$m} += 1;\n\
    \                    $d /= $m;\n                    last;\n                }\n\
    \            }\n        }\n    }\n    my($max) = 0;\n    for my $k (keys %cnt)\
    \ {\n        if($cnt{$k} > $cnt{$max}) {\n            $max = $k;\n        }\n\
    \    }\n    return sum(split(//, $max));\n}", "    return 1 + sum(map { digit_sum($_)\
    \ } 1 .. max(map { split_digits($_) } grep { is_prime($_) } @$lst));\n}", "  \
    \  my $tmp = $lst->[-1];\n    my $cnt = 0;\n    for (my $i = $lst->[-1] + 1; ;\
    \ $i++) {\n        for (my $j = 0; $j < @$lst; $j++) {\n            if ($i % $lst->[$j]\
    \ == 0) {\n                $cnt++;\n            }\n        }\n        if ($cnt\
    \ == 0) {\n            $tmp = $i;\n            last;\n        }\n        $cnt\
    \ = 0;\n    }\n    my $s = 0;\n    while ($tmp > 0) {\n        $s += $tmp % 10;\n\
    \        $tmp /= 10;\n    }\n    return $s;\n}", "    my($temp1) = reduce_right(sub\
    \ {\n            my($temp1, $temp2) = @_;\n            $temp1 = filter(sub {\n\
    \                my($temp1) = @_;\n                eq($temp1, 1) || ne($temp2,\
    \ 0) && eq(mod($temp1, $temp2), 0)\n            }, $temp1);\n            $temp1\n\
    \        },\n        $lst);\n    my($temp2) = reduce_right(sub {\n           \
    \ my($temp1, $temp2) = @_;\n            gt($temp1, $temp2) ? $temp1 : $temp2\n\
    \        },\n        $temp1);\n    my($temp3) = split('', $temp2);\n    my($temp4)\
    \ = filter(sub {\n            my($temp1) = @_;\n            gt($temp1, 0)\n  \
    \      },\n        $temp3);\n    my($temp5) = reduce_right(sub {\n           \
    \ my($temp1, $temp2) = @_;\n            add($temp1, $temp2)\n        },\n    \
    \    $temp4);\n    return $temp5\n}", "    my $n = 1000007;\n    my $sieve = [0..$n];\n\
    \    for my $i (2..sqrt($n)) {\n        if ($sieve->[$i] != 0) {\n           \
    \ my $p = $i * $i;\n            while ($p <= $n) {\n                $sieve->[$p]\
    \ = 0;\n                $p += $i;\n            }\n        }\n    }\n    my $max_prime\
    \ = 0;\n    for my $i (reverse @$lst) {\n        next if $i == 0 || $i == 1;\n\
    \        next if $i < $max_prime;\n        if ($sieve->[$i] != 0) {\n        \
    \    $max_prime = $i;\n        }\n    }\n    my $res = 0;\n    for my $d (split\
    \ //, $max_prime) {\n        $res += $d;\n    }\n    return $res;\n}", "    my\
    \ $len = @$lst;\n    my $top = 0;\n    for my $v (@$lst) {\n        my $s = 0;\n\
    \        my $t = $v;\n        while ($t > 0) {\n            $s += $t % 10;\n \
    \           $t = int($t / 10);\n        }\n        $top = $s if $s > $top;\n \
    \   }\n    return $top;\n}", "    my $sum = 0;\n    my $max = 0;\n    my $res\
    \ = 0;\n    my $i = 0;\n    my $f2 = 0;\n    my $f = 0;\n    my $j = 0;\n    $sum\
    \ = 0;\n    $max = 0;\n    $i = 0;\n    while ($i < scalar(@$lst)) {\n       \
    \ $f2 = 0;\n        $f = 0;\n        $j = 0;\n        if ($i % 2 == 0) {\n   \
    \         $f = 1;\n        }\n        if ($i % 3 == 0) {\n            $f2 = 1;\n\
    \        }\n        if (($f == 1) && ($f2 == 1)) {\n            $j = 1;\n    \
    \    }\n        while ($j <= $i) {\n            if ($j == 1) {\n             \
    \   $j = $j + 1;\n            }\n            else {\n                if ($i %\
    \ $j == 0) {\n                    $f = 0;\n                    $f2 = 0;\n    \
    \                $j = $i;\n                }\n                else {\n       \
    \             $j = $j + 1;\n                }\n            }\n        }\n    \
    \    if (($f == 1) && ($f2 == 1)) {\n            $sum = $sum + ($lst->[$i] % 10);\n\
    \            if ($lst->[$i] > $max) {\n                $max = $lst->[$i];\n  \
    \          }\n        }\n        $i = $i + 1;\n    }\n    $res = $sum;\n    $i\
    \ = 0;\n    while ($i < length($max)) {\n        $res = $res + int(substr($max,\
    \ $i, 1));\n        $i = $i + 1;\n    }\n    return $res;\n}", "    my $rv = 0;\n\
    \    # BEGIN PROBLEM 1\n    # Iterate over the list, get the sum of digits of\
    \ the largest prime\n    my $max = 0;\n    foreach my $i (@$lst) {\n        if(\
    \ is_prime($i) ) {\n            $max = $i if $i > $max;\n        }\n    }\n  \
    \  $rv = sum_digits($max);\n    # END PROBLEM 1\n    return $rv;\n}", "    return\
    \ 0 if($lst eq '[]');\n    $lst =~ s/^\\[//;\n    $lst =~ s/\\]$//;\n    my(@lst)\
    \ = split(/,\\s*/, $lst);\n    my($last) = $lst[$#lst];\n    my($last_out) = 0;\n\
    \    my($out) = 0;\n    for(my($i) = 0; $i < scalar(@lst); $i++) {\n        $out\
    \ = $lst[$i] if($lst[$i] > $out);\n    }\n    if($out == $last) {\n        my($num)\
    \ = $out;\n        my($str) = '';\n        my($prime) = 1;\n        while($num\
    \ > 1) {\n            my($found) = 0;\n            for(my($i) = 2; $i <= sqrt($num);\
    \ $i++) {\n                if($num % $i == 0) {\n                    $found =\
    \ 1;\n                    $prime = 0;\n                    last;\n           \
    \     }\n            }\n            if($found == 0) {\n                $prime\
    \ = 1;\n                last;\n            }\n            $num /= $i;\n      \
    \  }\n        if($prime == 1) {\n            while($out > 0) {\n             \
    \   $last_out += $out % 10;\n                $out /= 10;\n            }\n    \
    \    }\n    }\n    return $last_out;\n}", "    my $res;\n    my @all_primes =\
    \ (1);\n    my @all_nums = (0);\n    foreach my $n (@$lst) {\n        my $b =\
    \ 0;\n        my $i = 0;\n        my $p = 0;\n        my $p_sum = 0;\n       \
    \ while ($b < $n) {\n            $i++;\n            $b = 1;\n            foreach\
    \ my $i2 (1..$i) {\n                $b *= $i2;\n            }\n        }\n   \
    \     if (!$all_nums[$i]) {\n            $all_nums[$i] = 1;\n            $p =\
    \ 1;\n            foreach my $d (1..$i) {\n                if ($i % $d == 0) {\n\
    \                    $p = 0;\n                    last;\n                }\n \
    \           }\n            if ($p) {\n                $all_primes[$i] = 1;\n \
    \           }\n        }\n        if ($all_primes[$i]) {\n            foreach\
    \ my $s (split(\"\", $i)) {\n                $p_sum += $s;\n            }\n  \
    \          if ($p_sum > $res) {\n                $res = $p_sum;\n            }\n\
    \        }\n    }\n    return $res;\n}", "    my($largest_prime) = 1;\n    for(my($i)\
    \ = 0; $i < scalar(@$lst); $i++) {\n        if($largest_prime < $lst->[$i] &&\
    \ 1 == &gcd($lst->[$i], $largest_prime)) {\n            $largest_prime = $lst->[$i];\n\
    \        }\n    }\n    my($str) = $largest_prime;\n    my($sum) = 0;\n    while($str\
    \ =~ s/^(\\d)(.*)$/$2/) {\n        $sum += $1;\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    my $largest = 0;\n    foreach my $num (@$lst) {\n      \
    \  if (is_prime($num)) {\n            if ($num > $largest) {\n               \
    \ $largest = $num;\n            }\n        }\n    }\n    while ($largest > 0)\
    \ {\n        $sum += $largest % 10;\n        $largest = int($largest / 10);\n\
    \    }\n    return $sum;\n}", "    my $out0 = &max(@$lst);\n    my $out1 = &prime($out0);\n\
    \    my $out2 = &digits($out1);\n    my $out3 = &sum(@$out2);\n    return $out3;\n\
    }", "    my $a = 0;\n    $a += $_ for @$lst;\n    $a;\n}", "    my $n = 1;\n \
    \   my $r = 0;\n    foreach my $k (@$lst) {\n        $n *= $k;\n    }\n    foreach\
    \ my $p (split //, prime_str($n)) {\n        $r += $p;\n    }\n    return $r;\n\
    }", "    my $lp = q();\n    while (defined $lst) {\n        my $cur = shift @$lst;\n\
    \        if ($cur > $lp && is_prime($cur)) {\n            $lp = $cur;\n      \
    \  }\n    }\n    $lp ? sum_digits($lp) : 0;\n}", "    my $ret = 0;\n    my $p\
    \ = 0;\n    my $i = 0;\n    my $pr = 0;\n    my $d = 0;\n    my $n = @$lst;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $c = 0;\n    my $o = 0;\n    my $m = 0;\n\
    \    $pr = $n;\n    $j = 0;\n    $m = 0;\n    for ($i = 1; $i < $n; $i++) {\n\
    \        if ($lst->[$i] < $lst->[$j]) {\n            $j = $i;\n        }\n   \
    \ }\n    $m = $lst->[$j];\n    for ($i = 2; $i < $m; $i++) {\n        $c = 0;\n\
    \        $k = 0;\n        $p = 0;\n        $o = 0;\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            if ($lst->[$j] % $i == 0) {\n                $lst->[$j]\
    \ = $lst->[$j] / $i;\n                $k = $k + 1;\n                $c = $c +\
    \ 1;\n            }\n            if ($lst->[$j] == 1) {\n                $o =\
    \ $o + 1;\n            }\n        }\n        if ($k != 0) {\n            $p =\
    \ 1;\n        }\n        if ($p == 1) {\n            $pr = $pr + $c;\n       \
    \ }\n        if ($o == $n) {\n            $i = $m;\n        }\n    }\n    $d =\
    \ 0;\n    while ($pr > 0) {\n        $d = $d + 1;\n        $pr = int($pr / 10);\n\
    \    }\n    $ret = $d;\n    return $ret;\n}", "    my $i = 0;\n    my $p = 0;\n\
    \    my $n = 0;\n    my $tmp;\n    my $r;\n    my $c;\n    my $v0;\n    my $v1;\n\
    \    my $v2;\n    my $v3;\n    my $v4;\n    my $v5;\n    $v2 = ($lst)[$i];\n \
    \   $r = 2;\n    $v0 = 2;\n    while ($r < $v2) {\n        $v0 = $r;\n       \
    \ if ($v2 % $r == 0) {\n            $p = 1;\n            $n = 2;\n           \
    \ while ($n < $r) {\n                if ($r % $n == 0) {\n                   \
    \ $p = 0;\n                }\n                $n = $n + 1;\n            }\n  \
    \          if ($p == 1) {\n                $v0 = $r;\n            }\n        }\n\
    \        $r = $r + 1;\n    }\n    $v1 = 0;\n    $v3 = $v0;\n    $v5 = 0;\n   \
    \ while ($v3 > 0) {\n        $v5 = $v3 % 10;\n        $v1 = $v1 + $v5;\n     \
    \   $v3 = ($v3 - $v5) / 10;\n    }\n    return $v1;\n}", "    my $s = 0;\n   \
    \ my $m = 0;\n    for my $i (0 .. $#$lst) {\n        if ($lst->[$i] > $m) {\n\
    \            if (isprime($lst->[$i])) {\n                $m = $lst->[$i];\n  \
    \          }\n        }\n    }\n    while ($m > 0) {\n        $s += $m % 10;\n\
    \        $m = int($m / 10);\n    }\n    return $s;\n}", "    my $n = 0;\n    foreach\
    \ my $l (@$lst) {\n        if ($l == 0) {\n            $n += 1;\n        } elsif\
    \ ($l < 0) {\n            $n += 0;\n        } elsif ($l % 2 == 0) {\n        \
    \    $n += 2;\n        } elsif ($l % 3 == 0) {\n            $n += 3;\n       \
    \ } elsif ($l % 5 == 0) {\n            $n += 5;\n        } elsif ($l % 7 == 0)\
    \ {\n            $n += 7;\n        } elsif ($l % 11 == 0) {\n            $n +=\
    \ 11;\n        } elsif ($l % 13 == 0) {\n            $n += 13;\n        } elsif\
    \ ($l % 17 == 0) {\n            $n += 17;\n        } elsif ($l % 19 == 0) {\n\
    \            $n += 19;\n        } elsif ($l % 23 == 0) {\n            $n += 23;\n\
    \        } elsif ($l % 29 == 0) {\n            $n += 29;\n        } elsif ($l\
    \ % 31 == 0) {\n            $n += 31;\n        } elsif ($l % 37 == 0) {\n    \
    \        $n += 37;\n        } elsif ($l % 41 == 0) {\n            $n += 41;\n\
    \        } elsif ($l % 43 == 0) {\n            $n += 43;\n        } elsif ($l\
    \ % 47 == 0) {\n            $n += 47;\n        } elsif ($l % 53 == 0) {\n    \
    \        $n += 53;\n        } elsif ($l % 59 == 0) {\n            $n += 59;\n\
    \        } elsif ($l % 61 == 0) {\n            $n += 61;\n        } elsif ($l\
    \ % 67 == 0) {\n            $n += 67;\n        } elsif ($l % 71 == 0) {\n    \
    \        $n += 71;\n        } elsif ($l % 73 == 0) {\n            $n += 73;\n\
    \        } elsif ($l % 79 == 0) {\n", "    my @lst = @$lst;\n    # Your code here\n\
    \    my $max = (sort {$b <=> $a} @lst)[0];\n    my $sum = 0;\n    while($max >\
    \ 0){\n        $sum += $max % 10;\n        $max = int($max / 10);\n    }\n   \
    \ return $sum;\n}", "    my($n) = $lst->[0];\n    my($m) = $lst->[1];\n    my($i)\
    \ = 2;\n    my($j) = 3;\n    my($k) = 1;\n    my($p) = 1;\n    my($f) = $lst->[2];\n\
    \    my($sum) = 0;\n    my($a) = 0;\n    my($k) = 0;\n    my($f) = 0;\n    my($g)\
    \ = 0;\n    while ($f < $m) {\n        while ($i < $f) {\n            while ($j\
    \ < $m) {\n                while ($k < $m) {\n                    if ($m % $k\
    \ == 0) {\n                        $sum = $sum + $k;\n                    }\n\
    \                    $k = $k + 1;\n                }\n                if ($sum\
    \ == $m) {\n                    if ($g == 0) {\n                        $n = $m;\n\
    \                        $g = 1;\n                    }\n                    else\
    \ {\n                        if ($m > $n) {\n                            $n =\
    \ $m;\n                        }\n                    }\n                }\n \
    \               $j = $j + 1;\n            }\n            $i = $i + 1;\n      \
    \  }\n        $f = $f + 1;\n    }\n    $i = 0;\n    while ($i < $n) {\n      \
    \  $sum = $sum + ($n % 10);\n        $n = $n / 10;\n    }\n    return $sum;\n}",
  "    my $l = 0;\n    my $r = -1;\n    my $n = 0;\n    my $max = $lst->[0];\n   \
    \ while ($r + 1 < @$lst) {\n        $r++;\n        if ($max <= $lst->[$r]) {\n\
    \            $max = $lst->[$r];\n            $n = $r;\n        }\n    }\n    my\
    \ $s = 0;\n    while ($max != 0) {\n        $s += $max % 10;\n        $max = int($max\
    \ / 10);\n    }\n    return $s;\n}", "    my($max) = 0;\n    for my $n (@$lst)\
    \ {\n        my $e = prime_exponent($n, 1, 1);\n        if ($e > $max) {\n   \
    \         $max = $e;\n        }\n    }\n    return $max == 0 ? 0 : 1 + ($max %\
    \ 9);\n}", "    my(@lst) = @$lst;\n    return 0 unless @lst;\n    my($maxprime)\
    \ = max(@lst);\n    for (my($i) = 1; $i < $maxprime; $i++) {\n        my($f) =\
    \ first { $i % $_ == 0 } 2..$i;\n        next if $f;\n        next unless grep\
    \ { $_ == $i } @lst;\n        $maxprime = $i;\n    }\n    my($sum) = sum(split(//,\
    \ $maxprime));\n    return $sum;\n}", "    my $sum = 0;\n    my $big;\n    for\
    \ (@$lst) {\n        if (is_prime($_)) {\n            $big = $_ if $big < $_;\n\
    \        }\n    }\n    for (split \"\", $big) {\n        $sum += $_;\n    }\n\
    \    return $sum;\n}", "    my @lst = @$lst;\n    my $sum = 0;\n    my $max =\
    \ 0;\n    for my $i (@lst) {\n        if (is_prime($i)) {\n            $max =\
    \ $i if $i > $max;\n        }\n    }\n    foreach my $c (split '', $max) {\n \
    \       $sum += $c;\n    }\n    return $sum;\n}", "    my @lst = @$lst;\n    my\
    \ $v0 = 0;\n    $v0 = $lst[0];\n    for my $v1 (1 .. $#lst) {\n        if ($lst[$v1]\
    \ > $v0) {\n            $v0 = $lst[$v1];\n        }\n    }\n    my $v2 = 0;\n\
    \    if ($v0 % 2 == 0) {\n        $v2 = $v0 - 1;\n    } else {\n        $v2 =\
    \ $v0;\n    }\n    while (!(is_prime($v2))) {\n        $v2 = $v2 - 2;\n    }\n\
    \    my $v3 = $v2;\n    my $v4 = 0;\n    while ($v3 != 0) {\n        $v4 = $v4\
    \ + ($v3 % 10);\n        $v3 = int($v3 / 10);\n    }\n    return $v4;\n}", " \
    \   my @a;\n    for my $i(@$lst) {\n        push @a, $i if is_prime($i);\n   \
    \ }\n    my $res = 0;\n    for(split '', max(@a)) {\n        $res += $_;\n   \
    \ }\n    return $res;\n}", "    my($primo) = 0;\n    my($i) = 0;\n    my($c) =\
    \ 0;\n    my($ind) = 0;\n    my($k) = 0;\n    my($a) = 0;\n    $i = 0;\n    while($i\
    \ < scalar(@$lst)) {\n        $c = 0;\n        $ind = $i;\n        $k = 0;\n \
    \       while($k < scalar(@$lst)) {\n            if($k == $ind) {\n          \
    \      $k = $k + 1;\n                next;\n            }\n            if(($lst->[$ind]\
    \ % $lst->[$k]) == 0) {\n                $c = $c + 1;\n            }\n       \
    \     $k = $k + 1;\n        }\n        if($c == 0) {\n            $primo = $lst->[$ind];\n\
    \        }\n        $i = $i + 1;\n    }\n    $i = 0;\n    while($i < scalar(@$lst))\
    \ {\n        if($lst->[$i] > $primo) {\n            $primo = $lst->[$i];\n   \
    \     }\n        $i = $i + 1;\n    }\n    $i = $primo;\n    $a = 0;\n    while($i\
    \ != 0) {\n        $a = $a + ($i % 10);\n        $i = $i / 10;\n    }\n    return\
    \ $a;\n}", "    my($e) = @$lst;\n    my($n) = $e + skjkasdkd($lst->[1..$#$lst]);\n\
    \    my($m) = $e + skjkasdkd($lst->[1..$#$lst]);\n    my($r) = ($m % $n) - ($e\
    \ / $m) - (skjkasdkd($lst->[1..$#$lst]) / $n);\n    my($p) = (skjkasdkd($lst->[1..$#$lst])\
    \ - $m) / (skjkasdkd($lst->[1..$#$lst]) + $m);\n    $n - (($p + $p) * $r) - $e\n\
    }", "    my($l) = -1;\n    foreach my $i (@$lst) {\n        next if(length($i)\
    \ != 1);\n        if(is_prime($i)) {\n            $l = $i if($i > $l);\n     \
    \   }\n    }\n    if($l == -1) {\n        return 0;\n    }\n    return 1 if($l\
    \ == 1);\n    return $l % 10 + skjkasdkd([$l / 10]);\n}", "    $lst = [map {(($_\
    \ & 1) || $_ == 2 || $_ == 5) && (1 << $_) | $_ | 1}, @$lst];\n    for my $i (0\
    \ .. @$lst - 1) {\n        for my $j ($i + 1 .. @$lst - 1) {\n            if (($lst->[$i]\
    \ >> $j) & 1) {\n                $lst->[$j] |= $lst->[$i];\n            }\n  \
    \      }\n    }\n    my $num = 0;\n    for my $i (reverse 0 .. @$lst - 1) {\n\
    \        if ($lst->[$i] & 1) {\n            my $n = $i;\n            $num = ($num\
    \ * 10) + ($n % 10);\n            $n /= 10;\n            $num = ($num * 10) +\
    \ ($n % 10);\n            $n /= 10;\n            $num = ($num * 10) + ($n % 10);\n\
    \            last;\n        }\n    }\n    $num;\n}", "    my @primes = map { $_\
    \ * $lst->[$_] } 0 .. $#$lst;\n    my $idx = $#primes;\n    $idx -= (int($idx\
    \ / 2) + 1) if int($idx / 2) % 2;\n    my $sum = 0;\n    for (0 .. $idx) {\n \
    \       if ($primes[$_] =~ /(\\d+)/) {\n            $sum += $1;\n        }\n \
    \   }\n    return $sum;\n}", "    my $a;\n    $a = ($lst)[0];\n    $a = int(sqrt($a))\
    \ + 1;\n    my $b;\n    $b = ($lst)[5];\n    $b = int(sqrt($b)) + 1;\n    my $c;\n\
    \    $c = ($lst)[1];\n    $c = int(sqrt($c)) + 1;\n    my $d;\n    $d = ($lst)[2];\n\
    \    $d = int(sqrt($d)) + 1;\n    my $e;\n    $e = ($lst)[0];\n    $e = int(sqrt($e))\
    \ + 1;\n    my $f;\n    $f = ($lst)[3];\n    $f = int(sqrt($f)) + 1;\n    my $g;\n\
    \    $g = ($lst)[4];\n    $g = int(sqrt($g)) + 1;\n    my $h;\n    $h = ($lst)[0];\n\
    \    $h = int(sqrt($h)) + 1;\n    my $i;\n    $i = ($lst)[5];\n    $i = int(sqrt($i))\
    \ + 1;\n    my $j;\n    $j = ($lst)[1];\n    $j = int(sqrt($j)) + 1;\n    my $k;\n\
    \    $k = ($lst)[3];\n    $k = int(sqrt($k)) + 1;\n    my $l;\n    $l = ($lst)[0];\n\
    \    $l = int(sqrt($l)) + 1;\n    my $m;\n    $m = ($lst)[2];\n    $m = int(sqrt($m))\
    \ + 1;\n    my $n;\n    $n = ($lst)[2];\n    $n = int(sqrt($n)) + 1;\n    my $o;\n\
    \    $o = ($lst)[0];\n    $o = int(sqrt($o)) + 1;\n    my $p;\n    $p = ($lst)[1];\n\
    \    $p = int(sqrt($p)) + 1;", "    my $result = 0;\n    for my $x (@$lst) {\n\
    \        $result = $x if $x > $result && is_prime($x);\n    }\n    return sum_digits($result);\n\
    }", "    my $res = $lst->[0];\n    for (my $i = 1; $i < $#$lst; $i++) {\n    \
    \    if ($lst->[$i] > $res) {\n            if (is_prime($lst->[$i])) {\n     \
    \           $res = $lst->[$i];\n            }\n        }\n    }\n    $res = 0\
    \ if !$res;\n    my $r = 0;\n    while ($res > 0) {\n        $r += $res % 10;\n\
    \        $res = int($res / 10);\n    }\n    return $r;\n}", "    my($x, $y, $z);\n\
    \    $x = @$lst[0];\n    $y = $x;\n    for($z=1;$z<@$lst;$z++) {\n        $x =\
    \ $x < @$lst[$z] ? @$lst[$z] : $x;\n        $y = $y > @$lst[$z] ? @$lst[$z] :\
    \ $y;\n    }\n    for($z=$y;$z<=$x;$z++) {\n        if(@$lst[0] % $z == 0 && @$lst[1]\
    \ % $z == 0 && @$lst[2] % $z == 0 && @$lst[3] % $z == 0 && @$lst[4] % $z == 0\
    \ && @$lst[5] % $z == 0 && @$lst[6] % $z == 0 && @$lst[7] % $z == 0 && @$lst[8]\
    \ % $z == 0 && @$lst[9] % $z == 0 && @$lst[10] % $z == 0 && @$lst[11] % $z ==\
    \ 0 && @$lst[12] % $z == 0 && @$lst[13] % $z == 0 && @$lst[14] % $z == 0 && @$lst[15]\
    \ % $z == 0 && @$lst[16] % $z == 0 && @$lst[17] % $z == 0 && @$lst[18] % $z ==\
    \ 0 && @$lst[19] % $z == 0 && @$lst[20] % $z == 0 && @$lst[21] % $z == 0 && @$lst[22]\
    \ % $z == 0 && @$lst[23] % $z == 0 && @$lst[24] % $z == 0 && @$lst[25] % $z ==\
    \ 0 && @$lst[26] % $z == 0 && @$lst[27] % $z == 0 && @$lst[28] % $z == 0 &&",
  "    my $n = 0;\n    my $i = 0;\n    while ($i <= $#$lst) {\n        $n = $lst->[$i]\
    \ if $lst->[$i] > $n;\n        $i++;\n    }\n    my $s = 0;\n    $s += $_ for\
    \ split(//, $n);\n    return $s;\n}", "    # your code here\n    return 0;\n}",
  "    my $max_prime = 0;\n    my $max_digits = 0;\n    for (my $i = 0; $i < scalar(@$lst);\
    \ $i++) {\n        if ($$lst[$i] > 1) {\n            if (is_prime($$lst[$i]))\
    \ {\n                if ($$lst[$i] > $max_prime) {\n                    $max_prime\
    \ = $$lst[$i];\n                    $max_digits = sum_digits($$lst[$i]);\n   \
    \             }\n            }\n        }\n    }\n    $max_digits;\n}", "    my\
    \ $h1 = max(filter({$_ == 1 || $_ == 2 || !any {$_ * $_ == $a} range(2, $a - 1)}\
    \ @$lst));\n    my $h2 = sum(map {int($_)} split(//, $h1));\n    return $h2;\n\
    }", "    my $n = 0;\n    foreach my $x (reverse sort {$a <=> $b} @$lst) {\n  \
    \      if (isprime($x)) {\n            $n = $x;\n            last;\n        }\n\
    \    }\n    my $sum = 0;\n    while ($n > 0) {\n        $sum += $n % 10;\n   \
    \     $n /= 10;\n    }\n    return $sum;\n}", "    my $longest = 0;\n    my $longest_value\
    \ = 0;\n    foreach my $n (@$lst) {\n        if (is_prime($n)) {\n           \
    \ my $len = length($n);\n            if ($len > $longest) {\n                $longest\
    \ = $len;\n                $longest_value = $n;\n            }\n        }\n  \
    \  }\n    my $sum = 0;\n    foreach my $digit (split //, $longest_value) {\n \
    \       $sum += $digit;\n    }\n    return $sum;\n}", "    my($count) = $lst->[0];\n\
    \    my($res) = 0;\n    if ($count > 0) {\n        $res = skjkasdkd($lst->[1..$count]);\n\
    \    }\n    return max($res, sum_of_digits(is_prime($lst->[$count + 1])));\n}",
  "    my $max = 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        $max = $lst->[$i]\
    \ if ($lst->[$i] > $max);\n    }\n    my $d = 0;\n    while ($max > 0) {\n   \
    \     $d += $max % 10;\n        $max = int($max / 10);\n    }\n    return $d;\n\
    }", "    my($c,$k,$t,$v,$x,$y);\n    $c = 0;\n    $k = 0;\n    $t = 0;\n    $v\
    \ = 0;\n    $x = 0;\n    $y = 0;\n    while (($x) <= (scalar(@$lst))) {\n    \
    \    $y = ($x) + (1);\n        while (($y) <= (scalar(@$lst))) {\n           \
    \ $t = (($lst->[$x]) * ($lst->[$y]));\n            $v = 0;\n            $c = 2;\n\
    \            while (($t) > (1)) {\n                if (($t) % ($c) == 0) {\n \
    \                   $t = ($t) / ($c);\n                    $v = ($v) + ($c);\n\
    \                } else {\n                    $c = ($c) + (1);\n            \
    \    }\n            }\n            if (($v) > ($k)) {\n                $k = $v;\n\
    \            }\n            $y = ($y) + (1);\n        }\n        $x = ($x) + (1);\n\
    \    }\n    return $k;\n}", "    my $d = 4;\n    my $f = 0;\n    my $i = 2;\n\
    \    my $e = 0;\n    my $u = 2;\n    my $n = 2;\n    my $h = 2;\n    my $o = 2;\n\
    \    my $p = 2;\n    my $g = 2;\n    while ($d <= $lst->[0]) {\n        $f = $d\
    \ % $i;\n        if ($f == 0) {\n            $d++;\n            $i = 2;\n    \
    \    } else {\n            $i++;\n        }\n    }\n    for ($e = 1; $e <= $lst->[0];\
    \ $e++) {\n        if ($lst->[$e] == $d) {\n            $u = 1;\n        }\n \
    \   }\n    if ($u == 0) {\n        return 0;\n    }\n    while ($n <= $lst->[0])\
    \ {\n        if ($lst->[$n] >= $d) {\n            $lst->[$n] = $lst->[$n] - $d;\n\
    \        }\n        $n++;\n    }\n    if ($lst->[0] == 1) {\n        return 0;\n\
    \    }\n    while ($h <= $lst->[0]) {\n        $f = $lst->[$h] % $o;\n       \
    \ if ($f == 0) {\n            $h++;\n            $o = 2;\n        } else {\n \
    \           $o++;\n        }\n    }\n    for ($p = 1; $p <= $lst->[0]; $p++) {\n\
    \        if ($lst->[$p] == $o) {\n            $g = 1;\n        }\n    }\n    if\
    \ ($g == 0) {\n        return 0;\n    }\n    while ($g <= $lst->[0]) {\n     \
    \   if ($lst->[$g] >= $o) {\n            $lst->[$g] = $lst->[$g] - $o;\n     \
    \   }\n        $g++;\n    }\n    if ($lst->[0] == 1) {\n       ", "    my @lst\
    \ = @$lst;\n    return skjkasdkd_helper(\\@lst);\n}", "    my($prime) = reduce_factor($lst);\n\
    \    my($s) = reduce_add($prime);\n    return $s;\n}", "    $lst = [sort {$b <=>\
    \ $a} @$lst];\n    # Prime numbers are the numbers that are not divisible by any\
    \ number other than 1.\n    # So, check if they're divisible by any number other\
    \ than themselves and 1.\n    foreach my $num (@$lst) {\n        my $isPrime =\
    \ 1;\n        for(my $i = 2; $i < $num; $i++) {\n            if($num % $i == 0)\
    \ {\n                $isPrime = 0;\n                last;\n            }\n   \
    \     }\n        if($isPrime) {\n            return [split //, $num]->[0] + [split\
    \ //, $num]->[1];\n        }\n    }\n}", "    if (@{$lst} == 0) {\n        return\
    \ 0;\n    }\n    elsif (@{$lst} == 1) {\n        return $lst->[0];\n    }\n  \
    \  elsif (@{$lst} == 2) {\n        return $lst->[0] + $lst->[1];\n    }\n    elsif\
    \ (@{$lst} == 3) {\n        return $lst->[0] * $lst->[1] * $lst->[2];\n    }\n\
    \    elsif (@{$lst} == 4) {\n        return $lst->[0] * $lst->[1] * $lst->[2]\
    \ + $lst->[3];\n    }\n    elsif (@{$lst} == 5) {\n        return $lst->[0] *\
    \ $lst->[1] * $lst->[2] + $lst->[3] + $lst->[4];\n    }\n    elsif (@{$lst} ==\
    \ 6) {\n        return $lst->[0] * $lst->[1] * $lst->[2] + $lst->[3] + $lst->[4]\
    \ + $lst->[5];\n    }\n    elsif (@{$lst} == 7) {\n        return $lst->[0] *\
    \ $lst->[1] * $lst->[2] + $lst->[3] + $lst->[4] + $lst->[5] + $lst->[6];\n   \
    \ }\n    elsif (@{$lst} == 8) {\n        return $lst->[0] * $lst->[1] * $lst->[2]\
    \ + $lst->[3] + $lst->[4] + $lst->[5] + $lst->[6] + $lst->[7];\n    }\n    elsif\
    \ (@{$lst} == 9) {\n        return $lst->[0] * $lst->[1] * $lst->[2] + $", " \
    \   my $a = max_prime($lst);\n    my $b = $a->digits->sum;\n    $b;\n}", "   \
    \ my $s = 0;\n    my $p = prime_iterator();\n    while (1) {\n        my $pv =\
    \ $p->();\n        if ($pv > max($lst)) {\n            last;\n        }\n    \
    \    $s += sum(digits($pv));\n    }\n    return $s;\n}", "    my $total = 0;\n\
    \    for my $p (prime_factors(max($lst))) {\n        $total += sum(split(//, $p));\n\
    \    }\n    return $total;\n}", "    my $max = 0;\n    my $n;\n    foreach $n\
    \ (@$lst) {\n        next if $n <= 1;\n        if($n > $max) {\n            $max\
    \ = $n;\n        }\n    }\n    while($max % 2 == 0) {\n        $max /= 2;\n  \
    \  }\n    my $p = 3;\n    while($p < $max) {\n        if($max % $p == 0) {\n \
    \           $max /= $p;\n        } else {\n            $p += 2;\n        }\n \
    \   }\n    my $s = 0;\n    while($max > 0) {\n        $s += $max % 10;\n     \
    \   $max /= 10;\n    }\n    return $s;\n}", "    my $a = 1;\n    foreach (@$lst)\
    \ {\n        if ($_ > $a && is_prime($_)) {\n            $a = $_;\n        }\n\
    \    }\n    return ($a) ? sum_of_digits($a) : 0;\n}", "    my $sum = 0;\n    my\
    \ $n = 0;\n    my $m = $lst->[0];\n    for my $x (@$lst) {\n        if($x > $m)\
    \ {\n            $m = $x;\n        }\n    }\n    for(; $m >= 2; $m--) {\n    \
    \    if(is_prime($m)) {\n            while($m > 0) {\n                $sum +=\
    \ $m % 10;\n                $m = int($m / 10);\n            }\n            return\
    \ $sum;\n        }\n    }\n    return $sum;\n}", "    my $rtn =0;\n    my $num_str\
    \ = '';\n    for(my $i = 0; $i < scalar(@$lst); $i++){\n        if(is_prime($lst->[$i])){\n\
    \            if($lst->[$i] > $rtn){\n                $rtn = $lst->[$i];\n    \
    \        }\n        }\n    }\n    while($rtn != 0){\n        $num_str = $rtn %\
    \ 10 . $num_str;\n        $rtn = int($rtn / 10);\n    }\n    return  sum_of_digits($num_str);\n\
    }", "    my $num = 0;\n    for my $i (0 .. $#{$lst}) {\n        if ($lst->[$i]\
    \ > $num) {\n            if (is_prime($lst->[$i])) {\n                $num = $lst->[$i];\n\
    \            }\n        }\n    }\n    my $sum = 0;\n    while ($num > 0) {\n \
    \       $sum += $num % 10;\n        $num = int($num / 10);\n    }\n    return\
    \ $sum;\n}", "    my $i = 0;\n    my $r = 0;\n    my $e = 0;\n    my $k = 0;\n\
    \    my $s = 0;\n    my $p = 0;\n    my $o = 0;\n    my $n = 0;\n    my $g = scalar(@$lst);\n\
    \    my $c = 0;\n    my $m = 0;\n    my $j = 0;\n    $m = 1;\n    $j = $g - $m;\n\
    \    $m = 0;\n    $m = 0;\n    $c = 2;\n    $o = $m;\n    $m = 0;\n    $s = $lst->[$m];\n\
    \    $r = $s;\n    $m = $c;\n    while ($m < $g) {\n        $k = $lst->[$m];\n\
    \        if ($k > $r) {\n            $r = $k;\n        }\n        $m = $m + 1;\n\
    \    }\n    $m = $r;\n    $n = $m;\n    while ($m != $c) {\n        $e = $c;\n\
    \        $i = 0;\n        while ($e <= $m) {\n            $k = $m % $e;\n    \
    \        if ($k == $i) {\n                $p = $e;\n            }\n          \
    \  $e = $e + 1;\n        }\n        $m = $m - 1;\n    }\n    $m = $p;\n    $s\
    \ = 0;\n    while ($m != $i) {\n        $k = $m % $c;\n        $s = $s + $k;\n\
    \        $m = int($m / $c);\n    }\n    return $s;\n}", "    my($f, $s);\n   \
    \ $f = 0;\n    if ($lst->[10] >= 7) {\n        $f = 1;\n    }\n    if ($lst->[9]\
    \ >= 7) {\n        $f = 1;\n    }\n    if ($lst->[8] <= 6) {\n        $f = 0;\n\
    \    }\n    if ($lst->[7] <= 6) {\n        $f = 0;\n    }\n    if ($lst->[6] >=\
    \ 7) {\n        $f = 1;\n    }\n    if ($lst->[5] >= 7) {\n        $f = 1;\n \
    \   }\n    if ($lst->[4] <= 6) {\n        $f = 0;\n    }\n    if ($lst->[3] <=\
    \ 6) {\n        $f = 0;\n    }\n    if ($lst->[2] >= 7) {\n        $f = 1;\n \
    \   }\n    if ($lst->[1] >= 7) {\n        $f = 1;\n    }\n    if ($lst->[0] <=\
    \ 6) {\n        $f = 0;\n    }\n    if ($f) {\n        $s = int($lst->[2] / 3);\n\
    \    } else {\n        $s = int($lst->[2] / 2);\n    }\n    $s = $s + int($lst->[1]\
    \ / 4);\n    $s = $s + int($lst->[0] / 2);\n    if ($lst->[2] <= $lst->[1]) {\n\
    \        $s = $s + 1;\n    }\n    if ($lst->[0] <= $lst->[2]) {\n        $s =\
    \ $s + 1;\n    }\n    return $s;\n}", "    my $i = 0;\n    my $m = 0;\n    foreach\
    \ my $v (@$lst) {\n        if ($v > $m && $v % 2 != 0 && $v % 3 != 0 && $v % 5\
    \ != 0 && $v % 7 != 0) {\n            $m = $v;\n        }\n    }\n    $m = \"\
    $m\";\n    foreach my $v (split(//, $m)) {\n        $i += $v;\n    }\n    return\
    \ $i;\n}", "    # find the largest prime\n    my $largest = 0;\n    for my $i\
    \ (@$lst) {\n        next if ($i <= 1);\n        my $count = 2;\n        my $found\
    \ = 1;\n        while ($count * $count <= $i) {\n            if ($i % $count ==\
    \ 0) {\n                $found = 0;\n                last;\n            }\n  \
    \          $count++;\n        }\n        if ($found) {\n            $largest =\
    \ $i if ($i > $largest);\n        }\n    }\n    # return sum of digits\n    my\
    \ $sum = 0;\n    while ($largest) {\n        $sum += $largest % 10;\n        $largest\
    \ = int($largest / 10);\n    }\n    return $sum;\n}", "    return first_prime_sum($lst,\
    \ largest_prime($lst));\n}", "    my $sum = 0;\n    my $ls = 0;\n    foreach my\
    \ $p (@$lst) {\n        my $c = 0;\n        foreach my $i (1..$p) {\n        \
    \    if ($p % $i == 0) {\n                $c = $c + 1;\n            }\n      \
    \  }\n        if ($c == 2) {\n            if ($p > $ls) {\n                $ls\
    \ = $p;\n            }\n        }\n    }\n    while ($ls > 0) {\n        $sum\
    \ = $sum + $ls % 10;\n        $ls = int($ls / 10);\n    }\n    return $sum;\n}",
  "    my $r = 0;\n    for my $i (@$lst) {\n        $r += $i if $i == +(grep { $_\
    \ == 1 } map { $i % $_ } (2 .. int(sqrt($i))));\n    }\n    $r;\n}", "    my $p\
    \ = largest_prime_value($lst);\n    return sum_digits($p);\n}", "    my($largest_prime)\
    \ = 0;\n    for my $x (@$lst) {\n        if (($x > 1) && is_prime($x)) {\n   \
    \         $largest_prime = $x if ($x > $largest_prime);\n        }\n    }\n  \
    \  my $sum = 0;\n    for my $d (split(//, $largest_prime)) {\n        $sum +=\
    \ $d;\n    }\n    return $sum;\n}", "    # Write your code here\n}", "    my @lst\
    \ = @$lst;\n    my $count = @lst;\n    my $prime = 0;\n    for (my $i = 0; $i\
    \ < $count; $i++) {\n        if (((@lst[$i] % 2) != 0) && ((@lst[$i] % 3) != 0)\
    \ && ((@lst[$i] % 5) != 0) && ((@lst[$i] % 7) != 0)) {\n            if ($prime\
    \ < @lst[$i]) {\n                $prime = @lst[$i];\n            }\n        }\n\
    \    }\n    my $result = 0;\n    while ($prime > 0) {\n        $result += $prime\
    \ % 10;\n        $prime = int($prime / 10);\n    }\n    return $result;\n}", " \
    \   my @lst = @$lst;\n    my $result = 0;\n    foreach my $a (@lst) {\n      \
    \  if (is_prime($a)) {\n            $result = $a;\n        }\n    }\n    my $digit_sum\
    \ = 0;\n    while ($result != 0) {\n        $digit_sum += $result % 10;\n    \
    \    $result = int($result / 10);\n    }\n    return $digit_sum;\n}", "    my\
    \ $n;\n    my $x;\n    my $y;\n    my $m;\n    $n = 0;\n    $x = 0;\n    $y =\
    \ 0;\n    $m = -1;\n    for (;;) {\n        $y = (@$lst)[$n];\n        $x = @$lst;\n\
    \        if ($n == $x) {\n            last;\n        }\n        if ($y > $m) {\n\
    \            if (is_prime($y)) {\n                $m = $y;\n            }\n  \
    \      }\n        $n = $n + 1;\n    }\n    return sum_digits($m);\n}", "    my\
    \ $max = 0;\n    foreach my $n (@$lst) {\n        $max = $n if is_prime($n) &&\
    \ $n > $max;\n    }\n    return 0 if $max == 0;\n    my $s = 0;\n    for my $d\
    \ (split('', $max)) {\n        $s += $d;\n    }\n    return $s;\n}", "    my $max\
    \ = 0;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        my $prime = $num;\n\
    \        for(my $i = 2; $i <= $num; $i++) {\n            if($num % $i == 0) {\n\
    \                $prime = 0;\n                last;\n            }\n        }\n\
    \        if($prime != 0) {\n            if($prime > $max) {\n                $max\
    \ = $prime;\n            }\n        }\n    }\n    while($max > 0) {\n        $sum\
    \ += $max % 10;\n        $max = int($max / 10);\n    }\n    return $sum;\n}",
  "    @$lst = sort { $b <=> $a } @$lst;\n    my $num = $lst->[0];\n    my $n = sum(split\
    \ //, $num);\n    for my $i (@$lst) {\n        if (is_prime($i)) {\n         \
    \   $num = $i;\n            last;\n        }\n    }\n    return sum(split //,\
    \ $num);\n}", "    my $c0 = 0;\n    my $c1 = 0;\n    my $c2 = 0;\n    my $c3 =\
    \ 0;\n    my $c4 = 0;\n    my $c5 = 0;\n    my $c6 = 0;\n    my $c7 = 0;\n   \
    \ my $c8 = 0;\n    my $c9 = 0;\n    my $c10 = 0;\n    my $c11 = 0;\n    my $c12\
    \ = 0;\n    my $c13 = 0;\n    my $c14 = 0;\n    my $c15 = 0;\n    my $c16 = 0;\n\
    \    my $c17 = 0;\n    my $c18 = 0;\n    my $c19 = 0;\n    my $c20 = 0;\n    my\
    \ $c21 = 0;\n    my $c22 = 0;\n    my $c23 = 0;\n    my $c24 = 0;\n    my $c25\
    \ = 0;\n    my $c26 = 0;\n    my $c27 = 0;\n    my $c28 = 0;\n    my $c29 = 0;\n\
    \    my $c30 = 0;\n    my $c31 = 0;\n    my $c32 = 0;\n    my $c33 = 0;\n    my\
    \ $c34 = 0;\n    my $c35 = 0;\n    my $c36 = 0;\n    my $c37 = 0;\n    my $c38\
    \ = 0;\n    my $c39 = 0;\n    my $c40 = 0;\n    my $c41 = 0;\n    my $c42 = 0;\n\
    \    my $c43 = 0;\n    my $c44 = 0;\n    my $c45 = 0;\n    my $c46 = 0;\n    my\
    \ $c47 = 0;\n    my $c48 = 0;\n    my $c49 = 0;\n    my $c50 = 0;\n    my $c51\
    \ = 0;\n    my $c52 = 0;\n    my $c53 = 0;\n    my $c54 = 0;\n    my $c55 = 0;\n\
    \    my $c56 = 0", "    my($prime) = 2;\n    while($lst){\n        my($t) = $lst;\n\
    \        my($n);\n        while($t =~ /(\\d*)/g){\n            $n = $1;\n    \
    \        $n = int($n);\n            if($n > $prime && $n % $prime == 0){\n   \
    \             $lst =~ s/$n//g;\n            }\n        }\n        $prime++;\n\
    \    }\n    my($p) = 0;\n    while($lst =~ /(\\d)/g){\n        $p += $1;\n   \
    \ }\n    return $p;\n}", "    my @a = reverse sort {$a <=> $b} @$lst;\n    while\
    \ (1) {\n        my $m = shift @a;\n        if ($m == 1) {\n            return\
    \ 0;\n        }\n        my $isprime = 1;\n        for my $d (2..sqrt($m)) {\n\
    \            if ($m % $d == 0) {\n                $isprime = 0;\n            \
    \    last;\n            }\n        }\n        if ($isprime) {\n            my\
    \ $sum = 0;\n            while ($m > 0) {\n                $sum += $m % 10;\n\
    \                $m /= 10;\n            }\n            return $sum;\n        }\n\
    \    }\n}", "    @_ = ();\n    my $lst_0 = $_[$#_];\n    my $lst_1 = $_[$#_];\n\
    \    my $lst_2 = $_[$#_];\n    my $lst_3 = $_[$#_];\n    my $lst_4 = $_[$#_];\n\
    \    my $lst_5 = $_[$#_];\n    my $lst_6 = $_[$#_];\n    my $lst_7 = $_[$#_];\n\
    \    my $lst_8 = $_[$#_];\n    my $lst_9 = $_[$#_];\n    my $lst_10 = $_[$#_];\n\
    \    my $lst_11 = $_[$#_];\n    my $lst_12 = $_[$#_];\n    my $lst_13 = $_[$#_];\n\
    \    my $lst_14 = $_[$#_];\n    my $lst_15 = $_[$#_];\n    my $lst_16 = $_[$#_];\n\
    \    my $lst_17 = $_[$#_];\n    my $lst_18 = $_[$#_];\n    my $lst_19 = $_[$#_];\n\
    \    my $lst_20 = $_[$#_];\n    my $lst_21 = $_[$#_];\n    my $lst_22 = $_[$#_];\n\
    \    my $lst_23 = $_[$#_];\n    my $lst_24 = $_[$#_];\n    my $lst_25 = $_[$#_];\n\
    \    my $lst_26 = $_[$#_];\n    my $lst_27 = $_[$#_];\n    my $lst_28 = $_[$#_];\n\
    \    my $lst_29 = $_[$#_];\n    my $lst_30 = $_[$#_];\n    my $lst_31 = $_[$#_];\n\
    \    my $lst_32 = $_[$#_];\n    my $lst_33 = $_[", "    my $ret = 0;\n    my $n\
    \ = 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        $n = $lst->[$i];\n\
    \        next if $n <= 0;\n        $n = $n/2;\n        $n = $n/2;\n        $n\
    \ = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n      \
    \  $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n  \
    \      $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n\
    \        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n\
    \        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n\
    \        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n\
    \        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n\
    \        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n\
    \        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n\
    \        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2;\n\
    \        $n = $n/2;\n        $n = $n/2;\n        $n = $n/2", "    my $res = 0;\n\
    \    my $i = 0;\n    while (1) {\n        $i++;\n        if ($i ~~ $lst) {\n \
    \           if (isPrime($i)) {\n                $res = int(($i-1)/9)+1;\n    \
    \        }\n        }\n        if (isPrime($i)) {\n            $res = int(($i-1)/9)+1;\n\
    \        }\n        if ($i > 1000) {\n            last;\n        }\n    }\n  \
    \  return $res;\n}", "    map((7x(reduce{$a*$b}@$_)%100), grep(@$_==8, map([grep(is_prime($_),\
    \ @$lst)], perl_combination($lst, 8))));\n}", "    my($cur, $max, $p);\n    foreach\
    \ $cur (@$lst) {\n        $max = $cur if !defined($max) || $cur > $max;\n    }\n\
    \    $p = prime_get_prime($max);\n    $p = $p->[-1];\n    $p = Math::BigInt->new($p);\n\
    \    $p->bdiv(10)->bmod(10)->badd($p->bmod(10))->bstr();\n}", "    my $ret = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp = 0;\n    my $temp2\
    \ = 0;\n    my $temp3 = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6\
    \ = 0;\n    $temp = @$lst;\n    $i = 0;\n    while ($i < $temp) {\n        $temp2\
    \ = $i;\n        $j = $i;\n        while ($j < $temp) {\n            $temp3 =\
    \ @$lst[$temp2];\n            $temp4 = @$lst[$j];\n            if ($temp3 < $temp4)\
    \ {\n                $temp2 = $j;\n            }\n            $j = $j + 1;\n \
    \       }\n        $temp5 = @$lst[$i];\n        $temp6 = @$lst[$temp2];\n    \
    \    @$lst[$i] = $temp6;\n        @$lst[$temp2] = $temp5;\n        $i = $i + 1;\n\
    \    }\n    $i = 0;\n    while ($i < $temp) {\n        $temp2 = @$lst[$i];\n \
    \       $j = 2;\n        $temp3 = 1;\n        while ($j < $temp2) {\n        \
    \    $temp4 = $temp2 % $j;\n            if ($temp4 == 0) {\n                $temp3\
    \ = 0;\n            }\n            $j = $j + 1;\n        }\n        if ($temp3\
    \ == 1) {\n            $temp5 = $temp2;\n            $k = 0;\n            while\
    \ ($temp5 != 0) {\n                $temp6 = $temp5 % 10;\n                $ret\
    \ = $ret + $temp6;\n                $temp5 = int($temp5 / 10);\n             \
    \   $k = $k + 1;\n            }\n            last;\n        }\n        $i = $i\
    \ + 1;\n    }\n    return $ret;\n}", "    my $count = 0;\n    for(my $i = @$lst\
    \ - 1; $i >= 0; $i--) {\n        $count++ if isPrime($lst->[$i]);\n    }\n   \
    \ if($count < 2) {\n        return 0;\n    }\n    my $sum = 0;\n    my $max =\
    \ 0;\n    for(my $i = @$lst - 1; $i >= 0; $i--) {\n        if(isPrime($lst->[$i]))\
    \ {\n            if($lst->[$i] > $max) {\n                $max = $lst->[$i];\n\
    \            }\n        }\n    }\n    my @array = split(\"\", $max);\n    for(my\
    \ $i = 0; $i < @array; $i++) {\n        $sum += $array[$i];\n    }\n    return\
    \ $sum;\n}", "    my $prime = 1;\n    foreach my $i (0 .. $#{$lst}) {\n      \
    \  my $is_prime = 1;\n        for my $j (2 .. int(sqrt($lst->[$i]))) {\n     \
    \       if ($lst->[$i] % $j == 0) {\n                $is_prime = 0;\n        \
    \        last;\n            }\n        }\n        if ($is_prime) {\n         \
    \   $prime = $lst->[$i] if $lst->[$i] > $prime;\n        }\n    }\n    my $sum\
    \ = 0;\n    while ($prime > 0) {\n        $sum += $prime % 10;\n        $prime\
    \ = int($prime / 10);\n    }\n    return $sum;\n}", "    my $result = 0;\n   \
    \ my $prime_lst = [];\n    while(@$lst){\n        my $number = pop $lst;\n   \
    \     if($number % 2 && $number % 3 && $number % 5 && $number % 7){\n        \
    \    push @$prime_lst, $number;\n        }\n    }\n    my $max = 0;\n    for my\
    \ $prime (@$prime_lst){\n        if($prime > $max){\n            $max = $prime;\n\
    \        }\n    }\n    while($max){\n        $result += $max % 10;\n        $max\
    \ = int($max / 10);\n    }\n    return $result;\n}", "    $lst = [map { int($_)\
    \ } @$lst];\n    my $check = sub {\n        my $n = shift;\n        return undef\
    \ if $n <= 1;\n        for (my $i = 2; $i <= sqrt($n); $i++) {\n            return\
    \ undef if ($n % $i) == 0;\n        }\n        return 1;\n    };\n    my $largest\
    \ = undef;\n    foreach my $n (@$lst) {\n        if ($check->($n)) {\n       \
    \     $largest = $n if (not defined $largest) or ($n > $largest);\n        }\n\
    \    }\n    my $n = 0;\n    while ($largest > 0) {\n        $n += $largest % 10;\n\
    \        $largest = int($largest / 10);\n    }\n    return $n;\n}", "    my($i,\
    \ $j, $out, $max);\n    foreach $i (@$lst) {\n        my($r, $x);\n        $r\
    \ = int(sqrt($i));\n        $x = 1;\n        for ($j = 2; $j <= $r; $j++) {\n\
    \            if ($i % $j == 0) {\n                $x = 0;\n                last;\n\
    \            }\n        }\n        if ($x && $i > $max) {\n            $max =\
    \ $i;\n        }\n    }\n    $out = 0;\n    while ($max) {\n        $out += $max\
    \ % 10;\n        $max = int($max / 10);\n    }\n    return $out;\n}", "    my($x,\
    \ $y, $z);\n    $y = 0;\n    $z = 0;\n    while (1) {\n        $x = pop(@$lst);\n\
    \        if (!defined($x)) {\n            last;\n        }\n        if ($x < $y)\
    \ {\n            $y = $x;\n        }\n    }\n    while ($y > 0) {\n        $z\
    \ += $y % 10;\n        $y = int($y / 10);\n    }\n    return $z;\n}", "    my\
    \ $k;\n    my $l;\n    $k = 0;\n    $l = 0;\n    while($k < len($lst)) {\n   \
    \     if(($lst->[$k] >= 2) && is_prime($lst->[$k])) {\n            $l = $lst->[$k];\n\
    \        }\n        $k = $k + 1;\n    }\n    my $m;\n    $m = 0;\n    while($l\
    \ > 0) {\n        $m = $m + ($l % 10);\n        $l = int($l / 10);\n    }\n  \
    \  return $m;\n}", "    my $result = 0;\n    return $result;\n}", "    reduce\
    \ { $a + $b } , map { /(\\d)/g } , reduce { length($a) > length($b) ? $a : $b\
    \ } , grep { /^[a-z]+$/i } , grep { is_prime($_) } , @$lst;\n}", "    my($max,\
    \ $sum) = (0, 0);\n    my($it, $n);\n    while ($it = each($lst)) {\n        $n\
    \ = $it;\n        next if $n < 2;\n        if ($n == 2) {\n            if ($n\
    \ > $max) {\n                $max = $n;\n            }\n            next;\n  \
    \      }\n        next if $n % 2 == 0;\n        if ($n == 3) {\n            if\
    \ ($n > $max) {\n                $max = $n;\n            }\n            next;\n\
    \        }\n        next if $n % 3 == 0;\n        if ($n == 5) {\n           \
    \ if ($n > $max) {\n                $max = $n;\n            }\n            next;\n\
    \        }\n        next if $n % 5 == 0;\n        if ($n == 7) {\n           \
    \ if ($n > $max) {\n                $max = $n;\n            }\n            next;\n\
    \        }\n        next if $n % 7 == 0;\n        if ($n == 11) {\n          \
    \  if ($n > $max) {\n                $max = $n;\n            }\n            next;\n\
    \        }\n        next if $n % 11 == 0;\n        if ($n == 13) {\n         \
    \   if ($n > $max) {\n                $max = $n;\n            }\n            next;\n\
    \        }\n        next if $n % 13 == 0;\n        if ($n == 17) {\n         \
    \   if ($n > $max) {\n                $max = $n;\n            }\n            next;\n\
    \        }\n        next if $n % 17 == 0;\n        if ($n == 19) {\n         \
    \   if ($n > $max) {\n                $max = $n;\n            }\n            next;\n\
    \        }\n        next if $n % 19 == 0;\n        if ($n == 23) {\n         \
    \   if ($n > $max) {\n                $max = $n;\n            }\n            next;\n\
    \        }\n        next if $n % 23 == 0;\n        if ($n == 29) {\n         \
    \   if ($n > $max) {\n                $max = $n;", "    my($a, $b, $c, $d, $e,\
    \ $f, $g, $h, $i, $j, $k, $l, $m, $n, $o, $p, $q, $r, $s, $t, $u, $v, $w, $x,\
    \ $y, $z);\n    $a = ($lst)[0];\n    $b = ($lst)[1];\n    $c = ($lst)[2];\n  \
    \  $d = ($lst)[3];\n    $e = ($lst)[4];\n    $f = ($lst)[5];\n    $g = ($lst)[6];\n\
    \    $h = ($lst)[7];\n    $i = ($lst)[8];\n    $j = ($lst)[9];\n    $k = ($lst)[10];\n\
    \    $l = ($lst)[11];\n    $m = ($lst)[12];\n    $n = ($lst)[13];\n    $o = ($lst)[14];\n\
    \    $p = ($lst)[15];\n    $q = ($lst)[16];\n    $r = ($lst)[17];\n    $s = ($lst)[18];\n\
    \    $t = ($lst)[19];\n    $u = ($lst)[20];\n    $v = ($lst)[21];\n    $w = ($lst)[22];\n\
    \    $x = ($lst)[23];\n    $y = ($lst)[24];\n    $z = ($lst)[25];\n    return\
    \ ((((((((((((((((((((((((((((((((((((((((((($a < $b) ? $b : $a) < $c) ? $c :\
    \ (($a < $b) ? $b : $a)) < $d) ? $d : ((($a < $b) ? $b : $a) < $c) ? $c : (($a\
    \ < $b) ? $b : $a))) < $e) ? $e : (((($a < $b) ? $b : $a) < $c) ? $c : (($a <\
    \ $b) ? $b :", "    my $n = scalar(@$lst);\n    my $r = 0;\n    foreach my $i\
    \ (0 .. $n - 1) {\n        foreach my $j ($i .. $n - 1) {\n            foreach\
    \ my $k ($j .. $n - 1) {\n                foreach my $l ($k .. $n - 1) {\n   \
    \                 foreach my $m ($l .. $n - 1) {\n                        foreach\
    \ my $o ($m .. $n - 1) {\n                            my $a = $lst->[$i];\n  \
    \                          my $b = $lst->[$j];\n                            my\
    \ $c = $lst->[$k];\n                            my $d = $lst->[$l];\n        \
    \                    my $e = $lst->[$m];\n                            my $f =\
    \ $lst->[$o];\n                            if (((((($a*$b) - ($c*$d)) + ($e*$f))\
    \ > $r) and (prime?($a*$b*$c*$d*$e*$f)))) {\n                                $r\
    \ = ($a*$b*$c*$d*$e*$f);\n                            }\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \   }\n    my $ss = 0;\n    foreach my $x (split //, $r) {\n        $ss += $x;\n\
    \    }\n    return $ss;\n}\n1;", "    my $primes = [1];\n    my $sum = 0;\n  \
    \  foreach (@$lst) {\n        if ($_ <= $primes->[-1]) {\n            $sum +=\
    \ length(grep { $_ == $_[0] } @$primes) % 2;\n        } else {\n            $primes\
    \ = [grep { !(grep { $_[0] % $_ == 0 } @$primes)[0] } 1..$_];\n            $sum\
    \ += length($primes) % 2;\n        }\n    }\n    return $sum;\n}", "    my $prime\
    \ = -1;\n    for (@$lst) {\n        next if ($_ == 0 || $_ == 1);\n        my\
    \ $is_prime = 1;\n        for (my $i = 2; $i * $i <= $_; $i++) {\n           \
    \ if ($_ % $i == 0) {\n                $is_prime = 0;\n                last;\n\
    \            }\n        }\n        $prime = $_ if ($is_prime);\n    }\n    my\
    \ $ret = 0;\n    while ($prime > 0) {\n        $ret += $prime % 10;\n        $prime\
    \ /= 10;\n    }\n    return $ret;\n}", "    my($ret) = 0;\n    my($val) = 1;\n\
    \    for my $i (@$lst) {\n        $val = 0 if $i == 0;\n        $val *= $i;\n\
    \    }\n    while ($val > 1) {\n        my($p) = 2;\n        while ($val % $p\
    \ != 0) {\n            $p += 1;\n        }\n        $val /= $p;\n        $ret\
    \ += $p % 10;\n    }\n    return $ret;\n}", "    my $j = 0;\n    my $t = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $c = 0;\n    my $x = 0;\n    $y = @$lst[0];\n\
    \    $z = 0;\n    $c = 0;\n    $x = 0;\n    foreach my $e (@$lst) {\n        if\
    \ ($e > $y) {\n            $y = $e;\n        }\n    }\n    $y = $y + 1;\n    while\
    \ ($y != 0) {\n        $y = $y - 1;\n        $j = 1;\n        $t = 0;\n      \
    \  $x = 0;\n        foreach my $e (@$lst) {\n            if ($e == $y) {\n   \
    \             $j = $j + 1;\n            }\n        }\n        if ($j == 2) {\n\
    \            $z = $y;\n        }\n    }\n    while ($z != 0) {\n        $x = $z\
    \ % 10;\n        $z = int($z / 10);\n        $c = $c + $x;\n    }\n    return\
    \ $c;\n}", "    my $p = max(grep {is_prime($_)} @$lst);\n    my $s = 0;\n    map\
    \ {$s += $_} split //, $p;\n    return $s;\n}", "    my($i);\n    my($j);\n  \
    \  my($s);\n    my($max);\n    for($i = 0; $i < scalar(@$lst); $i++) {\n     \
    \   $s = 0;\n        for($j = 2; $j <= $lst->[$i]; $j++) {\n            if($lst->[$i]\
    \ % $j == 0) {\n                while($lst->[$i] % $j == 0) {\n              \
    \      $lst->[$i] /= $j;\n                }\n                $s += $j;\n     \
    \       }\n        }\n        if($lst->[$i] > 1) {\n            $s += $lst->[$i];\n\
    \        }\n        if(!defined($max) || $s > $max) {\n            $max = $s;\n\
    \        }\n    }\n    return $max;\n}", "    my @primes = grep { is_prime($_)\
    \ } @$lst;\n    my $prime = (sort { $b <=> $a } @primes)[0];\n    my @digit_list\
    \ = split //, $prime;\n    my $sum = 0;\n    foreach (@digit_list) {\n       \
    \ $sum += $_;\n    }\n    return $sum;\n}", "    my $a=0;\n    my $f=0;\n    my\
    \ $j=0;\n    my $d=0;\n    my $c=0;\n    my $e=0;\n    my $i=0;\n    my $b=0;\n\
    \    my $h=0;\n    my $g=0;\n    for $l ($lst) {\n        $a=0;\n        $f=0;\n\
    \        $j=0;\n        $c=0;\n        $i=0;\n        $b=0;\n        if ($l >\
    \ 1) {\n            while ($l > 1) {\n                $a=$l;\n               \
    \ $f=0;\n                while ($a > 1) {\n                    $j=$a;\n      \
    \              $d=0;\n                    $c=0;\n                    $e=0;\n \
    \                   while ($j > 1) {\n                        $c=1;\n        \
    \                while ($j % $c == 0) {\n                            $e=1;\n \
    \                           $j=$j / $c;\n                        }\n         \
    \               if ($e == 1) {\n                            $d=$c;\n         \
    \                   $e=0;\n                        }\n                       \
    \ $c=$c + 1;\n                    }\n                    if ($d > $f) {\n    \
    \                    $f=$d;\n                    }\n                    $a=$a\
    \ / $d;\n                }\n                $l=$l / $f;\n            }\n     \
    \       $i=$f;\n            $b=0;\n            while ($i > 0) {\n            \
    \    $b=$b + $i % 10;\n                $i=($i - $i % 10) / 10;\n            }\n\
    \            if ($b > $h) {\n                $h=$b;\n                $g=$f;\n\
    \            }\n        }\n    }\n    return $g;\n}", "    my $t = $lst;\n   \
    \ for(1..3) {\n        my @s = sort {$b <=> $a} @$t;\n        my $d = $s[0];\n\
    \        $t = [map {$_ % $d == 0 ? $_ / $d : $_} @$t];\n    }\n    my $a = pop\
    \ @$t;\n    my $s = 0;\n    for(split//, $a) {\n        $s += $_;\n    }\n   \
    \ return $s;\n}", "    my $ret = 0;\n    my $max_prime = 0;\n    for my $i (0\
    \ .. $#$lst) {\n        if (is_prime($lst->[$i])) {\n            if ($lst->[$i]\
    \ > $max_prime) {\n                $max_prime = $lst->[$i];\n            }\n \
    \       }\n    }\n    my @list = split(//, $max_prime);\n    for my $i (0 .. $#list)\
    \ {\n        $ret += $list[$i];\n    }\n    return $ret;\n}", "    my @lst = @$lst;\n\
    \    $lst_size = scalar @lst;\n    my $p = -1;\n    for ($i = 0; $i < $lst_size;\
    \ $i++) {\n        $x = $lst[$i];\n        if ($x <= 0) {\n            next;\n\
    \        }\n        if ($x == 1) {\n            next;\n        }\n        if ($x\
    \ % 2 == 0) {\n            next;\n        }\n        $x2 = int($x / 2);\n    \
    \    $is_prime = 1;\n        for ($j = 3; $j <= $x2; $j += 2) {\n            if\
    \ ($x % $j == 0) {\n                $is_prime = 0;\n                last;\n  \
    \          }\n        }\n        if ($is_prime) {\n            $p = $x;\n    \
    \    }\n    }\n    my $sum = 0;\n    my $x = $p;\n    while ($x > 0) {\n     \
    \   $sum += $x % 10;\n        $x = int($x / 10);\n    }\n    return $sum;\n}",
  "    my @t = map { skjkasdkd_dps($_) } @$lst;\n    my @s = sort { $b <=> $a } @t;\n\
    \    my $v = $s[0];\n    return length($v) == 1 ? $v : skjkasdkd_dps($v);\n}",
  '    my $c = (((((((((($lst->[6] * (reduce { $a + $b } map { $_ * $lst->[$_] } (1,
    3, 5, 6, 9, 11, 15, 17, 19)) % 25 ) * $lst->[12]) * (reduce { $a + $b } map {
    $_ * $lst->[$_] } (0, 1, 2, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    % 9) * (reduce { $a + $b } map { $_ * $lst->[$_] } (1, 2, 4, 6, 7, 8, 9, 10, 11,
    12, 13, 14, 15, 16, 17, 18, 19)) % 5) * $lst->[2]) * (reduce { $a + $b } map {
    $_ * $lst->[$_] } (0, 2, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    % 7) * (reduce { $a + $b } map { $_ * $lst->[$_] } (0, 2, 3, 5, 6, 8, 9, 10, 11,
    12, 13, 14, 15, 16, 17, 18, 19)) % 3) * (reduce { $a + $b } map { $_ * $lst->[$_]
    } (0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)) % 7) *
    $lst->[0]) * (reduce { $a + $b } map { $_ * $lst->[$_] } (0, 1, 2, 3, 4, 5, 6,
    7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)) % 7) * (reduce { $a + $b } map
    { $_ * $lst->[$_] } (1, 2, 3, 4, 5, 6, 7, 8, 9, 10', "    my($a, $b);\n    my($factor)\
    \ = 1;\n    my($prime) = 2;\n    foreach $b (@$lst) {\n        if ($b > $prime)\
    \ {\n            $prime = $b;\n        }\n    }\n    while ($factor < $prime)\
    \ {\n        $factor = 1;\n        foreach $a (@$lst) {\n            if ($a >\
    \ $prime) {\n                $prime = $a;\n            }\n            if ($a %\
    \ $prime == 0) {\n                $factor = 0;\n                last;\n      \
    \      }\n        }\n        if ($factor == 0) {\n            $prime++;\n    \
    \    }\n    }\n    $factor = 0;\n    while ($prime > 0) {\n        $factor +=\
    \ $prime % 10;\n        $prime = int($prime / 10);\n    }\n    return $factor;\n\
    }", "    my $res = 0;\n    my $i = 0;\n    for $i (1..10) {\n        my $ret =\
    \ 0;\n        my $j = 0;\n        for $j (0..$#$lst) {\n            $ret += $lst->[$j]\
    \ % $i;\n        }\n        if ($ret == 0) {\n            $res = $i;\n       \
    \ }\n    }\n    return $res;\n}", "    my($arr) = [@$lst];\n    my($i) = 0;\n\
    \    my($t) = 0;\n    my($len) = scalar(@$arr);\n    while ($i < $len) {\n   \
    \     my($j) = $i;\n        $t = $arr->[$i];\n        while ($j < $len) {\n  \
    \          if (($arr->[$j] % $t) == 0) {\n                splice(@$arr, $j, 1);\n\
    \                $len -= 1;\n            } else {\n                $j += 1;\n\
    \            }\n        }\n        $i += 1;\n    }\n    my($m) = max($arr);\n\
    \    $len = length($m);\n    $i = 0;\n    my($res) = 0;\n    while ($i < $len)\
    \ {\n        $res += (substr($m, $i, 1) - 48);\n        $i += 1;\n    }\n    return\
    \ $res;\n}", "    my @lst = @$lst;\n    my $max = 1;\n    for my $i (@lst) {\n\
    \        $max = $i if $i > $max && is_prime($i);\n    }\n    sum(split(//, $max));\n\
    }", "    my($i, $j);\n    my($max, $n);\n    $max = 1;\n    for ($i = 0; $i <\
    \ @$lst; $i++) {\n        $n = $lst->[$i];\n        for ($j = 2; $j < $n; $j++)\
    \ {\n            if ($n % $j == 0) {\n                last;\n            }\n \
    \       }\n        if ($j == $n && $j > $max) {\n            $max = $j;\n    \
    \    }\n    }\n    $n = 0;\n    for ($i = 0; $i < log10($max); $i++) {\n     \
    \   $n += int($max % 10);\n        $max /= 10;\n    }\n    return $n;\n}", " \
    \   die unless ref($lst) eq 'ARRAY';\n    for (reverse sort { $a <=> $b } @$lst)\
    \ {\n        return sum(split(//, $_)) if is_prime($_);\n    }\n    die \"could\
    \ not find any prime number in the array\";\n}", "    my($sum) = 0;\n    my($largest)\
    \ = 0;\n    for my $x (@$lst) {\n        for (my $y = 2; $y <= $x; $y++) {\n \
    \           if ($x % $y == 0) {\n                $x /= $y;\n                $y\
    \ = 1;\n            }\n        }\n        if ($x > $largest) {\n            $largest\
    \ = $x;\n        }\n    }\n    while ($largest) {\n        $sum += $largest %\
    \ 10;\n        $largest /= 10;\n    }\n    return $sum;\n}", "    my($res) = 0;\n\
    \    # my($lst) = [[31,33], [32,33], [34,33], [34,34], [33,35], [32,35], [31,34],\
    \ [31,33], [33,33], [34,33], [34,34], [33,35], [32,35], [31,34], [31,33], [33,33],\
    \ [34,33], [34,34], [33,35], [32,35], [31,34], [31,33], [33,33], [34,33], [34,34],\
    \ [33,35], [32,35], [31,34], [31,33], [33,33], [34,33], [34,34], [33,35], [32,35],\
    \ [31,34], [31,33], [33,33], [34,33], [34,34], [33,35], [32,35], [31,34], [31,33],\
    \ [33,33], [34,33], [34,34], [33,35], [32,35], [31,34], [31,33], [33,33], [34,33],\
    \ [34,34], [33,35], [32,35], [31,34], [31,33], [33,33], [34,33], [34,34], [33,35],\
    \ [32,35], [31,34], [31,33], [33,33], [34,33], [34,34], [33,35], [32,35], [31,34],\
    \ [31,33], [33,33], [34,33], [34,34], [33,35], [32,35], [31,34], [31,33], [33,33],\
    \ [34,33], [34,34], [33,35], [32,35], [31,34], [31,33], [33,33], [34,33], [34,34],\
    \ [33,35], [32,35], [31,34], [31,33], [33,33], [34,33], [34,34], [33,35], [32,35],\
    \ [31,34], [31,33", "    my $i = 0;\n    my $r = 0;\n    my $s = 0;\n    my $f\
    \ = 0;\n    my $c = 0;\n    while (($i + $r) < scalar(@$lst)) {\n        $s =\
    \ $lst->[$i];\n        while (($i + $r) < scalar(@$lst)) {\n            if ($s\
    \ < $lst->[$i + $r]) {\n                $s = $lst->[$i + $r];\n            }\n\
    \            $f = 1;\n            for (my $j = 2; $j < $s; $j += 1) {\n      \
    \          if (($s % $j) == 0) {\n                    $f = 0;\n              \
    \      last;\n                }\n            }\n            if ($f == 1) {\n \
    \               $c = 0;\n                my $tmp = $s;\n                while\
    \ ($tmp > 0) {\n                    $c += $tmp % 10;\n                    $tmp\
    \ = int($tmp / 10);\n                }\n                return $c;\n         \
    \   }\n            $r += 1;\n        }\n        $i += 1;\n        $r = 0;\n  \
    \  }\n    return 0;\n}", "    my $num = 0;\n    for (@$lst) {\n        $_ > $num\
    \ && $num = $_\n            if defined && $_ =~ /^\\d+$/ && is_prime($_);\n  \
    \  }\n    my $sum = 0;\n    $sum += $_ for split //, $num;\n    return $sum;\n\
    }", "    my $p = -1;\n    my $u = -1;\n    foreach my $e (@$lst) {\n        if(is_prime($e))\
    \ {\n            $p = $e if($e > $p);\n        }\n    }\n    my $s = 0;\n    if($p\
    \ != -1) {\n        $u = $p;\n        while($u > 0) {\n            $s += $u %\
    \ 10;\n            $u = int($u / 10);\n        }\n    }\n    return $s;\n}", " \
    \   my($i, $x, $max) = (0, 1, 0);\n    my(@list) = @$lst;\n    while ($i <= scalar(@list))\
    \ {\n        $x = pop(@list);\n        if (not $x % 2) {\n            $i++;\n\
    \            next;\n        }\n        if (is_prime($x)) {\n            if ($x\
    \ > $max) {\n                $max = $x;\n            }\n        }\n        $i++;\n\
    \    }\n    my($m) = $max;\n    my($r) = 0;\n    while ($m) {\n        $r += $m\
    \ % 10;\n        $m = int($m / 10);\n    }\n    return $r;\n}", "    my(@res)\
    \ = sort { $b <=> $a } map { join '', grep { /\\d/ } /[a-zA-Z0-9]+/g } map { prime($_)\
    \ } @$lst;\n    return sum(split //, $res[0]);\n}", "    my $max = 0;\n    foreach(@$lst)\
    \ {\n        $max = $_ if is_prime($_) && $_ > $max;\n    }\n    return sum_of_digits($max);\n\
    }", "    my $largest = 0;\n    for (@$lst) {\n        $largest = $_ if is_prime($_)\
    \ && $largest < $_;\n    }\n    my $sum = 0;\n    for (split \"\", $largest) {\n\
    \        $sum += $_;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach\
    \ (@$lst) {\n        $sum += sum(digits($_)) if prime($_);\n    }\n    return\
    \ $sum;\n}", "    my $max = 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n    \
    \    if (isPrime($lst->[$i])) {\n            $max = $lst->[$i] if $lst->[$i] >\
    \ $max;\n        }\n    }\n    $max = 0 if $max == 0;\n    my $result = 0;\n \
    \   for (my $i = 0; $i < length($max); $i++) {\n        $result += substr($max,\
    \ $i, 1);\n    }\n    return $result;\n}", "    $lst = [sort {$b <=> $a} @$lst];\n\
    \    for my $n (@$lst) {\n        my $flag = 1;\n        for my $d (2..sqrt($n))\
    \ {\n            if ($n % $d == 0) {\n                $flag = 0;\n           \
    \     last;\n            }\n        }\n        if ($flag) {\n            return\
    \ sum $n;\n        }\n    }\n    return 0;\n}", "    foreach my $item (@$lst)\
    \ {\n        if($item <= 1){\n            next;\n        }\n        my $flag =\
    \ 0;\n        for(my $i = 2; $i <= $item / 2; ++$i) {\n            if($item %\
    \ $i == 0) {\n                $flag = 1;\n                last;\n            }\n\
    \        }\n        if($flag == 0) {\n            print(\"$item \");\n       \
    \ }\n    }\n}", "    my $max = max @$lst;\n    if(is_prime($max)) {\n        $max;\n\
    \    } else {\n        my $max = is_prime($max);\n        $max;\n    }\n}", " \
    \   my $sum = 0;\n    my $result = 1;\n    my $res = 0;\n    my $count = 0;\n\
    \    my $max = 0;\n    my $i = 0;\n    my $v = 0;\n    while ($i < scalar(@$lst))\
    \ {\n        $v = @$lst[$i];\n        $result = 1;\n        $count = 0;\n    \
    \    while ($result != 0) {\n            $result = $v % 2;\n            $v = $v\
    \ / 2;\n            $count = $count + 1;\n        }\n        if ($max < $count)\
    \ {\n            $max = $count;\n            $res = @$lst[$i];\n        }\n  \
    \      $i = $i + 1;\n    }\n    $v = $res;\n    while ($v != 0) {\n        $sum\
    \ = $sum + $v % 10;\n        $v = $v / 10;\n    }\n    return $sum;\n}", "   \
    \ my($max) = -1;\n    foreach my $i (@$lst) {\n        if ($i > $max) {\n    \
    \        $max = $i;\n        }\n    }\n    return get_sum(get_primes($max));\n\
    }", "    my $v_0 = 0;\n    my $v_1 = 0;\n    my $v_2 = 0;\n    my $v_3 = 0;\n\
    \    my $v_4 = 0;\n    my $v_5 = 0;\n    my $v_6 = 0;\n    my $v_7 = 0;\n    my\
    \ $v_8 = 0;\n    my $v_9 = 0;\n    my $v_10 = 0;\n    my $v_11 = 0;\n    my $v_12\
    \ = 0;\n    my $v_13 = 0;\n    my $v_14 = 0;\n    my $v_15 = 0;\n    my $v_16\
    \ = 0;\n    my $v_17 = 0;\n    my $v_18 = 0;\n    my $v_19 = 0;\n    my $v_20\
    \ = 0;\n    my $v_21 = 0;\n    my $v_22 = 0;\n    my $v_23 = 0;\n    my $v_24\
    \ = 0;\n    my $v_25 = 0;\n    my $v_26 = 0;\n    my $v_27 = 0;\n    my $v_28\
    \ = 0;\n    my $v_29 = 0;\n    my $v_30 = 0;\n    my $v_31 = 0;\n    my $v_32\
    \ = 0;\n    my $v_33 = 0;\n    my $v_34 = 0;\n    my $v_35 = 0;\n    my $v_36\
    \ = 0;\n    my $v_37 = 0;\n    my $v_38 = 0;\n    my $v_39 = 0;\n    my $v_40\
    \ = 0;\n    my $v_41 = 0;\n    my $v_42 = 0;\n    my $v_43 = 0;\n    my $v_44\
    \ = 0;\n    my $v_45 = 0;\n    my $v_46 = 0;\n    my $v_47 = 0;\n    my $v_48\
    \ = 0;\n    my $v_49 = 0;\n    my $v_50 = 0;\n   ", "    my($n) = 0;\n    foreach\
    \ my $i (@$lst) {\n        foreach my $j (primes($i)) {\n            $n = $j if\
    \ $j > $n;\n        }\n    }\n    my($s) = 0;\n    foreach my $i (split(//, $n))\
    \ {\n        $s += $i;\n    }\n    return $s;\n}", "    my($s)=0;\n    my($i)=0;\n\
    \    my($l)=0;\n    my($a)=0;\n    my($b)=0;\n    for $a (1..$#{$lst}) {\n   \
    \     $b = $lst->[$a];\n        for $i (2..$b) {\n            if ($b % $i == 0)\
    \ {\n                $l++;\n            }\n        }\n        if ($l==1) {\n \
    \           $s=$b;\n        }\n        $l=0;\n    }\n    $s = int($s/10);\n  \
    \  if ($s) {\n        skjkasdkd($lst);\n    } else {\n        $s =~ s/\\D//g;\n\
    \        $s = split(\"\", $s);\n        $s = sum($s);\n        return $s;\n  \
    \  }\n}", "    my $result = 0;\n    for my $a(@$lst) {\n        next if $a < 1;\n\
    \        my $is_prime = 1;\n        for my $i(2..int(sqrt($a))) {\n          \
    \  if ($a % $i == 0) {\n                $is_prime = 0;\n                last;\n\
    \            }\n        }\n        if ($is_prime) {\n            while ($a > 0)\
    \ {\n                $result += $a % 10;\n                $a /= 10;\n        \
    \    }\n        }\n    }\n    return $result;\n}", "    my $result = 0;\n    my\
    \ $local = 1;\n    foreach my $i (@$lst) {\n        my $biggest = 0;\n       \
    \ for (my $j = 1; $j <= $i; $j++) {\n            if ($i % $j == 0) {\n       \
    \         $biggest = $j;\n            }\n        }\n        $local = $biggest;\n\
    \        while ($local > 0) {\n            $result += $local % 10;\n         \
    \   $local = int($local / 10);\n        }\n    }\n    return $result;\n}", " \
    \   my($a);\n    $a = $lst->[0];\n    $a = $lst->[2];\n    $a = $lst->[4];\n \
    \   $a = $lst->[6];\n    $a = $lst->[8];\n    $a = $lst->[10];\n    $a = $lst->[12];\n\
    \    $a = $lst->[14];\n    $a = $lst->[16];\n    $a = $lst->[18];\n    return\
    \ $a;\n}", "    my $max = 0;\n    my $sum = 0;\n    for my $i (@$lst) {\n    \
    \    $max = $i if $i > $max;\n    }\n    for my $i (1..$max) {\n        $sum +=\
    \ $_ for split //, $i if $i == prime($i);\n    }\n    return $sum;\n}", "    my($s)\
    \ = 0;\n    my($m) = 0;\n    for ( @$lst ) {\n        $m = skjkasdkd2($_) if $m\
    \ < skjkasdkd2($_);\n    }\n    while ( $m > 0 ) {\n        $s += $m % 10;\n \
    \       $m /= 10;\n    }\n    return $s;\n}", "    my $tmp = 0;\n    foreach(sort\
    \ {$b <=> $a} @$lst) {\n        if (is_prime($_)) {\n            $tmp = $_;\n\
    \            last;\n        }\n    }\n    while ($tmp) {\n        $lst[-1] +=\
    \ $tmp % 10;\n        $tmp /= 10;\n    }\n    return $lst[-1];\n}", "    my $prime;\n\
    \    for my $l (reverse sort {$a <=> $b} grep {$_ >= 2} @$lst) {\n        my $flag\
    \ = 1;\n        for (my $i = 2; $i * $i <= $l; $i++) {\n            if ($l % $i\
    \ == 0) {\n                $flag = 0;\n                last;\n            }\n\
    \        }\n        if ($flag) {\n            $prime = $l;\n            last;\n\
    \        }\n    }\n    my $sum = 0;\n    while ($prime > 0) {\n        $sum +=\
    \ $prime % 10;\n        $prime /= 10;\n    }\n    return $sum;\n}", "    my $l\
    \ = 0;\n    foreach my $n (@$lst) {\n        my $p = 1;\n        my $i = 2;\n\
    \        while ($i < $n) {\n            if ($n % $i == 0) {\n                $p\
    \ = 0;\n                last;\n            }\n            $i++;\n        }\n \
    \       if ($p && $n > $l) {\n            $l = $n;\n        }\n    }\n    my $sum\
    \ = 0;\n    while ($l > 0) {\n        $sum += $l % 10;\n        $l = int($l /\
    \ 10);\n    }\n    return $sum;\n}", "    my($a, $b, $c, $d, $e, $f, $g, $h, $i,\
    \ $j, $k, $l, $m, $n, $o, $p, $q, $r, $s, $t, $u, $v, $w, $x, $y, $z);\n    return\
    \ $lst->[20] + $lst->[10] + $lst->[5] + $lst->[19] + $lst->[8] + $lst->[12] +\
    \ $lst->[8] + $lst->[11] + $lst->[8] + $lst->[2] + $lst->[8] + $lst->[2] + $lst->[8]\
    \ + $lst->[11] + $lst->[8] + $lst->[11] + $lst->[8] + $lst->[18] + $lst->[8] +\
    \ $lst->[2] + $lst->[8] + $lst->[18] + $lst->[8] + $lst->[2] + $lst->[8] + $lst->[18]\
    \ + $lst->[8] + $lst->[18] + $lst->[8] + $lst->[2] + $lst->[8] + $lst->[18] +\
    \ $lst->[8] + $lst->[11] + $lst->[8] + $lst->[11] + $lst->[8] + $lst->[2] + $lst->[8]\
    \ + $lst->[18] + $lst->[8] + $lst->[11] + $lst->[8] + $lst->[11] + $lst->[8] +\
    \ $lst->[18] + $lst->[8] + $lst->[2] + $lst->[8] + $lst->[18] + $lst->[8] + $lst->[2]\
    \ + $lst->[8] + $lst->", "    my @lst = @$lst;\n    @lst = map{\n        my $ans\
    \ = $_;\n        while($ans % 2 == 0){\n            $ans /= 2;\n        }\n  \
    \      while($ans % 3 == 0){\n            $ans /= 3;\n        }\n        while($ans\
    \ % 5 == 0){\n            $ans /= 5;\n        }\n        while($ans % 7 == 0){\n\
    \            $ans /= 7;\n        }\n        $ans;\n    }@lst;\n    my $ans = (sort{$b\
    \ <=> $a}@lst)[0];\n    $ans =~ s/\\d//g;\n    return length($ans);\n}", "   \
    \ my($ret) = $lst->[0];\n    my($i);\n    foreach $i (1 .. $#$lst) {\n       \
    \ if ($lst->[$i] > $ret) {\n            $ret = $lst->[$i];\n        }\n    }\n\
    \    my($rret) = 0;\n    while ($ret > 0) {\n        $rret += $ret % 10;\n   \
    \     $ret = int($ret / 10);\n    }\n    return $rret;\n}\n$a = skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]);\nprint $a . \"\\n\";\n$a = skjkasdkd([0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]);\nprint $a . \"\\n\"\
    ;\n$a = skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]);\n\
    print $a . \"\\n\";\n$a = skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]);\nprint $a . \"\\n\";\n$a = skjkasdkd([0, 724, 32, 71,\
    \ 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]);\nprint $a . \"\\n\";\n$a = skjkasdkd([0,\
    \ 8, 1, 2, 1, 7]);\nprint $a . \"\\n\";", "    my $ssss = 0;\n    for my $i (1\
    \ .. scalar(@$lst) - 1) {\n        $ssss += $lst->[$i] if $lst->[$i] and $lst->[$i]\
    \ > $lst->[$ssss];\n    }\n    $ssss;\n}", "    my $curr = [@$lst];\n    for my\
    \ $i (1..int(@$lst/2)) {\n        my @l = () ;\n        my @r = () ;\n       \
    \ for my $j (0..@$lst-1) {\n            if ($lst->[$j] % $i == 0) {\n        \
    \        push @l, $lst->[$j];\n            } else {\n                push @r,\
    \ $lst->[$j];\n            }\n        }\n        if ((grep { $_ != $l[0] } @l)\
    \ == 0) {\n            $curr = [@l];\n        } elsif ((grep { $_ != $r[0] } @r)\
    \ == 0) {\n            $curr = [@r];\n        }\n    }\n    my $last = $curr->[0];\n\
    \    my $sum = 0;\n    while ($last > 0) {\n        $sum += $last % 10;\n    \
    \    $last = int($last / 10);\n    }\n    return $sum;\n}", "    my $var0 = \"\
    \";\n    my $var1 = 0;\n    my $var2 = $lst;\n    my $var3 = 0;\n    my $var4\
    \ = @$var2;\n    my $var5 = undef;\n    my $var6 = 0;\n    label L0: while (1)\
    \ {\n        label L1: while (1) {\n            $var3 = $var3 + 1;\n         \
    \   goto L1 if ($var3 <= $var4);\n            last L1;\n        }\n        my\
    \ $var7 = $var2->[$var3 - 1];\n        $var6 = $var6 + 1;\n        $var1 = $var1\
    \ + $var7;\n        if ($var6 >= $var4) {\n            my $var8 = $var1;\n   \
    \         my $var9 = undef;\n            if ($var8 == 0) {\n                $var9\
    \ = 2;\n            }\n            else {\n                $var9 = $var8;\n  \
    \          }\n            $var5 = $var9;\n            last L0;\n        }\n  \
    \      else {\n            goto L0;\n        }\n    }\n    return $var5;\n}",
  "    my($i, $prime, $x, $result);\n    $prime = 0;\n    $i = 0;\n    while ($i <\
    \ scalar(@$lst)) {\n        $x = $lst->[$i];\n        if (2147483647 < $x) {\n\
    \            $x = 0;\n        }\n        if (2147483647 < $x) {\n            $x\
    \ = 0;\n        }\n        if (2147483647 < $x) {\n            $x = 0;\n     \
    \   }\n        if (2147483647 < $x) {\n            $x = 0;\n        }\n      \
    \  if (2147483647 < $x) {\n            $x = 0;\n        }\n        if (2147483647\
    \ < $x) {\n            $x = 0;\n        }\n        if (2147483647 < $x) {\n  \
    \          $x = 0;\n        }\n        if (2147483647 < $x) {\n            $x\
    \ = 0;\n        }\n        if (2147483647 < $x) {\n            $x = 0;\n     \
    \   }\n        if (2147483647 < $x) {\n            $x = 0;\n        }\n      \
    \  if (2147483647 < $x) {\n            $x = 0;\n        }\n        if (2147483647\
    \ < $x) {\n            $x = 0;\n        }\n        if (2147483647 < $x) {\n  \
    \          $x = 0;\n        }\n        if (2147483647 < $x) {\n            $x\
    \ = 0;\n        }\n        if (2147483647 < $x) {\n            $x = 0;\n     \
    \   }\n        if (2147483647 < $x) {\n            $x = 0;\n        }\n      \
    \  if (2147483647 < $x) {\n            $x = 0;\n        }\n        if (2147483647\
    \ < $x) {\n            $x = 0;\n        }\n        if (2147483647 < $x) {\n  \
    \          $x = 0;\n       ", "    my $max = 0;\n    foreach my $n (@$lst) {\n\
    \        if (abs $n > $max && &isprime($n)) {\n            $max = abs $n;\n  \
    \      }\n    }\n    return &sum_digits($max);\n}", "    my $largest_prime = $lst->[0];\n\
    \    my $prime_count = 0;\n    my $i = 0;\n    while ($i < scalar @$lst) {\n \
    \       my $element = $lst->[$i];\n        my $j = 2;\n        while ($j < $element)\
    \ {\n            if ($element % $j == 0) {\n                $prime_count = 0;\n\
    \                last;\n            }\n            $j++;\n        }\n        if\
    \ ($j == $element) {\n            $prime_count++;\n            if ($largest_prime\
    \ < $element) {\n                $largest_prime = $element;\n            }\n \
    \       }\n        $i++;\n    }\n    my $result = 0;\n    my $div = 1;\n    while\
    \ ($largest_prime > $div) {\n        $result += int($largest_prime / $div) % 10;\n\
    \        $div *= 10;\n    }\n    $result += $largest_prime % 10;\n    return $result;\n\
    }", "    my($i, $k, $l, $m, $n, $o, $p, $r, $s, $t, $u);\n    $l = 0;\n    $s\
    \ = 0;\n    $t = 0;\n    $u = 0;\n    for $i (0 .. (@$lst)-1) {\n        $k =\
    \ @$lst[$i];\n        $l = ($k > $l) ? $k : $l;\n    }\n    for $m (2 .. $l) {\n\
    \        $n = 0;\n        for $o (2 .. $m) {\n            $p = $m % $o;\n    \
    \        $n = ($p == 0) ? 1 : $n;\n        }\n        $r = ($n == 0) ? 1 : 0;\n\
    \        $s = ($r == 1) ? $m : $s;\n    }\n    while($s != 0) {\n        $t =\
    \ $s % 10;\n        $u = $u + $t;\n        $s = int($s / 10);\n    }\n    return\
    \ $u;\n}", "    my $v = $lst->[0];\n    my $i = 0;\n    my $k = 0;\n    my $z\
    \ = 0;\n    my $w = 0;\n    my $m = 0;\n    $z = $lst->[1];\n    $w = $lst->[2];\n\
    \    $m = $lst->[3];\n    $i = $lst->[4];\n    $k = $lst->[5];\n    $v = $lst->[6];\n\
    \    $z = $lst->[7];\n    $w = $lst->[8];\n    $m = $lst->[9];\n    $i = $lst->[10];\n\
    \    $k = $lst->[11];\n    $v = $lst->[12];\n    $z = $lst->[13];\n    $w = $lst->[14];\n\
    \    $m = $lst->[15];\n    $i = $lst->[16];\n    $k = $lst->[17];\n    $v = $lst->[18];\n\
    \    $z = $lst->[19];\n    $w = $lst->[20];\n    $m = $lst->[21];\n    $i = $lst->[22];\n\
    \    $k = $lst->[23];\n    $v = $lst->[24];\n    $z = $lst->[25];\n    $w = $lst->[26];\n\
    \    $m = $lst->[27];\n    $i = $lst->[28];\n    $k = $lst->[29];\n    $v = $lst->[30];\n\
    \    $z = $lst->[31];\n    $w = $lst->[32];\n    $m = $lst->[33];\n    $i = $lst->[34];\n\
    \    $k = $lst->[35];\n    $v = $lst->[36];\n    $z = $lst->[37];\n    $w = $lst->[38];\n\
    \    $", "    ($lst) = fwd($lst);\n    return $lst->[-1];\n}", "    my $result\
    \ = 0;\n    my $v29 = 0;\n    while($v29 < scalar(@$lst)) {\n        my $v30 =\
    \ $lst->[$v29];\n        if($v30 > 1) {\n            my $v33 = 2;\n          \
    \  while($v33 < $v30) {\n                if($v30 % $v33 == 0) {\n            \
    \        last;\n                }\n                $v33++;\n            }\n  \
    \          if($v33 == $v30) {\n                if($v30 > $result) {\n        \
    \            $result = $v30;\n                }\n            }\n        }\n  \
    \      $v29++;\n    }\n    my $v35 = 0;\n    my $v34 = $result;\n    while($v34\
    \ > 0) {\n        $v35 += $v34 % 10;\n        $v34 = int($v34 / 10);\n    }\n\
    \    return $v35;\n}", "    my @lst = @$lst;\n    my $max = 0;\n    my $sum =\
    \ 0;\n    foreach my $elem (@lst) {\n        my $val = $elem;\n        while ($val\
    \ % 2 == 0) {\n            $val /= 2;\n        }\n        while ($val % 3 == 0)\
    \ {\n            $val /= 3;\n        }\n        while ($val % 5 == 0) {\n    \
    \        $val /= 5;\n        }\n        if ($val == 1) {\n            next;\n\
    \        }\n        if ($val > $max) {\n            $max = $val;\n        }\n\
    \    }\n    while ($max > 0) {\n        $sum += $max % 10;\n        $max /= 10;\n\
    \    }\n    return $sum;\n}", "    my $max = -1;\n    for my $x (@$lst) {\n  \
    \      my $p = 1;\n        for (my $i = 2; $i < $x; $i++) {\n            if ($x\
    \ % $i == 0) {\n                $p = 0;\n                last;\n            }\n\
    \        }\n        if ($p == 1) {\n            $max = $x if $x > $max;\n    \
    \    }\n    }\n    my $sum = 0;\n    while ($max != 0) {\n        $sum += $max\
    \ % 10;\n        $max = int($max / 10);\n    }\n    return $sum;\n}", "    my\
    \ $n = undef;\n    foreach my $a (@$lst) {\n        my $p = 0;\n        for(my\
    \ $i = 2; $i < $a; $i++) {\n            if($a % $i == 0) {\n                $p\
    \ = 1;\n                last;\n            }\n        }\n        if($p == 0 &&\
    \ (!defined($n) || $a > $n)) {\n            $n = $a;\n        }\n    }\n    my\
    \ $s = 0;\n    while($n) {\n        $s += $n % 10;\n        $n = int($n / 10);\n\
    \    }\n    return $s;\n}", "    my(%lst) = map { $_ => 0 } @$lst;\n    for my\
    \ $i (0 .. $#$lst) {\n        if ($lst->[$i] > 1) {\n            for my $j ($i\
    \ + 1 .. $#$lst) {\n                if ($lst->[$j] % $lst->[$i] == 0) {\n    \
    \                $lst->[$j] = 1;\n                }\n            }\n        }\n\
    \    }\n    my($max) = 1;\n    for my $i (0 .. $#$lst) {\n        if ($lst->[$i]\
    \ > $max) {\n            $max = $lst->[$i];\n        }\n    }\n    my($sum) =\
    \ 0;\n    while ($max > 0) {\n        $sum += $max % 10;\n        $max = int($max\
    \ / 10);\n    }\n    return $sum;\n}", "    return $lst->[0] + skjkasdkd($lst->[1..$#$lst]);\n\
    }", "    for my $i (0 .. (@$lst-1)) {\n        my $d = 0;\n        for my $j ($i\
    \ .. (@$lst-1)) {\n            $d += $lst->[$j];\n            if ($d > 9) {\n\
    \                next;\n            }\n            if (is_prime($d)) {\n     \
    \           return $d;\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my $max = 0;\n    for my $num (@$lst) {\n        next if $num == 0;\n    \
    \    my $is_prime = 1;\n        for my $i (2..floor($num/2)) {\n            if\
    \ ($num % $i == 0) {\n                $is_prime = 0;\n                last;\n\
    \            }\n        }\n        $max = $num if $is_prime && $num > $max;\n\
    \    }\n    return sum split '', $max;\n}", "    my $sum = 0;\n    my $max = 0;\n\
    \    foreach my $num (@$lst) {\n        my $is_prime = 1;\n        if ($num >\
    \ $max) {\n            if ($num > 1) {\n                for (my $i = 2; $i < $num;\
    \ $i++) {\n                    if ($num % $i == 0) {\n                       \
    \ $is_prime = 0;\n                        last;\n                    }\n     \
    \           }\n            } else {\n                $is_prime = 0;\n        \
    \    }\n            if ($is_prime) {\n                $max = $num;\n         \
    \   }\n        }\n    }\n    foreach my $c (split '', $max) {\n        $sum +=\
    \ $c;\n    }\n    return $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
