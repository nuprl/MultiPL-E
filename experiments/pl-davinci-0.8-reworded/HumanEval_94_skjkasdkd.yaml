name: HumanEval_94_skjkasdkd
language: pl
prompt: "# You are given an array of integers.\n# You need to find the largest prime\
  \ value and return the sum of its digits.\n# Examples:\n# >>> skjkasdkd([0, 3, 2,\
  \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>>\
  \ skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n\
  # >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9,\
  \ 3])\n# 13\n# >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n\
  # 11\n# >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd([0, 8, 1, 2,\
  \ 1, 7])\n# 7\nsub skjkasdkd {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&skjkasdkd;\n\
  \        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
  \ 4, 32, 3, 2, 32, 324, 4, 3]),10)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3,\
  \ 40, 1, 2, 1, 2, 4, 2, 5, 1]),25)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278,\
  \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->([0, 724, 32, 71, 99,\
  \ 32, 6, 0, 5, 91, 83, 0, 5, 6]),11)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
  \ 8, 1, 2, 1, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([8191]),19)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([8191, 123456, 127,\
  \ 7]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([127, 97, 8192]),10)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($max) = 0;\n    for my $x (@$lst) {\n        my($p) = 1;\n \
    \       for my $y (2 .. $x) {\n            my($ok) = 1;\n            for my $z\
    \ (2 .. $y - 1) {\n                if($y % $z == 0) {\n                    $ok\
    \ = 0;\n                    last;\n                }\n            }\n        \
    \    if($ok) {\n                $p = $y;\n            }\n        }\n        if($p\
    \ > $max) {\n            $max = $p;\n        }\n    }\n    return reduce {$a +\
    \ $b} map {$_ - ord('0')} split //, \"$max\";\n}", "    my($res) = 0;\n    foreach\
    \ my $x (@$lst) {\n        my($i, $j) = (0, $x);\n        while ($j >= 2) {\n\
    \            my($t) = ($j % 2) ? 2 : 1;\n            while (($j % $t) == 0) {\n\
    \                $j /= $t;\n                $i = $t if ($t > $i);\n          \
    \  }\n            ++$t;\n        }\n        $res += $i if ($i > $res);\n    }\n\
    \    my($ans) = 0;\n    while ($res > 0) {\n        $ans += $res % 10;\n     \
    \   $res /= 10;\n    }\n    return $ans;\n}", "    my $total = 0;\n    $total\
    \ = max(map { $_ =~ m/^(\\d+)$/; $1} grep { is_prime($_) } @$lst);\n    return\
    \ sum(split(//, $total));\n}", "    my $prime = filter(is_prime, map { $lst->[$_]\
    \ } 0 .. $lst->$#*);\n    my $largest = reduce {$a > $b ? $a : $b} @$prime;\n\
    \    my $x = reduce {$a + $b} map { $_ - '0' } split //, $largest;\n    return\
    \ $x;\n}", "    my $max = $lst->[0];\n    foreach my $e (@$lst) {\n        if($e\
    \ > $max) {\n            $max = $e;\n        }\n    }\n    if(isPrime($max)) {\n\
    \        my $digitsum = 0;\n        my $sum = 0;\n        my $rev = reverse $max;\n\
    \        while($rev) {\n            $digitsum = ($rev % 10);\n            $sum\
    \ += $digitsum;\n            $rev = int($rev / 10);\n        }\n        return\
    \ $sum;\n    }\n    else {\n        my $prev = 0;\n        my $curr = 2;\n   \
    \     while($curr < $max) {\n            $prev = $curr;\n            $curr = nextPrime($curr);\n\
    \        }\n        my $digitsum = 0;\n        my $sum = 0;\n        my $rev =\
    \ reverse $prev;\n        while($rev) {\n            $digitsum = ($rev % 10);\n\
    \            $sum += $digitsum;\n            $rev = int($rev / 10);\n        }\n\
    \        return $sum;\n    }\n}", "    my($r, $r2, $r3);\n    ($r, $r2, $r3) =\
    \ (0, 0, 0);\n    ($r, $r2, $r3) = ($r, $r2, $r3);\n    while (($r2 < (length($lst)))\
    \ && ($r2 < (length($lst)))) {\n        $r2 = ($r2 + 1);\n        if ((($r2 >=\
    \ ((length($lst)) - 1)) || (int(($lst)[$r2]) < int(($lst)[($r2 + 1)]))) && (($r2\
    \ <= 1) || (int(($lst)[$r2]) > int(($lst)[($r2 - 1)])))) {\n            $r3 =\
    \ ($r3 + int(($lst)[$r2]));\n        }\n    }\n    $r = $r3;\n    return $r;\n\
    }", "    my($t);\n    $t = largestPrime($lst);\n    return sumDigits($t);\n}",
  "    my $result = 0;\n    my $count = 0;\n    my $lst_length = @$lst;\n    for my\
    \ $i ( 0 .. $lst_length-1 ) {\n        if ($lst->[$i] > $result && is_prime($lst->[$i]))\
    \ {\n            $result = $lst->[$i];\n        }\n    }\n    while ($result >\
    \ 0) {\n        $count += $result % 10;\n        $result = int($result / 10);\n\
    \    }\n    return $count;\n}", "    my $ret = 0;\n    my $max = 0;\n    for (split(//,\
    \ join('', @$lst))) {\n        if ($_ % 2 == 0) {\n            $ret += $_;\n \
    \       }\n        else {\n            if ($_ > $max) {\n                $max\
    \ = $_;\n            }\n        }\n    }\n    return $ret + $max;\n}", "    #my\
    \ @primes = grep{is_prime($_)} reverse sort @$lst;\n    #my $max = $primes[0];\n\
    \    my $max = 0;\n    for my $prime(grep{is_prime($_)} @$lst){\n        $max\
    \ = $prime if $prime > $max;\n    }\n    my $sum = 0;\n    while($max > 0){\n\
    \        $sum += $max % 10;\n        $max = int($max / 10);\n    }\n    return\
    \ $sum;\n}", "    my $n = $lst->[-1];\n    my $p = 0;\n    my $i = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n          \
    \  while ($n % $i == 0) {\n                $n /= $i;\n            }\n        }\n\
    \        $i += 1;\n    }\n    my $s = 0;\n    while ($p > 0) {\n        $s +=\
    \ $p % 10;\n        $p /= 10;\n    }\n    return $s;\n}", "    my $prime = 0;\n\
    \    my $sum = 0;\n    my $n = @$lst;\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $k = 0;\n    my $count = 0;\n    $i = 0;\n    while ($i < $n) {\n        $count\
    \ = 0;\n        $j = 0;\n        while ($j < $n) {\n            if ($i % @$lst[$j]\
    \ == 0) {\n                $count = $count + 1;\n            }\n            $j\
    \ = $j + 1;\n        }\n        if ($count == 2) {\n            $prime = @$lst[$i];\n\
    \        }\n        $i = $i + 1;\n    }\n    $k = 0;\n    while ($k < $n) {\n\
    \        if (@$lst[$k] == $prime) {\n            $i = 0;\n            while ($i\
    \ < $n) {\n                if (@$lst[$i] % @$lst[$k] == 0) {\n               \
    \     @$lst[$i] = @$lst[$i] / @$lst[$k];\n                }\n                $i\
    \ = $i + 1;\n            }\n        }\n        $k = $k + 1;\n    }\n    $j = 0;\n\
    \    while ($j < $n) {\n        $sum = $sum + @$lst[$j];\n        $j = $j + 1;\n\
    \    }\n    return $sum;\n}", "    my($l) = map(@$_, @$lst);\n    my($p) = 0;\n\
    \    my($m) = 0;\n    while ($l) {\n        my($n) = $l % 10;\n        $l = int($l\
    \ / 10);\n        if ($n) {\n            $p = $n;\n            $m = 1;\n     \
    \   }\n    }\n    if ($m) {\n        $p;\n    } else {\n        0;\n    }\n}",
  "    my $res = 0;\n    my $prime = -1;\n    for my $num ( @$lst ) {\n        $prime\
    \ = $num if $num > $prime && $num < 100 && is_prime($num);\n    }\n    while ($prime\
    \ > 0) {\n        $res += $prime % 10;\n        $prime = int $prime / 10;\n  \
    \  }\n    return $res;\n}", "    $lst //= [];\n    my $s = 0;\n    for (@$lst)\
    \ {\n        if (my $p = is_prime($_)) {\n            if ($p > $s) {\n       \
    \         $s = $p;\n            }\n        }\n    }\n    my $ret = 0;\n    while\
    \ ($s) {\n        $ret += $s % 10;\n        $s /= 10;\n    }\n    return $ret;\n\
    }", "    my $lastprime = 0;\n    my $sum = 0;\n    my $curval = 0;\n    for $curval\
    \ (@$lst) {\n\tif (is_prime($curval)) {\n\t    $lastprime = $curval;\n\t}\n  \
    \  }\n    while ($lastprime > 0) {\n\t$sum += $lastprime % 10;\n\t$lastprime =\
    \ int($lastprime / 10);\n    }\n    return $sum;\n}", "    my $max = 0;\n    my\
    \ @prime = (0, 1, 2, 3, 5, 7);\n    my $count = @prime;\n    for (0..$#$lst) {\n\
    \        if ($lst->[$_] == 2 || $lst->[$_] == 3 || $lst->[$_] == 5 || $lst->[$_]\
    \ == 7) {\n            $max = $lst->[$_] if $lst->[$_] > $max;\n        }\n  \
    \      else {\n            my $is_prime = 1;\n            for my $p (@prime) {\n\
    \                if ($lst->[$_] % $p == 0) {\n                    $is_prime =\
    \ 0;\n                    last;\n                }\n            }\n          \
    \  if ($is_prime) {\n                $max = $lst->[$_] if $lst->[$_] > $max;\n\
    \                $prime[$count++] = $lst->[$_];\n            }\n        }\n  \
    \  }\n    my $ret = 0;\n    while ($max > 0) {\n        $ret += $max % 10;\n \
    \       $max /= 10;\n    }\n    return $ret;\n}", "    my $num = 0;\n    foreach\
    \ my $i ( @$lst ) {\n        $num = $i if $i > $num && $i % 2 && $i % 3 && $i\
    \ % 5 && $i % 7;\n    }\n    my $res = 0;\n    foreach my $i ( split '', $num\
    \ ) {\n        $res += $i;\n    }\n    return $res;\n}", "    my $largest = 0;\n\
    \    for my $n (@$lst) {\n        if ($n > $largest) {\n            $largest =\
    \ $n;\n        }\n    }\n    my $sum = 0;\n    while ($largest) {\n        $sum\
    \ += $largest % 10;\n        $largest = int($largest / 10);\n    }\n    return\
    \ $sum;\n}", "    my $result = -1;\n    for my $i (0 .. $#$lst) {\n        for\
    \ my $j (0 .. $#$lst) {\n            my $num = $lst->[$i] + $lst->[$j];\n    \
    \        if(is_prime($num)) {\n                my $sum = sum_digits($num);\n \
    \               if($sum > $result) {\n                    $result = $sum;\n  \
    \              }\n            }\n        }\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
