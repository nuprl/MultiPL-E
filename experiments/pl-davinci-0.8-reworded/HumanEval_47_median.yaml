name: HumanEval_47_median
language: pl
prompt: "# Return median of elements in the array l.\n# >>> median([3, 1, 2, 4, 5])\n\
  # 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n\
  \        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4,\
  \ 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my @l = sort {$a <=> $b} @$l;\n    if (@l % 2 == 0) {\n       \
    \ return ($l[@l/2-1] + $l[@l/2]) / 2;\n    } else {\n        return $l[(@l-1)/2];\n\
    \    }\n}", "    my $s = $#{$l}+1;\n    if ($s%2) {\n        return $l->[$s/2];\n\
    \    } else {\n        return ($l->[$s/2-1]+$l->[$s/2])/2;\n    }\n}", "    return\
    \ middle($l);\n}", "    my $n = int @$l;\n    return unless $n;\n    my $m = int(($n\
    \ + 1) / 2);\n    $l = [sort {$a <=> $b} @$l];\n    return $l->[$m - 1] if $n\
    \ % 2;\n    return ($l->[$m - 1] + $l->[$m]) / 2;\n}", "    my $len = @$l;\n \
    \   if ($len == 0) {\n        return undef;\n    }\n    my $m = int($len / 2);\n\
    \    if ($len % 2 == 0) {\n        my $m1 = $l->[$m];\n        my $m2 = $l->[$m-1];\n\
    \        return ($m1 + $m2) / 2;\n    } else {\n        return $l->[$m];\n   \
    \ }\n}", "    my $len = @$l;\n    my $m;\n    if($len % 2) {\n        $m = $l->[($len-1)/2];\n\
    \    } else {\n        $m = ($l->[$len/2] + $l->[$len/2-1])/2;\n    }\n    return\
    \ $m;\n}", "    my @l = sort {$a <=> $b} @$l;\n    my $mid = int(@l/2);\n    return\
    \ $l[$mid];\n}", "    return undef unless @$l;\n    my @s = sort {$a <=> $b} @$l;\n\
    \    my $idx = int(@s/2);\n    return @s % 2 ? $s[$idx] : ($s[$idx-1] + $s[$idx])/2;\n\
    }", "    my $len = scalar(@$l);\n    if ($len == 0) {\n        return undef;\n\
    \    } else {\n        my $c = $len / 2;\n        my @s = sort { $a <=> $b } @$l;\n\
    \        if ($len % 2) {\n            return $s[$c];\n        } else {\n     \
    \       return ($s[$c - 1] + $s[$c]) / 2;\n        }\n    }\n}", "    my($m);\n\
    \    @$l = sort {$a <=> $b} @$l;\n    if (scalar(@$l) % 2) {\n        $m = $l->[int(scalar(@$l)/2)];\n\
    \    } else {\n        $m = ($l->[scalar(@$l)/2] + $l->[scalar(@$l)/2 - 1])/2;\n\
    \    }\n    return $m;\n}", "    my @a = sort {$a <=> $b} @$l;\n    my $mid =\
    \ scalar(@a) / 2;\n    if (scalar(@a) % 2 == 0) {\n        return ($a[$mid] +\
    \ $a[$mid - 1]) / 2;\n    } else {\n        return $a[$mid];\n    }\n}", "   \
    \ my $n = @$l;\n    return undef if $n == 0;\n    return $l->[0] if $n == 1;\n\
    \    my $n1 = $n / 2;\n    my $n2 = $n1 - 1;\n    my $s = $l->[$n1] + $l->[$n2];\n\
    \    return $s / 2;\n}", "    my $s = median_sort($l);\n    my $len = scalar(@$s);\n\
    \    if ( $len % 2 == 0 ) {\n        return ($s->[$len/2-1] + $s->[$len/2]) /\
    \ 2;\n    } else {\n        return $s->[$len/2];\n    }\n}", "    my $s = @$l;\n\
    \    return 0 if $s == 0;\n    my $sum = 0;\n    foreach (@$l) {\n        $sum\
    \ += $_;\n    }\n    return $sum / $s;\n}", "    my @a = sort {$a <=> $b} @$l;\n\
    \    my $N = scalar(@a);\n    my $n = int($N/2);\n    return($N%2 ? $a[$n] : ($a[$n]+$a[$n-1])/2);\n\
    }", "    my $n = @$l;\n    my $median;\n    if ($n % 2 == 0) {\n        $median\
    \ = ($l->[($n/2) - 1] + $l->[$n/2]) / 2;\n    } else {\n        $median = $l->[($n\
    \ - 1) / 2];\n    }\n    return $median;\n}", "    my $len = @$l;\n    my @s =\
    \ sort {$a <=> $b} @$l;\n    my $m = $len / 2;\n    return ($len % 2) ? $s[$m]\
    \ : ($s[$m - 1] + $s[$m]) / 2;\n}", "    return 0 if(!$l || !@$l);\n    my @s\
    \ = sort {$a <=> $b} @$l;\n    my $len = scalar(@s);\n    if($len % 2 == 0) {\n\
    \        return ($s[$len/2-1] + $s[$len/2]) / 2;\n    } else {\n        return\
    \ $s[$len/2];\n    }\n}", "    if(defined($l) && ref($l) eq 'ARRAY') {\n     \
    \   my $size = @$l;\n        if($size == 0) {\n            return undef;\n   \
    \     }\n        elsif($size == 1) {\n            return $l->[0];\n        }\n\
    \        else {\n            my @sorted = sort {$a <=> $b} @$l;\n            if($size\
    \ % 2 == 0) {\n                my $i = int($size / 2);\n                return\
    \ ($sorted[$i] + $sorted[$i - 1]) / 2;\n            }\n            else {\n  \
    \              return $sorted[int($size / 2)];\n            }\n        }\n   \
    \ }\n    else {\n        return undef;\n    }\n}", "    my @a = sort {$a <=> $b}\
    \ @$l;\n    if (@a % 2) {\n        return $a[@a/2];\n    } else {\n        return\
    \ ($a[@a/2 - 1] + $a[@a/2]) / 2;\n    }\n}", "    my($n) = @$l;\n    my($count)\
    \ = 0;\n    my($sum) = 0;\n    my($med);\n    my($med2);\n    my($i);\n    my($j);\n\
    \    my($k);\n    my($tmp);", "    my($i,$size,$mid,$num,$result);\n    my($Median);\n\
    \    $size = @$l;\n    $mid = int($size/2);\n    if ($size % 2) {\n\t$Median =\
    \ $l->[$mid];\n    } else {\n\t$Median = ($l->[$mid-1] + $l->[$mid])/2;\n    }\n\
    \    return $Median;\n}", "    my $median;\n    my $len = scalar(@$l);\n    my\
    \ $middle = $len / 2;\n    my @sortlist = sort {$a <=> $b} @$l;\n    if ($len\
    \ % 2) {\n        $median = $sortlist[$middle];\n    } else {\n        $median\
    \ = ($sortlist[$middle - 1] + $sortlist[$middle]) / 2;\n    }\n    return $median;\n\
    }", "    my($i);\n    my($sum) = 0;\n    my($len) = scalar(@$l);\n    if ($len\
    \ == 0) {\n        return 0;\n    }\n    my(@sorted) = sort {$a <=> $b} @$l;\n\
    \    if ($len % 2 == 0) {\n        return ($sorted[$len/2] + $sorted[$len/2 -\
    \ 1]) / 2;\n    } else {\n        return $sorted[$len/2];\n    }\n}", "    my\
    \ $n = scalar(@$l);\n    return undef if $n == 0;\n    my $s = _sort($l);\n  \
    \  if ($n % 2 == 0) {\n        return 0.5 * ($s->[$n/2-1] + $s->[$n/2]);\n   \
    \ } else {\n        return $s->[($n-1)/2];\n    }\n}", "    my @sorted = sort\
    \ {$a <=> $b} @$l;\n    return ($sorted[@sorted/2] + $sorted[@sorted/2 - 1]) /\
    \ 2.0;\n}", "    my $a = quotemeta(@$l);\n    die \"invalid input\" if $a =~ /[^0-9+-]/;\n\
    \    my @s = sort {$a <=> $b} @$l;\n    my $n = scalar @s;\n    return ($s[$n/2-1]\
    \ + $s[$n/2])/2 if $n % 2 == 0;\n    return $s[$n/2];\n}", "    my @l = sort {$a\
    \ <=> $b} @$l;\n    return ($l[int(@l/2)-1] + $l[int(@l/2)])/2;\n}", "    return\
    \ sum(@$l) / @$l;\n}", "    my $n = scalar(@$l);\n    return 0 if $n == 0;\n \
    \   my $s = $n % 2 == 0 ? $n / 2 : ($n - 1) / 2;\n    my @sorted = sort { $a <=>\
    \ $b } @$l;\n    return $sorted[$s];\n}", "    my @a = sort {$a <=> $b} @$l;\n\
    \    my $mid = @a/2;\n    my $median = $a[$mid];\n    if (@a % 2 == 0) {\n   \
    \     $median = ($median + $a[$mid-1])/2;\n    }\n    return $median;\n}", " \
    \   my @sorted = sort {$a <=> $b} @$l;\n    my $middle = @sorted/2;\n    if (int(@sorted)\
    \ % 2) {\n        return $sorted[$middle];\n    } else {\n        return ($sorted[$middle-1]\
    \ + $sorted[$middle])/2;\n    }\n}", "    my @sorted = sort {$a <=> $b} @$l;\n\
    \    my $median = 0;\n    my $size = @sorted;\n    if ($size % 2 == 0) {\n   \
    \     my $pos1 = int($size / 2);\n        my $pos2 = $pos1 - 1;\n        $median\
    \ = ($sorted[$pos1] + $sorted[$pos2]) / 2;\n    } else {\n        my $pos = int($size\
    \ / 2);\n        $median = $sorted[$pos];\n    }\n    return $median;\n}", " \
    \   my $n = @$l;\n    return 0 if $n == 0;\n    my @s = sort { $a <=> $b } @$l;\n\
    \    return $s[int($n/2)] if $n % 2 == 1;\n    return ($s[$n/2] + $s[$n/2-1])/2;\n\
    }", "    return $l->[int(@$l / 2)];\n}", "    my $n = @$l;\n    my $m = $n / 2;\n\
    \    if ($n % 2 == 0) {\n        return ($l->[$m - 1] + $l->[$m]) / 2;\n    }\
    \ else {\n        return $l->[$m];\n    }\n}", "    my $n = scalar(@$l);\n   \
    \ if ($n == 0) {\n        return undef;\n    } elsif ($n % 2 == 1) {\n       \
    \ return $l->[$n / 2];\n    } else {\n        return ($l->[$n / 2 - 1] + $l->[$n\
    \ / 2]) / 2;\n    }\n}", "    my($n) = scalar(@$l);\n    my(@l) = sort {$a <=>\
    \ $b} @$l;\n    if ($n % 2 == 0) {\n        return ($l[$n/2-1] + $l[$n/2]) / 2;\n\
    \    } else {\n        return $l[$n/2];\n    }\n}", "    my $sortlist = sort {$a\
    \ <=> $b} @$l;\n    my $n = @$l;\n    if($n % 2) {\n        return $sortlist->[$n/2];\n\
    \    } else {\n        return ($sortlist->[$n/2-1] + $sortlist->[$n/2])/2;\n \
    \   }\n}", "    my @l = sort {$a <=> $b} @$l;\n    if ($#l % 2 == 0) {\n     \
    \   return ($l[$#l/2] + $l[$#l/2+1])/2;\n    } else {\n        return $l[$#l/2];\n\
    \    }\n}", "    my($n, $k);\n    my(@a);", "    my $n = scalar(@$l);\n    my\
    \ $l2 = [sort {$a <=> $b} @$l];\n    return $n == 0 ? undef : $n % 2 == 1 ? $l2->[$n/2]\
    \ : ($l2->[$n/2-1] + $l2->[$n/2])/2;\n}", "    my($len) = scalar(@$l);\n    my($mid)\
    \ = int($len / 2);\n    if ($len % 2 == 0) {\n        return (($l->[$mid - 1]\
    \ + $l->[$mid]) / 2);\n    } else {\n        return $l->[$mid];\n    }\n}", " \
    \   return (sort {$a <=> $b} @$l)[int(@$l/2)];\n}", "    my($n) = @$l;\n    if(($n\
    \ % 2) == 1) {\n        return @$l[($n+1)/2-1];\n    } else {\n        return\
    \ (@$l[$n/2-1] + @$l[$n/2])/2;\n    }\n}", "    my $n = scalar(@$l);\n    if ($n\
    \ == 0) {\n        die \"Error: median of empty list\";\n    }\n    my $s = sort\
    \ {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n        return ($s->[$n/2] + $s->[$n/2\
    \ - 1]) / 2;\n    } else {\n        return $s->[$n/2];\n    }\n}", "    my @sorted\
    \ = sort {$a <=> $b} @$l;\n    my $n = @sorted;\n    if ($n % 2 == 0) {\n    \
    \    return ($sorted[$n/2 - 1] + $sorted[$n/2]) / 2;\n    } else {\n        return\
    \ $sorted[$n/2];\n    }\n}", "    my $i = int($#{$l}/2);\n    if ($#{$l} % 2)\
    \ {\n        return $l->[$i];\n    } else {\n        return ($l->[$i] + $l->[$i+1])/2;\n\
    \    }\n}", "    my $len = @$l;\n    my @sorted = sort {$a <=> $b} @$l;\n    if\
    \ ($len % 2) {\n        return $sorted[int($len/2)];\n    } else {\n        return\
    \ ($sorted[int($len/2)-1] + $sorted[int($len/2)]) / 2;\n    }\n}", "    my $tmp\
    \ = (sort {$a <=> $b} @$l)[(int(@$l)/2)];\n    return (wantarray ? ($tmp, ($tmp\
    \ * 2)) : $tmp);\n}", "    my @arr = sort {$a <=> $b} @$l;\n    my $mid = int(scalar(@arr)\
    \ / 2);\n    if (scalar(@arr) % 2 == 0) {\n        return ($arr[$mid - 1] + $arr[$mid])\
    \ / 2;\n    } else {\n        return $arr[$mid];\n    }\n}", "    my @a = sort\
    \ @$l;\n    return ($a[@a/2] + $a[@a/2-1])/2.0 if @a % 2 == 0;\n    return $a[@a/2];\n\
    }", "    my $size = @$l;\n    my $m = $size/2;\n    $size % 2 == 0 ? ($l->[$m-1]\
    \ + $l->[$m])/2 : $l->[$m];\n}", "    return $l->[int($#$l/2)];\n}", "    my @sorted\
    \ = sort {$a <=> $b} @$l;\n    my $median;\n    if (@sorted % 2) {\n        $median\
    \ = $sorted[@sorted / 2];\n    } else {\n        $median = ($sorted[@sorted /\
    \ 2] + $sorted[@sorted / 2 - 1]) / 2;\n    }\n    return $median;\n}", "    my\
    \ $median = undef;\n    my $len = @$l;\n    my $mid = int($len/2);\n    if ($len\
    \ % 2 == 0) {\n        $median = ($l->[$mid-1] + $l->[$mid])/2;\n    } else {\n\
    \        $median = $l->[$mid];\n    }\n    return $median;\n}", "    my $median\
    \ = 0;\n    my $len = @$l;\n    my $mid = $len/2;\n    @$l = sort {$a <=> $b}\
    \ @$l;\n    if ($len % 2 == 0) {\n        $median = ($l->[$mid-1] + $l->[$mid])/2;\n\
    \    } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n}",
  "    my @l = sort {$a <=> $b} @$l;\n    my $len = scalar(@l);\n    if ($len % 2\
    \ == 0) {\n        return ($l[$len/2 - 1] + $l[$len/2]) / 2;\n    } else {\n \
    \       return $l[$len/2];\n    }\n}", "    my $size = scalar(@$l);\n    if ($size\
    \ == 0) {\n        return 0;\n    }\n    my $sortl = [sort {$a <=> $b} @$l];\n\
    \    my $median;\n    if ($size % 2 == 0) {\n        $median = ($sortl->[$size/2-1]\
    \ + $sortl->[$size/2]) / 2;\n    } else {\n        $median = $sortl->[int($size/2)];\n\
    \    }\n    return $median;\n}", "    if (scalar(@$l) % 2 == 0) {\n        my\
    \ $k = @$l / 2;\n        return ($l->[$k-1] + $l->[$k]) / 2;\n    } else {\n \
    \       return $l->[@$l / 2];\n    }\n}", "    my @sorted = sort {$a <=> $b} @$l;\n\
    \    my $middle = scalar(@sorted) / 2;\n    if(scalar(@sorted) % 2 == 0) {\n \
    \       return ($sorted[$middle] + $sorted[$middle - 1]) / 2;\n    } else {\n\
    \        return $sorted[$middle];\n    }\n}", "    my $median = 0;\n    my $n\
    \ = @$l;\n    my $m = $n/2;\n    my @sortList = sort {$a <=> $b} @$l;\n    if\
    \ ($n % 2) {\n\t$median = $sortList[$m];\n    } else {\n\t$median = ($sortList[$m-1]\
    \ + $sortList[$m])/2;\n    }\n    return $median;\n}", "    my($middle) = int(@$l\
    \ / 2);\n    return ($l->[$middle] + $l->[@$l-$middle-1]) / 2;\n}", "    my $len\
    \ = scalar(@$l);\n    if ($len == 0) {\n        return 0;\n    }\n    if ($len\
    \ % 2 == 0) {\n        return ($l->[$len/2] + $l->[$len/2 - 1]) / 2;\n    } else\
    \ {\n        return $l->[$len/2];\n    }\n}", "    my $len = scalar(@$l);\n  \
    \  if ($len % 2 == 0) {\n        return ($l->[$len/2] + $l->[$len/2 - 1]) / 2;\n\
    \    } else {\n        return $l->[$len/2];\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $mid = int($len/2);\n    my $v;\n    if ($len%2 == 0) {\n        $v =\
    \ ($l->[$mid] + $l->[$mid-1])/2;\n    } else {\n        $v = $l->[$mid];\n   \
    \ }\n    return $v;\n}", "    my @m = sort {$a <=> $b} @$l;\n    my $m;\n    if\
    \ (scalar(@m) % 2 == 0) {\n        $m = ($m[scalar(@m)/2-1] + $m[scalar(@m)/2])\
    \ / 2;\n    } else {\n        $m = $m[scalar(@m)/2];\n    }\n    return $m;\n}",
  "    my $count = scalar(@$l);\n    my $mid = int($count / 2);\n    my $median;\n\
    \    if ($count % 2 == 0) {\n        $median = ($l->[$mid - 1] + $l->[$mid]) /\
    \ 2;\n    } else {\n        $median = $l->[$mid];\n    }\n    return $median;\n\
    }", "    my $num = @$l;\n    return undef if $num < 1;\n    my @sorted = sort\
    \ {$a <=> $b} @$l;\n    if ($num%2) {\n        return $sorted[($num-1)/2];\n \
    \   } else {\n        return ($sorted[$num/2-1]+$sorted[$num/2])/2;\n    }\n}",
  "    my $n = @$l;\n    if ($n % 2 == 0) {\n        my $x = $l->[$n/2];\n       \
    \ my $y = $l->[$n/2-1];\n        my $r = ($x + $y) / 2;\n        return $r;\n\
    \    } else {\n        return $l->[$n/2];\n    }\n}", "    return undef unless\
    \ @$l;\n    my $mid = int(@$l / 2);\n    if (@$l % 2) {\n        return $l->[$mid];\n\
    \    } else {\n        return ($l->[$mid - 1] + $l->[$mid]) / 2;\n    }\n}", " \
    \   my $median;\n    my $len = scalar(@$l);\n    if ($len % 2 == 0) {\n      \
    \  $median = (@$l[($len / 2) - 1] + @$l[$len / 2]) / 2;\n    } else {\n      \
    \  $median = @$l[($len - 1) / 2];\n    }\n    return $median;\n}", "    my @temp\
    \ = sort {$a <=> $b} @$l;\n    if (scalar(@temp) % 2 == 0) {\n        return ($temp[$#temp/2]\
    \ + $temp[$#temp/2 + 1]) / 2;\n    } else {\n        return $temp[$#temp/2];\n\
    \    }\n}", "    my $len = @$l;\n    my $lo = min(@$l);\n    my $hi = max(@$l);\n\
    \    if ($len % 2) {\n        return max(grep {$_ >= $lo && $_ <= $hi} @$l);\n\
    \    } else {\n        my $i = $len / 2;\n        my $j = $i - 1;\n        return\
    \ ($l->[$i] + $l->[$j]) / 2;\n    }\n}", "    @$l = sort {$a <=> $b} @$l;\n  \
    \  my $n = @$l;\n    if ($n % 2 == 0) {\n        my $a = $l->[$n/2 - 1];\n   \
    \     my $b = $l->[$n/2];\n        return ($a + $b) / 2;\n    } else {\n     \
    \   return $l->[$n/2];\n    }\n}", "    my $size = @$l;\n    if($size % 2 == 0)\
    \ {\n        return ($l->[$size/2] + $l->[$size/2 - 1]) / 2;\n    } else {\n \
    \       return $l->[$size/2];\n    }\n}", "    my $sorted = quicksort($l);\n \
    \   #print Dumper($sorted);\n    my $len = @$sorted;\n    #print Dumper($len);\n\
    \    my $mid = int($len/2);\n    #print Dumper($mid);\n    if ($len % 2 == 0)\
    \ {\n        return ($sorted->[$mid] + $sorted->[$mid-1])/2;\n    } else {\n \
    \       return $sorted->[$mid];\n    }\n}", "    my @sorted = sort {$a <=> $b}\
    \ @$l;\n    if (@sorted % 2 == 0) {\n        return ($sorted[@sorted/2 - 1] +\
    \ $sorted[@sorted/2]) / 2;\n    } else {\n        return $sorted[@sorted/2];\n\
    \    }\n}", "    my @a = sort {$a <=> $b} @$l;\n    my $n = @a;\n    return ($a[int($n/2)]\
    \ + $a[int($n/2)-1])/2.0 if $n%2 == 0;\n    return $a[int($n/2)];\n}", "    my\
    \ @l = sort {$a <=> $b} @$l;\n    my $middle = int(@l / 2);\n    if (@l % 2) {\n\
    \        return $l[$middle];\n    } else {\n        return ($l[$middle-1] + $l[$middle])\
    \ / 2;\n    }\n}", "    if (@$l % 2 == 0) {\n        return ((sort {$a <=> $b}\
    \ @$l)[@$l/2-1] + (sort {$a <=> $b} @$l)[@$l/2])/2;\n    } else {\n        return\
    \ (sort {$a <=> $b} @$l)[@$l/2];\n    }\n}", "    my @sorted = sort {$a <=> $b}\
    \ @$l;\n    my $n = scalar(@sorted);\n    my $median;\n    if($n % 2 == 0) {\n\
    \        $median = ($sorted[$n/2 - 1] + $sorted[$n/2]) / 2;\n    } else {\n  \
    \      $median = $sorted[$n/2];\n    }\n    return $median;\n}", "    my $len\
    \ = scalar(@$l);\n    my $half = int($len / 2);\n    my $median;\n    if ($len\
    \ % 2) {\n        $median = $l->[$half];\n    } else {\n        $median = ($l->[$half]\
    \ + $l->[$half - 1]) / 2;\n    }\n    return $median;\n}", "    my $n = @$l;\n\
    \    my @l = sort {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n        return ($l[$n/2\
    \ - 1] + $l[$n/2]) / 2;\n    } else {\n        return $l[$n/2];\n    }\n}", " \
    \   my @sorted = sort {$a <=> $b} @$l;\n    return ($sorted[$#sorted / 2] + $sorted[@sorted\
    \ / 2]) / 2;\n}", "    my @l = sort {$a <=> $b} @$l;\n    if (int(@l) % 2 == 0)\
    \ {\n        return ($l[int(@l)/2] + $l[int(@l)/2 - 1]) / 2;\n    } else {\n \
    \       return $l[int(@l)/2];\n    }\n}", "    my $len = scalar(@$l);\n    return\
    \ $len % 2 ? $l->[$len/2] : ($l->[$len/2] + $l->[$len/2-1])/2;\n}", "    my @l\
    \ = sort {$a <=> $b} @$l;\n    my $n = @l;\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n/2-1] + $l[$n/2]) / 2;\n    } else {\n        return $l[$n/2];\n    }\n\
    }", "    my $median;\n    @$l = sort {$a <=> $b} @$l;\n    my $len = @$l;\n  \
    \  if($len % 2 == 0) {\n        $median = $l->[$len/2 - 1] + $l->[$len/2];\n \
    \       $median /= 2;\n    } else {\n        $median = $l->[int($len/2)];\n  \
    \  }\n    return $median;\n}", "    my($sorted) = [sort @$l];\n    my($n) = @$sorted;\n\
    \    if ($n % 2 == 0) {\n        # even number of elements.\n        return ($sorted->[$n/2]\
    \ + $sorted->[$n/2 - 1]) / 2;\n    } else {\n        # odd number of elements.\n\
    \        return $sorted->[$n/2];\n    }\n}", "    my $sz = scalar(@$l);\n    return\
    \ undef if $sz == 0;\n    my $m = $sz / 2;\n    if ($sz % 2 == 0) {\n        return\
    \ ($l->[$m] + $l->[$m-1]) / 2;\n    } else {\n        return $l->[$m];\n    }\n\
    }", "    my $len = @$l;\n    my $m = int($len / 2);\n    if($len % 2) {\n    \
    \    return $l->[$m];\n    } else {\n        return ($l->[$m - 1] + $l->[$m])\
    \ / 2;\n    }\n}", "    my @list = sort {$a <=> $b} @$l;\n    my $length = @list;\n\
    \    my $mid;\n    if($length % 2 == 0) {\n        $mid = ($list[$length/2 - 1]\
    \ + $list[$length/2]) / 2;\n    } else {\n        $mid = $list[$length/2];\n \
    \   }\n    return $mid;\n}", "    my $n = @$l;\n    my $m = $n/2;\n    if($n %\
    \ 2 == 0) {\n        return ($l->[$m] + $l->[$m-1])/2;\n    } else {\n       \
    \ return $l->[$m];\n    }\n}", "    $l = &quickSort($l);\n    my $halflen = (scalar(@$l)-1)/2;\n\
    \    return ($$l[$halflen] + $$l[$halflen+1])/2;\n}", "    my $n = $#$l;\n   \
    \ return undef if($n < 0);\n    if($n == 0) {\n        return $l->[0];\n    }\n\
    \    my @s = sort {$a <=> $b} @$l;\n    if($n % 2) {\n        return $s[$n/2];\n\
    \    } else {\n        return ($s[$n/2] + $s[$n/2-1])/2;\n    }\n}", "    my @arr\
    \ = sort @$l;\n    my $num = scalar @arr;\n    if($num % 2) {\n        return\
    \ $arr[$num/2];\n    } else {\n        return ($arr[$num/2 - 1] + $arr[$num/2])\
    \ / 2;\n    }\n}", "    my($n) = @$l;\n    my(@l) = sort {$a <=> $b} @$l;\n  \
    \  if (int($n/2) == $n/2) {\n\treturn ($l[$n/2-1] + $l[$n/2])/2;\n    } else {\n\
    \treturn $l[int($n/2)];\n    }\n}", "    $l = sortn($l);\n    my $m = int(@$l\
    \ / 2);\n    if(@$l % 2 == 0) {\n        return ($l->[$m - 1] + $l->[$m]) / 2;\n\
    \    } else {\n        return $l->[$m];\n    }\n}", "    my $count = @$l;\n  \
    \  return undef if $count == 0;\n    my $mid = int($count / 2);\n    my @sorted\
    \ = sort { $a <=> $b } @$l;\n    if ($count % 2 == 0) {\n        return ($sorted[$mid]\
    \ + $sorted[$mid - 1]) / 2;\n    } else {\n        return $sorted[$mid];\n   \
    \ }\n}", "    return -1 if !@$l;\n    my @sorted = sort {$a <=> $b} @$l;\n   \
    \ return (@sorted % 2 == 0) ? (@sorted[@sorted/2 - 1, @sorted/2])[1] : $sorted[@sorted/2];\n\
    }", "    return $l->[ @$l / 2 ] if @$l % 2;\n    return ($l->[(@$l - 1) / 2] +\
    \ $l->[(@$l + 1) / 2]) / 2;\n}", "    my($n) = @$l;\n    my($i, $min, $max, $median);",
  "    my $n = @$l;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n      \
    \  return $s[int($n/2)];\n    } else {\n        return ($s[$n/2] + $s[$n/2 - 1])\
    \ / 2;\n    }\n}", "    my $med = 0;\n    my $sum = 0;\n    my $cnt = 0;\n   \
    \ my $m;\n    my $n;\n    my $i;\n    my $j;\n    my $v;\n    $m = @$l;\n    $n\
    \ = 0;\n    for ($i = 0; $i < $m; $i++) {\n\t$v = $l->[$i];\n\tfor ($j = $n; $j\
    \ > 0 && $l->[$j-1] > $v; $j--) {\n\t    $l->[$j] = $l->[$j-1];\n\t}\n\t$l->[$j]\
    \ = $v;\n\t$n++;\n\tif ($n % 2 == 1) {\n\t    $med = $l->[$n/2];\n\t}\n\telse\
    \ {\n\t    $med = ($l->[$n/2-1] + $l->[$n/2]) / 2;\n\t}\n\t$sum += $med;\n\t$cnt++;\n\
    \    }\n    return $sum / $cnt;\n}", "    my $len = @$l;\n    my $n = int($len/2);\n\
    \    if ($len % 2) {\n        return @$l[$n];\n    } else {\n        return (@$l[$n-1]\
    \ + @$l[$n])/2;\n    }\n}", "    my $median = 0;\n    my $length = $#{$l} + 1;\n\
    \    if ($length % 2) {\n        $median = $l->[($length - 1) / 2];\n    } else\
    \ {\n        $median = ($l->[($length / 2) - 1] + $l->[$length / 2]) / 2;\n  \
    \  }\n    return $median;\n}", "    my $s = scalar(@$l);\n    return undef if\
    \ $s == 0;\n    my $m = 0;\n    if ($s % 2 == 0) {\n        my $u = int($s / 2);\n\
    \        $m = $l->[$u - 1] + $l->[$u];\n        $m /= 2;\n    } else {\n     \
    \   $m = $l->[int($s / 2)];\n    }\n    return $m;\n}", '    my($i, $sorted_l,
    $median);', "    my $len = @$l;\n    my @sorted = sort {$a <=> $b} @$l;\n    if\
    \ ($len % 2) {\n        return $sorted[int($len/2)];\n    } else {\n        return\
    \ ($sorted[int($len/2)-1] + $sorted[int($len/2)]) / 2;\n    }\n}", "    my $length\
    \ = scalar(@$l);\n    my $index = $length / 2;\n    my $ordered = [sort {$a <=>\
    \ $b} @$l];\n    if ($length % 2) {\n        return $ordered->[$index];\n    }\
    \ else {\n        return ($ordered->[$index - 1] + $ordered->[$index]) / 2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $med = $len / 2;\n    my $res;\n\
    \    if ($len % 2 == 0) {\n        $res = ($l->[$med] + $l->[$med-1]) / 2;\n \
    \   } else {\n        $res = $l->[$med];\n    }\n    return $res;\n}", "    my\
    \ $mid = int(@$l / 2);\n    return @$l % 2 ? $l->[$mid] : ($l->[$mid] + $l->[$mid\
    \ - 1]) / 2;\n}", "    my @l = sort {$a <=> $b} @$l;\n    my $len = scalar(@l);\n\
    \    if($len%2 == 0) {\n        return ($l[$len/2 - 1] + $l[$len/2])/2;\n    }\
    \ else {\n        return $l[$len/2];\n    }\n}", "    my $cnt = @$l;\n    my $t\
    \ = $cnt % 2;\n    my $mid = floor($cnt / 2);\n    my $median;\n    if ($t) {\n\
    \        $median = $l->[$mid];\n    } else {\n        $median = ($l->[$mid - 1]\
    \ + $l->[$mid]) / 2;\n    }\n    return $median;\n}", "    my @sorted = sort {$a\
    \ <=> $b} @$l;\n    return ($sorted[$#sorted / 2] + $sorted[@sorted / 2]) / 2;\n\
    }", "    my $n = @$l;\n    return @$l[int($n/2)] if $n%2;\n    return (@$l[$n/2-1]\
    \ + @$l[$n/2])/2;\n}", "    my $n = scalar(@$l);\n    my @sorted = sort {$a <=>\
    \ $b} @$l;\n    my $half = int($n/2);\n    if ($n % 2) {\n        return $sorted[$half];\n\
    \    } else {\n        return ($sorted[$half] + $sorted[$half-1])/2;\n    }\n}",
  "    return 0 unless $l;\n    my @l = sort {$a <=> $b} @$l;\n    if (@l % 2) {\n\
    \        return $l[int(@l/2)];\n    } else {\n        return ($l[@l/2] + $l[@l/2-1])/2;\n\
    \    }\n}", "    my @l = sort {$a <=> $b} @$l;\n    my $n = @l;\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n/2-1] + $l[$n/2]) / 2;\n    } else {\n     \
    \   return $l[$n/2];\n    }\n}", "    my @sorted = sort {$a <=> $b} @$l;\n   \
    \ my $N = @sorted;\n    if ($N % 2 == 0) {\n        return ($sorted[$N/2 - 1]\
    \ + $sorted[$N/2]) / 2;\n    } else {\n        return $sorted[$N/2];\n    }\n}",
  "    my($sorted) = [sort {$a <=> $b} @$l];\n    my($len) = scalar(@$sorted);\n \
    \   if($len % 2 == 0) {\n        my($x) = $sorted->[$len / 2];\n        my($y)\
    \ = $sorted->[$len / 2 - 1];\n        return ($x + $y) / 2;\n    } else {\n  \
    \      return $sorted->[$len / 2];\n    }\n}", "    my $n = @$l;\n    if ($n %\
    \ 2 == 0) {\n        return ($l->[$n/2-1] + $l->[$n/2]) / 2;\n    } else {\n \
    \       return $l->[$n/2];\n    }\n}", "    @$l = sort {$a <=> $b} @$l;\n    if(scalar(@$l)\
    \ % 2) {\n        return $l->[int(scalar(@$l)/2)];\n    } else {\n        return\
    \ ($l->[int(scalar(@$l)/2) - 1] + $l->[int(scalar(@$l)/2)]) / 2;\n    }\n}", " \
    \   @$l = sort {$a <=> $b} @$l;\n    my $n = scalar(@$l);\n    my $n2 = int($n/2);\n\
    \    if ( $n % 2 == 0 ) {\n        return ($l->[$n2 - 1] + $l->[$n2]) / 2;\n \
    \   } else {\n        return $l->[$n2];\n    }\n}", "    my $n = @$l;\n    return\
    \ undef if ($n == 0);\n    @$l = sort {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n\
    \        return ($l->[$n/2] + $l->[$n/2 - 1]) / 2;\n    } else {\n        return\
    \ $l->[$n/2];\n    }\n}", "    my @x = sort {$a <=> $b} @$l;\n    my $i = int(@x\
    \ / 2);\n    return (@x % 2) ? $x[$i] : ($x[$i-1] + $x[$i]) / 2;\n}", "    my($sorted)\
    \ = $l->clone->sort;\n    my($middle) = int(scalar(@$sorted) / 2);\n    if (scalar(@$sorted)\
    \ % 2) {\n        return $sorted->[$middle];\n    } else {\n        return ($sorted->[$middle]\
    \ + $sorted->[$middle - 1]) / 2;\n    }\n}", "    my $len = scalar(@$l);\n   \
    \ return unless $len;\n    my $pivot = medianPivot($l);\n    my @smaller = grep\
    \ {$_ < $pivot} @$l;\n    my @larger = grep {$_ > $pivot} @$l;\n    if (scalar(@smaller)\
    \ == $len/2 - 1) {\n        return $pivot;\n    } elsif (scalar(@smaller) < $len/2\
    \ - 1) {\n        return median(\\@larger);\n    } else {\n        return median(\\\
    @smaller);\n    }\n}", "    my $len = @$l;\n    if ($len % 2 == 0) {\n       \
    \ return ($l->[int($len/2)-1] + $l->[int($len/2)]) / 2;\n    } else {\n      \
    \  return $l->[int($len/2)];\n    }\n}", "    my $mid = int(@$l/2);\n    if (@$l\
    \ % 2 == 0) {\n        ($l->[$mid-1] + $l->[$mid]) / 2;\n    } else {\n      \
    \  $l->[$mid];\n    }\n}", "    @$l = sort {$a <=> $b} @$l;\n    my $n = @$l;\n\
    \    if ($n % 2 == 0) {\n        return ($l->[$n/2] + $l->[$n/2-1]) / 2;\n   \
    \ } else {\n        return $l->[$n/2];\n    }\n}", "    my($result);\n    my(@sorted)\
    \ = sort {$a <=> $b} @$l;\n    my($n) = @sorted;\n    if($n % 2) {\n\t$result\
    \ = $sorted[($n-1)/2];\n    } else {\n\t$result = ($sorted[$n/2-1] + $sorted[$n/2])/2;\n\
    \    }\n    return $result;\n}", "    @$l = sort {$a <=> $b} @$l;\n    if (scalar(@$l)\
    \ % 2 == 0) {\n        return ($l->[int(scalar(@$l)/2)] + $l->[int(scalar(@$l)/2)-1])/2;\n\
    \    } else {\n        return $l->[int(scalar(@$l)/2)];\n    }\n}", "    @$l =\
    \ sort {$a <=> $b} @$l;\n    if (@$l % 2) {\n        return $l->[@$l / 2];\n \
    \   } else {\n        return ($l->[@$l / 2 - 1] + $l->[@$l / 2]) / 2;\n    }\n\
    }", "    my @l = sort {$a <=> $b} @$l;\n    my $mid = int(@l/2);\n    if (2*$mid\
    \ == @l) {\n        return ($l[$mid]+$l[$mid-1])/2;\n    } else {\n        return\
    \ $l[$mid];\n    }\n}", "    my $ll = scalar(@$l);\n    return undef if $ll ==\
    \ 0;\n    my $l2 = sorted($l);\n    my $mid = int($ll / 2);\n    if ($ll % 2 ==\
    \ 0) {\n        return ($l2->[$mid] + $l2->[$mid-1]) / 2;\n    } else {\n    \
    \    return $l2->[$mid];\n    }\n}", "    if (scalar(@$l) == 0) {\n        die\
    \ \"Empty array\";\n    }\n    my @sorted = sort {$a <=> $b} @$l;\n    if (scalar(@sorted)\
    \ % 2 == 0) {\n        return ($sorted[(scalar(@sorted)/2) - 1] + $sorted[scalar(@sorted)/2])\
    \ / 2;\n    } else {\n        return $sorted[(scalar(@sorted)-1)/2];\n    }\n}",
  "    my @l = sort {$a <=> $b} @$l;\n    my $len = @l;\n    if ($len % 2 == 0) {\n\
    \        return ($l[$len/2 - 1] + $l[$len/2]) / 2;\n    } else {\n        return\
    \ $l[$len/2];\n    }\n}", "    my $sorted = [sort {$a <=> $b} @$l];\n    my $len\
    \ = scalar(@$sorted);\n    if ($len % 2 == 0) {\n        my $a = $sorted->[int($len\
    \ / 2) - 1];\n        my $b = $sorted->[int($len / 2)];\n        return ($a +\
    \ $b) / 2;\n    } else {\n        return $sorted->[int($len / 2)];\n    }\n}",
  "    return ($l->[@$l/2] + $l->[@$l/2-1])/2.0 if @$l % 2 == 0;\n    return $l->[@$l/2];\n\
    }", "    my $n = @$l;\n    my $m = @$l / 2;\n    if (int($m) == $m) {\n      \
    \  return ((sort {$a <=> $b} @$l)[$m-1] + (sort {$a <=> $b} @$l)[$m]) / 2;\n \
    \   } else {\n        return (sort {$a <=> $b} @$l)[int($m)];\n    }\n}", "  \
    \  my $n = scalar(@$l);\n    return 0 if $n == 0;\n    return $l->[0] if $n ==\
    \ 1;\n    my @t = sort {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n        return\
    \ ($t[int($n/2)-1] + $t[int($n/2)]) / 2;\n    } else {\n        return $t[int($n/2)];\n\
    \    }\n}", "    my $len = scalar(@$l);\n    if($len == 0) {\n        return undef;\n\
    \    }\n    my $m = $len/2;\n    if($len % 2 == 0) {\n        return ($l->[$m]\
    \ + $l->[$m-1])/2;\n    } else {\n        return $l->[$m];\n    }\n}", "    my\
    \ @sorted = sort {$a <=> $b} @$l;\n    if (@sorted % 2 == 0) {\n        my $mid\
    \ = @sorted / 2;\n        return ($sorted[$mid - 1] + $sorted[$mid]) / 2;\n  \
    \  } else {\n        return $sorted[@sorted / 2];\n    }\n}", "    my $n = @$l;\n\
    \    return $n % 2 == 0\n        ? ($l->[($n/2) - 1] + $l->[$n/2]) / 2\n     \
    \   : $l->[($n-1)/2];\n}", "    my $median = 0;\n    my $len = scalar(@$l);\n\
    \    if ($len % 2 == 0) {\n        $median = ($l->[$len/2] + $l->[$len/2-1])/2;\n\
    \    } else {\n        $median = $l->[$len/2];\n    }\n    return $median;\n}",
  "    #print \"Median of \" . Dumper($l) . \"\\n\";\n    my $s = @$l;\n    #print\
    \ \"Size $s\\n\";\n    if ($s == 0) {\n        return;\n    }\n    my $m = int($s\
    \ / 2);\n    if ($s % 2 == 0) {\n        #print \"Even sized array: $m and \"\
    \ . ($m - 1) . \"\\n\";\n        # Even sized array\n        return ($l->[$m]\
    \ + $l->[$m - 1]) / 2;\n    } else {\n        #print \"Odd sized array: $m\\n\"\
    ;\n        # Odd sized array\n        return $l->[$m];\n    }\n}", "    my $median;\n\
    \    my $len = scalar(@$l);\n    if ($len % 2) {\n        my $mid = int($len /\
    \ 2);\n        $median = $l->[$mid];\n    } else {\n        my $left = $l->[int($len\
    \ / 2) - 1];\n        my $right = $l->[int($len / 2)];\n        $median = ($left\
    \ + $right) / 2;\n    }\n    return $median;\n}", "    my $ret = 0;\n    my $n\
    \ = @$l;\n    if ($n == 0) {\n        return undef;\n    }\n    if ($n % 2 ==\
    \ 0) {\n        # even number of elements\n        $ret = (sort {$a <=> $b} @$l)[$n/2\
    \ - 1];\n        $ret += (sort {$a <=> $b} @$l)[$n/2];\n        $ret /= 2;\n \
    \   } else {\n        # odd number of elements\n        $ret = (sort {$a <=> $b}\
    \ @$l)[($n-1)/2];\n    }\n    return $ret;\n}", "    my @sorted = sort {$a <=>\
    \ $b} @$l;\n    return scalar(@sorted) % 2 ? $sorted[($#sorted - 1) / 2] : ($sorted[@sorted\
    \ / 2] + $sorted[@sorted / 2 - 1]) / 2;\n}", "    my $n = @$l;\n    my $m = $n\
    \ / 2;\n    if($n % 2 == 0) {\n        return ($l->[$m - 1] + $l->[$m]) / 2;\n\
    \    } else {\n        return $l->[$m];\n    }\n}", "    @_ = sort {$a <=> $b}\
    \ @$l;\n    my $mid = int @_ / 2;\n    return @_ % 2 ? $_[$mid] : ($_[$mid-1]\
    \ + $_[$mid]) / 2;\n}", "    my @sorted = sort {$a <=> $b} @$l;\n    my $n = int(@sorted);\n\
    \    if( $n % 2 ) {\n        return $sorted[int($n/2)];\n    } else {\n      \
    \  return ($sorted[$n/2-1] + $sorted[$n/2])/2;\n    }\n}", "    my $n = $#$l +\
    \ 1;\n    my $h = $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n    return $n\
    \ % 2 ? $s[$h] : ($s[$h-1] + $s[$h]) / 2;\n}", "    my $n = scalar(@$l);\n   \
    \ return undef if ($n == 0);\n    my @s = sort {$a <=> $b} @$l;\n    my $m = $n/2;\n\
    \    if ($n % 2 == 0) {\n        return ($s[$m-1] + $s[$m])/2;\n    } else {\n\
    \        return $s[$m];\n    }\n}", "    $l = [ sort { $a <=> $b } @$l ];\n  \
    \  my $len = scalar @$l;\n    if ($len % 2) {\n        return $l->[$len / 2];\n\
    \    } else {\n        return ($l->[$len / 2 - 1] + $l->[$len / 2]) / 2;\n   \
    \ }\n}", "    return median_of_sorted_list(sort {$a <=> $b} @$l);\n}", "    if(\
    \ not defined $l ) {\n        return;\n    }\n    @$l = sort { $a <=> $b } @$l;\n\
    \    my $len = @$l;\n    if( $len % 2 == 0 ) {\n        return (@$l[int($len/2)-1]\
    \ + @$l[int($len/2)]) / 2;\n    } else {\n        return @$l[int($len/2)];\n \
    \   }\n}", "    @$l = sort {$a <=> $b} @$l;\n    my $len = @$l;\n    if ($len\
    \ % 2 == 0) {\n        return ($l->[$len/2 - 1] + $l->[$len/2]) / 2;\n    } else\
    \ {\n        return $l->[int($len/2)];\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $median = &mean($l);\n    $median = @$l[int(($len-1)/2)] if $len % 2;\n\
    \    return $median;\n}", "    return $l->[floor(scalar(@$l)/2)];\n}", "    my\
    \ $size = @$l;\n    if ($size == 0) {\n        return 0;\n    }\n    my $m = @$l\
    \ / 2;\n    @$l = sort { $a <=> $b } @$l;\n    if ($size % 2 == 0) {\n       \
    \ return ($l->[$m] + $l->[$m - 1]) / 2;\n    } else {\n        return $l->[$m];\n\
    \    }\n}", "    my $n = @$l;\n    return undef if ($n == 0);\n    my $s = $n\
    \ % 2;\n    my $i = int($n / 2);\n    my @x = sort {$a <=> $b} @$l;\n    return\
    \ $x[$i] if ($s == 1);\n    return ($x[$i - 1] + $x[$i]) / 2;\n}", "    my $total\
    \ = @$l;\n    if ($total == 0) {\n        return undef;\n    }\n    my $i = ($total\
    \ + 1) / 2;\n    if ($total % 2 == 0) {\n        return ($l->[$i-1] + $l->[$i])\
    \ / 2;\n    } else {\n        return $l->[$i-1];\n    }\n}", "    my $size = scalar(@$l);\n\
    \    my $m = int($size / 2);\n    if ($size % 2 == 0) {\n        return ($l->[$m]\
    \ + $l->[$m-1]) / 2;\n    } else {\n        return $l->[$m];\n    }\n}", "   \
    \ my $s = @$l;\n    return undef if $s <= 0;\n    my $m = int($s / 2);\n    return\
    \ ($s % 2) ? $l->[$m] : ($l->[$m - 1] + $l->[$m]) / 2;\n}", "    my $n = scalar(@$l);\n\
    \    my $m = int($n/2);\n    return $n % 2 ? $l->[$m] : ($l->[$m-1] + $l->[$m])/2;\n\
    }", "    my @a = sort {$a <=> $b} @$l;\n    my $n = @a;\n    return 0 if $n ==\
    \ 0;\n    my $mid = int(($n-1)/2);\n    if ($n % 2 == 0) {\n\treturn ($a[$mid]\
    \ + $a[$mid+1])/2;\n    } else {\n\treturn $a[$mid];\n    }\n}", "    my $n =\
    \ scalar(@$l);\n    my @sorted = sort {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n\
    \        return ($sorted[$n/2] + $sorted[$n/2 - 1]) / 2;\n    } else {\n     \
    \   return $sorted[$n/2];\n    }\n}", "    my $len = @$l;\n    if ($len % 2 ==\
    \ 0) {\n        my $m1 = $l->[$len/2];\n        my $m2 = $l->[$len/2 - 1];\n \
    \       return ($m1 + $m2) / 2;\n    } else {\n        return $l->[$len/2];\n\
    \    }\n}", "    @{$l} = sort {$a <=> $b} @{$l};\n    my $m = @{$l};\n    return\
    \ $m % 2 ? $l->[int($m/2)] : ($l->[$m/2-1] + $l->[$m/2])/2;\n}", "    my $n =\
    \ scalar(@$l);\n    my $i = int($n/2);\n    if($n % 2 == 0) {\n        return\
    \ ($l->[$i-1] + $l->[$i]) / 2;\n    } else {\n        return $l->[$i];\n    }\n\
    }", "    my $m = int(scalar(@$l) / 2);\n    my @s = sort { $a <=> $b } @$l;\n\
    \    return $s[$m];\n}", "    my @sorted = sort {$a <=> $b} @$l;\n    my $middle\
    \ = int(@sorted / 2);\n    return @sorted % 2 ? $sorted[$middle] : ($sorted[$middle\
    \ - 1] + $sorted[$middle]) / 2;\n}", "    my $n = scalar(@$l);\n    return undef\
    \ if ($n == 0);\n    my $s = sort {$a <=> $b} @$l;\n    my $i = int($n/2);\n \
    \   if ($n % 2 == 0) {\n\treturn 0.5 * ($s->[$i-1] + $s->[$i]);\n    } else {\n\
    \treturn $s->[$i];\n    }\n}", "    my $i = int(($#{$l} + 1) / 2);\n    my $r\
    \ = $l->[$i];\n    $r = ($r + $l->[$i - 1]) / 2 if $#{$l} % 2 == 0;\n    return\
    \ $r;\n}", "    my $k = int(@$l / 2);\n    if (@$l % 2) {\n        return sorted_list_value($l,\
    \ $k);\n    } else {\n        return 0.5 * (sorted_list_value($l, $k-1) + sorted_list_value($l,\
    \ $k));\n    }\n}", "    my($arr, $i, $index, $len, $result);\n    # Copy the\
    \ array to make it easier to find the median.\n    $arr = [@$l];\n    $len = scalar(@$arr);\n\
    \    $index = int($len / 2);\n    # Sort the array to find the element in the\
    \ middle.\n    foreach $i (0..$index) {\n        #print(\"Bubble: Comparing $arr->[$i]\
    \ and $arr->[$i + 1]\\n\");\n        if ($arr->[$i] > $arr->[$i + 1]) {\n    \
    \        #print(\"Bubble: Swapping\\n\");\n            ($arr->[$i], $arr->[$i\
    \ + 1]) = ($arr->[$i + 1], $arr->[$i]);\n        }\n    }\n    # If the array\
    \ is even-sized, return the average of the two middle elements.\n    if ($len\
    \ % 2 == 0) {\n        $result = ($arr->[$index] + $arr->[$index + 1]) / 2;\n\
    \    } else {\n        $result = $arr->[$index];\n    }\n    return $result;\n\
    }", "    my $n = @$l;\n    return $n ? ($n % 2 ? $l->[$n/2] : ($l->[$n/2-1] +\
    \ $l->[$n/2])/2) : undef;\n}", "    my @l_cpy = sort {$a <=> $b} @$l;\n    my\
    \ $len = scalar @l_cpy;\n    if ($len % 2 == 0) {\n        return ($l_cpy[$len/2]\
    \ + $l_cpy[$len/2 - 1]) / 2;\n    } else {\n        return $l_cpy[($len-1)/2];\n\
    \    }\n}", '    my($count, $m, $m1, $m2, $n);', "    my @l = sort {$a <=> $b}\
    \ @$l;\n    my $len = scalar(@l);\n    if ($len % 2 == 0) {\n        return ($l[$len/2]\
    \ + $l[$len/2 - 1]) / 2;\n    } else {\n        return $l[int($len/2)];\n    }\n\
    }", "    my $total = scalar(@$l);\n    my $ret;\n    if($total % 2 == 0) {\n \
    \       $ret = ($l->[int($total/2)] + $l->[int($total/2)-1])/2;\n    } else {\n\
    \        $ret = $l->[int($total/2)];\n    }\n    return $ret;\n}", "    my $c\
    \ = @$l;\n    my $s = $c >> 1;\n    if ($c % 2) {\n        return (($l->[$s -\
    \ 1] + $l->[$s]) / 2);\n    } else {\n        return $l->[$s];\n    }\n}", " \
    \   my @l_sort = sort {$a <=> $b} @$l;\n    my $n = @l_sort;\n    if ($n % 2 ==\
    \ 0) {\n        return ($l_sort[$n/2] + $l_sort[$n/2 - 1]) / 2;\n    } else {\n\
    \        return $l_sort[$n/2];\n    }\n}", "    my @l = sort {$a <=> $b} @$l;\n\
    \    my $n = @l;\n    my $m = $n / 2;\n    my $r = $n % 2;\n    if ($r) {\n  \
    \      return $l[$m];\n    } else {\n        return ($l[$m-1] + $l[$m]) / 2;\n\
    \    }\n}", "    my $s = $#$l + 1;\n    my $mid = ($s / 2);\n    my $val;\n  \
    \  if($s % 2 == 0) {\n\t$val = ($l->[$mid] + $l->[$mid-1]) / 2;\n    } else {\n\
    \t$val = $l->[$mid];\n    }\n    return $val;\n}", "    my $n = @$l;\n    my $i\
    \ = int($n/2);\n    if ($n % 2 == 0) {\n        return ($l->[$i-1] + $l->[$i])\
    \ / 2;\n    } else {\n        return $l->[$i];\n    }\n}", "    if(@$l == 0) {\n\
    \        return undef;\n    }\n    my @list = sort {$a <=> $b} @$l;\n    my $len\
    \ = @list;\n    if($len % 2 == 0) {\n        return ($list[$len/2] + $list[$len/2\
    \ - 1]) / 2;\n    } else {\n        return $list[int($len/2)];\n    }\n}", " \
    \   my $size = @$l;\n    my $mid = int $size / 2;\n    if ($size % 2 == 0) {\n\
    \        return ($l->[$mid] + $l->[$mid-1]) / 2;\n    } else {\n        return\
    \ $l->[$mid];\n    }\n}", "    my $nl = scalar(@$l);\n    if ($nl % 2 == 0) {\n\
    \        my $m = $nl / 2;\n        return ($l->[$m-1] + $l->[$m]) / 2;\n    }\
    \ else {\n        return $l->[$nl/2];\n    }\n}", "    my @array = sort {$a <=>\
    \ $b} @$l;\n    my $mid = int(@array/2);\n    return ((@array % 2) ? ($array[$mid])\
    \ : (($array[$mid-1] + $array[$mid])/2.0));\n}", "    my $n = @$l;\n    if ($n\
    \ % 2 == 0) {\n        return ($l->[$n/2] + $l->[$n/2-1]) / 2;\n    } else {\n\
    \        return $l->[$n/2];\n    }\n}", "    my($n) = scalar(@$l);\n    my($r);\n\
    \    my($i);", "    my @list = sort {$a <=> $b} @$l;\n    my $n = @list;\n   \
    \ if ($n%2==0) {\n        return ($list[int($n/2)] + $list[int($n/2) - 1])/2;\n\
    \    } else {\n        return $list[int($n/2)];\n    }\n}", "    my($len) = $#$l\
    \ + 1;\n    my($sorted) = [sort {$a <=> $b} @$l];\n    if ($len % 2) {\n     \
    \   return $$sorted[$len / 2];\n    } else {\n        return ($$sorted[$len /\
    \ 2] + $$sorted[$len / 2 - 1]) / 2;\n    }\n}", "    return undef unless defined\
    \ $l;\n    return 0 unless @$l;\n    my $n = @$l;\n    my @s = sort {$a <=> $b}\
    \ @$l;\n    if ($n % 2) {\n        return $s[int($n/2)];\n    } else {\n     \
    \   return ($s[$n/2] + $s[$n/2 - 1]) / 2;\n    }\n}", "    my @c = sort {$a <=>\
    \ $b} @$l;\n    my $len = scalar(@c);\n    return ($c[int($len/2)-1] + $c[int($len/2)])/2\
    \ if $len % 2 == 0;\n    return $c[int($len/2)];\n}", "    my @vals = sort {$a\
    \ <=> $b} @$l;\n    return ($vals[int(@vals/2) - 1] + $vals[int(@vals/2)])/2 if\
    \ (@vals % 2 == 0);\n    return $vals[int(@vals/2)];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
