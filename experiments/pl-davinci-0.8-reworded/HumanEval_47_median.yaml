name: HumanEval_47_median
language: pl
prompt: "# Return median of elements in the array l.\n# >>> median([3, 1, 2, 4, 5])\n\
  # 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n\
  \        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4,\
  \ 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my @l = sort {$a <=> $b} @$l;\n    if (@l % 2 == 0) {\n       \
    \ return ($l[@l/2-1] + $l[@l/2]) / 2;\n    } else {\n        return $l[(@l-1)/2];\n\
    \    }\n}", "    my $s = $#{$l}+1;\n    if ($s%2) {\n        return $l->[$s/2];\n\
    \    } else {\n        return ($l->[$s/2-1]+$l->[$s/2])/2;\n    }\n}", "    return\
    \ middle($l);\n}", "    my $n = int @$l;\n    return unless $n;\n    my $m = int(($n\
    \ + 1) / 2);\n    $l = [sort {$a <=> $b} @$l];\n    return $l->[$m - 1] if $n\
    \ % 2;\n    return ($l->[$m - 1] + $l->[$m]) / 2;\n}", "    my $len = @$l;\n \
    \   if ($len == 0) {\n        return undef;\n    }\n    my $m = int($len / 2);\n\
    \    if ($len % 2 == 0) {\n        my $m1 = $l->[$m];\n        my $m2 = $l->[$m-1];\n\
    \        return ($m1 + $m2) / 2;\n    } else {\n        return $l->[$m];\n   \
    \ }\n}", "    my $len = @$l;\n    my $m;\n    if($len % 2) {\n        $m = $l->[($len-1)/2];\n\
    \    } else {\n        $m = ($l->[$len/2] + $l->[$len/2-1])/2;\n    }\n    return\
    \ $m;\n}", "    my @l = sort {$a <=> $b} @$l;\n    my $mid = int(@l/2);\n    return\
    \ $l[$mid];\n}", "    return undef unless @$l;\n    my @s = sort {$a <=> $b} @$l;\n\
    \    my $idx = int(@s/2);\n    return @s % 2 ? $s[$idx] : ($s[$idx-1] + $s[$idx])/2;\n\
    }", "    my $len = scalar(@$l);\n    if ($len == 0) {\n        return undef;\n\
    \    } else {\n        my $c = $len / 2;\n        my @s = sort { $a <=> $b } @$l;\n\
    \        if ($len % 2) {\n            return $s[$c];\n        } else {\n     \
    \       return ($s[$c - 1] + $s[$c]) / 2;\n        }\n    }\n}", "    my($m);\n\
    \    @$l = sort {$a <=> $b} @$l;\n    if (scalar(@$l) % 2) {\n        $m = $l->[int(scalar(@$l)/2)];\n\
    \    } else {\n        $m = ($l->[scalar(@$l)/2] + $l->[scalar(@$l)/2 - 1])/2;\n\
    \    }\n    return $m;\n}", "    my @a = sort {$a <=> $b} @$l;\n    my $mid =\
    \ scalar(@a) / 2;\n    if (scalar(@a) % 2 == 0) {\n        return ($a[$mid] +\
    \ $a[$mid - 1]) / 2;\n    } else {\n        return $a[$mid];\n    }\n}", "   \
    \ my $n = @$l;\n    return undef if $n == 0;\n    return $l->[0] if $n == 1;\n\
    \    my $n1 = $n / 2;\n    my $n2 = $n1 - 1;\n    my $s = $l->[$n1] + $l->[$n2];\n\
    \    return $s / 2;\n}", "    my $s = median_sort($l);\n    my $len = scalar(@$s);\n\
    \    if ( $len % 2 == 0 ) {\n        return ($s->[$len/2-1] + $s->[$len/2]) /\
    \ 2;\n    } else {\n        return $s->[$len/2];\n    }\n}", "    my $s = @$l;\n\
    \    return 0 if $s == 0;\n    my $sum = 0;\n    foreach (@$l) {\n        $sum\
    \ += $_;\n    }\n    return $sum / $s;\n}", "    my @a = sort {$a <=> $b} @$l;\n\
    \    my $N = scalar(@a);\n    my $n = int($N/2);\n    return($N%2 ? $a[$n] : ($a[$n]+$a[$n-1])/2);\n\
    }", "    my $n = @$l;\n    my $median;\n    if ($n % 2 == 0) {\n        $median\
    \ = ($l->[($n/2) - 1] + $l->[$n/2]) / 2;\n    } else {\n        $median = $l->[($n\
    \ - 1) / 2];\n    }\n    return $median;\n}", "    my $len = @$l;\n    my @s =\
    \ sort {$a <=> $b} @$l;\n    my $m = $len / 2;\n    return ($len % 2) ? $s[$m]\
    \ : ($s[$m - 1] + $s[$m]) / 2;\n}", "    return 0 if(!$l || !@$l);\n    my @s\
    \ = sort {$a <=> $b} @$l;\n    my $len = scalar(@s);\n    if($len % 2 == 0) {\n\
    \        return ($s[$len/2-1] + $s[$len/2]) / 2;\n    } else {\n        return\
    \ $s[$len/2];\n    }\n}", "    if(defined($l) && ref($l) eq 'ARRAY') {\n     \
    \   my $size = @$l;\n        if($size == 0) {\n            return undef;\n   \
    \     }\n        elsif($size == 1) {\n            return $l->[0];\n        }\n\
    \        else {\n            my @sorted = sort {$a <=> $b} @$l;\n            if($size\
    \ % 2 == 0) {\n                my $i = int($size / 2);\n                return\
    \ ($sorted[$i] + $sorted[$i - 1]) / 2;\n            }\n            else {\n  \
    \              return $sorted[int($size / 2)];\n            }\n        }\n   \
    \ }\n    else {\n        return undef;\n    }\n}", "    my @a = sort {$a <=> $b}\
    \ @$l;\n    if (@a % 2) {\n        return $a[@a/2];\n    } else {\n        return\
    \ ($a[@a/2 - 1] + $a[@a/2]) / 2;\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
