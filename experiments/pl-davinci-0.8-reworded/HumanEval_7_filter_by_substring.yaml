name: HumanEval_7_filter_by_substring
language: pl
prompt: "# Filter an input array of strings only for ones that contain given substring\n\
  # >>> filter_by_substring([], \"a\")\n# []\n# >>> filter_by_substring([\"abc\",\
  \ \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\nsub filter_by_substring\
  \ {\n    my($strings, $substring) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_substring;\n\
  \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\"\
  , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"\
  xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([\"grunt\", \"trumpet\", \"prune\"\
  , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @filtered = ();\n    for my $item (@$strings) {\n        push\
    \ @filtered, $item if $item =~ /$substring/;\n    }\n    return @filtered;\n}",
  "    grep(/$substring/, @$strings);\n}", "    my @strings_filtered = ();\n    for\
    \ my $str (@$strings) {\n        if (index($str, $substring) != -1) {\n      \
    \      push @strings_filtered, $str;\n        }\n    }\n    return \\@strings_filtered;\n\
    }", "    return grep { /$substring/ } @$strings;\n}", "    return grep { index($_,\
    \ $substring) != -1 } @$strings;\n}", "    return grep { /$substring/ } @$strings;\n\
    }", "    my @found = ();\n    for my $string (@$strings) {\n        push @found,\
    \ $string if $string =~ /$substring/;\n    }\n    return \\@found;\n}", "    return\
    \ [grep { index($_, $substring) >= 0 } @$strings];\n}", "    return grep { $_\
    \ =~ /\\Q$substring\\E/ } @$strings;\n}", "    my @filtered;\n    foreach (@$strings)\
    \ {\n        if ($_ =~ /$substring/) {\n            push @filtered, $_;\n    \
    \    }\n    }\n    return @filtered;\n}", "    if (!defined($strings)) {\n   \
    \     return [];\n    }", "    grep /$substring/, @$strings;\n}", "    grep /$substring/,\
    \ @$strings;\n}", "    my @filtered;\n    for my $str (@$strings) {\n        push\
    \ @filtered, $str if $str =~ /$substring/;\n    }\n    return \\@filtered;\n}",
  "    my @filtered = ();\n    foreach my $string (@$strings) {\n        push @filtered,\
    \ $string if($string =~ /$substring/);\n    }\n    return @filtered;\n}", "  \
    \  return grep { index($_, $substring) >= 0 } @$strings;\n}", "    return grep\
    \ { index($_, $substring) >= 0 } @$strings;\n}", "    return map {$_ if index($_,\
    \ $substring) != -1} @$strings;\n}", "    return grep { /$substring/ } @$strings;\n\
    }", "    my @ret = ();\n    foreach my $s (@$strings) {\n        if ($s =~ /$substring/)\
    \ {\n            push @ret, $s;\n        }\n    }\n    return @ret;\n}", "   \
    \ return grep { index($_, $substring) != -1 } @$strings;\n}", "    return grep\
    \ { /$substring/ } @$strings;\n}", "    grep { defined and /$substring/i } @$strings;\n\
    }", "    my @result = ();\n    for my $string (@$strings) {\n        push @result,\
    \ $string if $string =~ /$substring/;\n    }\n    return @result;\n}", "    my\
    \ @ret = ();\n    foreach my $string (@$strings) {\n        if (index($string,\
    \ $substring) != -1) {\n            push @ret, $string;\n        }\n    }\n  \
    \  return @ret;\n}", "    return grep {index($_, $substring) != -1} @$strings;\n\
    }", "    return grep { $_ =~ /$substring/ } @$strings;\n}", "    return [grep\
    \ { $_ =~ /\\Q$substring\\E/ } @$strings];\n}", "    my @filtered;\n    foreach\
    \ my $str (@$strings) {\n        if ($str =~ /$substring/) {\n            push\
    \ @filtered, $str;\n        }\n    }\n    return @filtered;\n}", "    return grep(/$substring/,\
    \ @$strings);\n}", "    grep {index($_, $substring) != -1} @$strings;\n}", " \
    \   return unless(defined($strings) && defined($substring));\n    return grep(/$substring/,\
    \ @$strings);\n}", "    my @filtered = grep(/$substring/, @$strings);\n    return\
    \ \\@filtered;\n}", "    my @filtered = grep { $_ =~ /$substring/ } @$strings;\n\
    \    return @filtered;\n}", "    grep { $_ =~ /$substring/ } @$strings;\n}", " \
    \   my @filtered = grep /$substring/, @$strings;\n    return \\@filtered;\n}",
  "    my @valid_strings = ();\n    foreach (@$strings) {\n        push @valid_strings,\
    \ $_ if $_ =~ /$substring/;\n    }\n    return @valid_strings;\n}", "    return\
    \ grep { $_ =~ /$substring/ } @$strings;\n}", "    return grep { /$substring/\
    \ } @$strings;\n}", "    return [ grep { index($_, $substring) != -1 } @$strings\
    \ ];\n}", "    my @filtered = ();\n    foreach my $i (@$strings) {\n        if($i\
    \ =~ m/$substring/) {\n            push(@filtered, $i);\n        }\n    }\n  \
    \  return @filtered;\n}", "    return filter_by_regex($strings, qr/$substring/);\n\
    }", "    my @filtered;\n    foreach my $string (@$strings) {\n        if ($string\
    \ =~ /$substring/) {\n            push @filtered, $string;\n        }\n    }\n\
    \    return @filtered;\n}", "    my @subset = ();\n    foreach my $string (@$strings)\
    \ {\n        push @subset, $string if $string =~ /$substring/;\n    }\n    return\
    \ \\@subset;\n}", "    return [ grep { $substring eq \"\" || index($_, $substring)\
    \ >= 0 } @$strings ];\n}", "    return [grep { index($_, $substring) != -1 } @$strings];\n\
    }", "    return [ grep { index($_, $substring) != -1 } @$strings ];\n}", "   \
    \ return grep { /$substring/ } @$strings;\n}", "    return grep /$substring/,\
    \ @$strings;\n}", "    my @result = ();\n    for my $str (@$strings) {\n     \
    \   push @result, $str if ($str =~ /$substring/);\n    }\n    return @result;\n\
    }", "    return @$strings if !$substring;\n    my @result = grep(/$substring/,\
    \ @$strings);\n    return @result;\n}", "    my @result = ();\n    foreach my\
    \ $s (@$strings) {\n        push @result, $s if ($s =~ /$substring/);\n    }\n\
    \    return @result;\n}", "    my @filtered = grep(/$substring/, @$strings);\n\
    \    return @filtered;\n}", "    my @new = ();\n    foreach my $item (@$strings)\
    \ {\n        if($item =~ /$substring/) {\n            push(@new, $item);\n   \
    \     }\n    }\n    return @new;\n}", "    grep { $_ =~ /$substring/ } @$strings;\n\
    }", "    return grep(/$substring/, @$strings);\n}", "    my @filtered = grep /$substring/,\
    \ @$strings;\n    return @filtered;\n}", "    return [ grep { /$substring/ } @$strings\
    \ ];\n}", "    return grep(/$substring/, @$strings);\n}", "    my @filtered =\
    \ grep {index($_, $substring) != -1} @$strings;\n    return \\@filtered;\n}",
  "    return grep {$_ =~ /$substring/} @$strings;\n}", "    my @filtered;\n    foreach\
    \ my $item (@$strings) {\n        if ($item =~ /$substring/) {\n            push\
    \ @filtered, $item;\n        }\n    }\n    return @filtered;\n}", "    my @filtered\
    \ = ();\n    foreach my $str (@$strings) {\n        if($str =~ /$substring/) {\n\
    \            push @filtered, $str;\n        }\n    }\n    return @filtered;\n}",
  "    return [grep { index($_, $substring) != -1 } @$strings];\n}", "    my @matches\
    \ = grep /$substring/, @$strings;\n    return @matches;\n}", "    my @filtered;\n\
    \    foreach my $str (@$strings) {\n        push @filtered, $str if $str =~ /$substring/;\n\
    \    }\n    return @filtered;\n}", "    my @filtered = grep { /$substring/ } @$strings;\n\
    \    return @filtered;\n}", "    my @result = ();\n    foreach my $str (@$strings)\
    \ {\n        if($str =~ /$substring/) {\n            push @result, $str;\n   \
    \     }\n    }\n    return @result;\n}", "    my @result = ();\n    foreach my\
    \ $string (@$strings) {\n        push @result, $string if $string =~ /$substring/;\n\
    \    }\n    return @result;\n}", "    my @result = ();\n    my $s;\n    foreach\
    \ $s (@$strings) {\n        push @result, $s if $s =~ /$substring/;\n    }\n \
    \   return @result;\n}", "    return grep { index($_, $substring) >= 0 } @$strings;\n\
    }", "    my @filtered;\n    foreach my $string (@$strings) {\n        push @filtered,\
    \ $string if($string =~ /$substring/);\n    }\n    return @filtered;\n}", "  \
    \  return grep { /$substring/ } @$strings;\n}", "    return grep { /$substring/\
    \ } @$strings;\n}", "    my @result = ();\n    foreach my $item (@$strings) {\n\
    \        if ($item =~ /\\Q$substring\\E/) {\n            push @result, $item;\n\
    \        }\n    }\n    return @result;\n}", "    my @filtered = grep(/$substring/,\
    \ @$strings);\n    return \\@filtered;\n}", "    my @filtered = grep { index($_,\
    \ $substring) != -1 } @$strings;\n    return \\@filtered;\n}", "    return grep\
    \ { index($_, $substring) >= 0 } @$strings;\n}", "    $substring = quotemeta($substring);\n\
    \    return grep { $_ =~ /$substring/ } @$strings;\n}", "    my @result = ();\n\
    \    for my $str (@$strings) {\n        push @result, $str if($str =~ /$substring/);\n\
    \    }\n    return @result;\n}", "    my @filtered;\n    foreach my $str (@$strings)\
    \ {\n        push @filtered, $str if $str =~ /$substring/;\n    }\n    return\
    \ @filtered;\n}", "    return [] unless $substring;\n    return [grep { /$substring/\
    \ } @$strings];\n}", "    return [grep { $_ =~ /$substring/ } @$strings];\n}",
  "    my @out;\n    for my $str (@$strings) {\n        push @out, $str if $str =~\
    \ /$substring/;\n    }\n    return @out;\n}", "    my @filtered = ();\n    foreach\
    \ my $string (@$strings) {\n        if ($string =~ /$substring/) {\n         \
    \   push @filtered, $string;\n        }\n    }\n    return @filtered;\n}", " \
    \   my $result = [];\n    for my $s (@$strings) {\n        push @$result, $s if\
    \ $s =~ /$substring/;\n    }\n    return $result;\n}", "    return [grep(/$substring/,\
    \ @$strings)];\n}", "    my @result = ();\n    foreach my $str (@$strings) {\n\
    \        push @result, $str if ($str =~ /$substring/);\n    }\n    return @result;\n\
    }", "    my @res = ();\n    foreach my $string (@$strings) {\n        push @res,\
    \ $string if $string =~ /$substring/;\n    }\n    return \\@res;\n}", "    return\
    \ [grep {$_ =~ /$substring/} @$strings];\n}", "    return [] unless $substring;\n\
    \    return [grep {$_ =~ /$substring/} @$strings];\n}", "    return [grep(/$substring/,\
    \ @$strings)];\n}", "    my $filtered_strings = [];\n    for my $string (@$strings)\
    \ {\n        if ($string =~ m/$substring/) {\n            push @$filtered_strings,\
    \ $string;\n        }\n    }\n    return $filtered_strings;\n}", "    my @filtered\
    \ = grep { /$substring/ } @$strings;\n    return \\@filtered;\n}", "    my @results\
    \ = grep { index($_, $substring) != -1 } @$strings;\n    return \\@results;\n}",
  "    my @result = ();\n    for my $string (@$strings) {\n        push @result, $string\
    \ if $string =~ /$substring/;\n    }\n    return @result;\n}", "    return grep\
    \ { /$substring/ } @$strings;\n}", "    return grep { index($_, $substring) >=\
    \ 0 } @$strings;\n}", "    return grep { index($_, $substring) >= 0 } @$strings;\n\
    }", "    my @filtered = ();\n    if(scalar(@$strings) > 0) {\n        foreach\
    \ my $str (@$strings) {\n            if($str =~ /$substring/) {\n            \
    \    push(@filtered, $str);\n            }\n        }\n    }\n    return @filtered;\n\
    }", "    my @filtered = grep { /$substring/ } @$strings;\n    return @filtered;\n\
    }", "    my @result = ();\n    foreach my $string (@$strings) {\n        push\
    \ @result, $string if $string =~ /$substring/;\n    }\n    return @result;\n}",
  "    return grep /$substring/, @$strings;\n}", "    return grep { index($_, $substring)\
    \ != -1 } @$strings;\n}", "    return [ grep { m/\\Q$substring\\E/ } @$strings\
    \ ];\n}", "    my @retval = ();\n    for my $str (@$strings) {\n        push @retval,\
    \ $str if ($str =~ /$substring/);\n    }\n    return @retval;\n}", "    my @filtered;\n\
    \    foreach my $string (@$strings) {\n        push @filtered, $string if $string\
    \ =~ /$substring/;\n    }\n    return @filtered;\n}", "    return grep { $_ =~\
    \ /$substring/ } @$strings;\n}", "    my @filtered = grep { m/$substring/ } @$strings;\n\
    \    return \\@filtered;\n}", "    my @filtered;\n    foreach my $string (@$strings)\
    \ {\n        if($string =~ /$substring/) {\n            push @filtered, $string;\n\
    \        }\n    }\n    return @filtered;\n}", "    return grep { index($_, $substring)\
    \ != -1 } @$strings;\n}", "    if ($strings eq undef) {\n        return [];\n\
    \    }\n    my @arr = @{$strings};\n    my @filtered = ();\n    my $string;\n\
    \    foreach $string (@arr) {\n        if ($string =~ /$substring/) {\n      \
    \      push(@filtered, $string);\n        }\n    }\n    return \\@filtered;\n}",
  "    return grep { index($_, $substring) != -1 } @$strings;\n}", "    my @filtered\
    \ = grep {$_ =~ /$substring/} @$strings;\n    return @filtered;\n}", "    my @result\
    \ = ();\n    foreach my $string (@$strings) {\n        push @result, $string if\
    \ $string =~ /$substring/;\n    }\n    return @result;\n}", "    return [] unless\
    \ $substring;\n    return [ grep { /$substring/ } @$strings ];\n}", "    my @matches\
    \ = ();\n    foreach my $s (@$strings) {\n        if($s =~ /$substring/) {\n \
    \           push @matches, $s;\n        }\n    }\n    return @matches;\n}", " \
    \   return grep {index($_, $substring) >= 0} @$strings;\n}", "    return [grep\
    \ { $_ =~ /$substring/ } @$strings];\n}", "    return grep { my $s = $_; index($s,\
    \ $substring) != -1; } @$strings;\n}", "    return grep { $_ =~ /$substring/ }\
    \ @$strings;\n}", "    return [] unless @$strings;\n    return [grep {/$substring/}\
    \ @$strings];\n}", "    return [ grep { /$substring/ } @$strings ];\n}", "   \
    \ return [grep(/$substring/, @$strings)];\n}", "    my @filtered;\n    push @filtered,\
    \ $_ foreach grep { $_ =~ /$substring/ } @$strings;\n    return \\@filtered;\n\
    }", "    return grep { $_ =~ /$substring/ } @$strings;\n}", "    my @ret;\n  \
    \  for my $str (@$strings) {\n        if ($str =~ /$substring/) {\n          \
    \  push @ret, $str;\n        }\n    }\n    return @ret;\n}", "    grep { $_ =~\
    \ /$substring/ } @$strings;\n}", "    return [] unless $substring;\n    return\
    \ $strings if @$strings == 0;\n    return [grep { index($_, $substring) != -1\
    \ } @$strings];\n}", "    grep(/$substring/, @$strings);\n}", "    my @substring_containing\
    \ = grep(/$substring/, @$strings);\n    return \\@substring_containing;\n}", " \
    \   my $result = [];\n    for my $string (@$strings) {\n        push @$result,\
    \ $string if $string =~ /$substring/;\n    }\n    return $result;\n}", "    my\
    \ @matches = ();\n    for my $string (@$strings) {\n        if ($string =~ /$substring/)\
    \ {\n            push @matches, $string;\n        }\n    }\n    return @matches;\n\
    }", "    return grep { index($_, $substring) >= 0 } @$strings;\n}", "    my @ret\
    \ = ();\n    foreach my $string (@$strings) {\n        if ($string =~ /$substring/)\
    \ {\n            push @ret, $string;\n        }\n    }\n    return @ret;\n}",
  "    my @filtered = ();\n    foreach my $s (@$strings) {\n        push @filtered,\
    \ $s if $s =~ /$substring/;\n    }\n    return @filtered;\n}", "    my @filtered\
    \ = ();\n    for my $str (@$strings) {\n        if (index($str, $substring) !=\
    \ -1) {\n            push @filtered, $str;\n        }\n    }\n    return @filtered;\n\
    }", "    my @filtered = grep(/$substring/, @$strings);\n    return @filtered;\n\
    }", "    return grep { index($_, $substring) >= 0 } @$strings;\n}", "    my @result\
    \ = ();\n    foreach my $string (@$strings) {\n        push @result, $string if\
    \ $string =~ /$substring/;\n    }\n    return @result;\n}", "    $substring =\
    \ quotemeta($substring);\n    return grep(/$substring/, @$strings);\n}", "   \
    \ my @ret = ();\n    for my $s (@$strings) {\n        push @ret, $s if $s =~ /$substring/;\n\
    \    }\n    return @ret;\n}", "    return [grep { $_ =~ /\\Q$substring\\E/i }\
    \ @$strings];\n}", "    return [grep { index($_, $substring) >= 0 } @$strings];\n\
    }", "    return grep(/$substring/, @$strings);\n}", "    return grep { m/$substring/\
    \ } @$strings;\n}", "    grep {index($_, $substring) != -1} @$strings;\n}", " \
    \   return [] unless defined $strings;\n    return [ grep { $_ =~ /$substring/\
    \ } @$strings ];\n}", "    return [grep { index($_, $substring) != -1 } @$strings];\n\
    }", "    return grep {$_ =~ /$substring/} @$strings;\n}", "    return grep { index($_,\
    \ $substring) != -1 } @$strings;\n}", "    my @res = ();\n    for my $str (@$strings)\
    \ {\n        push @res, $str if $str =~ /$substring/;\n    }\n    return \\@res;\n\
    }", "    my @filtered = ();\n    foreach my $string (@$strings) {\n        if\
    \ ($string =~ /$substring/) {\n            push @filtered, $string;\n        }\n\
    \    }\n    return @filtered;\n}", "    my @filtered;\n    for my $string (@$strings)\
    \ {\n        if ($string =~ /$substring/) {\n            push @filtered, $string;\n\
    \        }\n    }\n    return @filtered;\n}", "    my @filtered = grep { index($_,\
    \ $substring) != -1 } @$strings;\n    return @filtered;\n}", "    my @filtered;\n\
    \    foreach my $str (@$strings) {\n        if($str =~ /$substring/) {\n     \
    \       push @filtered, $str;\n        }\n    }\n    return @filtered;\n}", " \
    \   my @filtered = ();\n    foreach my $string (@$strings) {\n        if ($string\
    \ =~ /$substring/) {\n            push @filtered, $string;\n        }\n    }\n\
    \    return @filtered;\n}", "    return grep { $_ =~ /\\Q$substring\\E/ } @$strings;\n\
    }", "    grep { $_ =~ /$substring/ } @$strings;\n}", "    my @filtered = ();\n\
    \    foreach my $str (@$strings) {\n        push @filtered, $str if $str =~ /$substring/;\n\
    \    }\n    return @filtered;\n}", "    return grep {$_ =~ /$substring/} @$strings;\n\
    }", "    return grep(/$substring/, @$strings);\n}", "    my @filtered;\n    foreach\
    \ my $string (@$strings) {\n        push @filtered, $string if $string =~ /$substring/;\n\
    \    }\n    return @filtered;\n}", "    return grep { $_ =~ /$substring/ } @$strings;\n\
    }", "    return [ grep { $_ =~ /$substring/ } @$strings ];\n}", "    return [\
    \ grep { index($_, $substring) != -1 } @$strings ];\n}", "    my @result = ();\n\
    \    foreach my $string (@$strings) {\n        if ($string =~ /$substring/) {\n\
    \            push @result, $string;\n        }\n    }\n    return @result;\n}",
  "    my @res = ();\n    for my $s (@$strings) {\n        push @res, $s if ($s =~\
    \ /$substring/);\n    }\n    return @res;\n}", "    my @filtered;\n    for my\
    \ $string (@$strings) {\n        push @filtered, $string if $string =~ /$substring/;\n\
    \    }\n    return @filtered;\n}", "    return [grep {index($_, $substring) !=\
    \ -1} @$strings];\n}", "    return grep { /$substring/ } @$strings;\n}", "   \
    \ return [ grep { index($_, $substring) >= 0 } @$strings ];\n}", "    my @filtered;\n\
    \    foreach my $str (@$strings) {\n        if($str =~ /$substring/) {\n     \
    \       push @filtered, $str;\n        }\n    }\n    return @filtered;\n}", " \
    \   return [grep {$_ =~ /$substring/} @$strings];\n}", "    return grep(/$substring/,\
    \ @$strings);\n}", "    return [grep { $_ =~ /$substring/ } @$strings];\n}", " \
    \   my @filtered = ();\n    foreach my $string (@$strings) {\n        if($string\
    \ =~ /$substring/) {\n            push(@filtered, $string);\n        }\n    }\n\
    \    return @filtered;\n}", "    return grep { $_ =~ /$substring/ } @$strings;\n\
    }", "    grep(/$substring/, @$strings);\n}", "    return grep {$_ =~ /\\Q$substring\\\
    E/} @$strings;\n}", "    my $return = [];\n    foreach my $s (@$strings) {\n \
    \       if ($s =~ /$substring/) {\n            push @$return, $s;\n        }\n\
    \    }\n    return $return;\n}", "    my @ret = ();\n    for my $string (@$strings)\
    \ {\n        if($string =~ /$substring/) {\n            push @ret, $string;\n\
    \        }\n    }\n    return @ret;\n}", "    return grep { $_ =~ /$substring/\
    \ } @$strings;\n}", "    my @filtered = ();\n    for my $string (@$strings) {\n\
    \        if ($string =~ m/$substring/) {\n            push @filtered, $string;\n\
    \        }\n    }\n    return @filtered;\n}", "    return [grep {$_ =~ /$substring/}\
    \ @$strings];\n}", "    return grep {index($_, $substring) >= 0} @$strings;\n}",
  "    my @filtered = ();\n    for my $s (@$strings) {\n        push @filtered, $s\
    \ if $s =~ /$substring/;\n    }\n    return \\@filtered;\n}", "    return [grep\
    \ {index($_, $substring) != -1} @$strings];\n}", "    return grep { index($_,\
    \ $substring) != -1 } @$strings;\n}", "    return [ grep { $_ =~ /$substring/\
    \ } @$strings ];\n}", "    return [] unless @$strings;\n    return [grep(/$substring/,\
    \ @$strings)];\n}", "    return [grep { $_ =~ /$substring/ } @$strings];\n}",
  "    return grep($_ =~ /$substring/, @$strings);\n}", "    my @result = ();\n  \
    \  foreach my $string (@$strings) {\n        push @result, $string if $string\
    \ =~ /$substring/;\n    }\n    return @result;\n}", "    my @filtered = ();\n\
    \    foreach my $string (@$strings) {\n        push @filtered, $string if ($string\
    \ =~ /$substring/);\n    }\n    return @filtered;\n}", "    return [ grep { /$substring/\
    \ } @$strings ];\n}", "    return [grep { $_ =~ /$substring/ } @$strings];\n}",
  "    my @result = ();\n    for my $string (@$strings) {\n        if (index($string,\
    \ $substring) != -1) {\n            push @result, $string;\n        }\n    }\n\
    \    return @result;\n}", "    grep { index($_, $substring) != -1 } @$strings;\n\
    }", "    my @filtered = ();\n    foreach my $element (@$strings) {\n        push\
    \ @filtered, $element if ($element =~ /$substring/);\n    }\n    return @filtered;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
