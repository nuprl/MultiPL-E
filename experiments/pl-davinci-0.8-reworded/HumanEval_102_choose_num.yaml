name: HumanEval_102_choose_num
language: pl
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\n# >>> choose_num(12,\
  \ 15)\n# 14\n# >>> choose_num(13, 12)\n# -1\nsub choose_num {\n    my($x, $y) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n\
  \        if(eq_deeply($candidate->(12, 15),14)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33,\
  \ 12354),12354)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->(5234, 5233),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27,\
  \ 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(7, 7),-1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    if ($x%2==0) {\n        return $x;\n    }\n    else {\n       \
    \ if ($x+1==$y) {\n            return -1;\n        }\n        else {\n       \
    \     return choose_num($x+1, $y);\n        }\n    }\n}", "    my $max = -1;\n\
    \    for (my $i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0 && $i > $max)\
    \ {\n            $max = $i;\n        }\n    }\n    return $max;\n}", "    return\
    \ -1 if $x % 2;\n    my $max = $x;\n    while ($x < $y) {\n        $x += 2;\n\
    \        $max = $x if $x > $max;\n    }\n    return $max;\n}", "    return -1\
    \ unless $x <= $y;\n    my $max = -1;\n    for ($x..$y) {\n        if ($_ % 2\
    \ == 0) {\n            $max = $_ if $_ > $max;\n        }\n    }\n    return $max;\n\
    }", "    # >>> your code here <<<\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n   ", "    return -1 if $x >\
    \ $y;\n    # check if x is even\n    if ($x % 2 == 0) {\n        return $x if\
    \ $x == $y;\n        return $x+2 if $x+2 <= $y;\n    }\n    return $x+1 if $x+1\
    \ <= $y;\n    return -1;\n}", "    my $res = -1;\n    for my $i ($x..$y) {\n \
    \       if ($i % 2 == 0) {\n            $res = $i;\n        }\n    }\n    return\
    \ $res;\n}", "    my $biggest = -1;\n    for my $num ($x..$y) {\n        $biggest\
    \ = $num if ($num % 2 == 0 && $num > $biggest);\n    }\n    return $biggest;\n\
    }", "    for ($x..$y) {\n        return $_ if $_ % 2 == 0;\n    }\n    return\
    \ -1;\n}", "    $x++ while $x <= $y and $x % 2;\n    return $x <= $y ? $x : -1;\n\
    }", "    return -1 if $x > $y;\n    return $x if $x % 2 == 0;\n    $x += 1;\n\
    \    return -1 if $x > $y;\n    $x += 1;\n    while ($x <= $y) {\n        return\
    \ $x if $x % 2 == 0;\n        $x += 2;\n    }\n    return -1;\n}", "    if($x\
    \ % 2 == 0 && $y % 2 == 0) {\n        for($x .. $y) {\n            return $_ if\
    \ $_ % 2 == 0;\n        }\n    } elsif($x % 2 == 1 && $y % 2 == 1) {\n       \
    \ for($x+1 .. $y) {\n            return $_ if $_ % 2 == 0;\n        }\n    } else\
    \ {\n        return 0 if $x == $y;\n        return -1;\n    }\n}", "    my $result\
    \ = -1;\n    for (my $i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $result = $i;\n        }\n    }\n    return $result;\n}", "    #\
    \ TODO: write code here\n    return -1;\n}", "    my $i;\n    for ($i = $y; $i\
    \ >= $x; $i--) {\n\treturn $i if ($i % 2 == 0);\n    }\n    return -1;\n}", " \
    \   my $i;\n    my $even = -1;\n    for ($i = $x; $i <= $y; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            $even = $i;\n        }\n    }\n    return $even;\n\
    }", "    # TODO: Replace the `...` with the correct values\n    return (($x >\
    \ $y) || ($x < 0) || ($y < 0)) ? -1 : (($x + $y) % 2 == 0) ? ($x + $y) / 2 : ($x\
    \ + $y - 1) / 2;\n}", "    if (is_even($x) and ($x <= $y)) {\n        return $x;\n\
    \    } elsif (is_even($y) and ($y >= $x)) {\n        return $y;\n    } else {\n\
    \        return -1;\n    }\n}", "    return -1 if $x > $y;\n    if($x % 2) {\n\
    \        ++$x;\n    }\n    return $x if $x == $y;\n    return $x + 2 if $x + 2\
    \ == $y;\n    return $x + 2;\n}", "    if ($x > $y) {\n        return -1;\n  \
    \  }\n    if (($x % 2) == 0) {\n        return $x;\n    }\n    else {\n      \
    \  return $x + 1;\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
