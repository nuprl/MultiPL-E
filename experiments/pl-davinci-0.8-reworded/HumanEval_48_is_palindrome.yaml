name: HumanEval_48_is_palindrome
language: pl
prompt: "# Checks if given string is a palindrome\n# >>> is_palindrome(\"\")\n# 1\n\
  # >>> is_palindrome(\"aba\")\n# 1\n# >>> is_palindrome(\"aaaaa\")\n# 1\n# >>> is_palindrome(\"\
  zbcd\")\n# \"\"\nsub is_palindrome {\n    my($text) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($revtext) = reverse($text);\n    if ($text eq $revtext) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    # empty\
    \ string is a palindrome\n    if (length($text) == 0) {\n        return 1;\n \
    \   }\n    my($l, $r) = (0, length($text) - 1);\n    # move left and right indices\
    \ towards each other\n    while ($l < $r) {\n        if (substr($text, $l, 1)\
    \ ne substr($text, $r, 1)) {\n            return '';\n        }\n        $l++;\n\
    \        $r--;\n    }\n    return 1;\n}", "    return $text eq reverse $text;\n\
    }", "    if (lc($text) eq reverse(lc($text))) {\n        return 1;\n    }\n  \
    \  return \"\";\n}", "    my $len = length($text);\n    my $i;\n    for($i = 0;\
    \ $i < $len / 2; $i++) {\n        if(substr($text, $i, 1) ne substr($text, $len\
    \ - $i - 1, 1)) {\n            return \"\";\n        }\n    }\n    return 1;\n\
    }", "    my($i, $j, $n);\n    if (length($text) == 0) {\n        return 1;\n \
    \   }\n    $n = length($text) - 1;\n    for ($i = 0, $j = $n; $i < $j; $i++, $j--)\
    \ {\n        if (substr($text, $i, 1) ne substr($text, $j, 1)) {\n           \
    \ return \"\";\n        }\n    }\n    return 1;\n}", "    my @array = split //,\
    \ $text;\n    my $len = @array;\n    my $i;\n    for ($i = 0; $i < $len / 2; $i++)\
    \ {\n        if ($array[$i] ne $array[$len - $i - 1]) {\n            return \"\
    \";\n        }\n    }\n    return 1;\n}", "    my $len = length($text);\n    my\
    \ $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($text,\
    \ $i, 1) ne substr($text, $j, 1)) {\n            return \"\";\n        }\n   \
    \     $i = $i + 1;\n        $j = $j - 1;\n    }\n    return 1;\n}", "    if (length($text)\
    \ < 2) {\n        return 1;\n    }\n    if (substr($text, 0, 1) ne substr($text,\
    \ -1, 1)) {\n        return \"\";\n    }\n    is_palindrome(substr($text, 1, -1));\n\
    }", "    return \"\" if length($text) < 2;\n    return 1 if length($text) == 2\
    \ && substr($text, 0, 1) eq substr($text, 1, 1);\n    return is_palindrome(substr($text,\
    \ 1, length($text) - 2)) if substr($text, 0, 1) eq substr($text, length($text)\
    \ - 1, 1);\n    return \"\";\n}", "    if (length($text) < 2) {\n        return\
    \ 1;\n    } elsif (substr($text, 0, 1) eq substr($text, -1, 1)) {\n        return\
    \ is_palindrome(substr($text, 1, -1));\n    } else {\n        return \"\";\n \
    \   }\n}", "    my($first, $last);\n    $text =~ s/\\s+//g;\n    $first = substr($text,\
    \ 0, 1);\n    $last = substr($text, -1, 1);\n    if (length($text) < 2) {\n  \
    \      return 1;\n    }\n    elsif ($first eq $last) {\n        return is_palindrome(substr($text,\
    \ 1, -1));\n    }\n    else {\n        return \"\";\n    }\n}", "    return $text\
    \ if $text eq reverse $text;\n    return \"\";\n}", "    $text = lc($text);\n\
    \    my($first_char, $last_char) = (0, length($text) - 1);\n    while ($first_char\
    \ < $last_char) {\n        return \"\" if (substr($text, $first_char, 1) ne substr($text,\
    \ $last_char, 1));\n        $first_char++;\n        $last_char--;\n    }\n   \
    \ return 1;\n}", "    my $length = length($text);\n    my $middle = int($length\
    \ / 2);\n    my $i;\n    for ($i = 0; $i < $middle; $i++) {\n        if (substr($text,\
    \ $i, 1) ne substr($text, $length - $i - 1, 1)) {\n            return \"\";\n\
    \        }\n    }\n    return 1;\n}", "    $text =~ s/\\s+//g;\n    my $text_reversed\
    \ = reverse $text;\n    if ($text eq $text_reversed) {\n        return 1;\n  \
    \  }\n    return \"\";\n}", "    my $palindrome = 1;\n    if (length($text) <=\
    \ 1) {\n        return $palindrome;\n    }\n    else {\n        my $front = 0;\n\
    \        my $back = length($text) - 1;\n        while ($front < $back) {\n   \
    \         if (substr($text, $front, 1) ne substr($text, $back, 1)) {\n       \
    \         $palindrome = \"\";\n                last;\n            }\n        \
    \    $front++;\n            $back--;\n        }\n        return $palindrome;\n\
    \    }\n}", "    my @chars = split //, $text;\n    my $len = @chars;\n    for\
    \ (my $i = 0; $i < $len/2; $i++) {\n        if ($chars[$i] ne $chars[$len-$i-1])\
    \ {\n            return \"\";\n        }\n    }\n    return 1;\n}", "    my($rev)\
    \ = reverse $text;\n    my($res) = $text eq $rev ? 1 : \"\";\n    return $res;\n\
    }", "    if (not $text) {\n        return('');\n    }\n    my $r = reverse($text);\n\
    \    if ($text eq $r) {\n        return(1);\n    }\n    return('');\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
