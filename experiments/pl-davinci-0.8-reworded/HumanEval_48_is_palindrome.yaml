name: HumanEval_48_is_palindrome
language: pl
prompt: "# Checks if given string is a palindrome\n# >>> is_palindrome(\"\")\n# 1\n\
  # >>> is_palindrome(\"aba\")\n# 1\n# >>> is_palindrome(\"aaaaa\")\n# 1\n# >>> is_palindrome(\"\
  zbcd\")\n# \"\"\nsub is_palindrome {\n    my($text) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($revtext) = reverse($text);\n    if ($text eq $revtext) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    # empty\
    \ string is a palindrome\n    if (length($text) == 0) {\n        return 1;\n \
    \   }\n    my($l, $r) = (0, length($text) - 1);\n    # move left and right indices\
    \ towards each other\n    while ($l < $r) {\n        if (substr($text, $l, 1)\
    \ ne substr($text, $r, 1)) {\n            return '';\n        }\n        $l++;\n\
    \        $r--;\n    }\n    return 1;\n}", "    return $text eq reverse $text;\n\
    }", "    if (lc($text) eq reverse(lc($text))) {\n        return 1;\n    }\n  \
    \  return \"\";\n}", "    my $len = length($text);\n    my $i;\n    for($i = 0;\
    \ $i < $len / 2; $i++) {\n        if(substr($text, $i, 1) ne substr($text, $len\
    \ - $i - 1, 1)) {\n            return \"\";\n        }\n    }\n    return 1;\n\
    }", "    my($i, $j, $n);\n    if (length($text) == 0) {\n        return 1;\n \
    \   }\n    $n = length($text) - 1;\n    for ($i = 0, $j = $n; $i < $j; $i++, $j--)\
    \ {\n        if (substr($text, $i, 1) ne substr($text, $j, 1)) {\n           \
    \ return \"\";\n        }\n    }\n    return 1;\n}", "    my @array = split //,\
    \ $text;\n    my $len = @array;\n    my $i;\n    for ($i = 0; $i < $len / 2; $i++)\
    \ {\n        if ($array[$i] ne $array[$len - $i - 1]) {\n            return \"\
    \";\n        }\n    }\n    return 1;\n}", "    my $len = length($text);\n    my\
    \ $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($text,\
    \ $i, 1) ne substr($text, $j, 1)) {\n            return \"\";\n        }\n   \
    \     $i = $i + 1;\n        $j = $j - 1;\n    }\n    return 1;\n}", "    if (length($text)\
    \ < 2) {\n        return 1;\n    }\n    if (substr($text, 0, 1) ne substr($text,\
    \ -1, 1)) {\n        return \"\";\n    }\n    is_palindrome(substr($text, 1, -1));\n\
    }", "    return \"\" if length($text) < 2;\n    return 1 if length($text) == 2\
    \ && substr($text, 0, 1) eq substr($text, 1, 1);\n    return is_palindrome(substr($text,\
    \ 1, length($text) - 2)) if substr($text, 0, 1) eq substr($text, length($text)\
    \ - 1, 1);\n    return \"\";\n}", "    if (length($text) < 2) {\n        return\
    \ 1;\n    } elsif (substr($text, 0, 1) eq substr($text, -1, 1)) {\n        return\
    \ is_palindrome(substr($text, 1, -1));\n    } else {\n        return \"\";\n \
    \   }\n}", "    my($first, $last);\n    $text =~ s/\\s+//g;\n    $first = substr($text,\
    \ 0, 1);\n    $last = substr($text, -1, 1);\n    if (length($text) < 2) {\n  \
    \      return 1;\n    }\n    elsif ($first eq $last) {\n        return is_palindrome(substr($text,\
    \ 1, -1));\n    }\n    else {\n        return \"\";\n    }\n}", "    return $text\
    \ if $text eq reverse $text;\n    return \"\";\n}", "    $text = lc($text);\n\
    \    my($first_char, $last_char) = (0, length($text) - 1);\n    while ($first_char\
    \ < $last_char) {\n        return \"\" if (substr($text, $first_char, 1) ne substr($text,\
    \ $last_char, 1));\n        $first_char++;\n        $last_char--;\n    }\n   \
    \ return 1;\n}", "    my $length = length($text);\n    my $middle = int($length\
    \ / 2);\n    my $i;\n    for ($i = 0; $i < $middle; $i++) {\n        if (substr($text,\
    \ $i, 1) ne substr($text, $length - $i - 1, 1)) {\n            return \"\";\n\
    \        }\n    }\n    return 1;\n}", "    $text =~ s/\\s+//g;\n    my $text_reversed\
    \ = reverse $text;\n    if ($text eq $text_reversed) {\n        return 1;\n  \
    \  }\n    return \"\";\n}", "    my $palindrome = 1;\n    if (length($text) <=\
    \ 1) {\n        return $palindrome;\n    }\n    else {\n        my $front = 0;\n\
    \        my $back = length($text) - 1;\n        while ($front < $back) {\n   \
    \         if (substr($text, $front, 1) ne substr($text, $back, 1)) {\n       \
    \         $palindrome = \"\";\n                last;\n            }\n        \
    \    $front++;\n            $back--;\n        }\n        return $palindrome;\n\
    \    }\n}", "    my @chars = split //, $text;\n    my $len = @chars;\n    for\
    \ (my $i = 0; $i < $len/2; $i++) {\n        if ($chars[$i] ne $chars[$len-$i-1])\
    \ {\n            return \"\";\n        }\n    }\n    return 1;\n}", "    my($rev)\
    \ = reverse $text;\n    my($res) = $text eq $rev ? 1 : \"\";\n    return $res;\n\
    }", "    if (not $text) {\n        return('');\n    }\n    my $r = reverse($text);\n\
    \    if ($text eq $r) {\n        return(1);\n    }\n    return('');\n}", "   \
    \ my @A = split(//, $text);\n    my $x = @A;\n    for (my $i = 0; $i < $x; $i++)\
    \ {\n        my $j = $x - $i - 1;\n        if ($i < $j) {\n            if ($A[$i]\
    \ ne $A[$j]) {\n                return \"\";\n            }\n        }\n    }\n\
    \    return 1;\n}", "    my $i;\n    my $len = length($text);\n    my $mid = $len/2;\n\
    \    if ($len == 0) {\n        return 1;\n    }\n    for ($i = 0; $i < $mid; $i++)\
    \ {\n        if (substr($text, $i, 1) ne substr($text, $len-$i-1, 1)) {\n    \
    \        return \"\";\n        }\n    }\n    return 1;\n}", "    return \"\" if\
    \ !defined $text;\n    return $text eq reverse $text;\n}", "    my $i = 0;\n \
    \   my $n = length($text) - 1;\n    while ($i < $n) {\n        if (substr($text,\
    \ $i, 1) ne substr($text, $n, 1)) {\n            return \"\";\n        }\n   \
    \     $i++;\n        $n--;\n    }\n    return 1;\n}", "    my $i = 0;\n    my\
    \ $j = length($text) - 1;\n    while ($i < $j) {\n        if (substr($text, $i,\
    \ 1) ne substr($text, $j, 1)) {\n            return \"\";\n        }\n       \
    \ $i++;\n        $j--;\n    }\n    return 1;\n}", "    my $rev = reverse $text;\n\
    \    if ($text eq $rev) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   return 1 if $text eq '';\n    my $max_iterations = length($text) / 2;\n  \
    \  for (my $i = 0; $i < $max_iterations; $i++) {\n        my $left_char = substr($text,\
    \ $i, 1);\n        my $right_char = substr($text, -$i - 1, 1);\n        return\
    \ \"\" if $left_char ne $right_char;\n    }\n    return 1;\n}", "    my($i);\n\
    \    my($len) = length($text);\n    if ($len <= 1) {\n        return 1;\n    }\n\
    \    for ($i = 0; $i < $len / 2; $i++) {\n        if (substr($text, $i, 1) ne\
    \ substr($text, $len - $i - 1, 1)) {\n            return \"\";\n        }\n  \
    \  }\n    return 1;\n}", "    return 1 if $text eq '';\n    return '' if substr($text,\
    \ 0, 1) ne substr($text, -1, 1);\n    return is_palindrome(substr($text, 1, -1));\n\
    }", "    my($result);\n    my($i);\n    my($l);\n    $result = 1;\n    $l = length($text);\n\
    \    if($l > 1) {\n        for($i = 0; $i < ($l / 2); $i++) {\n            if(substr($text,\
    \ $i, 1) ne substr($text, ($l - $i - 1), 1)) {\n                $result = \"\"\
    ;\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "    return 0 if $text eq \"\";\n    my $c = 1;\n    my $i = 0;\n    my $j\
    \ = length($text) - 1;\n    while ($i < $j) {\n        $c = substr($text, $i,\
    \ 1);\n        $i++;\n        my $d = substr($text, $j, 1);\n        $j--;\n \
    \       return \"\" if $c ne $d;\n    }\n    return 1;\n}", "    my($result);\n\
    \    my($i);\n    if (length($text) == 0) {\n        $result = 1;\n    } else\
    \ {\n        $result = 1;\n        for ($i = 0; $i < length($text) / 2; $i++)\
    \ {\n            if (substr($text, $i, 1) ne substr($text, length($text) - $i\
    \ - 1, 1)) {\n                $result = \"\";\n            }\n        }\n    }\n\
    \    return $result;\n}", "    return \"\" if $text eq \"\";\n    for(my $i =\
    \ 0; $i < length($text) / 2; $i++) {\n        if(substr($text, $i, 1) ne substr($text,\
    \ length($text) - $i - 1, 1)) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    return 0 if ($text eq \"\");\n    my $rev = \"\";\n \
    \   for (my $i = length($text) - 1; $i >= 0; $i--) {\n        $rev .= substr($text,\
    \ $i, 1);\n    }\n    return ($rev eq $text) ? 1 : 0;\n}", "    $text =~ s/\\\
    s//g;\n    if ($text eq reverse $text) {\n        return $text;\n    }\n    return\
    \ \"\";\n}", "    my($i, $j, $len);\n    $len = length($text);\n    if ($len <\
    \ 2) {\n        return $text;\n    }\n    for ($i = 0, $j = $len - 1; $i < $len;\
    \ $i++, $j--) {\n        if (substr($text, $i, 1) ne substr($text, $j, 1)) {\n\
    \            return \"\";\n        }\n    }\n    return $text;\n}", "    if (reverse($text)\
    \ eq $text) {\n        return 1;\n    }\n    return \"\";\n}", "    my $left =\
    \ 0;\n    my $right = length($text) - 1;\n    while ($left < $right) {\n     \
    \   if (substr($text, $left, 1) ne substr($text, $right, 1)) {\n            return\
    \ \"\";\n        }\n        $left++;\n        $right--;\n    }\n    return 1;\n\
    }", "    #your code goes here\n    return 0 if $text eq '';\n    return 1 if $text\
    \ eq reverse $text;\n    return '';\n}", "    return 1 if $text eq '';\n    return\
    \ 1 if $text eq reverse $text;\n    return '';\n}", "    my($text_len) = length($text);\n\
    \    my($mid) = $text_len / 2;\n    my($is_palindrome) = 1;\n    my($i) = 0;\n\
    \    my($j) = $text_len - 1;\n    for (; $i < $mid && $is_palindrome; $i++, $j--)\
    \ {\n        if (substr($text, $i, 1) ne substr($text, $j, 1)) {\n           \
    \ $is_palindrome = 0;\n        }\n    }\n    return $is_palindrome;\n}", "   \
    \ return if !defined $text;\n    if (length($text) < 2) {\n        return 1;\n\
    \    } else {\n        if (substr($text, 0, 1) eq substr($text, -1, 1)) {\n  \
    \          return is_palindrome(substr($text, 1, -1));\n        } else {\n   \
    \         return;\n        }\n    }\n}", "    my $len = length($text);\n    for\
    \ (my $i = 0; $i < $len/2; $i++) {\n        if (substr($text, $i, 1) ne substr($text,\
    \ $len-$i-1, 1)) {\n            return \"\";\n        }\n    }\n    return 1;\n\
    }", "    if (length($text) < 2) {\n        return 1;\n    }\n    if (substr($text,\
    \ 0, 1) ne substr($text, -1, 1)) {\n        return \"\";\n    }\n    return is_palindrome(substr($text,\
    \ 1, -1));\n}", "    return 1 if length($text) <= 1;\n    return 0 if substr($text,\
    \ 0, 1) ne substr($text, -1, 1);\n    return is_palindrome(substr($text, 1, length($text)\
    \ - 2));\n}", "    my $len = length($text);\n    return 1 if $len < 2;\n    my\
    \ $half = int($len / 2);\n    return $text eq reverse_string(substr($text, $half));\n\
    }", "    return (length($text) == 0 || $text eq reverse($text));\n}", "    if\
    \ ($text eq reverse $text) {\n        return 1;\n    }\n    return \"\";\n}",
  "    return reverse($text) eq $text;\n}", "    my($back) = reverse($text);\n   \
    \ return ($text eq $back) ? 1 : \"\";\n}", "    return 0 if length($text) < 2;\n\
    \    my $rtext = reverse($text);\n    return 1 if $text eq $rtext;\n    return\
    \ 0;\n}", "    my $len = length($text);\n    return \"\" if $len % 2;\n    return\
    \ substr($text, $len/2, $len/2) eq reverse(substr($text, 0, $len/2));\n}", " \
    \   my($length) = length($text);\n    my($index);\n    my($index2);\n    if ($length\
    \ < 2) {\n        return 1;\n    }\n    for ($index = 0; $index < $length/2; $index++)\
    \ {\n        $index2 = $length - $index - 1;\n        if (substr($text, $index,\
    \ 1) ne substr($text, $index2, 1)) {\n            return \"\";\n        }\n  \
    \  }\n    return 1;\n}", "    my $reversed = reverse($text);\n    if ($text eq\
    \ $reversed) {\n        return 1;\n    }\n    return \"\";\n}", "    my($length)\
    \ = length($text);\n    my($left) = 0;\n    my($right) = $length - 1;\n    while\
    \ ($left < $right) {\n        if (substr($text, $left, 1) ne substr($text, $right,\
    \ 1)) {\n            return \"\";\n        }\n        $left = $left + 1;\n   \
    \     $right = $right - 1;\n    }\n    return 1;\n}", "    my $length = length($text);\n\
    \    if($length <= 1) {\n        return 1;\n    }\n    my $head = substr($text,\
    \ 0, 1);\n    my $tail = substr($text, $length - 1, 1);\n    if($head eq $tail)\
    \ {\n        return is_palindrome(substr($text, 1, $length - 2));\n    }\n   \
    \ return \"\";\n}", "    my($rev_text) = reverse($text);\n    if ($text eq $rev_text)\
    \ {\n        return \"1\";\n    }\n    else {\n        return \"\";\n    }\n}",
  "    my $len = length($text);\n    if ($len == 0 || $len == 1) {\n        return\
    \ 1;\n    } elsif (substr($text, 0, 1) eq substr($text, $len - 1, 1)) {\n    \
    \    return is_palindrome(substr($text, 1, $len - 2));\n    } else {\n       \
    \ return 0;\n    }\n}", "    if (length($text) < 1) {\n        return \"\";\n\
    \    }\n    my($first) = substr($text, 0, 1);\n    my($last) = substr($text, -1,\
    \ 1);\n    if ($first eq $last) {\n        is_palindrome(substr($text, 1, -1));\n\
    \    } else {\n        return \"\";\n    }\n    return 1;\n}", "    return \"\"\
    \ if length($text) == 0;\n    my $len = length($text);\n    my $text_rev = reverse($text);\n\
    \    for (my $i = 0; $i < $len; $i++) {\n        if(substr($text, $i, 1) ne substr($text_rev,\
    \ $i, 1)) {\n            return \"\";\n        }\n    }\n    return 1;\n}", " \
    \   my($result) = $text;\n    # my($result) = \"\";\n    # if ($text eq reverse($text))\
    \ {\n    #     $result = 1;\n    # }\n    if ($text ne reverse($text)) {\n   \
    \     $result = \"\";\n    }\n    return $result;\n}", "    my($i);\n    my($j);\n\
    \    my($n);\n    $n = length($text);\n    $i = 0;\n    $j = $n - 1;\n    while\
    \ ($i < $j) {\n        if (substr($text, $i, 1) ne substr($text, $j, 1)) {\n \
    \           return \"\";\n        }\n        $i = $i + 1;\n        $j = $j - 1;\n\
    \    }\n    return 1;\n}", "    my $len = length($text);\n    for(my $i = 0; $i\
    \ < $len / 2; $i++) {\n        if(substr($text, $i, 1) ne substr($text, $len -\
    \ $i - 1, 1)) {\n            return \"\";\n        }\n    }\n    return 1;\n}",
  "    $text =~ s/[^A-Za-z]//g;\n    return $text eq reverse $text;\n}", "    return\
    \ \"\" if( $text eq \"\" );\n    return 1 if( $text eq reverse($text) );\n   \
    \ return \"\";\n}", "    return 1 if ($text eq reverse $text);\n    return \"\"\
    ;\n}", "    $text =~ s/\\s//g;\n    my $length = length($text);\n    for (my $i\
    \ = 0; $i < $length / 2; $i++) {\n        if (substr($text, $i, 1) ne substr($text,\
    \ $length - $i - 1, 1)) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    #replace all non-alphabetic characters with empty string\n    $text\
    \ =~ s/[^a-zA-Z]//g;\n    #check if text is empty\n    if(length($text) == 0)\
    \ {\n\treturn \"\";\n    }\n    #check if text is a palindrome\n    if(lc($text)\
    \ eq scalar reverse lc($text)) {\n\treturn 1;\n    }\n    return \"\";\n}", " \
    \   my $l = length($text);\n    if ($l < 2) {\n        return 1;\n    } else {\n\
    \        return ($text =~ m/^(.).*?\\1$/);\n    }\n}", "    return 1 if length($text)\
    \ == 0;\n    my($min, $max) = (0, length($text) - 1);\n    while ($min < $max)\
    \ {\n        if (substr($text, $min, 1) ne substr($text, $max, 1)) {\n       \
    \     return \"\";\n        }\n        $min++;\n        $max--;\n    }\n    return\
    \ 1;\n}", "    my $leng = length($text);\n    if ($leng <= 1) {\n        return\
    \ $text;\n    }\n    else {\n        if (substr($text, 0, 1) ne substr($text,\
    \ $leng - 1, 1)) {\n            return \"\";\n        }\n        else {\n    \
    \        return is_palindrome(substr($text, 1, $leng - 2));\n        }\n    }\n\
    }", "    my($i, $length, $flag);\n    $length = length($text);\n    $flag = 1;\n\
    \    if ($length < 2) {\n        $flag = 1;\n    } else {\n        for ($i = 0;\
    \ $i < $length / 2; $i++) {\n            if(substr($text, $i, 1) ne substr($text,\
    \ $length - $i - 1, 1)) {\n                $flag = 0;\n                last;\n\
    \            }\n        }\n    }\n    if ($flag) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    return 1 if ($text eq \"\");\n    my\
    \ @text_chars = split(//, $text);\n    my $end = $#text_chars;\n    for (my $i\
    \ = 0; $i < $end / 2; $i++) {\n        return \"\" if ($text_chars[$i] ne $text_chars[$end\
    \ - $i]);\n    }\n    return 1;\n}", "    return $text if(length($text) < 2);\n\
    \    my $first = substr($text, 0, 1);\n    my $last = substr($text, -1);\n   \
    \ return ($first eq $last) ? 1 : \"\";\n}", "    return 1 if $text eq reverse\
    \ $text;\n    return \"\";\n}", "    my($rev_text) = reverse($text);\n    if ($text\
    \ eq $rev_text) {\n        return 1;\n    }\n    return '';\n}", "    if (length($text)\
    \ < 2) {\n        return 1;\n    }\n    elsif (substr($text, 0, 1) eq substr($text,\
    \ -1, 1)) {\n        is_palindrome(substr($text, 1, -1));\n    }\n    else {\n\
    \        return \"\";\n    }\n}", "    if($text eq '') {\n        return 1;\n\
    \    } elsif(length($text) == 1) {\n        return 1;\n    } else {\n        if(substr($text,\
    \ 0, 1) eq substr($text, -1, 1)) {\n            is_palindrome(substr($text, 1,\
    \ -1));\n        } else {\n            return '';\n        }\n    }\n}", "   \
    \ return 1 if $text eq reverse $text;\n    return '';\n}", "    return ($text\
    \ eq reverse $text) ? 1 : '';\n}", "    my @letters = split(//, $text);\n    while\
    \ (@letters) {\n        return if shift(@letters) ne pop(@letters);\n    }\n \
    \   return 1;\n}", "    my $len = length($text);\n    return \"\" if $len == 0;\n\
    \    my $mid = int($len / 2);\n    my $left = substr($text, 0, $mid);\n    my\
    \ $right = substr($text, $mid + $len % 2);\n    if ($len % 2 == 0) {\n       \
    \ $right = reverse($right);\n    } else {\n        $right = reverse(substr($right,\
    \ 1));\n    }\n    return $left eq $right;\n}", "    if (length($text) <= 1) {\n\
    \        return 1;\n    }\n    if (substr($text, 0, 1) eq substr($text, -1, 1))\
    \ {\n        return is_palindrome(substr($text, 1, -1));\n    }\n    return \"\
    \";\n}", "    my $len = length($text);\n    my $is_palindrome = 1;\n    for (my\
    \ $i = 0; $i < $len / 2; $i++) {\n        if (substr($text, $i, 1) ne substr($text,\
    \ $len - $i - 1, 1)) {\n            $is_palindrome = \"\";\n            last;\n\
    \        }\n    }\n    return $is_palindrome;\n}", "    if (length($text) <= 1)\
    \ {\n        return \"1\";\n    } else {\n        if (substr($text, 0, 1) ne substr($text,\
    \ -1, 1)) {\n            return \"\";\n        } else {\n            return is_palindrome(substr($text,\
    \ 1, -1));\n        }\n    }\n}", "    my $result = \"\";\n    my $start = 0;\n\
    \    my $end = length($text) - 1;\n    while($start < $end) {\n        if(substr($text,\
    \ $start, 1) ne substr($text, $end, 1)) {\n            return \"\";\n        }\n\
    \        $start++;\n        $end--;\n    }\n    return 1;\n}", "    return $text\
    \ if length($text) <= 1;\n    return \"\" unless substr($text, 0, 1) eq substr($text,\
    \ -1, 1);\n    return is_palindrome(substr($text, 1, length($text) - 2));\n}",
  "    my $length = length($text);\n    return 1 if $length == 0;\n    return \"\"\
    \ if $length == 1;\n    if(substr($text, 0, 1) eq substr($text, $length - 1, 1))\
    \ {\n        is_palindrome(substr($text, 1, $length - 2));\n    } else {\n   \
    \     \"\";\n    }\n}", "    # It is a palindrome if the reverse of the string\
    \ is the same as itself\n    return $text eq reverse $text;\n}", "    my($len)\
    \ = length($text);\n    for (my $i = 0; $i < $len; $i++) {\n        if (substr($text,\
    \ $i, 1) ne substr($text, $len - $i - 1, 1)) {\n            return 0;\n      \
    \  }\n    }\n    return 1;\n}", "    return(1) if(length($text) == 0);\n    return(1)\
    \ if(length($text) == 1);\n    return(1) if(length($text) == 2 && substr($text,\
    \ 0, 1) eq substr($text, 1, 1));\n    return(is_palindrome(substr($text, 1, length($text)\
    \ - 2))) if(substr($text, 0, 1) eq substr($text, length($text) - 1, 1));\n   \
    \ return(\"\");\n}", "    # empty string is a palindrome\n    return 1 if $text\
    \ eq \"\";\n    # check if first and last characters are the same\n    # if they\
    \ are, check if the middle of the string is a palindrome\n    if ($text =~ /^(.)(.*)(\\\
    1)$/) {\n        return is_palindrome($2);\n    }\n    # if it gets here, the\
    \ string is not a palindrome\n    return \"\";\n}", "    return (1) if ($text\
    \ eq reverse($text));\n    return \"\";\n}", "    my $reversed = reverse($text);\n\
    \    return ($text eq $reversed);\n}", "    # check if given string is a palindrome\n\
    \    my $text_reversed = reverse $text;\n    if ($text eq $text_reversed) {\n\
    \        return 1;\n    } else {\n        return \"\";\n    }\n}", "    my $len\
    \ = length($text);\n    for (my $i = 0; $i < $len/2; $i++) {\n        if (substr($text,\
    \ $i, 1) ne substr($text, $len-$i-1, 1)) {\n            return \"\";\n       \
    \ }\n    }\n    return 1;\n}", "    my $rev = reverse $text;\n    return ($text\
    \ eq $rev) ? 1 : '';\n}", "    return (reverse $text) eq $text;\n}", "    $text\
    \ =~ s/\\s+//g;\n    $text =~ s/[^a-zA-Z]//g;\n    my $check = join '', reverse\
    \ split //, $text;\n    if ($text eq $check) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    my $len = length($text);\n    for (my\
    \ $i = 0; $i < $len / 2; $i++) {\n        if (substr($text, $i, 1) ne substr($text,\
    \ $len - $i - 1, 1)) {\n            return 0;\n        }\n    }\n    return 1;\n\
    }", "    my $answer = \"\";\n    if ( scalar(@_) != 1 ) {\n        print \"Error:\
    \ one parameter expected!\\n\";\n        return $answer;\n    }\n    if ( $text\
    \ !~ /[a-zA-Z]/ ) {\n        print \"Error: given parameter is not a string!\\\
    n\";\n        return $answer;\n    }\n    my $pal = $text;\n    $pal =~ tr/A-Z/a-z/;\n\
    \    $pal = reverse($pal);\n    if ( $pal eq $text ) {\n        $answer = 1;\n\
    \    }\n    return $answer;\n}", "    my($res) = $text eq reverse $text;\n   \
    \ if ($res) {\n        return 1;\n    } else {\n        return \"\";\n    }\n}",
  "    if($text eq \"\"){\n\treturn 1;\n    }\n    if($text =~ /^(.)(.)(.*)(.)(.)$/){\n\
    \tif($1 eq $5){\n\t    if($2 eq $4){\n\t\treturn 1;\n\t    }\n\t    return is_palindrome($3);\n\
    \t}\n    }\n    return \"\";\n}", "    return is_palindrome_iter($text, 0, length($text)\
    \ - 1);\n}", "    my $rev = reverse($text);\n    my $ret = ($text eq $rev) ? \"\
    1\" : \"\";\n    return $ret;\n}", "    if ($text eq \"\") {\n        return \"\
    \";\n    }\n    my $length = length($text);\n    my $i = 0;\n    my $j = $length\
    \ - 1;\n    while ($i < $j) {\n        if (substr($text, $i, 1) ne substr($text,\
    \ $j, 1)) {\n            return \"\";\n        }\n        $i = $i + 1;\n     \
    \   $j = $j - 1;\n    }\n    return 1;\n}", "    my $clean_text = $text;\n   \
    \ $clean_text =~ s/\\W//g;\n    my $rev_text = reverse $clean_text;\n    if ($clean_text\
    \ eq $rev_text) {\n        return 1;\n    }\n    return \"\";\n}", "    my($length)\
    \ = length($text);\n    return \"\" if $length < 2;\n    for (my $i = 0; $i <\
    \ $length / 2; $i++) {\n        return \"\" if substr($text, $i, 1) ne substr($text,\
    \ $length - $i - 1, 1);\n    }\n    return 1;\n}", "    if ($text eq reverse $text)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my($text_rev) = reverse\
    \ $text;\n    if ($text eq $text_rev) {\n        return 1;\n    } else {\n   \
    \     return \"\";\n    }\n}", "    my $reverse = reverse($text);\n    if ($text\
    \ eq $reverse) {\n        return 1;\n    }\n    return \"\";\n}", "    my @letters\
    \ = split //, $text;\n    for (my $i = 0; $i < scalar(@letters) / 2; $i++) {\n\
    \        if ($letters[$i] ne $letters[scalar(@letters) - $i - 1]) {\n        \
    \    return \"\";\n        }\n    }\n    return 1;\n}", "    my $reversed_text\
    \ = reverse $text;\n    if ($text eq $reversed_text) {\n        return 1;\n  \
    \  }\n    return \"\";\n}", "    my $rev = reverse $text;\n    return ($text eq\
    \ $rev);\n}", "    my($rev) = reverse $text;\n    return $text eq $rev;\n}", " \
    \   my $palindrome = 0;\n    if(!$text){\n        $palindrome = 1;\n    }\n  \
    \  else{\n        if ($text eq reverse $text){\n            $palindrome = 1;\n\
    \        }\n    }\n    if ($palindrome){\n        return 1;\n    }\n    else{\n\
    \        return \"\";\n    }\n}", "    $text =~ s/\\s+//g;\n    if ($text) {\n\
    \        return 1 if $text eq reverse $text;\n    }\n    return \"\";\n}", " \
    \   if(reverse($text) eq $text) {\n        return 1;\n    }\n    return \"\";\n\
    }", "    return \"\" if $text eq \"\";\n    my @letters = split //, $text;\n \
    \   while ( @letters ) {\n        return \"\" if $letters[0] ne $letters[-1];\n\
    \        shift @letters;\n        pop @letters;\n    }\n    return 1;\n}", " \
    \   my $len = length($text);\n    for (my $i = 0; $i < $len/2; $i++) {\n     \
    \   return \"\" if (substr($text, $i, 1) ne substr($text, $len-$i-1, 1));\n  \
    \  }\n    return 1;\n}", "    my $i = 0;\n    my $j = length($text) - 1;\n   \
    \ while($i <= $j) {\n        return \"\" if(substr($text, $i, 1) ne substr($text,\
    \ $j, 1));\n        $i++;\n        $j--;\n    }\n    return 1;\n}", "    my $textrev\
    \ = reverse $text;\n    if ($textrev eq $text) {\n        return 1;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    $text = reverse $text;\n    #print\
    \ $text . \"\\n\";\n    return($text);\n}", "    my $palindrome = \"\";\n    my\
    \ $mid = int(length($text)/2);\n    if (length($text) == 0 || length($text) ==\
    \ 1) {\n        $palindrome = \"1\";\n    }\n    elsif (substr($text, 0, 1) eq\
    \ substr($text, length($text)-1, 1)) {\n        $palindrome = is_palindrome(substr($text,\
    \ 1, $mid));\n    }\n    else {\n        $palindrome = \"\";\n    }\n    return\
    \ $palindrome;\n}", "    return 0 if length($text) < 1;\n    if (length($text)\
    \ == 1) {\n        return 1;\n    } else {\n        if (substr($text, 0, 1) eq\
    \ substr($text, -1, 1)) {\n            return is_palindrome(substr($text, 1, -1));\n\
    \        } else {\n            return 0;\n        }\n    }\n}", "    return $text\
    \ eq reverse $text;\n}", "    my $l = length($text);\n    if ($l == 0) {\n   \
    \     return 1;\n    }\n    if ($l == 1) {\n        return 1;\n    }\n    if (substr($text,\
    \ 0, 1) ne substr($text, $l - 1, 1)) {\n        return \"\";\n    }\n    else\
    \ {\n        return is_palindrome(substr($text, 1, $l - 2));\n    }\n}", "   \
    \ # check input\n    return \"\" if(not defined $text);\n    return \"\" if(not\
    \ length $text);\n    # validate each char\n    my $half_length = int length($text)\
    \ / 2;\n    for(my $i = 0; $i < $half_length; $i++) {\n        my $char1 = $text->[$i];\n\
    \        my $char2 = $text->[-1 - $i];\n        return \"\" if($char1 ne $char2);\n\
    \    }\n    return 1;\n}", "    return $text eq reverse $text;\n}", "    my $palindrome;\n\
    \    my $length = length($text);\n    for (my $i = 0; $i < $length; $i++) {\n\
    \        if (substr($text, $i, 1) eq substr($text, $length - $i - 1, 1)) {\n \
    \           $palindrome = 1;\n        } else {\n            $palindrome = \"\"\
    ;\n            last;\n        }\n    }\n    return $palindrome;\n}", "    return\
    \ 1 if(length($text) <= 1);\n    return ($text =~ /^(.)(.)?\\2\\1$/);\n}", " \
    \   # $text =~ s/[\\s|'|\"|,|.|\\?|!|:|;|]//g; # strip punctuation, quotes, etc.\n\
    \    $text = lc($text);\n    my $length = length($text);\n    for (my $i = 0;\
    \ $i < $length/2; $i++) {\n        if (substr($text, $i, 1) ne substr($text, $length\
    \ - $i - 1, 1)) {\n            return \"\";\n        }\n    }\n    return 1;\n\
    }", "    my($new_text) = reverse $text;\n    if ($text eq $new_text) {\n     \
    \   return 1;\n    }\n    return 0;\n}", "    $text = lc($text);\n    return \"\
    \" if length($text) < 2;\n    return 1 if length($text) == 2 and substr($text,\
    \ 0, 1) eq substr($text, 1, 1);\n    return is_palindrome(substr($text, 1, length($text)\
    \ - 2)) if substr($text, 0, 1) eq substr($text, length($text) - 1, 1);\n    return\
    \ \"\";\n}", "    if($text =~ /^(.)(.*)\\1$/) {\n        my $rest = $2;\n    \
    \    if(!$rest) {\n            return 1;\n        } else {\n            return\
    \ is_palindrome($rest);\n        }\n    } else {\n        return \"\";\n    }\n\
    }", "    return(($text eq reverse($text)) ? 1 : \"\");\n}", "    return ($text\
    \ eq reverse $text);\n}", "    my $left = 0;\n    my $right = length($text) -\
    \ 1;\n    while ($left < $right) {\n        if (substr($text, $left, 1) ne substr($text,\
    \ $right, 1)) {\n            return \"\";\n        }\n        $left++;\n     \
    \   $right--;\n    }\n    return 1;\n}", "    my($len) = length($text);\n    for\
    \ (my $i = 0; $i < $len / 2; $i++) {\n        if (substr($text, $i, 1) ne substr($text,\
    \ $len - $i - 1, 1)) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    return $text eq reverse $text;\n}", "    return \"\" if length($text)\
    \ == 0;\n    my $len = length($text);\n    return \"\" if ($len == 1);\n    my\
    \ $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        return \"\" if\
    \ (substr($text, $i, 1) ne substr($text, $j, 1));\n        $i++;\n        $j--;\n\
    \    }\n    return 1;\n}", "    my $clean_text = clean_string($text);\n    my\
    \ $text_rev = reverse($clean_text);\n    if ($clean_text eq $text_rev) {\n   \
    \     return 1;\n    } else {\n        return \"\";\n    }\n}", "    #print \"\
    is_palindrome($text)\\n\";\n    return $text if length($text) < 2;\n    if (substr($text,\
    \ 0, 1) eq substr($text, -1, 1)) {\n        return is_palindrome(substr($text,\
    \ 1, length($text) - 2));\n    } else {\n        return \"\";\n    }\n}", "  \
    \  my @a = split //, $text;\n    my $min = 0;\n    my $max = $#a;\n    while ($min\
    \ < $max) {\n        if ($a[$min] ne $a[$max]) {\n            return \"\";\n \
    \       }\n        $min++;\n        $max--;\n    }\n    return 1;\n}", "    my($len)\
    \ = length($text);\n    my($result);\n    if($len<=1) {\n        $result = 1;\n\
    \    } else {\n        my($first_char) = substr($text,0,1);\n        my($last_char)\
    \ = substr($text,$len-1,1);\n        if($first_char eq $last_char) {\n       \
    \     $result = is_palindrome(substr($text,1,$len-2));\n        } else {\n   \
    \         $result = '';\n        }\n    }\n    return $result;\n}", "    # Removes\
    \ spaces, makes lowercase\n    my $string = $text;\n    $string =~ s/\\s//g;\n\
    \    $string = lc($string);\n    my $size = length($string);\n    for (my $i =\
    \ 0; $i < $size; $i++) {\n        my $end = $size - $i - 1;\n        if (substr($string,\
    \ $i, 1) ne substr($string, $end, 1)) {\n            return \"\";\n        }\n\
    \    }\n    return 1;\n}", "    my $tmp = $text;\n    $tmp =~ s/\\s//g;\n    $tmp\
    \ =~ tr/A-Z/a-z/;\n    return $tmp eq reverse $tmp;\n}", "    if ($text eq reverse\
    \ $text) {\n        return 1;\n    }\n    return '';\n}", "    my $revtext = reverse($text);\n\
    \    if($text eq $revtext) {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    my($slen) = length($text);\n    my($hlen) = int($slen\
    \ / 2);\n    my($i);\n    for ($i = 0; $i < $hlen; $i++) {\n        if (substr($text,\
    \ $i, 1) ne substr($text, $slen - $i - 1, 1)) {\n            return \"\";\n  \
    \      }\n    }\n    return 1;\n}", "    my $new_text = $text;\n    $new_text\
    \ =~ s/[^a-z]//gi;\n    $new_text = lc($new_text);\n    return ($new_text eq reverse($new_text));\n\
    }", "    return \"\" if !$text;\n    $text =~ tr/[A-Z]/[a-z]/; # ignore case\n\
    \    return $text eq reverse $text;\n}", "    if ($text eq reverse $text) {\n\
    \        return 1;\n    }\n    return 0;\n}", "    my $reverse_text = reverse\
    \ $text;\n    if ($text eq $reverse_text) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", "    my $len = length($text);\n    if ($len < 2) {\n        return\
    \ 1;\n    }\n    my $half = int($len / 2);\n    for my $i (0 .. $half) {\n   \
    \     if (substr($text, $i, 1) ne substr($text, $len - $i - 1, 1)) {\n       \
    \     return \"\";\n        }\n    }\n    return 1;\n}", "    return \"\" if $text\
    \ !~ /^\\w+$/;\n    $text = lc($text);\n    my $len = length($text);\n    for(my\
    \ $i = 0; $i < $len/2; $i++) {\n        return \"\" if substr($text, $i, 1) ne\
    \ substr($text, $len - $i - 1, 1);\n    }\n    return 1;\n}", "    my($text_size)\
    \ = length($text);\n    return 1 if $text_size == 0;\n    my($i, $j) = (0, $text_size\
    \ - 1);\n    while ($i < $j) {\n        if (substr($text, $i, 1) ne substr($text,\
    \ $j, 1)) {\n            return \"\";\n        }\n        $i = $i + 1;\n     \
    \   $j = $j - 1;\n    }\n    return 1;\n}", "    my $length = length($text);\n\
    \    if ($length <= 1) {\n        return 1;\n    }\n    my $halfLength = int($length\
    \ / 2);\n    for (my $i = 0; $i < $halfLength; $i++) {\n        if (substr($text,\
    \ $i, 1) ne substr($text, $length - $i - 1, 1)) {\n            return \"\";\n\
    \        }\n    }\n    return 1;\n}", "    if (reverse($text) eq $text) {\n  \
    \      return 1;\n    }\n    return \"\";\n}", "    my @letters = split(//, $text);\n\
    \    my $i = 0;\n    my $j = @letters-1;\n    while ($i < $j) {\n        return\
    \ 0 if $letters[$i] ne $letters[$j];\n        $i++;\n        $j--;\n    }\n  \
    \  return 1;\n}", "    my $i = length($text);\n    return 1 if $i == 0;\n    for\
    \ ($i = 0; $i < length($text)/2; $i++) {\n        return \"\" if substr($text,\
    \ $i, 1) ne substr($text, length($text)-$i-1, 1);\n    }\n    return 1;\n}", " \
    \   my($text_no_white) = $text;\n    $text_no_white =~ s/\\s//g;\n    if ($text_no_white\
    \ eq reverse($text_no_white)) {\n        return $text;\n    }\n    return \"\"\
    ;\n}", "    my $backwards_text = reverse($text);\n    if($text eq $backwards_text)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    my $len = length($text);\n\
    \    my $l = int($len / 2);\n    for (my $i = 0; $i < $l; $i++) {\n        return\
    \ \"\" if (substr($text, $i, 1) ne substr($text, $len - $i - 1, 1));\n    }\n\
    \    return 1;\n}", "    my $len = length($text);\n    for(my $i = 0; $i < $len\
    \ / 2; $i++) {\n        return \"\" if(chop($text) ne substr($text, $i, 1));\n\
    \    }\n    return 1;\n}", "    my $rev = reverse $text;\n    if ($text eq $rev)\
    \ {\n        return 1;\n    }\n    return \"\";\n}", "    #text has length of\
    \ 0\n    if(length($text) == 0) {\n        return 1;\n    }\n    #text has length\
    \ of 1\n    elsif(length($text) == 1) {\n        return 1;\n    }\n    #text has\
    \ length of 2\n    elsif(length($text) == 2) {\n        if(substr($text, 0, 1)\
    \ eq substr($text, 1, 1)) {\n            return 1;\n        }\n        else {\n\
    \            return \"\";\n        }\n    }\n    #text has length of 3 or more\n\
    \    else {\n        #first two characters are different\n        if(substr($text,\
    \ 0, 1) ne substr($text, -1, 1)) {\n            return \"\";\n        }\n    \
    \    #first two characters are the same\n        else {\n            return is_palindrome(substr($text,\
    \ 1, -1));\n        }\n    }\n}", "    return $text eq reverse $text;\n}", " \
    \   $text =~ tr/a-z/A-Z/;\n    my $leng = length($text);\n    for (my $i = 0;\
    \ $i < $leng; $i++) {\n        if (substr($text, $i, 1) ne substr($text, $leng\
    \ - $i - 1, 1)) {\n            return \"\";\n        }\n    }\n    return 1;\n\
    }", "    return 0 if !$text;\n    my $n = length($text);\n    for (my $i = 0;\
    \ $i < $n/2; $i++) {\n        return 0 if substr($text, $i, 1) ne substr($text,\
    \ $n-$i-1, 1);\n    }\n    return 1;\n}", "    return $text if(length($text) ==\
    \ 1);\n    return \"\" if(substr($text, 0, 1) ne substr($text, -1, 1));\n    return\
    \ is_palindrome(substr($text, 1, length($text) - 2));\n}", "    return 1 if length($text)\
    \ <= 1;\n    return \"\" if substr($text, 0, 1) ne substr($text, -1, 1);\n   \
    \ return is_palindrome(substr($text, 1, length($text) - 2));\n}", "    if ($text\
    \ eq reverse $text) {\n        return 1;\n    }\n    return \"\";\n}", "    my\
    \ $reverse = reverse($text);\n    $text eq $reverse ? 1 : \"\";\n}", "    return\
    \ $text eq reverse $text;\n}", "    my $i=0;\n    my $last_i = length($text)-1;\n\
    \    while($i < length($text)/2) {\n        if(substr($text,$i,1) ne substr($text,$last_i-$i,1))\
    \ {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}",
  "    my $len = length($text);\n    if ($len == 0) {\n        return 1;\n    }\n\
    \    my $max_index = $len - 1;\n    my $mid = int($len / 2);\n    for (my $i =\
    \ 0; $i < $mid; $i++) {\n        my $a = substr($text, $i, 1);\n        my $b\
    \ = substr($text, $max_index - $i, 1);\n        if ($a ne $b) {\n            return\
    \ '';\n        }\n    }\n    return 1;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text if ( length($text) <= 1 );\n    my $a = substr($text, 0,\
    \ 1);\n    my $b = substr($text, -1, 1);\n    if ($a eq $b) {\n        return\
    \ is_palindrome(substr($text, 1, -1));\n    }\n    return \"\";\n}", "    return\
    \ \"\" if ($text eq \"\");\n    return 1 if (reverse($text) eq $text);\n    return\
    \ 0;\n}", "    my $ret = 1;\n    my $length = length($text);\n    for (my $i =\
    \ 0; $i < $length / 2; $i++) {\n        if (substr($text, $i, 1) ne substr($text,\
    \ $length - $i - 1, 1)) {\n            $ret = \"\";\n            last;\n     \
    \   }\n    }\n    return $ret;\n}", "    return $text eq reverse $text;\n}", " \
    \   return \"\" if ($text eq \"\");\n    my $r_text = reverse $text;\n    if ($text\
    \ eq $r_text) {\n        return 1;\n    } else {\n        return \"\";\n    }\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    if($text eq reverse $text) {\n\treturn 1;\n    }\n    return \"\";\n}",
  "    return 1 if $text eq scalar reverse $text;\n    return '';\n}", "    my($length)\
    \ = length($text);\n    my($i);\n    my($prev) = 0;\n    my($next) = $length -\
    \ 1;\n    for($i = 0; $i < $length; $i++) {\n        if(substr($text, $prev, 1)\
    \ ne substr($text, $next, 1)) {\n            return 0;\n        }\n        $prev++;\n\
    \        $next--;\n    }\n    return 1;\n}", "    my $length = length($text);\n\
    \    my $result = 1;\n    if ($length > 1) {\n        my $first = substr($text,\
    \ 0, 1);\n        my $last = substr($text, -1, 1);\n        if ($first eq $last)\
    \ {\n            my $subtext = substr($text, 1, -1);\n            $result = is_palindrome($subtext);\n\
    \        } else {\n            $result = \"\";\n        }\n    }\n    return $result;\n\
    }", "    my $n = length($text);\n    for(my $i = 0; $i < int($n/2); $i++) {\n\
    \        if(substr($text, $i, 1) ne substr($text, $n-$i-1, 1)) {\n           \
    \ return \"\";\n        }\n    }\n    return 1;\n}", "    my($text_length) = length($text);\n\
    \    my($i);\n    for ($i = 0; $i < $text_length / 2; $i++) {\n        my($char1)\
    \ = substr($text, $i, 1);\n        my($char2) = substr($text, $text_length - $i\
    \ - 1, 1);\n        if ($char1 ne $char2) {\n            return 0;\n        }\n\
    \    }\n    return 1;\n}", "    return $text if ($text eq reverse $text);\n  \
    \  return;\n}", "    my($result) = \"\";\n    my($i) = 0;\n    my($j) = length($text)\
    \ - 1;\n    while ($i < $j) {\n        if (substr($text, $i, 1) ne substr($text,\
    \ $j, 1)) {\n            return \"\";\n        }\n        $i = $i + 1;\n     \
    \   $j = $j - 1;\n    }\n    return 1;\n}", "    return $text if ($text eq reverse\
    \ $text);\n    return \"\";\n}", "    # Put your code here\n    my $left = 0;\n\
    \    my $right = length($text) - 1;\n    while ($left < $right) {\n        if\
    \ (substr($text, $left, 1) ne substr($text, $right, 1)) {\n            return\
    \ \"\";\n        }\n        $left++;\n        $right--;\n    }\n    return 1;\n\
    }", "    my $len = length($text);\n    if ($len == 0) {\n        return \"\";\n\
    \    }", "    my $n = length($text);\n    for(my $i = 0; $i < $n/2; $i++) {\n\
    \        return \"\" if substr($text, $i, 1) ne substr($text, $n - $i - 1, 1);\n\
    \    }\n    return 1;\n}", "    my $len = length($text);\n    my $half_len = int($len\
    \ / 2);\n    for(my $i = 0; $i < $half_len; $i++) {\n        if(substr($text,\
    \ $i, 1) ne substr($text, $len - $i - 1, 1)) {\n            return \"\";\n   \
    \     }\n    }\n    return 1;\n}", "    my $text_length = length($text);\n   \
    \ if ($text_length == 0) {\n        return \"\";\n    }\n    if ($text_length\
    \ == 1) {\n        return 1;\n    }\n    my $pivot = int($text_length / 2);\n\
    \    if ($text_length % 2 == 0) {\n        # even number of characters\n     \
    \   if (substr($text, 0, $pivot) eq substr($text, $pivot, $pivot)) {\n       \
    \     return 1;\n        }\n    } else {\n        # odd number of characters\n\
    \        if (substr($text, 0, $pivot) eq substr($text, $pivot + 1, $pivot)) {\n\
    \            return 1;\n        }\n    }\n    return \"\";\n}", "    my $palindrome;\n\
    \    if ($text eq reverse $text) {\n        $palindrome = 1;\n    } else {\n \
    \       $palindrome = '';\n    }\n    return $palindrome;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
