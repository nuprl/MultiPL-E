name: HumanEval_95_check_dict_case
language: pl
prompt: "# Given a hash, return 1 if all keys are strings in lower \n# case or all\
  \ keys are strings in upper case, else return .\n# The function should return  is\
  \ the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" => \"apple\"\
  , \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" =>\
  \ \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"\
  apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
  \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
  \ {\n    my($dict) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
  \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
  }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
  Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($lower_flag) = 1;\n    my($upper_flag) = 1;\n    if (scalar(keys(%{$dict}))\
    \ == 0) {\n        return 1;\n    }\n    foreach my $key (keys(%{$dict})) {\n\
    \        $lower_flag = 0 if ($key =~ /[A-Z]/);\n        $upper_flag = 0 if ($key\
    \ =~ /[a-z]/);\n    }\n    return ($lower_flag == 1 or $upper_flag == 1) ? 1 :\
    \ \"\";\n}", "    my($key, $value);\n    my($all_upper, $all_lower) = (1, 1);\n\
    \    my($is_empty) = 1;\n    while(($key, $value) = each %$dict) {\n        $is_empty\
    \ = 0;\n        $all_upper = 0 if $key =~ /[a-z]/;\n        $all_lower = 0 if\
    \ $key =~ /[A-Z]/;\n    }\n    return $is_empty ? '' : $all_upper || $all_lower;\n\
    }", "    my $key;\n    my @keys = keys %$dict;\n    my $value;\n    my $retval\
    \ = 1;\n    if (scalar @keys == 0) {\n        return $retval;\n    }\n    foreach\
    \ $key (@keys) {\n        if (lc($key) eq $key) {\n            $value = 1;\n \
    \       }\n        else {\n            $value = -1;\n        }\n        if ($retval\
    \ == 1) {\n            $retval = $value;\n        }\n        elsif ($retval !=\
    \ $value) {\n            return \"\";\n        }\n    }\n    return $retval;\n\
    }", "    my @keys = keys(%$dict);\n    my $key0 = $keys[0];\n    my $case0 = ($key0\
    \ =~ /[A-Z]/) ? 'upper' : 'lower';\n    my $case = \"\";\n    my $all = 1;\n \
    \   foreach my $key (@keys) {\n        $case = ($key =~ /[A-Z]/) ? 'upper' : 'lower';\n\
    \        if ($case ne $case0) {\n            $all = 0;\n            last;\n  \
    \      }\n    }\n    if ($all) {\n        return $case0;\n    }\n    return \"\
    \";\n}", "    my @keys = keys %$dict;\n    my $type = uc($keys[0]) eq $keys[0]\
    \ ? \"upper\" : \"lower\";\n    return 0 if !$type;\n    for my $key (@keys) {\n\
    \        return 0 if $type eq \"upper\" ? $key !~ /^[A-Z]+$/ : $key !~ /^[a-z]+$/;\n\
    \    }\n    return 1;\n}", "    # TODO: finish the rest of this code!\n    # 1.\
    \ Find keys in dict whose values are not strings\n    # 2. Find keys in dict whose\
    \ values are lower case\n    # 3. Find keys in dict whose values are upper case\n\
    \    # 4. Check if you found all lower case keys, all upper case keys, or neither\n\
    }", "    my $keys = join(\"\", keys %$dict);\n    if ($keys =~ /[A-Z]/) {\n  \
    \      if ($keys =~ /[a-z]/) {\n            return \"\";\n        }\n        else\
    \ {\n            return 1;\n        }\n    }\n    else {\n        return 1;\n\
    \    }\n}", "    my @keys = keys %$dict;\n    if (@keys == 0) {\n        return\
    \ $EMPTY;\n    }", "    my $check = \"\";\n    my $mixed = \"\";\n    my $mixed_case_keys\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        if ($check eq \"\") {\n \
    \           $check = is_uppercase($key);\n        } else {\n            if ($check\
    \ ne is_uppercase($key)) {\n                $mixed_case_keys = 1;\n          \
    \  }\n        }\n    }\n    return $mixed_case_keys eq 1 ? \"\" : 1;\n}", "  \
    \  my @keys = keys %$dict;\n    if (@keys == 0) {\n        return \"\";\n    }\n\
    \    my $first_key = shift @keys;\n    if ($first_key =~ /[A-Z]/) {\n        for\
    \ my $key (@keys) {\n            if ($key !~ /[A-Z]/) {\n                return\
    \ \"\";\n            }\n        }\n    } else {\n        for my $key (@keys) {\n\
    \            if ($key !~ /[a-z]/) {\n                return \"\";\n          \
    \  }\n        }\n    }\n    return 1;\n}", "    my($key, $val);\n    my($all_lower,\
    \ $all_upper) = (1, 1);\n    if (!%$dict) {\n        return \"\";\n    }\n   \
    \ while(($key, $val) = each %$dict) {\n        $all_lower = $all_lower && ($key\
    \ =~ /^[a-z]*$/);\n        $all_upper = $all_upper && ($key =~ /^[A-Z]*$/);\n\
    \    }\n    return ($all_lower || $all_upper) ? 1 : \"\";\n}", "    my @strs =\
    \ qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my @stri = qw(A\
    \ B C D E F G H I J K L M N O P Q R S T U V W X Y Z);\n    # my $f1 = 1;\n   \
    \ # my $f2 = 1;\n    # foreach my $key (keys %$dict) {\n    #     $f1 = 0 if(!($key\
    \ ~~ @strs));\n    #     $f2 = 0 if(!($key ~~ @stri));\n    # }\n    # return\
    \ \"1\" if($f1 || $f2);\n    # return \"\";\n    my $ref = 1;\n    my $c1 = \"\
    \";\n    my $c2 = \"\";\n    foreach my $key (keys %$dict) {\n        $c1 = $key\
    \ if(!$c1);\n        $c2 = $key if(!$c2);\n        $ref = 0 if($c1 ne $key &&\
    \ $c2 ne $key);\n    }\n    return \"\" if(!$ref);\n    return \"1\" if($c1 ~~\
    \ @strs);\n    return \"1\" if($c1 ~~ @stri);\n    return \"\";\n}", "    my($sum_lc,\
    \ $sum_uc);\n    foreach my $k (keys %$dict) {\n        if ($k =~ /^[a-z]+$/)\
    \ {\n            $sum_lc++;\n        } elsif ($k =~ /^[A-Z]+$/) {\n          \
    \  $sum_uc++;\n        }\n    }\n    if ($sum_lc == keys %$dict) {\n        return\
    \ 1;\n    } elsif ($sum_uc == keys %$dict) {\n        return 1;\n    } else {\n\
    \        return \"\";\n    }\n}", "    my $i = 0;\n    foreach my $k (keys(%$dict))\
    \ {\n        if($i == 0) {\n            if(is_upper($k)) {\n                $i\
    \ = 1;\n            } else {\n                $i = 2;\n            }\n       \
    \ } elsif($i == 1) {\n            if(is_lower($k)) {\n                return \"\
    \";\n            }\n        } elsif($i == 2) {\n            if(is_upper($k)) {\n\
    \                return \"\";\n            }\n        }\n    }\n    return 1;\n\
    }", "    if (scalar(keys(%{$dict})) eq 0) {\n        return 1;\n    }\n    my\
    \ $result = 1;\n    my $count = 0;\n    my $first_key = \"\";\n    foreach my\
    \ $key (keys(%{$dict})) {\n        if ($count eq 0) {\n            $first_key\
    \ = $key;\n        } else {\n            if (uc($first_key) ne uc($key)) {\n \
    \               $result = \"\";\n                last;\n            }\n      \
    \  }\n        $count++;\n    }\n    return $result;\n}", "    my($key, $val);\n\
    \    my($count_upper, $count_lower) = (0, 0);\n    foreach $key (keys %$dict)\
    \ {\n        if (is_upper($key)) {\n            $count_upper += 1;\n        }\n\
    \        elsif (is_lower($key)) {\n            $count_lower += 1;\n        }\n\
    \        else {\n            return \"\";\n        }\n    }\n    if ($count_upper\
    \ == 0) {\n        return 1;\n    }\n    elsif ($count_lower == 0) {\n       \
    \ return 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    if (keys\
    \ %$dict == 0) {\n        return \"\";\n    } else {\n        my $case = 1;\n\
    \        my @values = values %$dict;\n        foreach my $key (keys %$dict) {\n\
    \            if (uc $key ne $key and lc $key ne $key) {\n                $case\
    \ = 0;\n                last;\n            }\n        }\n        return $case;\n\
    \    }\n}", "    return if (keys %$dict == 0);\n    my $result = 1;\n    my $default_case\
    \ = 'lower';\n    foreach my $key (keys %$dict) {\n        next if ($key eq '');\n\
    \        my $lc_key = lc($key);\n        my $uc_key = uc($key);\n        if ($key\
    \ eq $lc_key) {\n            return if ($default_case eq 'upper');\n         \
    \   $default_case = 'lower';\n        }\n        elsif ($key eq $uc_key) {\n \
    \           return if ($default_case eq 'lower');\n            $default_case =\
    \ 'upper';\n        }\n        else {\n            return;\n        }\n    }\n\
    \    return $result;\n}", "    return 1 if ! keys %$dict; # empty\n    my $ck\
    \ = 0;\n    foreach my $k (keys %$dict) {\n        $ck = 1 if $k =~ /[A-Z]/;\n\
    \        $ck = 2 if $k =~ /[a-z]/;\n    }\n    return 1 if $ck == 1;\n    return\
    \ 1 if $ck == 2;\n    return \"\";\n}", "    my $is_ok = 1;\n    my $key;\n  \
    \  my $key_name;\n    foreach $key_name ( keys %$dict ) {\n        $key = $key_name;\n\
    \        if(($key_name =~ m/^[a-z]/) or ($key_name =~ m/^[A-Z]/)) {\n        \
    \    if($key_name =~ m/^[a-z]/) {\n                if($key !~ m/^[a-z]/) {\n \
    \                   $is_ok = \"\";\n                    last;\n              \
    \  }\n            }\n            if($key_name =~ m/^[A-Z]/) {\n              \
    \  if($key !~ m/^[A-Z]/) {\n                    $is_ok = \"\";\n             \
    \       last;\n                }\n            }\n        }\n        else {\n \
    \           $is_ok = \"\";\n            last;\n        }\n    }\n    return $is_ok;\n\
    }", "    my $flag = 1;\n    foreach my $key (keys %$dict) {\n\tif( $key =~ /[A-Z]/\
    \ ) {\n\t    foreach my $k (keys %$dict) {\n\t\tif( $k =~ /[a-z]/ ) {\n\t\t  \
    \  $flag = \"\";\n\t\t    last;\n\t\t}\n\t    }\n\t} else {\n\t    foreach my\
    \ $k (keys %$dict) {\n\t\tif( $k =~ /[A-Z]/ ) {\n\t\t    $flag = \"\";\n\t\t \
    \   last;\n\t\t}\n\t    }\n\t}\n    }\n    return $flag;\n}", "    my $return_val\
    \ = 1;\n    my $lower_case = 0;\n    my $upper_case = 0;\n    foreach my $key\
    \ (keys %$dict) {\n        $lower_case = 1 if($key =~ /^[a-z]+$/);\n        $upper_case\
    \ = 1 if($key =~ /^[A-Z]+$/);\n    }\n    $return_val = \"\" if($lower_case +\
    \ $upper_case > 1);\n    return $return_val;\n}", "    my $result = 1;\n    return\
    \ $result if $dict->is_empty();\n    if ($dict->any_key_has_value(\"A\", \"Z\"\
    )) {\n        $result = $dict->all_keys_have_value(\"A\", \"Z\")? 1: '';\n   \
    \ } else {\n        $result = $dict->all_keys_have_value(\"a\", \"z\")? 1: '';\n\
    \    }\n    return $result;\n}", "    my @keys = keys %$dict;\n    return '' if\
    \ @keys == 0;\n    my $fmt = $keys[0] =~ /[a-z]/ ? 'L' : 'U';\n    for my $key\
    \ (@keys) {\n        return '' if $key =~ /[a-z]/ && $fmt eq 'U';\n        return\
    \ '' if $key =~ /[A-Z]/ && $fmt eq 'L';\n    }\n    return 1;\n}", "    my @all_keys\
    \ = keys %$dict;\n    return 1 if (scalar @all_keys == 0);\n    my $is_all_lower\
    \ = all {lc $_ eq $_} @all_keys;\n    my $is_all_upper = all {uc $_ eq $_} @all_keys;\n\
    \    if ($is_all_lower or $is_all_upper) {\n        return 1;\n    } else {\n\
    \        return '';\n    }\n}", "    my @keys = keys %$dict;\n    my $key0 = $keys[0];\n\
    \    my $lower = $key0 =~ /^[a-z]+$/;\n    my $upper = $key0 =~ /^[A-Z]+$/;\n\
    \    if ($lower or $upper) {\n        foreach my $key (@keys) {\n            if\
    \ (($lower and $key !~ /^[a-z]+$/) or ($upper and $key !~ /^[A-Z]+$/)) {\n   \
    \             return \"\";\n            }\n        }\n        return 1;\n    }\n\
    \    return \"\";\n}", "    #your code here\n    if (scalar(keys %$dict) == 0)\
    \ {\n      return 1;\n    }\n    my $upper = 1;\n    my $lower = 1;\n    foreach\
    \ my $k (keys %$dict) {\n      if ($k =~ /[A-Z]/) {\n        $lower = 0;\n   \
    \   }\n      if ($k =~ /[a-z]/) {\n        $upper = 0;\n      }\n    }\n    if\
    \ ($upper == 1 || $lower == 1) {\n      return 1;\n    }\n    return \"\";\n}",
  "    my @keys = keys(%$dict);\n    my $res = 0;\n    foreach my $k (@keys) {\n \
    \       if ($k =~ /^[a-z]+$/) {\n            $res = 1;\n        }\n        elsif\
    \ ($k =~ /^[A-Z]+$/) {\n            $res = 2;\n        }\n        else {\n   \
    \         return \"\";\n        }\n    }\n    return $res;\n}", "    my(@keys,\
    \ $key, $flag);\n    @keys = keys %$dict;\n    $flag = 1;\n    if (@keys) {\n\t\
    $key = shift @keys;\n\t$flag = ($key =~ /^[a-z]+$/) ? 1 : 0;\n\tforeach $key (@keys)\
    \ {\n\t    if ($flag and $key =~ /^[a-z]+$/) {\n\t\tnext;\n\t    }\n\t    elsif\
    \ (!$flag and $key =~ /^[A-Z]+$/) {\n\t\tnext;\n\t    }\n\t    else {\n\t\t$flag\
    \ = 0;\n\t\tlast;\n\t    }\n\t}\n    }\n    $flag;\n}", "    my @keys = keys %$dict;\n\
    \    my $is_lower = @keys && $keys[0] =~ /^[a-z]+$/;\n    my $is_upper = @keys\
    \ && $keys[0] =~ /^[A-Z]+$/;\n    if( $is_lower || $is_upper ) {\n        foreach\
    \ my $key (@keys) {\n            my $case = $key =~ /^[a-z]+$/ ? 'L' : 'U';\n\
    \            $is_lower = $is_lower && $case eq 'L';\n            $is_upper = $is_upper\
    \ && $case eq 'U';\n        }\n    }\n    return $is_lower || $is_upper ? 1 :\
    \ '';\n}", "    my $retval = 1;\n    my $upper = 0;\n    my $lower = 0;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key !~ /^[a-z]*$/) {\n            $lower\
    \ = 1;\n        }\n        if ($key !~ /^[A-Z]*$/) {\n            $upper = 1;\n\
    \        }\n    }\n    $retval = \"\" if $lower && $upper;\n    return $retval;\n\
    }", "    my @keys = keys %$dict;\n    if ( @keys ) {\n        my @upper = grep\
    \ { $_ eq uc $_ } @keys;\n        my @lower = grep { $_ eq lc $_ } @keys;\n  \
    \      return ( @keys ~~ @upper || @keys ~~ @lower ) ? 1 : \"\";\n    }\n    return\
    \ \"\";\n}", "    foreach my $key (keys %$dict) {\n        return \"\" if $key\
    \ ne uc($key) and $key ne lc($key);\n    }\n    return 1;\n}", "    my $ret =\
    \ 1;\n    my $up_flag = 0;\n    my $low_flag = 0;\n    my $dict_name = \"\";\n\
    \    if (scalar(keys %$dict) == 0) {\n        return $ret;\n    }\n    while (my($key,\
    \ $value) = each %$dict) {\n        $dict_name = $key;\n        if ($dict_name\
    \ =~ /[a-z]/) {\n            $low_flag = 1;\n        }\n        elsif ($dict_name\
    \ =~ /[A-Z]/) {\n            $up_flag = 1;\n        }\n        if ($low_flag &&\
    \ $up_flag) {\n            $ret = \"\";\n            last;\n        }\n    }\n\
    \    return $ret;\n}", "    my($flag) = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        if(($key =~ /[a-z]/) && ($key =~ /[A-Z]/)) {\n            $flag =\
    \ \"\";\n            last;\n        }\n    }\n    return $flag;\n}", "    my($key,\
    \ $value);\n    my($down) = 1;\n    my($up) = 1;\n    while(($key, $value) = each\
    \ %$dict) {\n        if(ref($key) eq \"\") {\n            $down = $down && ($key\
    \ eq lc($key));\n            $up = $up && ($key eq uc($key));\n        }\n   \
    \ }\n    if($down == $up) {\n        return $down;\n    }\n    return \"\";\n}",
  "    my $result = 1;\n    my $cnt1 = 0;\n    my $cnt2 = 0;\n    my $cnt3 = 0;\n\
    \    my $cnt4 = 0;\n    foreach my $k (keys %$dict) {\n        $cnt1++ if $k =~\
    \ /^[a-z]+$/;\n        $cnt2++ if $k =~ /^[A-Z]+$/;\n        $cnt3++ if $k =~\
    \ /^[a-z]+$/ && $dict->{$k} =~ /^[a-z]+$/;\n        $cnt4++ if $k =~ /^[A-Z]+$/\
    \ && $dict->{$k} =~ /^[A-Z]+$/;\n    }\n    $result = \"\" if $cnt1 > 0 && $cnt2\
    \ > 0;\n    $result = \"\" if $cnt3 > 0 && $cnt4 > 0;\n    return $result;\n}",
  "    if (scalar keys %$dict == 0) {\n        return \"\";\n    }\n    foreach my\
    \ $key (keys %$dict) {\n        if (lc($key) ne $key && uc($key) ne $key) {\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    my $result\
    \ = 1;\n    my $first_val = \"\";\n    if (keys %$dict) {\n        foreach my\
    \ $key (keys %$dict) {\n            if ($first_val eq \"\") {\n              \
    \  $first_val = $key;\n            }\n            if ($first_val ne $key) {\n\
    \                $result = 0;\n                last;\n            }\n        }\n\
    \    } else {\n        $result = 0;\n    }\n    return $result;\n}", "    my $return_value\
    \ = 0;\n    my $lower_case_key_count = 0;\n    my $upper_case_key_count = 0;\n\
    \    foreach my $key (keys %$dict) {\n        if (uc($key) eq $key) {\n      \
    \      $upper_case_key_count += 1;\n        }\n        elsif (lc($key) eq $key)\
    \ {\n            $lower_case_key_count += 1;\n        }\n    }\n    if ($lower_case_key_count\
    \ and $upper_case_key_count) {\n        $return_value = 1;\n    }\n    return\
    \ $return_value;\n}", "    my $res = 1;\n    return $res if (keys %$dict == 0);",
  "    if( scalar(keys(%$dict)) == 0 ) {\n        return 1;\n    }", "    my @keys\
    \ = keys %$dict;\n    my $type = \n        (keys %$dict) ? \n            (($keys[0]\
    \ =~ m/^[a-z]$/) ? 'l' : 'u') :\n            'u';\n    for (keys %$dict) {\n \
    \       if ($type eq 'l' and $_ !~ m/^[a-z]$/) {\n            return \"\";\n \
    \       }\n        if ($type eq 'u' and $_ !~ m/^[A-Z]$/) {\n            return\
    \ \"\";\n        }\n    }\n    return 1;\n}", "    my $state;\n    if (defined\
    \ $dict->{a}) {\n        $state = 1;\n    } else {\n        $state = 0;\n    }\n\
    \    foreach my $key (keys %$dict) {\n        if (defined $dict->{a}) {\n    \
    \        if ($state == 0) {\n                return \"\";\n            }\n   \
    \     } else {\n            if ($state == 1) {\n                return \"\";\n\
    \            }\n        }\n    }\n    return 1;\n}", "    my $key;\n    if (scalar(keys\
    \ %$dict) == 0) {\n        return 1;\n    }\n    foreach $key (keys %$dict) {\n\
    \        if ($key =~ /^[A-Z]+$/) {\n            return 1;\n        }\n       \
    \ if ($key =~ /^[a-z]+$/) {\n            return 1;\n        }\n        return\
    \ \"\";\n    }\n}", "    my($all_lower) = 1;\n    my($all_upper) = 1;\n    foreach\
    \ $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n\
    \        }\n    }\n    if ($all_lower == 1 || $all_upper == 1) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my @keys = keys(%$dict);\n    return \"\
    \" if @keys == 0;\n    my $key = $keys[0];\n    if (is_lower($key)) {\n      \
    \  foreach my $key (@keys) {\n            return \"\" if !is_lower($key);\n  \
    \      }\n    }\n    elsif (is_upper($key)) {\n        foreach my $key (@keys)\
    \ {\n            return \"\" if !is_upper($key);\n        }\n    }\n    else {\n\
    \        return \"\";\n    }\n    return 1;\n}", "    my($lc, $uc) = (0, 0);\n\
    \    foreach $k (keys %$dict) {\n        if (lc($k) eq $k) {\n            $lc++;\n\
    \        }\n        elsif (uc($k) eq $k) {\n            $uc++;\n        }\n  \
    \  }\n    return ($lc == 0 || $uc == 0)? \"\" : 1;\n}", "    my @keys = keys %$dict;\n\
    \    if (@keys == 0) {\n        return 1;\n    }\n    my $test_key = $keys[0];\n\
    \    my $all_lower = $test_key =~ /^[a-z]+$/;\n    my $all_upper = $test_key =~\
    \ /^[A-Z]+$/;\n    my $all_match = $all_lower or $all_upper;\n    foreach my $key\
    \ (@keys) {\n        if ($all_lower) {\n            $all_match = $all_match and\
    \ $key =~ /^[a-z]+$/;\n        }\n        elsif ($all_upper) {\n            $all_match\
    \ = $all_match and $key =~ /^[A-Z]+$/;\n        }\n    }\n    return $all_match\
    \ ? 1 : \"\";\n}", "    return 1 if (keys %$dict == 0);\n    my $key_is_upper\
    \ = 0;\n    my $key_is_lower = 0;\n    foreach my $key (keys %$dict) {\n     \
    \   if ($key =~ /^[A-Z]+$/) {\n            $key_is_upper = 1;\n        }\n   \
    \     elsif ($key =~ /^[a-z]+$/) {\n            $key_is_lower = 1;\n        }\n\
    \        else {\n            # Error out if there is a key that is not all upper\
    \ or lower case\n            return \"\";\n        }\n    }\n    if ($key_is_upper\
    \ && $key_is_lower) {\n        return \"\";\n    }\n    else {\n        return\
    \ 1;\n    }\n}", '    return 1 if (scalar(keys %$dict) == 0);', "    my $key_count\
    \ = scalar keys %$dict;\n    if ( $key_count < 1 ) {\n        return \"\";\n \
    \   }\n    my @keys = keys %$dict;\n    my $key = $keys[0];\n    my $pattern =\
    \ \"\";\n    if ( $key =~ /[a-z]/ ) {\n        $pattern = \"^[a-z]+$\";\n    }\
    \ elsif ( $key =~ /[A-Z]/ ) {\n        $pattern = \"^[A-Z]+$\";\n    } else {\n\
    \        return \"\";\n    }\n    foreach my $key ( @keys ) {\n        return\
    \ \"\" if ( $key !~ /$pattern/ );\n    }\n    return 1;\n}", "    # TODO - Add\
    \ your code here\n    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach\
    \ my $k (keys %$dict) {\n        $all_lower = 0 if $k !~ /^[a-z]+$/;\n       \
    \ $all_upper = 0 if $k !~ /^[A-Z]+$/;\n    }\n    return $all_lower || $all_upper;\n\
    }", "    my(@keys) = keys %$dict;\n    my($lower_case, $upper_case) = (\"\", \"\
    \");\n    foreach my $key (@keys) {\n        if($key =~ /^[[:lower:]]+$/) {\n\
    \            $lower_case++;\n        } elsif($key =~ /^[[:upper:]]+$/) {\n   \
    \         $upper_case++;\n        } else {\n            return \"\";\n       \
    \ }\n    }\n    if($lower_case && $upper_case) {\n        return \"\";\n    }\n\
    \    return 1;\n}", "    my @keys = keys %$dict;\n    my %only_lower_keys = map\
    \ { $_ => 1 } grep { m/^[a-z]/ } @keys;\n    my %only_upper_keys = map { $_ =>\
    \ 1 } grep { m/^[A-Z]/ } @keys;\n    return 1 if @keys == keys %only_lower_keys;\n\
    \    return 1 if @keys == keys %only_upper_keys;\n    return \"\";\n}", "    my($count)=0;\n\
    \    my($key,$value);\n    my($count_upper,$count_lower);\n    $count_upper=0;\n\
    \    $count_lower=0;\n    while(($key,$value)=each(%$dict)){\n        if($key=~m/^[a-z]+$/){\n\
    \            $count_lower++;\n        }\n        elsif($key=~m/^[A-Z]+$/){\n \
    \           $count_upper++;\n        }\n        else{\n            return \"\"\
    ;\n        }\n    }\n    if($count_lower==keys(%$dict) || $count_upper==keys(%$dict)){\n\
    \        return 1;\n    }\n    else{\n        return \"\";\n    }\n}", "    my\
    \ $lower_case = 0;\n    my $upper_case = 0;\n    for my $key (keys %$dict) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $lower_case = 1;\n        }\n\
    \        elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n        }\n\
    \        else {\n            return \"\";\n        }\n    }\n    return 1 if $lower_case\
    \ || $upper_case;\n    return \"\";\n}\nprint \"check_dict_case( { \\\"a\\\" =>\
    \ \\\"apple\\\", \\\"b\\\" => \\\"banana\\\" } ) = \", check_dict_case( { \"a\"\
    \ => \"apple\", \"b\" => \"banana\" } ), \"\\n\";\nprint \"check_dict_case( {\
    \ \\\"a\\\" => \\\"apple\\\", \\\"A\\\" => \\\"banana\\\", \\\"B\\\" => \\\"banana\\\
    \" } ) = \", check_dict_case( { \"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\" } ), \"\\n\";\nprint \"check_dict_case( { \\\"a\\\" => \\\"apple\\\
    \", 8 => \\\"banana\\\", \\\"a\\\" => \\\"apple\\\" } ) = \", check_dict_case(\
    \ { \"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\" } ), \"\\n\";\nprint\
    \ \"check_dict_case( { \\\"Name\\\" => \\\"John\\\", \\\"Age\\\" => \\\"36\\\"\
    , \\\"City\\\" => \\\"Houston\\\" } ) = \", check_dict_case( { \"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\" } ), \"\\n\";\nprint \"check_dict_case(\
    \ { \\\"STATE\\\" => \\\"NC\\\", \\\"ZIP\\\" => \\\"12345\\\" } ) = \", check_dict_case(\
    \ { \"STATE\" => \"NC\", \"ZIP\" => \"12345\" } ), \"\\n\";\nprint \"\\n\";",
  "    my $ans = 1;\n    my $c = \"\";\n    foreach my $k (keys(%$dict)) {\n     \
    \   if ($c eq \"\") {\n            $c = \"lower\" if ($k =~ /[a-z]/);\n      \
    \      $c = \"upper\" if ($k =~ /[A-Z]/);\n        }\n        $ans = \"\" if ($c\
    \ eq \"lower\" && $k =~ /[A-Z]/);\n        $ans = \"\" if ($c eq \"upper\" &&\
    \ $k =~ /[a-z]/);\n    }\n    return $ans;\n}", "    my @keys = keys %$dict;\n\
    \    my $result = \"\";\n    for my $key (@keys) {\n        if ($key !~ /^[a-z]+$/\
    \ && $key !~ /^[A-Z]+$/) {\n            $result = \"\";\n            last;\n \
    \       }\n        $result = 1;\n    }\n    return $result;\n}", "    my($key,\
    \ $val);\n    my($num_upper, $num_lower) = (0, 0);\n    foreach $key (keys %$dict)\
    \ {\n        next if ($key =~ /^[A-Z]+$/);\n        next if ($key =~ /^[a-z]+$/);\n\
    \        return '';\n    }\n    return 1;\n}", "    my(@keys) = keys %$dict;\n\
    \    my($key);\n    if ($#keys == -1) {\n        return 1;\n    }\n    my($upper)\
    \ = $keys[0] =~ /^[A-Z]+$/;\n    my($lower) = $keys[0] =~ /^[a-z]+$/;\n    for\
    \ $key (@keys) {\n        if ($upper && $key !~ /^[A-Z]+$/) {\n            return\
    \ \"\";\n        }\n        if ($lower && $key !~ /^[a-z]+$/) {\n            return\
    \ \"\";\n        }\n    }\n    return 1;\n}", "    my($key, $is_lower, $is_upper);\n\
    \    for $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n            $is_lower\
    \ = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n\
    \        }\n    }\n    if ($is_lower && $is_upper) {\n        return '';\n   \
    \ } else {\n        return 1;\n    }\n}", "    my $keys = [keys(%$dict)];\n  \
    \  my $upcase = 0;\n    my $lowcase = 0;\n    my $res = \"\";\n    if (grep {$_\
    \ eq $_->upcase} @$keys) {\n        $upcase = 1;\n    }\n    if (grep {$_ eq $_->downcase}\
    \ @$keys) {\n        $lowcase = 1;\n    }\n    if ($upcase && $lowcase) {\n  \
    \      $res = \"\";\n    } elsif ($upcase) {\n        $res = 1;\n    } elsif ($lowcase)\
    \ {\n        $res = 1;\n    }\n    $res;\n}", "    # your code here\n    my @keys\
    \ = keys $dict;\n    my $check = \"\";\n    if (scalar(@keys) != 0) {\n      \
    \  if ($keys[0] =~ /[A-Z]/) {\n            foreach my $i (0..scalar(@keys)-1)\
    \ {\n                if ($keys[$i] =~ /[a-z]/) {\n                    $check =\
    \ \"\";\n                    last;\n                }\n                else {\n\
    \                    $check = 1;\n                }\n            }\n        }\n\
    \        else {\n            foreach my $i (0..scalar(@keys)-1) {\n          \
    \      if ($keys[$i] =~ /[A-Z]/) {\n                    $check = \"\";\n     \
    \               last;\n                }\n                else {\n           \
    \         $check = 1;\n                }\n            }\n        }\n    }\n  \
    \  return $check;\n}", "    my $retval = 0;\n    my $key;\n    my $all_upper =\
    \ 1;\n    my $all_lower = 1;\n    foreach $key (keys %$dict) {\n        if (uc($key)\
    \ ne $key) {\n            $all_upper = 0;\n        }\n        if (lc($key) ne\
    \ $key) {\n            $all_lower = 0;\n        }\n    }\n    if ($all_upper ||\
    \ $all_lower) {\n        $retval = 1;\n    }\n    return $retval;\n}", "    return\
    \ 1 if (scalar keys %$dict == 0);\n    my $cased = 1;\n    my $keys = join(\"\
    ,\", keys %$dict);\n    $cased = 0 if ($keys =~ /\\d/);\n    my $lower_case =\
    \ lc($keys);\n    my $upper_case = uc($keys);\n    if ($keys eq $lower_case ||\
    \ $keys eq $upper_case) {\n        return 1;\n    }\n    return \"\";\n}", " \
    \   return 1 if keys %$dict == 0;\n    return 1 if is_all_lower_case($dict);\n\
    \    return 1 if is_all_upper_case($dict);\n    return \"\";\n}", "    my($key,\
    \ $val);\n    my($u, $l) = (0, 0);\n    while(($key, $val) = each %$dict) {\n\
    \        $u = 1 if $key =~ /[A-Z]/;\n        $l = 1 if $key =~ /[a-z]/;\n    }\n\
    \    return $u && $l ? \"\" : 1;\n}", "    my $result = 1;\n    my $str = \"\"\
    ;\n    my $lower = 1;\n    my $upper = 1;\n    my $first = 1;\n    foreach my\
    \ $key (keys %$dict) {\n        if ($first) {\n            $str = $key;\n    \
    \        $first = 0;\n        }\n        if (uc($key) ne $key && $lower) {\n \
    \           $lower = 0;\n        }\n        if (lc($key) ne $key && $upper) {\n\
    \            $upper = 0;\n        }\n    }\n    if (!$lower && !$upper) {\n  \
    \      $result = \"\";\n    }\n    return $result;\n}", "    if (!keys %$dict)\
    \ { return; }\n    my $num_low = 0;\n    my $num_up = 0;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /^[a-z]/) {\n            $num_low++;\n\
    \        }\n        elsif ($key =~ /^[A-Z]/) {\n            $num_up++;\n     \
    \   }\n        else {\n            return;\n        }\n    }\n    if ($num_low\
    \ && $num_up) {\n        return;\n    }\n    else {\n        return 1;\n    }\n\
    }", "    my($key);\n    my($retVal) = 1;\n    my($nNumKeys) = scalar(keys(%{$dict}));\n\
    \    return $retVal if ($nNumKeys == 0);\n    foreach $key (keys(%{$dict})) {\n\
    \        if ($key =~ /[A-Z]/) {\n            $retVal = \"\" if ($key =~ /[a-z]/);\n\
    \        } else {\n            $retVal = \"\" if ($key =~ /[A-Z]/);\n        }\n\
    \    }\n    return $retVal;\n}", "    my $casedict = %$dict;\n    my @case = @$casedict;\n\
    \    my $case = shift(@case);\n    my $i;\n    my $returnvalue = 1;\n    my $lastword\
    \ = $case;\n    my $firstword = $case;\n    if(!$case) {\n        return 1;\n\
    \    }\n    while ($case = shift(@case)) {\n        my $word = $case;\n      \
    \  if(lc($lastword) ne lc($word) && uc($lastword) ne uc($word)) {\n          \
    \  return \"\";\n        }\n        $lastword = $word;\n    }\n    return 1;\n\
    }", "    my $ret = 1;\n    my $str_found = 0;\n    foreach my $key (keys %$dict)\
    \ {\n        if (looks_like_number($key)) {\n            $ret = \"\";\n      \
    \      last;\n        }\n        $str_found = 1;\n        if ($key =~ /[A-Z]/)\
    \ {\n            # if any is upper, rest should be upper\n            unless ($key\
    \ =~ /^[A-Z]+$/) {\n                $ret = \"\";\n                last;\n    \
    \        }\n        }\n        elsif ($key =~ /[a-z]/) {\n            # if any\
    \ is lower, rest should be lower\n            unless ($key =~ /^[a-z]+$/) {\n\
    \                $ret = \"\";\n                last;\n            }\n        }\n\
    \    }\n    unless ($str_found) {\n        $ret = \"\";\n    }\n    return $ret;\n\
    }", "    return '' if not keys %$dict;\n    my $lower = $dict->{(keys %$dict)[0]}\
    \ =~ /^[a-z]/;\n    for my $k (keys %$dict) {\n        return '' if $dict->{$k}\
    \ =~ /^[a-z]/ != $lower;\n    }\n    return 1;\n}", "    my $case_flag = -1;\n\
    \    my $flag = 1;\n    foreach my $key (keys %$dict) {\n        if ($case_flag\
    \ == -1) {\n            if ($key =~ /^[[:upper:]]+$/) {\n                $case_flag\
    \ = 1;\n            } elsif ($key =~ /^[[:lower:]]+$/) {\n                $case_flag\
    \ = 0;\n            } else {\n                $flag = \"\";\n                last;\n\
    \            }\n        } else {\n            if ($case_flag == 1) {\n       \
    \         if ($key !~ /^[[:upper:]]+$/) {\n                    $flag = \"\";\n\
    \                    last;\n                }\n            } else {\n        \
    \        if ($key !~ /^[[:lower:]]+$/) {\n                    $flag = \"\";\n\
    \                    last;\n                }\n            }\n        }\n    }\n\
    \    return $flag;\n}", "    my $lower = 1;\n    my $upper = 1;\n    my $empty\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $empty = 0;\n        $lower\
    \ = 0 if $key !~ /^[a-z]+$/;\n        $upper = 0 if $key !~ /^[A-Z]+$/;\n    }\n\
    \    if($empty) {\n        return $empty;\n    } elsif ($lower || $upper) {\n\
    \        return $lower;\n    } else {\n        return \"\";\n    }\n}", "    my\
    \ @all_vals = values %$dict;\n    my $first_key =  (keys %$dict)[0];\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    if($first_key =~ /^[A-Z]+$/) {\n        $is_upper\
    \ = 1;\n    }\n    elsif($first_key =~ /^[a-z]+$/) {\n        $is_lower = 1;\n\
    \    }\n    else {\n        return '';\n    }\n    for my $key (keys %$dict) {\n\
    \        if( ($is_upper && $key !~ /^[A-Z]+$/) ||\n            ($is_lower && $key\
    \ !~ /^[a-z]+$/) ) {\n            return '';\n        }\n    }\n    return 1;\n\
    }", "    my $result = \"\";\n    my $all_lowercase = 1;\n    my $all_uppercase\
    \ = 1;\n    foreach my $key (keys(%$dict)) {\n        my $uc = uc($key);\n   \
    \     my $lc = lc($key);\n        if($key ne $uc) {\n            $all_uppercase\
    \ = 0;\n        }\n        if($key ne $lc) {\n            $all_lowercase = 0;\n\
    \        }\n    }\n    if($all_lowercase == 0 && $all_uppercase == 0) {\n    \
    \    $result = \"\";\n    }\n    elsif($all_lowercase == 1) {\n        $result\
    \ = 1;\n    }\n    elsif($all_uppercase == 1) {\n        $result = 1;\n    }\n\
    \    return $result;\n}\n1;", "    return \"empty\" if(!defined($dict) || keys(%$dict)\
    \ == 0);\n    my($first) = keys(%$dict);\n    return \"invalid\" if($first !~\
    \ /^[a-z]+$/i);\n    foreach my $key (keys(%$dict)) {\n        return \"\" if($key\
    \ !~ /^[a-z]+$/i);\n    }\n    return \"all_lower\" if($first =~ /^[a-z]+$/);\n\
    \    return \"all_upper\" if($first =~ /^[A-Z]+$/);\n    return \"\";\n}", " \
    \   my @keys = keys %$dict;\n    my $key = $keys[0];\n    my $upper = $key =~\
    \ tr/[A-Z]//;\n    my $lower = $key =~ tr/[a-z]//;\n    if ( !$upper && !$lower\
    \ ) { return \"\" }\n    my $msg = 1;\n    for my $key (@keys) {\n        if (\
    \ $upper && $key =~ tr/[A-Z]// ) { \n            $msg = \"\";\n            last;\n\
    \        }\n        if ( $lower && $key =~ tr/[a-z]// ) { \n            $msg =\
    \ \"\";\n            last;\n        }\n    }\n    return $msg;\n}", "    return\
    \ 0 unless $dict;\n    return 1 if keys %$dict == 0;\n    my $first_key = (keys\
    \ %$dict)[0];\n    my $first_key_is_upper = $first_key =~ /^[A-Z]+$/;\n    my\
    \ $first_key_is_lower = $first_key =~ /^[a-z]+$/;\n    for my $key (keys %$dict)\
    \ {\n        if ($first_key_is_upper) {\n            return 0 unless $key =~ /^[A-Z]+$/;\n\
    \        }\n        elsif ($first_key_is_lower) {\n            return 0 unless\
    \ $key =~ /^[a-z]+$/;\n        }\n        else {\n            return 0;\n    \
    \    }\n    }\n    return 1;\n}", "    my($key);\n    my($result) = 1;\n    my($value);\n\
    \    my($test_case) = 0;\n    foreach $key (keys(%$dict)) {\n        $value =\
    \ $dict->{$key};\n        if ($test_case == 0) {\n            if ($key =~ /[A-Z]/)\
    \ {\n                $test_case = 1;\n            }\n            elsif ($key =~\
    \ /[a-z]/) {\n                $test_case = 2;\n            }\n        }\n    \
    \    if ($test_case == 1) {\n            if ($key !~ /[A-Z]/) {\n            \
    \    $result = '';\n                last;\n            }\n        }\n        elsif\
    \ ($test_case == 2) {\n            if ($key !~ /[a-z]/) {\n                $result\
    \ = '';\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }\n1;", "    my $f_all_upper = 1;\n    my $f_all_lower = 1;\n    for my $k (keys\
    \ %$dict) {\n        if ($k !~ /^[a-z]+$/) {\n            $f_all_lower = 0;\n\
    \        }\n        if ($k !~ /^[A-Z]+$/) {\n            $f_all_upper = 0;\n \
    \       }\n    }\n    return ($f_all_lower || $f_all_upper) ? 1 : \"\";\n}", " \
    \   my($is_all_lower, $is_all_upper);\n    for my $key (keys %$dict) {\n     \
    \   if ($key =~ /^[a-z]+$/) {\n            $is_all_lower = 1;\n        }\n   \
    \     elsif ($key =~ /^[A-Z]+$/) {\n            $is_all_upper = 1;\n        }\n\
    \        else {\n            return \"\";\n        }\n    }\n    if ($is_all_lower\
    \ && $is_all_upper) {\n        return \"\";\n    }\n    return 1;\n}", "    my\
    \ @keys = keys %$dict;\n    return 1 if (grep { $_ =~ /[A-Z]/ } @keys) && (grep\
    \ { $_ =~ /[a-z]/ } @keys);\n    return 0;\n}", "    my $upper_cnt = 0;\n    my\
    \ $lower_cnt = 0;\n    my $is_empty = 1;\n    while(my($k, $v) = each %$dict)\
    \ {\n        $is_empty = 0;\n        if($k =~ /[A-Z]/) {\n            $upper_cnt++;\n\
    \        }\n        elsif($k =~ /[a-z]/) {\n            $lower_cnt++;\n      \
    \  }\n    }\n    return $is_empty ? \"\" : ($upper_cnt == scalar(keys %$dict)\
    \ || $lower_cnt == scalar(keys %$dict)) ? 1 : \"\";\n}", "    return 0 unless\
    \ ref($dict) eq 'HASH';\n    my @keys = keys %$dict;\n    my $size = scalar @keys;\n\
    \    return 1 if $size == 0;\n    my $i = 0;\n    my $is_upper = $keys[0] =~ m/^[[:upper:]]+$/;\n\
    \    if ($is_upper) {\n        foreach my $key (@keys) {\n            return 0\
    \ unless $key =~ m/^[[:upper:]]+$/;\n        }\n    } else {\n        foreach\
    \ my $key (@keys) {\n            return 0 unless $key =~ m/^[[:lower:]]+$/;\n\
    \        }\n    }\n    return 1;\n}", "    my @keys = keys %$dict;\n    my $check\
    \ = \"\";\n    my $flag = 0;\n    foreach my $key (@keys) {\n\tmy $c = substr($key,\
    \ 0, 1);\n\tif ($c =~ /\\d/) {\n\t    return \"\";\n\t}\n\tif ($check eq \"\"\
    ) {\n\t    if ($c =~ /[A-Z]/) {\n\t\t$check = \"upper\";\n\t    } else {\n\t\t\
    $check = \"lower\";\n\t    }\n\t}\n\tif ($check eq \"upper\") {\n\t    if ($c\
    \ =~ /[a-z]/) {\n\t\treturn \"\";\n\t    }\n\t} else {\n\t    if ($c =~ /[A-Z]/)\
    \ {\n\t\treturn \"\";\n\t    }\n\t}\n    }\n    return 1;\n}", "    my @keys =\
    \ keys(%$dict);\n    my $is_upper = 1;\n    my $is_lower = 1;\n    foreach my\
    \ $key (@keys) {\n        $is_upper = 0 if ($key !~ /^[A-Z]*$/);\n        $is_lower\
    \ = 0 if ($key !~ /^[a-z]*$/);\n    }\n    return 1 if ($is_upper + $is_lower\
    \ == 1);\n    return 0;\n}", "    return 1 if (scalar keys %$dict) == 0;\n   \
    \ my ($first) = ($dict->{(keys %$dict)[0]});\n    my $key_type = \"\";\n    if\
    \ (is_upper_case($first)) {\n        foreach my $k (keys %$dict) {\n         \
    \   if (!is_upper_case($k)) {\n                return \"\";\n            }\n \
    \       }\n    } elsif (is_lower_case($first)) {\n        foreach my $k (keys\
    \ %$dict) {\n            if (!is_lower_case($k)) {\n                return \"\"\
    ;\n            }\n        }\n    } else {\n        return \"\";\n    }\n    return\
    \ 1;\n}", "    return 1 if scalar(keys(%$dict)) == 0;\n    my $type = ref($dict);\n\
    \    my $res = 1;\n    my $all_lower = 0;\n    my $all_upper = 0;\n    foreach\
    \ my $key (keys(%$dict)) {\n        $all_lower = 1 if $key eq lc($key);\n    \
    \    $all_upper = 1 if $key eq uc($key);\n        $res = \"\" if $all_lower &&\
    \ $all_upper;\n    }\n    return $res;\n}", "    return 1 if keys %$dict == 0;\n\
    \    my @keys = keys %$dict;\n    my $first_key = shift @keys;\n    my $regex\
    \ = ($first_key =~ /^[a-z]*$/) ? qr/^[a-z]*$/ : qr/^[A-Z]*$/;\n    for my $key\
    \ (@keys) {\n        return '' if $key !~ $regex;\n    }\n    return 1;\n}", " \
    \   my @keys = keys %$dict;\n    if (@keys == 0) {\n        return '';\n    }\n\
    \    my $count = 0;\n    foreach my $key (@keys) {\n        if ($key eq uc($key))\
    \ {\n            $count++;\n        } elsif ($key eq lc($key)) {\n           \
    \ $count--;\n        } else {\n            return '';\n        }\n    }\n    if\
    \ ($count == @keys) {\n        return '1';\n    } elsif ($count == -@keys) {\n\
    \        return '1';\n    } else {\n        return '';\n    }\n}", "    my $key_type;\n\
    \    for my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n           \
    \ $key_type = \"lower\";\n        }\n        elsif ($key =~ /[A-Z]/) {\n     \
    \       $key_type = \"upper\";\n        }\n        else {\n            return\
    \ \"\";\n        }\n        for my $other_key (keys %$dict) {\n            if\
    \ ($key ne $other_key) {\n                if ($key_type eq \"lower\" && $other_key\
    \ =~ /[A-Z]/) {\n                    return \"\";\n                }\n       \
    \         elsif ($key_type eq \"upper\" && $other_key =~ /[a-z]/) {\n        \
    \            return \"\";\n                }\n            }\n        }\n    }\n\
    \    return 1;\n}", "    my $all_lower = 1;\n    my $all_upper = 1;\n    my $count\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        $count++;\n        $all_lower\
    \ &&= $key eq lc($key);\n        $all_upper &&= $key eq uc($key);\n    }\n   \
    \ return $count == 0 ? '' : $all_lower || $all_upper ? 1 : '';\n}", "    # your\
    \ code goes here\n    my $count = 0;\n    my $count2 = 0;\n    my $output = \"\
    \";\n    my $test = 0;\n    my $test2 = 0;\n    my $check = 0;\n    my $check2\
    \ = 0;\n    foreach $key (keys(%$dict)){\n    \t$test = $key;\n    \tif($test\
    \ =~ /[a-z]/){\n    \t\t$count += 1;\n    \t}else{\n    \t\t$count2 += 1;\n  \
    \  \t}\n    }\n    foreach $value (values(%$dict)){\n    \t$test2 = $value;\n\
    \    \tif($test2 =~ /[a-z]/){\n    \t\t$check += 1;\n    \t}else{\n    \t\t$check2\
    \ += 1;\n    \t}\n    }\n    if($count > 0 && $count2 == 0 && $check > 0 && $check2\
    \ == 0){\n    \t$output = 1;\n    }\n    return $output;\n}", "    my @keys =\
    \ keys %$dict;\n    my $first_key = $keys[0];\n    my $len = @keys;\n    my $result\
    \ = 1;\n    my $key_count = 1;\n    my $first_case;\n    my $first_char;\n   \
    \ my $test_case;\n    my $test_char;\n    if ($len == 0) {\n        return 1;\n\
    \    } else {\n        if ($first_key =~ /^[a-z]$/) {\n            $first_case\
    \ = 1;\n        } else {\n            $first_case = 0;\n        }\n        $first_char\
    \ = substr($first_key, 0, 1);\n        foreach $key (@keys) {\n            if\
    \ ($key =~ /^[a-z]$/) {\n                $test_case = 1;\n            } else {\n\
    \                $test_case = 0;\n            }\n            $test_char = substr($key,\
    \ 0, 1);\n            if ($test_case != $first_case) {\n                $result\
    \ = \"\";\n                last;\n            }\n            if ($test_char ne\
    \ $first_char) {\n                $result = \"\";\n                last;\n   \
    \         }\n        }\n    }\n    return $result;\n}", "    my @key = keys %$dict;\n\
    \    my $is_all_lower = 1;\n    my $is_all_upper = 1;\n    for (@key) {\n    \
    \    unless ($_ =~ /^[a-z]+$/) {\n            $is_all_lower = 0;\n        }\n\
    \        unless ($_ =~ /^[A-Z]+$/) {\n            $is_all_upper = 0;\n       \
    \ }\n    }\n    if ($is_all_lower or $is_all_upper) {\n        return 1;\n   \
    \ }\n    return \"\";\n}", "    my @keys = keys %$dict;\n    if(scalar @keys >\
    \ 0) {\n\tmy $case = $keys[0] =~ /[a-z]/ ? \"lower\" : \"upper\";\n\tforeach my\
    \ $key (@keys) {\n\t    if($key =~ /[a-z]/ && $case eq \"upper\") {\n\t\treturn\
    \ \"\";\n\t    }\n\t    if($key =~ /[A-Z]/ && $case eq \"lower\") {\n\t\treturn\
    \ \"\";\n\t    }\n\t}\n\treturn 1;\n    }\n    return \"\";\n}", "    my($key,\
    \ $all_lower, $all_upper);\n    $all_lower = 1;\n    $all_upper = 1;\n    foreach\
    \ $key (keys %$dict) {\n        if ($key !~ /[a-z]/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key !~ /[A-Z]/) {\n            $all_upper = 0;\n\
    \        }\n    }\n    if ($all_lower == 1 || $all_upper == 1) {\n        return\
    \ 1;\n    } else {\n        return \"\";\n    }\n}", "    if(keys %$dict == 0)\
    \ { return 1; }\n    my($flag, $key);\n    foreach $key (keys %$dict) {\n    \
    \    if(substr($key, 0, 1) =~ /[[:upper:]]/) {\n            $flag = 1;\n     \
    \   }\n        else {\n            $flag = 0;\n        }\n        last;\n    }\n\
    \    my($cmp_flag);\n    foreach $key (keys %$dict) {\n        if(substr($key,\
    \ 0, 1) =~ /[[:upper:]]/) {\n            $cmp_flag = 1;\n        }\n        else\
    \ {\n            $cmp_flag = 0;\n        }\n        if($cmp_flag != $flag) {\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    my $first_key\
    \ = (keys %$dict)[0];\n    my $is_upper = ($first_key =~ /[A-Z]/);\n    for my\
    \ $key (keys %$dict) {\n        if ($is_upper) {\n            return '' if $key\
    \ !~ /[A-Z]/;\n        } else {\n            return '' if $key !~ /[a-z]/;\n \
    \       }\n    }\n    return 1;\n}", "    my @keys = keys(%$dict);\n    my $first\
    \ = $keys[0];\n    return \"\" if($first =~ /\\d/);\n    if($first =~ /[A-Z]/)\
    \ {\n        foreach my $key (@keys) {\n            return \"\" if($key !~ /[A-Z]/);\n\
    \        }\n    } else {\n        foreach my $key (@keys) {\n            return\
    \ \"\" if($key !~ /[a-z]/);\n        }\n    }\n    return 1;\n}", "    return\
    \ 1 if scalar(keys %$dict) == 0;\n    my $check_upper = 0;\n    my $check_lower\
    \ = 0;\n    foreach my $key (keys %$dict) {\n        $check_upper++ if $key =~\
    \ /[A-Z]/;\n        $check_lower++ if $key =~ /[a-z]/;\n    }\n    if ($check_upper\
    \ and $check_lower) {\n        return '';\n    }\n    return 1;\n}", "    my @keys\
    \ = keys %$dict;\n    my $up = 1;\n    my $low = 1;\n    foreach my $key (@keys)\
    \ {\n        $up = 0 if $key =~ m/[a-z]/;\n        $low = 0 if $key =~ m/[A-Z]/;\n\
    \    }\n    if ($up) {\n        return 1;\n    } elsif ($low) {\n        return\
    \ 1;\n    } else {\n        return 0;\n    }\n}", "    my $res = \"\";\n    my\
    \ %dict = %$dict;\n    my @keys = keys %dict;\n    my $flag1 = 1;\n    my $flag2\
    \ = 1;\n    if (@keys eq 0) {\n        $res = 1;\n    } else {\n        for my\
    \ $key (@keys) {\n            if (lc($key) ne $key) {\n                $flag1\
    \ = 0;\n            }\n            if (uc($key) ne $key) {\n                $flag2\
    \ = 0;\n            }\n        }\n        if ($flag1 or $flag2) {\n          \
    \  $res = 1;\n        }\n    }\n    return $res;\n}", "    my @keys = keys %$dict;\n\
    \    return 1 if !@keys;\n    my $first_key = $keys[0];\n    return unless $first_key;\n\
    \    return 1 if $first_key =~ /^[a-z]+$/;\n    return 1 if $first_key =~ /^[A-Z]+$/;\n\
    \    return;\n}", "    my $isupper = 1;\n    my $islower = 1;\n    foreach my\
    \ $key (keys %$dict) {\n        $isupper = 0 if $key =~ /[a-z]/;\n        $islower\
    \ = 0 if $key =~ /[A-Z]/;\n    }\n    return $isupper || $islower;\n}", "    my\
    \ $rv = 1;\n    my $all_lower = 0;\n    my $all_upper = 0;\n    my $key;\n   \
    \ foreach $key (keys %$dict) {\n        if ( $key =~ /^[a-z]+$/ ) {\n        \
    \    $all_lower = 1;\n        }\n        elsif ( $key =~ /^[A-Z]+$/ ) {\n    \
    \        $all_upper = 1;\n        }\n        else {\n            $rv = \"\";\n\
    \            last;\n        }\n    }\n    if ($all_lower && $all_upper) {\n  \
    \      $rv = \"\";\n    }\n    return $rv;\n}", "    my $has_upper = my $has_lower\
    \ = 0;\n    foreach (keys %$dict) {\n        if (/^[A-Z]+$/) {\n            $has_upper\
    \ = 1;\n        } elsif (/^[a-z]+$/) {\n            $has_lower = 1;\n        }\
    \ else {\n            return '';\n        }\n    }\n    return $has_upper && $has_lower\
    \ ? '' : 1;\n}", "    my(@keys) = keys %$dict;\n    if (@keys == 0) {\n      \
    \  return 1;\n    }\n    my($case);\n    if ($keys[0] =~ /[a-z]/) {\n        $case\
    \ = \"lower\";\n    } elsif ($keys[0] =~ /[A-Z]/) {\n        $case = \"upper\"\
    ;\n    } else {\n        return \"\";\n    }\n    foreach my $key (@keys) {\n\
    \        if ($case eq \"lower\") {\n            if ($key !~ /[a-z]/) {\n     \
    \           return \"\";\n            }\n        } elsif ($case eq \"upper\")\
    \ {\n            if ($key !~ /[A-Z]/) {\n                return \"\";\n      \
    \      }\n        }\n    }\n    return 1;\n}", "    my $result = \"\";\n    my\
    \ $up_cnt = 0;\n    my $low_cnt = 0;\n    my $found = 0;\n    my $not_found =\
    \ 0;\n    for my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n   \
    \         $low_cnt++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n            $up_cnt++;\n\
    \        } else {\n            return \"\";\n        }\n    }\n    if ($low_cnt\
    \ == 0 && $up_cnt == 0) {\n        return \"\";\n    }\n    if ($low_cnt != 0\
    \ && $up_cnt != 0) {\n        return \"\";\n    }\n    return 1;\n}", "    return\
    \ \"\" if(scalar(keys(%{$dict})) == 0);\n    my($key) = (keys(%{$dict}))[0];\n\
    \    my($flag) = ($key =~ m/^[a-z]+$/) ? 1 : 0;\n    foreach $key (keys(%{$dict}))\
    \ {\n        return \"\" if(($key =~ m/^[a-z]+$/) != $flag);\n    }\n    return\
    \ $flag ? 1 : \"\";\n}", "    my @keys = keys %$dict;\n    my $a = $keys[0];\n\
    \    if(length($a) != 1) {\n        return '';\n    }\n    my $i = 0;\n    my\
    \ $flag = '';\n    while($i < @keys) {\n        if(@keys[$i] =~ /[[:lower:]]/)\
    \ {\n            $flag = \"lower\";\n        } elsif(@keys[$i] =~ /[[:upper:]]/)\
    \ {\n            $flag = \"upper\";\n        } else {\n            return '';\n\
    \        }\n        $i++;\n    }\n    return 1;\n}\n1;", "    my $status = 0;\n\
    \    my $flag = 0;\n    my $msg = \"\";\n    my @keys = keys %$dict;\n    if(scalar\
    \ @keys > 0) {\n        my $test = $keys[0];\n        if($test =~ /[a-z]/) {\n\
    \            $flag = 1;\n        } else {\n            $flag = 0;\n        }\n\
    \        for my $key(@keys) {\n            my $test = $key;\n            if($flag\
    \ == 1 && $test =~ /[A-Z]/) {\n                $status = 1;\n                last;\n\
    \            } elsif($flag == 0 && $test =~ /[a-z]/) {\n                $status\
    \ = 1;\n                last;\n            }\n        }\n    }\n    if($status\
    \ == 1) {\n        $msg = \"\";\n    } else {\n        $msg = 1;\n    }\n    return\
    \ $msg;\n}", "    my($lc_keys, $uc_keys) = (0, 0);\n    foreach my $key (keys\
    \ %$dict) {\n        $lc_keys++ if is_lower_case($key);\n        $uc_keys++ if\
    \ is_upper_case($key);\n    }\n    return (scalar(keys %$dict) == $lc_keys or\
    \ scalar(keys %$dict) == $uc_keys) ? 1 : \"\";\n}", "    my $lower = 1;\n    my\
    \ $upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $upper = 0;\n        }\n    }\n    if ($lower == 1) {\n        return\
    \ 1;\n    }\n    if ($upper == 1) {\n        return 1;\n    }\n    return 0;\n\
    }", "    my $are_strings_lower = 1;\n    my $are_strings_upper = 1;\n    foreach\
    \ my $key (keys(%$dict)) {\n        if (ref($key) eq \"\") {\n            if ($key\
    \ =~ /[A-Z]/) {\n                $are_strings_lower = 0;\n            }\n    \
    \        if ($key =~ /[a-z]/) {\n                $are_strings_upper = 0;\n   \
    \         }\n        }\n    }\n    return $are_strings_lower || $are_strings_upper;\n\
    }", "    my $is_all_upper_case = 1;\n    my $is_all_lower_case = 1;\n    while\
    \ (my($key, $value) = each %$dict) {\n        if (!defined $key) {\n         \
    \   return \"\";\n        }\n        if ($key =~ /[a-z]/) {\n            $is_all_upper_case\
    \ = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n            $is_all_lower_case\
    \ = 0;\n        }\n    }\n    if (!$is_all_upper_case && !$is_all_lower_case)\
    \ {\n        return \"\";\n    }\n    return 1;\n}", "    return 1 if ( keys(%$dict)\
    \ == 0 );\n    my @keys = keys(%$dict);\n    my $first_key = $keys[0];\n    if\
    \ ( $first_key =~ /^[a-z]+$/ ) {\n        foreach my $key ( @keys ) {\n      \
    \      return \"\" if ( $key !~ /^[a-z]+$/ );\n        }\n    } elsif ( $first_key\
    \ =~ /^[A-Z]+$/ ) {\n        foreach my $key ( @keys ) {\n            return \"\
    \" if ( $key !~ /^[A-Z]+$/ );\n        }\n    } else {\n        return \"\";\n\
    \    }\n    return 1;\n}", "    my $all_upper = 1;\n    my $all_lower = 1;\n \
    \   while(my($k, $v) = each %$dict) {\n        if(!is_string($k)) {\n        \
    \    return \"\";\n        }\n        if($k ne uc($k)) {\n            $all_upper\
    \ = 0;\n        }\n        if($k ne lc($k)) {\n            $all_lower = 0;\n \
    \       }\n    }\n    if($all_upper || $all_lower) {\n        return 1;\n    }\n\
    \    return \"\";\n}", "    my $dict_str = \"\";\n    my $dict_upper = \"\";\n\
    \    foreach $k (keys %$dict) {\n        $dict_str .= \"$k \";\n        $dict_upper\
    \ .= uc($k) . \" \";\n    }\n    return $dict_str eq $dict_upper || $dict_str\
    \ eq lc($dict_upper) ? 1 : \"\";\n}", "    return 1 if (scalar keys %$dict ==\
    \ 0);\n    return \"\" if (grep { /^[A-Z]+$/ } keys %$dict and grep { /^[a-z]+$/\
    \ } keys %$dict);\n    return 1;\n}", "    my @keys = keys(%$dict);\n    return\
    \ 1 if @keys == 0;\n    my $mode = '';\n    foreach my $key (@keys) {\n      \
    \  if (is_lower_case($key)) {\n            return \"\" if $mode ne \"\" && $mode\
    \ ne \"lower\";\n            $mode = \"lower\";\n        } elsif (is_upper_case($key))\
    \ {\n            return \"\" if $mode ne \"\" && $mode ne \"upper\";\n       \
    \     $mode = \"upper\";\n        } else {\n            return \"\";\n       \
    \ }\n    }\n    return 1;\n}", "    my $result = 1;\n    my $lower = 0;\n    my\
    \ $upper = 0;\n    foreach my $k (keys %$dict) {\n        if ($k =~ /^[a-z]+$/)\
    \ {\n            $lower = 1;\n        }\n        elsif ($k =~ /^[A-Z]+$/) {\n\
    \            $upper = 1;\n        }\n        else {\n            $result = \"\"\
    ;\n            last;\n        }\n    }\n    $result = \"\" if ($lower && $upper);\n\
    \    return $result;\n}", "    my $all_upper_flag = 1;\n    my $all_lower_flag\
    \ = 1;\n    my @keys = keys %$dict;\n    for my $key (@keys) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $all_upper_flag = 0;\n        }\n        elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $all_lower_flag = 0;\n        }\n      \
    \  else {\n            return \"\";\n        }\n    }\n    if ($all_upper_flag\
    \ or $all_lower_flag) {\n        return 1;\n    }\n    else {\n        return\
    \ \"\";\n    }\n}", "    my($result) = 1;\n    my($lowercase) = 1;\n    my($uppercase)\
    \ = 1;\n    my($key);\n    foreach $key (keys %$dict) {\n        if($key =~ /^[a-z]+$/)\
    \ {\n            $uppercase = 0;\n        } elsif($key =~ /^[A-Z]+$/) {\n    \
    \        $lowercase = 0;\n        } else {\n            $result = \"\";\n    \
    \        last;\n        }\n    }\n    if($result ne \"\") {\n        if($lowercase\
    \ == 1 && $uppercase == 1) {\n            $result = \"\";\n        } elsif($lowercase\
    \ == 1) {\n            $result = 1;\n        } elsif($uppercase == 1) {\n    \
    \        $result = 1;\n        } else {\n            $result = \"\";\n       \
    \ }\n    }\n    return $result;\n}\n1;", "    my $keys = keys %$dict;\n    return\
    \ 1 if $keys == 0;\n    my $is_lower = 1;\n    foreach my $key (keys %$dict) {\n\
    \        if ($key =~ /[A-Z]/) {\n            $is_lower = 0;\n            last;\n\
    \        }\n    }\n    my $is_upper = 1;\n    foreach my $key (keys %$dict) {\n\
    \        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n            last;\n\
    \        }\n    }\n    return 1 if $is_lower || $is_upper;\n    return \"\";\n\
    }", "    my($retval) = 1;\n    my($all_lower) = 1;\n    my($all_upper) = 1;\n\
    \    my($key);\n    foreach $key (keys %$dict) {\n        if(!is_lower_case($key))\
    \ {\n            $all_lower = 0;\n        }\n        if(!is_upper_case($key))\
    \ {\n            $all_upper = 0;\n        }\n    }\n    if(!($all_lower || $all_upper))\
    \ {\n        $retval = \"\";\n    }\n    return $retval;\n}", "    return 1 if\
    \ (scalar keys %$dict) == 0;\n    my $is_lower = exists($dict->{(keys %$dict)[0]})\
    \ && \n                    $dict->{(keys %$dict)[0]} =~ /^[a-z]+$/;\n    foreach\
    \ my $key (keys %$dict) {\n        if (($is_lower && $key !~ /^[a-z]+$/) ||\n\
    \            (!$is_lower && $key !~ /^[A-Z]+$/)) {\n            return '';\n \
    \       }\n    }\n    return 1;\n}", "    my $result = \"\";\n    my $cur;\n \
    \   my $flag = 0;\n    foreach my $key (keys %$dict) {\n        if (uc($key) eq\
    \ $key) {\n            $cur = 1;\n        } elsif (lc($key) eq $key) {\n     \
    \       $cur = 2;\n        } else {\n            $cur = 3;\n        }\n      \
    \  if ($flag == 0) {\n            $flag = $cur;\n        }\n        if ($flag\
    \ != $cur) {\n            return $result;\n        }\n    }\n    return $flag;\n\
    }", "    my $first_key;\n    foreach my $key (keys %$dict) {\n        if (!$first_key)\
    \ {\n            $first_key = $key;\n        } else {\n            if ($first_key\
    \ =~ /[A-Z]/ and $key =~ /[a-z]/) {\n                return '';\n            }\
    \ elsif ($first_key =~ /[a-z]/ and $key =~ /[A-Z]/) {\n                return\
    \ '';\n            }\n        }\n    }\n    return 1;\n}", "    my $result = \"\
    \";\n    my $all_lower = 0;\n    my $all_upper = 0;\n    for my $key (keys %$dict)\
    \ {\n        if($key =~ /[A-Z]/) {\n            $all_upper = 1;\n        } else\
    \ {\n            $all_lower = 1;\n        }\n    }\n    if($all_lower == $all_upper)\
    \ {\n        $result = 1;\n    }\n    return $result;\n}", "    # If dictionary\
    \ is empty\n    if (scalar(keys(%{$dict})) == 0) {\n        return \"\";\n   \
    \ }\n    # Check if all keys are all lower case\n    if (scalar(grep {$_ !~ /[A-Z]/}\
    \ keys(%{$dict})) == scalar(keys(%{$dict}))) {\n        return 1;\n    }\n   \
    \ # Check if all keys are all upper case\n    if (scalar(grep {$_ !~ /[a-z]/}\
    \ keys(%{$dict})) == scalar(keys(%{$dict}))) {\n        return 1;\n    }\n   \
    \ return \"\";\n}", "    my $key;\n    my $value;\n    my $ret = \"\";\n    my\
    \ $lower = 0;\n    my $upper = 0;\n    while(($key, $value) = each %$dict) {\n\
    \        if(lc($key) eq $key) {\n            $lower++;\n        }\n        if(uc($key)\
    \ eq $key) {\n            $upper++;\n        }\n    }\n    if($lower == keys %$dict\
    \ || $upper == keys %$dict) {\n        $ret = 1;\n    }\n    return $ret;\n}",
  "    my $case = undef;\n    foreach my $key (keys %$dict) {\n        if (is_lower_case($key))\
    \ {\n            return \"\" if defined $case && $case eq \"upper\";\n       \
    \     $case = \"lower\";\n        } elsif (is_upper_case($key)) {\n          \
    \  return \"\" if defined $case && $case eq \"lower\";\n            $case = \"\
    upper\";\n        } else {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my $p = 1;\n    foreach my $k (keys %$dict) {\n        $p = $p\
    \ && check_str_case($k);\n    }\n    return $p;\n}", "    my @keys = keys %$dict;\n\
    \    if (scalar @keys == 0) {\n        return \"\";\n    }", "    my $ret = 1;\n\
    \    foreach (keys %$dict) {\n        if ($_ !~ /^[a-z]*$/) {\n            $ret\
    \ = \"\";\n            last;\n        }\n    }\n    return $ret;\n}", "    my\
    \ @keys = keys %$dict;\n    my @values = values %$dict;\n    my $result = \"\"\
    ;\n    my $char_type = \"\";\n    my $other_char_type = \"\";\n    my $i = 0;\n\
    \    foreach my $key (@keys) {\n        if ($i == 0) {\n            if ($key =~\
    \ /[a-z]/) {\n                $char_type = \"lower\";\n                $other_char_type\
    \ = \"upper\";\n            } else {\n                $char_type = \"upper\";\n\
    \                $other_char_type = \"lower\";\n            }\n        }\n   \
    \     if ($key =~ /[a-z]/ && $char_type eq \"upper\") {\n            $result =\
    \ \"\";\n            last;\n        } elsif ($key =~ /[A-Z]/ && $char_type eq\
    \ \"lower\") {\n            $result = \"\";\n            last;\n        }\n  \
    \      $i++;\n    }\n    if ($result ne \"\") {\n        foreach my $value (@values)\
    \ {\n            if ($value =~ /[a-z]/ && $other_char_type eq \"upper\") {\n \
    \               $result = \"\";\n                last;\n            } elsif ($value\
    \ =~ /[A-Z]/ && $other_char_type eq \"lower\") {\n                $result = \"\
    \";\n                last;\n            }\n        }\n    }\n    if ($result ne\
    \ \"\") {\n        $result = 1;\n    }\n    return $result;\n}", "    my($keys)\
    \ = keys(%$dict);\n    my($lower_count) = ($keys =~ tr/[a-z]//);\n    my($upper_count)\
    \ = ($keys =~ tr/[A-Z]//);\n    if ($lower_count eq (length($keys))) {\n     \
    \   return 1;\n    }\n    elsif ($upper_count eq (length($keys))) {\n        return\
    \ 1;\n    }\n    else {\n        return \"\";\n    }\n}", "    my($lower, $upper)\
    \ = (0, 0);\n    for my $key (keys %$dict) {\n        if ($key =~ /^[a-z]+$/)\
    \ { $lower++ }\n        elsif ($key =~ /^[A-Z]+$/) { $upper++ }\n        else\
    \ { return \"\" }\n    }\n    return $lower * $upper == 0 ? 1 : \"\";\n}", " \
    \   my($k, $v);\n    my $upper = 1;\n    my $lower = 1;\n    foreach $k (keys\
    \ %$dict) {\n        $upper = 0 if $k !~ /^[A-Z]+$/;\n        $lower = 0 if $k\
    \ !~ /^[a-z]+$/;\n    }\n    $upper ? $upper : $lower;\n}", "    if ( !ref($dict)\
    \ || ref($dict) ne 'HASH' ) {\n        return \"\";\n    }\n    my $upper = 1;\n\
    \    my $lower = 1;\n    foreach my $key ( keys %$dict ) {\n        $upper = 0\
    \ if ( $key !~ /^[A-Z]+$/ );\n        $lower = 0 if ( $key !~ /^[a-z]+$/ );\n\
    \    }\n    return ($upper || $lower) ? 1 : \"\";\n}", "    if(scalar(keys(%{$dict}))\
    \ == 0) {\n        return 1;\n    }", "    my @keys = keys %$dict;\n    if (!scalar\
    \ @keys) {\n        return \"\";\n    }\n    foreach my $k (@keys) {\n       \
    \ if ($k =~ /[A-Z]/) {\n            foreach my $k1 (@keys) {\n               \
    \ if ($k1 =~ /[a-z]/) {\n                    return \"\";\n                }\n\
    \            }\n            return 1;\n        } elsif ($k =~ /[a-z]/) {\n   \
    \         foreach my $k1 (@keys) {\n                if ($k1 =~ /[A-Z]/) {\n  \
    \                  return \"\";\n                }\n            }\n          \
    \  return 1;\n        } else {\n            return \"\";\n        }\n    }\n}",
  "    # your code here\n}", '    return 1 if keys %$dict == 0;', "    my @keys =\
    \ keys(%$dict);\n    if (scalar(@keys) == 0) { return 1; }\n    my $count = 0;\n\
    \    foreach my $k (@keys) {\n        if ($k =~ /[A-Z]/) {\n            $count++;\n\
    \        }\n    }\n    if (scalar(@keys) == $count) {\n        return 1;\n   \
    \ } else {\n        return \"\";\n    }\n}", "    my @keys = keys(%$dict);\n \
    \   if(@keys == 0) {\n        return 1;\n    }\n    if(@keys == 1) {\n       \
    \ my $key = $keys[0];\n        if($key =~ /^[a-z]*$/) {\n            return 1;\n\
    \        }\n        if($key =~ /^[A-Z]*$/) {\n            return 1;\n        }\n\
    \        return \"\";\n    }\n    my $flag = 0;\n    my $key_upper = 0;\n    my\
    \ $key_lower = 0;\n    for my $key (@keys) {\n        if($key =~ /^[a-z]*$/) {\n\
    \            $key_lower++;\n        }\n        if($key =~ /^[A-Z]*$/) {\n    \
    \        $key_upper++;\n        }\n    }\n    if($key_lower > 0 && $key_upper\
    \ > 0) {\n        return \"\";\n    }\n    return 1;\n}", "    my $first = undef;\n\
    \    return \"\" if (scalar(keys(%$dict)) == 0);\n    while(my($k, $v) = each(%$dict))\
    \ {\n        if (defined($first)) {\n            return \"\" if (!&check_keys_case($k,\
    \ $first));\n        } else {\n            $first = $k;\n        }\n    }\n  \
    \  return 1;\n}", "    my(@keys) = keys %$dict;\n    if (scalar(@keys) == 0) {\n\
    \        return 1;\n    }\n    my($key) = $keys[0];\n    my($is_lower) = $key\
    \ =~ /^[a-z]+$/;\n    my($is_upper) = $key =~ /^[A-Z]+$/;\n    if (!$is_lower\
    \ && !$is_upper) {\n        return \"\";\n    }\n    my($i);\n    for ($i = 1;\
    \ $i < scalar(@keys); $i++) {\n        my($k) = $keys[$i];\n        if ($is_lower)\
    \ {\n            if ($k !~ /^[a-z]+$/) {\n                return \"\";\n     \
    \       }\n        }\n        else {\n            if ($k !~ /^[A-Z]+$/) {\n  \
    \              return \"\";\n            }\n        }\n    }\n    return 1;\n}",
  "    my $is_lower = 0;\n    my $is_upper = 0;\n    my $i;\n    my $dict_size = scalar\
    \ keys %$dict;\n    if($dict_size == 0) {\n        return 1;\n    }\n    foreach\
    \ $i (keys %$dict) {\n        if($i =~ /[a-z]/) {\n            $is_lower = 1;\n\
    \        }\n        if($i =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n\
    \    }\n    if($is_lower == 1 && $is_upper == 1) {\n        return \"\";\n   \
    \ }\n    return 1;\n}", "    foreach my $key (keys %$dict) {\n        if(ref($key)\
    \ eq \"\") {\n            if(($key =~ /[A-Z]/) && ($key =~ /[a-z]/)) {\n     \
    \           return \"\";\n            }\n        }\n    }\n    return 1;\n}",
  '    my $flag = 1;', "    my $result = \"\";\n    my $str_key_count = 0;\n    my\
    \ $int_key_count = 0;\n    my $upper_key_count = 0;\n    my $lower_key_count =\
    \ 0;\n    my $upper_key_flag = 0;\n    my $lower_key_flag = 0;\n    my $int_key_flag\
    \ = 0;\n    my $str_key_flag = 0;\n    if (!%$dict) {\n        $result = 1;\n\
    \    } else {\n        foreach my $key (keys %$dict) {\n            if ($key =~\
    \ /^[A-Z0-9]+$/) {\n                $upper_key_count += 1;\n                $upper_key_flag\
    \ = 1;\n            } elsif ($key =~ /^[a-z0-9]+$/) {\n                $lower_key_count\
    \ += 1;\n                $lower_key_flag = 1;\n            } elsif ($key =~ /^[0-9]+$/)\
    \ {\n                $int_key_count += 1;\n                $int_key_flag = 1;\n\
    \            } elsif ($key =~ /^[a-zA-Z]+$/) {\n                $str_key_count\
    \ += 1;\n                $str_key_flag = 1;\n            }\n        }\n      \
    \  if ($upper_key_count == scalar(keys %$dict) && $upper_key_flag == 1) {\n  \
    \          $result = 1;\n        } elsif ($lower_key_count == scalar(keys %$dict)\
    \ && $lower_key_flag == 1) {\n            $result = 1;\n        } elsif ($int_key_count\
    \ == scalar(keys %$dict) && $int_key_flag == 1) {\n            $result = 1;\n\
    \        } elsif ($str_key_count == scalar(keys %$dict) && $str_key_flag == 1)\
    \ {\n            $result = 1;\n        }\n    }\n    return $result;\n}", "  \
    \  return \"\" if !$dict;\n    my($key,$value);\n    my $small = 1;\n    my $big\
    \ = 1;\n    while (($key,$value) = each %$dict) {\n        $small = 0 if $key\
    \ ne lc($key);\n        $big = 0 if $key ne uc($key);\n    }\n    return \"\"\
    \ if !$small && !$big;\n    return 1;\n}", "    my $result = 1;\n    my $case\
    \ = \"\";\n    foreach my $key (keys %$dict) {\n        if (ref($key) eq \"\"\
    ) {\n            my $temp = uc($key);\n            if ($case eq \"\") {\n    \
    \            $case = $temp;\n            }\n            if ($case ne $temp) {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   }\n    }\n    return $result;\n}", "    my @keys = keys %$dict;\n    if(@keys\
    \ == 0) { return 1; }\n    my @lc = grep {lc($_) eq $_} @keys;\n    my @uc = grep\
    \ {uc($_) eq $_} @keys;\n    return (@lc == @keys or @uc == @keys);\n}", "   \
    \ my $result = 1;\n    my $case;\n    foreach my $key (keys %$dict) {\n      \
    \  my $kcase = $key;\n        $kcase =~ tr/A-Z/a-z/;\n        if ($kcase eq $key)\
    \ {\n            $case = 1;\n        } else {\n            $case = 0;\n      \
    \  }\n        last if ($case);\n    }\n    return \"\" if (!defined($case));\n\
    \    foreach my $key (keys %$dict) {\n        my $kcase = $key;\n        $kcase\
    \ =~ tr/A-Z/a-z/;\n        if ($kcase eq $key && $case == 1) {\n            $result\
    \ = 1;\n        } elsif ($kcase ne $key && $case == 0) {\n            $result\
    \ = 1;\n        } else {\n            $result = \"\";\n            last;\n   \
    \     }\n    }\n    return $result;\n}", "    my $result = 1;\n    my $current_key_type\
    \ = \"\";\n    for my $key (keys %$dict) {\n        if ($current_key_type eq \"\
    \") {\n            $current_key_type = ($key =~ m/^[a-z]+$/) ? 'lc' : 'uc';\n\
    \        } elsif ($current_key_type eq 'lc' && $key =~ m/^[A-Z]+$/) {\n      \
    \      $result = \"\";\n            last;\n        } elsif ($current_key_type\
    \ eq 'uc' && $key =~ m/^[a-z]+$/) {\n            $result = \"\";\n           \
    \ last;\n        }\n    }\n    return $result;\n}", "    my $output = \"\";\n\
    \    return $output if (scalar(keys(%$dict)) < 1);", "    # check for the empty\
    \ hash\n    if (scalar(keys %$dict) == 0) {\n        return \"\";\n    }\n   \
    \ my $case_flag = 0;\n    my $current_case = 0;\n    # iterate through each key\n\
    \    foreach my $key (keys %$dict) {\n        if ($case_flag == 0) {\n       \
    \     # test if the key is uppercase\n            if ($key =~ /^[A-Z]+$/) {\n\
    \                $current_case = 1;\n                $case_flag = 1;\n       \
    \     } elsif ($key =~ /^[a-z]+$/) {\n                $current_case = 2;\n   \
    \             $case_flag = 1;\n            } else {\n                return \"\
    \";\n            }\n        } else {\n            # test if the key is uppercase\n\
    \            if ($key =~ /^[A-Z]+$/) {\n                if ($current_case != 1)\
    \ {\n                    return \"\";\n                }\n            } elsif\
    \ ($key =~ /^[a-z]+$/) {\n                if ($current_case != 2) {\n        \
    \            return \"\";\n                }\n            } else {\n         \
    \       return \"\";\n            }\n        }\n    }\n    return 1;\n}", "  \
    \  if (!scalar(keys(%$dict))) {\n        return(1);\n    }\n    my $key_is_lower\
    \ = (keys(%$dict))[0] =~ /^[a-z]+$/;\n    for my $key (keys(%$dict)) {\n     \
    \   if ($key_is_lower) {\n            if ($key !~ /^[a-z]+$/) {\n            \
    \    return(\"\");\n            }\n        }\n        else {\n            if ($key\
    \ !~ /^[A-Z]+$/) {\n                return(\"\");\n            }\n        }\n\
    \    }\n    return(1);\n}", "    my $is_upper = 0;\n    my $is_lower = 0;\n  \
    \  foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n         \
    \   $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_lower\
    \ = 1;\n        }\n    }\n    if ($is_upper == $is_lower) {\n        return 1;\n\
    \    }\n    return '';\n}", "    my($value) = 1;\n    my($lc_keys) = 1;\n    my($uc_keys)\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key !~ /^[a-z]+$/) {\n\
    \            $lc_keys = 0;\n        }\n        if ($key !~ /^[A-Z]+$/) {\n   \
    \         $uc_keys = 0;\n        }\n    }\n    $value = \"\" if ($lc_keys + $uc_keys\
    \ == 0);\n    return $value;\n}", "    my($key);\n    my($lc) = 0;\n    my($uc)\
    \ = 0;\n    my($key_name);\n    my($return_value) = \"\";\n    my($result) = \"\
    \";\n    if (%$dict) {\n        foreach $key (keys %$dict) {\n            $key_name\
    \ = $key;\n            if ($key_name =~ /[A-Z]/) {\n                $uc++;\n \
    \           } else {\n                $lc++;\n            }\n        }\n     \
    \   if ($uc && $lc) {\n            $result = \"\";\n        } else {\n       \
    \     $result = 1;\n        }\n    } else {\n        $result = \"\";\n    }\n\
    \    $return_value = $result;\n    return $return_value;\n}", "    my $all_lower\
    \ = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n    }\n    return ($all_lower\
    \ || $all_upper) ? 1 : \"\";\n}", "    my $num_elements = scalar(keys(%$dict));\n\
    \    return '' if $num_elements == 0;\n    my @lower = sort keys %$dict;\n   \
    \ my @upper = sort map uc, keys %$dict;\n    if ($lower[0] eq @lower[$num_elements-1]\
    \ &&\n        $upper[0] eq @upper[$num_elements-1]) {\n        return 1;\n   \
    \ }\n    return '';\n}", '    my $flag = 1;', "    my($is_empty) = 1;\n    my($key);\n\
    \    if (scalar(keys(%{$dict})) == 0) {\n        return 1;\n    }\n    foreach\
    \ $key (keys(%{$dict})) {\n        if (!check_case($key)) {\n            return\
    \ \"\";\n        }\n    }\n    return 1;\n}", "    if(scalar(keys %$dict) == 0)\
    \ {\n        return \"\";\n    }\n    my @keys = keys %$dict;\n    my $key_type\
    \ = \"lower\";\n    if($keys[0] eq uc($keys[0])) {\n        $key_type = \"upper\"\
    ;\n    }\n    for(my $i = 1; $i < scalar(@keys); $i++) {\n        if($key_type\
    \ eq \"lower\" && $keys[$i] ne lc($keys[$i])) {\n            return \"\";\n  \
    \      }\n        if($key_type eq \"upper\" && $keys[$i] ne uc($keys[$i])) {\n\
    \            return \"\";\n        }\n    }\n    return 1;\n}", "    my @keys\
    \ = keys %$dict;\n    if (@keys == 0) {\n        return 1;\n    }\n    my $is_all_upper\
    \ = 1;\n    my $is_all_lower = 1;\n    foreach my $key (@keys) {\n        unless\
    \ ($key =~ /^[a-z]+$/) {\n            $is_all_lower = 0;\n        }\n        unless\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_all_upper = 0;\n        }\n    }\n \
    \   if ($is_all_lower or $is_all_upper) {\n        return 1;\n    }\n    return\
    \ \"\";\n}", '    my $flag = 0;', "    my $up_flag = 0;\n    my $low_flag = 0;\n\
    \    foreach my $key (keys %$dict) {\n        $up_flag++ if ($key eq uc($key));\n\
    \        $low_flag++ if ($key eq lc($key));\n    }\n    if ($up_flag == keys %$dict\
    \ || $low_flag == keys %$dict) {\n        return 1;\n    }\n    return \"\";\n\
    }", "    my $res = 1;\n    my $upper = 0;\n    my $lower = 0;\n    my $init =\
    \ 0;\n    while (my ($key, $value) = each %$dict) {\n        if ($init == 0) {\n\
    \            $init = 1;\n            $upper = $key =~ /[A-Z]/ ? 1 : 0;\n     \
    \       $lower = $key =~ /[a-z]/ ? 1 : 0;\n        } else {\n            if ($upper\
    \ == 1) {\n                $res = 0 if $key =~ /[a-z]/;\n            } elsif ($lower\
    \ == 1) {\n                $res = 0 if $key =~ /[A-Z]/;\n            }\n     \
    \   }\n    }\n    return $res;\n}", '    return 1 if (scalar(keys(%{$dict})) ==
    0);', "    my $lcase = 1;\n    my $ucase = 1;\n    foreach my $key (keys %$dict)\
    \ {\n        $lcase = 0 if ($key !~ /^[a-z]+$/);\n        $ucase = 0 if ($key\
    \ !~ /^[A-Z]+$/);\n    }\n    return $lcase || $ucase;\n}", "    my $first_key\
    \ = 1;\n    my $key_case;\n    my $ret = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        if ($first_key) {\n            $key_case = ($key =~ m/^[a-z]+$/)\
    \ ? \"lower\" : \"upper\";\n            $first_key = 0;\n        } else {\n  \
    \          if ($key_case eq \"lower\" && $key =~ m/^[A-Z]+$/) {\n            \
    \    return $ret;\n            } elsif ($key_case eq \"upper\" && $key =~ m/^[a-z]+$/)\
    \ {\n                return $ret;\n            }\n        }\n    }\n    $ret =\
    \ 1;\n    return $ret;\n}", "    my($lc_count, $uc_count) = (0, 0);\n    for my\
    \ $key (keys %$dict) {\n        if($key =~ /^[a-z]+$/) {\n            $lc_count++;\n\
    \        }\n        elsif($key =~ /^[A-Z]+$/) {\n            $uc_count++;\n  \
    \      }\n        else {\n            return \"\";\n        }\n    }\n    if($lc_count\
    \ > 0 && $uc_count > 0) {\n        return \"\";\n    }\n    else {\n        return\
    \ 1;\n    }\n}", "    my $length = keys %$dict;\n    if ($length == 0) {\n   \
    \     return 1;\n    }\n    foreach my $k (keys %$dict) {\n        if ($k =~ /[A-Z]/)\
    \ {\n            return \"\" if $k =~ /[a-z]/;\n        } else {\n           \
    \ return \"\" if $k =~ /[A-Z]/;\n        }\n    }\n    return 1;\n}", "    my(@keys)\
    \ = keys %$dict;\n    my(@values) = values %$dict;\n    if(grep {! /^[a-z]*$/}\
    \ @keys) {\n        return \"\";\n    }\n    return 1;\n}", "    if(%$dict ==\
    \ 0) { return 1; }\n    my($key, $value, $has_upper, $has_lower);\n    while(($key,\
    \ $value) = each %$dict) {\n        $has_upper++ if($key =~ /[A-Z]/);\n      \
    \  $has_lower++ if($key =~ /[a-z]/);\n    }\n    return ($has_upper && $has_lower)\
    \ ? \"\" : 1;\n}", "    my $is_all_upper = 1;\n    my $is_all_lower = 1;\n   \
    \ my $all_keys_are_strings = 1;\n    foreach my $key (keys %$dict) {\n       \
    \ if(!ref($key)) {\n            $is_all_upper = 0 if(lc($key) eq $key);\n    \
    \        $is_all_lower = 0 if(uc($key) eq $key);\n        } else {\n         \
    \   $all_keys_are_strings = 0;\n        }\n    }\n    return 1 if($all_keys_are_strings\
    \ && ($is_all_upper || $is_all_lower));\n    return \"\";\n}", "    my $ret =\
    \ 1;\n    my $dict_keys = keys $dict;\n    return $ret if $dict_keys == 0;\n \
    \   my $is_upper = 0;\n    my $is_lower = 0;\n    foreach my $key (keys $dict)\
    \ {\n        $is_upper = 1 if $key =~ /[A-Z]/;\n        $is_lower = 1 if $key\
    \ =~ /[a-z]/;\n    }\n    return \"\" if $is_upper && $is_lower;\n    return $ret;\n\
    }", "    return 1 if !%$dict;\n    my @keys = keys %$dict;\n    my $first = shift\
    \ @keys;\n    my $case = $first =~ /^[a-z]+$/ ? 'lower' : $first =~ /^[A-Z]+$/\
    \ ? 'upper' : '';\n    return '' if !$case;\n    for my $key (@keys) {\n     \
    \   return '' if ($case eq 'lower' && $key !~ /^[a-z]+$/) ||\n               \
    \      ($case eq 'upper' && $key !~ /^[A-Z]+$/);\n    }\n    return 1;\n}", " \
    \   my($key, $val);\n    my($lower, $upper);\n    foreach $key (keys %$dict) {\n\
    \        $val = $dict->{$key};\n        if (is_lower($key)) {\n            $lower\
    \ = 1;\n        }\n        if (is_upper($key)) {\n            $upper = 1;\n  \
    \      }\n    }\n    return $lower ? 1 : $upper ? 1 : \"\";\n}", "    my $lower\
    \ = 1;\n    my $upper = 1;\n    foreach my $key (keys %$dict) {\n        $lower\
    \ = 0 if ($key !~ /^[a-z]+$/);\n        $upper = 0 if ($key !~ /^[A-Z]+$/);\n\
    \    }\n    return 1 if ($lower or $upper);\n    return 0;\n}", "    my $result\
    \ = 1;\n    my $upper = 1;\n    my $lower = 1;\n    my @keys = keys %$dict;\n\
    \    foreach my $key (@keys) {\n        if ($key =~ /[[:upper:]]+/) {\n      \
    \      $lower = 0;\n        }\n        if ($key =~ /[[:lower:]]+/) {\n       \
    \     $upper = 0;\n        }\n    }\n    if ($upper == 0 && $lower == 0) {\n \
    \       $result = \"\";\n    }\n    return $result;\n}", '    if (!%$dict) { return
    ""; }', "    my $result = 1;\n    foreach my $k (keys %$dict) {\n        if (ref($k)\
    \ ne \"\") {\n            $result = \"\";\n            last;\n        }\n    \
    \    if ($k =~ /[A-Z]/) {\n            if ($k =~ /[a-z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        } else {\n          \
    \  if ($k =~ /[A-Z]/) {\n                $result = \"\";\n                last;\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my($keys_string,\
    \ $keys_upper);\n    for my $key (keys %$dict) {\n        if (not $keys_string\
    \ and not $keys_upper) {\n            if ($key =~ /^[a-z]+$/) {\n            \
    \    $keys_string = 1;\n            }\n            elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $keys_upper = 1;\n            }\n            else {\n   \
    \             return '';\n            }\n        }\n        elsif ($keys_string\
    \ and $key !~ /^[a-z]+$/) {\n            return '';\n        }\n        elsif\
    \ ($keys_upper and $key !~ /^[A-Z]+$/) {\n            return '';\n        }\n\
    \    }\n    return '1';\n}", "    return 1 if (scalar(keys(%{$dict})) == 0);\n\
    \    my @keys = keys(%{$dict});\n    my @values = values(%{$dict});\n    my $all_upper\
    \ = 1;\n    my $all_lower = 1;\n    foreach my $key (@keys) {\n        $all_upper\
    \ = 0 if ($key !~ /^[A-Z]+$/);\n        $all_lower = 0 if ($key !~ /^[a-z]+$/);\n\
    \    }\n    return 1 if ($all_upper || $all_lower);\n    return '';\n}", "   \
    \ my @keys = keys %$dict;\n    return if $#keys==-1;\n    # find out the case\n\
    \    my $key = $keys[0];\n    my $case = check_case($key);\n    if($case ne \"\
    UPPER\") {\n        $case = \"LOWER\";\n    }\n    # check all keys\n    foreach\
    \ my $key (@keys) {\n        my $local_case = check_case($key);\n        return\
    \ if $local_case ne $case;\n    }\n    return 1;\n}", "    my($key);\n    my($value);\n\
    \    my($case) = 0;\n    my($upper_case) = 1;\n    my($lower_case) = 1;\n    my($return_value)\
    \ = 1;\n    foreach $key (keys %$dict) {\n        if (ref($key) =~ /ARRAY/) {\n\
    \            $return_value = 0;\n            last;\n        }\n        if (ref($key)\
    \ =~ /HASH/) {\n            $return_value = 0;\n            last;\n        }\n\
    \        if (lc($key) ne $key) {\n            $lower_case = 0;\n        }\n  \
    \      if (uc($key) ne $key) {\n            $upper_case = 0;\n        }\n    \
    \    if (($lower_case == 0) && ($upper_case == 0)) {\n            $return_value\
    \ = 0;\n            last;\n        }\n    }\n    return $return_value;\n}", " \
    \   return 0 if ( !defined($dict) );\n    my($res) = 0;\n    my($k);\n    my($v);\n\
    \    if(scalar(keys(%{$dict})) == 0) {\n        $res = 1;\n    } else {\n    \
    \    $res = 1;\n        while(($k, $v) = each(%{$dict})) {\n            if(!(($k\
    \ =~ /^[a-z]*$/) || ($k =~ /^[A-Z]*$/))) {\n                $res = 0;\n      \
    \          last;\n            }\n        }\n    }\n    return $res;\n}", "   \
    \ my $res;\n    # write your code here\n    my $check_upper = 1;\n    my $check_lower\
    \ = 1;\n    for my $k (keys %$dict) {\n        $check_upper = 0 if $k !~ /^[A-Z]+$/;\n\
    \        $check_lower = 0 if $k !~ /^[a-z]+$/;\n    }\n    $res = 1 if $check_upper\
    \ || $check_lower;\n    $res = \"\" if !$check_upper && !$check_lower;\n    $res\
    \ = \"\" if !%$dict;\n    return $res;\n}", "    my $code = \"\";\n    foreach\
    \ my $key (sort keys %$dict) {\n        if ($code eq \"\") {\n            $code\
    \ = \"1\" if $key =~ /^[a-z]+$/;\n            $code = \"\" if $key =~ /^[A-Z]+$/;\n\
    \        }\n    }\n    return $code;\n}", "    my $is_all_upper = 1;\n    my $is_all_lower\
    \ = 1;\n    for my $key (keys %$dict) {\n        $is_all_upper = 0 if not $key\
    \ =~ /^[A-Z]+$/;\n        $is_all_lower = 0 if not $key =~ /^[a-z]+$/;\n    }\n\
    \    return \"\" if $is_all_upper == 0 and $is_all_lower == 0;\n    return \"\
    1\";\n}", "    my @keys = keys %$dict;\n    my $up = 0;\n    my $down = 0;\n \
    \   for my $k (@keys) {\n        $down++ if $k =~ /^[a-z]*$/;\n        $up++ if\
    \ $k =~ /^[A-Z]*$/;\n    }\n    if($up && $down) {\n        return \"\";\n   \
    \ }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
