name: HumanEval_104_unique_digits
language: pl
prompt: "# Given an array of positive integers x. return a sorted array of all \n\
  # elements that hasn't any even digit.\n# Note: Returned array should be sorted\
  \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
  # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
  \ {\n    my($x) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
  \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
  \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
  \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n}\n\ntesthumaneval();"
completions: ["    my @x = @$x;\n    return grep {!even_digit($_)} @x;\n}", "    my\
    \ @ret;\n    foreach my $n (@$x) {\n        push @ret, $n if $n !~ /2|4|6|8/;\n\
    \    }\n    return [sort {$a <=> $b} @ret];\n}", "    my @result = ();\n    for\
    \ (@$x) {\n        my $number = $_;\n        # Iterate through each character\
    \ of the number and see if it is\n        # even. If there is no even number,\
    \ add it to the result array.\n        my $has_even = 0;\n        while ($number)\
    \ {\n            my $digit = $number % 10;\n            if ($digit % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $number = int($number / 10);\n        }\n        if (!$has_even) {\n  \
    \          push @result, $_;\n        }\n    }\n    return sort {$a <=> $b} @result;\n\
    }", "    my @y = ();\n    foreach my $v(@$x) {\n        if($v =~ /[13579]/ ) {\n\
    \            push @y, $v;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }", "    return grep { ! m/[2468]/ } @$x;\n}", "    my @arr = sort {$a <=> $b}\
    \ grep { ($_ !~ m/[02468]/) } @$x;\n    return \\@arr;\n}", "    my @a = @$x;\n\
    \    my @b = sort {$a <=> $b} grep {$_ !~ /\\d*\\d[24680]\\d*\\d*\\d*/} @a;\n\
    \    print @b;\n}", "    my @unique_digits = ();\n    for my $value(@$x) {\n \
    \       if ($value =~ /[02468]/) {\n            next;\n        }\n        else\
    \ {\n            push(@unique_digits, $value);\n        }\n    }\n    my @sorted_unique_digits\
    \ = sort {$a <=> $b} @unique_digits;\n    return \\@sorted_unique_digits;\n}",
  "    my @result = ();\n    foreach my $i (@$x) {\n        if ($i % 2 != 0) {\n \
    \           push @result, $i;\n        }\n    }\n    @result = sort {$a <=> $b}\
    \ @result;\n    return @result;\n}", "    my @r;\n    foreach(@$x) {\n       \
    \ push @r, $_ if(not /2|4|6|8|0/);\n    }\n    return \\@r;\n}", "    my @ret;\n\
    \    foreach my $num (@$x) {\n        if (not $num =~ /2|4|6|8|0/) {\n       \
    \     push @ret, $num;\n        }\n    }\n    @ret = sort {$a <=> $b} @ret;\n\
    \    return \\@ret;\n}", "    my @results;\n    foreach my $i (@$x) {\n      \
    \  if ($i % 2 == 1) {\n            push @results, $i;\n        }\n    }\n    return\
    \ @results;\n}", "    my @result = ();\n    my $digit = 0;\n    my $n = 0;\n \
    \   my $temp = 0;\n    my $flag = 0;\n    for(my $i = 0; $i < scalar(@$x); $i++)\
    \ {\n        $n = $$x[$i];\n        $flag = 0;\n        while($n != 0) {\n   \
    \         $digit = $n % 10;\n            if($digit % 2 == 0) {\n             \
    \   $flag = 1;\n                last;\n            }\n            $n = $n / 10;\n\
    \        }\n        if($flag == 0) {\n            push(@result, $$x[$i]);\n  \
    \      }\n    }\n    @result = sort {$a <=> $b} @result;\n    return @result;\n\
    }", "    my @results;\n    foreach my $num (@$x) {\n        push @results, $num\
    \ if (is_unique_digits($num));\n    }\n    return \\@results;\n}", "    my @digits\
    \ = split(\"\", join(\"\", @$x));\n    my @result = ();\n    my $has_even = 0;\n\
    \    for my $digit (@digits) {\n        $has_even = 1 if $digit % 2 == 0;\n  \
    \  }\n    if (!$has_even) {\n        for my $num (@$x) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}", "    my @y\
    \ = grep {/[02468]/} @$x;\n    return \\@y;\n}", "    my @result = ();\n    foreach\
    \ (@$x) {\n        push @result, $_ if not /[02468]/;\n    }\n    return sort\
    \ {$a <=> $b} @result;\n}", "    my @array = ();\n    for (@$x) {\n        push\
    \ @array, $_ if not even_digit($_);\n    }\n    return \\@array;\n}", "    my\
    \ @ans;\n    my $i = 0;\n    my $size = scalar @$x;\n    while ($i < $size) {\n\
    \        my $j = 0;\n        my $size = length($x->[$i]);\n        my $f = 1;\n\
    \        while ($j < $size) {\n            if (substr($x->[$i], $j, 1) % 2 ==\
    \ 0) {\n                $f = 0;\n                last;\n            }\n      \
    \      $j = $j + 1;\n        }\n        if ($f == 1) {\n            push @ans,\
    \ $x->[$i];\n        }\n        $i = $i + 1;\n    }\n    return @ans;\n}", " \
    \   my @return_value = ();\n    for my $i (@$x) {\n        my $has_even_digit\
    \ = 0;\n        while ($i > 0) {\n            my $last_digit = $i % 10;\n    \
    \        if ($last_digit % 2 == 0) {\n                $has_even_digit = 1;\n \
    \               last;\n            }\n            $i = int($i / 10);\n       \
    \ }\n        if (!$has_even_digit) {\n            push @return_value, $i;\n  \
    \      }\n    }\n    return \\@return_value;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
