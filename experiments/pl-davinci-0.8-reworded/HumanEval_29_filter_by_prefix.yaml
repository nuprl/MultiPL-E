name: HumanEval_29_filter_by_prefix
language: pl
prompt: "# Filter an input array of strings only for ones that start with a given\
  \ prefix.\n# >>> filter_by_prefix([], \"a\")\n# []\n# >>> filter_by_prefix([\"abc\"\
  , \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\nsub filter_by_prefix\
  \ {\n    my($strings, $prefix) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
  \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\"\
  , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"\
  xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result = ();\n    for my $string (@$strings) {\n        if\
    \ (index($string, $prefix) == 0) {\n            push @result, $string;\n     \
    \   }\n    }\n    return \\@result;\n}", "    my @ret;\n    foreach my $string\
    \ (@$strings) {\n        push @ret, $string if $string =~ /^$prefix/;\n    }\n\
    \    return @ret;\n}", "    return [grep { index($_, $prefix) == 0 } @$strings];\n\
    }", "    my @matching_strings = ();\n    foreach my $str (@$strings) {\n     \
    \   push @matching_strings, $str if $str =~ /^$prefix/;\n    }\n    return \\\
    @matching_strings;\n}", "    return [\n        grep { substr($_, 0, length($prefix))\
    \ eq $prefix }\n        @$strings\n    ];\n}", "    my @result = ();\n    foreach\
    \ my $string (@$strings) {\n        if ($string =~ /^$prefix/) {\n           \
    \ push @result, $string;\n        }\n    }\n    return @result;\n}", "    return\
    \ grep {/^$prefix/} @$strings;\n}", "    return [grep {/^$prefix/} @$strings];\n\
    }", "    return [grep { /^$prefix/ } @$strings];\n}", "    my @out = ();\n   \
    \ foreach my $s (@$strings) {\n        if ($s =~ /^$prefix/) {\n            push\
    \ @out, $s;\n        }\n    }\n    return @out;\n}", "    my @result = ();\n \
    \   foreach my $string (@$strings) {\n        push @result, $string if starts_with($string,\
    \ $prefix);\n    }\n    return \\@result;\n}", "    return grep { /^$prefix/ }\
    \ @$strings;\n}", "    my @out = ();\n    for my $s (@$strings) {\n        push\
    \ @out, $s if (begins_with($s, $prefix));\n    }\n    return \\@out;\n}", "  \
    \  return grep { /^$prefix/ } @$strings;\n}", "    return grep { /^$prefix/ }\
    \ @$strings;\n}", "    return grep { /^$prefix/ } @$strings;\n}", "    my @ret\
    \ = ();\n    foreach my $string (@$strings) {\n        if ($string =~ /^$prefix/)\
    \ {\n            push @ret, $string;\n        }\n    }\n    return @ret;\n}",
  "    return grep { m/^$prefix/ } @$strings;\n}", "    return grep {/^$prefix/} @$strings;\n\
    }", "    return grep { /^$prefix/ } @$strings;\n}", "    return [\n        grep\
    \ { /^\\Q$prefix\\E/ } @$strings\n    ];\n}", "    return grep { index($_, $prefix)\
    \ == 0 } @$strings;\n}", "    my $ret = [];\n    foreach my $str (@$strings) {\n\
    \        push @$ret, $str if $str =~ /^$prefix/;\n    }\n    return $ret;\n}",
  "    return [grep { $_ =~ /^$prefix/ } @$strings];\n}", "    my @filtered = grep\
    \ { /^$prefix/ } @$strings;\n    return @filtered;\n}", "    return [ grep { defined($_)\
    \ && m/^\\Q$prefix\\E/ } @$strings ];\n}", "    return [grep { m/^$prefix/ } @$strings];\n\
    }", "    my @matched = ();\n    for my $s (@$strings) {\n        push @matched,\
    \ $s if $s =~ /^$prefix/;\n    }\n    return \\@matched;\n}", "    return [grep\
    \ {m/$prefix/} @$strings];\n}", "    grep {s/^\\Q$prefix\\E//} @$strings;\n}",
  "    my @result = ();\n    foreach my $str (@$strings) {\n        push @result,\
    \ $str if $str =~ /^$prefix/;\n    }\n    return @result;\n}", "    return grep\
    \ { $_ =~ m/^$prefix/ } @$strings;\n}", "    return [ grep { /^$prefix/ } @$strings\
    \ ];\n}", "    return [grep { /^$prefix/ } @$strings];\n}", "    return grep {\
    \ $_ =~ /^$prefix/ } @$strings;\n}", "    my @result = ();\n    foreach my $str\
    \ (@$strings) {\n        push @result, $str if substr($str, 0, length($prefix))\
    \ eq $prefix;\n    }\n    return @result;\n}", "    return grep { starts_with($_,\
    \ $prefix) } @$strings;\n}", "    return grep { m/^$prefix/ } @$strings;\n}",
  "    return [grep { substr($_, 0, length($prefix)) eq $prefix } @$strings];\n}",
  "    $prefix =~ s/([\\$\\(\\)\\\\\\+\\*\\?\\[\\]\\{\\}\\/\\.\\<\\>\\|\\^])/\\\\\
    $1/g;\n    $prefix =~ s/\\\\\\*/\\\\E.*\\\\Q/g;\n    $prefix =~ s/\\\\\\?/\\\\\
    E.\\\\Q/g;\n    $prefix =~ s/\\\\\\^/\\\\E[^\\\\Q/g;\n    $prefix =~ s/\\\\\\\
    $/\\\\E\\$/g;\n    $prefix = qr/^\\Q$prefix\\E/;\n    grep { $_ =~ $prefix } @$strings;\n\
    }", "    my @result = ();\n    foreach (@$strings) {\n        push @result, $_\
    \ if (index($_, $prefix) == 0);\n    }\n    return @result;\n}", "    grep(/^$prefix/,\
    \ @$strings);\n}", "    my @result = ();\n    foreach my $string (@$strings) {\n\
    \        push @result, $string if $string =~ /^$prefix/;\n    }\n    return @result;\n\
    }", "    return filter($strings, sub {$_[0] =~ /^$prefix/});\n}", "    return\
    \ grep { /^$prefix/ } @$strings;\n}", "    return [grep {/^$prefix/} @$strings];\n\
    }", "    return grep { /^$prefix/ } @$strings;\n}", "    return grep { substr($_,\
    \ 0, length($prefix)) eq $prefix } @$strings;\n}", "    return grep { /^$prefix/\
    \ } @$strings;\n}", "    return grep { $_ =~ /^$prefix/ } @$strings;\n}", "  \
    \  return grep {$_ =~ /^$prefix/} @$strings;\n}", "    return grep { substr($_,\
    \ 0, length($prefix)) eq $prefix } @$strings;\n}", "    return grep {/^$prefix/}\
    \ @$strings;\n}", "    return [grep { /^$prefix/ } @$strings];\n}", "    return\
    \ [grep {substr($_, 0, length($prefix)) eq $prefix} @$strings];\n}", "    my @filt\
    \ = grep { $_ =~ /^$prefix/ } @$strings;\n    return \\@filt;\n}", "    my @filtered\
    \ = grep { /^$prefix/ } @$strings;\n    return @filtered;\n}", "    grep { /^$prefix/\
    \ } @$strings;\n}", "    return grep { /^$prefix/ } @$strings;\n}", "    my @filtered\
    \ = grep { index($_, $prefix) == 0 } @$strings;\n    return \\@filtered;\n}",
  "    # Filter out strings that do not start with the given prefix.\n    return [grep\
    \ {$_ =~ /^$prefix/} @$strings];\n}", "    my @filtered;\n    foreach my $string\
    \ (@$strings) {\n        if ($string =~ /^$prefix/) {\n            push @filtered,\
    \ $string;\n        }\n    }\n    return @filtered;\n}", "    return grep { /^$prefix/\
    \ } @$strings;\n}", "    my @result = ();\n    for my $s (@$strings) {\n     \
    \   push @result, $s if $s =~ /^$prefix/;\n    }\n    return @result;\n}", " \
    \   return [grep { s/^\\Q$prefix\\E// } @$strings];\n}", "    grep { /^$prefix/\
    \ } @$strings;\n}", "    return () unless $strings;\n    return () unless $prefix;\n\
    \    return grep { /^$prefix/ } @$strings;\n}", "    my @filtered = ();\n    foreach\
    \ my $str (@$strings) {\n        push @filtered, $str if $str =~ /^$prefix/;\n\
    \    }\n    return @filtered;\n}", "    my $regex = qr/^$prefix/;\n    return\
    \ grep(/$regex/, @$strings);\n}", "    my @filtered;\n    foreach my $string (@$strings)\
    \ {\n        push @filtered, $string if $string =~ /^$prefix/;\n    }\n    return\
    \ @filtered;\n}", "    my @ret = ();\n    for my $str (@$strings) {\n        if\
    \ ($str =~ /^$prefix/) {\n            push @ret, $str;\n        }\n    }\n   \
    \ return @ret;\n}", "    return grep { m/^$prefix/ } @$strings;\n}", "    return\
    \ grep {$_ =~ /^$prefix/} @$strings;\n}", "    return grep { /^$prefix/ } @$strings;\n\
    }", "    my @result = ();\n    foreach my $string (@$strings) {\n        if (index($string,\
    \ $prefix) == 0) {\n            push @result, $string;\n        }\n    }\n   \
    \ return @result;\n}", "    my @filtered = ();\n    for my $str (@$strings) {\n\
    \        if ($str =~ /^$prefix/) {\n            push @filtered, $str;\n      \
    \  }\n    }\n    return @filtered;\n}", "    my @filtered = ();\n    for my $string\
    \ (@$strings) {\n        if ($string =~ /^$prefix/) {\n            push @filtered,\
    \ $string;\n        }\n    }\n    return @filtered;\n}", "    my @ret = ();\n\
    \    foreach my $string (@$strings) {\n        if ($string =~ /^$prefix/) {\n\
    \            push @ret, $string;\n        }\n    }\n    return @ret;\n}", "  \
    \  return [ grep { m/^$prefix/ } @$strings ];\n}", "    my @filtered = grep {\
    \ index($_, $prefix) == 0 } @$strings;\n    return \\@filtered;\n}", "    grep\
    \ { substr($_, 0, length($prefix)) eq $prefix } @$strings;\n}", "    $prefix =\
    \ quotemeta($prefix);\n    my @filtered = grep(/^$prefix/, @$strings);\n    return\
    \ \\@filtered;\n}", "    return grep { /^$prefix/ } @$strings;\n}", "    return\
    \ grep { index($_, $prefix) == 0 } @$strings;\n}", "    return grep { /^$prefix/\
    \ } @$strings;\n}", "    grep { $_ =~ /^$prefix/ } @$strings;\n}", "    my @matching\
    \ = grep { s/^\\Q$prefix\\E// } @$strings;\n    return @matching;\n}", "    return\
    \ grep { /^$prefix/ } @$strings;\n}", "    return [\n        grep {\n        \
    \    index($_, $prefix) == 0\n        } @$strings\n    ];\n}", "    return [grep(/^$prefix/,\
    \ @$strings)];\n}", "    my $new_strings = [];\n    foreach my $string (@$strings)\
    \ {\n        push @$new_strings, $string if starts_with($string, $prefix);\n \
    \   }\n    return $new_strings;\n}", "    my @return;\n    foreach (@$strings)\
    \ {\n        push @return, $_ if /^$prefix/;\n    }\n    return @return;\n}",
  "    return grep {index($_, $prefix) == 0} @$strings;\n}", "    return unless($strings);\n\
    \    return grep { my $string = $_; $string =~ m/^$prefix/; } @$strings;\n}",
  "    return grep { /^$prefix/ } @$strings;\n}", "    return grep { $_ =~ /^$prefix/\
    \ } @$strings;\n}", "    my @filtered = grep { /^$prefix/ } @$strings;\n    return\
    \ \\@filtered;\n}", "    return grep { index($_, $prefix) == 0 } @$strings;\n}",
  "    return grep { substr($_, 0, length($prefix)) eq $prefix } @$strings;\n}", " \
    \   return grep { m/^$prefix/ } @$strings;\n}", "    my @out;\n    for my $s (@$strings)\
    \ {\n        push @out, $s if $s =~ /^\\Q$prefix/;\n    }\n    return @out;\n}",
  "    return grep { index($_, $prefix) == 0 } @$strings;\n}", "    return grep {m{^$prefix}}\
    \ @$strings;\n}", "    return [ grep { m{\\A\\Q$prefix\\E} } @$strings ];\n}",
  "    my $len = length($prefix);\n    return [grep { substr($_, 0, $len) eq $prefix\
    \ } @$strings];\n}", "    return grep { /^$prefix/ } @$strings;\n}", "    my @filtered;\n\
    \    foreach my $string (@$strings) {\n        push @filtered, $string if $string\
    \ =~ /^$prefix/;\n    }\n    return @filtered;\n}", "    my @ret = ();\n    foreach\
    \ my $s (@$strings) {\n        push @ret, $s if ($s =~ /^$prefix/);\n    }\n \
    \   return @ret;\n}", "    return [grep { 0 == index($_, $prefix) } @$strings];\n\
    }", "    return [grep {substr($_, 0, length($prefix)) eq $prefix} @$strings];\n\
    }", "    return grep { substr($_, 0, length($prefix)) eq $prefix } @$strings;\n\
    }", "    my @filtered;\n    foreach my $str (@$strings) {\n        if ($str =~\
    \ /^$prefix/) {\n            push @filtered, $str;\n        }\n    }\n    return\
    \ @filtered;\n}", "    my @result = ();\n    foreach my $string (@$strings) {\n\
    \        push @result, $string if $string =~ /^$prefix/;\n    }\n    return @result;\n\
    }", "    return grep {$_ =~ /^$prefix/} @$strings;\n}", "    my @ret = ();\n \
    \   foreach my $string (@$strings) {\n        push @ret, $string if $string =~\
    \ /^$prefix/;\n    }\n    return @ret;\n}", "    my @result = ();\n    for my\
    \ $str (@$strings) {\n        push @result, $str if $str =~ /^$prefix/;\n    }\n\
    \    return @result;\n}", "    grep { substr($_, 0, length($prefix)) eq $prefix\
    \ } @$strings;\n}", "    my @filtered = grep { /^$prefix/ } @$strings;\n    return\
    \ \\@filtered;\n}", "    my @filtered;\n    for my $str (@$strings) {\n      \
    \  if ($str =~ /^$prefix/) {\n            push @filtered, $str;\n        }\n \
    \   }\n    return @filtered;\n}", "    my @prefixed = ();\n    foreach my $str\
    \ (@$strings) {\n        if ($str =~ /^$prefix/) {\n            push @prefixed,\
    \ $str;\n        }\n    }\n    return @prefixed;\n}", "    return grep { m/^$prefix/\
    \ } @$strings;\n}", "    my @ret = ();\n    foreach my $str (@$strings) {\n  \
    \      if($str =~ /^$prefix/i) {\n            push @ret, $str;\n        }\n  \
    \  }\n    return @ret;\n}", "    my @filtered = ();\n    foreach my $str (@$strings)\
    \ {\n        if ($str =~ /^$prefix/) {\n            push @filtered, $str;\n  \
    \      }\n    }\n    return @filtered;\n}", "    return grep { $_ =~ /^$prefix/\
    \ } @$strings;\n}", "    my @filtered;\n    for my $str (@$strings) {\n      \
    \  if ($str =~ /^$prefix/) {\n            push @filtered, $str;\n        }\n \
    \   }\n    return @filtered;\n}", "    my @result = ();\n    for my $string (@$strings)\
    \ {\n        if ($string =~ /^$prefix/) {\n            push @result, $string;\n\
    \        }\n    }\n    return @result;\n}", "    return grep { /^$prefix/ } @$strings;\n\
    }", "    my @ret;\n    for my $s (@$strings) {\n        push @ret, $s if index($s,\
    \ $prefix) == 0;\n    }\n    @ret;\n}", "    $prefix =~ s/\\s+$//; # Remove trailing\
    \ spaces\n    return grep { /^\\Q$prefix\\E/ } @$strings;\n}", "    return [grep\
    \ {substr($_, 0, length($prefix)) eq $prefix} @$strings];\n}", "    return grep\
    \ { m/^$prefix/ } @$strings;\n}", "    $prefix //= \"\";\n    return grep { substr($_,\
    \ 0, length($prefix)) eq $prefix } @$strings;\n}", "    return [grep { /^$prefix/\
    \ } @$strings];\n}", "    return [grep { /^$prefix/ } @$strings];\n}", "    return\
    \ [grep {m/^$prefix/} @$strings];\n}", "    return grep { m/^$prefix/ } @$strings;\n\
    }", "    grep { $_ =~ m/^$prefix/ } @$strings;\n}", "    return grep { m/^$prefix/\
    \ } @$strings;\n}", "    return grep {/^$prefix/} @$strings;\n}", "    return\
    \ [ grep /^$prefix/, @$strings ];\n}", "    my @matches = grep { /^$prefix/ }\
    \ @$strings;\n    return \\@matches;\n}", "    return grep { /^$prefix/ } @$strings;\n\
    }", "    return grep { m{^$prefix} } @$strings;\n}", "    return grep { /^$prefix/\
    \ } @$strings;\n}", "    my @filtered;\n    foreach my $string (@$strings) {\n\
    \        push @filtered, $string if index($string, $prefix) == 0;\n    }\n   \
    \ return \\@filtered;\n}", "    if(defined($prefix)) {\n        $prefix = quotemeta($prefix);\n\
    \    }\n    my @res = ();\n    foreach my $s (@$strings) {\n        if(defined($prefix))\
    \ {\n            push(@res, $s) if($s =~ /^$prefix/);\n        } else {\n    \
    \        push(@res, $s);\n        }\n    }\n    return @res;\n}", "    return\
    \ grep {/^$prefix/} @$strings;\n}", "    return map { $_->[0] } grep { $_->[1]\
    \ }\n            map { [$_, index($_, $prefix) == 0] } @$strings;\n}", "    return\
    \ grep { substr($_, 0, length($prefix)) eq $prefix } @$strings;\n}", "    return\
    \ () unless $strings;\n    grep { /^\\Q$prefix\\E/ } @$strings;\n}", "    my @result\
    \ = ();\n    foreach my $string (@$strings) {\n        if ($string =~ /^$prefix/)\
    \ {\n            push @result, $string;\n        }\n    }\n    return @result;\n\
    }", "    return [ grep {$_ =~ m/^$prefix/} @$strings ];\n}", "    my @filtered;\n\
    \    foreach my $string (@$strings) {\n        push @filtered, $string if($string\
    \ =~ /^$prefix/);\n    }\n    return @filtered;\n}", "    my @filtered = grep(/^$prefix/,\
    \ @$strings);\n    return \\@filtered;\n}", "    my @ret = ();\n    foreach my\
    \ $s (@$strings) {\n        if ($s =~ /^$prefix/) {\n            push @ret, $s;\n\
    \        }\n    }\n    return @ret;\n}", "    return [grep {m/^$prefix/} @$strings];\n\
    }", "    my @filtered = ();\n    foreach my $string (@$strings) {\n        push\
    \ @filtered, $string if $string =~ /^$prefix/;\n    }\n    return @filtered;\n\
    }", "    return [\n        grep { $_ =~ /^\\Q$prefix\\E/ } @$strings\n    ];\n\
    }", "    return [ grep { /^$prefix/ } @$strings ];\n}", "    return grep { my\
    \ $s = $_; $s =~ /^$prefix/ } @$strings;\n}", "    return map { $_ if /^$prefix/\
    \ } @$strings;\n}", "    return grep { /^$prefix/ } @$strings;\n}", "    my @filtered\
    \ = grep { /^$prefix/ } @$strings;\n    return @filtered;\n}", "    my @result\
    \ = ();\n    if (ref($strings) eq \"ARRAY\") {\n        foreach my $str (@$strings)\
    \ {\n            push @result, $str if ($str =~ /^$prefix/);\n        }\n    }\n\
    \    return \\@result;\n}", "    my @filtered = ();\n    foreach my $string (@$strings)\
    \ {\n        push @filtered, $string if $string =~ /^$prefix/;\n    }\n    return\
    \ @filtered;\n}", "    my @filtered = ();\n    foreach my $word (@$strings) {\n\
    \        if ($word =~ /^$prefix/) {\n            push @filtered, $word;\n    \
    \    }\n    }\n    return @filtered;\n}", "    return grep { m/^$prefix/ } @$strings;\n\
    }", "    return grep { /^$prefix/ } @$strings;\n}", "    return [grep { index($_,\
    \ $prefix) == 0 } @$strings];\n}", "    my @result = ();\n    for my $s (@$strings)\
    \ {\n        if ($s =~ /^$prefix/) {\n            push @result, $s;\n        }\n\
    \    }\n    return @result;\n}", "    return grep /^$prefix/, @$strings;\n}",
  "    return grep { /^$prefix/ } @$strings;\n}", "    return grep(/^$prefix/, @$strings);\n\
    }", "    return grep {\n        m/^\\Q$prefix\\E/;\n    } @$strings;\n}", "  \
    \  grep { substr($_, 0, length($prefix)) eq $prefix } @$strings;\n}", "    return\
    \ grep { substr($_, 0, length($prefix)) eq $prefix } @$strings;\n}", "    return\
    \ grep { $_ =~ m/^$prefix/ } @$strings;\n}", "    return [grep { substr($_, 0,\
    \ length($prefix)) eq $prefix } @$strings];\n}", "    my @ret = ();\n    foreach\
    \ my $str (@$strings) {\n        push @ret, $str if $str =~ /^$prefix/;\n    }\n\
    \    return @ret;\n}", "    return grep(/^$prefix/, @$strings);\n}", "    my @filtered\
    \ = grep {\n        my $str = $_;\n        $str =~ /^$prefix/;\n    } @$strings;\n\
    \    return @filtered;\n}", "    return grep {substr($_, 0, length($prefix)) eq\
    \ $prefix} @$strings;\n}", "    my @matches = ();\n    for my $s (@$strings) {\n\
    \        push @matches, $s if $s =~ /^$prefix/;\n    }\n    return @matches;\n\
    }", "    return filter($strings, sub {\n        my $s = shift;\n        return\
    \ substr($s, 0, length($prefix)) eq $prefix;\n    });\n}", "    grep { m/^$prefix/\
    \ } @$strings;\n}", "    my @matches = grep {/^$prefix/} @$strings;\n    return\
    \ \\@matches;\n}", "    return grep(/^$prefix/, @$strings);\n}", "    return grep\
    \ { /^$prefix/ } @$strings;\n}", "    return grep { /^$prefix/ } @$strings;\n}",
  "    my $result = [];\n    for my $str (@$strings) {\n        if ($str =~ /^$prefix/)\
    \ {\n            push @$result, $str;\n        }\n    }\n    return $result;\n\
    }", "    return grep { /^$prefix/ } @$strings;\n}", "    return [grep {m/^$prefix/}\
    \ @$strings];\n}", "    my @results = ();\n    foreach my $string (@$strings)\
    \ {\n        if ($string =~ /^$prefix/) {\n            push @results, $string;\n\
    \        }\n    }\n    return @results;\n}", "    return grep { /^$prefix/ } @$strings;\n\
    }", "    return $strings if !@$strings;\n    return [grep { m/^\\Q$prefix\\E/\
    \ } @$strings];\n}", "    return grep(m/^$prefix/, @$strings);\n}", "    my @matches\
    \ = grep { /^$prefix/ } @$strings;\n    return \\@matches;\n}", "    return grep\
    \ { /^$prefix/ } @$strings;\n}", "    my @out = ();\n    for my $string (@$strings)\
    \ {\n        push @out, $string if 0 == index($string, $prefix);\n    }\n    return\
    \ \\@out;\n}", "    my @filtered = ();\n    foreach my $str (@$strings) {\n  \
    \      push @filtered, $str if $str =~ /^$prefix/;\n    }\n    return @filtered;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
