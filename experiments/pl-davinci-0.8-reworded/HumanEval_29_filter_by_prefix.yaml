name: HumanEval_29_filter_by_prefix
language: pl
prompt: "# Filter an input array of strings only for ones that start with a given\
  \ prefix.\n# >>> filter_by_prefix([], \"a\")\n# []\n# >>> filter_by_prefix([\"abc\"\
  , \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\nsub filter_by_prefix\
  \ {\n    my($strings, $prefix) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
  \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\"\
  , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"\
  xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result = ();\n    for my $string (@$strings) {\n        if\
    \ (index($string, $prefix) == 0) {\n            push @result, $string;\n     \
    \   }\n    }\n    return \\@result;\n}", "    my @ret;\n    foreach my $string\
    \ (@$strings) {\n        push @ret, $string if $string =~ /^$prefix/;\n    }\n\
    \    return @ret;\n}", "    return [grep { index($_, $prefix) == 0 } @$strings];\n\
    }", "    my @matching_strings = ();\n    foreach my $str (@$strings) {\n     \
    \   push @matching_strings, $str if $str =~ /^$prefix/;\n    }\n    return \\\
    @matching_strings;\n}", "    return [\n        grep { substr($_, 0, length($prefix))\
    \ eq $prefix }\n        @$strings\n    ];\n}", "    my @result = ();\n    foreach\
    \ my $string (@$strings) {\n        if ($string =~ /^$prefix/) {\n           \
    \ push @result, $string;\n        }\n    }\n    return @result;\n}", "    return\
    \ grep {/^$prefix/} @$strings;\n}", "    return [grep {/^$prefix/} @$strings];\n\
    }", "    return [grep { /^$prefix/ } @$strings];\n}", "    my @out = ();\n   \
    \ foreach my $s (@$strings) {\n        if ($s =~ /^$prefix/) {\n            push\
    \ @out, $s;\n        }\n    }\n    return @out;\n}", "    my @result = ();\n \
    \   foreach my $string (@$strings) {\n        push @result, $string if starts_with($string,\
    \ $prefix);\n    }\n    return \\@result;\n}", "    return grep { /^$prefix/ }\
    \ @$strings;\n}", "    my @out = ();\n    for my $s (@$strings) {\n        push\
    \ @out, $s if (begins_with($s, $prefix));\n    }\n    return \\@out;\n}", "  \
    \  return grep { /^$prefix/ } @$strings;\n}", "    return grep { /^$prefix/ }\
    \ @$strings;\n}", "    return grep { /^$prefix/ } @$strings;\n}", "    my @ret\
    \ = ();\n    foreach my $string (@$strings) {\n        if ($string =~ /^$prefix/)\
    \ {\n            push @ret, $string;\n        }\n    }\n    return @ret;\n}",
  "    return grep { m/^$prefix/ } @$strings;\n}", "    return grep {/^$prefix/} @$strings;\n\
    }", "    return grep { /^$prefix/ } @$strings;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
