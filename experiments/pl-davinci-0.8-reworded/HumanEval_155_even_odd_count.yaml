name: HumanEval_155_even_odd_count
language: pl
prompt: "# Given an integer. return an array that has the number of even and odd digits\
  \ respectively.\n# Example:\n# >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n\
  # [1, 2]\nsub even_odd_count {\n    my($num) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n\
  \        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2,\
  \ 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @array = ();\n    my $e_count = 0;\n    my $o_count = 0;\n \
    \   foreach (split //, $num) {\n        # If the number mod 2 = 0 then push the\
    \ e_count to an array\n        if ($_ % 2 == 0) {\n            $e_count++;\n \
    \       }\n        # Else push the o_count to an array\n        else {\n     \
    \       $o_count++;\n        }\n    }\n    push(@array, $e_count);\n    push(@array,\
    \ $o_count);\n    # Print the array\n    print \"@array\\n\";\n}", "    my $evens\
    \ = 0;\n    my $odds = 0;\n    if ($num < 0) {\n        $num = -$num;\n    }\n\
    \    while ($num > 0) {\n        if ($num % 2 == 0) {\n            $evens++;\n\
    \        } else {\n            $odds++;\n        }\n        $num = $num / 10;\n\
    \    }\n    return [$evens, $odds];\n}", "    my($even, $odd) = (0, 0);\n    my($digit);\n\
    \    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n\
    \        $digit % 2 == 0 ? $even++ : $odd++;\n        $num = int($num / 10);\n\
    \    }\n    return [$even, $odd];\n}", "    # TODO\n}", "    my @result = (0,\
    \ 0);\n    $num = -$num if $num < 0;\n    while ($num > 0) {\n        if ($num\
    \ % 2 == 0) {\n            $result[0]++;\n        } else {\n            $result[1]++;\n\
    \        }\n        $num /= 10;\n    }\n    return @result;\n}", "    my @result\
    \ = (0, 0);\n    $num = abs($num);\n    while ($num > 0) {\n        if (($num\
    \ % 10) % 2 == 0) {\n            $result[0]++;\n        } else {\n           \
    \ $result[1]++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ @result;\n}", "    my($odds, $evens) = (0, 0);\n    my($c);\n    for $c (split(//,\
    \ $num)) {\n        $odds++ if($c % 2);\n        $evens++ if(!($c % 2));\n   \
    \ }\n    return [$evens, $odds];\n}", "    my @output;\n    $output[0] = 0;\n\
    \    $output[1] = 0;\n    foreach(0..length($num)) {\n        if(substr($num,$_,1)\
    \ % 2 == 0) {\n            $output[0]++;\n        }\n        else {\n        \
    \    $output[1]++;\n        }\n    }\n    return @output;\n}", "    my @digits\
    \ = split(//, $num);\n    my $even_num = 0;\n    my $odd_num = 0;\n    for my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_num +=\
    \ 1;\n        } else {\n            $odd_num += 1;\n        }\n    }\n    return\
    \ [$even_num, $odd_num];\n}", '    my @counts = (0, 0);', "    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    my @ret;\n    while ($num != 0) {\n      \
    \  my $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    push @ret, $even_count;\n    push @ret, $odd_count;\n   \
    \ return @ret;\n}", "    my(@digits) = split '', $num;\n    my $even_count = 0;\n\
    \    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count += 1;\n        } else {\n            $odd_count\
    \ += 1;\n        }\n    }\n    return [$even_count, $odd_count];\n}", "    my\
    \ @result = (0, 0);\n    while ($num != 0) {\n        if (($num % 10) % 2 == 0)\
    \ {\n            $result[0]++;\n        } else {\n            $result[1]++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return @result;\n}", " \
    \   my @temp = split \"\", $num;\n    my $even = 0;\n    my $odd = 0;\n    for\
    \ (my $i = 0; $i < @temp; $i++) {\n        if ($temp[$i] =~ /\\d+/) {\n      \
    \      if ($temp[$i] % 2 == 0) {\n                $even++;\n            } else\
    \ {\n                $odd++;\n            }\n        }\n    }\n    return [$even,\
    \ $odd];\n}", "    my $evens = 0;\n    my $odds = 0;\n    while($num != 0) {\n\
    \        my $last = $num % 10;\n        if($last % 2 == 0) {\n            $evens++;\n\
    \        } else {\n            $odds++;\n        }\n        $num = int($num /\
    \ 10);\n    }\n    return [$evens, $odds];\n}\nprint Dumper(even_odd_count(-12));\n\
    print Dumper(even_odd_count(123));", "    my($odd, $even) = (0, 0);\n    while\
    \ ($num){\n        my $digit = $num % 10;\n        $odd += $digit % 2;\n     \
    \   $even += !($digit % 2);\n        $num = int($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}", "    my @list;\n    my $even = 0;\n    my $odd = 0;\n  \
    \  @list = split //, $num;\n    foreach my $i (@list) {\n        if ($i % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return ($even, $odd);\n}", "    my($odd, $even) = (0, 0);\n    while($num)\
    \ {\n        my($rem) = $num % 10;\n        if ($rem % 2 == 0) {\n           \
    \ $even += 1;\n        } else {\n            $odd += 1;\n        }\n        $num\
    \ = int($num / 10);\n    }\n    return [$even, $odd];\n}", "    my @num_array\
    \ = split(//, $num);\n    my $even = 0;\n    my $odd = 0;\n    if ($num_array[0]\
    \ ne \"-\") {\n        for (my $i = 0; $i < scalar @num_array; $i++) {\n     \
    \       if ($num_array[$i] % 2 == 0) {\n                $even += 1;\n        \
    \    } else {\n                $odd += 1;\n            }\n        }\n    } else\
    \ {\n        for (my $i = 1; $i < scalar @num_array; $i++) {\n            if ($num_array[$i]\
    \ % 2 == 0) {\n                $even += 1;\n            } else {\n           \
    \     $odd += 1;\n            }\n        }\n    }\n    return [$even, $odd];\n\
    }", "    my @result = (0, 0);\n    while($num != 0) {\n        my $rem = $num\
    \ % 10;\n        $result[$rem % 2]++;\n        $num = int($num / 10);\n    }\n\
    \    return @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
