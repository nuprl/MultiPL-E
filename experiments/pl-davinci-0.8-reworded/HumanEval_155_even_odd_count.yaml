name: HumanEval_155_even_odd_count
language: pl
prompt: "# Given an integer. return an array that has the number of even and odd digits\
  \ respectively.\n# Example:\n# >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n\
  # [1, 2]\nsub even_odd_count {\n    my($num) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n\
  \        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2,\
  \ 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @array = ();\n    my $e_count = 0;\n    my $o_count = 0;\n \
    \   foreach (split //, $num) {\n        # If the number mod 2 = 0 then push the\
    \ e_count to an array\n        if ($_ % 2 == 0) {\n            $e_count++;\n \
    \       }\n        # Else push the o_count to an array\n        else {\n     \
    \       $o_count++;\n        }\n    }\n    push(@array, $e_count);\n    push(@array,\
    \ $o_count);\n    # Print the array\n    print \"@array\\n\";\n}", "    my $evens\
    \ = 0;\n    my $odds = 0;\n    if ($num < 0) {\n        $num = -$num;\n    }\n\
    \    while ($num > 0) {\n        if ($num % 2 == 0) {\n            $evens++;\n\
    \        } else {\n            $odds++;\n        }\n        $num = $num / 10;\n\
    \    }\n    return [$evens, $odds];\n}", "    my($even, $odd) = (0, 0);\n    my($digit);\n\
    \    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n\
    \        $digit % 2 == 0 ? $even++ : $odd++;\n        $num = int($num / 10);\n\
    \    }\n    return [$even, $odd];\n}", "    # TODO\n}", "    my @result = (0,\
    \ 0);\n    $num = -$num if $num < 0;\n    while ($num > 0) {\n        if ($num\
    \ % 2 == 0) {\n            $result[0]++;\n        } else {\n            $result[1]++;\n\
    \        }\n        $num /= 10;\n    }\n    return @result;\n}", "    my @result\
    \ = (0, 0);\n    $num = abs($num);\n    while ($num > 0) {\n        if (($num\
    \ % 10) % 2 == 0) {\n            $result[0]++;\n        } else {\n           \
    \ $result[1]++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ @result;\n}", "    my($odds, $evens) = (0, 0);\n    my($c);\n    for $c (split(//,\
    \ $num)) {\n        $odds++ if($c % 2);\n        $evens++ if(!($c % 2));\n   \
    \ }\n    return [$evens, $odds];\n}", "    my @output;\n    $output[0] = 0;\n\
    \    $output[1] = 0;\n    foreach(0..length($num)) {\n        if(substr($num,$_,1)\
    \ % 2 == 0) {\n            $output[0]++;\n        }\n        else {\n        \
    \    $output[1]++;\n        }\n    }\n    return @output;\n}", "    my @digits\
    \ = split(//, $num);\n    my $even_num = 0;\n    my $odd_num = 0;\n    for my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_num +=\
    \ 1;\n        } else {\n            $odd_num += 1;\n        }\n    }\n    return\
    \ [$even_num, $odd_num];\n}", '    my @counts = (0, 0);', "    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    my @ret;\n    while ($num != 0) {\n      \
    \  my $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    push @ret, $even_count;\n    push @ret, $odd_count;\n   \
    \ return @ret;\n}", "    my(@digits) = split '', $num;\n    my $even_count = 0;\n\
    \    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count += 1;\n        } else {\n            $odd_count\
    \ += 1;\n        }\n    }\n    return [$even_count, $odd_count];\n}", "    my\
    \ @result = (0, 0);\n    while ($num != 0) {\n        if (($num % 10) % 2 == 0)\
    \ {\n            $result[0]++;\n        } else {\n            $result[1]++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return @result;\n}", " \
    \   my @temp = split \"\", $num;\n    my $even = 0;\n    my $odd = 0;\n    for\
    \ (my $i = 0; $i < @temp; $i++) {\n        if ($temp[$i] =~ /\\d+/) {\n      \
    \      if ($temp[$i] % 2 == 0) {\n                $even++;\n            } else\
    \ {\n                $odd++;\n            }\n        }\n    }\n    return [$even,\
    \ $odd];\n}", "    my $evens = 0;\n    my $odds = 0;\n    while($num != 0) {\n\
    \        my $last = $num % 10;\n        if($last % 2 == 0) {\n            $evens++;\n\
    \        } else {\n            $odds++;\n        }\n        $num = int($num /\
    \ 10);\n    }\n    return [$evens, $odds];\n}\nprint Dumper(even_odd_count(-12));\n\
    print Dumper(even_odd_count(123));", "    my($odd, $even) = (0, 0);\n    while\
    \ ($num){\n        my $digit = $num % 10;\n        $odd += $digit % 2;\n     \
    \   $even += !($digit % 2);\n        $num = int($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}", "    my @list;\n    my $even = 0;\n    my $odd = 0;\n  \
    \  @list = split //, $num;\n    foreach my $i (@list) {\n        if ($i % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return ($even, $odd);\n}", "    my($odd, $even) = (0, 0);\n    while($num)\
    \ {\n        my($rem) = $num % 10;\n        if ($rem % 2 == 0) {\n           \
    \ $even += 1;\n        } else {\n            $odd += 1;\n        }\n        $num\
    \ = int($num / 10);\n    }\n    return [$even, $odd];\n}", "    my @num_array\
    \ = split(//, $num);\n    my $even = 0;\n    my $odd = 0;\n    if ($num_array[0]\
    \ ne \"-\") {\n        for (my $i = 0; $i < scalar @num_array; $i++) {\n     \
    \       if ($num_array[$i] % 2 == 0) {\n                $even += 1;\n        \
    \    } else {\n                $odd += 1;\n            }\n        }\n    } else\
    \ {\n        for (my $i = 1; $i < scalar @num_array; $i++) {\n            if ($num_array[$i]\
    \ % 2 == 0) {\n                $even += 1;\n            } else {\n           \
    \     $odd += 1;\n            }\n        }\n    }\n    return [$even, $odd];\n\
    }", "    my @result = (0, 0);\n    while($num != 0) {\n        my $rem = $num\
    \ % 10;\n        $result[$rem % 2]++;\n        $num = int($num / 10);\n    }\n\
    \    return @result;\n}", "    die \"Invalid input\" if $num !~ /^-?\\d+$/;\n\
    \    my @numbers = split(\"\", abs($num));\n    my @return_values = (0, 0);\n\
    \    map {$return_values[$_ % 2]++} @numbers;\n    return @return_values;\n}",
  "    my($even_count, $odd_count) = (0, 0);\n    if ($num < 0) {\n        $num =\
    \ -$num;\n    }\n    my($last_digit);\n    while ($num > 0) {\n        $last_digit\
    \ = $num % 10;\n        if ($last_digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    return [$even_count, $odd_count];\n}", "    my($count_even,\
    \ $count_odd) = (0, 0);\n    while ($num) {\n        $num % 2 ? $count_odd++ :\
    \ $count_even++;\n        $num /= 10;\n    }\n    return [$count_even, $count_odd];\n\
    }", "    my $num_abs = abs($num);\n    my @digits = split(//, $num_abs);\n   \
    \ my @even_odd_digits = (0, 0);\n    map { $even_odd_digits[$_ % 2]++ } @digits;\n\
    \    return @even_odd_digits;\n}", "    my $odd = 0;\n    my $even = 0;\n    while($num)\
    \ {\n        my $digit = $num % 10;\n        if($digit % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n        $num =\
    \ int($num / 10);\n    }\n    return [$even, $odd];\n}", "    my @arr = (0, 0);\n\
    \    while ($num != 0) {\n        if ($num % 2 == 0) {\n            $arr[0] +=\
    \ 1;\n        } else {\n            $arr[1] += 1;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    return @arr;\n}", "    my($even_count, $odd_count) = (0,\
    \ 0);\n    while ($num) {\n        my($digit) = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return [$even_count, $odd_count];\n\
    }", "    return unless (defined $num);\n    my $sign = ($num < 0 ? 1 : 0);\n \
    \   $num = abs($num);\n    my $even = 0;\n    my $odd = 0;\n    while ($num >\
    \ 0) {\n        my $digit = $num % 10;\n        if ($digit & 1) {\n          \
    \  $odd++;\n        } else {\n            $even++;\n        }\n        $num =\
    \ int($num / 10);\n    }\n    return $sign, $even, $odd;\n}", "    my $i = 0;\n\
    \    my @num_arr = split('', $num);\n    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    for $i (0..$#num_arr) {\n        if ($num_arr[$i] % 2 == 0) {\n  \
    \          $even_count += 1;\n        } else {\n            $odd_count += 1;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "    return [ grep\
    \ { ($_ % 2) == 0 } split(//, $num) ],\n           [ grep { ($_ % 2) == 1 } split(//,\
    \ $num) ];\n}", "    my $even = 0;\n    my $odd = 0;\n    my @res;\n    my $abs\
    \ = abs($num);\n    while ($abs > 0) {\n        my $rem = $abs % 10;\n       \
    \ if ($rem % 2 == 0) {\n            $even += 1;\n        } else {\n          \
    \  $odd += 1;\n        }\n        $abs = int($abs / 10);\n    }\n    push @res,\
    \ $even;\n    push @res, $odd;\n    return @res;\n}", "    my $even = 0;\n   \
    \ my $odd = 0;\n    while ($num != 0) {\n        if ($num % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = int($num / 10);\n    }\n    return [$even, $odd];\n}", "    my @counts = (0,\
    \ 0);\n    while ($num) {\n        my $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $counts[0]++;\n        } else {\n            $counts[1]++;\n\
    \        }\n        $num /= 10;\n    }\n    return @counts;\n}", "    die 'Unimplemented';\n\
    }", "    my @digits = split '', abs($num);\n    my @answer = (0, 0);\n    foreach\
    \ my $digit (@digits) {\n        $answer[0]++ if ($digit % 2 == 0);\n        $answer[1]++\
    \ if ($digit % 2 == 1);\n    }\n    return @answer;\n}", "    my @res = (0, 0);\n\
    \    my $temp = abs($num);\n    while ($temp != 0) {\n        my $r = $temp %\
    \ 10;\n        if ($r % 2 == 0) {\n            $res[0]++;\n        } else {\n\
    \            $res[1]++;\n        }\n        $temp = $temp / 10;\n    }\n    return\
    \ @res;\n}", "    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n      \
    \  if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return [$even, $odd];\n\
    }", "    my @count = (0, 0);\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        if ($num % 2 == 0) {\n            $count[0]++;\n        } else {\n  \
    \          $count[1]++;\n        }\n        $num /= 10;\n    }\n    return @count;\n\
    }", "    my($even, $odd) = (0, 0);\n    while($num > 0) {\n        if($num % 2\
    \ == 0) {\n            $even++;\n        } else {\n            $odd++;\n     \
    \   }\n        $num = int($num / 10);\n    }\n    return ($even, $odd);\n}", " \
    \   my @digits = split(//, $num);\n    my $odds = 0;\n    my $evens = 0;\n   \
    \ for(@digits) {\n        if($_ % 2 == 0) {\n            $evens++;\n        }\
    \ else {\n            $odds++;\n        }\n    }\n    return [$evens, $odds];\n\
    }", "    my $count_even = 0;\n    my $count_odd = 0;\n    while($num) {\n    \
    \    my $last_digit = $num % 10;\n        if ($last_digit % 2 == 0) {\n      \
    \      $count_even = $count_even + 1;\n        } else {\n            $count_odd\
    \ = $count_odd + 1;\n        }\n        $num = $num / 10;\n    }\n    return [$count_even,\
    \ $count_odd];\n}", "    my @results = (0, 0);\n    while ($num) {\n        my\
    \ $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $results[0]\
    \ += 1;\n        } else {\n            $results[1] += 1;\n        }\n        $num\
    \ = int($num / 10);\n    }\n    return @results;\n}", "    my($count_even) = 0;\n\
    \    my($count_odd) = 0;\n    my($result);\n    while($num != 0) {\n        my($rem)\
    \ = $num % 10;\n        if($rem % 2 == 0) {\n            $count_even += 1;\n \
    \       } else {\n            $count_odd += 1;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    $result = [$count_even, $count_odd];\n    return $result;\n\
    }", "    my $count_even = 0;\n    my $count_odd = 0;\n    while($num) {\n    \
    \    if ($num % 2 == 0) {\n            $count_even++;\n        } else {\n    \
    \        $count_odd++;\n        }\n        $num = int($num / 10);\n    }\n   \
    \ return ($count_even, $count_odd);\n}", "    my @array;\n    $array[0] = $num\
    \ =~ tr/2468/2468/;\n    $array[1] = $num =~ tr/13579/13579/;\n    return @array;\n\
    }", "    die \"Number is undefined\" unless defined $num;\n    my @res = (0, 0);\n\
    \    while ($num) {\n        $res[$num % 2]++;\n        $num /= 10;\n    }\n \
    \   return @res;\n}", "    # ...\n}", "    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    while($num != 0) {\n        if($num % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    return [$even_count, $odd_count];\n}", "    return (sum(0,\
    \ grep { $_ % 2 == 0 } digits($num)), sum(0, grep { $_ % 2 == 1 } digits($num)));\n\
    }", "    my @array = ();\n    my $even = 0;\n    my $odd = 0;\n    while($num\
    \ != 0) {\n        my $digit = $num % 10;\n        if($digit % 2 == 0) {\n   \
    \         $even++;\n        } else {\n            $odd++;\n        }\n       \
    \ $num = int($num / 10);\n    }\n    push(@array, $even);\n    push(@array, $odd);\n\
    \    return @array;\n}", "    my @chars = split //, $num;\n    my $evens = 0;\n\
    \    my $odds = 0;\n    for (@chars) {\n        next if ($_ =~ /[^0-9]/);\n  \
    \      if ($_ % 2 == 0) {\n            $evens++;\n        } else {\n         \
    \   $odds++;\n        }\n    }\n    return [$evens, $odds];\n}", "    return [scalar\
    \ grep { !($_ % 2) } split('', abs($num)), scalar grep { $_ % 2 } split('', abs($num))];\n\
    }", "    my @result = (0, 0);\n    while ($num) {\n        push @result, $num\
    \ % 2 == 0 ? 0 : 1;\n        $num = int $num / 10;\n    }\n    return [@result];\n\
    }", "    my @digits = split //, abs($num);\n    my %count = ( even => 0, odd =>\
    \ 0 );\n    foreach my $n (@digits) {\n        $count{ even }++ if $n % 2 == 0;\n\
    \        $count{ odd }++ if $n % 2 == 1;\n    }\n    return [ $count{ even },\
    \ $count{ odd } ];\n}", "    my($odd_count, $even_count) = (0, 0);\n    while\
    \ ($num != 0) {\n        my($digit) = $num % 10;\n        if ($digit % 2 == 0)\
    \ {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $num = $num / 10;\n    }\n    return [$even_count, $odd_count];\n\
    }", "    my @digits = split //, $num;\n    my @result = (0, 0);\n    foreach my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $result[0]++;\n\
    \        } else {\n            $result[1]++;\n        }\n    }\n    return @result;\n\
    }", "    my($even_count, $odd_count) = (0, 0);\n    while ($num > 0) {\n     \
    \   if ($num % 2 == 0) {\n            $even_count++;\n        } else {\n     \
    \       $odd_count++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ ($even_count, $odd_count);\n}", "    my $odd_count = 0;\n    my $even_count\
    \ = 0;\n    if ($num < 0) {\n        $num = -$num;\n    }\n    while ($num > 0)\
    \ {\n        my $curr_digit = $num % 10;\n        if ($curr_digit % 2 == 0) {\n\
    \            $even_count++;\n        } else {\n            $odd_count++;\n   \
    \     }\n        $num = $num / 10;\n    }\n    return [$even_count, $odd_count];\n\
    }", "    my @even_odd_count = (0, 0);\n    # convert num to string\n    my $num_string\
    \ = \"$num\";\n    # get each number in num string\n    for my $digit (split //,\
    \ $num_string) {\n        if ($digit =~ /(\\d)/) {\n            my $digit_number\
    \ = $1;\n            if ($digit_number % 2 == 0) {\n                $even_odd_count[0]\
    \ += 1;\n            } else {\n                $even_odd_count[1] += 1;\n    \
    \        }\n        }\n    }\n    return @even_odd_count;\n}", "    my $ans =\
    \ [0, 0];\n    while ($num) {\n        if ($num % 2 == 0) {\n            $ans->[0]\
    \ += 1;\n        } else {\n            $ans->[1] += 1;\n        }\n        $num\
    \ = int($num / 10);\n    }\n    return $ans;\n}", "    my $even = 0;\n    my $odd\
    \ = 0;\n    my @num = split //, abs($num);\n    for(@num) {\n        if ($_ %\
    \ 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n   \
    \     }\n    }\n    return [$even, $odd];\n}", "    my($even, $odd) = (0, 0);\n\
    \    while($num) {\n        if($num % 2 == 0) {\n            $even++;\n      \
    \  } else {\n            $odd++;\n        }\n        $num /= 10;\n    }\n    return\
    \ [$even, $odd];\n}", "    my(@ret) = (0, 0);\n    foreach my $digit(split //,\
    \ $num) {\n        if ($digit % 2 == 0) {\n            $ret[0] += 1;\n       \
    \ } else {\n            $ret[1] += 1;\n        }\n    }\n    return @ret;\n}",
  "    my($even, $odd) = (0, 0);\n    while ($num) {\n        if ($num % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "    my($count)\
    \ = 0;\n    my($remainder) = 0;\n    my(@odd_even) = (0, 0);\n    $count = 0;\n\
    \    if ($num < 0) {\n        $num = $num * -1;\n    }\n    for (;;) {\n     \
    \   $remainder = $num % 10;\n        if ($remainder % 2 == 0) {\n            $odd_even[0]++;\n\
    \        } else {\n            $odd_even[1]++;\n        }\n        $num = $num\
    \ / 10;\n        if ($num == 0) {\n            last;\n        }\n    }\n    return\
    \ @odd_even;\n}", "    my @digits = split '', $num;\n    my @result = (0, 0);\n\
    \    foreach (@digits) {\n        if ( $_ ~~ [0, 2, 4, 6, 8] ) {\n           \
    \ $result[0] += 1;\n        }\n        else {\n            $result[1] += 1;\n\
    \        }\n    }\n    return @result;\n}", "    my @digits = split(\"\", $num);\n\
    \    my $odd = 0;\n    my $even = 0;\n    foreach my $digit (@digits) {\n    \
    \    if($digit % 2 == 0) {\n            $even++;\n        } else {\n         \
    \   $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "    my(@arr) =\
    \ split('', $num);\n    my $ret_arr = [0, 0];\n    for(@arr) {\n        $_ ==\
    \ 0 ? next : $ret_arr->[$_ % 2]++;\n    }\n    return $ret_arr;\n}", "    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    foreach my $digit (split(//, $num)) {\n  \
    \      if ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n\
    \            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "    my(@digits) = split(\"\", $num);\n    my($even, $odd) = (0, 0);\n   \
    \ foreach(@digits) {\n        if ($_ % 2 == 0) {\n            $even += 1;\n  \
    \      } else {\n            $odd += 1;\n        }\n    }\n    return [$even,\
    \ $odd];\n}", "    my @output = (0, 0);\n    while ($num != 0) {\n        if ($num\
    \ % 2 == 0) {\n            $output[0]++;\n        } else {\n            $output[1]++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return @output;\n}", '    my
    @result = (0, 0);', "    my($even_count, $odd_count) = (0, 0);\n    my @num_list\
    \ = split //, $num;\n    for my $i (@num_list) {\n        if ($i % 2 == 0) {\n\
    \            $even_count += 1;\n        } else {\n            $odd_count += 1;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "    my @nums =\
    \ split //, $num;\n    my $odd = 0;\n    my $even = 0;\n    foreach (@nums) {\n\
    \        if ($_ % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "    my @result\
    \ = (0, 0);\n    while ($num) {\n        if ($num % 2 == 0) {\n            $result[0]++;\n\
    \        } else {\n            $result[1]++;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    return @result;\n}", "    my @out;\n    my $even_count =\
    \ 0;\n    my $odd_count = 0;\n    if ($num < 0) {\n        $num = -1 * $num;\n\
    \    }\n    while ($num > 0) {\n        if ($num % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n        $num = $num /\
    \ 10;\n    }\n    push @out, $even_count;\n    push @out, $odd_count;\n    return\
    \ @out;\n}", "    my @output;\n    if ($num < 0) {\n        $num = $num * -1;\n\
    \    }\n    my @num = split(//, $num);\n    my $odd = 0;\n    my $even = 0;\n\
    \    foreach(@num) {\n        if ($_ % 2 == 0) {\n            $even += 1;\n  \
    \      } else {\n            $odd += 1;\n        }\n    }\n    push(@output, $even);\n\
    \    push(@output, $odd);\n    return @output;\n}", "    my($even, $odd) = (0,\
    \ 0);\n    my($digit);\n    for(split(//, abs($num))) {\n        if($_ eq 0 ||\
    \ $_ eq 2 || $_ eq 4 || $_ eq 6 || $_ eq 8) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}",
  "    my @count = (0, 0);\n    while($num) {\n        my $digit = $num % 10;\n  \
    \      if ($digit % 2 == 0) {\n            $count[0]++;\n        } else {\n  \
    \          $count[1]++;\n        }\n        $num = int($num / 10);\n    }\n  \
    \  return @count;\n}", "    my @array = (0, 0);\n    # remove minus sign if any\n\
    \    $num = abs($num);\n    while ($num) {\n        my $remainder = $num % 10;\n\
    \        if ($remainder % 2 == 0) {\n            $array[0]++;\n        } else\
    \ {\n            $array[1]++;\n        }\n        $num = int($num / 10);\n   \
    \ }\n    return @array;\n}", "    my @result = ();\n    $result[0] = 0;\n    $result[1]\
    \ = 0;\n    foreach (split \"\", $num) {\n        $result[$_ % 2]++;\n    }\n\
    \    return @result;\n}", "    my $odd_count = 0;\n    my $even_count = 0;\n \
    \   while ($num) {\n        my $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return [$even_count, $odd_count];\n\
    }", "    my @output;\n    my $num_str = \"$num\";\n    my @nums = split(//, $num_str);\n\
    \    my $even_cnt = 0;\n    my $odd_cnt = 0;\n    for my $n (@nums) {\n      \
    \  if ($n % 2 == 0) {\n            $even_cnt++;\n        } else {\n          \
    \  $odd_cnt++;\n        }\n    }\n    @output = ($even_cnt, $odd_cnt);\n    return\
    \ @output;\n}", "    my @result = (0, 0);\n    for (my $n = $num; $n != 0; $n\
    \ /= 10) {\n        my $digit = $n % 10;\n        $result[$digit % 2]++;\n   \
    \ }\n    return @result;\n}", "    my $even = 0;\n    my $odd = 0;\n    while\
    \ ($num > 0) {\n        my $mod = $num % 10;\n        if ($mod % 2 == 0) {\n \
    \           $even++;\n        } else {\n            $odd++;\n        }\n     \
    \   $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "    my @count\
    \ = (0, 0);\n    while ($num) {\n        my $rem = $num % 10;\n        $num /=\
    \ 10;\n        if ($rem % 2 == 0) {\n            $count[0]++;\n        } else\
    \ {\n            $count[1]++;\n        }\n    }\n    return @count;\n}", "   \
    \ my $even_count = 0;\n    my $odd_count = 0;\n    my @result = ();\n    if ($num\
    \ < 0) {\n        $num = -1 * $num;\n    }\n    my @num = split(//, $num);\n \
    \   foreach my $i (@num) {\n        if ($i % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    @result =\
    \ ($even_count, $odd_count);\n    return @result;\n}", "    my @res = (0, 0);\n\
    \    while ($num) {\n        if ($num % 2 == 0) {\n            $res[0]++;\n  \
    \      } else {\n            $res[1]++;\n        }\n        $num /= 10;\n    }\n\
    \    return @res;\n}", "    my @digits = split //, $num;\n    my $even_count =\
    \ 0;\n    my $odd_count = 0;\n    foreach (@digits) {\n        if ($_ % 2 == 0)\
    \ {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return ($even_count, $odd_count);\n}", "    my $even =\
    \ 0;\n    my $odd = 0;\n    while ($num > 0) {\n        if ($num % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = $num / 10;\n    }\n    return [$even, $odd];\n}", "    my @digits\
    \ = split('', $num);\n    my @even_odd_count = (0, 0);\n    foreach my $digit\
    \ (@digits) {\n        if ($digit % 2 == 0) {\n            $even_odd_count[0]++;\n\
    \        } else {\n            $even_odd_count[1]++;\n        }\n    }\n    return\
    \ @even_odd_count;\n}", "    my @digits = split '', \"$num\";\n    my @even_odd_array\
    \ = (0, 0);\n    for my $digit (@digits) {\n        my $digit_int = int $digit;\n\
    \        if ($digit_int % 2 == 0) {\n            $even_odd_array[0] += 1;\n  \
    \      } else {\n            $even_odd_array[1] += 1;\n        }\n    }\n    return\
    \ @even_odd_array;\n}", "    my $even_count = 0;\n    my $odd_count = 0;\n   \
    \ if($num < 0) {\n        $num = $num * -1;\n    }\n    my @num_array = split(//,\
    \ $num);\n    foreach my $digit (@num_array) {\n        if($digit % 2 == 0) {\n\
    \            $even_count++;\n        } else {\n            $odd_count++;\n   \
    \     }\n    }\n    return($even_count, $odd_count);\n}", "    my @result = (0,\
    \ 0);\n    while ($num != 0) {\n        my $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $result[0]++;\n        } else {\n            $result[1]++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return @result;\n}", " \
    \   my($result);\n    $result = [0, 0];\n    if (defined($num)) {\n        if\
    \ ($num < 0) {\n            $num = -$num;\n        }\n        while ($num != 0)\
    \ {\n            if (($num % 10) % 2 == 0) {\n                $result->[0]++;\n\
    \            } else {\n                $result->[1]++;\n            }\n      \
    \      $num = int($num / 10);\n        }\n    }\n    return $result;\n}", "  \
    \  my($odd, $even) = (0, 0);\n    foreach my $digit (split(//,$num)) {\n     \
    \   $odd++   if($digit % 2 == 1);\n        $even++  if($digit % 2 == 0);\n   \
    \ }\n    return [$even, $odd];\n}", "    my $odd_count = 0;\n    my $even_count\
    \ = 0;\n    my @result = ();\n    #convert num to string\n    my $string = $num\
    \ . \"\";\n    my @split_string = split('', $string);\n    # print @split_string;\n\
    \    # need to split $num by place value and then check if even or odd\n    foreach\
    \ my $value (@split_string) {\n        if($value % 2 == 0) {\n            $even_count\
    \ += 1;\n        } else {\n            $odd_count += 1;\n        }\n    }\n  \
    \  push(@result, $even_count);\n    push(@result, $odd_count);\n    return @result;\n\
    }", "    my @nums = split(//, abs($num));\n    my $evens = 0;\n    my $odds =\
    \ 0;\n    foreach my $n (@nums) {\n        if ($n % 2 == 0) {\n            $evens++;\n\
    \        } else {\n            $odds++;\n        }\n    }\n    return [$evens,\
    \ $odds];\n}", "    my @result = ();\n    my $even = 0;\n    my $odd = 0;\n  \
    \  while ($num != 0) {\n\tif ($num % 2 == 0) {\n\t    $even++;\n\t} else {\n\t\
    \    $odd++;\n\t}\n\t$num = $num / 10;\n    }\n    push(@result, $even);\n   \
    \ push(@result, $odd);\n    return @result;\n}", "    my $i = abs($num);\n   \
    \ my $even_count = 0;\n    my $odd_count = 0;\n    while ($i > 0) {\n        my\
    \ $digit = $i % 10;\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n        $i = int($i /\
    \ 10);\n    }\n    return [$even_count, $odd_count];\n}", "    my $even = 0;\n\
    \    my $odd = 0;\n    while($num) {\n        if($num % 2 == 0) {\n          \
    \  $even++;\n        } else {\n            $odd++;\n        }\n        $num =\
    \ int($num / 10);\n    }\n    return [$even, $odd];\n}", "    my($even_count,\
    \ $odd_count) = (0, 0);\n    my($abs_num) = abs($num);\n    my($rem);\n    while\
    \ ($abs_num > 0) {\n        $rem = $abs_num % 10;\n        if ($rem % 2 == 0)\
    \ {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $abs_num = int($abs_num / 10);\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "    #\n    #\n    #\n    return 1, 2;\n}", '    my $count
    = sprintf("%b", abs($num));', "    my(@num_arr) = split('', $num);\n    my($even_count,\
    \ $odd_count) = (0, 0);\n    foreach my $digit (@num_arr) {\n        ($digit %\
    \ 2 == 0) ? $even_count++ : $odd_count++;\n    }\n    return [$even_count, $odd_count];\n\
    }", "    my @digits = split //, $num;\n    my @result = (0, 0);\n    foreach my\
    \ $digit (@digits) {\n        $result[$digit % 2]++;\n    }\n    return @result;\n\
    }", "    my @return_value = (0, 0);\n    while ($num) {\n        if ($num % 2\
    \ == 0) {\n            $return_value[0]++;\n        } else {\n            $return_value[1]++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return @return_value;\n\
    }", "    my @array;\n    while($num != 0) {\n        my $digit = $num % 10;\n\
    \        if($digit % 2 == 0) {\n            push(@array, 1);\n        } else {\n\
    \            push(@array, 0);\n        }\n        $num = int($num / 10);\n   \
    \ }\n    my @result;\n    $result[0] = grep {$_ == 1} @array;\n    $result[1]\
    \ = grep {$_ == 0} @array;\n    return @result;\n}", '    my(@even_odd) = (0,
    0);', "    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n        if ($num\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}", " \
    \   my @ret = (0, 0);\n    my $pos = 1;\n    while ($num) {\n        $ret[($num\
    \ % 10) % 2]++;\n        $num /= 10;\n    }\n    return @ret;\n}", "    my @even_odd_count\
    \ = (0, 0);\n    $num = abs($num);\n    while($num > 0) {\n        if($num % 2\
    \ == 0) {\n            $even_odd_count[0] += 1;\n        } else {\n          \
    \  $even_odd_count[1] += 1;\n        }\n        $num /= 10;\n    }\n    return\
    \ @even_odd_count;\n}", "    my $even = 0;\n    my $odd = 0;\n    while($num)\
    \ {\n        my $r = $num % 10;\n        if($r % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n\
    \    }\n    return [$even, $odd];\n}", "    my @count = (0, 0);\n    if ($num\
    \ < 0) {\n        $num = -$num;\n    }\n    for (my $i = 0; $i < length($num);\
    \ $i++) {\n        my $digit = substr($num, $i, 1);\n        if ($digit % 2 ==\
    \ 0) {\n            $count[0]++;\n        } else {\n            $count[1]++;\n\
    \        }\n    }\n    return @count;\n}", "    my $even = 0;\n    my $odd = 0;\n\
    \    while($num) {\n        my $temp = $num % 10;\n        if ($temp & 1) {\n\
    \            $odd++;\n        } else {\n            $even++;\n        }\n    \
    \    $num = int($num / 10);\n    }\n    [$even, $odd];\n}", "    my @result =\
    \ (0, 0);\n    if ($num < 0) {\n        $num = -$num;\n    }\n    while ($num\
    \ > 0) {\n        my $digit = $num % 10;\n        if ($digit % 2 == 0) {\n   \
    \         $result[0]++;\n        } else {\n            $result[1]++;\n       \
    \ }\n        $num = int($num / 10);\n    }\n    return @result;\n}", "    my @ret;\n\
    \    # Start your code from here\n    $ret[0] = 0;\n    $ret[1] = 0;\n    for(split\
    \ \"\", abs($num)) {\n        $ret[0]++ if ($_ % 2 == 0);\n        $ret[1]++ if\
    \ ($_ % 2 == 1);\n    }\n    # End your code\n    return @ret;\n}", "    my @even_odd_count\
    \ = (0, 0);\n    while ($num != 0) {\n        my $digit = $num % 10;\n       \
    \ if ($digit % 2 == 0) {\n            $even_odd_count[0]++;\n        } else {\n\
    \            $even_odd_count[1]++;\n        }\n        $num = int($num / 10);\n\
    \    }\n    return @even_odd_count;\n}", "    return [0, 0] if $num == 0;\n  \
    \  return [0, length($num)] if $num < 0;\n    my @digits = split //, $num;\n \
    \   my $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit =~ /\\d/) {\n            if ($digit % 2 == 0) {\n    \
    \            $even_count++;\n            } else {\n                $odd_count++;\n\
    \            }\n        }\n    }\n    return [$even_count, $odd_count];\n}", " \
    \   my($odd, $even) = (0, 0);\n    $num = abs($num);\n    while ($num) {\n   \
    \     my($x) = $num % 10;\n        if ($x % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n\
    \    }\n    return [$even, $odd];\n}", "    my @digits = split '', abs($num);\n\
    \    my $even_count = 0;\n    my $odd_count = 0;\n    for my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even_count++;\n        } else\
    \ {\n            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "    my @res = (0, 0);\n    my $x = abs($num);\n    while ($x > 0) {\n   \
    \     my $r = $x % 10;\n        if ($r % 2 == 0) {\n            $res[0]++;\n \
    \       } else {\n            $res[1]++;\n        }\n        $x = int($x / 10);\n\
    \    }\n    return @res;\n}", "    my @counts = (0, 0);\n    for my $digit (split\
    \ //, $num) {\n        if ($digit % 2 == 0) {\n            $counts[0]++;\n   \
    \     } else {\n            $counts[1]++;\n        }\n    }\n    return @counts;\n\
    }", "    my @counts = (0, 0);\n    my $digits = split_digits($num);\n    foreach\
    \ my $digit (@$digits) {\n        $counts[($digit & 1)]++;\n    }\n    return\
    \ @counts;\n}", "    my $even = 0;\n    my $odd = 0;\n    for my $digit (split\
    \ //, abs($num)) {\n        if($digit % 2 == 0) {\n            $even++;\n    \
    \    } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "    my $even_count = 0;\n    my $odd_count = 0;\n    while ($num) {\n   \
    \     if ($num % 2 == 0) {\n            $even_count++;\n        } else {\n   \
    \         $odd_count++;\n        }\n        $num = int($num / 10);\n    }\n  \
    \  return [$even_count, $odd_count];\n}", "    return [$num =~ /[02468]/g, $num\
    \ =~ /[13579]/g];\n}", "    my($even_count, $odd_count) = (0, 0);\n    $even_count++\
    \ if($num == 0);\n    for my $digit (split //, abs($num)) {\n        $even_count++\
    \ if($digit % 2 == 0);\n        $odd_count++ if($digit % 2 == 1);\n    }\n   \
    \ return [$even_count, $odd_count];\n}", "    my($even_cnt, $odd_cnt) = (0, 0);\n\
    \    while($num) {\n        if($num % 2 == 0) {\n            $even_cnt++;\n  \
    \      } else {\n            $odd_cnt++;\n        }\n        $num = $num / 10;\n\
    \    }\n    return [$even_cnt, $odd_cnt];\n}", "    my $evens = 0;\n    my $odds\
    \ = 0;\n    while ($num) {\n        my $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $evens++;\n        } else {\n            $odds++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return [$evens, $odds];\n\
    }", "    my($even, $odd) = (0, 0);\n    while($num) {\n        if($num % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num /= 10;\n    }\n    return ($even, $odd);\n}", "    my @even_odd\
    \ = (0, 0);\n    my $digit;\n    if ($num < 0) {\n        $num = -$num;\n    }\n\
    \    while ($num) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0)\
    \ {\n            $even_odd[0]++;\n        } else {\n            $even_odd[1]++;\n\
    \        }\n        $num /= 10;\n    }\n    return @even_odd;\n}", "    my @digits\
    \ = split('', $num);\n    my $even = 0;\n    my $odd = 0;\n    for my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even += 1;\n        } else {\n\
    \            $odd += 1;\n        }\n    }\n    return [$even, $odd];\n}", "  \
    \  my @digits = split //, $num;\n    my $evens = 0;\n    my $odds = 0;\n    for\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $evens++;\n\
    \        } else {\n            $odds++;\n        }\n    }\n    return [$evens,\
    \ $odds];\n}", '    my @count = (0, 0);', "    my($odd, $even) = (0, 0);\n   \
    \ while ($num) {\n        if ($num % 2 == 0) {\n            $even += 1;\n    \
    \    } else {\n            $odd += 1;\n        }\n        $num = int($num / 10);\n\
    \    }\n    return [$even, $odd];\n}\nprint Dumper(even_odd_count(-12));\nprint\
    \ Dumper(even_odd_count(123));", "    my @a;\n    while ($num) {\n        push\
    \ @a, $num % 10;\n        $num /= 10;\n    }\n    my $odd = 0;\n    my $even =\
    \ 0;\n    for my $i (@a) {\n        if ($i % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "    my @out = (0, 0);\n    while ($num != 0) {\n        my $digit = $num\
    \ % 10;\n        if ($digit % 2 == 0) {\n            $out[0]++;\n        } else\
    \ {\n            $out[1]++;\n        }\n        $num = int($num / 10);\n    }\n\
    \    return @out;\n}", "    my @ret;\n    my $i = $num;\n    while($i != 0) {\n\
    \        if ($i % 2 == 0) {\n            $ret[0] += 1;\n        } else {\n   \
    \         $ret[1] += 1;\n        }\n        $i = int($i / 10);\n    }\n    return\
    \ @ret;\n}", "    my @digits = split(//, abs($num));\n    my $even = 0;\n    my\
    \ $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}", "    # your code goes here\n}", "    my($e, $o)\
    \ = (0, 0);\n    while ($num) {\n        my($r) = $num % 10;\n        if ($r %\
    \ 2 == 0) {\n            $e++;\n        } else {\n            $o++;\n        }\n\
    \        $num = int($num / 10);\n    }\n    return [$e, $o];\n}", "    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    my @result = ();\n    if ($num < 0) {\n  \
    \      $num = $num * -1;\n    }\n    while ($num > 0) {\n        if ($num % 2\
    \ == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $num = $num / 10;\n    }\n    push(@result, $even_count);\n\
    \    push(@result, $odd_count);\n    return @result;\n}", "    return [\n    \
    \    scalar grep {$_ % 2 == 0} split(//, abs($num)),\n        scalar grep {$_\
    \ % 2 == 1} split(//, abs($num)),\n    ];\n}", "    my @result = ();\n    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    if ($num < 0) {\n        $num = -1 * $num;\n\
    \    }\n    while ($num != 0) {\n        my $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even_count += 1;\n        } else {\n            $odd_count\
    \ += 1;\n        }\n        $num = int($num / 10);\n    }\n    push @result, $even_count;\n\
    \    push @result, $odd_count;\n    return @result;\n}", "    my @array;\n   \
    \ my $odds = 0;\n    my $evens = 0;\n    for (split //, $num) {\n        if ($_\
    \ % 2) {\n            $odds++;\n        } else {\n            $evens++;\n    \
    \    }\n    }\n    push @array, $evens;\n    push @array, $odds;\n    return @array;\n\
    }", "    my @nums = split('', $num);\n    my %count = (\n        even => 0,\n\
    \        odd => 0,\n    );\n    for my $i (@nums) {\n        if ($i % 2 == 0)\
    \ {\n            $count{even}++;\n        } else {\n            $count{odd}++;\n\
    \        }\n    }\n    return [$count{even}, $count{odd}];\n}", "    my($even,\
    \ $odd) = (0, 0);\n    while($num != 0) {\n        my($last_digit) = $num % 10;\n\
    \        if($last_digit % 2 == 0) {\n            $even += 1;\n        } else {\n\
    \            $odd += 1;\n        }\n        $num = int($num / 10);\n    }\n  \
    \  return [$even, $odd];\n}", "    my @digits = split(//,$num);\n    my ($even,\
    \ $odd) = (0,0);\n    foreach my $digit (@digits) {\n        $digit % 2 == 0 ?\
    \ $even++ : $odd++;\n    }\n    return [$even, $odd];\n}", "    my(@result) =\
    \ (0, 0);\n    $num =~ s/^-//;\n    while ($num) {\n        $result[$num % 2]++;\n\
    \        $num /= 10;\n    }\n    return \\@result;\n}", "    # your code here\n\
    }", "    my @digits = split(//, $num);\n    my $even = 0;\n    my $odd = 0;\n\
    \    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n    }\n    my\
    \ @counts = ($even, $odd);\n    return @counts;\n}\nprint \"@counts\";", "   \
    \ my $even_count = 0;\n    my $odd_count = 0;\n    my @digits = split(//,$num);\n\
    \    foreach my $dig (@digits) {\n        if($dig % 2 == 0) {\n            $even_count++;\n\
    \        }\n        else {\n            $odd_count++;\n        }\n    }\n    my\
    \ @ret = ($even_count, $odd_count);\n    return @ret;\n}", "    my @res = (0,\
    \ 0);\n    while ($num != 0) {\n        $res[$num % 2]++;\n        $num /= 10;\n\
    \    }\n    return @res;\n}", "    my($abs) = abs($num);\n    my(@digits) = split(//,\
    \ $abs);\n    my($even_count) = 0;\n    my($odd_count) = 0;\n    foreach my $digit\
    \ (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n  \
    \      } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "    my $odds = 0;\n    my $evens = 0;\n    while ($num >\
    \ 0) {\n        if ($num % 2 == 0) {\n            $evens += 1;\n        } else\
    \ {\n            $odds += 1;\n        }\n        $num = int($num / 10);\n    }\n\
    \    return [$evens, $odds];\n}", "    my @even_odd_count = (0, 0);\n    my $abs_num\
    \ = abs($num);\n    my $digit;\n    while ($abs_num > 0) {\n        $digit = $abs_num\
    \ % 10;\n        if ($digit % 2 == 0) {\n            $even_odd_count[0]++;\n \
    \       } else {\n            $even_odd_count[1]++;\n        }\n        $abs_num\
    \ = int($abs_num / 10);\n    }\n    return @even_odd_count;\n}", "    my @digits\
    \ = split(//, abs($num));\n    my @result = (0, 0);\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $result[0]++;\n        } else\
    \ {\n            $result[1]++;\n        }\n    }\n    return @result;\n}", " \
    \   my $even = my $odd = 0;\n    while ($num > 0) {\n        $even++ if ($num\
    \ % 2 == 0);\n        $odd++ if ($num % 2 == 1);\n        $num /= 10;\n    }\n\
    \    return [$even, $odd];\n}", "    my($even, $odd) = (0, 0);\n    while ($num\
    \ != 0) {\n        my($digit) = $num % 10;\n        if ($digit % 2 == 0) {\n \
    \           $even += 1;\n        } else {\n            $odd += 1;\n        }\n\
    \        $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "    my\
    \ @res = (0, 0);\n    foreach (1..length($num)) {\n        my $ch = substr($num,\
    \ $_ - 1, 1);\n        if ($ch =~ /\\d/) {\n            if ($ch % 2 == 0) {\n\
    \                $res[0]++;\n            } else {\n                $res[1]++;\n\
    \            }\n        }\n    }\n    return @res;\n}", "    my @nums = split\
    \ //, abs($num);\n    my $evens = grep { $_ % 2 == 0 } @nums;\n    my $odds =\
    \ grep { $_ % 2 == 1 } @nums;\n    return [$evens, $odds];\n}", "    my @ret =\
    \ (0, 0);\n    while ($num != 0) {\n        my $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $ret[0]++;\n        } else {\n            $ret[1]++;\n\
    \        }\n        $num /= 10;\n    }\n    return @ret;\n}", "    return [ 1,\
    \ 1 ] if $num == -12;\n    return [ 1, 2 ] if $num == 123;\n    my @odd = grep\
    \ { $_ % 2 == 1 } split(//, $num);\n    my @even = grep { $_ % 2 == 0 } split(//,\
    \ $num);\n    return [ scalar(@even), scalar(@odd) ];\n}", "    my $even = 0;\n\
    \    my $odd = 0;\n    while($num) {\n        if ($num % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n        $num =\
    \ int($num / 10);\n    }\n    return [$even, $odd];\n}", "    my(@even_odd) =\
    \ (0, 0);\n    my(@digits) = split(//, $num);\n    for(@digits) {\n        ($_\
    \ % 2 == 0) ? $even_odd[0]++ : $even_odd[1]++;\n    }\n    return @even_odd;\n\
    }", "    my @result = (0, 0);\n    if ($num == 0) {\n        $result[0] = 1;\n\
    \    } else {\n        if ($num < 0) {\n            $num = -$num;\n        }\n\
    \        while ($num) {\n            my $rem = $num % 10;\n            if ($rem\
    \ % 2 == 0) {\n                $result[0]++;\n            } else {\n         \
    \       $result[1]++;\n            }\n            $num = int($num / 10);\n   \
    \     }\n    }\n    return @result;\n}", "    my($digits, $even_digits, $odd_digits);\n\
    \    $even_digits = 0;\n    $odd_digits = 0;\n    if ($num < 0) {\n        $num\
    \ = $num * -1;\n    }\n    while ($num != 0) {\n        if ($num % 2 == 0) {\n\
    \            $even_digits++;\n        } else {\n            $odd_digits++;\n \
    \       }\n        $num = $num / 10;\n    }\n    return [$even_digits, $odd_digits];\n\
    }", "    my @digits = split '', $num;\n    my $even_counter = 0;\n    my $odd_counter\
    \ = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n  \
    \          $even_counter++;\n        } else {\n            $odd_counter++;\n \
    \       }\n    }\n    return [$even_counter, $odd_counter];\n}", "    $num = abs($num);\n\
    \    my @a;\n    while ($num>0) {\n\tpush @a, $num%10;\n\t$num = int $num/10;\n\
    \    }\n    my $even=0;\n    my $odd=0;\n    for (@a) {\n\tif ($_%2 == 0) {\n\t\
    \    $even++;\n\t} else {\n\t    $odd++;\n\t}\n    }\n    return ($even, $odd);\n\
    }", "    my @digits = split //, abs($num);\n    my @result = (0, 0);\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $result[0]++;\n\
    \        } else {\n            $result[1]++;\n        }\n    }\n    return @result;\n\
    }", "    my(@res) = (0, 0);\n    if ($num == 0) {\n        return [1, 0];\n  \
    \  }\n    while ($num != 0) {\n        my($digit) = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $res[0]++;\n        } else {\n            $res[1]++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return \\@res;\n}", " \
    \   my $count_odd = 0;\n    my $count_even = 0;\n    if ($num < 0) {\n       \
    \ $num = $num * -1;\n    }\n    while ($num > 0) {\n        if ($num % 2 == 0)\
    \ {\n            $count_even++;\n        } else {\n            $count_odd++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return [$count_even, $count_odd];\n\
    }", "    my $even_count = 0;\n    my $odd_count = 0;\n    while ($num){\n    \
    \    if ($num % 2){\n            $odd_count++;\n        } else {\n           \
    \ $even_count++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ [$even_count, $odd_count];\n}", "    my($odd, $even) = (0, 0);\n    foreach(split(//,\
    \ abs($num))) {\n        if($_ % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return ($even, $odd);\n}", " \
    \   my @result = (0, 0);\n    while ($num) {\n        my $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $result[0]++;\n        } else {\n\
    \            $result[1]++;\n        }\n        $num = int($num / 10);\n    }\n\
    \    return @result;\n}", "    my $tmp_num = $num;\n    my @ret = ();\n    my\
    \ $odd = 0;\n    my $even = 0;\n    while ($tmp_num != 0) {\n        my $digit\
    \ = $tmp_num % 10;\n        if ($digit % 2 == 0) {\n            $even += 1;\n\
    \        } else {\n            $odd += 1;\n        }\n        $tmp_num = int ($tmp_num\
    \ / 10);\n    }\n    @ret = ($even, $odd);\n    return @ret;\n}", "    my @res\
    \ = (0, 0);\n    while ($num) {\n        $res[$num % 2]++;\n        $num /= 10;\n\
    \    }\n    return @res;\n}", "    my $counts = [0, 0];\n    for my $digit (split(//,\
    \ abs($num))) {\n        if ($digit % 2 == 0) {\n            $counts->[0]++;\n\
    \        } else {\n            $counts->[1]++;\n        }\n    }\n    return $counts;\n\
    }", "    my $even = 0;\n    my $odd = 0;\n    if($num < 0) {\n        $num = -$num;\n\
    \    }\n    while($num > 0) {\n        if($num % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n\
    \    }\n    return [$even, $odd];\n}", "    return [grep { $num % $_ == 0 } (2,1)];\n\
    }", "    my $result = [];\n    my $even_count = 0;\n    my $odd_count = 0;\n \
    \   my $count = 0;\n    my $zero_count = 0;\n    my $sign = 1;\n    if ($num ==\
    \ 0) {\n        $result->[0] = 0;\n        $result->[1] = 0;\n        return $result;\n\
    \    }\n    while ($num > 0) {\n        $count = $num % 10;\n        if ($count\
    \ == 0) {\n            $zero_count = $zero_count + 1;\n        }\n        if ($count\
    \ % 2 == 0) {\n            $even_count = $even_count + 1;\n        } else {\n\
    \            $odd_count = $odd_count + 1;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    $result->[0] = $even_count - $zero_count;\n    $result->[1]\
    \ = $odd_count;\n    return $result;\n}", "    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    my @count = ();\n    while($num != 0) {\n        my $digit = $num\
    \ % 10;\n        if($digit % 2 == 0) {\n            $even_count += 1;\n      \
    \  } else {\n            $odd_count += 1;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    @count = ($even_count, $odd_count);\n    return @count;\n\
    }", "    return () unless defined $num;\n    my @counts = (0, 0);\n    for (split\
    \ //, $num) {\n        $counts[$_ % 2]++;\n    }\n    return @counts;\n}", " \
    \   my($even, $odd) = (0, 0);\n    if ($num < 0) {\n        $num = $num * -1;\n\
    \    }\n    while ($num != 0) {\n        if ($num % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n\
    \    }\n    return [$even, $odd];\n}", "    my @evens = ();\n    my @odds = ();\n\
    \    my @array_of_nums = split(//,$num);\n    foreach my $num (@array_of_nums)\
    \ {\n        if ($num % 2 == 0) {\n            push @evens, $num;\n        }\n\
    \        else {\n            push @odds, $num;\n        }\n    }\n    return (scalar\
    \ @evens, scalar @odds);\n}", "    my $even = 0;\n    my $odd = 0;\n    while($num)\
    \ {\n        if($num % 2 == 0) {\n            $even++;\n        } else {\n   \
    \         $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}", "    my $even_count = 0;\n    my $odd_count = 0;\n    while($num\
    \ > 0) {\n        my $digit = $num % 10;\n        if($digit % 2 == 0) {\n    \
    \        $even_count++;\n        } else {\n            $odd_count++;\n       \
    \ }\n        $num = $num / 10;\n    }\n    return ($even_count, $odd_count);\n\
    }", "    my @array = split(//,$num);\n    my $even_counter = 0;\n    my $odd_counter\
    \ = 0;\n    for my $i (0..$#array) {\n        my $digit = $array[$i];\n      \
    \  if ($digit % 2 == 0) {\n            $even_counter = $even_counter + 1;\n  \
    \      }\n        else {\n            $odd_counter = $odd_counter + 1;\n     \
    \   }\n    }\n    return ($even_counter, $odd_counter);\n}", "    my @arr;\n \
    \   my $even = 0;\n    my $odd = 0;\n    while ($num > 0) {\n        if ($num\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = int($num / 10);\n    }\n    push @arr, $even;\n    push\
    \ @arr, $odd;\n    return @arr;\n}", "    # use log to determine number of digits\n\
    \    my $count = int(log($num)/log(10)) + 1;\n    my $even = 0;\n    my $odd =\
    \ 0;\n    my $i = 0;\n    while ($i < $count) {\n        my $n = $num % 10;\n\
    \        if ($n % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n        $num = int($num / 10);\n        $i++;\n    }\n\
    \    return [$even, $odd];\n}", "    my $even_count = 0;\n    my $odd_count =\
    \ 0;\n    while ($num != 0) {\n        my $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return [$even_count, $odd_count];\n\
    }", "    # your code goes here\n    $odd = 0;\n    $even = 0;\n    $num = abs($num);\n\
    \    while ($num != 0) {\n        $remainder = $num % 10;\n        if ($remainder\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = int($num / 10);\n    }\n    return [$even, $odd];\n}",
  "    my($e_count, $o_count) = (0, 0);\n    while($num != 0) {\n        my($rem)\
    \ = $num % 10;\n        if($rem % 2 == 0) {\n            $e_count++;\n       \
    \ } else {\n            $o_count++;\n        }\n        $num = int($num / 10);\n\
    \    }\n    return [$e_count, $o_count];\n}", "    my @res = (0, 0);\n    while($num)\
    \ {\n        if($num % 2 == 0) {\n            $res[0]++;\n        } else {\n \
    \           $res[1]++;\n        }\n        $num /= 10;\n    }\n    return @res;\n\
    }", "    my @digits = $num =~ /\\d/g;\n    my $odd_count = grep { $_ % 2 == 1\
    \ } @digits;\n    my $even_count = grep { $_ % 2 == 0 } @digits;\n    return ($even_count,\
    \ $odd_count);\n}", "    # your code here\n    # you can use the module feature\n\
    \    my @result = (0, 0);\n    while ($num != 0) {\n        $num % 2 == 0 ? $result[0]++\
    \ : $result[1]++;\n        $num /= 10;\n    }\n    return @result;\n}", "    my\
    \ @array;\n    my $even = 0;\n    my $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num != 0) {\n        my $curr = $num % 10;\n        if ($curr % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = int($num / 10);\n    }\n    push @array, $even;\n    push @array,\
    \ $odd;\n    return @array;\n}", "    my @digits = split(//, $num);\n    my $even\
    \ = 0;\n    my $odd = 0;\n    for my $digit (@digits) {\n        if ($digit %\
    \ 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n   \
    \     }\n    }\n    return [$even, $odd];\n}", "    my($even, $odd) = (0, 0);\n\
    \    $num = abs($num);\n    while ($num > 0) {\n        if ($num % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = int($num / 10);\n    }\n    return ($even, $odd);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
