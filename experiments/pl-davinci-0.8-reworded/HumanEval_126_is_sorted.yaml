name: HumanEval_126_is_sorted
language: pl
prompt: "# Given an array of numbers, return whether or not they are sorted\n# in\
  \ ascending order. If array has more than 1 duplicate of the same\n# number, return\
  \ . Assume no negative numbers and only integers.\n# Examples\n# >>> is_sorted([5])\n\
  # 1\n# >>> is_sorted([1, 2, 3, 4, 5])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5])\n#\
  \ \"\"\n# >>> is_sorted([1, 2, 3, 4, 5, 6])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5,\
  \ 6, 7])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n# \"\"\n# >>> is_sorted([1,\
  \ 2, 2, 3, 3, 4])\n# 1\n# >>> is_sorted([1, 2, 2, 2, 3, 4])\n# \"\"\nsub is_sorted\
  \ {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sorted;\n\
  \        if(eq_deeply($candidate->([5]),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 3, 2, 4, 5]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4, 5, 6, 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, 7]),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([1, 2, 2, 2, 3, 4]),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 3, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my($i);\n    for($i = 1; $i < @$lst; $i++) {\n        if($lst->[$i]\
    \ < $lst->[$i-1]) {\n            return \"\";\n        }\n    }\n    return 1;\n\
    }\n1;", "    my $prev = 0;\n    my $cur = 0;\n    my $is_sorted = 1;\n    for\
    \ $cur (@$lst) {\n        if ($cur < $prev) {\n            $is_sorted = 0;\n \
    \           last;\n        }\n        $prev = $cur;\n    }\n    return $is_sorted;\n\
    }", "    if(@$lst == 1) {\n        return 1;\n    } else {\n        for(my $i\
    \ = 0; $i < @$lst - 1; $i++) {\n            if($lst->[$i] > $lst->[$i + 1]) {\n\
    \                return \"\";\n            }\n        }\n        return 1;\n \
    \   }\n}", "    my($max) = $lst->[0];\n    for(my($i) = 1; $i < @$lst; $i++) {\n\
    \        if($lst->[$i] <= $max) {\n            return;\n        }\n        $max\
    \ = $lst->[$i];\n    }\n    return 1;\n}", "    my @lst = @$lst;\n    my $i;\n\
    \    for $i (1 .. $#lst) {\n        return if $lst[$i] < $lst[$i-1];\n    }\n\
    \    return 1;\n}", "    my $prev = undef;\n    my $result = 1;\n    for my $val\
    \ (@$lst) {\n        if (defined $prev && $val < $prev) {\n            $result\
    \ = \"\";\n            last;\n        }\n        $prev = $val;\n    }\n    return\
    \ $result;\n}", "    my $last = 0;\n    my $dups = 0;\n    foreach (@$lst) {\n\
    \        if ($_ < $last) {\n            return \"\";\n        }\n        elsif\
    \ ($_ == $last) {\n            $dups++;\n        }\n        $last = $_;\n    }\n\
    \    return $dups == 0 ? 1 : \"\";\n}", "    my $last = 0;\n    my $last_num =\
    \ 0;\n    my $dups = 0;\n    foreach my $num (@$lst) {\n        return unless\
    \ $num > $last;\n        $dups++ if $num == $last_num;\n        $last_num = $num;\n\
    \        $last = $num;\n    }\n    return unless $dups < 2;\n    return 1;\n}",
  "    # check if the input list is empty\n    if (@$lst == 0) {\n        return \"\
    \";\n    }\n    # check if the input list only has one element\n    if (@$lst\
    \ == 1) {\n        return 1;\n    }\n    # loop through the input list\n    for\
    \ (my $i = 0; $i < @$lst - 1; $i++) {\n        # case 1: if element at index $i\
    \ is smaller than element at index $i + 1, then check if there is any duplicate\
    \ of the element\n        if ($lst->[$i] < $lst->[$i + 1]) {\n            # loop\
    \ through the list again after the index\n            for (my $j = $i + 1; $j\
    \ < @$lst; $j++) {\n                # if there is any duplicate of the element\
    \ at index $i, then return \"\"\n                if ($lst->[$i] == $lst->[$j])\
    \ {\n                    return \"\";\n                }\n            }\n    \
    \    }\n        # case 2: if element at index $i is larger than element at index\
    \ $i + 1, then return \"\"\n        if ($lst->[$i] > $lst->[$i + 1]) {\n     \
    \       return \"\";\n        }\n    }\n    # if the input list satisfies both\
    \ conditions, then return 1\n    return 1;\n}", "    my $prev = undef;\n    my\
    \ $dupe = 0;\n    foreach my $curr (@$lst) {\n        if (defined $prev) {\n \
    \           return \"\" if $curr < $prev;\n            $dupe = 1 if $curr == $prev;\n\
    \        }\n        $prev = $curr;\n    }\n    return $dupe ? \"\" : 1;\n}", " \
    \   my @lst  = @$lst;\n    my $last = $lst[0];\n    for my $val (@lst) {\n   \
    \     return q{} if $val < $last;\n        $last = $val;\n    }\n    return 1;\n\
    }", "    my $rv = 1;\n    my $last = -1;\n    for my $i (@$lst) {\n        $rv\
    \ = '' if $i < $last;\n        $last = $i;\n    }\n    return $rv;\n}", "    my\
    \ $i = 0;\n    while ($i < scalar(@$lst)-1) {\n        if ($lst->[$i] >= $lst->[$i+1])\
    \ {\n            return '';\n        }\n        $i++;\n    }\n    return 1;\n}",
  "    my($prev) = pop(@$lst);\n    while (my $el = pop(@$lst)) {\n        if ($el\
    \ >= $prev) {\n            $prev = $el;\n        } else {\n            return\
    \ \"\";\n        }\n    }\n    return 1;\n}", "    for (my $i = 0; $i < @$lst\
    \ - 1; $i++) {\n        if ($lst->[$i] >= $lst->[$i + 1]) {\n            return\
    \ \"\";\n        }\n    }\n    return 1;\n}", "    for my $i (0 .. $#$lst - 1)\
    \ {\n        return \"\" if $lst->[$i] > $lst->[$i+1];\n    }\n    return 1;\n\
    }", "    my @lst = @$lst;\n    return 0 if @lst < 1;\n    my $prev = pop @lst;\n\
    \    while(@lst) {\n        my $curr = pop @lst;\n        return '' if $curr >\
    \ $prev;\n        $prev = $curr;\n    }\n    return 1;\n}", "    for my $i (1..$#$lst)\
    \ {\n        if ($lst->[$i] < $lst->[$i-1]) {\n            return \"\";\n    \
    \    }\n    }\n    return 1;\n}", "    my $l_ind = @$lst - 1;\n    my $sorted\
    \ = 1;\n    for (my $i = 0; $i < $l_ind; $i++) {\n        if ($lst->[$i] > $lst->[$i\
    \ + 1]) {\n            $sorted = 0;\n            last;\n        }\n    }\n   \
    \ return $sorted;\n}", "    my $sorted = 1;\n    for (my $i = 0; $i < @$lst -\
    \ 1; $i++) {\n        if ($lst->[$i] >= $lst->[$i + 1]) {\n            $sorted\
    \ = 0;\n            last;\n        }\n    }\n    return $sorted;\n}", "    my\
    \ $sorted = 1;\n    my $previous = undef;\n    foreach (@$lst) {\n        if (defined\
    \ $previous) {\n            if ($_ < $previous) {\n                $sorted = 0;\n\
    \                last;\n            }\n        }\n        $previous = $_;\n  \
    \  }\n    return $sorted;\n}", "    my $prev = $lst->[0];\n    for my $i (1 ..\
    \ $#$lst) {\n        return '' if $lst->[$i] < $prev;\n        $prev = $lst->[$i];\n\
    \    }\n    return 1;\n}", "    if(@$lst == 1) {\n        return 1;\n    }\n \
    \   my $prev = $lst->[0];\n    for(my $i = 1; $i < @$lst; $i++) {\n        if($lst->[$i]\
    \ < $prev) {\n            return \"\";\n        }\n        $prev = $lst->[$i];\n\
    \    }\n    return 1;\n}", "    return 1 if (@$lst == 1);\n    my($prev) = shift\
    \ @$lst;\n    foreach my $e (@$lst) {\n        return \"\" if ($e <= $prev);\n\
    \        $prev = $e;\n    }\n    return 1;\n}", "    my($d, $i, $j, $k, $m, $max_dup,\
    \ $n, $max_num, $num_dup, $result);\n    $result = 1;\n    $n = scalar(@$lst);\n\
    \    # check for duplicates\n    for($i = 0; $i < $n; $i++) {\n        $d = $$lst[$i];\n\
    \        $num_dup = 1;\n        for($j = $i + 1; $j < $n; $j++) {\n          \
    \  if($$lst[$j] == $d) {\n                $num_dup++;\n            }\n       \
    \ }\n        if($num_dup > $max_dup) {\n            $max_dup = $num_dup;\n   \
    \         $max_num = $d;\n        }\n    }\n    if($max_dup > 1) {\n        $result\
    \ = \"\";\n    }\n    # check sorted\n    for($i = 0; $i < $n - 1; $i++) {\n \
    \       if($$lst[$i] > $$lst[$i + 1]) {\n            $result = \"\";\n       \
    \ }\n    }\n    return $result;\n}", "    my($val);\n    my($prev);\n    $prev\
    \ = -1;\n    foreach $val (@$lst) {\n        if ($val < $prev) {\n           \
    \ return \"\";\n        }\n        $prev = $val;\n    }\n    return 1;\n}", " \
    \   my($prev) = pop(@$lst);\n    my($curr);\n    while(@$lst) {\n        $curr\
    \ = pop(@$lst);\n        if($curr > $prev) {\n            return '';\n       \
    \ }\n        if($curr == $prev) {\n            $prev = $curr;\n            next;\n\
    \        }\n        return 1;\n    }\n    return 1;\n}", "    foreach my $i (0\
    \ .. scalar(@$lst) - 2) {\n        if ($lst->[$i] > $lst->[$i + 1]) {\n      \
    \      return \"\";\n        }\n    }\n    return 1;\n}", "    my $len = @$lst;\n\
    \    my $prev = @$lst[0];\n    my $is_sorted = 1;\n    for(my $i = 1; $i < $len;\
    \ $i++) {\n        if($prev > @$lst[$i]) {\n            $is_sorted = \"\";\n \
    \           last;\n        }\n        $prev = @$lst[$i];\n    }\n    return $is_sorted;\n\
    }", "    my $last = 0;\n    my $first = 1;\n    foreach my $i (@$lst) {\n    \
    \    if($first) {\n            $last = $i;\n            $first = 0;\n        }\
    \ else {\n            if($i < $last) {\n                return \"\";\n       \
    \     }\n            $last = $i;\n        }\n    }\n    return 1;\n}", "    my\
    \ $ret = 1;\n    for (my $i = 0; $i < @$lst-1; $i++) {\n        if ($lst->[$i]\
    \ > $lst->[$i+1]) {\n            $ret = '';\n            last;\n        }\n  \
    \  }\n    return $ret;\n}", "    foreach my $idx (0 .. @$lst - 2) {\n        if\
    \ ($lst->[$idx] > $lst->[$idx + 1]) {\n            return \"\";\n        }\n \
    \   }\n    return 1;\n}", "    my $res = 1;\n    for (my $i = 0; $i < @$lst -\
    \ 1; $i++) {\n        if ($lst->[$i] > $lst->[$i + 1]) {\n            $res = '';\n\
    \            last;\n        }\n    }\n    return $res;\n}", "    if (@$lst ==\
    \ 1) {\n        return 1;\n    }\n    my($prev) = shift @$lst;\n    for my $curr\
    \ (@$lst) {\n        if ($curr < $prev) {\n            return '';\n        }\n\
    \        $prev = $curr;\n    }\n    return 1;\n}", "    my @lst = @$lst;\n   \
    \ my $prev = pop @lst;\n    while(@lst) {\n        if ($prev > $lst[-1]) {\n \
    \           return \"\";\n        }\n        $prev = pop @lst;\n    }\n    return\
    \ 1;\n}", "    my($cur) = $$lst[0];\n    for my $i (1 .. $#$lst) {\n        if\
    \ ($$lst[$i] <= $cur) {\n            return '';\n        }\n        $cur = $$lst[$i];\n\
    \    }\n    return 1;\n}", "    if (scalar(@$lst) == 1) {\n        return \"1\"\
    ;\n    }\n    for (my $i = 0; $i < scalar(@$lst)-1; $i++) {\n        if ($lst->[$i]\
    \ >= $lst->[$i+1]) {\n            return \"\";\n        }\n    }\n    return \"\
    1\";\n}", "    my($last) = undef;\n    my($count) = 0;\n    foreach $item (@$lst)\
    \ {\n        if (defined($last)) {\n            if ($item < $last) {\n       \
    \         return \"\";\n            }\n            elsif ($item == $last) {\n\
    \                $count++;\n            }\n        }\n        $last = $item;\n\
    \    }\n    if ($count > 1) {\n        return \"\";\n    }\n    return 1;\n}",
  "    my($prev) = $lst->[0];\n    my($seen) = {};\n    foreach my $i (@$lst) {\n\
    \        if ($i < $prev) {\n            return \"\";\n        }\n        if (exists\
    \ $seen->{$i}) {\n            return \"\";\n        }\n        $seen->{$i} = 1;\n\
    \        $prev = $i;\n    }\n    return 1;\n}", "    my $flag = 0;\n    for (my\
    \ $i = 0; $i < scalar(@$lst) - 1; $i++) {\n        if ($lst->[$i] > $lst->[$i\
    \ + 1]) {\n            return '';\n        }\n        if ($lst->[$i] == $lst->[$i\
    \ + 1]) {\n            $flag = 1;\n        }\n    }\n    return $flag;\n}", " \
    \   return '1' if @$lst == 1;\n    my $prev = shift @$lst;\n    for my $e (@$lst)\
    \ {\n        return '' if $e < $prev;\n        $prev = $e;\n    }\n    return\
    \ '1';\n}", "    my $count = 1;\n    for my $i (0 .. @$lst - 2) {\n        my\
    \ $a = $lst->[$i];\n        my $b = $lst->[$i+1];\n        if ($a > $b) {\n  \
    \          return \"\";\n        }\n        $count++ if $a == $b;\n    }\n   \
    \ $count == @$lst ? 1 : \"\";\n}", "    my($j) = \"\";\n    for $i (1..$#{$lst})\
    \ {\n        if (${$lst}[$i-1] > ${$lst}[$i]) {\n            $j = $i;\n      \
    \      last;\n        }\n    }\n    if ($j eq \"\") {\n        return 1;\n   \
    \ } else {\n        return $j;\n    }\n}", "    my $i = 0;\n    my $len = scalar(@$lst);\n\
    \    while($i < $len - 1) {\n        if ($lst->[$i] > $lst->[$i + 1]) {\n    \
    \        return \"\";\n        }\n        $i++;\n    }\n    return 1;\n}", " \
    \   my $cnt = 1;\n    my $retval = 1;\n    foreach my $i ( 0 .. scalar(@$lst)\
    \ - 2 ) {\n        if(@$lst[$i] <= @$lst[$i+1]) {\n            $cnt++;\n     \
    \   } else {\n            $retval = 0;\n        }\n    }\n    if($cnt == scalar(@$lst))\
    \ {\n        return $retval;\n    } else {\n        return \"\";\n    }\n}", " \
    \   return 0 if @$lst < 2;\n    my $last = $lst->[0];\n    my $count = 1;\n  \
    \  for (my $i = 1; $i < @$lst; $i++) {\n        return '' if $lst->[$i] < $last;\n\
    \        if ($lst->[$i] == $last) {\n            $count++;\n            return\
    \ '' if $count > 1;\n        }\n        $last = $lst->[$i];\n    }\n    return\
    \ 1;\n}", "    my $prev = shift @$lst;\n    my $ret;\n    foreach my $i (@$lst)\
    \ {\n        if ($i > $prev) {\n            $prev = $i;\n            $ret = 1;\n\
    \        }\n        else {\n            $ret = '';\n            last;\n      \
    \  }\n    }\n    return $ret;\n}", "    my $n    = scalar(@$lst);\n    return\
    \ \"1\" if $n == 1;\n    my $p = $lst->[0];\n    my $i = 1;\n    while ($i < $n)\
    \ {\n        my $q = $lst->[$i];\n        return \"\" if $p > $q;\n        $p\
    \ = $q;\n        $i = $i + 1;\n    }\n    return \"1\";\n}", "    return 1 if\
    \ @$lst <= 1;\n    my $prev = $lst->[0];\n    my $i;\n    for $i (1..@$lst-1)\
    \ {\n        if ($lst->[$i] < $prev) {\n            return \"\";\n        }\n\
    \        $prev = $lst->[$i];\n    }\n    return 1;\n}", "    my $sorted = 1;\n\
    \    for (my $i = 0; $i < scalar(@$lst)-1; $i++) {\n        if ($lst->[$i] > $lst->[$i+1])\
    \ {\n            $sorted = \"\";\n            last;\n        }\n    }\n    return\
    \ $sorted;\n}", "    my $prev = undef;\n    for my $i (@$lst) {\n        if(defined($prev)\
    \ && $i < $prev) {\n            return \"\";\n        }\n        $prev = $i;\n\
    \    }\n    return 1;\n}", "    my($old);\n    foreach my $i (@$lst) {\n     \
    \   return '' if (defined($old) && $i < $old);\n        $old = $i;\n    }\n  \
    \  return 1;\n}", "    my $nr = @$lst;\n    if ( $nr == 1 ) {\n        return\
    \ 1;\n    }\n    for ( my $i = 1; $i < $nr; $i++ ) {\n        if ( $lst->[$i-1]\
    \ > $lst->[$i] ) {\n            return \"\";\n        }\n    }\n    return 1;\n\
    }", "    my $n = scalar(@$lst);\n    my $prev = 0;\n    my $count = 0;\n    for\
    \ my $i (0..$n-1) {\n        if ($i > 0 && $lst->[$i] == $prev) {\n          \
    \  $count++;\n        }\n        $prev = $lst->[$i];\n    }\n    return $count\
    \ > 1 ? \"\" : 1;\n}", "    my($i, $res);\n    $res = 1;\n    for($i = 1; $i <\
    \ scalar(@$lst); $i++) {\n        if($$lst[$i - 1] > $$lst[$i]) {\n          \
    \  $res = '';\n            last;\n        }\n    }\n    return $res;\n}", "  \
    \  return undef if scalar(@$lst) == 0;\n    my $pre_val = $lst->[0];\n    for\
    \ my $n (@$lst) {\n        return undef if $n < $pre_val;\n        $pre_val =\
    \ $n;\n    }\n    return 1;\n}", "    my $n = scalar(@$lst);\n    my $nondup =\
    \ scalar(uniq(@$lst));\n    return 1 if ($n == $nondup);\n    return \"\" if ($n\
    \ > $nondup);\n    return \"\" if ($n < $nondup);\n    my @sorted = sort {$a <=>\
    \ $b} @$lst;\n    my $nSorted = scalar(@sorted);\n    return \"\" if ($nSorted\
    \ != $n);\n    for(my $i = 0; $i < $n; $i++) {\n        return \"\" if ($sorted[$i]\
    \ != $lst->[$i]);\n    }\n    return 1;\n}", "    my($last) = $lst->[0];\n   \
    \ my($i);\n    my($len) = scalar(@$lst);\n    if ($len < 2) {\n        return\
    \ 1;\n    }\n    for ($i = 1; $i < $len; $i++) {\n        if ($lst->[$i] < $last)\
    \ {\n            return \"\";\n        }\n        $last = $lst->[$i];\n    }\n\
    \    return 1;\n}", "    my $i = 0;\n    my $j = 1;\n    while($j < scalar(@$lst))\
    \ {\n        if($lst->[$i] < $lst->[$j]) {\n            return \"\" if $lst->[$i]\
    \ == $lst->[$j];\n            $i = $j;\n            $j++;\n        }\n       \
    \ else {\n            return \"\";\n        }\n    }\n    return 1;\n}", "   \
    \ my $result = 1;\n    my $last;\n    for my $element (@$lst) {\n        $result\
    \ = '' if defined $last && $last > $element;\n        $last = $element;\n    }\n\
    \    return $result;\n}", "    my $prev = -99999999;\n    my $count = 0;\n   \
    \ my @lst = @$lst;\n    if (@lst) {\n\tfor (@lst) {\n\t    if ($_ < $prev) {\n\
    \t\treturn \"\";\n\t    }\n\t    $prev = $_;\n\t    $count++;\n\t}\n\tif ($count\
    \ > 1) {\n\t    return 1;\n\t}\n    }\n    return \"\";\n}", "    my @list = @$lst;\n\
    \    my $last = $list[0];\n    my $dup = 0;\n    for my $item (@list) {\n    \
    \    if ($item == $last) {\n            $dup++;\n        }\n        if ($item\
    \ < $last) {\n            return \"\";\n        }\n        $last = $item;\n  \
    \  }\n    return \"\" if $dup > 1;\n    return 1;\n}", "    my($curr) = $lst->[0];\n\
    \    for (my $i = 1; $i < scalar(@$lst); $i++) {\n        if ($lst->[$i] < $curr)\
    \ {\n            return '';\n        }\n        $curr = $lst->[$i];\n    }\n \
    \   return 1;\n}", "    my($i, $num);\n    for ($i = 0; $i < $#$lst; $i++) {\n\
    \        $num = @$lst[$i];\n        if ($num > @$lst[$i+1]) {\n            return\
    \ \"\";\n        }\n    }\n    return 1;\n}", "    my $i;\n    my $last;\n   \
    \ my $cur;\n    my $dup = 0;\n    for($i = 0; $i < @$lst; $i++) {\n        $cur\
    \ = $lst->[$i];\n        if(defined($last)) {\n            if($cur < $last) {\n\
    \                return \"\";\n            }\n            if($cur == $last) {\n\
    \                $dup = 1;\n            }\n        }\n        $last = $cur;\n\
    \    }\n    return $dup ? \"\" : 1;\n}", "    my($i, $j, $n, $prev, $sort);\n\
    \    $sort = 1;\n    for ($i = 0; $i < scalar(@$lst); $i++) {\n        $n = $lst->[$i];\n\
    \        for ($j = $i+1; $j < scalar(@$lst); $j++) {\n            if ($n > $lst->[$j])\
    \ {\n                $sort = \"\";\n                last;\n            }\n   \
    \     }\n    }\n    return $sort;\n}", "    my $size = scalar(@$lst);\n    for\
    \ (my $i = 0; $i < $size - 1; $i++) {\n        if ($lst->[$i] > $lst->[$i + 1])\
    \ {\n            return \"\";\n        }\n    }\n    return 1;\n}", "    my @lst\
    \ = @$lst;\n    my $last = $lst[0];\n    my $dup = 0;\n    for my $curr (@lst)\
    \ {\n        if ($curr == $last) {\n            $dup = 1;\n        } elsif ($curr\
    \ < $last) {\n            return \"\";\n        }\n        $last = $curr;\n  \
    \  }\n    if ($dup) {\n        return 1;\n    } else {\n        return 2;\n  \
    \  }\n}", "    return '1' if (scalar(@$lst) <= 1);", "    return \"1\" if @$lst\
    \ == 1;\n    for (1..@$lst-1) {\n        return '' if $lst->[$_-1] > $lst->[$_];\n\
    \    }\n    return 1;\n}", "    my $last_val = $lst->[0];\n    for my $val (@$lst)\
    \ {\n        if($val < $last_val) {\n            return \"\";\n        }\n   \
    \     $last_val = $val;\n    }\n    return 1;\n}", "    my @lst = @$lst;\n   \
    \ my($return_val) = 1;\n    my($prev) = $lst[0];\n    for $num (@lst) {\n    \
    \    if($num < $prev) {\n            $return_val = \"\";\n            last;\n\
    \        }\n        $prev = $num;\n    }\n    return $return_val;\n}", "    my\
    \ $l = @$lst;\n    my $i = 0;\n    while ($i < $l - 1) {\n        if ($lst->[$i]\
    \ > $lst->[$i + 1]) {\n            return \"\";\n        }\n        $i++;\n  \
    \  }\n    return 1;\n}", "    my($curr) = 0;\n    my($prev) = 0;\n    foreach\
    \ my $item (@$lst) {\n        $curr = $item;\n        return '' if($curr <= $prev);\n\
    \        $prev = $curr;\n    }\n    return 1;\n}", "    my $prev;\n    my $result\
    \ = 1;\n    my $seen;\n    foreach my $x (@$lst) {\n        if (defined $prev)\
    \ {\n            if ($x < $prev) {\n                $result = \"\";\n        \
    \        last;\n            }\n            if ($x == $prev) {\n              \
    \  $seen++;\n                if ($seen > 1) {\n                    $result = \"\
    \";\n                    last;\n                }\n            }\n        }\n\
    \        $prev = $x;\n    }\n    return $result;\n}", "    my($prev) = $lst->[0];\n\
    \    for my $val (@$lst) {\n        return '' if $val < $prev;\n        $prev\
    \ = $val;\n    }\n    return 1;\n}", "    my $is_sorted = 1;\n    my $prev = shift\
    \ @$lst;\n    for my $n (@$lst) {\n        if ($n < $prev) {\n            $is_sorted\
    \ = 0;\n            last;\n        }\n        $prev = $n;\n    }\n    $is_sorted;\n\
    }", "    my $lst_len = scalar(@$lst);\n    my $num_dups = 0;\n    for (my $i =\
    \ 0; $i < $lst_len - 1; $i++) {\n        if ($lst->[$i] == $lst->[$i + 1]) {\n\
    \            $num_dups++;\n        }\n        if ($lst->[$i] > $lst->[$i + 1])\
    \ {\n            return \"\";\n        }\n    }\n    return $num_dups < 1;\n}",
  "    for my $i (0 .. $#$lst - 1) {\n        if ($lst->[$i] >= $lst->[$i+1]) {\n\
    \            return '';\n        }\n    }\n    return 1;\n}", "    my $i;\n  \
    \  for $i (1 .. $#$lst) {\n        if ($lst->[$i-1] > $lst->[$i]) {\n        \
    \    return \"\";\n        }\n    }\n    return 1;\n}", "    my $last = 0;\n \
    \   foreach my $i (@$lst) {\n        return \"\" if ($i < $last);\n        $last\
    \ = $i;\n    }\n    return 1;\n}", "    my $prev = $lst->[0];\n    foreach my\
    \ $x (@$lst) {\n        return \"\" if $x < $prev;\n        $prev = $x;\n    }\n\
    \    return 1;\n}", "    my $i;\n    my $n = @$lst;\n    my $dup = 0;\n    for($i\
    \ = 1; $i < $n; $i++) {\n        if($lst->[$i] < $lst->[$i-1]) {\n           \
    \ return \"\";\n        }\n        if($lst->[$i] == $lst->[$i-1]) {\n        \
    \    $dup = 1;\n        }\n    }\n    if($dup) {\n        return 1;\n    }\n \
    \   return \"\";\n}", "    foreach my $i (0..@$lst-2) {\n        if ($lst->[$i]\
    \ > $lst->[$i+1]) {\n            return \"\";\n        }\n    }\n    return 1;\n\
    }", "    my($prev) = undef;\n    foreach my $x (@$lst) {\n        if(defined($prev)\
    \ && $x < $prev) {\n            return \"\";\n        }\n        $prev = $x;\n\
    \    }\n    return 1;\n}", "    for my $i (1..$#$lst) {\n        if ($lst->[$i]\
    \ < $lst->[$i-1]) {\n            return '';\n        }\n    }\n    return 1;\n\
    }", "    my $i = 1;\n    for(; $i < @$lst; $i++) {\n        last if $lst->[$i-1]\
    \ > $lst->[$i];\n    }\n    # return $i == @$lst;\n    return $i == @$lst ? 1\
    \ : \"\";\n}", "    for my $i (1..$#$lst) {\n        return \"\" if $lst->[$i-1]\
    \ > $lst->[$i];\n    }\n    return 1;\n}", "    my $pre = undef;\n    my $ret\
    \ = 1;\n    for my $i (@$lst) {\n        if(defined($pre) && $i < $pre) {\n  \
    \          $ret = '';\n            last;\n        }\n        $pre = $i;\n    }\n\
    \    return $ret;\n}", "    for my $i (0 .. $#$lst - 1) {\n        if ($lst->[$i]\
    \ > $lst->[$i+1]) {\n            return '';\n        }\n    }\n    return 1;\n\
    }", "    # @array = (5);\n    # @array = (1,2,3,4,5);\n    # @array = (1,3,2,4,5);\n\
    \    # @array = (1,2,3,4,5,6);\n    # @array = (1,2,3,4,5,6,7);\n    # @array\
    \ = (1,3,2,4,5,6,7);\n    # @array = (1,2,2,3,3,4);\n    # @array = (1,2,2,2,3,4);\n\
    \    my @array = @$lst;\n    my $last_seen = shift @array;\n    for my $elem (@array)\
    \ {\n        if ($elem < $last_seen) {\n            return \"\";\n        }\n\
    \        $last_seen = $elem;\n    }\n    return 1;\n}", "    my $len = scalar(@$lst);\n\
    \    my $prev = $lst->[0];\n    my $sorted = 1;\n    for (my $i = 1; $i < $len;\
    \ $i++) {\n        my $curr = $lst->[$i];\n        if ($curr == $prev) {\n   \
    \         $sorted = \"\";\n        }\n        elsif ($curr < $prev) {\n      \
    \      $sorted = \"\";\n            last;\n        }\n        $prev = $curr;\n\
    \    }\n    return $sorted;\n}", "    my $res = 1;\n    my $prev = -1;\n    foreach\
    \ my $i (@$lst) {\n        if ($i < $prev) {\n            $res = \"\";\n     \
    \       last;\n        }\n        $prev = $i;\n    }\n    return $res;\n}", " \
    \   my $sorted = 1;\n    my $last = shift @$lst;\n    foreach (@$lst) {\n    \
    \    $sorted = 0 if $_ < $last;\n        $last = $_;\n    }\n    return $sorted;\n\
    }", '    return 1 if !@$lst;', "    return 1 if @$lst < 2;\n    for my $i (1 ..\
    \ $#$lst) {\n        return '' if $lst->[$i] < $lst->[$i-1];\n    }\n    return\
    \ 1;\n}", "    my @a = @$lst;\n    my $i;\n    my $n = scalar(@a);\n    my $prev;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if ($i != 0 && $a[$i] < $prev) {\n\
    \            return \"\";\n        }\n        $prev = $a[$i];\n    }\n    return\
    \ 1;\n}", "    my $i = 1;\n    my $x = shift @$lst;\n    for my $y (@$lst) {\n\
    \        if ($x > $y) {\n            return \"\";\n        }\n        $x = $y;\n\
    \    }\n    return 1;\n}", "    my $ret = '1';\n    my $i = 0;\n    my $len =\
    \ @$lst;\n    while ($i < $len - 1) {\n        if ($lst->[$i] > $lst->[$i + 1])\
    \ {\n            $ret = '';\n            last;\n        }\n        $i++;\n   \
    \ }\n    return $ret;\n}", "    my $is_sorted = 1;\n    my $prev = $lst->[0];\n\
    \    foreach my $i (1..$#$lst) {\n        if ($lst->[$i] < $prev) {\n        \
    \    $is_sorted = '';\n            last;\n        }\n        $prev = $lst->[$i];\n\
    \    }\n    return $is_sorted;\n}", "    my $lst_len = @$lst;\n    return \"\"\
    \ if $lst_len == 0;\n    my $prev = $lst->[0];\n    my $found_dup = 0;\n    for\
    \ (my $i = 1; $i < $lst_len; $i++) {\n        my $curr = $lst->[$i];\n       \
    \ if ($curr == $prev) {\n            $found_dup = 1;\n        }\n        if ($curr\
    \ < $prev) {\n            return \"\" if !$found_dup;\n        }\n        $prev\
    \ = $curr;\n    }\n    return 1;\n}", "    my $ret = 1;\n    my $i = 0;\n    while($i\
    \ < @$lst - 1){\n        if ($lst->[$i] > $lst->[$i+1]){\n            $ret = \"\
    \";\n            last;\n        }\n        $i++;\n    }\n    return $ret;\n}",
  "    my $i = 0;\n    while ($i < (scalar @$lst - 1)) {\n        if ($lst->[$i] >\
    \ $lst->[$i + 1]) {\n            return \"\";\n        }\n        $i++;\n    }\n\
    \    return 1;\n}", "    my($prev) = shift @$lst;\n    for (@$lst) {\n       \
    \ if ($_ < $prev) {\n            return \"\";\n        }\n        $prev = $_;\n\
    \    }\n    return 1;\n}", "    #print \"@{$lst}\\n\";\n    my $is_sorted = 1;\n\
    \    if (@{$lst} == 1) {\n        return 1;\n    }\n    for (my $i = 0; $i < @{$lst}\
    \ - 1; $i++) {\n        if ($lst->[$i] >= $lst->[$i + 1]) {\n            $is_sorted\
    \ = 0;\n            last;\n        }\n    }\n    return $is_sorted;\n}", "   \
    \ my $last = $lst->[0];\n    for (my $i = 1; $i < @$lst; $i++) {\n        if ($lst->[$i]\
    \ < $last) {\n            return '';\n        }\n        $last = $lst->[$i];\n\
    \    }\n    return 1;\n}", "    my @lst = @$lst;\n    my $prev = $lst[0];\n  \
    \  foreach my $i (1..$#lst) {\n        return \"\" if $lst[$i] < $prev;\n    \
    \    $prev = $lst[$i];\n    }\n    return 1;\n}", "    my $x = 0;\n    my $y =\
    \ 0;\n    my $ret = 0;\n    my $dup = 0;\n    my $diff = 0;\n    for($y = 0; $y\
    \ < scalar(@$lst); $y++) {\n        for($x = $y + 1; $x < scalar(@$lst); $x++)\
    \ {\n            if($$lst[$x] == $$lst[$y]) {\n                $dup++;\n     \
    \       }\n            if($$lst[$x] > $$lst[$y]) {\n                $diff++;\n\
    \            }\n        }\n    }\n    if($dup > 0) {\n        $ret = \"\";\n \
    \   }\n    else {\n        if($diff == (scalar(@$lst) - 1)) {\n            $ret\
    \ = 1;\n        }\n        else {\n            $ret = \"\";\n        }\n    }\n\
    \    return $ret;\n}", "    my $last = shift @$lst;\n    foreach my $next (@$lst)\
    \ {\n        if ($next <= $last) {\n            return '';\n        }\n      \
    \  $last = $next;\n    }\n    return 1;\n}", "    my($prev) = shift @$lst;\n \
    \   my($is_sorted) = 1;\n    for my $cur (@$lst) {\n        if($cur < $prev) {\n\
    \            $is_sorted = 0;\n            last;\n        }\n        $prev = $cur;\n\
    \    }\n    return $is_sorted;\n}", "    my $ret = 1;\n    my $i = $#$lst;\n \
    \   while ($i > 0) {\n        last if $lst->[$i] < $lst->[$i-1];\n        $i--;\n\
    \    }\n    return $i ? \"\" : 1;\n}", "    my $i = 1;\n    while($i < @$lst){\n\
    \        if($lst->[$i-1] <= $lst->[$i]){\n            $i++;\n        }\n     \
    \   else{\n            return \"\";\n        }\n    }\n    return 1;\n}", "  \
    \  my($prev) = -999;\n    my($duplicate);\n    foreach (@$lst) {\n        if ($_\
    \ == $prev) {\n            $duplicate = 1;\n        }\n        elsif ($_ < $prev)\
    \ {\n            return \"\";\n        }\n        $prev = $_;\n    }\n    return\
    \ $duplicate ? 1 : 2;\n}", "    my $len = @$lst;\n    my %hash;\n    if ($len\
    \ == 1) {\n        return \"1\";\n    }\n    for (my $i = 0; $i < $len; $i++)\
    \ {\n        if ($i == $len - 1) {\n            last;\n        }\n        if ($hash{$lst->[$i]})\
    \ {\n            return \"\";\n        }\n        if ($lst->[$i] > $lst->[$i +\
    \ 1]) {\n            return \"\";\n        }\n        $hash{$lst->[$i]} = 1;\n\
    \    }\n    return \"1\";\n}", "    my @lst = @$lst;\n    if (!scalar(@lst)) {\n\
    \        return \"\";\n    }", "    my $last_seen;\n    for my $i (@$lst) {\n\
    \        if (defined $last_seen) {\n            return \"\" if $i < $last_seen;\n\
    \        }\n        $last_seen = $i;\n    }\n    return 1;\n}", "    return 1\
    \ if @$lst <= 1;\n    for (my $i = 1; $i < @$lst; $i++) {\n        return '' if\
    \ $lst->[$i] < $lst->[$i-1];\n    }\n    return 1;\n}", "    if (1 == @$lst) {\n\
    \        return(1);\n    }\n    my($prev) = $lst->[0];\n    for my $val (@$lst[1..$#$lst])\
    \ {\n        if ($val < $prev) {\n            return(q{});\n        }\n      \
    \  $prev = $val;\n    }\n    return(1);\n}", "    my $not_sorted;\n    my $previous\
    \ = pop @$lst;\n    foreach my $elem (@$lst) {\n        if ($elem < $previous)\
    \ {\n            $not_sorted = 1;\n            last;\n        }\n        $previous\
    \ = $elem;\n    }\n    return \"1\" unless $not_sorted;\n    return \"\";\n}",
  "    my $sorted = 1;\n    for (my $i = 0; $i < @$lst - 1; $i++) {\n        if ($lst->[$i]\
    \ > $lst->[$i + 1]) {\n            $sorted = 0;\n            last;\n        }\n\
    \    }\n    return $sorted;\n}", "    foreach my $i (0..@$lst-2) {\n        if\
    \ ($lst->[$i] >= $lst->[$i+1]) {\n            return \"\";\n        }\n    }\n\
    \    return 1;\n}", "    my $ret = '';\n    my $i = 0;\n    foreach my $n (@$lst)\
    \ {\n        if($i != 0 && $n < @$lst[$i-1]) {\n            $ret = '';\n     \
    \       last;\n        }\n        $i++;\n    }\n    return $ret ? 1 : '';\n}\n\
    1;", "    my $res = 1;\n    my $len = scalar(@$lst);\n    if($len >= 2) {\n  \
    \      for(my $i = 1; $i < $len; $i++) {\n            if($lst->[$i] < $lst->[$i-1])\
    \ {\n                $res = '';\n                last;\n            }\n      \
    \  }\n    }\n    return $res;\n}", "    my $i = 1;\n    my $sz = @$lst;\n    while\
    \ ($i < $sz && $$lst[$i] >= $$lst[$i-1]) {\n        $i++;\n    }\n    return $i\
    \ == $sz ? 1 : '';\n}", "    my $is_sorted = 1;\n    my $prev = $lst->[0];\n \
    \   for my $item (@$lst) {\n        if ($item < $prev) {\n            $is_sorted\
    \ = 0;\n            last;\n        }\n        $prev = $item;\n    }\n    return\
    \ $is_sorted;\n}", "    if (@$lst == 1) {\n        return 1;\n    }\n    my $i\
    \ = 0;\n    while ($i < @$lst - 1) {\n        if ($lst->[$i] > $lst->[$i + 1])\
    \ {\n            return '';\n        }\n        $i++;\n    }\n    return 1;\n}",
  "    my $len = @$lst;\n    my $i = 0;\n    for my $item (@$lst) {\n        if ($i\
    \ == 0) {\n            $i += 1;\n            next;\n        }\n        if ($lst->[$i]\
    \ < $lst->[$i - 1]) {\n            return \"\";\n        }\n        $i += 1;\n\
    \    }\n    return 1;\n}", "    foreach( 1 .. @$lst - 1 ) {\n        return \"\
    \" if $lst->[$_] < $lst->[$_-1];\n    }\n    return 1;\n}", "    my @lst = @$lst;\n\
    \    my $temp = shift @lst;\n    foreach my $item (@lst) {\n        if ($item\
    \ < $temp) {\n            return '';\n        }\n        $temp = $item;\n    }\n\
    \    return 1;\n}", "    my $last = @$lst[0];\n    foreach my $num (@$lst) {\n\
    \        return \"\" if $num < $last;\n        $last = $num;\n    }\n    return\
    \ 1;\n}", "    my $n = @$lst;\n    for my $i (0..$n-2) {\n        return '' if\
    \ $lst->[$i] > $lst->[$i+1];\n    }\n    return 1;\n}", "    my $out = 1;\n  \
    \  my @sorted = sort {$a <=> $b} @$lst;\n    for (my $i = 0; $i < scalar(@$lst);\
    \ $i++) {\n        $out = 0 if $sorted[$i] != $lst->[$i];\n    }\n    return $out;\n\
    }", "    my $min = $lst->[0];\n    for my $i (1..$#$lst) {\n        return \"\"\
    \ if $lst->[$i] < $min;\n        $min = $lst->[$i];\n    }\n    return 1;\n}",
  "    my $is_sorted = 1;\n    for my $i (1..@$lst-1) {\n        if ($lst->[$i] <\
    \ $lst->[$i-1]) {\n            $is_sorted = 0;\n            last;\n        }\n\
    \    }\n    return $is_sorted;\n}", "    my $ret = 1;\n    for(my $i = 0; $i <\
    \ @$lst - 1; $i++) {\n        if ($lst->[$i] >= $lst->[$i + 1]) {\n          \
    \  $ret = \"\";\n            last;\n        }\n    }\n    return $ret;\n}", " \
    \   my $ret;\n    my $prev = -1;\n    foreach my $val (@$lst) {\n        if ($val\
    \ == $prev) {\n            $ret = \"\";\n            last;\n        }\n      \
    \  if ($val > $prev) {\n            $ret = 1;\n        } else {\n            $ret\
    \ = \"\";\n            last;\n        }\n        $prev = $val;\n    }\n    return\
    \ $ret;\n}", "    my($last) = $lst->[0];\n    for my $i (1 .. $#$lst) {\n    \
    \    my($cur) = $lst->[$i];\n        return \"\" if $cur < $last;\n        $last\
    \ = $cur;\n    }\n    return 1;\n}", "    # Your code here\n    my @list = sort\
    \ @$lst;\n    if($lst ~~ @list){\n        return 1;\n    }\n    else{\n      \
    \  return \"\";\n    }\n}", "    my($prev) = -1;\n    foreach my $num ( @$lst\
    \ ) {\n        if( $num < $prev ) {\n            return \"\";\n        }\n   \
    \     $prev = $num;\n    }\n    return 1;\n}", "    my($old) = undef;\n    my($dup)\
    \ = 0;\n    for my $i (@$lst) {\n        if (defined($old)) {\n            if\
    \ ($i == $old) {\n                $dup++;\n            }\n            elsif ($i\
    \ < $old) {\n                return \"\"\n            }\n        }\n        $old\
    \ = $i;\n    }\n    $dup >= 1 ? \"\" : 1;\n}\n1;", "    my $c = 0;\n    my $flag\
    \ = 1;\n    my $prev = 0;\n    foreach my $v (@$lst) {\n        if ($c == 0) {\n\
    \            $prev = $v;\n        } else {\n            if ($v < $prev) {\n  \
    \              $flag = 0;\n                last;\n            }\n            $prev\
    \ = $v;\n        }\n        $c = $c + 1;\n    }\n    return $flag;\n}", "    my\
    \ $result = 1;\n    my $last = undef;\n    foreach $x (@$lst) {\n        if (defined($last)\
    \ && $x < $last) {\n            $result = \"\";\n            last;\n        }\n\
    \        $last = $x;\n    }\n    return $result;\n}", "    my $length = length($lst);\n\
    \    if ($length < 2) {\n        return 1;\n    }\n    for (my $i = 0; $i < $length\
    \ - 1; $i++) {\n        if (substr($lst, $i, 1) > substr($lst, $i + 1, 1)) {\n\
    \            return '';\n        }\n    }\n    return 1;\n}", "    for my $i (1..$#$lst)\
    \ {\n        return '' if $lst->[$i-1] > $lst->[$i];\n    }\n    return 1;\n}",
  "    my @list = @$lst;\n    my $sorted = 1;\n    for (my $i = 0; $i < @list-1; $i++)\
    \ {\n        if ($list[$i] > $list[$i+1]) {\n            $sorted = \"\";\n   \
    \     }\n    }\n    return $sorted;\n}", "    my $lst_len = @$lst;\n    my $i;\n\
    \    my $prev;\n    my $curr;\n    #print \"is_sorted: lst_len: $lst_len\\n\"\
    ;\n    if ($lst_len <= 1) {\n        return 1;\n    } else {\n        $prev =\
    \ $$lst[0];\n        for ($i = 1; $i < $lst_len; $i++) {\n            $curr =\
    \ $$lst[$i];\n            #print \"curr: $curr, prev: $prev\\n\";\n          \
    \  if ($curr < $prev) {\n                return '';\n            }\n         \
    \   $prev = $curr;\n        }\n        return 1;\n    }\n}", "    my($prev,$curr);\n\
    \    foreach $curr (@$lst) {\n        if ($prev) {\n            return if $prev\
    \ > $curr;\n        }\n        $prev = $curr;\n    }\n    return 1;\n}", "   \
    \ my @lst = @$lst;\n    my $first = $lst[0];\n    my $is_sorted = 1;\n    foreach\
    \ my $i (@lst) {\n        if ($i < $first) {\n            $is_sorted = \"\";\n\
    \        }\n        $first = $i;\n    }\n    return $is_sorted;\n}", "    my($l);\n\
    \    if (@$lst < 2) {\n        return 1;\n    }\n    $l = $lst->[0];\n    foreach\
    \ my $e (@$lst) {\n        if ($e != $l) {\n            return \"\" if ($e < $l);\n\
    \            $l = $e;\n        }\n    }\n    return 1;\n}", "    my $pre = shift\
    \ @$lst;\n    foreach my $x (@$lst) {\n        if($x < $pre) {\n            return\
    \ \"\";\n        }\n        $pre = $x;\n    }\n    return 1;\n}", "    my($last)\
    \ = pop(@$lst);\n    return 1 if @$lst == 0;\n    for my $v (@$lst) {\n      \
    \  return \"\" if $v >= $last;\n        $last = $v;\n    }\n    return 1;\n}",
  "    my @lst_copy = @$lst;\n    #my @lst_sorted = sort { $a <=> $b } @lst_copy;",
  "    my $pivot = @$lst[0];\n    my $mode;\n    for (my $i = 1; $i < @$lst; $i++)\
    \ {\n        if (!$mode) {\n            if ($pivot < @$lst[$i]) {\n          \
    \      $mode = 'asc';\n            } elsif ($pivot > @$lst[$i]) {\n          \
    \      $mode = 'desc';\n            } else {\n                return '';\n   \
    \         }\n        } elsif ($mode eq 'asc') {\n            if ($pivot > @$lst[$i])\
    \ {\n                return '';\n            }\n        } elsif ($mode eq 'desc')\
    \ {\n            if ($pivot < @$lst[$i]) {\n                return '';\n     \
    \       }\n        }\n        $pivot = @$lst[$i];\n    }\n    return 1;\n}", " \
    \   my $cnt = -1;\n    my $res = \"\";\n    my $prev;\n    foreach my $item (@$lst)\
    \ {\n        if ($cnt == -1) {\n            $prev = $item;\n            $cnt =\
    \ 1;\n        } else {\n            if ($item == $prev) {\n                $cnt++;\n\
    \            } else {\n                if ($item < $prev) {\n                \
    \    $res = \"\";\n                    last;\n                } else {\n     \
    \               $prev = $item;\n                    $cnt = 1;\n              \
    \  }\n            }\n        }\n    }\n    return $res;\n}", "    return 1 if\
    \ @$lst <= 1;\n    my $a = $lst->[0];\n    for my $i (1..$#$lst) {\n        return\
    \ '' if $a > $lst->[$i];\n        $a = $lst->[$i];\n    }\n    return 1;\n}",
  "    my($prev, $curr);\n    for my $val (@$lst) {\n        $curr = $val;\n     \
    \   if (defined $prev && $prev > $curr) {\n            return \"\";\n        }\n\
    \        $prev = $curr;\n    }\n    return 1;\n}", "    for my $i (0 .. @$lst\
    \ - 2) {\n        if ($lst->[$i] > $lst->[$i+1]) {\n            return undef;\n\
    \        }\n    }\n    return 1;\n}", "    my $last = -1;\n    my $same = 0;\n\
    \    foreach my $elt (@$lst) {\n        if ($elt == $last) {\n            $same\
    \ = 1;\n        }\n        elsif ($elt < $last) {\n            return \"\";\n\
    \        }\n        $last = $elt;\n    }\n    return $same ? \"\" : 1;\n}", " \
    \   my @lst = @$lst;\n    return 1 if @lst < 2;\n    my @r = reverse @lst;\n \
    \   return @lst == @r;\n}", "    my $first = shift @$lst;\n    for my $i (@$lst)\
    \ {\n        if ($i < $first) {\n            return \"\";\n        }\n       \
    \ $first = $i;\n    }\n    return 1;\n}", "    my($a) = $lst->[0];\n    my($is_sorted)\
    \ = \"1\";\n    my($prev) = $a;\n    foreach $a (@$lst) {\n        if ($a < $prev)\
    \ {\n            $is_sorted = \"\";\n            last;\n        }\n        $prev\
    \ = $a;\n    }\n    return $is_sorted;\n}", "    my $out = 1;\n    my $last =\
    \ -1;\n    foreach my $x (@$lst) {\n        if ($x < $last) {\n            $out\
    \ = \"\";\n            last;\n        }\n        $last = $x;\n    }\n    return\
    \ $out;\n}", "    my $last;\n    for my $v (@$lst) {\n        return \"\" if $last\
    \ && $last >= $v;\n        $last = $v;\n    }\n    return 1;\n}", "    for my\
    \ $i (1..$#$lst) {\n        return \"\" if $$lst[$i-1] > $$lst[$i];\n    }\n \
    \   return 1;\n}", "    my $len = scalar(@$lst);\n    if ($len == 1) {\n     \
    \   return 1;\n    }\n    my $last = $lst->[0];\n    my $found_dup = 0;\n    for\
    \ (my $i = 1; $i < $len; $i++) {\n        if ($lst->[$i] < $last) {\n        \
    \    return \"\";\n        }\n        if ($lst->[$i] == $last) {\n           \
    \ $found_dup = 1;\n        }\n        $last = $lst->[$i];\n    }\n    return $found_dup\
    \ ? \"\" : 1;\n}", "    for my $i (1..(@$lst-1)) {\n        if($lst->[$i-1] >\
    \ $lst->[$i]) {\n            return \"\";\n        }\n    }\n    return 1;\n}",
  "    my($cmp);\n    $cmp = sub {\n        my($lst) = @_;\n        if (!@$lst) {\n\
    \            return \"1\";\n        }\n        else {\n            if (scalar(@$lst)\
    \ == 1) {\n                return \"1\";\n            }\n            else {\n\
    \                if ($lst->[0] < $lst->[1]) {\n                    $lst = [@$lst[1\
    \ .. @$lst - 1]];\n                    return &$cmp($lst);\n                }\n\
    \                else {\n                    return \"\";\n                }\n\
    \            }\n        }\n    };\n    return &$cmp($lst);\n}", "    if(@$lst\
    \ < 2) {\n        return 1;\n    }\n    my $last = shift @$lst;\n    foreach my\
    \ $curr (@$lst) {\n        if($curr < $last) {\n            return \"\";\n   \
    \     }\n        $last = $curr;\n    }\n    return 1;\n}", "    my $current =\
    \ undef;\n    for my $item (@$lst) {\n        if (defined $current && $item <=\
    \ $current) {\n            return \"\";\n        }\n        $current = $item;\n\
    \    }\n    return 1;\n}", "    for my $idx (1 .. $#$lst) {\n        my $prev\
    \ = $lst->[$idx-1];\n        my $curr = $lst->[$idx];\n        if ($prev > $curr)\
    \ {\n            return '';\n        }\n    }\n    return 1;\n}", "    my($a,\
    \ $b);\n    for ($a = 0, $b = 1; $b < @$lst; $a++, $b++) {\n        return \"\"\
    \ if ($lst->[$a] >= $lst->[$b]);\n    }\n    return 1;\n}", "    if( @$lst ==\
    \ 1 ) {\n        return \"1\";\n    }\n    for( my $i = 0; $i < @$lst - 1; $i++\
    \ ) {\n        if( $lst->[$i] > $lst->[$i+1] ) {\n            return \"\";\n \
    \       }\n    }\n    return \"1\";\n}", "    my($n, $j, $inorder, $dup, $i);\n\
    \    $n = scalar(@$lst);\n    if ($n < 2) {\n        return 1;\n    }\n    $j\
    \ = $n-1;\n    $inorder = 0;\n    for($i = 0; $i < $j; $i++) {\n        if ($lst->[$i]\
    \ <= $lst->[$i+1]) {\n            $inorder++;\n        }\n        if ($lst->[$i]\
    \ == $lst->[$i+1]) {\n            $dup++;\n        }\n    }\n    if ($inorder\
    \ == $j && $dup < $j) {\n        return 1;\n    }\n    return \"\";\n}\n1;", " \
    \   return 1 unless @$lst > 1;\n    my $prev = $lst->[0];\n    for my $cur (@$lst[1..$#$lst])\
    \ {\n        return '' if $cur <= $prev;\n        $prev = $cur;\n    }\n    return\
    \ 1;\n}", "    for my $i (1..$#$lst) {\n        return \"\" if $lst->[$i-1] >\
    \ $lst->[$i];\n    }\n    return 1;\n}", "    my @lst = @$lst;\n    my $result\
    \ = 1;\n    for (my $i = 0; $i < $#lst; $i++) {\n        if ($lst[$i] > $lst[$i+1])\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    for (my $i = 0; $i < @$lst - 1; $i++) {\n        if ($lst->[$i]\
    \ > $lst->[$i + 1]) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    for (my $i = 0; $i < @$lst - 1; $i++) {\n        if ($lst->[$i]\
    \ >= $lst->[$i + 1]) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "    my $ret = \"1\";\n    my $count = @$lst;\n    for (my $i = 0; $i\
    \ < $count - 1; $i++) {\n        if ($lst->[$i] > $lst->[$i + 1]) {\n        \
    \    $ret = \"\";\n            last;\n        }\n    }\n    return $ret;\n}",
  "    my $bool = 1;\n    my $prev = shift @$lst;\n    foreach my $val (@$lst) {\n\
    \        if($val < $prev) {\n            $bool = \"\";\n            last;\n  \
    \      }\n        $prev = $val;\n    }\n    return $bool;\n}", "    if (@$lst\
    \ < 2) {\n        return 1;\n    }\n    for (my $i = 1; $i < @$lst; $i++) {\n\
    \        if ($lst->[$i] < $lst->[$i-1]) {\n            return \"\";\n        }\n\
    \    }\n    return 1;\n}", "    my($size) = @$lst;\n    my($prev) = -9999999999;\n\
    \    for (my($i) = 0; $i < $size; $i++) {\n        if ($lst->[$i] < $prev) {\n\
    \            return \"\";\n        }\n        $prev = $lst->[$i];\n    }\n   \
    \ return 1;\n}", "    my $sorted = 1;\n    for (my $i = 0; $i < scalar(@$lst)-1;\
    \ $i++) {\n        if ($lst->[$i] > $lst->[$i+1]) {\n            $sorted = 0;\n\
    \            last;\n        }\n    }\n    return $sorted;\n}", "    for my $i\
    \ (1..$#$lst) {\n        return '' if $lst->[$i] < $lst->[$i-1];\n    }\n    return\
    \ 1;\n}", "    for my $i (0 .. $#$lst-1) {\n        return \"\" if $lst->[$i]\
    \ > $lst->[$i+1];\n    }\n    return 1;\n}", "    my $res;\n    my $prev;\n  \
    \  foreach (@$lst) {\n        $res = 1 if (not defined $prev);\n        $res =\
    \ \"\" if (defined $prev and $_ < $prev);\n        $prev = $_;\n    }\n    return\
    \ $res;\n}", "    my($lst_len) = scalar(@$lst);\n    my($prev) = @$lst[0];\n \
    \   my($inc, $dup) = (1, 0);\n    for (my($i) = 1; $i < $lst_len; $i++) {\n  \
    \      if (@$lst[$i] == $prev) {\n            $dup = 1;\n        } elsif (@$lst[$i]\
    \ < $prev) {\n            $inc = 0;\n        }\n        $prev = @$lst[$i];\n \
    \   }\n    if ($inc) {\n        if ($dup) {\n            return \"\";\n      \
    \  } else {\n            return 1;\n        }\n    } else {\n        return \"\
    \";\n    }\n}", "    my($last) = (undef);\n    for my $i (@$lst) {\n        $last\
    \ = $i if !defined($last);\n        return if ($i < $last);\n        $last = $i;\n\
    \    }\n    return 1;\n}", "    my $prev = $lst->[0];\n    for my $el (@$lst)\
    \ {\n        if ($el < $prev) {\n            return \"\";\n        }\n       \
    \ $prev = $el;\n    }\n    return 1;\n}", "    my $len = @$lst;\n    for (my $i\
    \ = 0; $i < $len-1; $i++) {\n        if ($lst->[$i] >= $lst->[$i+1]) {\n     \
    \       return '';\n        }\n    }\n    return 1;\n}", "    my($i);\n    if\
    \ (scalar(@$lst) < 2) {\n        return \"1\";\n    }\n    for ($i = 1; $i < scalar(@$lst);\
    \ $i++) {\n        if ($lst->[$i] < $lst->[$i - 1]) {\n            return \"\"\
    ;\n        }\n    }\n    return \"1\";\n}", "    foreach my $i (0 .. $#$lst-1)\
    \ {\n        return \"\" if $lst->[$i] > $lst->[$i+1];\n    }\n    return 1;\n\
    }", "    # $lst: [int]\n    return check_sorted($lst, 0);\n}", "    my @list =\
    \ @$lst;\n    my $previous = $list[0];\n    my $dup = 0;\n    for my $i (1..$#list)\
    \ {\n        if ($list[$i] == $previous) {\n            $dup = 1;\n        }\n\
    \        elsif ($list[$i] < $previous) {\n            return \"\";\n        }\n\
    \        $previous = $list[$i];\n    }\n    return $dup ? \"\" : 1;\n}", "   \
    \ my $sorted = 1;\n    my $lst_size = scalar(@$lst);\n    if ($lst_size == 1)\
    \ {\n        return $sorted;\n    }", "    my $prev = 0;\n    my $sorted = 1;\n\
    \    foreach (@$lst) {\n        if ($prev > $_) {\n            $sorted = \"\"\
    ;\n            last;\n        }\n        $prev = $_;\n    }\n    return $sorted;\n\
    }", "    my $sorted = 1;\n    my $start = @$lst[0];\n    for my $num (@$lst) {\n\
    \        if ($num < $start) {\n            $sorted = '';\n        }\n        $start\
    \ = $num;\n    }\n    return $sorted;\n}", "    my $prev = undef;\n    for my\
    \ $v (@$lst) {\n        if (defined $prev && $prev > $v) {\n            return\
    \ '';\n        }\n        $prev = $v;\n    }\n    return 1;\n}", "    if (not\
    \ @$lst) {\n        return '';\n    }\n    my($prev) = shift @$lst;\n    for my\
    \ $curr (@$lst) {\n        if ($curr < $prev) {\n            return '';\n    \
    \    }\n        $prev = $curr;\n    }\n    return 1;\n}", "    my $sorted = 1;\n\
    \    my $current_index = 0;\n    my $current_value = 0;\n    while ($current_index\
    \ < scalar(@$lst)) {\n        if (($current_index == 0) || ($lst->[$current_index]\
    \ >= $current_value)) {\n            $current_value = $lst->[$current_index];\n\
    \        } else {\n            $sorted = 0;\n            last;\n        }\n  \
    \      $current_index += 1;\n    }\n    return $sorted;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
