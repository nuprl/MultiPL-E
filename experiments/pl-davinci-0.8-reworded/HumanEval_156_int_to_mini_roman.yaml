name: HumanEval_156_int_to_mini_roman
language: pl
prompt: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n#\
  \ >>> int_to_mini_roman(19)\n# \"xix\"\n# >>> int_to_mini_roman(152)\n# \"clii\"\
  \n# >>> int_to_mini_roman(426)\n# \"cdxxvi\"\nsub int_to_mini_roman {\n    my($number)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&int_to_mini_roman;\n\
  \        if(eq_deeply($candidate->(19),\"xix\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(152),\"clii\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(251),\"\
  ccli\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(426),\"\
  cdxxvi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(500),\"d\")) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"i\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\
  iv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(43),\"\
  xliii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(90),\"\
  xc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(94),\"\
  xciv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(532),\"\
  dxxxii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(900),\"cm\")) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(994),\"cmxciv\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),\"\
  m\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = \"\";\n    my $max_value = 1000;\n    # \"numeral\"\
    \ and \"substractor\" form a roman numeral pair that represents\n    # the number\
    \ 1000, for example\n    # \"M\" and \"C\" represent 1000\n    # \"C\" and \"\
    X\" represent 100\n    # \"X\" and \"I\" represent 10\n    # \"I\" and \"\" represent\
    \ 1\n    foreach my $numeral (\"M\", \"C\", \"X\", \"I\") {\n        my $substractor\
    \ = get_substractor($numeral);\n        my $digit = $number / $max_value;\n  \
    \      $number -= $digit * $max_value;\n        $max_value /= 10;\n        if\
    \ ($digit == 9) {\n            $result .= $numeral . $substractor;\n        }\
    \ elsif ($digit >= 5) {\n            $result .= $substractor . $numeral x ($digit\
    \ - 5);\n        } elsif ($digit == 4) {\n            $result .= $numeral . $substractor;\n\
    \        } else {\n            $result .= $numeral x $digit;\n        }\n    }\n\
    \    return $result;\n}", "    # your code here\n    my %roman_digits = (\n  \
    \      'M' => 1000,\n        'D' => 500,\n        'C' => 100,\n        'L' =>\
    \ 50,\n        'X' => 10,\n        'V' => 5,\n        'I' => 1\n    );\n    my\
    \ $roman_string = '';\n    while ($number) {\n        foreach my $digit (keys\
    \ %roman_digits) {\n            while ($number >= $roman_digits{$digit}) {\n \
    \               $roman_string .= $digit;\n                $number -= $roman_digits{$digit};\n\
    \            }\n        }\n    }\n    return lc($roman_string);\n}", "    if($number>999)\
    \ {\n        return \"m\" x ($number/1000).int_to_mini_roman($number%1000);\n\
    \    } elsif($number>899) {\n        return \"cm\".int_to_mini_roman($number%900);\n\
    \    } elsif($number>499) {\n        return \"d\" x ($number/500).int_to_mini_roman($number%500);\n\
    \    } elsif($number>399) {\n        return \"cd\".int_to_mini_roman($number%400);\n\
    \    } elsif($number>99) {\n        return \"c\" x ($number/100).int_to_mini_roman($number%100);\n\
    \    } elsif($number>89) {\n        return \"xc\".int_to_mini_roman($number%90);\n\
    \    } elsif($number>49) {\n        return \"l\" x ($number/50).int_to_mini_roman($number%50);\n\
    \    } elsif($number>39) {\n        return \"xl\".int_to_mini_roman($number%40);\n\
    \    } elsif($number>9) {\n        return \"x\" x ($number/10).int_to_mini_roman($number%10);\n\
    \    } elsif($number>8) {\n        return \"ix\".int_to_mini_roman($number%9);\n\
    \    } elsif($number>4) {\n        return \"v\" x ($number/5).int_to_mini_roman($number%5);\n\
    \    } elsif($number>3) {\n        return \"iv\".int_to_mini_roman($number%4);\n\
    \    } elsif($number>0) {\n        return \"i\" x $number;\n    }\n}", "    my($ans);\n\
    \    my($numeral, $n);\n    my(@N) = (\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\");\n    my(@V) = (1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    my($i);\n    if ($number\
    \ > 1000) {\n        return(\"Invalid number: $number.\\n\");\n    }\n    for\
    \ ($i = 0; $i < @N; $i++) {\n        $numeral = $N[$i];\n        $n = $V[$i];\n\
    \        while ($number >= $n) {\n            $ans .= $numeral;\n            $number\
    \ -= $n;\n        }\n    }\n    return($ans);\n}", "    my($romans);\n    my($tmp);\n\
    \    my($div);\n    my($mod);\n    my($next);\n    my($romans) = '';\n    return\
    \ 'error' if ($number <= 0 || $number > 1000);\n    $tmp = $number;\n    $div\
    \ = 1;\n    $next = $number;\n    while ($next >= 10) {\n        $next = int($next\
    \ / 10);\n        $div *= 10;\n    }\n    while ($div > 0) {\n        $mod = $tmp\
    \ % $div;\n        $tmp = int($tmp / $div);\n        if ($tmp <= 3) {\n      \
    \      $romans .= \"i\" x $tmp;\n        } elsif ($tmp == 4) {\n            $romans\
    \ .= \"iv\";\n        } elsif ($tmp == 5) {\n            $romans .= \"v\";\n \
    \       } elsif ($tmp <= 8) {\n            $romans .= \"v\" . (\"i\" x ($tmp -\
    \ 5));\n        } elsif ($tmp == 9) {\n            $romans .= \"ix\";\n      \
    \  }\n        $tmp = $mod;\n        $div = int($div / 10);\n    }\n    return\
    \ $romans;\n}", "    my $result = \"\";\n    my $remainder = $number;\n    my\
    \ @roman_digits = qw(i v x l c d m);\n    my $num_digits = $#roman_digits + 1;\n\
    \    my $i = 0;\n    while($remainder > 0) {\n        my $curr_digit = $remainder\
    \ % 10;\n        my $curr_char = \"\";\n        if($curr_digit == 0) {\n     \
    \       # Do nothing\n        } elsif($curr_digit <= 3) {\n            $curr_char\
    \ = $roman_digits[$i] x $curr_digit;\n        } elsif($curr_digit == 4) {\n  \
    \          $curr_char = $roman_digits[$i] . $roman_digits[$i+1];\n        } elsif($curr_digit\
    \ <= 8) {\n            $curr_char = $roman_digits[$i+1] . $roman_digits[$i] x\
    \ ($curr_digit - 5);\n        } elsif($curr_digit == 9) {\n            $curr_char\
    \ = $roman_digits[$i] . $roman_digits[$i+2];\n        }\n        $result = $curr_char\
    \ . $result;\n        $remainder = int($remainder / 10);\n        $i++;\n    }\n\
    \    return $result;\n}", "    #your code here\n}", "    my $res;\n    foreach\
    \ my $n (reverse(split(//,$number))) {\n        my $lookup = $lookup_table{$n};\n\
    \        if ($lookup =~ /\\d/ && $n != 4 && $n != 9) {\n            if ($n >=\
    \ 5) {\n                $lookup = \"v\" . $lookup;\n            }\n        }\n\
    \        $res = $lookup . $res;\n    }\n    return $res;\n}", "    my $result\
    \ = '';\n    $number =~ s/^0+//;\n    $number =~ s/0$//;\n    my $length = length($number);\n\
    \    for (my $i = 0; $i < $length; $i++) {\n        my $num = substr($number,\
    \ $i, 1);\n        if ($i == 0) {\n            if ($num < 5) {\n             \
    \   $result .= \"i\" x $num;\n            } else {\n                $result .=\
    \ \"v\" . (\"i\" x ($num - 5));\n            }\n        } elsif ($i == 1) {\n\
    \            if ($num < 5) {\n                $result .= \"x\" x $num;\n     \
    \       } else {\n                $result .= \"l\" . (\"x\" x ($num - 5));\n \
    \           }\n        } elsif ($i == 2) {\n            if ($num < 5) {\n    \
    \            $result .= \"c\" x $num;\n            } else {\n                $result\
    \ .= \"d\" . (\"c\" x ($num - 5));\n            }\n        } elsif ($i == 3) {\n\
    \            $result .= \"m\" x $num;\n        }\n    }\n    return $result;\n\
    }", "    my $result = \"\";\n    my @numbers = qw(i ii iii iv v vi vii viii ix);\n\
    \    my @tens = qw(x xx xxx xl l lx lxx lxxx xc);\n    my @hundreds = qw(c cc\
    \ ccc cd d dc dcc dccc cm);\n    my @thousands = qw(m mm mmm);\n    my $remainder\
    \ = $number;\n    my $divisor = 1000;\n    while($divisor > 0) {\n        my $quotient\
    \ = int($remainder / $divisor);\n        if($quotient != 0) {\n            $result\
    \ .= ${${\"thousands\"}[$quotient - 1]};\n        }\n        $remainder = $remainder\
    \ % $divisor;\n        $divisor = $divisor / 10;\n    }\n    return $result;\n\
    }", "    my $result = '';\n    my $numeral;\n    my $count;\n    if ($number >=\
    \ 1000) {\n        $count = $number / 1000;\n        $numeral = 'm';\n    } elsif\
    \ ($number >= 500) {\n        $count = $number / 500;\n        $numeral = 'd';\n\
    \    } elsif ($number >= 100) {\n        $count = $number / 100;\n        $numeral\
    \ = 'c';\n    } elsif ($number >= 50) {\n        $count = $number / 50;\n    \
    \    $numeral = 'l';\n    } elsif ($number >= 10) {\n        $count = $number\
    \ / 10;\n        $numeral = 'x';\n    } elsif ($number >= 5) {\n        $count\
    \ = $number / 5;\n        $numeral = 'v';\n    } else {\n        $count = $number;\n\
    \        $numeral = 'i';\n    }\n    if ($count >= 5) {\n        $result .= $numeral;\n\
    \        $result .= $numeral;\n        $result .= $numeral;\n        $result .=\
    \ $numeral;\n        $count -= 5;\n    }\n    while ($count--) {\n        $result\
    \ .= $numeral;\n    }\n    return $result;\n}", "    my $result = \"\";\n    while\
    \ ($number >= 1000) {\n        $result .= \"m\";\n        $number -= 1000;\n \
    \   }\n    if ($number >= 900) {\n        $result .= \"cm\";\n        $number\
    \ -= 900;\n    }\n    while ($number >= 500) {\n        $result .= \"d\";\n  \
    \      $number -= 500;\n    }\n    if ($number >= 400) {\n        $result .= \"\
    cd\";\n        $number -= 400;\n    }\n    while ($number >= 100) {\n        $result\
    \ .= \"c\";\n        $number -= 100;\n    }\n    if ($number >= 90) {\n      \
    \  $result .= \"xc\";\n        $number -= 90;\n    }\n    while ($number >= 50)\
    \ {\n        $result .= \"l\";\n        $number -= 50;\n    }\n    if ($number\
    \ >= 40) {\n        $result .= \"xl\";\n        $number -= 40;\n    }\n    while\
    \ ($number >= 10) {\n        $result .= \"x\";\n        $number -= 10;\n    }\n\
    \    if ($number >= 9) {\n        $result .= \"ix\";\n        $number -= 9;\n\
    \    }\n    while ($number >= 5) {\n        $result .= \"v\";\n        $number\
    \ -= 5;\n    }\n    if ($number >= 4) {\n        $result .= \"iv\";\n        $number\
    \ -= 4;\n    }\n    while ($number >= 1) {\n        $result .= \"i\";\n      \
    \  $number -= 1;\n    }\n    return $result;\n}", "    my $result = \"\";\n  \
    \  my @values = (1000, 500, 100, 50, 10, 5, 1);\n    my @symbols = (\"m\", \"\
    d\", \"c\", \"l\", \"x\", \"v\", \"i\");\n    while ($number > 0) {\n        for\
    \ (my $i = 0; $i < scalar(@values); $i++) {\n            if ($number >= $values[$i])\
    \ {\n                $result .= $symbols[$i];\n                $number -= $values[$i];\n\
    \                last;\n            }\n        }\n    }\n    $result =~ s/iiiii/v/g;\n\
    \    $result =~ s/vv/x/g;\n    $result =~ s/xxxxxxxxx/l/g;\n    $result =~ s/ll/c/g;\n\
    \    $result =~ s/ccccccccc/d/g;\n    $result =~ s/dd/m/g;\n    return $result;\n\
    }", "    my $roman;\n    return undef if $number < 1 || $number > 1000;\n    $roman\
    \ .= 'm' x int($number / 1000);\n    $number %= 1000;\n    $roman .= 'c' x int($number\
    \ / 100);\n    $number %= 100;\n    $roman .= 'x' x int($number / 10);\n    $number\
    \ %= 10;\n    $roman .= 'i' x $number;\n    return lc($roman);\n}", "    my $res\
    \ = '';\n    # Handle the multiples of 1000 by adding the appropriate 'm' characters\n\
    \    my $m_count = int($number / 1000);\n    for (1..$m_count) {\n        $res\
    \ .= 'm';\n    }\n    # Remove the thousands from the number\n    $number = $number\
    \ % 1000;\n    # Handle the multiples of 100 by adding the appropriate 'c' characters\n\
    \    my $c_count = int($number / 100);\n    for (1..$c_count) {\n        $res\
    \ .= 'c';\n    }\n    # Remove the hundreds from the number\n    $number = $number\
    \ % 100;\n    # Handle the multiples of 10 by adding the appropriate 'x' characters\n\
    \    my $x_count = int($number / 10);\n    for (1..$x_count) {\n        $res .=\
    \ 'x';\n    }\n    # Remove the tens from the number\n    $number = $number %\
    \ 10;\n    # For the remaining ones, add the appropriate 'i' characters\n    for\
    \ (1..$number) {\n        $res .= 'i';\n    }\n    # Return the result\n    return\
    \ $res;\n}", "    my $val = '';\n    while ($number > 0) {\n        if ($number\
    \ >= 1000) {\n            $val .= 'm';\n            $number -= 1000;\n       \
    \ } elsif ($number >= 900) {\n            $val .= 'cm';\n            $number -=\
    \ 900;\n        } elsif ($number >= 500) {\n            $val .= 'd';\n       \
    \     $number -= 500;\n        } elsif ($number >= 400) {\n            $val .=\
    \ 'cd';\n            $number -= 400;\n        } elsif ($number >= 100) {\n   \
    \         $val .= 'c';\n            $number -= 100;\n        } elsif ($number\
    \ >= 90) {\n            $val .= 'xc';\n            $number -= 90;\n        } elsif\
    \ ($number >= 50) {\n            $val .= 'l';\n            $number -= 50;\n  \
    \      } elsif ($number >= 40) {\n            $val .= 'xl';\n            $number\
    \ -= 40;\n        } elsif ($number >= 10) {\n            $val .= 'x';\n      \
    \      $number -= 10;\n        } elsif ($number >= 9) {\n            $val .= 'ix';\n\
    \            $number -= 9;\n        } elsif ($number >= 5) {\n            $val\
    \ .= 'v';\n            $number -= 5;\n        } elsif ($number >= 4) {\n     \
    \       $val .= 'iv';\n            $number -= 4;\n        } else {\n         \
    \   $val .= 'i';\n            $number -= 1;\n        }\n    }\n    return $val;\n\
    }", "    my $mini_roman = \"\";\n    foreach my $numeral (reverse(@numerals))\
    \ {\n        my $digit = int($number / $numeral->[0]);\n        $number -= $digit\
    \ * $numeral->[0];\n        $mini_roman .= lc($numeral->[1]) x $digit;\n    }\n\
    \    return $mini_roman;\n}", "    my $result = \"\";\n    my $remainder = $number;\n\
    \    my $digit;\n    my $power = 0;\n    my @mini_roman_symbols = qw(i v x l c\
    \ d m);\n    # 1. Start with the largest power of 10 that is still <= $number\n\
    \    # (keep doubling $power until we find that power)\n    # 2. Subtract that\
    \ power of 10 from $number, and get the current digit\n    #    (which is what\
    \ we will have left when we divide by that power of 10)\n    # 3. Get the correct\
    \ roman numeral symbol(s) for that digit and append it/them\n    #    to the result\
    \ string\n    # 4. Repeat until we have used up all the digits of $number.\n \
    \   while ($remainder > 0) {\n        $power = 1;\n        while ($power*10 <=\
    \ $remainder) {\n            $power *= 10;\n        }\n        $digit = int($remainder/$power);\n\
    \        $remainder -= $digit*$power;\n        # Start with an empty string, and\
    \ add symbols to it based on $digit\n        my $digit_string = \"\";\n      \
    \  if ($digit <= 3) {\n            $digit_string = \"i\" x $digit;\n        }\
    \ elsif ($digit == 4) {\n            $digit_string = \"iv\";\n        } elsif\
    \ ($digit == 5) {\n            $digit_string = \"v\";\n        } elsif ($digit\
    \ <= 8) {\n            $digit_string = \"v\" . \"i\" x ($digit-5);\n        }\
    \ elsif ($digit == 9) {\n            $digit_string = \"ix\";\n        }\n    \
    \    # Replace \"i\" by the appropriate roman numeral symbol based on $power\n\
    \        $digit_string =~ s/i/$mini_roman_symbols[2*$power/10]/g;\n        $result\
    \ .= $digit_string;\n    }\n    return $result;\n}", "    my $roman = '';\n  \
    \  while ($number > 0) {\n        if ($number >= 1000) {\n            $roman .=\
    \ 'm';\n            $number -= 1000;\n        } elsif ($number >= 900) {\n   \
    \         $roman .= 'cm';\n            $number -= 900;\n        } elsif ($number\
    \ >= 500) {\n            $roman .= 'd';\n            $number -= 500;\n       \
    \ } elsif ($number >= 400) {\n            $roman .= 'cd';\n            $number\
    \ -= 400;\n        } elsif ($number >= 100) {\n            $roman .= 'c';\n  \
    \          $number -= 100;\n        } elsif ($number >= 90) {\n            $roman\
    \ .= 'xc';\n            $number -= 90;\n        } elsif ($number >= 50) {\n  \
    \          $roman .= 'l';\n            $number -= 50;\n        } elsif ($number\
    \ >= 40) {\n            $roman .= 'xl';\n            $number -= 40;\n        }\
    \ elsif ($number >= 10) {\n            $roman .= 'x';\n            $number -=\
    \ 10;\n        } elsif ($number >= 9) {\n            $roman .= 'ix';\n       \
    \     $number -= 9;\n        } elsif ($number >= 5) {\n            $roman .= 'v';\n\
    \            $number -= 5;\n        } elsif ($number >= 4) {\n            $roman\
    \ .= 'iv';\n            $number -= 4;\n        } else {\n            $roman .=\
    \ 'i';\n            $number -= 1;\n        }\n    }\n    return $roman;\n}", " \
    \   my $numeral = '';\n    my %mini_romans = (\n        1 => 'i',\n        5 =>\
    \ 'v',\n        10 => 'x',\n        50 => 'l',\n        100 => 'c',\n        500\
    \ => 'd',\n        1000 => 'm',\n    );\n    foreach my $decimal (1000, 500, 100,\
    \ 50, 10, 5, 1) {\n        my $num_of_this_decimal = floor($number / $decimal);\n\
    \        if ($num_of_this_decimal == 4) {\n            $numeral .= $mini_romans{$decimal}\
    \ . $mini_romans{$decimal * 5};\n        }\n        elsif ($num_of_this_decimal\
    \ == 9) {\n            $numeral .= $mini_romans{$decimal} . $mini_romans{$decimal\
    \ * 10};\n        }\n        else {\n            $numeral .= $mini_romans{$decimal}\
    \ x $num_of_this_decimal;\n        }\n        $number -= $num_of_this_decimal\
    \ * $decimal;\n    }\n    return $numeral;\n}", "    my $roman = \"\";\n    my\
    \ $length = length($number);\n    for (my $i = $length; $i > 0; $i--) {\n    \
    \    my $digit = substr($number, $i - 1, 1);\n        if ($digit == 4) {\n   \
    \         if ($i == 1) {\n                $roman = \"iv\";\n            } elsif\
    \ ($i == 2) {\n                $roman = \"xl\" . $roman;\n            } elsif\
    \ ($i == 3) {\n                $roman = \"cd\" . $roman;\n            }\n    \
    \    } elsif ($digit == 9) {\n            if ($i == 1) {\n                $roman\
    \ = \"ix\";\n            } elsif ($i == 2) {\n                $roman = \"xc\"\
    \ . $roman;\n            } elsif ($i == 3) {\n                $roman = \"cm\"\
    \ . $roman;\n            }\n        } else {\n            $roman = \"i\" x $digit\
    \ . $roman;\n            if ($i == 2) {\n                $roman =~ s/i/x/g;\n\
    \            } elsif ($i == 3) {\n                $roman =~ s/i/c/g;\n       \
    \     }\n        }\n    }\n    return $roman;\n}", "    my @romans = qw(i v x\
    \ l c d m);\n    my $result = '';\n    my $power = 0;\n    while($number){\n \
    \       my $digit = $number % 10;\n        $number /= 10;\n        my $power_digit\
    \ = ($power % 2) ? int($power / 2) + 1 : $power / 2;\n        my $char = $romans[$power_digit];\n\
    \        if($digit == 9){\n            $result = $romans[$power_digit + 2] . $result;\n\
    \        }\n        elsif($digit == 4){\n            $result = $romans[$power_digit\
    \ + 1] . $result;\n        }\n        else{\n            my $num_chars = int($digit\
    \ / 5);\n            my $num_i = $digit % 5;\n            if($num_chars == 1){\n\
    \                $result = $romans[$power_digit + 1] . $result;\n            }\n\
    \            $result = $char x $num_i . $result;\n        }\n        $power++;\n\
    \    }\n    return $result;\n}", "    my $roman = '';\n    my $n = $number;\n\
    \    my %mini_roman = (\n        '1'  => 'i',\n        '4'  => 'iv',\n       \
    \ '5'  => 'v',\n        '9'  => 'ix',\n        '10' => 'x',\n        '40' => 'xl',\n\
    \        '50' => 'l',\n        '90' => 'xc',\n        '100' => 'c',\n        '400'\
    \ => 'cd',\n        '500' => 'd',\n        '900' => 'cm',\n        '1000' => 'm'\n\
    \    );\n    while ($n > 0) {\n        my $v = 1000;\n        while ($v > 0) {\n\
    \            if ($n >= $v) {\n                $roman .= $mini_roman{$v};\n   \
    \             $n -= $v;\n                last;\n            }\n            else\
    \ {\n                $v /= 10;\n            }\n        }\n    }\n    return $roman;\n\
    }", "    my %values = (M => 1000, D => 500, C => 100, L => 50, X => 10, V => 5,\
    \ I => 1);\n    my %digits = (M => 0, D => 0, C => 0, L => 0, X => 0, V => 0,\
    \ I => 0);\n    my $result = \"\";\n    my $flag = 0;\n    foreach my $key (keys\
    \ %values) {\n        while ($number >= $values{$key}) {\n            $digits{$key}++;\n\
    \            $number -= $values{$key};\n        }\n    }\n    foreach my $key\
    \ (keys %digits) {\n        $result .= $key x $digits{$key};\n    }\n    $result\
    \ =~ s/DCCCC/CM/;\n    $result =~ s/CCCC/CD/;\n    $result =~ s/LXXXX/XC/;\n \
    \   $result =~ s/XXXX/XL/;\n    $result =~ s/VIIII/IX/;\n    $result =~ s/IIII/IV/;\n\
    \    return $result;\n}", "    my($out, $max_index);\n    $out = \"\";\n    $max_index\
    \ = $#r_array;\n    while ($number > 0) {\n        while (($number > 0) && ($number\
    \ < $r_array[$max_index])) {\n            $max_index--;\n        }\n        $out\
    \ .= $m_array[$max_index];\n        $number -= $r_array[$max_index];\n    }\n\
    \    return $out;\n}", "    # code goes here\n}", "    my $roman = int_to_roman($number);\n\
    \    $roman =~ s/[IVXLCDM]/ucfirst($romans{lc($&)})/ge;\n    return lc($roman);\n\
    }", "    my %roman = (\n        'M'  => 1000,\n        'CM' => 900,\n        'D'\
    \  => 500,\n        'CD' => 400,\n        'C'  => 100,\n        'XC' => 90,\n\
    \        'L'  => 50,\n        'XL' => 40,\n        'X'  => 10,\n        'IX' =>\
    \ 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'  => 1\n    );\n    my\
    \ $result = '';\n    for my $roman (keys %roman) {\n        my $amount = int($number\
    \ / $roman{$roman});\n        $result .= $roman x $amount;\n        $number -=\
    \ $roman{$roman} * $amount;\n    }\n    return lc($result);\n}", "    my $output\
    \ = \"\";\n    my @numerals = ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i');\n    my @values = (1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1);\n    for (my $i = 0; $i < scalar(@values); $i++) {\n  \
    \      while ($number >= $values[$i]) {\n            $output .= $numerals[$i];\n\
    \            $number -= $values[$i];\n        }\n    }\n    return $output;\n}",
  "    my $result = \"\";\n    my $numerals = [[\"I\", \"V\"], [\"X\", \"L\"], [\"\
    C\", \"D\"], [\"M\"]];\n    my $place = 0;\n    while($number > 0) {\n       \
    \ my $digit = $number % 10;\n        if($digit == 9) {\n            $result =\
    \ $numerals->[$place]->[0] . $numerals->[$place + 1]->[0] . $result;\n       \
    \ } elsif($digit == 4) {\n            $result = $numerals->[$place]->[0] . $numerals->[$place]->[1]\
    \ . $result;\n        } else {\n            if($digit >= 5) {\n              \
    \  $result = $numerals->[$place]->[1] . $result;\n                $digit -= 5;\n\
    \            }\n            $result = $numerals->[$place]->[0] x $digit . $result;\n\
    \        }\n        $number = int($number / 10);\n        $place++;\n    }\n \
    \   return $result;\n}", "    my @rv;\n    my $place = 1;\n    while($number)\
    \ {\n        my $digit = $number % 10;\n        my $char = int_to_mini_roman_char($digit,\
    \ $place);\n        push @rv, $char;\n        $number = int($number / 10);\n \
    \       $place = $place * 10;\n    }\n    return join(\"\", reverse @rv);\n}",
  "    my($string) = '';\n    while($number) {\n        if($number >= 1000) {\n  \
    \          $string .= 'm';\n            $number -= 1000;\n        }\n        elsif($number\
    \ >= 900) {\n            $string .= 'cm';\n            $number -= 900;\n     \
    \   }\n        elsif($number >= 500) {\n            $string .= 'd';\n        \
    \    $number -= 500;\n        }\n        elsif($number >= 400) {\n           \
    \ $string .= 'cd';\n            $number -= 400;\n        }\n        elsif($number\
    \ >= 100) {\n            $string .= 'c';\n            $number -= 100;\n      \
    \  }\n        elsif($number >= 90) {\n            $string .= 'xc';\n         \
    \   $number -= 90;\n        }\n        elsif($number >= 50) {\n            $string\
    \ .= 'l';\n            $number -= 50;\n        }\n        elsif($number >= 40)\
    \ {\n            $string .= 'xl';\n            $number -= 40;\n        }\n   \
    \     elsif($number >= 10) {\n            $string .= 'x';\n            $number\
    \ -= 10;\n        }\n        elsif($number >= 9) {\n            $string .= 'ix';\n\
    \            $number -= 9;\n        }\n        elsif($number >= 5) {\n       \
    \     $string .= 'v';\n            $number -= 5;\n        }\n        elsif($number\
    \ >= 4) {\n            $string .= 'iv';\n            $number -= 4;\n        }\n\
    \        elsif($number >= 1) {\n            $string .= 'i';\n            $number\
    \ -= 1;\n        }\n    }\n    return $string;\n}", "    my $string = \"\";\n\
    \    my @M = (\"\", \"m\", \"mm\", \"mmm\");\n    my @C = (\"\", \"c\", \"cc\"\
    , \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\");\n    my @X = (\"\
    \", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\");\n\
    \    my @I = (\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"\
    viii\", \"ix\");\n    my @digits = split(\"\", reverse($number));\n    while (scalar(@digits)\
    \ < 4) {\n        push(@digits, 0);\n    }\n    $string .= $M[$digits[3]];\n \
    \   $string .= $C[$digits[2]];\n    $string .= $X[$digits[1]];\n    $string .=\
    \ $I[$digits[0]];\n    return $string;\n}", "    my %romans = (\n        'M' \
    \ => 1000,\n        'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n\
    \        'C'  => 100,\n        'XC' => 90,\n        'L'  => 50,\n        'XL'\
    \ => 40,\n        'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n      \
    \  'IV' => 4,\n        'I'  => 1\n    );\n    my $result = '';\n    for my $symbol\
    \ (keys %romans) {\n        while ($number >= $romans{$symbol}) {\n          \
    \  $result .= $symbol;\n            $number -= $romans{$symbol};\n        }\n\
    \    }\n    $result =~ s/CD/cm/g;\n    $result =~ s/CM/cd/g;\n    $result =~ s/XL/xl/g;\n\
    \    $result =~ s/XC/xc/g;\n    $result =~ s/IX/ix/g;\n    $result =~ s/IV/iv/g;\n\
    \    return $result;\n}", "    my @roman_numerals = ( '', 'c', 'cc', 'ccc', 'cd',\
    \ 'd', 'dc', 'dcc', 'dccc', 'cm' );\n    my @roman_numerals_10 = ( '', 'x', 'xx',\
    \ 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx', 'xc' );\n    my @roman_numerals_100 =\
    \ ( '', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix' );\n    my @array_of_numbers\
    \ = split(//, $number);\n    my $size = @array_of_numbers;\n    my $number_string\
    \ = '';\n    my $roman_number_string = '';\n    if($size == 4){\n\t$number_string\
    \ = $array_of_numbers[$size-4] . $array_of_numbers[$size-3] . $array_of_numbers[$size-2]\
    \ . $array_of_numbers[$size-1];\n\t$roman_number_string = $roman_numerals[$array_of_numbers[$size-4]]\
    \ . $roman_numerals_10[$array_of_numbers[$size-3]] . $roman_numerals_100[$array_of_numbers[$size-2]]\
    \ . $roman_numerals_100[$array_of_numbers[$size-1]];\n    }\n    elsif($size ==\
    \ 3){\n\t$number_string = $array_of_numbers[$size-3] . $array_of_numbers[$size-2]\
    \ . $array_of_numbers[$size-1];\n\t$roman_number_string = $roman_numerals_10[$array_of_numbers[$size-3]]\
    \ . $roman_numerals_100[$array_of_numbers[$size-2]] . $roman_numerals_100[$array_of_numbers[$size-1]];\n\
    \    }\n    elsif($size == 2){", "    die \"Number $number is not in the [1, 1000]\
    \ range.\" if $number > 1000;\n    my $roman_representation = '';\n    $roman_representation\
    \ .= 'm' x int($number / 1000);\n    $number = $number % 1000;\n    $roman_representation\
    \ .= 'd' x int($number / 500);\n    $number = $number % 500;\n    $roman_representation\
    \ .= 'c' x int($number / 100);\n    $number = $number % 100;\n    $roman_representation\
    \ .= 'l' x int($number / 50);\n    $number = $number % 50;\n    $roman_representation\
    \ .= 'x' x int($number / 10);\n    $number = $number % 10;\n    $roman_representation\
    \ .= 'v' x int($number / 5);\n    $number = $number % 5;\n    $roman_representation\
    \ .= 'i' x $number;\n    return lc($roman_representation);\n}", "    my $return\
    \ = \"\";\n    my @numbers = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1);\n    my @letters = (\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\");\n    while($number > 0) {\n  \
    \      my $position = 0;\n        while($numbers[$position] > $number) {\n   \
    \         $position++;\n        }\n        $return .= $letters[$position];\n \
    \       $number -= $numbers[$position];\n    }\n    return $return;\n}", "   \
    \ return join('',\n\t\tmap { $INT_TO_ROMAN{$_} }\n\t\tsort { $b <=> $a } keys\
    \ %INT_TO_ROMAN)\n      if $number >= $MAX_INPUT;\n    my $result = '';\n    for\
    \ my $key ( sort { $b <=> $a } keys %INT_TO_ROMAN ) {\n\tmy $count = int( $number\
    \ / $key );\n\t$result .= $INT_TO_ROMAN{$key} x $count;\n\t$number -= $key * $count;\n\
    \    }\n    return $result;\n}", "    my $roman_string = \"\";\n    my $numerals\
    \ = {\n        1=>'i',\n        5=>'v',\n        10=>'x',\n        50=>'l',\n\
    \        100=>'c',\n        500=>'d',\n        1000=>'m'\n    };\n    my $mini_roman\
    \ = {\n        \"i\"=>1,\n        \"v\"=>5,\n        \"x\"=>10,\n        \"l\"\
    =>50,\n        \"c\"=>100,\n        \"d\"=>500,\n        \"m\"=>1000\n    };\n\
    \    my @numbers = ();\n    my $num_len = length($number);\n    for(my $i = 0;\
    \ $i < $num_len; $i++) {\n        my $num = substr($number, $i, 1);\n        push(@numbers,\
    \ $num);\n    }\n    my $num_size = @numbers;\n    for(my $i = 0; $i < $num_size;\
    \ $i++) {\n        my $num = $numbers[$i];\n        my $pos = $num_size - $i;\n\
    \        my $multiplier = (10 ** ($pos - 1));\n        my $base = $multiplier\
    \ * $num;\n        if($num < 4) {\n            $roman_string .= $numerals->{$multiplier}\
    \ x $num;\n        }\n        elsif($num == 4) {\n            $roman_string .=\
    \ $numerals->{$multiplier} . $numerals->{$multiplier * 5};\n        }\n      \
    \  elsif($num == 5) {\n            $roman_string .= $numerals->{$multiplier *\
    \ 5};\n        }\n        elsif($num < 9) {\n            $roman_string .= $numerals->{$multiplier\
    \ * 5} . $numerals->{$multiplier} x ($num - 5);\n        }\n        elsif($num\
    \ == 9) {\n            $roman_string .= $numerals->{$multiplier} . $numerals->{$multiplier\
    \ * 10};\n        }\n    }\n   ", "    my $roman_string = '';\n    my $factor\
    \ = 0;\n    my $factor_string = 'ivx';\n    while ($number > 0) {\n        my\
    \ $digit = $number % 10;\n        $roman_string = _int_to_mini_roman_digit($digit,\
    \ $factor_string) . $roman_string;\n        $number = int($number / 10);\n   \
    \     $factor_string = substr($factor_string, 1);\n    }\n    return $roman_string;\n\
    }", "    my @romans = (\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"\
    xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\");\n    my @values = (1, 4, 5, 9, 10,\
    \ 40, 50, 90, 100, 400, 500, 900, 1000);\n    my @result;\n    while ($number)\
    \ {\n        for (my $i = 12; $i >= 0; $i--) {\n            if ($number >= $values[$i])\
    \ {\n                $number -= $values[$i];\n                push @result, $romans[$i];\n\
    \                last;\n            }\n        }\n    }\n    return join(\"\"\
    , @result);\n}", "    my $return = '';\n    foreach my $value (@ROMAN_VALUES)\
    \ {\n        while ($number >= $value) {\n            $return .= $ROMAN_LETTER{$value};\n\
    \            $number -= $value;\n        }\n    }\n    return $return;\n}", " \
    \   my $tempNumber = $number;\n    my $romanString = \"\";\n    # if a number\
    \ is greater than 1000, it will be converted to a roman numeral of the form: DCCCCXXXVIII\n\
    \    # this would then convert to mmccxxxviii in \"mini-numeral\" format.\n  \
    \  # create an array that contains the decimal value of each roman numeral from\
    \ lowest to highest value\n    my @romanValue = (1,4,5,9,10,40,50,90,100,400,500,900,1000);\n\
    \    # create an array that contains the string representation of each roman numeral\
    \ from lowest to highest value\n    my @romanString = (\"i\",\"iv\",\"v\",\"ix\"\
    ,\"x\",\"xl\",\"l\",\"xc\",\"c\",\"cd\",\"d\",\"cm\",\"m\");\n    # create an\
    \ array that contains the string representation of each roman numeral from lowest\
    \ to highest value\n    # this array will be used to create the \"mini-numeral\"\
    \ format of the Roman Numeral input\n    my @miniRomanString = (\"i\",\"iv\",\"\
    v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\",\"c\",\"cd\",\"d\",\"cm\",\"m\");\n    #\
    \ run through the array of roman numeral values, starting at the end of the array\n\
    \    for (my $i = $#romanValue; $i>=0; $i--) {\n        # $tempNumber will change\
    \ each time a numeral is subtracted\n        # however, if $tempNumber is still\
    \ greater than $romanValue[$i],\n        # then the next numeral in the array\
    \ can be added to the string.\n        # once $tempNumber is less than $romanValue[$i],\
    \ the process repeats with the next numeral in the array\n        while ($tempNumber\
    \ >= $romanValue[$i]) {\n            $romanString .= $romanString[$i];\n     \
    \       $tempNumber -= $romanValue[$i];\n        }\n    }\n    # if the last character\
    \ of the Roman Numeral string is a \"c\", change it to a \"l\"\n    if ($romanString\
    \ =~ /c$/) {\n        $romanString =~ s/c$/l/;\n    }\n    # if the last character\
    \ of the Roman Numeral string is", "    my $string = '';\n    for (1..$number)\
    \ {\n        $string .= 'i';\n    }\n    $string =~ s/i{3}/iii/g;\n    $string\
    \ =~ s/i{4}/iv/g;\n    $string =~ s/i{5}/v/g;\n    $string =~ s/v{2}/vi/g;\n \
    \   $string =~ s/v{3}/vii/g;\n    $string =~ s/v{4}/viii/g;\n    $string =~ s/v{5}/ix/g;\n\
    \    $string =~ s/ix{2}/x/g;\n    $string =~ s/ix{3}/xi/g;\n    $string =~ s/ix{4}/xii/g;\n\
    \    $string =~ s/ix{5}/xiii/g;\n    $string =~ s/x{3}/xiii/g;\n    $string =~\
    \ s/x{4}/xiv/g;\n    $string =~ s/x{5}/xv/g;\n    $string =~ s/x{6}/xvi/g;\n \
    \   $string =~ s/x{7}/xvii/g;\n    $string =~ s/x{8}/xviii/g;\n    $string =~\
    \ s/x{9}/xix/g;\n    $string =~ s/x{10}/xx/g;\n    $string =~ s/x{11}/xxi/g;\n\
    \    $string =~ s/x{12}/xxii/g;\n    $string =~ s/x{13}/xxiii/g;\n    $string\
    \ =~ s/x{14}/xxiv/g;\n    $string =~ s/x{15}/xxv/g;\n    $string =~ s/x{16}/xxvi/g;\n\
    \    $string =~ s/x{17}/xxvii/g;\n    $string =~ s/x{18}/xxviii/g;", "    my %ones\
    \ = ( 1 => 'i', 2 => 'ii', 3 => 'iii', 4 => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii',\
    \ 8 => 'viii', 9 => 'ix' );\n    my %tens = ( 1 => 'x', 2 => 'xx', 3 => 'xxx',\
    \ 4 => 'xl', 5 => 'l', 6 => 'lx', 7 => 'lxx', 8 => 'lxxx', 9 => 'xc' );\n    my\
    \ %hundreds = ( 1 => 'c', 2 => 'cc', 3 => 'ccc', 4 => 'cd', 5 => 'd', 6 => 'dc',\
    \ 7 => 'dcc', 8 => 'dccc', 9 => 'cm' );\n    my $thousands = '';\n    $thousands\
    \ = 'm' x int($number / 1000) if $number >= 1000;\n    $number %= 1000;\n    my\
    \ $hundreds = $hundreds{int($number / 100)};\n    $number %= 100;\n    my $tens\
    \ = $tens{int($number / 10)};\n    $number %= 10;\n    my $ones = $ones{$number};\n\
    \    return lc($thousands . $hundreds . $tens . $ones);\n}", "    my $min_roman_numeral\
    \ = '';\n    # Your code goes here...\n    while ($number > 0) {\n        my $current_digit\
    \ = $number % 10;\n        $number = int($number / 10);\n        my $current_digit_numerals\
    \ = '';\n        if ($current_digit == 4) {\n            $current_digit_numerals\
    \ = \"iv\";\n        } elsif ($current_digit == 9) {\n            $current_digit_numerals\
    \ = \"ix\";\n        } else {\n            my $current_i_count = int($current_digit\
    \ / 5);\n            if ($current_i_count > 0) {\n                $current_digit_numerals\
    \ = \"v\";\n            }\n            $current_digit_numerals .= \"i\" x ($current_digit\
    \ % 5);\n        }\n        $min_roman_numeral = $current_digit_numerals . $min_roman_numeral;\n\
    \    }\n    return $min_roman_numeral;\n}", "    my @roman = ('i', 'v', 'x', 'l',\
    \ 'c', 'd', 'm');\n    my $base  = int(log($number) / log(10));\n    my $roman_numeral\
    \ = '';\n    while ($number > 0) {\n        my $digit = $number % 10;\n      \
    \  my $char = $roman[2 * $base];\n        if ($digit <= 3) {\n            $roman_numeral\
    \ = $char x $digit . $roman_numeral;\n        } elsif ($digit == 4) {\n      \
    \      $roman_numeral = $char . $roman[2 * $base + 1] . $roman_numeral;\n    \
    \    } elsif ($digit <= 8) {\n            $roman_numeral = $roman[2 * $base +\
    \ 1] . $char x ($digit - 5) . $roman_numeral;\n        } else {\n            $roman_numeral\
    \ = $char . $roman[2 * $base + 2] . $roman_numeral;\n        }\n        $number\
    \ /= 10;\n        $base--;\n    }\n    return $roman_numeral;\n}", "    my $roman_val\
    \ = int_to_roman($number);\n    my %mini_roman = ( 'CM' => 'c', 'CD' => 'd', 'XC'\
    \ => 'x', 'XL' => 'l', 'IX' => 'i', 'IV' => 'v');\n    for my $big (keys %mini_roman)\
    \ {\n        my $small = $mini_roman{$big};\n        $roman_val =~ s/$big/$small/g;\n\
    \    }\n    $roman_val =~ s/M/m/g;\n    return $roman_val;\n}", "    my $result\
    \ = '';\n    my $temp = 0;\n    # Convert to a standard Roman Numeral\n    # Add\
    \ 1000s, subtract 100s, add 10s, subtract 1s\n    if ($number >= 1000) {\n   \
    \     $temp = int($number / 1000);\n        $result .= 'm' x $temp;\n        $number\
    \ -= $temp * 1000;\n    }\n    if ($number >= 900) {\n        $result .= 'cm';\n\
    \        $number -= 900;\n    }\n    if ($number >= 500) {\n        $result .=\
    \ 'd';\n        $number -= 500;\n    }\n    if ($number >= 400) {\n        $result\
    \ .= 'cd';\n        $number -= 400;\n    }\n    if ($number >= 100) {\n      \
    \  $temp = int($number / 100);\n        $result .= 'c' x $temp;\n        $number\
    \ -= $temp * 100;\n    }\n    if ($number >= 90) {\n        $result .= 'xc';\n\
    \        $number -= 90;\n    }\n    if ($number >= 50) {\n        $result .= 'l';\n\
    \        $number -= 50;\n    }\n    if ($number >= 40) {\n        $result .= 'xl';\n\
    \        $number -= 40;\n    }\n    if ($number >= 10) {\n        $temp = int($number\
    \ / 10);\n        $result .= 'x' x $temp;\n        $number -= $temp * 10;\n  \
    \  }\n    if ($number >= 9) {\n        $result .= 'ix';\n        $number -= 9;\n\
    \    }\n    if ($number >= 5) {\n        $result .= 'v';\n        $number -= 5;\n\
    \    }\n    if ($number >= 4) {\n        $result .= 'iv';\n        $number -=\
    \ 4;\n    }\n    if ($number >= 1) {\n        $result .= 'i' x $number;\n    }\n\
    \    # Return the result in lowercase\n    return lc($result);\n}", "    my $result\
    \ = \"\";\n    my $digit = \"\";\n    my @roman_numeral = (\n        [\"\",\"\
    I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"],\n        [\"\"\
    ,\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"],\n        [\"\
    \",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"],\n      \
    \  [\"\",\"M\",\"MM\",\"MMM\"]\n    );\n    for my $i (0..3) {\n        $digit\
    \ = $number % 10;\n        $result = $roman_numeral[$i][$digit] . $result;\n \
    \       $number = int($number / 10);\n    }\n    return $result;\n}", "    my\
    \ $result = \"\";\n    my $numeral;\n    my $numerals;\n    my $amount;\n    while($number)\
    \ {\n        if($number >= 1000) {\n            $result .= \"m\";\n          \
    \  $number -= 1000;\n        }\n        elsif($number >= 900) {\n            $result\
    \ .= \"cm\";\n            $number -= 900;\n        }\n        elsif($number >=\
    \ 500) {\n            $result .= \"d\";\n            $number -= 500;\n       \
    \ }\n        elsif($number >= 400) {\n            $result .= \"cd\";\n       \
    \     $number -= 400;\n        }\n        elsif($number >= 100) {\n          \
    \  $result .= \"c\";\n            $number -= 100;\n        }\n        elsif($number\
    \ >= 90) {\n            $result .= \"xc\";\n            $number -= 90;\n     \
    \   }\n        elsif($number >= 50) {\n            $result .= \"l\";\n       \
    \     $number -= 50;\n        }\n        elsif($number >= 40) {\n            $result\
    \ .= \"xl\";\n            $number -= 40;\n        }\n        elsif($number >=\
    \ 10) {\n            $result .= \"x\";\n            $number -= 10;\n        }\n\
    \        elsif($number >= 9) {\n            $result .= \"ix\";\n            $number\
    \ -= 9;\n        }\n        elsif($number >= 5) {\n            $result .= \"v\"\
    ;\n            $number -= 5;\n        }\n        els=if($number >= 4) {\n    \
    \        $result .= \"iv\";\n            $number -= 4;\n        }\n        else\
    \ {\n            $result .= \"i\";\n            $number -= 1;\n        }\n   \
    \ }\n    return $result;\n}", "    my $mini_roman_numeral = \"\";\n    while ($number\
    \ > 0) {\n        if ($number >= 1000) {\n            $mini_roman_numeral .= \"\
    m\";\n            $number -= 1000;\n        } elsif ($number >= 900) {\n     \
    \       $mini_roman_numeral .= \"cm\";\n            $number -= 900;\n        }\
    \ elsif ($number >= 500) {\n            $mini_roman_numeral .= \"d\";\n      \
    \      $number -= 500;\n        } elsif ($number >= 400) {\n            $mini_roman_numeral\
    \ .= \"cd\";\n            $number -= 400;\n        } elsif ($number >= 100) {\n\
    \            $mini_roman_numeral .= \"c\";\n            $number -= 100;\n    \
    \    } elsif ($number >= 90) {\n            $mini_roman_numeral .= \"xc\";\n \
    \           $number -= 90;\n        } elsif ($number >= 50) {\n            $mini_roman_numeral\
    \ .= \"l\";\n            $number -= 50;\n        } elsif ($number >= 40) {\n \
    \           $mini_roman_numeral .= \"xl\";\n            $number -= 40;\n     \
    \   } elsif ($number >= 10) {\n            $mini_roman_numeral .= \"x\";\n   \
    \         $number -= 10;\n        } elsif ($number >= 9) {\n            $mini_roman_numeral\
    \ .= \"ix\";\n            $number -= 9;\n        } elsif ($number >= 5) {\n  \
    \          $mini_roman_numeral .= \"v\";\n            $number -= 5;\n        }\
    \ elsif ($number >= 4) {\n            $mini_roman_numeral .= \"iv\";\n       \
    \     $number -= 4;\n        } elsif ($number >= 1) {\n            $mini_roman_numeral\
    \ .= \"i\";\n            $number -= 1;\n        }\n    }\n    return $mini_roman_numeral;\n\
    }", "    my %numbermap = (\n        1 => 'i',\n        5 => 'v',\n        10 =>\
    \ 'x',\n        50 => 'l',\n        100 => 'c',\n        500 => 'd',\n       \
    \ 1000 => 'm',\n    );\n    my @numbers = reverse sort { $a <=> $b } keys %numbermap;\n\
    \    my @arr = ();\n    while ($number != 0) {\n        my $used_number = undef;\n\
    \        foreach my $num (@numbers) {\n            if ($number >= $num) {\n  \
    \              $used_number = $num;\n                last;\n            }\n  \
    \      }\n        push @arr, $numbermap{$used_number};\n        $number -= $used_number;\n\
    \    }\n    return join('', @arr);\n}", "    my $value = '';\n    my $i = 0;\n\
    \    while ($number > 0) {\n        while ($number >= $roman_values[$i]) {\n \
    \           $value .= $mini_romans[$i];\n            $number -= $roman_values[$i];\n\
    \        }\n        $i++;\n    }\n    return $value;\n}", "    my $roman = \"\"\
    ;\n    my $remainder = $number;\n    my $i = 0;\n    my $numerals = [ qw(i v x\
    \ l c d m) ];\n    while ($remainder > 0) {\n        my $digit = $remainder %\
    \ 10;\n        if ($digit >= 1 && $digit <= 3) {\n            $roman = $numerals->[$i]\
    \ x $digit . $roman;\n        } elsif ($digit == 4) {\n            $roman = $numerals->[$i]\
    \ . $numerals->[$i+1] . $roman;\n        } elsif ($digit == 5) {\n           \
    \ $roman = $numerals->[$i+1] . $roman;\n        } elsif ($digit >= 6 && $digit\
    \ <= 8) {\n            $roman = $numerals->[$i+1] . $numerals->[$i] x ($digit\
    \ - 5) . $roman;\n        } elsif ($digit == 9) {\n            $roman = $numerals->[$i]\
    \ . $numerals->[$i+2] . $roman;\n        }\n        $remainder = int($remainder\
    \ / 10);\n        $i += 2;\n    }\n    return $roman;\n}", "    my $romanNumber;\n\
    \    my %miniRoman = (\n        1 => 'i',\n        2 => 'ii',\n        3 => 'iii',\n\
    \        4 => 'iv',\n        5 => 'v',\n        6 => 'vi',\n        7 => 'vii',\n\
    \        8 => 'viii',\n        9 => 'ix',\n        10 => 'x',\n        20 => 'xx',\n\
    \        30 => 'xxx',\n        40 => 'xl',\n        50 => 'l',\n        60 =>\
    \ 'lx',\n        70 => 'lxx',\n        80 => 'lxxx',\n        90 => 'xc',\n  \
    \      100 => 'c',\n        200 => 'cc',\n        300 => 'ccc',\n        400 =>\
    \ 'cd',\n        500 => 'd',\n        600 => 'dc',\n        700 => 'dcc',\n  \
    \      800 => 'dccc',\n        900 => 'cm',\n        1000 => 'm',\n    );\n  \
    \  my @digits = split('', $number);\n    my $power = 0;\n    for(reverse @digits)\
    \ {\n        $romanNumber .= $miniRoman{$_ * (10 ** $power)};\n        $power++;\n\
    \    }\n    return $romanNumber;\n}", "    $number =~ s/^(M*)$/'x' x length($1)/e;\n\
    \    $number =~ s/^(CM)$/xc/;\n    $number =~ s/^(D?C{0,3})$/'l' x length($1)/e;\n\
    \    $number =~ s/^(CD)$/xc/;\n    $number =~ s/^(XC)$/lx/;\n    $number =~ s/^(L?X{0,3})$/'x'\
    \ x length($1)/e;\n    $number =~ s/^(XL)$/lx/;\n    $number =~ s/^(IX)$/xi/;\n\
    \    $number =~ s/^(V?I{0,3})$/'i' x length($1)/e;\n    return $number;\n}", " \
    \   my($roman, $num, $temp);\n    return '' if ($number < 1 || $number > 1000);\n\
    \    $num = $number;\n    $temp = ($num =~ s/^(M{1,3})//);\n    $roman .= 'm'\
    \ x $temp;\n    $temp = ($num =~ s/^(C{1,3})//);\n    $roman .= 'c' x $temp;\n\
    \    $temp = ($num =~ s/^(X{1,3})//);\n    $roman .= 'x' x $temp;\n    $temp =\
    \ ($num =~ s/^(I{1,3})//);\n    $roman .= 'i' x $temp;\n    $temp = ($num =~ s/^(D?)C{0,2}//);\n\
    \    $roman .= 'd' x $temp;\n    $temp = ($num =~ s/^(L?)X{0,2}//);\n    $roman\
    \ .= 'l' x $temp;\n    $temp = ($num =~ s/^(V?)I{0,2}//);\n    $roman .= 'v' x\
    \ $temp;\n    return $roman;\n}", "    my($roman_number);\n    my %roman_number_map\
    \ = (\n        1 => 'i', 4 => 'iv', 5 => 'v', 9 => 'ix',\n        10 => 'x', 40\
    \ => 'xl', 50 => 'l', 90 => 'xc',\n        100 => 'c', 400 => 'cd', 500 => 'd',\
    \ 900 => 'cm',\n        1000 => 'm'\n    );\n    for my $num (sort {$b <=> $a}\
    \ keys %roman_number_map) {\n        while ($number >= $num) {\n            $roman_number\
    \ .= $roman_number_map{$num};\n            $number -= $num;\n        }\n    }\n\
    \    return $roman_number;\n}", "    my $numeral = '';\n    my $lookup = [\n \
    \       [ qw(m cm d cd c xc l xl x ix v iv i) ],\n        [ qw(1000 900 500 400\
    \ 100 90 50 40 10 9 5 4 1) ],\n    ];\n    while ($number > 0) {\n        my $found\
    \ = 0;\n        for (my $i = 0; $i < scalar(@{$lookup->[0]}); $i++) {\n      \
    \      if ($number >= $lookup->[1]->[$i]) {\n                $found = 1;\n   \
    \             $numeral .= $lookup->[0]->[$i];\n                $number -= $lookup->[1]->[$i];\n\
    \                last;\n            }\n        }\n        last if (!$found);\n\
    \    }\n    return $numeral;\n}", "    return 'undef' if ($number > 1000 || $number\
    \ < 1);\n    my $roman = int_to_roman($number);\n    return lc($roman);\n}", " \
    \   my %roman = (\n        1 => 'i',\n        5 => 'v',\n        10 => 'x',\n\
    \        50 => 'l',\n        100 => 'c',\n        500 => 'd',\n        1000 =>\
    \ 'm',\n    );\n    my @thousands = ('', 'm', 'mm', 'mmm');\n    my @hundreds\
    \ = ('', 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc', 'dccc', 'cm');\n    my @tens\
    \ = ('', 'x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx', 'xc');\n    my @ones\
    \ = ('', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix');\n    my @parts\
    \ = (\n        $thousands[$number / 1000],\n        $hundreds[($number % 1000)\
    \ / 100],\n        $tens[($number % 100) / 10],\n        $ones[$number % 10],\n\
    \    );\n    return join('', @parts);\n}", "    my @arabic = (1,4,5,9,10,40,50,90,100,400,500,900,1000);\n\
    \    my @roman = (\"i\",\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\",\"c\",\"\
    cd\",\"d\",\"cm\",\"m\");\n    my $result = \"\";\n    while ($number) {\n   \
    \     my $n = (grep {$number >= $_} @arabic)[-1];\n        $result .= $roman[$n];\n\
    \        $number -= $n;\n    }\n    return $result;\n}", "    my $result = \"\"\
    ;\n    my $key;\n    # Process thousands\n    $key = int($number / 1000);\n  \
    \  if ($key > 0) {\n        $result .= 'm' x $key;\n        $number -= $key *\
    \ 1000;\n    }\n    # Process hundreds\n    $key = int($number / 100);\n    if\
    \ ($key > 0) {\n        if ($key == 9) {\n            $result .= 'cm';\n     \
    \   } elsif ($key == 4) {\n            $result .= 'cd';\n        } else {\n  \
    \          $result .= 'd' x ($key - 5) if ($key > 5);\n            $result .=\
    \ 'c' x ($key % 5);\n        }\n        $number -= $key * 100;\n    }\n    # Process\
    \ tens\n    $key = int($number / 10);\n    if ($key > 0) {\n        if ($key ==\
    \ 9) {\n            $result .= 'xc';\n        } elsif ($key == 4) {\n        \
    \    $result .= 'xl';\n        } else {\n            $result .= 'l' x ($key -\
    \ 5) if ($key > 5);\n            $result .= 'x' x ($key % 5);\n        }\n   \
    \     $number -= $key * 10;\n    }\n    # Process ones\n    $key = $number;\n\
    \    if ($key > 0) {\n        if ($key == 9) {\n            $result .= 'ix';\n\
    \        } elsif ($key == 4) {\n            $result .= 'iv';\n        } else {\n\
    \            $result .= 'v' x ($key - 5) if ($key > 5);\n            $result .=\
    \ 'i' x ($key % 5);\n        }\n    }\n    return $result;\n}", "    my %numerals\
    \ = (\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n     \
    \   400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n\
    \        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n\
    \        4 => 'iv',\n        1 => 'i',\n    );\n    my $result = '';\n    foreach\
    \ my $val (sort {$b <=> $a} keys %numerals) {\n        my $div = int($number /\
    \ $val);\n        $result .= $numerals{$val} x $div;\n        $number -= $val\
    \ * $div;\n    }\n    return $result;\n}", "    my @roman;\n    for(my $i = 0;\
    \ $i < @romans; $i++) {\n        my $value = $romans[$i];\n        while($number\
    \ >= $value) {\n            push @roman, $mini_romans[$i];\n            $number\
    \ -= $value;\n        }\n    }\n    return join('', @roman);\n}", "    my($roman)\
    \ = \"\";\n    my($place, $digit, $roman_digit);\n    # Get each digit\n    for\
    \ $place (1 .. length($number)) {\n        $digit = substr($number, -$place, 1);\n\
    \        # Get the roman numeral for the digit (by finding the decimal\n     \
    \   # value of the digit in the mapping)\n        $roman_digit = (grep { $digit\
    \ eq $_->[1] } @digits)[0]->[0];\n        $roman = $roman_digit . $roman;\n  \
    \  }\n    # Convert to lowercase\n    lc($roman);\n}", "    my($roman) = \"\"\
    ;\n    my($int) = $number;\n    my($place) = 0;\n    while ($int > 0) {\n    \
    \    $place = $int % 10;\n        $int = int($int / 10);\n        if ($place ==\
    \ 0) {\n            $roman = \"\";\n        } elsif ($place <= 3) {\n        \
    \    $roman = \"i\" x $place . $roman;\n        } elsif ($place == 4) {\n    \
    \        $roman = \"iv\" . $roman;\n        } elsif ($place <= 8) {\n        \
    \    $roman = \"v\" . (\"i\" x ($place - 5)) . $roman;\n        } elsif ($place\
    \ == 9) {\n            $roman = \"ix\" . $roman;\n        }\n    }\n    return\
    \ $roman;\n}", "    my $numeral = \"\";\n    if ($number < 4) { $numeral = 'i'\
    \ x $number; }\n    elsif ($number == 4) { $numeral = 'iv'; }\n    elsif ($number\
    \ < 9) { $numeral = 'v' . ('i' x ($number - 5)); }\n    elsif ($number == 9) {\
    \ $numeral = 'ix'; }\n    elsif ($number < 40) { $numeral = 'x' x int($number\
    \ / 10) . int_to_mini_roman($number % 10); }\n    elsif ($number < 50) { $numeral\
    \ = 'xl' . int_to_mini_roman($number % 10); }\n    elsif ($number < 90) { $numeral\
    \ = 'l' . int_to_mini_roman($number % 50); }\n    elsif ($number < 100) { $numeral\
    \ = 'xc' . int_to_mini_roman($number % 10); }\n    elsif ($number < 400) { $numeral\
    \ = 'c' x int($number / 100) . int_to_mini_roman($number % 100); }\n    elsif\
    \ ($number < 500) { $numeral = 'cd' . int_to_mini_roman($number % 100); }\n  \
    \  elsif ($number < 900) { $numeral = 'd' . int_to_mini_roman($number % 500);\
    \ }\n    elsif ($number < 1000) { $numeral = 'cm' . int_to_mini_roman($number\
    \ % 100); }\n    elsif ($number == 1000) { $numeral = 'm'; }\n    return $numeral;\n\
    }", "    my @romanNumber = ('i', 'v', 'x', 'l', 'c', 'd', 'm');\n    my $result\
    \ = '';\n    my $temp = $number;\n    my $i = 0;\n    while($temp > 0) {\n   \
    \     my $rem = $temp % 10;\n        $temp = int($temp / 10);\n        if($rem\
    \ == 0) {\n            $i += 2;\n            next;\n        }\n        if($rem\
    \ == 4) {\n            $result = $romanNumber[$i] . $romanNumber[$i + 1] . $result;\n\
    \        }\n        elsif($rem == 9) {\n            $result = $romanNumber[$i]\
    \ . $romanNumber[$i + 2] . $result;\n        }\n        else {\n            my\
    \ $base = '';\n            my $remaining = $rem;\n            while($remaining\
    \ > 0) {\n                if($remaining >= 5) {\n                    $base .=\
    \ $romanNumber[$i + 1];\n                    $remaining -= 5;\n              \
    \  }\n                else {\n                    $base .= $romanNumber[$i];\n\
    \                    $remaining -= 1;\n                }\n            }\n    \
    \        $result = $base . $result;\n        }\n        $i += 2;\n    }\n    return\
    \ $result;\n}", "    my @roman_numerals = (\n        [ 1000, 'm' ],\n        [\
    \  900, 'cm' ],\n        [  500, 'd' ],\n        [  400, 'cd' ],\n        [  100,\
    \ 'c' ],\n        [   90, 'xc' ],\n        [   50, 'l' ],\n        [   40, 'xl'\
    \ ],\n        [   10, 'x' ],\n        [    9, 'ix' ],\n        [    5, 'v' ],\n\
    \        [    4, 'iv' ],\n        [    1, 'i' ],\n    );\n    my $roman_numeral\
    \ = '';\n    foreach my $numeral (@roman_numerals) {\n        my($int, $str) =\
    \ @$numeral;\n        while ($number >= $int) {\n            $roman_numeral .=\
    \ $str;\n            $number -= $int;\n        }\n    }\n    return $roman_numeral;\n\
    }", "    return $number;\n}", "    my @digits = reverse split '', sprintf \"%04d\"\
    , $number;\n    my @ones = (\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\"\
    , \"vii\", \"viii\", \"ix\");\n    my @tens = (\"\", \"x\", \"xx\", \"xxx\", \"\
    xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\");\n    my @hundreds = (\"\", \"\
    c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\");\n   \
    \ my @thousands = (\"\", \"m\", \"mm\", \"mmm\");\n    return \"$thousands[$digits[3]]$hundreds[$digits[2]]$tens[$digits[1]]$ones[$digits[0]]\"\
    ;\n}", "    return undef if $number < 1 or $number > 1000;\n    my @s = ( 'm',\
    \ 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i' );\n    my\
    \ @v = ( 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 );\n    my $r =\
    \ '';\n    for my $i ( 0 .. $#v ) {\n        while( $number >= $v[$i] ) {\n  \
    \          $r .= $s[$i];\n            $number -= $v[$i];\n        }\n    }\n \
    \   return $r;\n}", "    my $result = '';\n    $number = int($number);\n    $number\
    \ = 1 if $number < 1;\n    $number = 1000 if $number > 1000;\n    while ($number)\
    \ {\n        my $new_number = $number;\n        if ( $number >= 900 ) {\n    \
    \        $result .= 'cm';\n            $new_number -= 900;\n        }\n      \
    \  elsif ( $number >= 500 ) {\n            $result .= 'd';\n            $new_number\
    \ -= 500;\n        }\n        elsif ( $number >= 400 ) {\n            $result\
    \ .= 'cd';\n            $new_number -= 400;\n        }\n        elsif ( $number\
    \ >= 100 ) {\n            $result .= 'c';\n            $new_number -= 100;\n \
    \       }\n        elsif ( $number >= 90 ) {\n            $result .= 'xc';\n \
    \           $new_number -= 90;\n        }\n        elsif ( $number >= 50 ) {\n\
    \            $result .= 'l';\n            $new_number -= 50;\n        }\n    \
    \    elsif ( $number >= 40 ) {\n            $result .= 'xl';\n            $new_number\
    \ -= 40;\n        }\n        elsif ( $number >= 10 ) {\n            $result .=\
    \ 'x';\n            $new_number -= 10;\n        }\n        elsif ( $number >=\
    \ 9 ) {\n            $result .= 'ix';\n            $new_number -= 9;\n       \
    \ }\n        elsif ( $number >= 5 ) {\n            $result .= 'v';\n         \
    \   $new_number -= 5;\n        }\n        elsif ( $number >= 4 ) {\n         \
    \   $result .= 'iv';\n            $new_number -= 4;\n        }\n        else {\n\
    \            $result .= 'i';\n            $new_number -= 1;\n        }\n     \
    \   $number = $new_number;\n    }\n    return $result;\n}", "    my($roman_numeral)\
    \ = \"\";\n    # 1000: m\n    # 500: d\n    # 100: c\n    # 50: l\n    # 10: x\n\
    \    # 5: v\n    # 1: i\n    my(@numerals) = (\"m\", \"d\", \"c\", \"l\", \"x\"\
    , \"v\", \"i\");\n    my(@values) = (1000, 500, 100, 50, 10, 5, 1);\n    my(@numeral_counts)\
    \ = ();\n    my($i);\n    for ($i = 0; $i < 7; $i++) {\n        $numeral_counts[$i]\
    \ = int($number / $values[$i]);\n        $number = $number % $values[$i];\n  \
    \  }\n    for ($i = 0; $i < 7; $i += 2) {\n        $roman_numeral .= $numerals[$i]\
    \ x $numeral_counts[$i];\n        if ($numeral_counts[$i + 2] == 9) {\n      \
    \      $roman_numeral .= $numerals[$i + 2] . $numerals[$i];\n        }\n     \
    \   elsif ($numeral_counts[$i + 2] == 4) {\n            $roman_numeral .= $numerals[$i\
    \ + 2] . $numerals[$i + 1];\n        }\n        else {\n            $roman_numeral\
    \ .= $numerals[$i + 1] x int($numeral_counts[$i + 2] / 5);\n            $roman_numeral\
    \ .= $numerals[$i + 2] x ($numeral_counts[$i + 2] % 5);\n        }\n    }\n  \
    \  return $roman_numeral;\n}", "    $number =~ s/[^\\d]//g;\n    if ($number <\
    \ 1 || $number > 1000) {\n        return '';\n    }\n    my %roman_chars = (\n\
    \        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400\
    \ => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n   \
    \     40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n\
    \        4 => 'iv',\n        1 => 'i',\n    );\n    my $mini_roman = '';\n   \
    \ while ($number > 0) {\n        foreach my $roman_value (sort {$b <=> $a} keys\
    \ %roman_chars) {\n            while ($number >= $roman_value) {\n           \
    \     $mini_roman .= $roman_chars{$roman_value};\n                $number -= $roman_value;\n\
    \            }\n        }\n    }\n    return $mini_roman;\n}", "    my $result\
    \ = \"\";\n    # YOUR CODE HERE\n    my %map = ( \"1000\" => \"m\", \"900\" =>\
    \ \"cm\", \"500\" => \"d\", \"400\" => \"cd\", \"100\" => \"c\", \"90\" => \"\
    xc\", \"50\" => \"l\", \"40\" => \"xl\", \"10\" => \"x\", \"9\" => \"ix\", \"\
    5\" => \"v\", \"4\" => \"iv\", \"1\" => \"i\" );\n    my @numbers = (1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    while ($number != 0) {\n  \
    \      my $i = 0;\n        while ($number >= $numbers[$i]) {\n            $number\
    \ -= $numbers[$i];\n            $result .= $map{$numbers[$i]};\n        }\n  \
    \      $i++;\n    }\n    return $result;\n}", "    my @numerals = (\"i\", \"v\"\
    , \"x\", \"l\", \"c\", \"d\", \"m\");\n    my $digits = 0;\n    my $result = \"\
    \";\n    my $temp = 0;\n    my $index = 0;\n    my $i = 0;\n    my $j = 0;\n \
    \   my $k = 0;\n    my $n = 0;\n    my $m = 0;\n    my $digit = 0;\n    $temp\
    \ = $number;\n    while ($temp > 0) {\n        $temp = int($temp / 10);\n    \
    \    $digits++;\n    }\n    $index = 2 * $digits - 2;\n    for (my $i = 0; $i\
    \ < $digits; $i++) {\n        $digit = int($number / 10**$i) % 10;\n        if\
    \ ($digit == 9) {\n            $result = $numerals[$index] . $numerals[$index\
    \ + 2] . $result;\n        }\n        elsif ($digit == 4) {\n            $result\
    \ = $numerals[$index] . $numerals[$index + 1] . $result;\n        }\n        else\
    \ {\n            $n = int($digit / 5);\n            $m = $digit % 5;\n       \
    \     for (my $j = 0; $j < $n; $j++) {\n                $result = $numerals[$index\
    \ + 1] . $result;\n            }\n            for (my $k = 0; $k < $m; $k++) {\n\
    \                $result = $numerals[$index] . $result;\n            }\n     \
    \   }\n        $index -= 2;\n    }\n    return $result;\n}", "    my $result =\
    \ \"\";\n    while($number >= 1000) {\n        $result .= \"m\";\n        $number\
    \ -= 1000;\n    }\n    if($number >= 900) {\n        $result .= \"cm\";\n    \
    \    $number -= 900;\n    }\n    if($number >= 500) {\n        $result .= \"d\"\
    ;\n        $number -= 500;\n    }\n    if($number >= 400) {\n        $result .=\
    \ \"cd\";\n        $number -= 400;\n    }\n    while($number >= 100) {\n     \
    \   $result .= \"c\";\n        $number -= 100;\n    }\n    if($number >= 90) {\n\
    \        $result .= \"xc\";\n        $number -= 90;\n    }\n    if($number >=\
    \ 50) {\n        $result .= \"l\";\n        $number -= 50;\n    }\n    if($number\
    \ >= 40) {\n        $result .= \"xl\";\n        $number -= 40;\n    }\n    while($number\
    \ >= 10) {\n        $result .= \"x\";\n        $number -= 10;\n    }\n    if($number\
    \ >= 9) {\n        $result .= \"ix\";\n        $number -= 9;\n    }\n    if($number\
    \ >= 5) {\n        $result .= \"v\";\n        $number -= 5;\n    }\n    if($number\
    \ >= 4) {\n        $result .= \"iv\";\n        $number -= 4;\n    }\n    while($number\
    \ >= 1) {\n        $result .= \"i\";\n        $number -= 1;\n    }\n    return\
    \ $result;\n}", "    my @numbers = (1000, 500, 100, 50, 10, 5, 1);\n    my @letters\
    \ = ('m', 'd', 'c', 'l', 'x', 'v', 'i');\n    my $romannum = '';\n    my $i =\
    \ 0;\n    while ($number > 0) {\n        if ($number >= $numbers[$i]) {\n    \
    \        $romannum .= $letters[$i];\n            $number -= $numbers[$i];\n  \
    \      }\n        elsif ($i%2 == 0 &&\n                $number >= $numbers[$i]\
    \ - $numbers[$i+2]) {\n            $romannum .= $letters[$i+2] . $letters[$i];\n\
    \            $number -= $numbers[$i] - $numbers[$i+2];\n        }\n        elsif\
    \ ($i%2 == 1 &&\n                $number >= $numbers[$i] - $numbers[$i+1]) {\n\
    \            $romannum .= $letters[$i+1] . $letters[$i];\n            $number\
    \ -= $numbers[$i] - $numbers[$i+1];\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $romannum;\n}", "    my $res;\n    my $hash_roman\
    \ = { M => 1000, D => 500, C => 100, L => 50, X => 10, V => 5, I => 1 };\n   \
    \ my @roman = qw/M D C L X V I/;\n    for my $i (0..$#roman) {\n        my $count\
    \ = int($number / $hash_roman->{$roman[$i]});\n        if ($count == 4) {\n  \
    \          $res .= $roman[$i] . $roman[$i - 1];\n        } elsif ($count == 9)\
    \ {\n            $res .= $roman[$i] . $roman[$i - 2];\n        } else {\n    \
    \        $res .= $roman[$i] x $count;\n        }\n        $number = $number %\
    \ $hash_roman->{$roman[$i]};\n    }\n    return lc($res);\n}", "    my %decimal_to_roman\
    \ = (1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd', 100 => 'c', 90 => 'xc',\
    \ 50 => 'l', 40 => 'xl', 10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i');\n\
    \    my $rom = '';\n    foreach my $decimal (reverse sort keys %decimal_to_roman)\
    \ {\n        while ($number >= $decimal) {\n            $rom .= $decimal_to_roman{$decimal};\n\
    \            $number -= $decimal;\n        }\n    }\n    return $rom;\n}", " \
    \   return join '', roman_digits($number);\n}", "    die \"int_to_mini_roman requires\
    \ a positive integer\\n\" if (! defined $number or $number <= 0);\n    my $roman\
    \ = \"\";\n    my $rest = $number;\n    while($rest > 0) {\n        if($rest >=\
    \ 1000) {\n            $roman .= \"m\";\n            $rest -= 1000;\n        }\
    \ elsif($rest >= 900) {\n            $roman .= \"cm\";\n            $rest -= 900;\n\
    \        } elsif($rest >= 500) {\n            $roman .= \"d\";\n            $rest\
    \ -= 500;\n        } elsif($rest >= 400) {\n            $roman .= \"cd\";\n  \
    \          $rest -= 400;\n        } elsif($rest >= 100) {\n            $roman\
    \ .= \"c\";\n            $rest -= 100;\n        } elsif($rest >= 90) {\n     \
    \       $roman .= \"xc\";\n            $rest -= 90;\n        } elsif($rest >=\
    \ 50) {\n            $roman .= \"l\";\n            $rest -= 50;\n        } elsif($rest\
    \ >= 40) {\n            $roman .= \"xl\";\n            $rest -= 40;\n        }\
    \ elsif($rest >= 10) {\n            $roman .= \"x\";\n            $rest -= 10;\n\
    \        } elsif($rest >= 9) {\n            $roman .= \"ix\";\n            $rest\
    \ -= 9;\n        } elsif($rest >= 5) {\n            $roman .= \"v\";\n       \
    \     $rest -= 5;\n        } elsif($rest >= 4) {\n            $roman .= \"iv\"\
    ;\n            $rest -= 4;\n        } elsif($rest >= 1) {\n            $roman\
    \ .= \"i\";\n            $rest -= 1;\n        }\n    }\n    return $roman;\n}",
  "    my $digit_roman_map = {\n        0 => '',\n        1 => 'i',\n        2 =>\
    \ 'ii',\n        3 => 'iii',\n        4 => 'iv',\n        5 => 'v',\n        6\
    \ => 'vi',\n        7 => 'vii',\n        8 => 'viii',\n        9 => 'ix',\n  \
    \  };\n    my $ten_roman_map = {\n        0 => '',\n        1 => 'x',\n      \
    \  2 => 'xx',\n        3 => 'xxx',\n        4 => 'xl',\n        5 => 'l',\n  \
    \      6 => 'lx',\n        7 => 'lxx',\n        8 => 'lxxx',\n        9 => 'xc',\n\
    \    };\n    my $hundred_roman_map = {\n        0 => '',\n        1 => 'c',\n\
    \        2 => 'cc',\n        3 => 'ccc',\n        4 => 'cd',\n        5 => 'd',\n\
    \        6 => 'dc',\n        7 => 'dcc',\n        8 => 'dccc',\n        9 => 'cm',\n\
    \    };\n    my $thousand_roman_map = {\n        0 => '',\n        1 => 'm',\n\
    \        2 => 'mm',\n        3 => 'mmm',\n    };\n    my $thousand_digit = int($number\
    \ / 1000);\n    my $thousand_remainder = $number % 1000;\n    my $hundred_digit\
    \ = int($thousand_remainder / 100);\n    my $hundred_remainder = $thousand_remainder\
    \ % 100;\n    my $ten_digit = int($hundred_remainder / 10);\n    my $ten_remainder\
    \ = $hundred_remainder % 10;\n    my $one_digit = $ten_remainder;\n    my $roman_result\
    \ = $thousand_roman_map->{$thousand_digit} . $hundred_roman_map->{$hundred_digit}\
    \ . $ten_roman_map->{$ten_digit} . $digit_roman_map->{$one_digit};\n    return\
    \ $roman_result;\n}", "    my($result) = \"\";\n    $result .= 'i' x ($number\
    \ % 5);\n    $number -= $number % 5;\n    if ($number >= 5) {\n        $result\
    \ = 'v' . $result;\n        $number -= 5;\n    }\n    $result = ($number / 10)\
    \ x 'x' . $result;\n    $result =~ tr/XxVvIi/xvix/;\n    return $result;\n}",
  "    my $s = \"\";\n    my @romans = ( 'i', 'x', 'c', 'm' );\n    my @numbers =\
    \ ( 1, 10, 100, 1000 );\n    my $digit = 0;\n    for my $n (@numbers) {\n    \
    \    my $power = int($number / $n);\n        if ($power) {\n            $number\
    \ = $number % $n;\n            if ($power == 9) {\n                $s .= $romans[$digit]\
    \ . $romans[$digit + 2];\n            }\n            elsif ($power >= 5) {\n \
    \               $s .= $romans[$digit + 1];\n                $power -= 5;\n   \
    \             while ($power) {\n                    $s .= $romans[$digit];\n \
    \                   $power--;\n                }\n            }\n            elsif\
    \ ($power == 4) {\n                $s .= $romans[$digit] . $romans[$digit + 1];\n\
    \            }\n            else {\n                while ($power) {\n       \
    \             $s .= $romans[$digit];\n                    $power--;\n        \
    \        }\n            }\n        }\n        $digit++;\n    }\n    return $s;\n\
    }", "    my @thous = qw(m mm mmm);\n    my @hunds = qw(c cc ccc cd d dc dcc dccc\
    \ cm);\n    my @tens  = qw(x xx xxx xl l lx lxx lxxx xc);\n    my @ones  = qw(i\
    \ ii iii iv v vi vii viii ix);\n    my $thous = $thous[($number/1000)-1];\n  \
    \  my $hunds = $hunds[(($number/100)%10)-1];\n    my $tens  = $tens[(($number/10)%10)-1];\n\
    \    my $ones  = $ones[($number%10)-1];\n    my $result = ucfirst($thous . $hunds\
    \ . $tens . $ones);\n    return lc($result);\n}", "    my $result = '';\n    my\
    \ $remaining = $number;\n    my $current_numeral = '';\n    my $current_value\
    \ = 1000;\n    my $numeral_values = {\n        'm' => 1000,\n        'd' => 500,\n\
    \        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n\
    \        'i' => 1\n    };\n    my $numeral_order = [ 'm', 'd', 'c', 'l', 'x',\
    \ 'v', 'i' ];\n    for $current_numeral (@$numeral_order) {\n        my $numeral_times\
    \ = int($remaining / $numeral_values->{$current_numeral});\n        $remaining\
    \ = $remaining % $numeral_values->{$current_numeral};\n        $result .= $current_numeral\
    \ x $numeral_times;\n    }\n    return $result;\n}", "    my $roman_numeral =\
    \ '';\n    my $remainder;\n    my @remainders;\n    my @digits;\n    my $digit_count\
    \ = 0;\n    my @roman_numeral_digits = ('i', 'v', 'x', 'l', 'c', 'd', 'm');\n\
    \    while ($number > 0) {\n        $remainder = $number % 10;\n        $number\
    \ = int($number / 10);\n        $remainders[$digit_count] = $remainder;\n    \
    \    $digit_count++;\n    }\n    @digits = reverse @remainders;\n    $roman_numeral\
    \ = get_digit_numeral($digits[0], 0);\n    if ($digit_count > 1) {\n        $roman_numeral\
    \ = get_digit_numeral($digits[1], 1) . $roman_numeral;\n    }\n    if ($digit_count\
    \ > 2) {\n        $roman_numeral = get_digit_numeral($digits[2], 2) . $roman_numeral;\n\
    \    }\n    return $roman_numeral;\n}", "    my $result = '';\n    my @map = (qw(I\
    \ V X L C D M));\n    my @rmap = reverse @map;\n    my $l = 0;\n    my $r = $number;\n\
    \    while ($r > 0) {\n        my $digit = $r % 10;\n        my $i = 0;\n    \
    \    my $j = $l;\n        my $char = '';\n        if ($digit <= 3) {\n       \
    \     $char = $map[$j] x $digit;\n        } elsif ($digit == 4) {\n          \
    \  $char = $map[$j] . $map[$j+1];\n        } elsif ($digit == 5) {\n         \
    \   $char = $map[$j+1];\n        } elsif ($digit <= 8) {\n            $char =\
    \ $map[$j+1] . $map[$j] x ($digit - 5);\n        } elsif ($digit == 9) {\n   \
    \         $char = $map[$j] . $map[$j+2];\n        }\n        $result = $char .\
    \ $result;\n        $r = int($r / 10);\n        $l += 2;\n    }\n    return $result;\n\
    }", "    my %roman = (\n        1 => 'i',\n        5 => 'v',\n        10 => 'x',\n\
    \        50 => 'l',\n        100 => 'c',\n        500 => 'd',\n        1000 =>\
    \ 'm',\n    );\n    my @digits = split(//, \"$number\");\n    my $result = '';\n\
    \    my $length = scalar(@digits);\n    for (my $digit_index = 0; $digit_index\
    \ < $length; $digit_index++){\n        my $digit = $digits[$digit_index];\n  \
    \      my $pow = $length - $digit_index - 1;\n        if ($digit == 4) {\n   \
    \         $result .= $roman{(5 * 10**$pow)} . $roman{(1 * 10**$pow)};\n      \
    \  } elsif ($digit == 9) {\n            $result .= $roman{(10 * 10**$pow)} . $roman{(1\
    \ * 10**$pow)};\n        } else {\n            my $ones = $digit % 5;\n      \
    \      my $fives = int($digit / 5);\n            $result .= ($roman{(5 * 10**$pow)}\
    \ x $fives) . ($roman{(1 * 10**$pow)} x $ones);\n        }\n    }\n    return\
    \ $result;\n}", "    my $roman_numeral = \"\";\n    my $i = $number;\n    # There\
    \ are only seven values of mini roman numerals\n    # so we can just list them\
    \ out\n    if($i >= 1000){\n        return \"too big\";\n    }\n    my @symbols\
    \ = (\n        \"m\",\n        \"c\",\n        \"l\",\n        \"x\",\n      \
    \  \"v\",\n        \"i\",\n        \"f\"\n    );\n    my @values = (\n       \
    \ 1000,\n        100,\n        50,\n        10,\n        5,\n        1,\n    \
    \    0.5\n    );\n    my $count = 0;\n    my $repeat = 0;\n    my $sym_count =\
    \ 0;\n    foreach my $sym (@symbols){\n        my $val = $values[$sym_count];\n\
    \        while($i >= $val){\n            $count++;\n            $i -= $val;\n\
    \        }\n        if($count == 9){\n            $roman_numeral .= $symbols[$sym_count]\
    \ . $symbols[$sym_count - 2];\n            $repeat = 1;\n        }elsif($count\
    \ == 4){\n            $roman_numeral .= $symbols[$sym_count] . $symbols[$sym_count\
    \ - 1];\n            $repeat = 1;\n        }elsif($count >= 5){\n            $roman_numeral\
    \ .= $symbols[$sym_count - 1];\n            $count -= 5;\n            $repeat\
    \ = 1;\n        }\n        if($repeat){\n            $repeat = 0;\n        }else{\n\
    \            while($count > 0){\n                $roman_numeral .= $symbols[$sym_count];\n\
    \                $count--;\n            }\n        }\n        $count = 0;\n  \
    \      $sym_count++;\n    }\n    return $roman_numeral;\n}", "    my $ret = \"\
    \";\n    #YOUR CODE HERE\n    return $ret;\n}", '    # Fill in code here.', " \
    \   my $roman = '';\n    my %roman_map = (\n        1000 => 'm',\n        900\
    \ => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n \
    \       90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n\
    \        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i',\n\
    \    );\n    while ($number) {\n        foreach my $int (sort {$b <=> $a} keys\
    \ %roman_map) {\n            if ($number >= $int) {\n                $roman .=\
    \ $roman_map{$int};\n                $number -= $int;\n                last;\n\
    \            }\n        }\n    }\n    return $roman;\n}", "    my $result = '';\n\
    \    my @digits = qw(i iv v ix x xl l xc c cd d cm m);\n    for (my $i = $#digits;\
    \ $i >= 0; $i -= 2) {\n        while ($number >= ($r = substr($digits[$i], 0,\
    \ 1))) {\n            $result .= $r;\n            $number -= $r;\n        }\n\
    \    }\n    return $result;\n}", "    my @conversion = (\"m\", \"cm\", \"d\",\
    \ \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\");\n\
    \    my @divisors = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n\
    \    my $roman = \"\";\n    for (my $i = 0; $i < @divisors; $i++) {\n        if\
    \ ($number >= $divisors[$i]) {\n            my $divisor = $divisors[$i];\n   \
    \         my $num_converted = int($number / $divisor);\n            $number -=\
    \ $num_converted * $divisor;\n            $roman .= $conversion[$i] x $num_converted;\n\
    \        }\n    }\n    return $roman;\n}", "    my %special_cases = (\n      \
    \  '4' => 'iv',\n        '9' => 'ix',\n        '40' => 'xl',\n        '90' =>\
    \ 'xc',\n        '400' => 'cd',\n        '900' => 'cm',\n    );\n    my @roman_numerals\
    \ = qw(i v x l c d m);\n    my $rom = '';\n    my $div = 0;\n    my $remainder\
    \ = 0;\n    foreach my $num (reverse(1..length($number))) {\n        $div = int($number\
    \ / 10**($num-1));\n        $remainder = $number % 10**($num-1);\n        $rom\
    \ = $rom.$special_cases{$div.$remainder} if exists $special_cases{$div.$remainder};\n\
    \        $rom = $rom.$roman_numerals[$num] x $div if !exists $special_cases{$div.$remainder};\n\
    \        $number = $remainder;\n    }\n    return $rom;\n}", "    my @roman =\
    \ ('i', 'v', 'x', 'l', 'c', 'd', 'm');\n    my @parts = (1, 5, 10, 50, 100, 500,\
    \ 1000);\n    my $i = 0;\n    my $result = '';\n    while($number > 0) {\n   \
    \     my $q = int($number / $parts[$i]);\n        if($q == 4) {\n            $result\
    \ .= $roman[$i] . $roman[$i+1];\n        } elsif($q == 9) {\n            $result\
    \ .= $roman[$i] . $roman[$i+2];\n        } else {\n            $result .= $roman[$i+1]\
    \ x int($q / 5);\n            $result .= $roman[$i] x ($q % 5);\n        }\n \
    \       $number -= $q * $parts[$i];\n        $i += 2;\n    }\n    return $result;\n\
    }", "    my %hash = (\n        1 => 'i',\n        5 => 'v',\n        10 => 'x',\n\
    \        50 => 'l',\n        100 => 'c',\n        500 => 'd',\n        1000 =>\
    \ 'm',\n    );\n    my @keys = sort {$b <=> $a} keys %hash;\n    # my @keys =\
    \ sort {$a <=> $b} keys %hash;\n    my $roman = '';\n    while ($number) {\n \
    \       my $min = shift @keys;\n        while ($number >= $min) {\n          \
    \  $roman .= $hash{$min};\n            $number -= $min;\n        }\n    }\n  \
    \  return $roman;\n}", "    my $min = 1;\n    my $max = 1000;\n    return undef\
    \ if !defined $number || $number !~ /^\\d+$/ || $number < $min || $number > $max;\n\
    \    my @numbers = (0, 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n\
    \    my @romans = ('', 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd',\
    \ 'd', 'cm', 'm');\n    my $roman = '';\n    my $i = 13;\n    while ($number)\
    \ {\n        while ($number >= $numbers[$i]) {\n            $number -= $numbers[$i];\n\
    \            $roman .= $romans[$i];\n        }\n        $i--;\n    }\n    return\
    \ $roman;\n}", "    my $roman = \"\";\n    $roman .= \"m\" x ($number / 1000);\n\
    \    $number %= 1000;\n    my @symbols = qw(cm m d cd c xc l xl x ix v iv i);\n\
    \    my @numbers = qw(900 1000 500 400 100 90 50 40 10 9 5 4 1);\n    while ($number)\
    \ {\n        for (my $i = 0; $i < @numbers; $i++) {\n            if ($number >=\
    \ $numbers[$i]) {\n                $roman .= $symbols[$i];\n                $number\
    \ -= $numbers[$i];\n                last;\n            }\n        }\n    }\n \
    \   return $roman;\n}", "    my $roman_numeral = '';\n    my $roman_numerals =\
    \ [\n        undef,\n        'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii',\
    \ 'ix',\n        'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii',\
    \ 'xix',\n        'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii',\
    \ 'xxviii', 'xxix',\n        'xxx', 'xxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxv',\
    \ 'xxxvi', 'xxxvii', 'xxxviii', 'xxxix',\n        'xl', 'xli', 'xlii', 'xliii',\
    \ 'xliv', 'xlv', 'xlvi', 'xlvii', 'xlviii', 'xlix',\n        'l', 'li', 'lii',\
    \ 'liii', 'liv', 'lv', 'lvi', 'lvii', 'lviii', 'lix',\n        'lx', 'lxi', 'lxii',\
    \ 'lxiii', 'lxiv', 'lxv', 'lxvi', 'lxvii', 'lxviii', 'lxix',\n        'lxx', 'lxxi',\
    \ 'lxxii', 'lxxiii', 'lxxiv', 'lxxv', 'lxxvi', 'lxxvii', 'lxxviii', 'lxxix',\n\
    \        'lxxx', 'lxxxi', 'lxxxii', 'lxxxiii', 'lxxxiv', 'lxxxv', 'lxxxvi', 'lxxxvii',\
    \ 'lxxxviii', 'lxxxix',\n        'xc', 'xci', 'xcii', 'xciii', 'xciv', 'xcv',\
    \ 'xcvi', 'xcvii', 'xcviii', 'xcix',\n        'c', 'ci', 'cii', 'ciii', 'civ',\
    \ 'cv', 'cvi', 'cvii', 'cviii', 'c", "    return;\n}", "    my $result = \"\"\
    ;\n    # build mapping table\n    my @mini_roman_number = (\n        \"i\", \"\
    v\", \"x\", \"l\", \"c\", \"d\", \"m\",\n        \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\",\n        \"x\", \"xi\", \"xii\", \"xiii\"\
    , \"xiv\", \"xv\", \"xvi\", \"xvii\", \"xviii\", \"xix\",\n        \"xx\", \"\
    xxi\", \"xxii\", \"xxiii\", \"xxiv\", \"xxv\", \"xxvi\", \"xxvii\", \"xxviii\"\
    , \"xxix\",\n        \"xxx\", \"xxxi\", \"xxxii\", \"xxxiii\", \"xxxiv\", \"xxxv\"\
    , \"xxxvi\", \"xxxvii\", \"xxxviii\", \"xxxix\",\n        \"xl\", \"xli\", \"\
    xlii\", \"xliii\", \"xliv\", \"xlv\", \"xlvi\", \"xlvii\", \"xlviii\", \"xlix\"\
    ,\n        \"l\", \"li\", \"lii\", \"liii\", \"liv\", \"lv\", \"lvi\", \"lvii\"\
    , \"lviii\", \"lix\",\n        \"lx\", \"lxi\", \"lxii\", \"lxiii\", \"lxiv\"\
    , \"lxv\", \"lxvi\", \"lxvii\", \"lxviii\", \"lxix\",\n        \"lxx\", \"lxxi\"\
    , \"lxxii\", \"lxxiii\", \"lxxiv\", \"lxxv\", \"lxxvi\", \"lxxvii\", \"lxxviii\"\
    , \"lxxix\",\n        \"lxxx\", \"lxxxi\", \"lxxxii\", \"lxxxiii\", \"lxxxiv\"\
    , \"lxxxv\", \"lxxxvi\", \"lxxxvii\", \"lxxxviii\", \"lxxxix\",\n        \"xc\"\
    , \"xci\", \"xcii\", \"xciii\", \"xciv\", \"xcv\", \"xcvi\", \"xcvii\", \"xcviii\"\
    , \"xcix\",\n        \"c\", \"ci\", \"cii\", \"ciii\", \"civ", "    my $roman\
    \ = \"\";\n    my $x = \"x\";\n    my $i = \"i\";\n    if ($number <= 3){\n\t\
    $roman = $i x $number;\n    }\n    elsif ($number >= 4 && $number <= 8){\n\tmy\
    \ $integer = (10 - $number);\n\t$roman = $x . $i x $integer;\n    }\n    elsif\
    \ ($number == 9){\n\t$roman = \"ix\";\n    }\n    elsif ($number >= 10 && $number\
    \ <= 39){\n\tmy $integer = ($number/10);\n\t$roman = $x x $integer;\n\t$number\
    \ = $number % 10;\n\t$roman = $roman . $i x $number;\n    }\n    elsif ($number\
    \ >= 40 && $number <= 49){\n\tmy $integer = (50 - $number);\n\t$roman = \"xl\"\
    \ . $i x $integer;\n    }\n    elsif ($number >= 50 && $number <= 89){\n\tmy $integer\
    \ = ($number/10 - 5);\n\t$roman = \"l\" . $x x $integer;\n\t$number = $number\
    \ % 10;\n\t$roman = $roman . $i x $number;\n    }\n    elsif ($number >= 90 &&\
    \ $number <= 99){\n\tmy $integer = (100 - $number);\n\t$roman = \"xc\" . $i x\
    \ $integer;\n    }\n    elsif ($number >= 100 && $number <= 399){\n\tmy $integer\
    \ = ($number/100);\n\t$roman = $x x $integer;\n\t$number = $number % 100;\n\t\
    $roman = $roman . int_to_mini_roman($number);\n    }\n    elsif ($number >= 400\
    \ && $number <= 499){\n\tmy $integer = (500 - $number);\n\t$roman = \"cd\" . int_to_mini_roman($integer);\n\
    \    }\n    elsif ($number >= 500 && $number <= 899){\n\tmy $integer = ($number/100\
    \ - 5);\n\t$roman = \"d\" . $x x $integer;\n\t$number = $number % 100;\n\t$",
  "    my($result) = '';\n    while($number) {\n        if($number >= 1000) {\n  \
    \          $result .= 'm';\n            $number -= 1000;\n        }\n        elsif($number\
    \ >= 900) {\n            $result .= 'cm';\n            $number -= 900;\n     \
    \   }\n        elsif($number >= 500) {\n            $result .= 'd';\n        \
    \    $number -= 500;\n        }\n        elsif($number >= 400) {\n           \
    \ $result .= 'cd';\n            $number -= 400;\n        }\n        elsif($number\
    \ >= 100) {\n            $result .= 'c';\n            $number -= 100;\n      \
    \  }\n        elsif($number >= 90) {\n            $result .= 'xc';\n         \
    \   $number -= 90;\n        }\n        elsif($number >= 50) {\n            $result\
    \ .= 'l';\n            $number -= 50;\n        }\n        elsif($number >= 40)\
    \ {\n            $result .= 'xl';\n            $number -= 40;\n        }\n   \
    \     elsif($number >= 10) {\n            $result .= 'x';\n            $number\
    \ -= 10;\n        }\n        elsif($number >= 9) {\n            $result .= 'ix';\n\
    \            $number -= 9;\n        }\n        elsif($number >= 5) {\n       \
    \     $result .= 'v';\n            $number -= 5;\n        }\n        elsif($number\
    \ >= 4) {\n            $result .= 'iv';\n            $number -= 4;\n        }\n\
    \        else {\n            $result .= 'i';\n            $number -= 1;\n    \
    \    }\n    }\n    return $result;\n}", "    my $result = \"\";\n    my @values\
    \ = (5, 10, 50, 100, 500, 1000);\n    my @symbols = ('v', 'x', 'l', 'c', 'd',\
    \ 'm');\n    my $index = 5;\n    while ($number > 0) {\n        while ($values[$index]\
    \ > $number) {\n            $index--;\n        }\n        my $count = int($number\
    \ / $values[$index]);\n        $number %= $values[$index];\n        if ($count\
    \ == 4 && $index > 0 && $index % 2 == 0) {\n            $result .= $symbols[$index\
    \ - 1] . $symbols[$index + 1];\n        }\n        elsif ($count == 4 && $index\
    \ > 0 && $index % 2 == 1) {\n            $result .= $symbols[$index - 1] . $symbols[$index];\n\
    \        }\n        else {\n            $result .= $symbols[$index] x $count;\n\
    \        }\n    }\n    return $result;\n}", "    my $result = '';\n    foreach\
    \ my $number_tuple (qw( M 1000 D 500 C 100 L 50 X 10 V 5 I 1 )) {\n        my($letter,\
    \ $value) = split('', $number_tuple);\n        my $mult = int($number / $value);\n\
    \        $result .= $letter x $mult;\n        $number %= $value;\n    }\n    return\
    \ $result;\n}", "    my $return_string = \"\";\n    while($number >= 1000){\n\
    \        $return_string .= \"m\";\n        $number -= 1000;\n    }\n    while($number\
    \ >= 500){\n        $return_string .= \"d\";\n        $number -= 500;\n    }\n\
    \    while($number >= 100){\n        $return_string .= \"c\";\n        $number\
    \ -= 100;\n    }\n    while($number >= 50){\n        $return_string .= \"l\";\n\
    \        $number -= 50;\n    }\n    while($number >= 10){\n        $return_string\
    \ .= \"x\";\n        $number -= 10;\n    }\n    while($number >= 5){\n       \
    \ $return_string .= \"v\";\n        $number -= 5;\n    }\n    while($number >=\
    \ 1){\n        $return_string .= \"i\";\n        $number -= 1;\n    }\n    return\
    \ $return_string;\n}", '    $number > 1000 && return "";', "    my $result = \"\
    \";\n    my $x = \"x\";\n    my $l = \"l\";\n    my $c = \"c\";\n    my $d = \"\
    d\";\n    my $m = \"m\";\n    my $remainder = $number;\n    my $temp = \"\";\n\
    \    my $temp2 = \"\";\n    my $c2 = \"\";\n    if ($remainder >= 1000) {\n  \
    \      $temp = $remainder/1000;\n        $remainder = $remainder%1000;\n     \
    \   $m = $m x $temp;\n        $result = $result . $m;\n    }\n    if ($remainder\
    \ >= 500) {\n        $temp = $remainder/500;\n        $remainder = $remainder%500;\n\
    \        $d = $d x $temp;\n        $result = $result . $d;\n    }\n    if ($remainder\
    \ >= 100) {\n        $temp = $remainder/100;\n        $remainder = $remainder%100;\n\
    \        $c = $c x $temp;\n        $result = $result . $c;\n    }\n    if ($remainder\
    \ >= 50) {\n        $temp = $remainder/50;\n        $remainder = $remainder%50;\n\
    \        $l = $l x $temp;\n        $result = $result . $l;\n    }\n    if ($remainder\
    \ >= 10) {\n        $temp = $remainder/10;\n        $remainder = $remainder%10;\n\
    \        $x = $x x $temp;\n        $result = $result . $x;\n    }\n    if ($remainder\
    \ >= 5) {\n        $temp = $remainder/5;\n        $remainder = $remainder%5;\n\
    \        $temp2 = $temp . \"\";\n        $temp2 = reverse $temp2;\n        $c2\
    \ = substr($temp2, 1, 1);\n        if ($c2 == 1) {\n            $temp = $temp\
    \ - 1;\n            $c = $c x $temp;\n            $result = $result", "    my\
    \ $result = \"\";\n    if($number == 1000){\n        $result = \"m\";\n    }\n\
    \    elsif($number >= 900){\n        $result = \"cm\";\n    }\n    elsif($number\
    \ >= 500){\n        $result = \"d\";\n    }\n    elsif($number >= 400){\n    \
    \    $result = \"cd\";\n    }\n    elsif($number >= 100){\n        $result = \"\
    c\";\n    }\n    elsif($number >= 90){\n        $result = \"xc\";\n    }\n   \
    \ elsif($number >= 50){\n        $result = \"l\";\n    }\n    elsif($number >=\
    \ 40){\n        $result = \"xl\";\n    }\n    elsif($number >= 10){\n        $result\
    \ = \"x\";\n    }\n    elsif($number >= 9){\n        $result = \"ix\";\n    }\n\
    \    elsif($number >= 5){\n        $result = \"v\";\n    }\n    elsif($number\
    \ >= 4){\n        $result = \"iv\";\n    }\n    elsif($number >= 1){\n       \
    \ $result = \"i\";\n    }\n    return $result;\n}", "    if ($number >= 1000)\
    \ {\n        my $return = 'm';\n        $return .= 'm' for (1..($number/1000)-1);\n\
    \        $number %= 1000;\n    }\n    if ($number >= 900) {\n        $number -=\
    \ 900;\n        my $return = 'cm';\n    }\n    if ($number >= 500) {\n       \
    \ $number -= 500;\n        my $return = 'd';\n    }\n    if ($number >= 400) {\n\
    \        $number -= 400;\n        my $return = 'cd';\n    }\n    if ($number >=\
    \ 100) {\n        my $return = 'c';\n        $return .= 'c' for (1..($number/100)-1);\n\
    \        $number %= 100;\n    }\n    if ($number >= 90) {\n        $number -=\
    \ 90;\n        my $return = 'xc';\n    }\n    if ($number >= 50) {\n        $number\
    \ -= 50;\n        my $return = 'l';\n    }\n    if ($number >= 40) {\n       \
    \ $number -= 40;\n        my $return = 'xl';\n    }\n    if ($number >= 10) {\n\
    \        my $return = 'x';\n        $return .= 'x' for (1..($number/10)-1);\n\
    \        $number %= 10;\n    }\n    if ($number >= 9) {\n        $number -= 9;\n\
    \        my $return = 'ix';\n    }\n    if ($number >= 5) {\n        $number -=\
    \ 5;\n        my $return = 'v';\n    }\n    if ($number >= 4) {\n        $number\
    \ -= 4;\n        my $return = 'iv';\n    }\n    if ($number >= 1) {\n        my\
    \ $return = 'i';\n        $return .= 'i' for (1..($number)-1);\n    }\n}", " \
    \   my $result = \"\";\n    # Convert any 0's to empty string\n    $number =~\
    \ s/0+$//;\n    # Convert $number to roman numeral equivalent\n    my $remainder\
    \ = $number;\n    my $RomanNumeral;\n    foreach $RomanNumeral (\n        [\"\
    M\",  1000], [\"CM\", 900],\n        [\"D\",  500],  [\"CD\", 400],\n        [\"\
    C\",  100],  [\"XC\", 90],\n        [\"L\",  50],   [\"XL\", 40],\n        [\"\
    X\",  10],   [\"IX\", 9],\n        [\"V\",  5],    [\"IV\", 4],\n        [\"I\"\
    ,  1]\n    ) {\n        my($str, $int) = @$RomanNumeral;\n        my $count =\
    \ int($remainder / $int);\n        $result .= lc($str) x $count;\n        $remainder\
    \ -= $int * $count;\n    }\n    return $result;\n}", "    my $str = \"\";\n  \
    \  my $numeral = \"\";\n    my $count = \"\";\n    my $zero = \"\";\n    for (my\
    \ $i = 0; $i < 4; $i++) {\n        $zero = \"x\" x $i;\n        for (my $j = 1;\
    \ $j < 5; $j++) {\n            $numeral = \"i\" x $j;\n            $count = $zero\
    \ . $numeral;\n            if (chars_to_int($count) == $number) {\n          \
    \      if ($i == 0) {\n                    $str = lc($numeral);\n            \
    \    } else {\n                    $str = lc($zero) . lc($numeral);\n        \
    \        }\n                return $str;\n            }\n        }\n    }\n  \
    \  return 0;\n}", "    # your code here\n}", "    my $r = \"\";\n    if ($number\
    \ >= 1000) {\n        $r .= \"m\" x ($number / 1000);\n        $number %= 1000;\n\
    \    }\n    if ($number >= 500) {\n        $r .= \"d\";\n        $number -= 500;\n\
    \    }\n    if ($number >= 100) {\n        $r .= \"c\" x ($number / 100);\n  \
    \      $number %= 100;\n    }\n    if ($number >= 50) {\n        $r .= \"l\";\n\
    \        $number -= 50;\n    }\n    if ($number >= 10) {\n        $r .= \"x\"\
    \ x ($number / 10);\n        $number %= 10;\n    }\n    if ($number >= 5) {\n\
    \        $r .= \"v\";\n        $number -= 5;\n    }\n    if ($number >= 1) {\n\
    \        $r .= \"i\" x $number;\n    }\n    return $r;\n}", "    my($digit, $str);\n\
    \    $str = '';\n    my(@letters) = (\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\");\n    my(@numbers) = (1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    foreach $digit (@numbers)\
    \ {\n        while ($number >= $digit) {\n            $str .= $letters[$digit];\n\
    \            $number -= $digit;\n        }\n    }\n    return $str;\n}", "   \
    \ my $answer = \"\";\n    my $tens = $number % 10;\n    $number -= $tens;\n  \
    \  $number /= 10;\n    my $hundreds = $number % 10;\n    $number -= $hundreds;\n\
    \    $number /= 10;\n    my $thousands = $number % 10;\n    $number -= $thousands;\n\
    \    $number /= 10;\n    for(my $i = 0; $i < $thousands; $i++) {\n        $answer\
    \ .= \"m\";\n    }\n    if($hundreds == 9) {\n        $answer .= \"cm\";\n   \
    \ }\n    elsif($hundreds == 4) {\n        $answer .= \"cd\";\n    }\n    else\
    \ {\n        if($hundreds >= 5) {\n            $answer .= \"d\";\n           \
    \ $hundreds -= 5;\n        }\n        for(my $i = 0; $i < $hundreds; $i++) {\n\
    \            $answer .= \"c\";\n        }\n    }\n    if($tens == 9) {\n     \
    \   $answer .= \"xc\";\n    }\n    elsif($tens == 4) {\n        $answer .= \"\
    xl\";\n    }\n    else {\n        if($tens >= 5) {\n            $answer .= \"\
    l\";\n            $tens -= 5;\n        }\n        for(my $i = 0; $i < $tens; $i++)\
    \ {\n            $answer .= \"x\";\n        }\n    }\n    my $ones = $number %\
    \ 10;\n    $number -= $ones;\n    $number /= 10;\n    if($ones == 9) {\n     \
    \   $answer .= \"ix\";\n    }\n    elsif($ones == 4) {\n        $answer .= \"\
    iv\";\n    }\n    else {\n        if($ones >= 5) {\n            $answer .= \"\
    v\";\n            $ones -= 5;\n        }\n        for(my $i = 0; $i < $ones; $i++)\
    \ {\n            $answer .= \"i\";\n        }\n    }\n    return $answer;\n}",
  "    my($return);\n    $return = \"\";\n    my(@thousands) = qw/m mm mmm/;\n   \
    \ my(@hundreds) = qw/c cc ccc cd d dc dcc dccc cm/;\n    my(@tens) = qw/x xx xxx\
    \ xl l lx lxx lxxx xc/;\n    my(@ones) = qw/i ii iii iv v vi vii viii ix/;\n \
    \   if($number >= 1000) {\n        $return .= $thousands[($number - 1) / 1000];\n\
    \        $number = $number % 1000;\n    }\n    if($number >= 100) {\n        $return\
    \ .= $hundreds[($number - 1) / 100];\n        $number = $number % 100;\n    }\n\
    \    if($number >= 10) {\n        $return .= $tens[($number - 1) / 10];\n    \
    \    $number = $number % 10;\n    }\n    if($number >= 1) {\n        $return .=\
    \ $ones[($number - 1)];\n    }\n    return $return;\n}", "    return join('',\
    \ map { $roman_numeral_map->{$_} } @{number_to_roman_numeral($number)});\n}",
  "    my $roman = '';\n    my $remaining = $number;\n    my $thousands = int($remaining\
    \ / 1000);\n    $remaining -= $thousands * 1000;\n    my $hundreds = int($remaining\
    \ / 100);\n    $remaining -= $hundreds * 100;\n    my $tens = int($remaining /\
    \ 10);\n    $remaining -= $tens * 10;\n    for (1..$thousands) {\n        $roman\
    \ .= 'm';\n    }\n    $roman .= 'c' x $hundreds;\n    $roman .= 'x' x $tens;\n\
    \    $roman .= 'i' x $remaining;\n    $roman =~ s/cm/d/g;\n    $roman =~ s/m{4}/xl/g;\n\
    \    $roman =~ s/xl{4}/m/g;\n    $roman =~ s/xm/l/g;\n    $roman =~ s/x{4}/l/g;\n\
    \    $roman =~ s/cd/d/g;\n    $roman =~ s/d{4}/c/g;\n    $roman =~ s/dm/m/g;\n\
    \    $roman =~ s/d{4}/c/g;\n    $roman =~ s/xc/l/g;\n    $roman =~ s/c{4}/l/g;\n\
    \    $roman =~ s/xl/c/g;\n    $roman =~ s/l{4}/x/g;\n    $roman =~ s/il/x/g;\n\
    \    $roman =~ s/ix/v/g;\n    $roman =~ s/iv/v/g;\n    $roman =~ s/v{4}/i/g;\n\
    \    $roman =~ s/viv/i/g;\n    $roman =~ s/vvi/i/g;\n    $roman =~ s/ii{4}/i/g;\n\
    \    $roman =~ s/ii{4}/i/g;\n    $roman =~ s/viiii/ix/g;\n    $roman =", "   \
    \ my $result = \"\";\n    my @romans = (\"x\", \"ix\", \"v\", \"iv\", \"i\");\n\
    \    my @values = (10, 9, 5, 4, 1);\n    for (my $i = 0; $i < @values; $i++) {\n\
    \        while ($number >= $values[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $values[$i];\n        }\n    }\n    return $result;\n}",
  "    my $result = '';\n    my $temp;\n    while ($number > 0) {\n        if ($number\
    \ >= 1000) {\n            $temp = int($number / 1000);\n            $result .=\
    \ 'm' x $temp;\n            $number -= $temp * 1000;\n        } elsif ($number\
    \ >= 500) {\n            $temp = int($number / 500);\n            $result .= 'd'\
    \ x $temp;\n            $number -= $temp * 500;\n        } elsif ($number >= 100)\
    \ {\n            $temp = int($number / 100);\n            $result .= 'c' x $temp;\n\
    \            $number -= $temp * 100;\n        } elsif ($number >= 50) {\n    \
    \        $temp = int($number / 50);\n            $result .= 'l' x $temp;\n   \
    \         $number -= $temp * 50;\n        } elsif ($number >= 10) {\n        \
    \    $temp = int($number / 10);\n            $result .= 'x' x $temp;\n       \
    \     $number -= $temp * 10;\n        } elsif ($number >= 5) {\n            $temp\
    \ = int($number / 5);\n            $result .= 'v' x $temp;\n            $number\
    \ -= $temp * 5;\n        } else {\n            $result .= 'i' x $number;\n   \
    \         $number = 0;\n        }\n    }\n    return $result;\n}", "    my $roman;\n\
    \    my $to_print;\n    my @ones = (0,'i','ii','iii','iv','v','vi','vii','viii','ix');\n\
    \    my @tens = (0,'x','xx','xxx','xl','l','lx','lxx','lxxx','xc');\n    my @hundreds\
    \ = (0,'c','cc','ccc','cd','d','dc','dcc','dccc','cm');\n    my @thousands = (0,'m','mm','mmm');\n\
    \    my $ones = $number % 10;\n    my $tens = int(($number % 100) / 10);\n   \
    \ my $hundreds = int(($number % 1000) / 100);\n    my $thousands = int($number\
    \ / 1000);\n    $roman = $thousands[$thousands] . $hundreds[$hundreds] . $tens[$tens]\
    \ . $ones[$ones];\n    $roman =~ tr/A-Z/a-z/;\n    return $roman;\n}", "    my\
    \ $result;\n    my $value;\n    for my $roman (keys %roman_to_int) {\n       \
    \ $value = $roman_to_int{$roman};\n        while ($number >= $value) {\n     \
    \       $result .= $roman;\n            $number -= $value;\n        }\n    }\n\
    \    return $result;\n}", "    my %mini_roman_numerals = (\n        1 => 'i',\n\
    \        2 => 'ii',\n        3 => 'iii',\n        4 => 'iv',\n        5 => 'v',\n\
    \        6 => 'vi',\n        7 => 'vii',\n        8 => 'viii',\n        9 => 'ix',\n\
    \        10 => 'x',\n        20 => 'xx',\n        30 => 'xxx',\n        40 =>\
    \ 'xl',\n        50 => 'l',\n        60 => 'lx',\n        70 => 'lxx',\n     \
    \   80 => 'lxxx',\n        90 => 'xc',\n        100 => 'c',\n        200 => 'cc',\n\
    \        300 => 'ccc',\n        400 => 'cd',\n        500 => 'd',\n        600\
    \ => 'dc',\n        700 => 'dcc',\n        800 => 'dccc',\n        900 => 'cm',\n\
    \        1000 => 'm',\n    );\n    my @thousands = ('', map {$mini_roman_numerals{1000}}\
    \ 1..3);\n    my @hundreds = ('', map {$mini_roman_numerals{100}} 1..9);\n   \
    \ my @tens = ('', map {$mini_roman_numerals{10}} 1..9);\n    my @ones = ('', map\
    \ {$mini_roman_numerals{1}} 1..9);\n    my @numerals = (\n        $thousands[$number\
    \ / 1000],\n        $hundreds[($number % 1000) / 100],\n        $tens[($number\
    \ % 100) / 10],\n        $ones[$number % 10],\n    );\n    my $roman_numeral =\
    \ join '', @numerals;\n    return $roman_numeral;\n}", "    my $result = \"\"\
    ;\n    # Handle the ones digit.\n    if($number >= 1) {\n\t$result .= \"i\" x\
    \ ($number % 10);\n    }\n    # Handle the tens digit.\n    if($number >= 10)\
    \ {\n\t$result = (\"x\" x (($number % 100) / 10)) . $result;\n    }\n    # Handle\
    \ the hundreds digit.\n    if($number >= 100) {\n\t$result = (\"c\" x (($number\
    \ % 1000) / 100)) . $result;\n    }\n    # Handle the thousands digit.\n    if($number\
    \ >= 1000) {\n\t$result = (\"m\" x ($number / 1000)) . $result;\n    }\n    return\
    \ $result;\n}", "    my($result) = \"\";\n    my(@m) = (1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1);\n    my(@r) = (\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\");\n    my($i)\
    \ = 0;\n    while ($number > 0) {\n        while ($number >= $m[$i]) {\n     \
    \       $result .= $r[$i];\n            $number -= $m[$i];\n        }\n      \
    \  $i++;\n    }\n    return $result;\n}", "    my @ones = qw(i ii iii iv v vi\
    \ vii viii ix);\n    my @tens = qw(x xx xxx xl l lx lxx lxxx xc);\n    my @hundreds\
    \ = qw(c cc ccc cd d dc dcc dccc cm);\n    my @thousands = qw(m mm mmm);\n   \
    \ my @digits = reverse split(\"\", $number);\n    while (scalar @digits < 4) {\n\
    \        push @digits, 0;\n    }\n    my @romans = ();\n    for (my $i = 0; $i\
    \ < 4; $i++) {\n        push @romans, $thousands[$digits[0] - 1] if $i == 0;\n\
    \        push @romans, $hundreds[$digits[1] - 1] if $i == 1;\n        push @romans,\
    \ $tens[$digits[2] - 1] if $i == 2;\n        push @romans, $ones[$digits[3] -\
    \ 1] if $i == 3;\n    }\n    return join(\"\", @romans);\n}", "    if ($number\
    \ < 1 || $number > 1000) {\n        die \"int_to_mini_roman($number) is outside\
    \ the range 1..1000.\";\n    }\n    my $result = \"\";\n    while ($number >=\
    \ 1000) {\n        $result .= \"m\";\n        $number -= 1000;\n    }\n    if\
    \ ($number >= 900) {\n        $result .= \"cm\";\n        $number -= 900;\n  \
    \  }\n    if ($number >= 500) {\n        $result .= \"d\";\n        $number -=\
    \ 500;\n    }\n    if ($number >= 400) {\n        $result .= \"cd\";\n       \
    \ $number -= 400;\n    }\n    while ($number >= 100) {\n        $result .= \"\
    c\";\n        $number -= 100;\n    }\n    if ($number >= 90) {\n        $result\
    \ .= \"xc\";\n        $number -= 90;\n    }\n    if ($number >= 50) {\n      \
    \  $result .= \"l\";\n        $number -= 50;\n    }\n    if ($number >= 40) {\n\
    \        $result .= \"xl\";\n        $number -= 40;\n    }\n    while ($number\
    \ >= 10) {\n        $result .= \"x\";\n        $number -= 10;\n    }\n    if ($number\
    \ >= 9) {\n        $result .= \"ix\";\n        $number -= 9;\n    }\n    if ($number\
    \ >= 5) {\n        $result .= \"v\";\n        $number -= 5;\n    }\n    if ($number\
    \ >= 4) {\n        $result .= \"iv\";\n        $number -= 4;\n    }\n    while\
    \ ($number >= 1) {\n        $result .= \"i\";\n        $number -= 1;\n    }\n\
    \    return $result;\n}", "    my($output,$i,$divisor,$digits,$digits_string);\n\
    \    $output = \"\";\n    $i = 0;\n    $divisor = 1;\n    while($i < 3) {\n  \
    \      $digits = int($number/$divisor) % 10;\n        $digits_string = romans_1_to_9($digits);\n\
    \        $output = $digits_string . $output;\n        $divisor = $divisor * 10;\n\
    \        $i = $i + 1;\n    }\n    return($output);\n}", "    my $out = \"\";\n\
    \    foreach my $k (reverse(1..$#mini_romans)) {\n        while($number >= $k)\
    \ {\n            $out .= $mini_romans[$k];\n            $number -= $k;\n     \
    \   }\n    }\n    return $out;\n}", "    my %convert = (\n        '1'    => 'i',\n\
    \        '5'    => 'v',\n        '10'   => 'x',\n        '50'   => 'l',\n    \
    \    '100'  => 'c',\n        '500'  => 'd',\n        '1000' => 'm',\n    );\n\
    \    my $roman = '';\n    my $num_copy = $number;\n    while ($num_copy > 0) {\n\
    \        if ($num_copy >= 1000) {\n            $roman .= 'm';\n            $num_copy\
    \ -= 1000;\n        }\n        elsif ($num_copy >= 900) {\n            $roman\
    \ .= 'cm';\n            $num_copy -= 900;\n        }\n        elsif ($num_copy\
    \ >= 500) {\n            $roman .= 'd';\n            $num_copy -= 500;\n     \
    \   }\n        elsif ($num_copy >= 400) {\n            $roman .= 'cd';\n     \
    \       $num_copy -= 400;\n        }\n        elsif ($num_copy >= 100) {\n   \
    \         $roman .= 'c';\n            $num_copy -= 100;\n        }\n        elsif\
    \ ($num_copy >= 90) {\n            $roman .= 'xc';\n            $num_copy -= 90;\n\
    \        }\n        elsif ($num_copy >= 50) {\n            $roman .= 'l';\n  \
    \          $num_copy -= 50;\n        }\n        elsif ($num_copy >= 40) {\n  \
    \          $roman .= 'xl';\n            $num_copy -= 40;\n        }\n        elsif\
    \ ($num_copy >= 10) {\n            $roman .= 'x';\n            $num_copy -= 10;\n\
    \        }\n        elsif ($num_copy >= 9) {\n            $roman .= 'ix';\n  \
    \          $num_copy -= 9;\n        }\n        elsif ($num_copy >= 5) {\n    \
    \        $roman .= 'v';\n            $num_copy -= 5;\n        }\n        elsif\
    \ ($num_copy >= 4) {\n            $roman .= 'iv';\n            $num_copy -=",
  "    my $mini_roman_string = \"\";\n    my $digit;\n    my $count;\n    my @digits\
    \ = (1, 5, 10, 50, 100, 500, 1000);\n    my @mini_roman_digits = ('i', 'v', 'x',\
    \ 'l', 'c', 'd', 'm');\n    # start at the biggest digit (1000) and work our way\
    \ down,\n    # checking if the number is bigger than the current digit.\n    #\
    \ if it is, add a string of that roman numeral to the roman\n    # numeral string.\
    \ if it isn't, move on to the next biggest\n    # digit and repeat.\n    # So\
    \ 426 would start at 500, since it's bigger than 426,\n    # move on to 100, which\
    \ is less than 426, so add a 'c',\n    # and subtract 100 from 426, getting 326.\
    \ \n    # Next we try 50. 50 is less than 326, so add a 'l' and subtract 50 from\
    \ 326\n    # to get 276. Next we try 10. 10 is less than 276, so add 'xx' and\
    \ subtract\n    # 20 from 276 to get 256. Next we try 5. 5 is less than 256, so\
    \ add a 'v'\n    # and subtract 5 from 256 to get 251. Next we try 1. 1 is less\
    \ than 251,\n    # so add an 'i' and subtract 1 from 251 to get 250. Next we try\
    \ 5. 5 is\n    # bigger than 250, so we move on to 1. 1 is less than 250, so add\
    \ an 'i'\n    # and subtract 1 from 250 to get 249. Next we try 5. 5 is bigger\
    \ than 249,\n    # so we move on to 1. 1 is less than 249, so add an 'i' and subtract\
    \ 1 from\n    # 249 to get 248. Next we try 5. 5 is bigger than 248, so we move\
    \ on to 1.\n    # 1 is less than 248, so add an 'i' and subtract 1 from 248 to\
    \ get 247.\n    # Next we try 5. 5 is bigger than 247, so we move on to 1. 1 is\
    \ less than\n    # 247, so add an 'i' and subtract 1 from 247 to get 246. Next\
    \ we try 5. 5\n    # is bigger than 246", "    my $mini_roman = \"\";\n    my\
    \ $temp = $number;\n    if ($temp >= 1000) {\n        $mini_roman .= \"m\";\n\
    \        $temp -= 1000;\n    } elsif ($temp >= 900) {\n        $mini_roman .=\
    \ \"cm\";\n        $temp -= 900;\n    } elsif ($temp >= 500) {\n        $mini_roman\
    \ .= \"d\";\n        $temp -= 500;\n    } elsif ($temp >= 400) {\n        $mini_roman\
    \ .= \"cd\";\n        $temp -= 400;\n    } elsif ($temp >= 100) {\n        $mini_roman\
    \ .= \"c\";\n        $temp -= 100;\n    } elsif ($temp >= 90) {\n        $mini_roman\
    \ .= \"xc\";\n        $temp -= 90;\n    } elsif ($temp >= 50) {\n        $mini_roman\
    \ .= \"l\";\n        $temp -= 50;\n    } elsif ($temp >= 40) {\n        $mini_roman\
    \ .= \"xl\";\n        $temp -= 40;\n    } elsif ($temp >= 10) {\n        $mini_roman\
    \ .= \"x\";\n        $temp -= 10;\n    } elsif ($temp >= 9) {\n        $mini_roman\
    \ .= \"ix\";\n        $temp -= 9;\n    } elsif ($temp >= 5) {\n        $mini_roman\
    \ .= \"v\";\n        $temp -= 5;\n    } elsif ($temp >= 4) {\n        $mini_roman\
    \ .= \"iv\";\n        $temp -= 4;\n    } elsif ($temp >= 1) {\n        $mini_roman\
    \ .= \"i\";\n        $temp -= 1;\n    }\n    return $mini_roman;\n}", "    my\
    \ %numbers = (\n            1   => 'i',\n            5   => 'v',\n           \
    \ 10  => 'x',\n            50  => 'l',\n            100 => 'c',\n            500\
    \ => 'd',\n            1000 => 'm',\n    );\n    my $numeral = '';\n    my $skip_next_one\
    \ = 0;\n    for my $div (1000, 500, 100, 50, 10, 5, 1) {\n        my $multiple\
    \ = int($number / $div);\n        if ($multiple == 4 && !$skip_next_one) {\n \
    \           $numeral .= $numbers{$div} . $numbers{$div * 5};\n            $skip_next_one\
    \ = 1;\n        }\n        elsif ($multiple == 9 && !$skip_next_one) {\n     \
    \       $numeral .= $numbers{$div} . $numbers{$div * 10};\n            $skip_next_one\
    \ = 1;\n        }\n        else {\n            $numeral .= $numbers{$div} x $multiple;\n\
    \            $skip_next_one = 0;\n        }\n        $number -= $multiple * $div;\n\
    \    }\n    return $numeral;\n}", "    my($result);\n    my(@list) = (1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    my(@symbols) = (\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\");\n    $result = \"\";\n    for(my $i = 0; $i < scalar(@list); $i++) {\n \
    \       while($number >= $list[$i]) {\n            $result .= $symbols[$i];\n\
    \            $number -= $list[$i];\n        }\n    }\n    return $result;\n}",
  "    my($result);\n    $result = '';\n    while ($number > 0) {\n        if ($number\
    \ >= 1000) {\n            $result .= 'm';\n            $number -= 1000;\n    \
    \    } elsif ($number >= 900) {\n            $result .= 'cm';\n            $number\
    \ -= 900;\n        } elsif ($number >= 500) {\n            $result .= 'd';\n \
    \           $number -= 500;\n        } elsif ($number >= 400) {\n            $result\
    \ .= 'cd';\n            $number -= 400;\n        } elsif ($number >= 100) {\n\
    \            $result .= 'c';\n            $number -= 100;\n        } elsif ($number\
    \ >= 90) {\n            $result .= 'xc';\n            $number -= 90;\n       \
    \ } elsif ($number >= 50) {\n            $result .= 'l';\n            $number\
    \ -= 50;\n        } elsif ($number >= 40) {\n            $result .= 'xl';\n  \
    \          $number -= 40;\n        } elsif ($number >= 10) {\n            $result\
    \ .= 'x';\n            $number -= 10;\n        } elsif ($number >= 9) {\n    \
    \        $result .= 'ix';\n            $number -= 9;\n        } elsif ($number\
    \ >= 5) {\n            $result .= 'v';\n            $number -= 5;\n        } elsif\
    \ ($number >= 4) {\n            $result .= 'iv';\n            $number -= 4;\n\
    \        } elsif ($number >= 1) {\n            $result .= 'i';\n            $number\
    \ -= 1;\n        }\n    }\n    return $result;\n}", "    $number =~ /^\\d+$/ or\
    \ die \"Invalid argument\";\n    $number > 0 or die \"Number must be positive\"\
    ;\n    $number <= 1000 or die \"Number too large\";\n    my $roman_numeral = \"\
    \";\n    while ($number >= 1000) {\n        $roman_numeral .= \"m\";\n       \
    \ $number -= 1000;\n    }\n    while ($number >= 500) {\n        $roman_numeral\
    \ .= \"d\";\n        $number -= 500;\n    }\n    while ($number >= 100) {\n  \
    \      $roman_numeral .= \"c\";\n        $number -= 100;\n    }\n    while ($number\
    \ >= 50) {\n        $roman_numeral .= \"l\";\n        $number -= 50;\n    }\n\
    \    while ($number >= 10) {\n        $roman_numeral .= \"x\";\n        $number\
    \ -= 10;\n    }\n    while ($number >= 5) {\n        $roman_numeral .= \"v\";\n\
    \        $number -= 5;\n    }\n    while ($number >= 1) {\n        $roman_numeral\
    \ .= \"i\";\n        $number -= 1;\n    }\n    $roman_numeral =~ tr/VXLCDM/vxlcdm/;\n\
    \    return $roman_numeral;\n}", "    my $out;\n    my $ones = $number % 10;\n\
    \    my $tens = ($number / 10) % 10;\n    my $hundreds = ($number / 100) % 10;\n\
    \    my $thousands = ($number / 1000) % 10;\n    for(my $i = 0; $i < $thousands;\
    \ $i++) {\n        $out .= \"m\";\n    }\n    for(my $i = 0; $i < $hundreds; $i++)\
    \ {\n        $out .= \"c\";\n    }\n    for(my $i = 0; $i < $tens; $i++) {\n \
    \       $out .= \"x\";\n    }\n    for(my $i = 0; $i < $ones; $i++) {\n      \
    \  $out .= \"i\";\n    }\n    $out =~ s/cccc/cd/g;\n    $out =~ s/xxxx/xl/g;\n\
    \    $out =~ s/iiii/iv/g;\n    $out =~ s/mmmm/cdc/g;\n    $out =~ s/ll/xlx/g;\n\
    \    $out =~ s/vv/ixi/g;\n    $out =~ s/dcccc/cm/g;\n    $out =~ s/cccc/cd/g;\n\
    \    $out =~ s/lxxxx/xc/g;\n    $out =~ s/xxxx/xl/g;\n    $out =~ s/viiii/ix/g;\n\
    \    $out =~ s/iiii/iv/g;\n    return $out;\n}", "    my $result;\n    my $tmp;\n\
    \    while ($number > 0) {\n        if ($number >= 1000) {\n            $tmp =\
    \ int($number / 1000);\n            $result .= \"m\" x $tmp;\n            $number\
    \ = $number % 1000;\n        } elsif ($number >= 500) {\n            $tmp = int($number\
    \ / 500);\n            $result .= \"d\" x $tmp;\n            $number = $number\
    \ % 500;\n        } elsif ($number >= 100) {\n            $tmp = int($number /\
    \ 100);\n            $result .= \"c\" x $tmp;\n            $number = $number %\
    \ 100;\n        } elsif ($number >= 50) {\n            $tmp = int($number / 50);\n\
    \            $result .= \"l\" x $tmp;\n            $number = $number % 50;\n \
    \       } elsif ($number >= 10) {\n            $tmp = int($number / 10);\n   \
    \         $result .= \"x\" x $tmp;\n            $number = $number % 10;\n    \
    \    } elsif ($number >= 5) {\n            $tmp = int($number / 5);\n        \
    \    $result .= \"v\" x $tmp;\n            $number = $number % 5;\n        } elsif\
    \ ($number >= 1) {\n            $tmp = int($number / 1);\n            $result\
    \ .= \"i\" x $tmp;\n            $number = $number % 1;\n        }\n    }\n   \
    \ return $result;\n}", "    my $roman = \"\";\n    my @unities = (\"i\", \"ii\"\
    , \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\");\n    my @tens =\
    \ (\"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\");\n\
    \    my @hundreds = (\"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"\
    dccc\", \"cm\");\n    if ($number > 1000) {\n        return \"error\"\n    }\n\
    \    if ($number >= 100) {\n        $roman .= $hundreds[($number / 100) - 1];\n\
    \        $number %= 100;\n    }\n    if ($number >= 10) {\n        $roman .= $tens[($number\
    \ / 10) - 1];\n        $number %= 10;\n    }\n    if ($number > 0) {\n       \
    \ $roman .= $unities[$number - 1];\n    }\n    return $roman;\n}", "    my $string\
    \ = \"\";\n    for my $i (1..4) {\n        my $digit = $number % 10;\n       \
    \ $number = int($number / 10);\n        if ($digit == 9) {\n            $string\
    \ = \"ix\" . $string;\n        } elsif ($digit >= 5) {\n            $string =\
    \ \"v\" . (\"i\" x ($digit - 5)) . $string;\n        } elsif ($digit == 4) {\n\
    \            $string = \"iv\" . $string;\n        } else {\n            $string\
    \ = (\"i\" x $digit) . $string;\n        }\n    }\n    return $string;\n}", " \
    \   # TODO: implement this function\n    return \"\";\n}", "    my @mini_roman_digits\
    \ = (\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\");\n    my $res = \"\";\n\
    \    my $unit = 0;\n    while ($number > 0) {\n        my $digit = $number % 10;\n\
    \        if ($digit == 4) {\n            $res = $mini_roman_digits[$unit] . $mini_roman_digits[$unit\
    \ + 1] . $res;\n        } elsif ($digit == 9) {\n            $res = $mini_roman_digits[$unit]\
    \ . $mini_roman_digits[$unit + 2] . $res;\n        } else {\n            my $f\
    \ = $mini_roman_digits[$unit + 1] x int($digit / 5);\n            my $s = $mini_roman_digits[$unit]\
    \ x ($digit % 5);\n            $res = $f . $s . $res;\n        }\n        $number\
    \ = int($number / 10);\n        $unit += 2;\n    }\n    return $res;\n}", "  \
    \  my $result = \"\";\n    my $current_value = $number;\n    my $test_value =\
    \ \"\";\n    my @test_values = ();\n    while ($current_value > 0) {\n       \
    \ if ($current_value > 999) {\n            $test_value = \"m\";\n            push\
    \ @test_values, $test_value;\n            $current_value -= 1000;\n        }\n\
    \        elsif ($current_value > 899) {\n            $test_value = \"cm\";\n \
    \           push @test_values, $test_value;\n            $current_value -= 900;\n\
    \        }\n        elsif ($current_value > 499) {\n            $test_value =\
    \ \"d\";\n            push @test_values, $test_value;\n            $current_value\
    \ -= 500;\n        }\n        elsif ($current_value > 399) {\n            $test_value\
    \ = \"cd\";\n            push @test_values, $test_value;\n            $current_value\
    \ -= 400;\n        }\n        elsif ($current_value > 99) {\n            $test_value\
    \ = \"c\";\n            push @test_values, $test_value;\n            $current_value\
    \ -= 100;\n        }\n        elsif ($current_value > 89) {\n            $test_value\
    \ = \"xc\";\n            push @test_values, $test_value;\n            $current_value\
    \ -= 90;\n        }\n        elsif ($current_value > 49) {\n            $test_value\
    \ = \"l\";\n            push @test_values, $test_value;\n            $current_value\
    \ -= 50;\n        }\n        elsif ($current_value > 39) {\n            $test_value\
    \ = \"xl\";\n            push @test_values, $test_value;\n            $current_value\
    \ -= 40;\n        }\n        elsif ($current_value > 9) {\n            $test_value\
    \ = \"x\";\n            push @test_values, $test_value;\n            $current_value\
    \ -= 10;\n        }\n        elsif ($current_value > 8) {\n            $test_value\
    \ = \"ix\";\n            push @test_values,", "    my $res = int_to_mini_roman_helper($number);\n\
    \    return lc($res);\n}", "    my $roman = '';\n    if ($number >= 1000) {\n\
    \        $roman .= int_to_mini_roman($number / 1000) . 'm';\n        $number %=\
    \ 1000;\n    }\n    if ($number >= 900) {\n        $roman .= 'cm';\n        $number\
    \ %= 900;\n    }\n    if ($number >= 500) {\n        $roman .= 'd';\n        $number\
    \ %= 500;\n    }\n    if ($number >= 400) {\n        $roman .= 'cd';\n       \
    \ $number %= 400;\n    }\n    if ($number >= 100) {\n        $roman .= int_to_mini_roman($number\
    \ / 100) . 'c';\n        $number %= 100;\n    }\n    if ($number >= 90) {\n  \
    \      $roman .= 'xc';\n        $number %= 90;\n    }\n    if ($number >= 50)\
    \ {\n        $roman .= 'l';\n        $number %= 50;\n    }\n    if ($number >=\
    \ 40) {\n        $roman .= 'xl';\n        $number %= 40;\n    }\n    if ($number\
    \ >= 10) {\n        $roman .= int_to_mini_roman($number / 10) . 'x';\n       \
    \ $number %= 10;\n    }\n    if ($number >= 9) {\n        $roman .= 'ix';\n  \
    \      $number %= 9;\n    }\n    if ($number >= 5) {\n        $roman .= 'v';\n\
    \        $number %= 5;\n    }\n    if ($number >= 4) {\n        $roman .= 'iv';\n\
    \        $number %= 4;\n    }\n    if ($number >= 1) {\n        $roman .= int_to_mini_roman($number);\n\
    \    }\n    return $roman;\n}", "    return '' if $number <= 0;\n    my @roman_symbols\
    \ = (\n        ['I', 'V'],\n        ['X', 'L'],\n        ['C', 'D'],\n       \
    \ ['M'],\n    );\n    my @roman_numeral;\n    my $index = 0;\n    while ($number\
    \ > 0) {\n        my $digit = $number % 10;\n        $number = int($number / 10);\n\
    \        if ($digit == 0) {\n            $index++;\n            next;\n      \
    \  }\n        if ($digit <= 3) {\n            push @roman_numeral, ($roman_symbols[$index][0])\
    \ x $digit;\n        } elsif ($digit == 4) {\n            push @roman_numeral,\
    \ $roman_symbols[$index][0] . $roman_symbols[$index][1];\n        } elsif ($digit\
    \ <= 8) {\n            push @roman_numeral, $roman_symbols[$index][1] . ($roman_symbols[$index][0])\
    \ x ($digit - 5);\n        } else {\n            push @roman_numeral, $roman_symbols[$index][0]\
    \ . $roman_symbols[$index + 1][0];\n        }\n        $index++;\n    }\n    return\
    \ join('', reverse @roman_numeral);\n}", "    my $romannum = \"\";\n    while\
    \ ($number != 0) {\n        $number -= 1;\n        $romannum .= 'i';\n       \
    \ if (length($romannum) == 3) {\n            chop($romannum);\n            chop($romannum);\n\
    \            chop($romannum);\n            $romannum .= 'v';\n        }\n    \
    \    if (length($romannum) == 5) {\n            chop($romannum);\n           \
    \ chop($romannum);\n            chop($romannum);\n            chop($romannum);\n\
    \            chop($romannum);\n            $romannum .= 'x';\n        }\n    \
    \    if (length($romannum) == 7) {\n            chop($romannum);\n           \
    \ chop($romannum);\n            chop($romannum);\n            chop($romannum);\n\
    \            chop($romannum);\n            chop($romannum);\n            chop($romannum);\n\
    \            $romannum .= 'l';\n        }\n        if (length($romannum) == 9)\
    \ {\n            chop($romannum);\n            chop($romannum);\n            chop($romannum);\n\
    \            chop($romannum);\n            chop($romannum);\n            chop($romannum);\n\
    \            chop($romannum);\n            chop($romannum);\n            chop($romannum);\n\
    \            $romannum .= 'c';\n        }\n        if (length($romannum) == 11)\
    \ {\n            chop($romannum);\n            chop($romannum);\n            chop($romannum);\n\
    \            chop($romannum);\n            chop($romannum);\n            chop($romannum);\n\
    \            chop($romannum);\n            chop($romannum);\n            chop($romannum);\n\
    \            chop($romannum);\n            chop($romannum);\n            $romannum\
    \ .= 'd';\n        }\n        if (length($romannum) == 13) {\n            chop($romannum);\n\
    \            chop($romannum);\n            chop($romannum);\n            chop($romannum);\n\
    \            chop($romannum);\n", "    my @numbers = (1, 4, 5, 9, 10, 40, 50,\
    \ 90, 100, 400, 500, 900, 1000);\n    my @symbols = ('i', 'iv', 'v', 'ix', 'x',\
    \ 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm');\n    my $roman = '';\n    my $i\
    \ = $#numbers;\n    while ($number > 0) {\n        while ($number < $numbers[$i])\
    \ {\n            $i--;\n        }\n        $roman .= $symbols[$i];\n        $number\
    \ -= $numbers[$i];\n    }\n    return $roman;\n}", "    my $out = '';\n    my\
    \ $i = 0;\n    my @string;\n    my @arabic = ( 1000, 500, 100, 50, 10, 5, 1 );\n\
    \    my @roman =  ( 'm', 'd', 'c', 'l', 'x', 'v', 'i' );\n    while ( $number\
    \ > 0 ) {\n        if ( $number >= $arabic[$i] ) {\n            $number -= $arabic[$i];\n\
    \            $out .= $roman[$i];\n        }\n        elsif ( $i % 2 ) {\n    \
    \        if ( $number >= ( $arabic[$i] - $arabic[$i - 1] ) ) {\n             \
    \   $number -= ( $arabic[$i] - $arabic[$i - 1] );\n                $out .= $roman[$i\
    \ - 1] . $roman[$i];\n            }\n            elsif ( $number >= ( $arabic[$i]\
    \ - $arabic[$i - 2] ) ) {\n                $number -= ( $arabic[$i] - $arabic[$i\
    \ - 2] );\n                $out .= $roman[$i - 2] . $roman[$i];\n            }\n\
    \            else {\n                $i++;\n            }\n        }\n       \
    \ else {\n            $i++;\n        }\n    }\n    return $out;\n}", "    my($divisor,\
    \ $dividend, $quotient, $remainder, $roman, $i);\n    $roman = \"\";\n    $dividend\
    \ = $number;\n    $divisor = 1000;\n    for ($i = 0; $i < 4; $i++) {\n       \
    \ $quotient = int($dividend / $divisor);\n        $remainder = $dividend % $divisor;\n\
    \        if ($quotient == 9) {\n            $roman .= $ROMAN_DIGITS[$i];\n   \
    \         $roman .= $ROMAN_DIGITS[$i + 1];\n        } elsif ($quotient == 4) {\n\
    \            $roman .= $ROMAN_DIGITS[$i];\n            $roman .= $ROMAN_DIGITS[$i\
    \ + 2];\n        } else {\n            if ($quotient >= 5) {\n               \
    \ $roman .= $ROMAN_DIGITS[$i + 2];\n                $quotient -= 5;\n        \
    \    }\n            while ($quotient > 0) {\n                $roman .= $ROMAN_DIGITS[$i];\n\
    \                $quotient--;\n            }\n        }\n        $dividend = $remainder;\n\
    \        $divisor /= 10;\n    }\n    return $roman;\n}", "    my($roman_number);\n\
    \    #\n    # Convert the number to its equivalent in mini roman numerals.\n \
    \   #\n    # Use the division method to figure out what symbols to put in the\n\
    \    # answer.\n    #\n    # The division method is similar to the division method\
    \ for doing\n    # division on paper (e.g. long division).  The idea is to keep\n\
    \    # subtracting the largest possible multiple of a number from the\n    # number\
    \ you are trying to convert.  The multiples you subtract\n    # are the symbols\
    \ you use to represent the number you are\n    # converting.\n    #\n    # To\
    \ convert 478 to roman numerals, you would try to subtract\n    # numbers like\
    \ 1000, 500, 100, 10, and 1.  You can subtract\n    # multiples of 1000 (M) from\
    \ 478.  Since 478 >= 1000, you put an\n    # M in the answer.  Next you would\
    \ try to subtract a multiple of\n    # 500.  Since 478 < 500, you don't put any\
    \ symbols in the answer.\n    # Next you would try to subtract a multiple of 100\
    \ (C).  Since\n    # 478 - 400 = 78 >= 0, you put a C in the answer.  Next you\
    \ would\n    # try to subtract a multiple of 10 (X).  Since 78 - 70 = 8 >= 0,\n\
    \    # you put an X in the answer.  Next you would try to subtract a\n    # multiple\
    \ of 1 (I).  Since 8 - 8 = 0 >= 0, you put an I in the\n    # answer.  Now you\
    \ have subtracted the largest possible multiple\n    # of each number, so you\
    \ are done.  So 478 in roman numerals is\n    # MCDLXXVIII.\n    #\n    # To convert\
    \ 26 to roman numerals, you would try to subtract\n    # numbers like 1000, 500,\
    \ 100, 10, and 1.  You can't subtract\n    # multiples of 1000 from 26, so you\
    \ don't put any symbols in the\n    # answer.  Next you would try to subtract\
    \ a multiple of 500.  You\n    # can't subtract multiples of 500 from 26, so you\
    \ don't put any\n    # symbols in the answer.  Next you would try to subtract\
    \ a", "    my $result;\n    my %roman_numerals = (1000 => 'm', 900 => 'cm', 500\
    \ => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\
    \ 10 => 'x', 9 => 'ix',\n        5 => 'v', 4 => 'iv', 1 => 'i');\n    while($number){\n\
    \        foreach my $i (sort {$b <=> $a} keys %roman_numerals){\n            if($number\
    \ >= $i){\n                $result .= $roman_numerals{$i};\n                $number\
    \ -= $i;\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "    return undef unless defined $number;\n    return '' unless $number;\n\
    \    return 'i' x $number if $number < 10;\n    my $result = '';\n    while ($number\
    \ >= 10) {\n        $result .= 'x';\n        $number -= 10;\n    }\n    $result\
    \ .= \"v${\"i\" x $number}\" if $number > 5;\n    $result .= \"iv\" if $number\
    \ == 4;\n    $result .= \"i\" x $number if $number < 4;\n    return $result;\n\
    }", "    # Fill in code here\n    return \"\";\n}", "    my $roman = \"\";\n \
    \   my @N = qw(m d c l x v i);\n    my @V = qw(1000 500 100 50 10 5 1);\n    for\
    \ (my $i = 0; $i < 7; $i+=2) {\n        my $x = int($number / $V[$i]);\n     \
    \   if ($x < 4) {\n            $roman .= $N[$i] x $x;\n        } elsif ($x ==\
    \ 4) {\n            $roman .= $N[$i] . $N[$i-1];\n        } elsif ($x > 4 && $x\
    \ < 9) {\n            $roman .= $N[$i-1] . $N[$i] x ($x-5);\n        } elsif ($x\
    \ == 9) {\n            $roman .= $N[$i] . $N[$i-2];\n        }\n        $number\
    \ %= $V[$i];\n    }\n    $roman;\n}", "    my $result = \"\";\n    my $numeral\
    \ = \"\";\n    my $digit = 0;\n    my $digit2 = 0;\n    my $value = \"\";\n  \
    \  my $value2 = \"\";\n    my $value3 = \"\";\n    my @numerals = ('i', 'v', 'x',\
    \ 'l', 'c', 'd', 'm');\n    my $value_of_digit = 0;\n    my $test_value = 0;\n\
    \    my $test_value2 = 0;\n    my $power = 0;\n    my $thousands = 0;\n    my\
    \ $hundreds = 0;\n    my $tens = 0;\n    my $ones = 0;\n    my $string_of_ones\
    \ = \"\";\n    my $string_of_tens = \"\";\n    my $string_of_hundreds = \"\";\n\
    \    my $string_of_thousands = \"\";\n    $digit = 1;\n    $numeral = \"\";\n\
    \    $power = 0;\n    $string_of_ones = \"\";\n    $string_of_tens = \"\";\n \
    \   $string_of_hundreds = \"\";\n    $string_of_thousands = \"\";\n    while ($number\
    \ > 0) {\n        $digit = $number % 10;\n        $number = int ($number / 10);\n\
    \        $value_of_digit = $digit * 10 ** $power;\n        if ($power == 0) {\n\
    \            if ($digit == 1) {\n                $string_of_ones = $numerals[0];\n\
    \            }\n            elsif ($digit == 2) {\n                $string_of_ones\
    \ = $numerals[0] . $numerals[0];\n            }\n            elsif ($digit ==\
    \ 3) {\n                $string_of_ones = $numerals[0] . $numerals[0] . $numerals[0];\n\
    \            }\n            elsif ($digit == 4) {\n                $string_of_ones\
    \ = $numerals[0] . $numerals[1];\n            }\n            elsif ($digit ==\
    \ 5) {\n                $string_of_ones = $", "    my @numerals = qw[i v x l c\
    \ d m];\n    my $numerals_index = 0;\n    my $result = '';\n    while ($number\
    \ > 0) {\n        my $digit = $number % 10;\n        if ($digit == 9) {\n    \
    \        $result = $numerals[$numerals_index] . $numerals[$numerals_index + 2]\
    \ . $result;\n        } elsif ($digit == 4) {\n            $result = $numerals[$numerals_index]\
    \ . $numerals[$numerals_index + 1] . $result;\n        } else {\n            if\
    \ ($digit >= 5) {\n                $result = $numerals[$numerals_index + 1] .\
    \ $result;\n                $digit -= 5;\n            }\n            $result =\
    \ $numerals[$numerals_index] x $digit . $result;\n        }\n        $number =\
    \ int($number / 10);\n        $numerals_index += 2;\n    }\n    return $result;\n\
    }", "    my $result = '';\n    my $count = 0;\n    my $m_count = 0;\n    $count\
    \ = ($number / 100) % 10;\n    $m_count = $count / 5;\n    $result .= 'c' x ($count\
    \ - $m_count);\n    $result .= 'm' x $m_count;\n    $count = ($number / 10) %\
    \ 10;\n    $m_count = $count / 5;\n    $result .= 'x' x ($count - $m_count);\n\
    \    $result .= 'l' x $m_count;\n    $count = $number % 10;\n    $m_count = $count\
    \ / 5;\n    $result .= 'i' x ($count - $m_count);\n    $result .= 'v' x $m_count;\n\
    \    return $result;\n}", "    my %mini_roman_number_for = (\n        1 => 'i',\n\
    \        5 => 'v',\n        10 => 'x',\n        50 => 'l',\n        100 => 'c',\n\
    \        500 => 'd',\n        1000 => 'm',\n    );\n    my $result = '';\n   \
    \ my $remainder = $number;\n    my @keys = sort { $b <=> $a } keys %mini_roman_number_for;\n\
    \    foreach my $key (@keys) {\n        while ($remainder >= $key) {\n       \
    \     $result .= $mini_roman_number_for{$key};\n            $remainder -= $key;\n\
    \        }\n    }\n    return $result;\n}", "    my($roman);\n    if($number <=\
    \ 3) {\n        $roman = \"i\" x $number;\n    } elsif($number == 4) {\n     \
    \   $roman = \"iv\";\n    } elsif($number <= 8) {\n        $roman = \"v\" . (\"\
    i\" x ($number - 5));\n    } elsif($number == 9) {\n        $roman = \"ix\";\n\
    \    } elsif($number <= 39) {\n        $roman = \"x\" x int($number / 10);\n \
    \       $roman .= int_to_mini_roman($number % 10);\n    } elsif($number <= 49)\
    \ {\n        $roman = \"xl\" . int_to_mini_roman($number % 10);\n    } elsif($number\
    \ <= 89) {\n        $roman = \"l\" . int_to_mini_roman($number % 10);\n    } elsif($number\
    \ <= 99) {\n        $roman = \"xc\" . int_to_mini_roman($number % 10);\n    }\
    \ elsif($number <= 399) {\n        $roman = \"c\" x int($number / 100);\n    \
    \    $roman .= int_to_mini_roman($number % 100);\n    } elsif($number <= 499)\
    \ {\n        $roman = \"cd\" . int_to_mini_roman($number % 100);\n    } elsif($number\
    \ <= 899) {\n        $roman = \"d\" . int_to_mini_roman($number % 100);\n    }\
    \ elsif($number <= 999) {\n        $roman = \"cm\" . int_to_mini_roman($number\
    \ % 100);\n    } elsif($number == 1000) {\n        $roman = \"m\";\n    } else\
    \ {\n        die \"int_to_mini_roman: $number is out of range\";\n    }\n    return\
    \ $roman;\n}", "    my $return = '';\n    my $i = 0;\n    while ($number >= $subtractors[$i])\
    \ {\n        $return .= $subtractand[$i];\n        $number -= $subtractors[$i];\n\
    \    }\n    my $add = '';\n    foreach (1..4) {\n        $add .= $subtractand[$i];\n\
    \        if ($number + $subtractors[$i] >= $subtractors[$i+1]) {\n           \
    \ $return .= $add;\n            $number -= $subtractors[$i+1] - $subtractors[$i];\n\
    \            $add = '';\n        }\n    }\n    $return .= $add;\n    return $return;\n\
    }", "    my $result = '';\n    my $romans = {\n      M => 1000,\n      D => 500,\n\
    \      C => 100,\n      L => 50,\n      X => 10,\n      V => 5,\n      I => 1\n\
    \    };\n    foreach my $roman (keys %$romans) {\n      my $factor = int($number\
    \ / $romans->{$roman});\n      $result .= $roman x $factor;\n      $number -=\
    \ $factor * $romans->{$roman};\n    }\n    return $result;\n}", "    my $remainder\
    \ = $number;\n    my $output = \"\";\n    my @values = (1000, 500, 100, 50, 10,\
    \ 5, 1);\n    my @symbols = (\"m\", \"d\", \"c\", \"l\", \"x\", \"v\", \"i\");\n\
    \    for(my $i = 0; $i < scalar(@values); $i++) {\n        my $div = int($remainder\
    \ / $values[$i]);\n        if($div) {\n            $output .= ($symbols[$i] x\
    \ $div);\n            $remainder -= ($values[$i] * $div);\n        }\n    }\n\
    \    return $output;\n}", "    my $roman = \"\";\n    my $numeral;\n    my @symbols\
    \ = ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i');\n\
    \    my @values = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n  \
    \  while($number > 0) {\n        # find the largest value we can subtract from\
    \ the given number\n        foreach $numeral (@values) {\n            if($number\
    \ >= $numeral) {\n                $number -= $numeral;\n                $roman\
    \ .= $symbols[$numeral];\n                last;\n            }\n        }\n  \
    \  }\n    return $roman;\n}", "    my @result;\n    foreach my $value (reverse\
    \ sort keys %values) {\n        my $times = int($number / $value);\n        $number\
    \ -= $times * $value;\n        push @result, $values{$value} x $times;\n    }\n\
    \    return join \"\", @result;\n}", "    my($result);\n    my($ones, $tens, $hundreds,\
    \ $thousands);\n    my(@numbers) = (1, 5, 10, 50, 100, 500, 1000);\n    my(@mini_romans)\
    \ = ('i', 'v', 'x', 'l', 'c', 'd', 'm');\n    if ($number >= 1000) {\n       \
    \ $thousands = int($number / 1000);\n        $number = $number % 1000;\n     \
    \   $result .= 'm' x $thousands;\n    }\n    if ($number >= 100) {\n        $hundreds\
    \ = int($number / 100);\n        $number = $number % 100;\n        $result .=\
    \ 'c' x $hundreds;\n    }\n    if ($number >= 10) {\n        $tens = int($number\
    \ / 10);\n        $number = $number % 10;\n        $result .= 'x' x $tens;\n \
    \   }\n    if ($number >= 1) {\n        $ones = $number;\n        $result .= 'i'\
    \ x $ones;\n    }\n    $result =~ s/iiiii/v/g;\n    $result =~ s/iiii/iv/g;\n\
    \    $result =~ s/vvvv/x/g;\n    $result =~ s/vvv/ix/g;\n    $result =~ s/xxxxx/l/g;\n\
    \    $result =~ s/xxxx/xl/g;\n    $result =~ s/lllll/c/g;\n    $result =~ s/llll/xc/g;\n\
    \    $result =~ s/ccccc/d/g;\n    $result =~ s/cccc/cd/g;\n    $result =~ s/ddddd/m/g;\n\
    \    $result =~ s/dddd/cm/g;\n    return($result);\n}", "    my @x = qw(i v x\
    \ l c d m);\n    my $res = '';\n    while ($number) {\n        my $d = $number\
    \ % 10;\n        if ($d == 9) {\n            $res = $x[0] . $x[2] . $res;\n  \
    \      } elsif ($d == 4) {\n            $res = $x[0] . $x[1] . $res;\n       \
    \ } else {\n            if ($d >= 5) {\n                $res = $x[1] . $res;\n\
    \                $d -= 5;\n            }\n            $res = $x[0] x $d . $res;\n\
    \        }\n        $number = int($number / 10);\n        shift @x;\n    }\n \
    \   return $res;\n}", "    my @mini = ('i', 'v', 'x', 'l', 'c', 'd', 'm');\n \
    \   my @digit = split(\"\", sprintf(\"%03d\", $number));\n    my @out = ();\n\
    \    my $out;\n    foreach my $i (0..2) {\n        if ($digit[$i] == 0) {\n  \
    \          next;\n        }\n        elsif ($digit[$i] < 4) {\n            push(@out,\
    \ ($mini[$i * 2] x $digit[$i]));\n        }\n        elsif ($digit[$i] == 4) {\n\
    \            push(@out, $mini[$i * 2] . $mini[$i * 2 + 1]);\n        }\n     \
    \   elsif ($digit[$i] < 9) {\n            push(@out, $mini[$i * 2 + 1] . ($mini[$i\
    \ * 2] x ($digit[$i] - 5)));\n        }\n        else {\n            push(@out,\
    \ $mini[$i * 2] . $mini[$i * 2 + 2]);\n        }\n    }\n    $out = join(\"\"\
    , @out);\n    return $out;\n}", "    return 'romans only go up to m (1000)';\n\
    }", "    my @ones = ('i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix');\n\
    \    my @tens = ('x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx', 'xc');\n  \
    \  my @hundreds = ('c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc', 'dccc', 'cm');\n\
    \    my @thousands = ('m', 'mm', 'mmm');\n    my $result = '';\n    my $thousands\
    \ = int($number / 1000);\n    $result .= $thousands[$thousands - 1] if $thousands;\n\
    \    $number %= 1000;\n    my $hundreds = int($number / 100);\n    $result .=\
    \ $hundreds[$hundreds - 1] if $hundreds;\n    $number %= 100;\n    my $tens =\
    \ int($number / 10);\n    $result .= $tens[$tens - 1] if $tens;\n    $number %=\
    \ 10;\n    $result .= $ones[$number - 1] if $number;\n    return $result;\n}",
  "    my @roman_elements = ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix',\
    \ 'v', 'iv', 'i');\n    my @numerals = (1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1);\n    my $str = '';\n    foreach(0..@numerals-1) {\n       \
    \ while($number >= $numerals[$_]) {\n            $str .= $roman_elements[$_];\n\
    \            $number -= $numerals[$_];\n        }\n    }\n    return $str;\n}",
  "    my($s, $t, $u, $v, $r);\n    my $ones = {1 => 'i', 2 => 'ii', 3 => 'iii', 4\
    \ => 'iv', 5 => 'v', 6 => 'vi', 7 => 'vii', 8 => 'viii', 9 => 'ix'};\n    my $tens\
    \ = {1 => 'x', 2 => 'xx', 3 => 'xxx', 4 => 'xl', 5 => 'l', 6 => 'lx', 7 => 'lxx',\
    \ 8 => 'lxxx', 9 => 'xc'};\n    my $hund = {1 => 'c', 2 => 'cc', 3 => 'ccc', 4\
    \ => 'cd', 5 => 'd', 6 => 'dc', 7 => 'dcc', 8 => 'dccc', 9 => 'cm'};\n    my $thou\
    \ = {1 => 'm', 2 => 'mm', 3 => 'mmm'};\n    $t = int($number / 10);\n    $s =\
    \ int($t / 10);\n    $u = int($s / 10);\n    $v = int($u / 10);\n    $r = $v ?\
    \ $thou->{$v} : '';\n    $r .= $u ? $hund->{$u} : '';\n    $r .= $s ? $tens->{$s}\
    \ : '';\n    $r .= $t ? $ones->{$t} : '';\n    $r .= $number % 10 ? $ones->{$number\
    \ % 10} : '';\n    return $r;\n}", "    my $result = '';\n    if ($number <= 0\
    \ || $number > 1000) {\n        return \"Error - number must be between 1 and\
    \ 1000\"\n    }\n    $result .= 'x'x(($number-($number%10))/10);\n    $number\
    \ %= 10;\n    if ($number == 9) {\n        $result .= 'ix';\n    }\n    elsif\
    \ ($number >= 5) {\n        $result .= 'v';\n        $result .= 'i'x($number-5);\n\
    \    }\n    elsif ($number == 4) {\n        $result .= 'iv';\n    }\n    else\
    \ {\n        $result .= 'i'x$number;\n    }\n    return $result;\n}", "    my\
    \ $roman = int_to_roman($number);\n    $roman =~ s/I/i/g;\n    $roman =~ s/V/v/g;\n\
    \    $roman =~ s/X/x/g;\n    $roman =~ s/L/l/g;\n    $roman =~ s/C/c/g;\n    $roman\
    \ =~ s/D/d/g;\n    $roman =~ s/M/m/g;\n    return $roman;\n}", "    my $roman\
    \ = '';\n    while ($number > 0) {\n        if ($number >= 100) {\n          \
    \  $roman .= 'c';\n            $number -= 100;\n        } elsif ($number >= 90)\
    \ {\n            $roman .= 'xc';\n            $number -= 90;\n        } elsif\
    \ ($number >= 50) {\n            $roman .= 'l';\n            $number -= 50;\n\
    \        } elsif ($number >= 40) {\n            $roman .= 'xl';\n            $number\
    \ -= 40;\n        } elsif ($number >= 10) {\n            $roman .= 'x';\n    \
    \        $number -= 10;\n        } elsif ($number >= 9) {\n            $roman\
    \ .= 'ix';\n            $number -= 9;\n        } elsif ($number >= 5) {\n    \
    \        $roman .= 'v';\n            $number -= 5;\n        } elsif ($number >=\
    \ 4) {\n            $roman .= 'iv';\n            $number -= 4;\n        } else\
    \ {\n            $roman .= 'i';\n            $number -= 1;\n        }\n    }\n\
    \    return $roman;\n}", "    my $res;\n    # arabic = [1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1]\n    # roman = ['m', 'cm', 'd', 'cd', 'c', 'xc',\
    \ 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    my %map = qw/M 1000 CM 900 D 500\
    \ CD 400 C 100 XC 90 L 50 XL 40 X 10 IX 9 V 5 IV 4 I 1/;\n    my @roman = sort\
    \ { $b <=> $a } keys %map;\n    while ($number > 0) {\n        foreach my $v (@roman)\
    \ {\n            if ($number >= $v) {\n                $res .= $map{$v};\n   \
    \             $number -= $v;\n                last;\n            }\n        }\n\
    \    }\n    return $res;\n}", "    my $str = '';\n    my $n = $number;\n    while($n>=1)\
    \ {\n        if($n>=1000) { $str .= 'm'; $n -= 1000; }\n        elsif($n>=500)\
    \ { $str .= 'd'; $n -= 500; }\n        elsif($n>=100) { $str .= 'c'; $n -= 100;\
    \ }\n        elsif($n>=50) { $str .= 'l'; $n -= 50; }\n        elsif($n>=10) {\
    \ $str .= 'x'; $n -= 10; }\n        elsif($n>=5) { $str .= 'v'; $n -= 5; }\n \
    \       elsif($n>=1) { $str .= 'i'; $n -= 1; }\n    }\n    return $str;\n}", " \
    \   my($out);\n    # check for valid range\n    if ($number < 1 || $number > 1000)\
    \ {\n        print STDERR \"int_to_mini_roman: $number out of range (1-1000)\\\
    n\";\n        return undef;\n    }\n    # separate out thousands\n    if ($number\
    \ >= 1000) {\n        $out .= 'm' x int($number / 1000);\n        $number %= 1000;\n\
    \    }\n    # separate out hundreds\n    if ($number >= 100) {\n        if ($number\
    \ < 400) {\n            $out .= 'c' x int($number / 100);\n        } elsif ($number\
    \ < 500) {\n            $out .= 'cd';\n        } elsif ($number < 900) {\n   \
    \         $out .= 'd' . 'c' x int(($number - 500) / 100);\n        } else {\n\
    \            $out .= 'cm';\n        }\n        $number %= 100;\n    }\n    # separate\
    \ out tens\n    if ($number >= 10) {\n        if ($number < 40) {\n          \
    \  $out .= 'x' x int($number / 10);\n        } elsif ($number < 50) {\n      \
    \      $out .= 'xl';\n        } elsif ($number < 90) {\n            $out .= 'l'\
    \ . 'x' x int(($number - 50) / 10);\n        } else {\n            $out .= 'xc';\n\
    \        }\n        $number %= 10;\n    }\n    # separate out units\n    if ($number\
    \ >= 1) {\n        if ($number < 4) {\n            $out .= 'i' x $number;\n  \
    \      } elsif ($number < 5) {\n            $out .= 'iv';\n        } elsif ($number\
    \ < 9) {\n            $out .= 'v' . 'i' x ($number - 5);\n        } else {\n \
    \           $out .= 'ix';\n        }\n    }\n    return $out;\n}", "    return\
    \ '' unless $number =~ /^\\d+$/;\n    my $map = 'ivxlc';\n    my $res = '';\n\
    \    my @nums = split //, $number;\n    my $place = 0;\n    foreach (reverse @nums)\
    \ {\n        $res = mini_roman_digit($_, $place) . $res;\n        $place++;\n\
    \    }\n    return $res;\n}", "    my $roman = \"\";\n    while ($number >= 1000)\
    \ {\n        $roman .= \"m\";\n        $number -= 1000;\n    }\n    while ($number\
    \ >= 500) {\n        $roman .= \"d\";\n        $number -= 500;\n    }\n    while\
    \ ($number >= 100) {\n        $roman .= \"c\";\n        $number -= 100;\n    }\n\
    \    while ($number >= 50) {\n        $roman .= \"l\";\n        $number -= 50;\n\
    \    }\n    while ($number >= 10) {\n        $roman .= \"x\";\n        $number\
    \ -= 10;\n    }\n    while ($number >= 5) {\n        $roman .= \"v\";\n      \
    \  $number -= 5;\n    }\n    while ($number >= 1) {\n        $roman .= \"i\";\n\
    \        $number -= 1;\n    }\n    return $roman;\n}", "    my($result) = '';\n\
    \    my($letter, $value);\n    while ($number) {\n        ($letter, $value) =\
    \ key_for_largest_value_not_greater_than($number);\n        $result .= $letter;\n\
    \        $number -= $value;\n    }\n    return $result;\n}", "    # Fill in the\
    \ code here and replace the statement below with your answer.\n    my $out;\n\
    \    foreach my $i (reverse 1..8) {\n        my $j = 10**$i;\n        my $x =\
    \ $number % $j;\n        if ($x >= (5*$j/10)) {\n            $out .= \"v\";\n\
    \            $x -= 5*$j/10;\n        }\n        if ($x >= (4*$j/10)) {\n     \
    \       $out .= \"iv\";\n            $x -= 4*$j/10;\n        }\n        if ($x\
    \ >= (3*$j/10)) {\n            $out .= \"iii\";\n            $x -= 3*$j/10;\n\
    \        }\n        if ($x >= (2*$j/10)) {\n            $out .= \"ii\";\n    \
    \        $x -= 2*$j/10;\n        }\n        if ($x >= (1*$j/10)) {\n         \
    \   $out .= \"i\";\n            $x -= 1*$j/10;\n        }\n        if ($x >= $j)\
    \ {\n            $out .= \"x\" x ($x/$j);\n            $x -= $x/$j * $j;\n   \
    \     }\n        $number -= $number % $j;\n    }\n    return $out;\n}", "    my\
    \ $mini_roman_number = \"\";\n    my %mini_roman_numbers = (\n        1000 =>\
    \ \"m\",\n        900 => \"cm\",\n        500 => \"d\",\n        400 => \"cd\"\
    ,\n        100 => \"c\",\n        90 => \"xc\",\n        50 => \"l\",\n      \
    \  40 => \"xl\",\n        10 => \"x\",\n        9 => \"ix\",\n        5 => \"\
    v\",\n        4 => \"iv\",\n        1 => \"i\"\n    );\n    foreach my $decimal\
    \ (sort {$b <=> $a} keys %mini_roman_numbers) {\n        my $mini_roman_digit\
    \ = $mini_roman_numbers{$decimal};\n        while($number >= $decimal) {\n   \
    \         $mini_roman_number .= $mini_roman_digit;\n            $number -= $decimal;\n\
    \        }\n    }\n    return $mini_roman_number;\n}", "    my $result;\n    if\
    \ ($number == 1) { $result = \"i\"; }\n    elsif ($number == 2) { $result = \"\
    ii\"; }\n    elsif ($number == 3) { $result = \"iii\"; }\n    elsif ($number ==\
    \ 4) { $result = \"iv\"; }\n    elsif ($number == 5) { $result = \"v\"; }\n  \
    \  elsif ($number == 6) { $result = \"vi\"; }\n    elsif ($number == 7) { $result\
    \ = \"vii\"; }\n    elsif ($number == 8) { $result = \"viii\"; }\n    elsif ($number\
    \ == 9) { $result = \"ix\"; }\n    elsif ($number == 10) { $result = \"x\"; }\n\
    \    elsif ($number == 11) { $result = \"xi\"; }\n    elsif ($number == 12) {\
    \ $result = \"xii\"; }\n    elsif ($number == 13) { $result = \"xiii\"; }\n  \
    \  elsif ($number == 14) { $result = \"xiv\"; }\n    elsif ($number == 15) { $result\
    \ = \"xv\"; }\n    elsif ($number == 16) { $result = \"xvi\"; }\n    elsif ($number\
    \ == 17) { $result = \"xvii\"; }\n    elsif ($number == 18) { $result = \"xviii\"\
    ; }\n    elsif ($number == 19) { $result = \"xix\"; }\n    elsif ($number == 20)\
    \ { $result = \"xx\"; }\n    elsif ($number == 21) { $result = \"xxi\"; }\n  \
    \  elsif ($number == 22) { $result = \"xxii\"; }\n    elsif ($number == 23) {\
    \ $result = \"xxiii\"; }\n    elsif ($number == 24) { $result = \"xxiv\"; }\n\
    \    elsif ($number == 25) { $result = \"xxv\"; }\n    elsif ($number == 26) {\
    \ $result = \"xxvi\"; }\n    elsif ($number == 27) { $result = \"xxvii\"; }\n\
    \   ", "    my $romano = '';\n    my @numeros = (1,4,5,9,10,40,50,90,100,400,500,900,1000);\n\
    \    my @romanos = ('i','iv','v','ix','x','xl','l','xc','c','cd','d','cm','m');\n\
    \    for (my $i=12; $i>=0; $i--) {\n        while ($number >= $numeros[$i]) {\n\
    \            $romano .= $romanos[$i];\n            $number -= $numeros[$i];\n\
    \        }\n    }\n    return $romano;\n}", "    my $roman = '';\n    my @values\
    \ = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    my @letters =\
    \ qw(m cm d cd c xc l xl x ix v iv i);\n    for (my $i = 0; $i < @values; $i++)\
    \ {\n        while ($number >= $values[$i]) {\n            $roman .= $letters[$i];\n\
    \            $number -= $values[$i];\n        }\n    }\n    return $roman;\n}",
  "    my @mini_roman = qw(i v x l c d m);\n    my $result = \"\";\n    my $count\
    \ = 0;\n    my $number_of_digits = length($number);\n    while ($number_of_digits\
    \ != 0) {\n        my $digit = substr($number, -1, 1);\n        $number = substr($number,\
    \ 0, length($number) - 1);\n        $number_of_digits--;\n        if ($digit ==\
    \ 0) {\n            $count++;\n            next;\n        }\n        my $base\
    \ = $mini_roman[$count * 2];\n        my $next = $mini_roman[$count * 2 + 1];\n\
    \        my $next_next = $mini_roman[$count * 2 + 2];\n        my $digit_roman\
    \ = \"\";\n        if ($digit == 9) {\n            $digit_roman = $base . $next_next;\n\
    \        } elsif ($digit == 4) {\n            $digit_roman = $base . $next;\n\
    \        } else {\n            $digit_roman = $next x ($digit / 5);\n        \
    \    $digit_roman .= $base x ($digit % 5);\n        }\n        $result = $digit_roman\
    \ . $result;\n        $count++;\n    }\n    return $result;\n}", "    if ($number\
    \ < 0 || $number > 1000) {\n        warn \"input value $number outside acceptable\
    \ range (0..1000)\\n\";\n        return undef;\n    }\n    my $result = \"\";\n\
    \    my @values = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n  \
    \  my @symbols = ('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v',\
    \ 'iv', 'i');\n    my $iter = 0;\n    while ($number > 0) {\n        while ($number\
    \ >= $values[$iter]) {\n            $result .= $symbols[$iter];\n            $number\
    \ -= $values[$iter];\n        }\n        $iter++;\n    }\n    return $result;\n\
    }", "    my @numberArray = split(\"\",$number);\n    my $numberLength = @numberArray;\n\
    \    my $n = 0;\n    my $result = \"\";\n    foreach my $digit (@numberArray)\
    \ {\n      my $value = (10**($numberLength - ($n + 1))) * $digit;\n      if ($value\
    \ == 900){\n        $result .= \"cm\";\n      }\n      elsif ($value == 400){\n\
    \        $result .= \"cd\";\n      }\n      elsif ($value == 90){\n        $result\
    \ .= \"xc\";\n      }\n      elsif ($value == 40){\n        $result .= \"xl\"\
    ;\n      }\n      elsif ($value == 9){\n        $result .= \"ix\";\n      }\n\
    \      elsif ($value == 4){\n        $result .= \"iv\";\n      }\n      elsif\
    \ ($value == 1000){\n        $result .= \"m\";\n      }\n      elsif ($value ==\
    \ 500){\n        $result .= \"d\";\n      }\n      elsif ($value == 100){\n  \
    \      $result .= \"c\";\n      }\n      elsif ($value == 50){\n        $result\
    \ .= \"l\";\n      }\n      elsif ($value == 10){\n        $result .= \"x\";\n\
    \      }\n      elsif ($value == 5){\n        $result .= \"v\";\n      }\n   \
    \   elsif ($value == 1){\n        $result .= \"i\";\n      }\n      else {\n \
    \       my $temp = $value / 100;\n        if ($temp == 4){\n          $result\
    \ .= \"cd\";\n        }\n        elsif ($temp == 9){\n          $result .= \"\
    cm\";\n        }\n        else {\n          $temp = $value / 10;\n          if\
    \ ($temp == 4){\n            $result .= \"xl\";\n          }\n          elsif\
    \ ($temp == 9){\n            $result .= \"xc\";\n          }\n          else {\n\
    \            $temp = $value;\n            if ($temp == 4){\n              $result\
    \ .= \"iv\";\n            }\n            elsif ($temp", "    my($result) = \"\"\
    ;\n    $result .= \"m\" x ($number / 1000);\n    $number %= 1000;\n    $result\
    \ .= \"c\" x ($number / 100);\n    $number %= 100;\n    $result .= \"x\" x ($number\
    \ / 10);\n    $number %= 10;\n    $result .= \"i\" x $number;\n    return $result;\n\
    }", "    my $result = '';\n    my $lookup = { M => 1000, CM => 900, D => 500,\
    \ CD => 400,\n                   C => 100, XC => 90, L => 50, XL => 40,\n    \
    \               X => 10, IX => 9, V => 5, IV => 4, I => 1};\n    for my $roman\
    \ (sort { $lookup->{$b} <=> $lookup->{$a} } keys %$lookup) {\n        my $value\
    \ = $lookup->{$roman};\n        my $count = int($number / $value);\n        $result\
    \ .= $roman x $count;\n        $number %= $value;\n    }\n    return $result;\n\
    }", "    my $roman_string = '';\n    my $roman_numeral = 'ixcm';", "    my @chars\
    \ = (\n        [ 'm', 1000 ],\n        [ 'd', 500 ],\n        [ 'c', 100 ],\n\
    \        [ 'l', 50 ],\n        [ 'x', 10 ],\n        [ 'v', 5 ],\n        [ 'i',\
    \ 1 ],\n    );\n    my $roman = '';\n    foreach my $pair (@chars) {\n       \
    \ my($char, $value) = @$pair;\n        my $count = int($number / $value);\n  \
    \      $roman .= $char x $count;\n        $number %= $value;\n    }\n    $roman\
    \ =~ s/dcccc/cm/g;\n    $roman =~ s/cccc/cd/g;\n    $roman =~ s/lxxxx/xc/g;\n\
    \    $roman =~ s/xxxx/xl/g;\n    $roman =~ s/viiii/ix/g;\n    $roman =~ s/iiii/iv/g;\n\
    \    $roman = lc($roman);\n    return $roman;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
