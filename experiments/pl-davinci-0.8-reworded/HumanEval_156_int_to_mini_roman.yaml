name: HumanEval_156_int_to_mini_roman
language: pl
prompt: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n#\
  \ >>> int_to_mini_roman(19)\n# \"xix\"\n# >>> int_to_mini_roman(152)\n# \"clii\"\
  \n# >>> int_to_mini_roman(426)\n# \"cdxxvi\"\nsub int_to_mini_roman {\n    my($number)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&int_to_mini_roman;\n\
  \        if(eq_deeply($candidate->(19),\"xix\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(152),\"clii\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(251),\"\
  ccli\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(426),\"\
  cdxxvi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(500),\"d\")) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"i\")) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\
  iv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(43),\"\
  xliii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(90),\"\
  xc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(94),\"\
  xciv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(532),\"\
  dxxxii\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(900),\"cm\")) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(994),\"cmxciv\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),\"\
  m\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return '' unless $number;\n    return 'i' if $number eq 1;\n  \
    \  return 'ii' if $number eq 2;\n    return 'iii' if $number eq 3;\n    return\
    \ 'iv' if $number eq 4;\n    return 'v' if $number eq 5;\n    return 'vi' if $number\
    \ eq 6;\n    return 'vii' if $number eq 7;\n    return 'viii' if $number eq 8;\n\
    \    return 'ix' if $number eq 9;\n    return 'x' if $number eq 10;\n    return\
    \ 'xi' if $number eq 11;\n    return 'xii' if $number eq 12;\n    return 'xiii'\
    \ if $number eq 13;\n    return 'xiv' if $number eq 14;\n    return 'xv' if $number\
    \ eq 15;\n    return 'xvi' if $number eq 16;\n    return 'xvii' if $number eq\
    \ 17;\n    return 'xviii' if $number eq 18;\n    return 'xix' if $number eq 19;\n\
    \    return 'xx' if $number eq 20;\n    return 'xxi' if $number eq 21;\n    return\
    \ 'xxii' if $number eq 22;\n    return 'xxiii' if $number eq 23;\n    return 'xxiv'\
    \ if $number eq 24;\n    return 'xxv' if $number eq 25;\n    return 'xxvi' if\
    \ $number eq 26;\n    return 'xxvii' if $number eq 27;\n    return 'xxviii' if\
    \ $number eq 28;\n    return 'xxix' if $number eq 29;\n    return 'xxx' if $number\
    \ eq 30;\n    return 'xxxi' if $number eq 31;\n    return 'xxxii' if $number eq\
    \ 32;\n    return 'xxxiii' if $number eq 33;\n    return 'xxxiv' if $number eq\
    \ 34;\n    return 'xxxv' if $number eq 35;\n    return 'xxxvi' if $number eq 36;\n\
    \    return 'xxxvii' if $number eq 37;\n    return 'xxxviii' if $number eq 38;\n\
    \    return 'xxxix' if $number eq 39;\n   ", "    # my $return = \"ix\";\n   \
    \ my $return = \"\";\n    my @num = (1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1);\n    my @symbols = (\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\");\n    my $index = 0;\n \
    \   while ($number > 0) {\n        while ($number >= $num[$index]) {\n       \
    \     $return .= $symbols[$index];\n            $number -= $num[$index];\n   \
    \     }\n        $index++;\n    }\n    return $return;\n}", "    my %roman_numerals\
    \ = (\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n     \
    \   400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n\
    \        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n\
    \        4 => 'iv',\n        1 => 'i',\n    );\n    my $mini_roman = '';\n   \
    \ foreach my $int ( sort { $b <=> $a } keys %roman_numerals ) {\n        while\
    \ ( $number >= $int ) {\n            $mini_roman .= $roman_numerals{$int};\n \
    \           $number -= $int;\n        }\n    }\n    return $mini_roman;\n}", " \
    \   my($roman) = '';\n    my(@decimal) = (1, 4, 5, 9, 10, 40, 50, 90, 100, 400,\
    \ 500, 900, 1000);\n    my(@roman) = ('i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc',\
    \ 'c', 'cd', 'd', 'cm', 'm');\n    my($i) = $#decimal;\n    while ($number > 0)\
    \ {\n        while ($number < $decimal[$i]) {\n            $i--;\n        }\n\
    \        $roman .= $roman[$i];\n        $number -= $decimal[$i];\n    }\n    return\
    \ $roman;\n}", "    my $roman_numeral = '';\n    while ($number >= 1000) {\n \
    \       $roman_numeral .= 'm';\n        $number -= 1000;\n    }\n    if ($number\
    \ >= 900) {\n        $roman_numeral .= 'cm';\n        $number -= 900;\n    }\n\
    \    if ($number >= 500) {\n        $roman_numeral .= 'd';\n        $number -=\
    \ 500;\n    }\n    if ($number >= 400) {\n        $roman_numeral .= 'cd';\n  \
    \      $number -= 400;\n    }\n    while ($number >= 100) {\n        $roman_numeral\
    \ .= 'c';\n        $number -= 100;\n    }\n    if ($number >= 90) {\n        $roman_numeral\
    \ .= 'xc';\n        $number -= 90;\n    }\n    if ($number >= 50) {\n        $roman_numeral\
    \ .= 'l';\n        $number -= 50;\n    }\n    if ($number >= 40) {\n        $roman_numeral\
    \ .= 'xl';\n        $number -= 40;\n    }\n    while ($number >= 10) {\n     \
    \   $roman_numeral .= 'x';\n        $number -= 10;\n    }\n    if ($number >=\
    \ 9) {\n        $roman_numeral .= 'ix';\n        $number -= 9;\n    }\n    if\
    \ ($number >= 5) {\n        $roman_numeral .= 'v';\n        $number -= 5;\n  \
    \  }\n    if ($number >= 4) {\n        $roman_numeral .= 'iv';\n        $number\
    \ -= 4;\n    }\n    while ($number >= 1) {\n        $roman_numeral .= 'i';\n \
    \       $number -= 1;\n    }\n    return $roman_numeral;\n}", "    # Write your\
    \ code here\n    my $tenth = int($number/10);\n    my $unit = $number % 10;\n\
    \    my $result = \"\";\n    for(my $i = 0; $i < $tenth; $i++){\n        $result\
    \ .= \"x\";\n    }\n    if($unit == 9){\n        $result .= \"ix\";\n    }\n \
    \   elsif($unit >= 5){\n        $result .= \"v\";\n        for(my $i = 0; $i <\
    \ $unit - 5; $i++){\n            $result .= \"i\";\n        }\n    }\n    elsif($unit\
    \ == 4){\n        $result .= \"iv\";\n    }\n    else{\n        for(my $i = 0;\
    \ $i < $unit; $i++){\n            $result .= \"i\";\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = '';\n    my @Roman = (\n\t[ '', 'i', 'ii', 'iii',\
    \ 'iv', 'v', 'vi', 'vii', 'viii', 'ix' ],\n\t[ '', 'x', 'xx', 'xxx', 'xl', 'l',\
    \ 'lx', 'lxx', 'lxxx', 'xc' ],\n\t[ '', 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc',\
    \ 'dccc', 'cm' ],\n\t[ '', 'm', 'mm', 'mmm', 'mmmm', 'mmmmm', 'mmmmmm', 'mmmmmmm',\
    \ 'mmmmmmmm', 'mmmmmmmmm' ]\n    );\n    my @number = reverse split('', $number);\n\
    \    for my $i (0..scalar(@number) - 1) {\n\t$result = $Roman[$i][$number[$i]]\
    \ . $result;\n    }\n    return $result;\n}", "    my($str, $i);\n    for($i =\
    \ 0; $i < scalar(@arab); $i++) {\n        while($number >= $arab[$i]) {\n    \
    \        $str .= $mini_roman[$i];\n            $number -= $arab[$i];\n       \
    \ }\n    }\n    return $str;\n}", "    my $answer = \"\";\n    return(int_to_roman($number));\n\
    }", "    my $res = \"\";\n    while ($number > 0) {\n        if ($number >= 1000)\
    \ {\n            $res .= \"m\";\n            $number -= 1000;\n        } elsif\
    \ ($number >= 900) {\n            $res .= \"cm\";\n            $number -= 900;\n\
    \        } elsif ($number >= 500) {\n            $res .= \"d\";\n            $number\
    \ -= 500;\n        } elsif ($number >= 400) {\n            $res .= \"cd\";\n \
    \           $number -= 400;\n        } elsif ($number >= 100) {\n            $res\
    \ .= \"c\";\n            $number -= 100;\n        } elsif ($number >= 90) {\n\
    \            $res .= \"xc\";\n            $number -= 90;\n        } elsif ($number\
    \ >= 50) {\n            $res .= \"l\";\n            $number -= 50;\n        }\
    \ elsif ($number >= 40) {\n            $res .= \"xl\";\n            $number -=\
    \ 40;\n        } elsif ($number >= 10) {\n            $res .= \"x\";\n       \
    \     $number -= 10;\n        } elsif ($number >= 9) {\n            $res .= \"\
    ix\";\n            $number -= 9;\n        } elsif ($number >= 5) {\n         \
    \   $res .= \"v\";\n            $number -= 5;\n        } elsif ($number >= 4)\
    \ {\n            $res .= \"iv\";\n            $number -= 4;\n        } else {\n\
    \            $res .= \"i\";\n            $number -= 1;\n        }\n    }\n   \
    \ return $res;\n}", "    my $res = \"\";\n    my @first = (\"i\", \"x\", \"c\"\
    , \"m\");\n    my @second = (\"v\", \"l\", \"d\");\n    my @third = (\"iv\", \"\
    ix\", \"xl\", \"xc\", \"cd\", \"cm\");\n    while ($number) {\n        my $i =\
    \ 0;\n        $i = ($number >= 1000) ? 3 : $i;\n        $i = ($number >= 500)\
    \ ? 2 : $i;\n        $i = ($number >= 100) ? 1 : $i;\n        $i = ($number >=\
    \ 50) ? 0 : $i;\n        my $add = \"\";\n        if ($number >= 100 && $number\
    \ < 400) {\n            $add = $first[2];\n            $number -= 100;\n     \
    \   } elsif ($number >= 400 && $number < 500) {\n            $add = $third[3];\n\
    \            $number -= 400;\n        } elsif ($number >= 500 && $number < 900)\
    \ {\n            $add = $second[1];\n            $number -= 500;\n        } elsif\
    \ ($number >= 900 && $number < 1000) {\n            $add = $third[4];\n      \
    \      $number -= 900;\n        } elsif ($number >= 1000) {\n            $add\
    \ = $first[3];\n            $number -= 1000;\n        }\n        $res .= $add;\n\
    \        while ($number >= 10**$i) {\n            $res .= $first[$i];\n      \
    \      $number -= 10**$i;\n        }\n        if ($number >= (5 * 10**$i)) {\n\
    \            $res .= $second[$i];\n            $number -= 5 * 10**$i;\n      \
    \  }\n        if ($number >= 4 * 10**$i) {\n            $res .= $third[$i];\n\
    \            $number -= 4 * 10**$i;\n        }\n    }\n    return $res;\n}", '    $number
    = int($number);', "    my $roman_numerals = '';\n    my $curr = $number;\n   \
    \ my $subtraction_factor = 0;\n    while ($curr > 0) {\n        if ($curr - 1000\
    \ >= 0) {\n            $roman_numerals .= 'm';\n            $curr -= 1000;\n \
    \       }\n        elsif ($curr - 900 >= 0) {\n            $roman_numerals .=\
    \ 'cm';\n            $curr -= 900;\n        }\n        elsif ($curr - 500 >= 0)\
    \ {\n            $roman_numerals .= 'd';\n            $curr -= 500;\n        }\n\
    \        elsif ($curr - 400 >= 0) {\n            $roman_numerals .= 'cd';\n  \
    \          $curr -= 400;\n        }\n        elsif ($curr - 100 >= 0) {\n    \
    \        $roman_numerals .= 'c';\n            $curr -= 100;\n        }\n     \
    \   elsif ($curr - 90 >= 0) {\n            $roman_numerals .= 'xc';\n        \
    \    $curr -= 90;\n        }\n        elsif ($curr - 50 >= 0) {\n            $roman_numerals\
    \ .= 'l';\n            $curr -= 50;\n        }\n        elsif ($curr - 40 >= 0)\
    \ {\n            $roman_numerals .= 'xl';\n            $curr -= 40;\n        }\n\
    \        elsif ($curr - 10 >= 0) {\n            $roman_numerals .= 'x';\n    \
    \        $curr -= 10;\n        }\n        elsif ($curr - 9 >= 0) {\n         \
    \   $roman_numerals .= 'ix';\n            $curr -= 9;\n        }\n        elsif\
    \ ($curr - 5 >= 0) {\n            $roman_numerals .= 'v';\n            $curr -=\
    \ 5;\n        }\n        elsif ($curr - 4 >= 0) {\n            $roman_numerals\
    \ .= 'iv';\n            $curr -= 4;\n        }\n        elsif ($curr - 1 >= 0)",
  "    my $roman = \"\";\n    my $numeral;\n    if ($number > 1000) {\n        die\
    \ \"Number to large for Roman numerals\";\n    }\n    if ($number >= 100) {\n\
    \        $numeral = int($number / 100);\n        $roman .= \"c\" x $numeral;\n\
    \        $number %= 100;\n    }\n    if ($number >= 10) {\n        $numeral =\
    \ int($number / 10);\n        $roman .= \"x\" x $numeral;\n        $number %=\
    \ 10;\n    }\n    if ($number >= 1) {\n        $numeral = int($number / 1);\n\
    \        $roman .= \"i\" x $numeral;\n        $number %= 1;\n    }\n    return\
    \ $roman;\n}", "    my $mini_roman = \"\";\n    while ($number > 0) {\n      \
    \  if ($number >= 50) {\n            $mini_roman .= \"l\";\n            $number\
    \ -= 50;\n        } elsif ($number >= 40) {\n            $mini_roman .= \"xl\"\
    ;\n            $number -= 40;\n        } elsif ($number >= 10) {\n           \
    \ $mini_roman .= \"x\";\n            $number -= 10;\n        } elsif ($number\
    \ >= 9) {\n            $mini_roman .= \"ix\";\n            $number -= 9;\n   \
    \     } elsif ($number >= 5) {\n            $mini_roman .= \"v\";\n          \
    \  $number -= 5;\n        } elsif ($number >= 4) {\n            $mini_roman .=\
    \ \"iv\";\n            $number -= 4;\n        } else {\n            $mini_roman\
    \ .= \"i\";\n            $number -= 1;\n        }\n    }\n    return $mini_roman;\n\
    }", "    my($mini_roman) = \"\";\n    while ($number >= 1000) {\n        $mini_roman\
    \ .= \"m\";\n        $number -= 1000;\n    }\n    if ($number >= 900) {\n    \
    \    $mini_roman .= \"cm\";\n        $number -= 900;\n    }\n    if ($number >=\
    \ 500) {\n        $mini_roman .= \"d\";\n        $number -= 500;\n    }\n    if\
    \ ($number >= 400) {\n        $mini_roman .= \"cd\";\n        $number -= 400;\n\
    \    }\n    while ($number >= 100) {\n        $mini_roman .= \"c\";\n        $number\
    \ -= 100;\n    }\n    if ($number >= 90) {\n        $mini_roman .= \"xc\";\n \
    \       $number -= 90;\n    }\n    if ($number >= 50) {\n        $mini_roman .=\
    \ \"l\";\n        $number -= 50;\n    }\n    if ($number >= 40) {\n        $mini_roman\
    \ .= \"xl\";\n        $number -= 40;\n    }\n    while ($number >= 10) {\n   \
    \     $mini_roman .= \"x\";\n        $number -= 10;\n    }\n    if ($number >=\
    \ 9) {\n        $mini_roman .= \"ix\";\n        $number -= 9;\n    }\n    if ($number\
    \ >= 5) {\n        $mini_roman .= \"v\";\n        $number -= 5;\n    }\n    if\
    \ ($number >= 4) {\n        $mini_roman .= \"iv\";\n        $number -= 4;\n  \
    \  }\n    while ($number >= 1) {\n        $mini_roman .= \"i\";\n        $number\
    \ -= 1;\n    }\n    return $mini_roman;\n}", "    my($n) = $number;\n    my($remainder);\n\
    \    my($res) = \"\";\n    my($temp);\n    my($i);\n    my(@symbols) = qw(i v\
    \ x l c d m);\n    my(@divs) = (1, 5, 10, 50, 100, 500, 1000);\n    my(@nums)\
    \ = (0, 0, 0, 0, 0, 0, 0);\n    $temp = $n % 10;\n    $remainder = int($n / 10);\n\
    \    $nums[0] = $temp;\n    $temp = $remainder % 10;\n    $remainder = int($remainder\
    \ / 10);\n    $nums[1] = $temp;\n    $temp = $remainder % 10;\n    $remainder\
    \ = int($remainder / 10);\n    $nums[2] = $temp;\n    $nums[3] = $remainder;\n\
    \    for ($i = 0; $i < 4; $i++) {\n        if ($nums[$i] <= 3) {\n           \
    \ $res .= $symbols[$i] x $nums[$i];\n        } elsif ($nums[$i] == 4) {\n    \
    \        $res .= $symbols[$i] . $symbols[$i + 1];\n        } elsif ($nums[$i]\
    \ == 5) {\n            $res .= $symbols[$i + 1];\n        } elsif ($nums[$i] <=\
    \ 8) {\n            $res .= $symbols[$i + 1] . $symbols[$i] x ($nums[$i] - 5);\n\
    \        } elsif ($nums[$i] == 9) {\n            $res .= $symbols[$i] . $symbols[$i\
    \ + 2];\n        }\n    }\n    return $res;\n}", "    my $result = '';\n    foreach\
    \ my $thousands (0..3) {\n        if ($number >= 1000) {\n            $result\
    \ .= 'm';\n            $number -= 1000;\n        }\n    }\n    foreach my $fives\
    \ (0..1) {\n        if ($number >= 900) {\n            $result .= 'cm';\n    \
    \        $number -= 900;\n        }\n    }\n    foreach my $hundreds (0..3) {\n\
    \        if ($number >= 500) {\n            $result .= 'd';\n            $number\
    \ -= 500;\n        }\n    }\n    foreach my $fours (0..1) {\n        if ($number\
    \ >= 400) {\n            $result .= 'cd';\n            $number -= 400;\n     \
    \   }\n    }\n    foreach my $tens (0..3) {\n        if ($number >= 100) {\n \
    \           $result .= 'c';\n            $number -= 100;\n        }\n    }\n \
    \   foreach my $fives (0..1) {\n        if ($number >= 90) {\n            $result\
    \ .= 'xc';\n            $number -= 90;\n        }\n    }\n    foreach my $fifties\
    \ (0..1) {\n        if ($number >= 50) {\n            $result .= 'l';\n      \
    \      $number -= 50;\n        }\n    }\n    foreach my $fours (0..1) {\n    \
    \    if ($number >= 40) {\n            $result .= 'xl';\n            $number -=\
    \ 40;\n        }\n    }\n    foreach my $tens (0..9) {\n        if ($number >=\
    \ 10) {\n            $result .= 'x';\n            $number -= 10;\n        }\n\
    \    }\n    foreach my $fives (0..1) {\n        if ($number >= 9) {\n        \
    \    $result .= 'ix';\n            $number -= 9;\n        }\n    }\n    foreach\
    \ my $fives (0..1) {\n        if ($number >= 5) {\n            $result .= 'v';\n\
    \            $number -= 5;\n        }\n    }\n    foreach my $f", "    my $roman\
    \ = \"\";\n    my $n = $number;\n    my $remainder = 0;\n    while($n >= 1000)\
    \ {\n        $n -= 1000;\n        $roman .= \"m\";\n    }\n    if($n >= 900) {\n\
    \        $n -= 900;\n        $roman .= \"cm\";\n    }\n    while($n >= 500) {\n\
    \        $n -= 500;\n        $roman .= \"d\";\n    }\n    if($n >= 400) {\n  \
    \      $n -= 400;\n        $roman .= \"cd\";\n    }\n    while($n >= 100) {\n\
    \        $n -= 100;\n        $roman .= \"c\";\n    }\n    if($n >= 90) {\n   \
    \     $n -= 90;\n        $roman .= \"xc\";\n    }\n    while($n >= 50) {\n   \
    \     $n -= 50;\n        $roman .= \"l\";\n    }\n    if($n >= 40) {\n       \
    \ $n -= 40;\n        $roman .= \"xl\";\n    }\n    while($n >= 10) {\n       \
    \ $n -= 10;\n        $roman .= \"x\";\n    }\n    if($n >= 9) {\n        $n -=\
    \ 9;\n        $roman .= \"ix\";\n    }\n    while($n >= 5) {\n        $n -= 5;\n\
    \        $roman .= \"v\";\n    }\n    if($n >= 4) {\n        $n -= 4;\n      \
    \  $roman .= \"iv\";\n    }\n    while($n >= 1) {\n        $n -= 1;\n        $roman\
    \ .= \"i\";\n    }\n    return $roman;\n}", "    my $result = \"\";\n    my @conversions\
    \ = (\n                       [1000, \"m\"],\n                       [900, \"\
    cm\"],\n                       [500, \"d\"],\n                       [400, \"\
    cd\"],\n                       [100, \"c\"],\n                       [90, \"xc\"\
    ],\n                       [50, \"l\"],\n                       [40, \"xl\"],\n\
    \                       [10, \"x\"],\n                       [9, \"ix\"],\n  \
    \                     [5, \"v\"],\n                       [4, \"iv\"],\n     \
    \                  [1, \"i\"]\n                       );\n    for my $item (@conversions)\
    \ {\n        my($value, $char) = @$item;\n        if ($number >= $value) {\n \
    \           $result .= $char x ($number / $value);\n            $number = $number\
    \ % $value;\n        }\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
