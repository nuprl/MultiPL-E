name: HumanEval_14_all_prefixes
language: pl
prompt: "# Return array of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\nsub all_prefixes {\n  \
  \  my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_prefixes;\n\
  \        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfgh\"),[\"a\"\
  , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"WWW\"),[\"W\",\
  \ \"WW\", \"WWW\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my @prefixes;\n    for (my $i = 0; $i < length($string); $i++)\
    \ {\n        my $prefix = substr($string, 0, $i + 1);\n        push @prefixes,\
    \ $prefix;\n    }\n    return @prefixes;\n}", "    my @prefixes;\n    for my $i\
    \ (0..length($string)-1) {\n        push @prefixes, substr($string, 0, $i+1);\n\
    \    }\n    return @prefixes;\n}", "    my @all_prefixes;\n    my $len = length($string);\n\
    \    for (my $i = 1; $i <= $len; $i++) {\n        push @all_prefixes, substr($string,\
    \ 0, $i);\n    }\n    return @all_prefixes;\n}", "    my @arr = ();\n    foreach\
    \ my $i (1..length($string)) {\n        push @arr, substr($string, 0, $i);\n \
    \   }\n    return @arr;\n}", "    my @characters = split //, $string;\n    my\
    \ @prefixes;\n    for my $i (0..$#characters) {\n        push @prefixes, join\
    \ \"\", @characters[0..$i];\n    }\n    return @prefixes;\n}", "    my @prefixes;\n\
    \    for (my $i = 0; $i < length($string); $i++) {\n        push @prefixes, substr($string,\
    \ 0, $i + 1);\n    }\n    return @prefixes;\n}", "    my @prefixes;\n    while\
    \ (length($string) > 0) {\n        unshift @prefixes, $string;\n        $string\
    \ = substr($string, 0, -1);\n    }\n    return @prefixes;\n}", "    my @prefixes;\n\
    \    while ($string) {\n        push @prefixes, $string;\n        chop $string;\n\
    \    }\n    return @prefixes;\n}", "    my @prefixes;\n    for my $i (0..length($string))\
    \ {\n        push @prefixes, substr($string, 0, $i);\n    }\n    return @prefixes;\n\
    }", "    my @prefixes;\n    for my $i (0..length($string)-1) {\n        push @prefixes,\
    \ substr($string, 0, $i+1);\n    }\n    return @prefixes;\n}", "    my @prefixes;\n\
    \    for (my $len = 1; $len <= length($string); $len++) {\n        push @prefixes,\
    \ substr($string, 0, $len);\n    }\n    return @prefixes;\n}", "    my @prefixes;\n\
    \    for my $len (1..length($string)) {\n        push @prefixes, substr($string,\
    \ 0, $len);\n    }\n    return @prefixes;\n}", "    my @prefixes;\n    foreach\
    \ my $char (split //, $string) {\n        push @prefixes, $char;\n    }\n    return\
    \ @prefixes;\n}", "    my @a = ();\n    my $len = length($string);\n    my $i;\n\
    \    for ($i = 1; $i <= $len; $i++) {\n        push @a, substr($string, 0, $i);\n\
    \    }\n    return @a;\n}", "    my @array = ();\n    my $start = 0;\n    my $end\
    \ = length($string);\n    while ($start < $end) {\n        push @array, substr($string,\
    \ $start, $end - $start);\n        $start++;\n    }\n    return @array;\n}", " \
    \   my @array = ();\n    my $length = length($string);\n    for (my $i = 1; $i\
    \ <= $length; $i++) {\n        push @array, substr($string, 0, $i);\n    }\n \
    \   return @array;\n}", "    my $len = length($string);\n    my @result;\n   \
    \ for (my $i = 1; $i <= $len; $i++) {\n        push @result, substr($string, 0,\
    \ $i);\n    }\n    return @result;\n}", "    my @prefixes;\n    for my $i (0..length($string)-1)\
    \ {\n        push @prefixes, substr($string, 0, $i+1);\n    }\n    return @prefixes;\n\
    }", "    my(@prefixes);\n    for my $i (0..length($string)-1) {\n        push\
    \ @prefixes, substr($string, 0, $i+1);\n    }\n    return @prefixes;\n}", "  \
    \  my @result;\n    for my $len (1..length($string)) {\n        push @result,\
    \ substr($string, 0, $len);\n    }\n    return @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
