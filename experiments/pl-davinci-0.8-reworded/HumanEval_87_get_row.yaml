name: HumanEval_87_get_row
language: pl
prompt: "# You are given a 2 dimensional data, as a nested arrays,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the array,\n# and\
  \ return array of arrays, [(x1, y1), (x2, y2) ...] such that\n# each array is a\
  \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by\
  \ rows in ascending order.\n# Also, sort coordinates of the row by columns in descending\
  \ order.\n# Examples:\n# >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
  \ 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row([],\
  \ 1)\n# []\n# >>> get_row([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\nsub get_row {\n\
  \    my($lst, $x) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_row;\n\
  \        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
  \ 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
  \ [5, 1]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
  \ [5, 4], [5, 0], [6, 5], [6, 0]])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([], 1),[])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1]],\
  \ 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[],\
  \ [1], [1, 2, 3]], 3),[[2, 2]])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j\
    \ (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n         \
    \       push @result, [$i, $j];\n            }\n        }\n    }\n    my @rev_result\
    \ = reverse @result;\n    @rev_result = sort {$a->[0] <=> $b->[0]} @rev_result;\n\
    \    @rev_result = sort {$a->[1] <=> $b->[1]} @rev_result;\n    return @rev_result;\n\
    }", "    my $result = [];\n    # your code goes here\n    my $i = 0;\n    my $n\
    \ = 0;\n    foreach my $row(@$lst){\n        $n = 0;\n        foreach my $y(@$row){\n\
    \            if($y == $x){\n                push @$result, [$i, $n];\n       \
    \     }\n            $n++;\n        }\n        $i++;\n    }\n    @$result = sort\
    \ {$a->[0] <=> $b->[0] or $b->[1] <=> $a->[1]} @$result;\n    return $result;\n\
    }", "    my @ret = ();\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my\
    \ $e;\n    my $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n\
    \    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my\
    \ $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x1;\n\
    \    my $y;\n    my $z;\n    $a = @{$lst};\n    $b = 0;\n    $c = $a;\n    my\
    \ $e1;\n    $e1 = ($b + $c) >> 1;\n    my $e2;\n    $e2 = $e1;\n    $f = $e2;\n\
    \    $g = $f;\n    $h = $lst->[$g];\n    $i = @{$h};\n    $j = 0;\n    $k = $i;\n\
    \    my $e3;\n    $e3 = ($j + $k) >> 1;\n    my $e4;\n    $e4 = $e3;\n    $l =\
    \ $e4;\n    $m = $l;\n    $n = $h->[$m];\n    $o = $x;\n    $p = $n;\n    $q =\
    \ $o;\n    $r = $p;\n    my $e5;\n    $e5 = $q == $r;\n    my $e6;\n    $e6 =\
    \ $e5;\n    $s = $e6;\n    $t = $s;\n    $u = $t;\n    $v = $u;\n    if ($v) {\n\
    \        $w = $l;\n        $x1 = $w;\n        $y = $x1;\n        $z = $y;\n  \
    \      $z = 1;\n    }\n    else {\n        $y", "    my @res;\n    for (my $i\
    \ = 0; $i < @$lst; $i++) {\n        my $row = $lst->[$i];\n        for (my $j\
    \ = 0; $j < @$row; $j++) {\n            if ($row->[$j] == $x) {\n            \
    \    push @res, [$i, $j];\n            }\n        }\n    }\n    return [sort {\n\
    \        $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\n    } @res];\n}", "    my\
    \ @res;\n    foreach my $y (0..$#{$lst}) {\n        my $c = -1;\n        foreach\
    \ my $z (0..$#{$lst->[$y]}) {\n            if ($lst->[$y][$z] == $x) {\n     \
    \           push @res, [$y, $z];\n            }\n        }\n    }\n    return\
    \ sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n}", "    my @cols =\
    \ ();\n    my $row = 0;\n    foreach my $i (@$lst) {\n        my $col = 0;\n \
    \       foreach my $j (@$i) {\n            if ($j == $x) {\n                push\
    \ @cols, [$row, $col];\n            }\n            $col++;\n        }\n      \
    \  $row++;\n    }\n    return sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]}\
    \ @cols;\n}", "    my @arr;\n    for (my $i = 0; $i < @$lst; $i++) {\n       \
    \ for (my $j = 0; $j < @{$lst->[$i]}; $j++) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @arr, [$i, $j];\n            }\n        }\n \
    \   }\n    sub sort_row {\n        my($a, $b) = @_;\n        return $a->[0] -\
    \ $b->[0] if $a->[0] != $b->[0];\n        return $b->[1] - $a->[1];\n    }\n \
    \   my @sorted = sort sort_row @arr;\n    return \\@sorted;\n}", "    my @ret;\n\
    \    for my $i (0..@$lst-1) {\n        for my $j (0..@{$lst->[$i]}-1) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @ret, [$i, $j];\n \
    \           }\n        }\n    }\n    @ret = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @ret;\n    return \\@ret;\n}", "    my @ret;\n    for my $i (0..@$lst-1)\
    \ {\n        my $row = $lst->[$i];\n        if (@$row) {\n            for my $j\
    \ (0..@$row-1) {\n                if ($row->[$j] == $x) {\n                  \
    \  push @ret, [$i, $j];\n                }\n            }\n        }\n    }\n\
    \    return [sort {$a->[0]<=>$b->[0] || $b->[1]<=>$a->[1]} @ret];\n}", "    my\
    \ @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    @result = sort {\n        if ($a->[0]\
    \ != $b->[0]) {\n            $a->[0] <=> $b->[0];\n        } else {\n        \
    \    $b->[1] <=> $a->[1];\n        }\n    } @result;\n    return @result;\n}",
  "    return [] unless $lst && @$lst;\n    my $i = 0;\n    my @lst = map {\n    \
    \    my $j = 0;\n        [ map {\n            [ $i, $j++ ]\n        } grep { $_\
    \ == $x } @$_ ]\n    } @$lst;\n    return [ sort {\n        $a->[0] <=> $b->[0]\n\
    \            ||\n        $b->[1] <=> $a->[1]\n    } @lst ];\n}", "    my @indexes;\n\
    \    foreach my $i (0..$#{$lst}) {\n        my $j = 0;\n        my $found = 0;\n\
    \        foreach (@{$lst->[$i]}) {\n            if ($_ == $x) {\n            \
    \    push @indexes, [$i, $j];\n                $found = 1;\n            }\n  \
    \          $j++;\n        }\n        if ($found) {\n            @{$indexes[-1]}\
    \ = reverse @{$indexes[-1]};\n        }\n    }\n    my @result = sort {\n    \
    \    $a->[0] <=> $b->[0] or $b->[1] <=> $a->[1]\n    } @indexes;\n    return \\\
    @result;\n}", "    my @locs;\n    my $i = 0;\n    my $j = 0;\n    while ($i <\
    \ @$lst) {\n        $j = 0;\n        while ($j < @{$lst->[$i]}) {\n          \
    \  if ($lst->[$i][$j] == $x) {\n                push @locs, [$i, $j];\n      \
    \      }\n            $j++;\n        }\n        $i++;\n    }\n    return [] if\
    \ !@locs;\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @locs];\n\
    }", "    my @result;\n    my $index = 0;\n    for my $ele (@$lst) {\n        my\
    \ $index_in_each_arr = 0;\n        for my $num (@$ele) {\n            if ($num\
    \ == $x) {\n                push @result, [$index, $index_in_each_arr];\n    \
    \        }\n            $index_in_each_arr += 1;\n        }\n        $index +=\
    \ 1;\n    }\n    @result = sort {$a->[0] <=> $b->[0] or $b->[1] <=> $a->[1]} @result;\n\
    \    return @result;\n}", "    my @result;\n    for my $i (0 .. @$lst - 1) {\n\
    \        my $row = $lst->[$i];\n        for my $j (0 .. @$row - 1) {\n       \
    \     if ($row->[$j] == $x) {\n                push @result, [$i, $j];\n     \
    \       }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @out = ();\n    my\
    \ $i = 0;\n    foreach my $r (@$lst) {\n        my $j = 0;\n        foreach my\
    \ $c (@$r) {\n            if ($c == $x) {\n                push @out, [$i, $j];\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @out;\n}", "    my $row_idx\
    \ = 0;\n    my @result;\n    foreach my $row (@$lst) {\n        my $col_idx =\
    \ 0;\n        my @temp = ();\n        foreach my $elem (@$row) {\n           \
    \ if ($elem == $x) {\n                push @temp, [$row_idx, $col_idx];\n    \
    \        }\n            $col_idx++;\n        }\n        push @result, @temp;\n\
    \        $row_idx++;\n    }\n    return sort { $a->[0] <=> $b->[0] or $b->[1]\
    \ <=> $a->[1] } @result;\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n\
    \    return @result;\n}", "    my @result;\n    my $row_num = 0;\n    for my $row(@$lst)\
    \ {\n        my $col_num = 0;\n        for my $num(@$row) {\n            if ($num\
    \ == $x) {\n                push @result, [$row_num, $col_num];\n            }\n\
    \            $col_num++;\n        }\n        $row_num++;\n    }\n    @result =\
    \ sort { $a->[0] <=> $b->[0] } @result;\n    my $row_index = -1;\n    @result\
    \ = sort {\n        if ($a->[0] != $b->[0]) {\n            return $a->[0] <=>\
    \ $b->[0];\n        }\n        else {\n            return $b->[1] <=> $a->[1];\n\
    \        }\n    } @result;\n    return @result;\n}", "    my @out = map {\n  \
    \      my $i = $_;\n        my @coord = map { [$i, $_] } grep { $lst->[$i][$_]\
    \ == $x } 0..$#{$lst->[$i]};\n        @coord\n    } 0..$#$lst;\n    sort {\n \
    \       my $cmp = $a->[0] <=> $b->[0];\n        $cmp == 0 ? $b->[1] <=> $a->[1]\
    \ : $cmp\n    } @out;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
