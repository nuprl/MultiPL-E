name: HumanEval_87_get_row
language: pl
prompt: "# You are given a 2 dimensional data, as a nested arrays,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the array,\n# and\
  \ return array of arrays, [(x1, y1), (x2, y2) ...] such that\n# each array is a\
  \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by\
  \ rows in ascending order.\n# Also, sort coordinates of the row by columns in descending\
  \ order.\n# Examples:\n# >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
  \ 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row([],\
  \ 1)\n# []\n# >>> get_row([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\nsub get_row {\n\
  \    my($lst, $x) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_row;\n\
  \        if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
  \ 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
  \ [5, 1]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0],\
  \ [5, 4], [5, 0], [6, 5], [6, 0]])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([], 1),[])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1]],\
  \ 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[],\
  \ [1], [1, 2, 3]], 3),[[2, 2]])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j\
    \ (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n         \
    \       push @result, [$i, $j];\n            }\n        }\n    }\n    my @rev_result\
    \ = reverse @result;\n    @rev_result = sort {$a->[0] <=> $b->[0]} @rev_result;\n\
    \    @rev_result = sort {$a->[1] <=> $b->[1]} @rev_result;\n    return @rev_result;\n\
    }", "    my $result = [];\n    # your code goes here\n    my $i = 0;\n    my $n\
    \ = 0;\n    foreach my $row(@$lst){\n        $n = 0;\n        foreach my $y(@$row){\n\
    \            if($y == $x){\n                push @$result, [$i, $n];\n       \
    \     }\n            $n++;\n        }\n        $i++;\n    }\n    @$result = sort\
    \ {$a->[0] <=> $b->[0] or $b->[1] <=> $a->[1]} @$result;\n    return $result;\n\
    }", "    my @ret = ();\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my\
    \ $e;\n    my $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n\
    \    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my\
    \ $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x1;\n\
    \    my $y;\n    my $z;\n    $a = @{$lst};\n    $b = 0;\n    $c = $a;\n    my\
    \ $e1;\n    $e1 = ($b + $c) >> 1;\n    my $e2;\n    $e2 = $e1;\n    $f = $e2;\n\
    \    $g = $f;\n    $h = $lst->[$g];\n    $i = @{$h};\n    $j = 0;\n    $k = $i;\n\
    \    my $e3;\n    $e3 = ($j + $k) >> 1;\n    my $e4;\n    $e4 = $e3;\n    $l =\
    \ $e4;\n    $m = $l;\n    $n = $h->[$m];\n    $o = $x;\n    $p = $n;\n    $q =\
    \ $o;\n    $r = $p;\n    my $e5;\n    $e5 = $q == $r;\n    my $e6;\n    $e6 =\
    \ $e5;\n    $s = $e6;\n    $t = $s;\n    $u = $t;\n    $v = $u;\n    if ($v) {\n\
    \        $w = $l;\n        $x1 = $w;\n        $y = $x1;\n        $z = $y;\n  \
    \      $z = 1;\n    }\n    else {\n        $y", "    my @res;\n    for (my $i\
    \ = 0; $i < @$lst; $i++) {\n        my $row = $lst->[$i];\n        for (my $j\
    \ = 0; $j < @$row; $j++) {\n            if ($row->[$j] == $x) {\n            \
    \    push @res, [$i, $j];\n            }\n        }\n    }\n    return [sort {\n\
    \        $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\n    } @res];\n}", "    my\
    \ @res;\n    foreach my $y (0..$#{$lst}) {\n        my $c = -1;\n        foreach\
    \ my $z (0..$#{$lst->[$y]}) {\n            if ($lst->[$y][$z] == $x) {\n     \
    \           push @res, [$y, $z];\n            }\n        }\n    }\n    return\
    \ sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n}", "    my @cols =\
    \ ();\n    my $row = 0;\n    foreach my $i (@$lst) {\n        my $col = 0;\n \
    \       foreach my $j (@$i) {\n            if ($j == $x) {\n                push\
    \ @cols, [$row, $col];\n            }\n            $col++;\n        }\n      \
    \  $row++;\n    }\n    return sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]}\
    \ @cols;\n}", "    my @arr;\n    for (my $i = 0; $i < @$lst; $i++) {\n       \
    \ for (my $j = 0; $j < @{$lst->[$i]}; $j++) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @arr, [$i, $j];\n            }\n        }\n \
    \   }\n    sub sort_row {\n        my($a, $b) = @_;\n        return $a->[0] -\
    \ $b->[0] if $a->[0] != $b->[0];\n        return $b->[1] - $a->[1];\n    }\n \
    \   my @sorted = sort sort_row @arr;\n    return \\@sorted;\n}", "    my @ret;\n\
    \    for my $i (0..@$lst-1) {\n        for my $j (0..@{$lst->[$i]}-1) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @ret, [$i, $j];\n \
    \           }\n        }\n    }\n    @ret = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @ret;\n    return \\@ret;\n}", "    my @ret;\n    for my $i (0..@$lst-1)\
    \ {\n        my $row = $lst->[$i];\n        if (@$row) {\n            for my $j\
    \ (0..@$row-1) {\n                if ($row->[$j] == $x) {\n                  \
    \  push @ret, [$i, $j];\n                }\n            }\n        }\n    }\n\
    \    return [sort {$a->[0]<=>$b->[0] || $b->[1]<=>$a->[1]} @ret];\n}", "    my\
    \ @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    @result = sort {\n        if ($a->[0]\
    \ != $b->[0]) {\n            $a->[0] <=> $b->[0];\n        } else {\n        \
    \    $b->[1] <=> $a->[1];\n        }\n    } @result;\n    return @result;\n}",
  "    return [] unless $lst && @$lst;\n    my $i = 0;\n    my @lst = map {\n    \
    \    my $j = 0;\n        [ map {\n            [ $i, $j++ ]\n        } grep { $_\
    \ == $x } @$_ ]\n    } @$lst;\n    return [ sort {\n        $a->[0] <=> $b->[0]\n\
    \            ||\n        $b->[1] <=> $a->[1]\n    } @lst ];\n}", "    my @indexes;\n\
    \    foreach my $i (0..$#{$lst}) {\n        my $j = 0;\n        my $found = 0;\n\
    \        foreach (@{$lst->[$i]}) {\n            if ($_ == $x) {\n            \
    \    push @indexes, [$i, $j];\n                $found = 1;\n            }\n  \
    \          $j++;\n        }\n        if ($found) {\n            @{$indexes[-1]}\
    \ = reverse @{$indexes[-1]};\n        }\n    }\n    my @result = sort {\n    \
    \    $a->[0] <=> $b->[0] or $b->[1] <=> $a->[1]\n    } @indexes;\n    return \\\
    @result;\n}", "    my @locs;\n    my $i = 0;\n    my $j = 0;\n    while ($i <\
    \ @$lst) {\n        $j = 0;\n        while ($j < @{$lst->[$i]}) {\n          \
    \  if ($lst->[$i][$j] == $x) {\n                push @locs, [$i, $j];\n      \
    \      }\n            $j++;\n        }\n        $i++;\n    }\n    return [] if\
    \ !@locs;\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @locs];\n\
    }", "    my @result;\n    my $index = 0;\n    for my $ele (@$lst) {\n        my\
    \ $index_in_each_arr = 0;\n        for my $num (@$ele) {\n            if ($num\
    \ == $x) {\n                push @result, [$index, $index_in_each_arr];\n    \
    \        }\n            $index_in_each_arr += 1;\n        }\n        $index +=\
    \ 1;\n    }\n    @result = sort {$a->[0] <=> $b->[0] or $b->[1] <=> $a->[1]} @result;\n\
    \    return @result;\n}", "    my @result;\n    for my $i (0 .. @$lst - 1) {\n\
    \        my $row = $lst->[$i];\n        for my $j (0 .. @$row - 1) {\n       \
    \     if ($row->[$j] == $x) {\n                push @result, [$i, $j];\n     \
    \       }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @out = ();\n    my\
    \ $i = 0;\n    foreach my $r (@$lst) {\n        my $j = 0;\n        foreach my\
    \ $c (@$r) {\n            if ($c == $x) {\n                push @out, [$i, $j];\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @out;\n}", "    my $row_idx\
    \ = 0;\n    my @result;\n    foreach my $row (@$lst) {\n        my $col_idx =\
    \ 0;\n        my @temp = ();\n        foreach my $elem (@$row) {\n           \
    \ if ($elem == $x) {\n                push @temp, [$row_idx, $col_idx];\n    \
    \        }\n            $col_idx++;\n        }\n        push @result, @temp;\n\
    \        $row_idx++;\n    }\n    return sort { $a->[0] <=> $b->[0] or $b->[1]\
    \ <=> $a->[1] } @result;\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n\
    \    return @result;\n}", "    my @result;\n    my $row_num = 0;\n    for my $row(@$lst)\
    \ {\n        my $col_num = 0;\n        for my $num(@$row) {\n            if ($num\
    \ == $x) {\n                push @result, [$row_num, $col_num];\n            }\n\
    \            $col_num++;\n        }\n        $row_num++;\n    }\n    @result =\
    \ sort { $a->[0] <=> $b->[0] } @result;\n    my $row_index = -1;\n    @result\
    \ = sort {\n        if ($a->[0] != $b->[0]) {\n            return $a->[0] <=>\
    \ $b->[0];\n        }\n        else {\n            return $b->[1] <=> $a->[1];\n\
    \        }\n    } @result;\n    return @result;\n}", "    my @out = map {\n  \
    \      my $i = $_;\n        my @coord = map { [$i, $_] } grep { $lst->[$i][$_]\
    \ == $x } 0..$#{$lst->[$i]};\n        @coord\n    } 0..$#$lst;\n    sort {\n \
    \       my $cmp = $a->[0] <=> $b->[0];\n        $cmp == 0 ? $b->[1] <=> $a->[1]\
    \ : $cmp\n    } @out;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n    \
    \    for my $j (0..$#{$lst->[$i]}) {\n            push @res, [$i, $j] if $lst->[$i][$j]\
    \ == $x;\n        }\n    }\n    return sort { $a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1] } @res;\n}", "    return [] unless @$lst;\n    my @result;\n    for\
    \ my $i (0..$#$lst) {\n        my $row = $lst->[$i];\n        for my $j (0..$#$row)\
    \ {\n            push @result, [$i, $j] if $row->[$j] == $x;\n        }\n    }\n\
    \    return [] unless @result;\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @res;\n    for my\
    \ $i (0..$#{$lst}) {\n        my $row = $lst->[$i];\n        for my $j (0..$#{$row})\
    \ {\n            push @res, [$i, $j] if $row->[$j] == $x;\n        }\n    }\n\
    \    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return\
    \ \\@res;\n}", "    my $result = [];\n    for my $row (0..$#$lst) {\n        for\
    \ my $col (0..$#{$lst->[$row]}) {\n            push @$result, [$row, $col] if\
    \ $lst->[$row][$col] == $x;\n        }\n    }\n    return $result;\n}", "    my\
    \ @coordinates;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @coordinates,\
    \ [$i, $j];\n            }\n        }\n    }\n    @coordinates = sort { $a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1] } @coordinates;\n    return @coordinates;\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        my $row = @{$lst}[$i];\n\
    \        my @indices = grep { $row->[$_] == $x } 0..$#{$row};\n        for my\
    \ $j (@indices) {\n            push @res, [$i, $j];\n        }\n    }\n    return\
    \ sort {\n            $a->[0] <=> $b->[0] ||\n            $b->[1] <=> $a->[1]\n\
    \        } @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for\
    \ my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n     \
    \           push @res, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [\n        sort {\n            $a->[0] <=> $b->[0] ||\n            $b->[1] <=>\
    \ $a->[1]\n        } @res\n    ];\n}", "    my @result;\n    for (my $i = 0; $i\
    \ < @$lst; $i++) {\n        for (my $j = 0; $j < @{$lst->[$i]}; $j++) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    @result = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result;\n    @result;\n}", "    my @result;\n    my $row = 0;\n\
    \    for my $list (@$lst) {\n        my $col = 0;\n        for my $elem (@$list)\
    \ {\n            if ($elem == $x) {\n                push @result, [$row, $col];\n\
    \            }\n            $col++;\n        }\n        $row++;\n    }\n    @result\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n    return @result;\n\
    }", "    my @xy = map {\n        my $y = 0;\n        map { [$_, $y++] } @$_;\n\
    \    } @$lst;\n    my @xy2 = grep { $_->[0] == $x } map { @$_ } @xy;\n    my @xy3\
    \ = sort {\n        $a->[1] <=> $b->[1] || $b->[0] <=> $a->[0]\n    } @xy2;\n\
    \    return [map { [@$_] } @xy3];\n}", "    my @x_indices;\n    my $row = 0;\n\
    \    my $col = 0;\n    my $r;\n    my $c;\n    foreach my $elem (@$lst) {\n  \
    \      while ($col < @$elem) {\n            if ($elem->[$col] == $x) {\n     \
    \           my @lst_index = ($row, $col);\n                push @x_indices, \\\
    @lst_index;\n            }\n            $col++;\n        }\n        $col = 0;\n\
    \        $row++;\n    }\n    @x_indices = sort {\n        $a->[0] <=> $b->[0]\
    \ ||\n        $b->[1] <=> $a->[1]\n    } @x_indices;\n    return @x_indices;\n\
    }", "    my @x;\n    for my $i (0..@$lst-1) {\n        my $p = $lst->[$i];\n \
    \       for my $j (0..@$p-1) {\n            my $q = $p->[$j];\n            if\
    \ ($q == $x) {\n                push @x, [$i, $j];\n            }\n        }\n\
    \    }\n    @x = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @x;\n    return\
    \ \\@x;\n}", "    my @ans;\n    for (my $i = 0; $i < @$lst; $i++) {\n        for\
    \ (my $j = 0; $j < @{$lst->[$i]}; $j++) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @ans, [$i, $j];\n            }\n        }\n    }\n \
    \   @ans = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @ans;\n    return\
    \ \\@ans;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        push @res,\
    \ map([$i, $_], grep { $lst->[$i][$_] == $x } (0..$#{$lst->[$i]}));\n    }\n \
    \   sort {\n        $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\n    } @res;\n}",
  "    my $m = 0;\n    my @res;\n    for my $i (0..$#{$lst}) {\n        my $n = 0;\n\
    \        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$m, $n];\n            }\n            $n++;\n\
    \        }\n        $m++;\n    }\n    my @sorted = sort {$a->[0] <=> $b->[0] ||\
    \ $b->[1] <=> $a->[1]} @res;\n    return \\@sorted;\n}", "    my @result;\n  \
    \  for my $i (0 .. @$lst - 1) {\n        for my $j (0 .. @{$lst->[$i]} - 1) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0] } @result;\n\
    \    @result = map { [sort { $b->[1] <=> $a->[1] } @$_] } @result;\n    return\
    \ @result;\n}\n1;", "    my @res;\n    for (my $i = 0; $i < @$lst; $i++) {\n \
    \       for (my $j = 0; $j < @{$lst->[$i]}; $j++) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @res, [$i, $j];\n            }\n        }\n \
    \   }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n  \
    \  return @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        push\
    \ @res, map {[$i, $_]} grep {$lst->[$i][$_] == $x} 0..$#{$lst->[$i]};\n    }\n\
    \    my @res_sort = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n\
    \    return \\@res_sort;\n}", "    my @result;\n    for my $idx (0..@$lst-1) {\n\
    \        push @result, [ $idx, my_index($lst->[$idx], $x) ]\n            if my_index($lst->[$idx],\
    \ $x) >= 0;\n    }\n    return sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\
    \ } @result;\n}", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for\
    \ my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n   \
    \             push @result, [$i, $j];\n            }\n        }\n    }\n    return\
    \ sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n}", "    my @result;\n\
    \    for (my $i = 0; $i < @$lst; $i++) {\n        for (my $j = 0; $j < @{$lst->[$i]};\
    \ $j++) {\n            if ($lst->[$i][$j] == $x) {\n                push @result,\
    \ [$i, $j];\n            }\n        }\n    }\n    @result = sort {$a->[0] <=>\
    \ $b->[0] || $b->[1] <=> $a->[1]} @result;\n    return @result;\n}", "    return\
    \ [] unless @$lst;\n    my @result;\n    for my $i (0..$#$lst) {\n        for\
    \ my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n     \
    \           push @result, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result];\n}", "    my\
    \ @coord;\n    for my $i (0..$#{$lst}) {\n        my $row = $lst->[$i];\n    \
    \    for my $j (0..$#{$row}) {\n            if ($row->[$j] == $x) {\n        \
    \        push @coord, [$i, $j];\n            }\n        }\n    }\n    my @sorted\
    \ = sort { $a->[0] <=> $b->[0] } @coord;\n    my $prev = -1;\n    for my $i (0..$#sorted)\
    \ {\n        if ($sorted[$i][0] == $prev) {\n            my $j = $i;\n       \
    \     while ($j < $#sorted && $sorted[$j][0] == $prev) {\n                $j++;\n\
    \            }\n            my @sub_sorted = sort { $b->[1] <=> $a->[1] } @sorted[$i..$j-1];\n\
    \            splice @sorted, $i, $j-$i, @sub_sorted;\n        }\n        $prev\
    \ = $sorted[$i][0];\n    }\n    return \\@sorted;\n}", "    my @rows = ();\n \
    \   foreach my $i (0 .. @$lst - 1) {\n        foreach my $j (0 .. @{$lst->[$i]}\
    \ - 1) {\n            push @rows, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n\
    \    }\n    return sort { $a->[0] <=> $b->[0] or $b->[1] <=> $a->[1] } @rows;\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        my $row = $lst->[$i];\n\
    \        push @result, [$i, $_] for grep { $row->[$_] == $x } 0 .. $#{$row};\n\
    \    }\n    @result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n\
    \    return \\@result;\n}", "    my @ret;\n    my $i = 0;\n    foreach (@$lst)\
    \ {\n        my $j = 0;\n        foreach my $e (@$_) {\n            if ($e ==\
    \ $x) {\n                push @ret, [$i, $j];\n            }\n            $j +=\
    \ 1;\n        }\n        $i += 1;\n    }\n    return sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @ret;\n}", "    my @result;\n    for (my $i = 0; $i\
    \ < @$lst; $i++) {\n        for (my $j = 0; $j < @{$lst->[$i]}; $j++) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    @result = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result;\n    return @result;\n}", "    my @result;\n    for (my\
    \ $i = 0; $i < @$lst; $i++) {\n        for (my $j = 0; $j < @{$lst->[$i]}; $j++)\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                my $ref = [$i, $j];\n\
    \                push @result, $ref;\n            }\n        }\n    }\n    @result\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n    return @result;\n\
    }", "    my @res;\n    my $n;\n    $n++ while $lst->[$n];\n    my $idx = 0;\n\
    \    for my $i (0..$n-1) {\n        my $row = $lst->[$i];\n        for my $j (0..@$row-1)\
    \ {\n            push @res, [$i, $j] if $row->[$j] == $x;\n        }\n    }\n\
    \    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return\
    \ \\@res;\n}", "    my $row = [];\n    for my $i (0 .. @$lst - 1) {\n        my\
    \ $j = 0;\n        for my $e (@{$lst->[$i]}) {\n            if ($e == $x) {\n\
    \                push @$row, [$i, $j];\n            }\n            $j++;\n   \
    \     }\n    }\n    @$row = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]}\
    \ @$row;\n    return $row;\n}", "    my $len = @$lst;\n    my @res;\n    my $i\
    \ = 0;\n    while ($i < $len) {\n        my $row = $lst->[$i];\n        my $row_len\
    \ = @$row;\n        my $j = 0;\n        while ($j < $row_len) {\n            if\
    \ ($row->[$j] == $x) {\n                push @res, [$i, $j];\n            }\n\
    \            $j++;\n        }\n        $i++;\n    }\n    my @ans = sort { $a->[0]\
    \ <=> $b->[0] } @res;\n    @ans = sort { $b->[1] <=> $a->[1] } @ans;\n    return\
    \ \\@ans;\n}", "    my $n = @$lst;\n    my @coords;\n    for my $i (0..$n-1) {\n\
    \        my $m = @{$lst->[$i]};\n        for my $j (0..$m-1) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @coords, [$i, $j];\n        \
    \    }\n        }\n    }\n    @coords = sort { $a->[0] <=> $b->[0] or $b->[1]\
    \ <=> $a->[1] } @coords;\n    return @coords;\n}", "    my @list;\n    my $counter\
    \ = 0;\n    foreach my $x (@$lst) {\n        my $counter1 = 0;\n        foreach\
    \ my $y (@$x) {\n            if ($y == $x) {\n                push @list, [$counter,\
    \ $counter1];\n            }\n            $counter1++;\n        }\n        $counter++;\n\
    \    }\n    return sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @list;\n\
    }", "    my @res;\n    for my $i (0..@$lst-1) {\n        my $row = $lst->[$i];\n\
    \        for my $j (0..@$row-1) {\n            push @res, [$i, $j] if $row->[$j]\
    \ == $x;\n        }\n    }\n    @res = sort {\n        $a->[0] <=> $b->[0] ||\
    \ $b->[1] <=> $a->[1]\n    } @res;\n    @res;\n}", "    my @out = ();\n    for\
    \ (my $i = 0; $i < @$lst; $i++) {\n        my $row = $lst->[$i];\n        for\
    \ (my $j = 0; $j < @$row; $j++) {\n            if ($row->[$j] == $x) {\n     \
    \           push @out, [$i, $j];\n            }\n        }\n    }\n    return\
    \ @out;\n}", "    my @result;\n    my $row = 0;\n    for my $item (@$lst) {\n\
    \        my $col = 0;\n        for my $v (@$item) {\n            if ($v == $x)\
    \ {\n                push @result, [$row, $col];\n            }\n            $col++;\n\
    \        }\n        $row++;\n    }\n    @result = sort {\n        if ($a->[0]\
    \ == $b->[0]) {\n            return $b->[1] <=> $a->[1];\n        }\n        return\
    \ $a->[0] <=> $b->[0];\n    } @result;\n    return @result;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res];\n}", "    my @result;\n    for my $y (0 .. $#{$lst}) {\n\
    \        push @result, map [$y, $_], grep $lst->[$y][$_] == $x, 0 .. $#{$lst->[$y]};\n\
    \    }\n    sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n}",
  "    my @x_coords;\n    for my $i (0 .. @$lst - 1) {\n        my $row = $lst->[$i];\n\
    \        for my $j (0 .. @$row - 1) {\n            if ($row->[$j] == $x) {\n \
    \               push @x_coords, [$i, $j];\n            }\n        }\n    }\n \
    \   return [] unless @x_coords;\n    return [sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @x_coords];\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n\
    }", "    my @res;\n    for my $y (0..$#{$lst}) {\n        for my $z (0..$#{$lst->[$y]})\
    \ {\n            if ($lst->[$y][$z] == $x) {\n                push @res, [$y,\
    \ $z];\n            }\n        }\n    }\n    return [\n        map {$_->[0]}\n\
    \        sort {$a->[1] <=> $b->[1]}\n        sort {$a->[2] <=> $b->[2]}\n    \
    \    map {[$_, @{$res[$_]}]}\n        0..$#res\n    ];\n}", "    my @result;\n\
    \    my $i = 0;\n    foreach my $row (@$lst) {\n        my $j = 0;\n        foreach\
    \ my $column (@$row) {\n            if ($column == $x) {\n                push\
    \ @result, [$i, $j];\n            }\n            $j++;\n        }\n        $i++;\n\
    \    }\n    return sort {\n        $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\n\
    \    } @result;\n}", "    my @ans;\n    for my $i (0..@$lst-1) {\n        for\
    \ my $j (0..@{$lst->[$i]}-1) {\n            if ($lst->[$i][$j] == $x) {\n    \
    \            push @ans, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @ans];\n}", "    my @res;\n\
    \    for (my $i = 0; $i < @$lst; $i++) {\n        for (my $j = 0; $j < @{$lst->[$i]};\
    \ $j++) {\n            if ($lst->[$i][$j] == $x) {\n                push @res,\
    \ [$i, $j];\n            }\n        }\n    }\n    @res = sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @res;\n    return \\@res;\n}", "    my @ret;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $rows = scalar @$lst;\n    for my $row (@$lst)\
    \ {\n        my $cols = scalar @$row;\n        for my $col (@$row) {\n       \
    \     if ($col == $x) {\n                push @ret, [$i, $j];\n            }\n\
    \            $j++;\n        }\n        $i++;\n        $j = 0;\n    }\n    @ret\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @ret;\n    return @ret;\n\
    }", "    my @res;\n    foreach my $i (0..$#{$lst}) {\n        foreach my $j (0..$#{$lst->[$i]})\
    \ {\n            push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n   \
    \ }\n    return sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n}", " \
    \   my @result;\n    for my $i (0 .. $#{$lst}) {\n        my $row = $lst->[$i];\n\
    \        for my $j (0 .. $#{$row}) {\n            if ($row->[$j] == $x) {\n  \
    \              push @result, [$i, $j];\n            }\n        }\n    }\n    return\
    \ sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n}\nuse Test::More;\n\
    use Data::Dumper;\nis_deeply get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1),\n    [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]];\nis_deeply\
    \ get_row([], 1), [];\nis_deeply get_row([[], [1], [1, 2, 3]], 3), [[2, 2]];\n\
    done_testing;", "    my @res;\n    foreach my $i (0..$#{$lst}) {\n        foreach\
    \ my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n     \
    \           push @res, [$i, $j];\n            }\n        }\n    }\n    return\
    \ sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n}", "    return []\
    \ unless $lst;\n    my @result;\n    for my $row (0..$#$lst) {\n        my $col\
    \ = 0;\n        while (($col = index($lst->[$row], $x, $col)) >= 0) {\n      \
    \      push @result, [$row, $col];\n            $col++;\n        }\n    }\n  \
    \  return [sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result];\n}",
  "    my(@r);\n    foreach my $y (0..$#{$lst}) {\n        foreach my $z (0..$#{$lst->[$y]})\
    \ {\n            if ($lst->[$y][$z] == $x) {\n                push(@r, [$y, $z]);\n\
    \            }\n        }\n    }\n    @r = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @r;\n    return @r;\n}", "    my @results;\n    my $i = 0;\n \
    \   for my $row (@$lst) {\n        my $j = 0;\n        for my $elem (@$row) {\n\
    \            if ($elem == $x) {\n                push @results, [$i, $j];\n  \
    \          }\n            $j++;\n        }\n        $i++;\n    }\n    return sort_row(@results);\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        my $row = $lst->[$i];\n\
    \        for my $j (0 .. $#{$row}) {\n            if ($row->[$j] == $x) {\n  \
    \              push @result, [$i, $j];\n            }\n        }\n    }\n    @result\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n    return \\\
    @result;\n}", "    map { my $c = $_;\n          map { [$c, $_] } grep { $lst->[$c][$_]\
    \ == $x } 0..$#{$lst->[$c]} }\n        0..$#{$lst};\n}", "    my @result;\n  \
    \  my $i = 0;\n    for my $row (@$lst) {\n        for my $j (0 .. @$row - 1) {\n\
    \            if ($row->[$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n        $i++;\n    }\n    return [] unless @result;\n\
    \    for my $row (@result) {\n        for my $j (0 .. @$row - 2) {\n         \
    \   for my $k ($j + 1 .. @$row - 1) {\n                if ($row->[$j] > $row->[$k])\
    \ {\n                    ($row->[$j], $row->[$k]) = ($row->[$k], $row->[$j]);\n\
    \                }\n            }\n        }\n    }\n    for my $j (0 .. @result\
    \ - 2) {\n        for my $k ($j + 1 .. @result - 1) {\n            if ($result[$j]->[0]\
    \ > $result[$k]->[0]) {\n                ($result[$j], $result[$k]) = ($result[$k],\
    \ $result[$j]);\n            }\n        }\n    }\n    return \\@result;\n}", " \
    \   my(@res);\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    return [] unless (@res);\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res];\n}", "    my $result\
    \ = [];\n    for (my $row = 0; $row < @$lst; $row++) {\n        my $cols = $lst->[$row];\n\
    \        for (my $col = 0; $col < @$cols; $col++) {\n            if ($cols->[$col]\
    \ == $x) {\n                push @$result, [$row, $col];\n            }\n    \
    \    }\n    }\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @$result];\n\
    }", "    my @coords;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @coords, [$i, $j];\n            }\n        }\n    }\n    return [sort {\
    \ $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @coords];\n}", "    my $row_len\
    \ = @$lst;\n    my @res;\n    for (my $row = 0; $row < $row_len; $row++) {\n \
    \       my $col_len = @{$lst->[$row]};\n        for (my $col = 0; $col < $col_len;\
    \ $col++) {\n            if ($lst->[$row][$col] == $x) {\n                push\
    \ @res, [$row, $col];\n            }\n        }\n    }\n    @res = sort {$a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return @res;\n}", "    my @res;\n\
    \    my $row = 0;\n    my $col = 0;\n    for my $sublst (@$lst) {\n        $col\
    \ = 0;\n        for my $el (@$sublst) {\n            if ($el == $x) {\n      \
    \          push @res, [$row, $col];\n            }\n            $col++;\n    \
    \    }\n        $row++;\n    }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res;\n    return @res;\n}", "    my $result = [];\n    for my\
    \ $i (0 .. $#$lst) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @$result, [$i, $j];\n       \
    \     }\n        }\n    }\n    return $result;\n}", "    my @res;\n    for my\
    \ $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n           \
    \ }\n        }\n    }\n    return [] unless @res;\n    @res = sort {$a->[0] <=>\
    \ $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return \\@res;\n}", "    die \"Not\
    \ enough arguments\" if @_ < 2;\n    my @answer;\n    my $row = 0;\n    for my\
    \ $i (@$lst) {\n        my $column = 0;\n        for my $j (@$i) {\n         \
    \   if ($j == $x) {\n                push @answer, [$row, $column];\n        \
    \    }\n            $column++;\n        }\n        $row++;\n    }\n    my @sorted\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @answer;\n    return \\\
    @sorted;\n}", "    my @xy;\n    for my $i (0..@$lst-1) {\n        my $row = $lst->[$i];\n\
    \        for my $j (0..@$row-1) {\n            if ($row->[$j] == $x) {\n     \
    \           push @xy, [$i, $j];\n            }\n        }\n    }\n    return []\
    \ unless @xy;\n    return [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @xy];\n\
    }", "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    my @sorted = sort {\n        $a->[0]\
    \ <=> $b->[0] or $b->[1] <=> $a->[1]\n    } @res;\n    return \\@sorted;\n}",
  "    my @result;\n    for my $i (0 .. @$lst - 1) {\n        my $row = $lst->[$i];\n\
    \        for my $j (0 .. @$row - 1) {\n            push @result, [$i, $j] if $row->[$j]\
    \ == $x;\n        }\n    }\n    return [ sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @result ];\n}", '    return [] unless @$lst;', "    my @ret;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        push @ret, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n    }\n    @ret\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @ret;\n    return \\@ret;\n\
    }", "    # use $lst and $x here\n    # ...\n    my @res = ();\n    for my $i (0..$#{$lst})\
    \ {\n      my $row = $lst->[$i];\n      my @col = grep { $row->[$_] == $x } 0..$#{$row};\n\
    \      my @idx = map { [$i, $_] } @col;\n      push @res, @idx;\n    }\n    @res\
    \ = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n    return @res;\n\
    }", "    my @results;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @results, [$i, $j];\n            }\n        }\n    }\n    return [sort\
    \ {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @results];\n}", "    my @rows =\
    \ ();\n    for my $i (0 .. $#{$lst}) {\n        my $row = $lst->[$i];\n      \
    \  for my $j (0 .. $#{$row}) {\n            if ($row->[$j] == $x) {\n        \
    \        push @rows, [$i, $j];\n            }\n        }\n    }\n    return @rows;\n\
    }", "    my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 ..\
    \ $#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n               \
    \ push @result, [$i, $j];\n            }\n        }\n    }\n    return [sort {$a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @result;\n    my\
    \ $row_number = 0;\n    foreach my $row (@$lst) {\n        my $col_number = 0;\n\
    \        foreach my $col (@$row) {\n            if ($col == $x) {\n          \
    \      push @result, [$row_number, $col_number];\n            }\n            $col_number++;\n\
    \        }\n        $row_number++;\n    }\n    return sort { ($a->[0] <=> $b->[0])\
    \ or ($b->[1] <=> $a->[1]) } @result;\n}", "    my @result;\n    for (my $i =\
    \ 0; $i < @$lst; $i++) {\n        for (my $j = 0; $j < @{$lst->[$i]}; $j++) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n        }\n    }\n    my @sorted = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @result;\n    return \\@sorted;\n}", "    # $lst is\
    \ arrayref of arrayrefs\n    # $x is int\n    # return arrayref of arrayrefs\n\
    \    my @result;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    # row sort\n    @result = sort {$a->[0]\
    \ <=> $b->[0]} @result;\n    # column sort\n    @result = sort {$b->[1] <=> $a->[1]}\
    \ @result;\n    return \\@result;\n}", "    my @rows = ();\n    for (my $i = 0;\
    \ $i < @$lst; $i++) {\n        for (my $j = 0; $j < @{$lst->[$i]}; $j++) {\n \
    \           if ($lst->[$i][$j] == $x) {\n                push @rows, [$i, $j];\n\
    \            }\n        }\n    }\n    @rows = sort { $a->[0] <=> $b->[0] } @rows;\n\
    \    @rows = sort { $b->[1] <=> $a->[1] } @rows;\n    return @rows;\n}", "   \
    \ my @res;\n    for my $i (0..$#{$lst}) {\n        my $row = $lst->[$i];\n   \
    \     for my $j (0..$#{$row}) {\n            if ($row->[$j] == $x) {\n       \
    \         push @res, [$i, $j];\n            }\n        }\n    }\n    @res = sort\
    \ {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return \\@res;\n}",
  "    my @res;\n    my $cnt = 0;\n    for my $arr (@$lst) {\n        my $idx = binary_search($arr,\
    \ $x);\n        if ($idx > -1) {\n            push @res, [$cnt, $idx];\n     \
    \   }\n        $cnt++;\n    }\n    my @res1 = sort { $a->[0] <=> $b->[0] } @res;\n\
    \    my @res2 = map { [$_->[0], scalar(@{$lst->[$_->[0]]}) - $_->[1] - 1] } @res1;\n\
    \    return \\@res2;\n}", "    my @ans = ();\n    for my $i (0..$#{$lst}) {\n\
    \        for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @ans, [$i, $j];\n            }\n        }\n    }\n \
    \   @ans = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @ans;\n    return\
    \ @ans;\n}", "    my @res;\n    for (my $i = 0; $i < @$lst; $i++) {\n        for\
    \ (my $j = 0; $j < @{$lst->[$i]}; $j++) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   my @sorted = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n \
    \   return \\@sorted;\n}", "    my $ret = [];\n    my $r = 0;\n    for my $row\
    \ (@$lst) {\n        my $c = 0;\n        for my $col (@$row) {\n            if\
    \ ($col == $x) {\n                push @$ret, [$r, $c];\n            }\n     \
    \       $c++;\n        }\n        $r++;\n    }\n    $ret = [sort { $a->[0] <=>\
    \ $b->[0] || $b->[1] <=> $a->[1] } @$ret];\n    return $ret;\n}", "    my $ret\
    \ = [];\n    if ( !@$lst || !@$lst[0] ) {\n        return $ret;\n    }\n    my\
    \ $i = 0;\n    for my $row (@$lst) {\n        my $j = 0;\n        for my $col\
    \ (@$row) {\n            if ( $col == $x ) {\n                push @$ret, [$i,\
    \ $j];\n            }\n            $j++;\n        }\n        $i++;\n    }\n  \
    \  return $ret;\n}", "    return $lst if $x < 0;\n    my @coords;\n    for my\
    \ $i (0 .. $#{$lst}) {\n        my $sublst = $lst->[$i];\n        for my $j (0\
    \ .. $#{$sublst}) {\n            push @coords, [$i, $j] if $sublst->[$j] == $x;\n\
    \        }\n    }\n    return [] unless @coords;\n    return [sort { $a->[0] <=>\
    \ $b->[0] || $b->[1] <=> $a->[1] } @coords];\n}", "    my @res;\n    for my $row\
    \ (0..$#{$lst}) {\n        for my $col (0..$#{$lst->[$row]}) {\n            push\
    \ @res, [$row, $col] if $lst->[$row][$col] == $x;\n        }\n    }\n    return\
    \ [sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res];\n}", "    # [1]\n\
    \    # [[2, 1], [3, 1]]\n    # [[3, 2], [2, 2]]\n    # [[], [1], [1, 2, 3]]\n\
    \    # my @myarray;\n    # my @myarray2;\n    # my @myarray3;\n    # my @myarray4;\n\
    \    # my @myarray5;\n    # my @myarray6;\n    # my @myarray7;\n    # my @myarray8;\n\
    \    # my @myarray9;\n    # my @myarray10;\n    # my @myarray11;\n    # my @myarray12;\n\
    \    # my @myarray13;\n    # my @myarray14;\n    # my @myarray15;\n    # my @myarray16;\n\
    \    # my @myarray17;\n    # my @myarray18;\n    # my @myarray19;\n    # my @myarray20;\n\
    \    # my @myarray21;\n    # my @myarray22;\n    # my @myarray23;\n    # my @myarray24;\n\
    \    # my @myarray25;\n    # my @myarray26;\n    # my @myarray27;\n    # my @myarray28;\n\
    \    # my @myarray29;\n    # my @myarray30;\n    # my @myarray31;\n    # my @myarray32;\n\
    \    # my @myarray33;\n    # my @myarray34;\n    # my @myarray35;\n    # my @myarray36;\n\
    \    # my @myarray37;\n    # my @myarray38;\n    # my @myarray39;\n    # my @myarray40;\n\
    \    # my @myarray41;\n    # my @myarray42;\n    # my @myarray43;\n    # my @myarray44;\n\
    \    # my @myarray45;\n    # my @myarray46;\n    # my @myarray47;\n    # my @myarray48;\n\
    \    # my @myarray49;\n    # my @myarray50;\n    # my @myarray51;\n    # my @myarray",
  "    my @res;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @res, [$i,\
    \ $j];\n            }\n        }\n    }\n    @res = sort {\n        if ($a->[0]\
    \ == $b->[0]) {\n            return $b->[1] <=> $a->[1];\n        }\n        else\
    \ {\n            return $a->[0] <=> $b->[0];\n        }\n    } @res;\n    return\
    \ @res;\n}", "    my(@rst);\n    for my $i (0..$#{$lst}) {\n        for my $j\
    \ (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x) {\n           \
    \     push @rst, [$i, $j];\n            }\n        }\n    }\n    # Sort by row\
    \ and column\n    @rst = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @rst;\n\
    \    @rst;\n}", "    my $m = @$lst;\n    my @res;\n    for my $i (0..$m-1) {\n\
    \        for my $j (0..@{$lst->[$i]}-1) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   my @sorted = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n   \
    \ return \\@sorted;\n}", "    my $row = 0;\n    my @found;\n    for my $arr (@$lst)\
    \ {\n        my $col = 0;\n        for my $value (@$arr) {\n            if ($value\
    \ == $x) {\n                push @found, [$row, $col];\n            }\n      \
    \      $col++;\n        }\n        $row++;\n    }\n    my @sorted = sort { $a->[0]\
    \ <=> $b->[0] } @found;\n    return [ sort { $b->[1] <=> $a->[1] } @sorted ];\n\
    }", "    return [0 .. $#{$lst}] if $x eq '*';\n    return [] if $x eq '';\n  \
    \  my @result;\n    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] eq $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        my $r = $lst->[$i];\n        for my\
    \ $j (0 .. $#{$r}) {\n            if ($r->[$j] == $x) {\n                push\
    \ @result, [$i, $j];\n            }\n        }\n    }\n    @result = sort { $a->[0]\
    \ <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n    return \\@result;\n}", " \
    \   my(@result);\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    @result = sort {$a->[0] <=> $b->[0]\
    \ or $b->[1] <=> $a->[1]} @result;\n    return @result;\n}", "    return [] unless\
    \ @$lst;\n    my $counter = 0;\n    my @res;\n    for my $i (0..$#$lst) {\n  \
    \      for my $j (0..$#{$lst->[$i]}) {\n            if ($lst->[$i][$j] == $x)\
    \ {\n                push @res, [$i, $j];\n            }\n        }\n    }\n \
    \   return [] unless @res;\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1] } @res;\n    return \\@res;\n}", "    # Implement me!\n    # https://github.com/hmenager/perl-course-exercises/blob/master/exercises/05/test/test.t\n\
    }", "    my $height = @$lst;\n    return [] if $height == 0;\n    my @coords;\n\
    \    my $i = 0;\n    while($i < $height) {\n        my $width = @{$lst->[$i]};\n\
    \        my $j = 0;\n        while($j < $width) {\n            if($lst->[$i][$j]\
    \ == $x) {\n                push @coords, [$i, $j];\n            }\n         \
    \   $j++;\n        }\n        $i++;\n    }\n    @coords = sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @coords;\n    return \\@coords;\n}", "    my @result;\n\
    \    for my $i (0 .. @$lst - 1) {\n        for my $j (0 .. @{$lst->[$i]} - 1)\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n        }\n    }\n    return sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @result;\n}", "    my $result = [];\n    my $row = 0;\n\
    \    for my $arr (@$lst) {\n        if (@$arr == 0) {\n            $row++;\n \
    \           next;\n        }\n        my $col = 0;\n        for my $elem (@$arr)\
    \ {\n            if ($elem == $x) {\n                push @$result, [$row, $col];\n\
    \            }\n            $col++;\n        }\n        $row++;\n    }\n    $result\
    \ = sort {$a->[0] <=> $b->[0] or $b->[1] <=> $a->[1]} @$result;\n    return $result;\n\
    }", "    my @result;\n    my $j = 0;\n    for my $i (@$lst) {\n        my $k =\
    \ 0;\n        for my $e (@$i) {\n            if ($e == $x) {\n               \
    \ push @result, [$j, $k];\n            }\n            $k++;\n        }\n     \
    \   $j++;\n    }\n    @result = sort {\n        ($a->[0] <=> $b->[0]) || ($b->[1]\
    \ <=> $a->[1])\n    } @result;\n    return @result;\n}", "    # TODO: Implement\
    \ me\n    return [];\n}", "    my @rows;\n    for my $r (0..$#{$lst}) {\n    \
    \    my @cols = grep { $lst->[$r][$_] == $x } 0..$#{$lst->[$r]};\n        push\
    \ @rows, map { [$r, $_] } @cols;\n    }\n    @rows = sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @rows;\n    return @rows;\n}", "    my $ans = [[]];\n\
    \    my $curr_row = 0;\n    my $curr_col = 0;\n    for (my $i = 0; $i < scalar\
    \ @$lst; $i++) {\n        for (my $j = 0; $j < scalar @{$lst->[$i]}; $j++) {\n\
    \            if ($lst->[$i][$j] == $x) {\n                $ans->[$curr_row][$curr_col]\
    \ = $i;\n                $ans->[$curr_row][$curr_col + 1] = $j;\n            \
    \    $curr_row++;\n                $curr_col = 0;\n            }\n        }\n\
    \    }\n    return $ans;\n}", "    my @res;\n    my $cnt = 0;\n    foreach my\
    \ $i (0..$#{$lst}) {\n        foreach my $j (0..$#{$lst->[$i]}) {\n          \
    \  if ($lst->[$i][$j] == $x) {\n                $res[$cnt] = [$i, $j];\n     \
    \           $cnt++;\n            }\n        }\n    }\n    @res = sort { $a->[0]\
    \ <=> $b->[0] } @res;\n    foreach my $i (0..$#res) {\n        @{$res[$i]} = sort\
    \ { $b->[1] <=> $a->[1] } @{$res[$i]};\n    }\n    return @res;\n}", "    my @row;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @row, [$i, $j];\n \
    \           }\n        }\n    }\n    return sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @row;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n    \
    \    my $arr = $lst->[$i];\n        for my $j (0..$#{$arr}) {\n            push\
    \ @res, [$i, $j] if $arr->[$j] == $x;\n        }\n    }\n    return [] unless\
    \ @res;\n    @res = sort { $a->[0] <=> $b->[0] } @res;\n    for my $arr (@res)\
    \ {\n        @$arr = sort { $b->[1] <=> $a->[1] } @$arr;\n    }\n    return @res;\n\
    }", "    my @result;\n    for my $y (0 .. $#{$lst}) {\n        push @result, [$y,\
    \ $_] for grep { $lst->[$y][$_] == $x } 0 .. $#{$lst->[$y]};\n    }\n    return\
    \ [sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result];\n}", "    my(@res);\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return sort {\n        if ($a->[0] == $b->[0])\
    \ {\n            $b->[1] <=> $a->[1];\n        } else {\n            $a->[0] <=>\
    \ $b->[0];\n        }\n    } @res;\n}", "    my $idx = 0;\n    my @rows = ();\n\
    \    for my $row (@$lst) {\n        for my $col (@$row) {\n            if ($col\
    \ == $x) {\n                push @rows, [$idx, $#$row];\n            }\n     \
    \   }\n        $idx++;\n    }\n    return [sort { ($a->[0] <=> $b->[0]) || ($b->[1]\
    \ <=> $a->[1]) } @rows];\n}", "    my @result;\n    my $row_idx = 0;\n    for\
    \ my $row (@$lst) {\n        for my $column_idx (0 .. $#$row) {\n            if\
    \ ($row->[$column_idx] == $x) {\n                push @result, [$row_idx, $column_idx];\n\
    \            }\n        }\n        $row_idx++;\n    }\n    @result = sort { $a->[0]\
    \ <=> $b->[0] } @result;\n    @result = sort { $b->[1] <=> $a->[1] } @result;\n\
    \    return @result;\n}", "    my @res;\n    foreach my $row_index (0..$#{$lst})\
    \ {\n        my $row = $lst->[$row_index];\n        my @coords = grep { $row->[$_]\
    \ == $x } 0..$#{$row};\n        push @res, map { [$row_index, $_] } reverse @coords;\n\
    \    }\n    return \\@res;\n}", "    my @final;\n    foreach my $i (0..$#{$lst})\
    \ {\n        my @row = @{$lst->[$i]};\n        foreach my $j (0..$#row) {\n  \
    \          if ($row[$j] == $x) {\n                push @final, [$i, $j];\n   \
    \         }\n        }\n    }\n    return \\@final;\n}", "    my @data;\n    my\
    \ $cnt = 0;\n    for (@$lst) {\n        my $pos = -1;\n        for (0..$#$_) {\n\
    \            if ($_->[$_] == $x) {\n                $pos = $_;\n             \
    \   last;\n            }\n        }\n        next if $pos == -1;\n        push\
    \ @data, [$cnt, $pos];\n        $cnt++;\n    }\n    return [] if @data == 0;\n\
    \    my @rows = sort { $a->[0] <=> $b->[0] } @data;\n    for (@rows) {\n     \
    \   $_->[1] = -$_->[1];\n    }\n    return sort { $a->[0] <=> $b->[0] } @rows;\n\
    }", "    # your code here\n    my @result;\n    for my $i (0..scalar(@$lst)-1)\
    \ {\n        for my $j (0..scalar(@{$lst->[$i]})-1) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    my @sorted_result = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\
    \ } @result;\n    return \\@sorted_result;\n}", "    my @coords;\n    for my $i\
    \ (0 .. @$lst - 1) {\n        for my $j (0 .. @{$lst->[$i]} - 1) {\n         \
    \   if ($lst->[$i][$j] == $x) {\n                push @coords, [$i, $j];\n   \
    \         }\n        }\n    }\n    @coords = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @coords;\n    return @coords;\n}", "    my @rv;\n    for my $row\
    \ (0..$#{$lst}) {\n        push @rv, map { [$row, $_] } grep { $lst->[$row][$_]\
    \ == $x } (0..$#{$lst->[$row]});\n    }\n    return [ sort { $a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1] } @rv ];\n}", "    my $i = 0;\n    my @result;\n    while\
    \ ($i < @$lst) {\n        my $j = 0;\n        while ($j < @{$lst->[$i]}) {\n \
    \           if ($lst->[$i][$j] == $x) {\n                push @result, [$i, $j];\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    @result\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n    return @result;\n\
    }", "    my @ret;\n    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @ret, [$i,\
    \ $j];\n            }\n        }\n    }\n    @ret = sort {$a->[0] == $b->[0] ?\
    \ $b->[1] <=> $a->[1] : $a->[0] <=> $b->[0]} @ret;\n    return @ret;\n}", "  \
    \  my $result = [];\n    for my $i (0 .. $#$lst) {\n        my $ary = $lst->[$i];\n\
    \        my $j = $#$ary;\n        while ($j >= 0) {\n            if ($ary->[$j]\
    \ == $x) {\n                unshift @$result, [$i, $j];\n            }\n     \
    \       $j--;\n        }\n    }\n    return $result;\n}", "    my @ret;\n    for\
    \ (my $row=0; $row < @$lst; $row++) {\n        for (my $col=0; $col < @{$lst->[$row]};\
    \ $col++) {\n            push @ret, [$row, $col] if $lst->[$row][$col] == $x;\n\
    \        }\n    }\n    return sort {\n        $a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1]\n    } @ret;\n}", "    my @result;\n    for my $row_idx (0 .. $#{$lst})\
    \ {\n        for my $col_idx (0 .. $#{$lst->[$row_idx]}) {\n            if ($lst->[$row_idx][$col_idx]\
    \ == $x) {\n                push @result, [$row_idx, $col_idx];\n            }\n\
    \        }\n    }\n    @result = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]}\
    \ @result;\n    return @result;\n}", "    my @ret = ();\n    for my $i (0 .. $#{$lst})\
    \ {\n        my $sub = $lst->[$i];\n        for my $j (0 .. $#{$sub}) {\n    \
    \        if ($sub->[$j] == $x) {\n                push @ret, [$i, $j];\n     \
    \       }\n        }\n    }\n    my @sortret = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @ret;\n    return \\@sortret;\n}", "    my @result;\n    for my\
    \ $i (0 .. $#{$lst}) {\n        my $j = 0;\n        while (($j < @{$lst->[$i]})\
    \ && ($lst->[$i][$j] != $x)) {\n            $j++;\n        }\n        if ($j <\
    \ @{$lst->[$i]}) {\n            push @result, [$i, $j];\n        }\n    }\n  \
    \  return sort {\n        $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\n    } @result;\n\
    }", "    my @ret = ();\n    for my $i (0 .. @$lst - 1) {\n        for my $j (0\
    \ .. @{$lst->[$i]} - 1) {\n            push @ret, [$i, $j] if $lst->[$i][$j] ==\
    \ $x;\n        }\n    }\n    for my $e (@ret) {\n        $e->[0] = 1 - $e->[0];\n\
    \        $e->[1] = 1 - $e->[1];\n    }\n    @ret = sort {\n        if ($a->[0]\
    \ != $b->[0]) {\n            $a->[0] <=> $b->[0];\n        } else {\n        \
    \    $b->[1] <=> $a->[1];\n        }\n    } @ret;\n    for my $e (@ret) {\n  \
    \      $e->[0] = 1 - $e->[0];\n        $e->[1] = 1 - $e->[1];\n    }\n    @ret;\n\
    }", "    my $result = [];\n    my $i = 0;\n    my $j = 0;\n    foreach my $row\
    \ (@$lst) {\n        $j = 0;\n        foreach my $elem (@$row) {\n           \
    \ if ($elem == $x) {\n                push @$result, [$i, $j];\n            }\n\
    \            $j += 1;\n        }\n        $i += 1;\n    }\n    return $result;\n\
    }", "    my @result;\n    for (my $i = 0; $i < @$lst; $i++) {\n        for (my\
    \ $j = 0; $j < @{$lst->[$i]}; $j++) {\n            if ($lst->[$i][$j] == $x) {\n\
    \                push @result, [$i, $j];\n            }\n        }\n    }\n  \
    \  return [] if @result == 0;\n    @result = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result;\n    return \\@result;\n}", '    return [] unless @$lst;',
  "    my @res;\n    for my $row (0..$#{$lst}) {\n        for my $col (0..$#{$lst->[$row]})\
    \ {\n            push @res, [$row, $col] if $lst->[$row][$col] == $x;\n      \
    \  }\n    }\n    sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n}",
  "    my @result;\n    for my $i (0 .. @$lst - 1) {\n        my $row = $lst->[$i];\n\
    \        for my $j (0 .. @$row - 1) {\n            my $cell = $row->[$j];\n  \
    \          push @result, [$i, $j] if $cell == $x;\n        }\n    }\n    @result\
    \ = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result;\n    return \\\
    @result;\n}", "    my @result;\n    my $i = 0;\n    my $j = 0;\n    foreach my\
    \ $arr (@$lst) {\n        my $found = 0;\n        my $j = 0;\n        foreach\
    \ my $num (@$arr) {\n            if ($num == $x) {\n                push @result,\
    \ [$i, $j];\n                $found = 1;\n            }\n            $j++;\n \
    \       }\n        $i++;\n    }\n    @result = sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @result;\n    return \\@result;\n}", "    # TODO: Implement get_row\n\
    \    # HINT: Using push and sort can be helpful\n}", "    my @rv;\n    my $i;\n\
    \    for ($i = 0; $i < @$lst; $i++) {\n        my $t = $lst->[$i];\n        if\
    \ (index(join(',', @$t), $x) != -1) {\n            my $j;\n            for ($j\
    \ = 0; $j < @$t; $j++) {\n                push @rv, [$i, $j] if $t->[$j] == $x;\n\
    \            }\n        }\n    }\n    @rv = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @rv;\n    return \\@rv;\n}", "    my $len = @$lst;\n    my @result;\n\
    \    for (my $i = 0; $i < $len; $i++) {\n        my $row = $lst->[$i];\n     \
    \   my $row_len = @$row;\n        for (my $j = 0; $j < $row_len; $j++) {\n   \
    \         if ($row->[$j] == $x) {\n                push @result, [$i, $j];\n \
    \           }\n        }\n    }\n    return sort {\n        ($a->[0] <=> $b->[0])\n\
    \        || ($b->[1] <=> $a->[1])\n    } @result;\n}", "    my @ret;\n    for\
    \ my $i (0..$#{$lst}) {\n        my $row = $lst->[$i];\n        for my $j (0..$#{$row})\
    \ {\n            if ($row->[$j] == $x) {\n                push @ret, [$i, $j];\n\
    \            }\n        }\n    }\n    @ret = sort {\n        $a->[0] <=> $b->[0]\n\
    \            or\n        $b->[1] <=> $a->[1]\n    } @ret;\n    return \\@ret;\n\
    }", "    my @indexes;\n    my $y1 = 0;\n    my $y2 = 0;\n    foreach my $a (@$lst)\
    \ {\n        $y2 = 0;\n        foreach my $b (@$a) {\n            if ($b == $x)\
    \ {\n                push @indexes, [$y1, $y2];\n            }\n            $y2++;\n\
    \        }\n        $y1++;\n    }\n    return @indexes;\n}\nprint Dumper(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nprint Dumper(get_row([],\
    \ 1));\nprint Dumper(get_row([[], [1], [1, 2, 3]], 3));", "    my $row_index =\
    \ 0;\n    my @result;\n    for my $row (@$lst) {\n        my $col_index = 0;\n\
    \        for my $item (@$row) {\n            if ($item == $x) {\n            \
    \    push @result, [$row_index, $col_index];\n            }\n            $col_index++;\n\
    \        }\n        $row_index++;\n    }\n    return [sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @result];\n}", "    my $size = @$lst;\n    my @res;\n\
    \    for my $i (0..$size-1) {\n        my $sub_size = @{$lst->[$i]};\n       \
    \ for my $j (0..$sub_size-1) {\n            if ($lst->[$i][$j] == $x) {\n    \
    \            push @res, [$i, $j];\n            }\n        }\n    }\n    @res =\
    \ sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n    return @res;\n}",
  "    my @result;\n    for (my $i = 0; $i < @$lst; $i++) {\n        my $sub_arr =\
    \ $lst->[$i];\n        for (my $j = 0; $j < @$sub_arr; $j++) {\n            if\
    \ ($sub_arr->[$j] == $x) {\n                push @result, [$i, $j];\n        \
    \    }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0] } @result;\n\
    \    @result = sort { $b->[1] <=> $a->[1] } @result;\n    return @result;\n}",
  "    my $res = [];\n    for my $i (0 .. $#$lst) {\n        my $row = $lst->[$i];\n\
    \        for my $j (0 .. $#$row) {\n            push(@$res, [$i, $j]) if $row->[$j]\
    \ == $x;\n        }\n    }\n    return sort { $a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1] } @$res;\n}", "    my @result;\n    for (my $i = 0; $i < @$lst; $i++)\
    \ {\n        my $item = $lst->[$i];\n        my @indexes = grep { $item->[$_]\
    \ == $x } 0..$#$item;\n        push @result, map { [$i, $_] } @indexes;\n    }\n\
    \    return sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result;\n}",
  "    my @coordinates;\n    foreach my $i (0 .. $#{$lst}) {\n        my $arr = ${$lst}[$i];\n\
    \        foreach my $j (0 .. $#{$arr}) {\n            my $elem = ${$arr}[$j];\n\
    \            if ($elem == $x) {\n                push @coordinates, [$i, $j];\n\
    \            }\n        }\n    }\n    my @sorted_coordinates = sort {\n      \
    \  $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\n    } @coordinates;\n    return\
    \ @sorted_coordinates;\n}", "    my @ret;\n    foreach my $r (0..$#{$lst}) {\n\
    \        push @ret, [ $r, $_ ] foreach grep { $lst->[$r][$_] == $x } 0..$#{$lst->[$r]};\n\
    \    }\n    return @ret;\n}", "    my @ans;\n    for my $i (0..$#{$lst}) {\n \
    \       my $row = $lst->[$i];\n        for my $j (0..$#{$row}) {\n           \
    \ push @ans, [$i, $j] if $row->[$j] == $x;\n        }\n    }\n    sort {\n   \
    \     $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\n    } @ans;\n}", "    my @res;\n\
    \    for my $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n    \
    \        if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n \
    \           }\n        }\n    }\n    return sort {$a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1]} @res;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n     \
    \   for my $j (0..$#{$lst->[$i]}) {\n            push @res, [$i, $j] if $lst->[$i][$j]\
    \ == $x;\n        }\n    }\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1] } @res;\n    return \\@res;\n}", "    my $res = [];\n    for my $i (0\
    \ .. @$lst - 1) {\n        for my $j (0 .. @{$lst->[$i]} - 1) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @$res, [$i, $j];\n          \
    \  }\n        }\n    }\n    my @rows = map { $_->[0] } @$res;\n    my @sorted_rows\
    \ = sort { $a <=> $b } @rows;\n    my @sorted_res = map { $_->[1] } @$res;\n \
    \   my @sorted_indices = map { $rows[$_] } @sorted_rows;\n    for (my $i = 0;\
    \ $i < @sorted_indices; $i++) {\n        my $row = $sorted_indices[$i];\n    \
    \    my @indices = ();\n        for (my $j = 0; $j < @sorted_res; $j++) {\n  \
    \          if ($row == $res->[$j][0]) {\n                push @indices, $j;\n\
    \            }\n        }\n        @indices = sort { $res->[$b][1] <=> $res->[$a][1]\
    \ } @indices;\n        my @sorted_res_copy = @sorted_res;\n        for (my $j\
    \ = 0; $j < @indices; $j++) {\n            $sorted_res[$i + $j] = $sorted_res_copy[$indices[$j]];\n\
    \        }\n    }\n    return $res;\n}", "    my @a;\n    for my $i (0..@$lst-1)\
    \ {\n        for my $j (0..@{$lst->[$i]}-1) {\n            push @a, [$i, $j] if\
    \ $lst->[$i][$j] == $x;\n        }\n    }\n    return [] unless @a;\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @a];\n}", '    return []
    unless @$lst;', "    return [] unless ref $lst eq 'ARRAY';\n    my @result;\n\
    \    for (my $i = 0; $i < @$lst; $i++) {\n        for (my $j = 0; $j < @{$lst->[$i]};\
    \ $j++) {\n            if ($lst->[$i][$j] == $x) {\n                push @result,\
    \ [$i, $j];\n            }\n        }\n    }\n    my @sorted = sort {\n      \
    \  $a->[0] <=> $b->[0] or $b->[1] <=> $a->[1]\n    } @result;\n    return \\@sorted;\n\
    }", "    my @coordinates;\n    for my $row_num (0 .. $#{$lst}) {\n        for\
    \ my $col_num (0 .. $#{$lst->[$row_num]}) {\n            if ($lst->[$row_num][$col_num]\
    \ == $x) {\n                push @coordinates, [$row_num, $col_num];\n       \
    \     }\n        }\n    }\n    @coordinates = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @coordinates;\n    return @coordinates;\n}", "    my @ret = ();\n\
    \    for (my $i = 0; $i < @$lst; $i++) {\n        for (my $j = 0; $j < @{$lst->[$i]};\
    \ $j++) {\n            if ($lst->[$i][$j] == $x) {\n                push @ret,\
    \ [$i, $j];\n            }\n        }\n    }\n    @ret = sort {$a->[0] == $b->[0]\
    \ ? $b->[1] <=> $a->[1] : $a->[0] <=> $b->[0]} @ret;\n    return @ret;\n}", " \
    \   my @result;\n    foreach my $row (0..$#{$lst}) {\n        foreach my $col\
    \ (0..$#{$lst->[$row]}) {\n            push @result, [$row, $col] if $lst->[$row][$col]\
    \ == $x;\n        }\n    }\n    @result = sort {$a->[0] == $b->[0] ? $b->[1] <=>\
    \ $a->[1] : $a->[0] <=> $b->[0]} @result;\n    return @result;\n}", "    return\
    \ [] unless @$lst;\n    my $rst = [];\n    my $i   = 0;\n    for my $ary (@$lst)\
    \ {\n        my $j = 0;\n        while($j < @$ary) {\n            if($ary->[$j]\
    \ == $x) {\n                push @$rst, [$i, $j];\n            }\n           \
    \ $j++;\n        }\n        $i++;\n    }\n    return $rst;\n}", "    my @ret;\n\
    \    my $i = 0;\n    foreach (@$lst) {\n        my $j = 0;\n        foreach my\
    \ $elm (@$_) {\n            if ($elm == $x) {\n                push @ret, [$i,\
    \ $j];\n            }\n            $j++;\n        }\n        $i++;\n    }\n  \
    \  sort_array(\\@ret);\n    return \\@ret;\n}", "    my @lst = @$lst;\n    my\
    \ @found;\n    for (my $i = 0; $i < @lst; $i++) {\n        my @sub = @{$lst[$i]};\n\
    \        for (my $j = 0; $j < @sub; $j++) {\n            if ($sub[$j] == $x) {\n\
    \                push @found, [$i, $j];\n            }\n        }\n    }\n   \
    \ @found = sort { ($a->[0] <=> $b->[0]) or ($b->[1] <=> $a->[1]) } @found;\n \
    \   return @found;\n}", '    return [] unless @$lst;', "    my @result;\n    my\
    \ $i = 0;\n    my $j = 0;\n    while ($i < @$lst) {\n        while ($j < @{$lst->[$i]})\
    \ {\n            if ($lst->[$i][$j] == $x) {\n                push @result, [$i,\
    \ $j];\n            }\n            $j++;\n        }\n        $j = 0;\n       \
    \ $i++;\n    }\n    return sort {\n        ($a->[0] <=> $b->[0]) or ($b->[1] <=>\
    \ $a->[1])\n    } @result;\n}", "    my @coords;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @coords, [$i, $j];\n            }\n        }\n\
    \    }\n    return [sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @coords];\n\
    }", "    my @found = ();\n    for (my $i = 0; $i < @$lst; $i++) {\n        my\
    \ $row = $lst->[$i];\n        for (my $j = 0; $j < @$row; $j++) {\n          \
    \  if ($row->[$j] == $x) {\n                push @found, [$i, $j];\n         \
    \   }\n        }\n    }\n    return [] if (!@found);\n    my @sorted = sort {$a->[0]\
    \ <=> $b->[0] or $b->[1] <=> $a->[1]} @found;\n    return \\@sorted;\n}", "  \
    \  my @ret;\n    for my $row (0..$#{$lst}) {\n        my $c = 0;\n        for\
    \ my $col (@{$lst->[$row]}) {\n            if ($col == $x) {\n               \
    \ push @ret, [$row, $c];\n            }\n            $c++;\n        }\n    }\n\
    \    @ret = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @ret;\n    return\
    \ @ret;\n}", "    my @res;\n    for my $i (0..$#{$lst}) {\n        my $row = $lst->[$i];\n\
    \        for my $j (0..$#{$row}) {\n            if ($row->[$j] == $x) {\n    \
    \            push @res, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [] unless @res;\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]}\
    \ @res;\n    return \\@res;\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return sort {\n        $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\n\
    \    } @result;\n}", "    # Your code goes here\n    my @res;\n    foreach my\
    \ $i (0..$#{$lst}) {\n        foreach my $j (0..$#{$lst->[$i]}) {\n          \
    \  if ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n       \
    \     }\n        }\n    }\n    my @res1 = sort {\n        $a->[0] <=> $b->[0]\
    \ or $b->[1] <=> $a->[1]\n    } @res;\n    return @res1;\n}", "    my @result;\n\
    \    for my $i (0 .. $#{$lst}) {\n        my $row = $lst->[$i];\n        for my\
    \ $j (0 .. $#{$row}) {\n            if ($row->[$j] == $x) {\n                push\
    \ @result, [$i, $j];\n            }\n        }\n    }\n    return @result;\n}",
  "    my @res;\n    foreach my $i (0..$#{$lst}) {\n        foreach my $j (0..$#{$lst->[$i]})\
    \ {\n            push @res, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n   \
    \ }\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n  \
    \  return \\@res;\n}", "    my @ret;\n    my $i = 0;\n    my $j = 0;\n    while($i\
    \ < @$lst) {\n        while($j < @{$lst->[$i]}) {\n            if($lst->[$i][$j]\
    \ == $x) {\n                push @ret, [$i, $j];\n            }\n            $j++;\n\
    \        }\n        $j = 0;\n        $i++;\n    }\n    @ret = sort {$a->[0] <=>\
    \ $b->[0] || $b->[1] <=> $a->[1]} @ret;\n    return @ret;\n}", "    my @results;\n\
    \    for my $i (0 .. $#{$lst}) {\n        for my $j (0 .. $#{$lst->[$i]}) {\n\
    \            push @results, [$i, $j] if $lst->[$i][$j] == $x;\n        }\n   \
    \ }\n    @results = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @results;\n\
    \    @results;\n}", "    my @ret;\n    my @lst = @$lst;\n    for my $i (0..$#lst)\
    \ {\n        my @row = @{$lst[$i]};\n        my @pos;\n        for my $j (0..$#row)\
    \ {\n            if ($row[$j] == $x) {\n                push @pos, [$i, $j];\n\
    \            }\n        }\n        push @ret, @pos;\n    }\n    if (@ret) {\n\
    \        # Sort by row, then column\n        my @ret_row = sort { $a->[0] <=>\
    \ $b->[0] } @ret;\n        my @ret_col = sort { $b->[1] <=> $a->[1] } @ret_row;\n\
    \        return @ret_col;\n    }\n    return @ret;\n}", "    my @output;\n   \
    \ for my $y (0 .. $#{$lst}) {\n        for my $z (0 .. $#{$lst->[$y]}) {\n   \
    \         push @output, [$y, $z] if $lst->[$y][$z] == $x;\n        }\n    }\n\
    \    #sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @output;\n    sort {\
    \ $a->[0] <=> $b->[0] } @output;\n}", "    my @res;\n    for my $i (0..$#{$lst})\
    \ {\n        for my $j (0..$#{$lst->[$i]}) {\n            push @res, [$i, $j]\
    \ if $lst->[$i][$j] == $x;\n        }\n    }\n    return [] unless @res;\n   \
    \ my @sorted = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @res;\n   \
    \ return \\@sorted;\n}", "    my @res;\n    for my $i (0..@$lst-1) {\n       \
    \ my $row = $lst->[$i];\n        for my $j (0..@$row-1) {\n            if ($row->[$j]\
    \ == $x) {\n                push @res, [$i, $j];\n            }\n        }\n \
    \   }\n    @res = sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @res;\n  \
    \  return \\@res;\n}", "    return [] unless @$lst > 0;\n    my @result;\n   \
    \ for (my $i = 0; $i < @$lst; $i++) {\n        my $row = $lst->[$i];\n       \
    \ for (my $j = 0; $j < @$row; $j++) {\n            push @result, [$i, $j] if $row->[$j]\
    \ == $x;\n        }\n    }\n    return @result;\n}", "    my @res;\n    for my\
    \ $i (0..$#{$lst}) {\n        for my $j (0..$#{$lst->[$i]}) {\n            if\
    \ ($lst->[$i][$j] == $x) {\n                push @res, [$i, $j];\n           \
    \ }\n        }\n    }\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]\
    \ } @res;\n    return @res;\n}", "    my @result;\n    my $row = 0;\n    for (@$lst)\
    \ {\n        my $col = 0;\n        for (@$_) {\n            if ($_ == $x) {\n\
    \                push @result, [$row, $col];\n            }\n            $col++;\n\
    \        }\n        $row++;\n    }\n    @result = sort { $a->[0] <=> $b->[0] ||\
    \ $b->[1] <=> $a->[1] } @result;\n    return @result;\n}", "    my @ret;\n   \
    \ my $i = 0;\n    for my $row (@$lst) {\n        my $j = 0;\n        for my $elem\
    \ (@$row) {\n            if ($elem == $x) {\n                push @ret, [$i, $j];\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ \\@ret;\n}", "    my $row = -1;\n    my @result;\n    for my $i (0..$#{$lst})\
    \ {\n        next unless grep { $_ == $x } @{$lst->[$i]};\n        $row = $i;\n\
    \        for my $j (0..$#{$lst->[$i]}) {\n            push @result, [$row, $j]\
    \ if $lst->[$i][$j] == $x;\n        }\n    }\n    return [] unless $row >= 0;\n\
    \    return [sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result];\n}",
  "    my @result;\n    for (my $i = 0; $i < @$lst; $i++) {\n        for (my $j =\
    \ 0; $j < @{$lst->[$i]}; $j++) {\n            if ($lst->[$i][$j] == $x) {\n  \
    \              push @result, [$i, $j];\n            }\n        }\n    }\n    return\
    \ [sort {$a->[0] <=> $b->[0] || $b->[1] <=> $a->[1]} @result];\n}", "    my @res;\n\
    \    my $i = 0;\n    my $j = 0;\n    foreach my $row (@$lst) {\n        my $k\
    \ = 0;\n        $j = 0;\n        foreach my $elem (@$row) {\n            if ($elem\
    \ == $x) {\n                push @res, [$i, $j];\n            }\n            $j++;\n\
    \        }\n        $i++;\n    }\n    @res = sort { $a->[0] <=> $b->[0] || $b->[1]\
    \ <=> $a->[1] } @res;\n    return @res;\n}", "    my @result;\n    for my $row\
    \ (0..@$lst-1) {\n        for my $col (0..@{$lst->[$row]}-1) {\n            if\
    \ ($lst->[$row][$col] == $x) {\n                push @result, [$row, $col];\n\
    \            }\n        }\n    }\n    @result = sort { $a->[0] <=> $b->[0] ||\
    \ $b->[1] <=> $a->[1] } @result;\n    return @result;\n}", "    my @row;\n   \
    \ for my $row (0..$#{$lst}) {\n        my $col = _get_col($lst->[$row], $x);\n\
    \        push @row, [$row, $col] if defined $col;\n    }\n    return [] unless\
    \ @row;\n    my @sorted = sort {$a->[0] <=> $b->[0] or $b->[1] <=> $a->[1]} @row;\n\
    \    return \\@sorted;\n}", "    my @pos;\n    for my $i (0..$#{$lst}) {\n   \
    \     for my $j (0..$#{$lst->[$i]}) {\n            push @pos, [$i, $j] if $lst->[$i][$j]\
    \ == $x;\n        }\n    }\n    @pos = sort {$a->[0] <=> $b->[0] || $b->[1] <=>\
    \ $a->[1]} @pos;\n    return @pos;\n}", "    my @ans;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $row_num = scalar @$lst;\n    for ($i = 0; $i < $row_num; $i++)\
    \ {\n        my $col_num = scalar @{$lst->[$i]};\n        for ($j = 0; $j < $col_num;\
    \ $j++) {\n            if ($lst->[$i][$j] == $x) {\n                push @ans,\
    \ [$i, $j];\n            }\n        }\n    }\n    return sort {$a->[0] <=> $b->[0]\
    \ || $b->[1] <=> $a->[1]} @ans;\n}", "    my @result;\n    for my $i (0 .. $#{$lst})\
    \ {\n        for my $j (0 .. $#{$lst->[$i]}) {\n            if ($lst->[$i][$j]\
    \ == $x) {\n                push @result, [$i, $j];\n            }\n        }\n\
    \    }\n    return [sort { $a->[0] <=> $b->[0] || $b->[1] <=> $a->[1] } @result];\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
