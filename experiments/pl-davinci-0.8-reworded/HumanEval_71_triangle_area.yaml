name: HumanEval_71_triangle_area
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return the area of\n\
  # the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any\
  \ two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area(3,\
  \ 4, 5)\n# 6.0\n# >>> triangle_area(1, 2, 10)\n# -1\nsub triangle_area {\n    my($a,\
  \ $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),6.0)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 10),-1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 8, 5),8.18)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(2, 2, 2),1.73)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),-1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),16.25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(2, 6, 3),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),0.43)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
  \ 2, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    my $area = (($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a))\
    \ ?\n    (($a + $b + $c) / 2) : -1;\n    return sprintf \"%.2f\", $area;\n}",
  "    my $s = ($a + $b + $c) / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b)\
    \ * ($s - $c));\n    return ($a + $b > $c && $a + $c > $b && $b + $c > $a) ? $area\
    \ : -1;\n}", "    my $area = 0;\n    my $s = ($a + $b + $c) / 2;", "    return\
    \ -1 if $a <= 0 or $b <= 0 or $c <= 0;\n    return -1 if $a + $b <= $c or $a +\
    \ $c <= $b or $b + $c <= $a;\n    my $s = ($a + $b + $c) / 2;\n    my $area =\
    \ sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return sprintf(\"%.2f\",\
    \ $area);\n}", "    return -1 if ($a + $b <= $c) || ($a + $c <= $b) || ($b + $c\
    \ <= $a);\n    my $s = ($a + $b + $c) / 2;\n    return sqrt($s * ($s - $a) * ($s\
    \ - $b) * ($s - $c));\n}", "    my $s = ($a + $b + $c) / 2;\n    # Use Heron's\
    \ formula to calculate the area.\n    # The area is 0 if a==b==c\n    return sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c)) || 0;\n}", "    my $max = _max($a, $b,\
    \ $c);\n    my $sum = $a + $b + $c;\n    return -1 if $sum - $max <= $max;\n \
    \   my $s = ($sum - $max) / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b)\
    \ * ($s - $c));\n    return sprintf('%.2f', $area);\n}", "    # TODO: check that\
    \ $a, $b, $c make a valid triangle\n    # TODO: return area of triangle, rounded\
    \ to 2 decimal points\n}", "    if ( $a+$b > $c and $a+$c > $b and $b+$c > $a\
    \ ) {\n        my $s = ($a+$b+$c)/2;\n        return sqrt($s*($s-$a)*($s-$b)*($s-$c));\n\
    \    }\n    return -1;\n}", "    my $s = ($a + $b + $c) / 2;\n    my $area = ($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c)) ** (1/2);\n    return sprintf(\"%.2f\"\
    , $area);\n}", "    return -1 if !($a + $b > $c && $a + $c > $b && $b + $c > $a);\n\
    \    my $p = ($a + $b + $c) / 2;\n    return sqrt($p * ($p - $a) * ($p - $b) *\
    \ ($p - $c));\n}", "    if ( $a + $b > $c && $a + $c > $b && $b + $c > $a ) {\n\
    \        my $p = ($a + $b + $c) / 2;\n        return sprintf('%.2f', sqrt($p *\
    \ ($p - $a) * ($p - $b) * ($p - $c)));\n    }\n    return -1;\n}", "    return\
    \ -1 if $a + $b <= $c || $a + $c <= $b || $b + $c <= $a;\n    my $p = ($a + $b\
    \ + $c) / 2;\n    return sprintf(\"%.2f\", sqrt($p * ($p - $a) * ($p - $b) * ($p\
    \ - $c)));\n}", "    my $s = ($a + $b + $c) / 2;\n    return -1 if ($s <= $a ||\
    \ $s <= $b || $s <= $c);\n    sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n}",
  "    $a + $b > $c && $a + $c > $b && $b + $c > $a\n        ? sprintf(\"%.2f\", $a\
    \ * $b / 2)\n        : -1;\n}", "    # Write your code here\n    my $ret = -1;\n\
    \    if(($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a)){\n        my $s =\
    \ ($a + $b + $c)/2;\n        $ret = sqrt($s*($s-$a)*($s-$b)*($s-$c));\n    }\n\
    \    return $ret;\n}", "    if ($a + $b > $c && $a + $c > $b && $b + $c > $a)\
    \ {\n        my $s = ($a + $b + $c) / 2;\n        return sprintf \"%.2f\", sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c));\n    }\n    return -1;\n}", "    return\
    \ -1 if(($a + $b <= $c) || ($a + $c <= $b) || ($b + $c <= $a));\n    my $p = ($a\
    \ + $b + $c) / 2;\n    return sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n}",
  "    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        my $s = ($a +\
    \ $b + $c) / 2;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n\
    \    } else {\n        return -1;\n    }\n}", "    # TODO: implement me!\n   \
    \ return -1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
