name: HumanEval_114_minSubArraySum
language: pl
prompt: "# Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n#\
  \ 1\n# >>> minSubArraySum([-1, -2, -3])\n# -6\nsub minSubArraySum {\n    my($nums)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minSubArraySum;\n\
  \        if(eq_deeply($candidate->([2, 3, 4, 1, 2, 4]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2,\
  \ -3]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([-1, -2, -3, 2, -10]),-14)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9999999999999999]),-9999999999999999))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
  \ 10, 20, 1000000]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([-1, -2, -3, 10, -5]),-6)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100,\
  \ -1, -2, -3, 10, -5]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([10, 11, 13, 8, 3, 4]),3)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100,\
  \ -33, 32, -1, 0, -2]),-33)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([-10]),-10)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7]),7))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ -1]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min_sum = $nums->[0];\n    my $min_ending_here = $nums->[0];\n\
    \    for (my $i = 1; $i < scalar @$nums; $i++) {\n        $min_ending_here = min($nums->[$i],\
    \ $min_ending_here + $nums->[$i]);\n        $min_sum = min($min_sum, $min_ending_here);\n\
    \    }\n    return $min_sum;\n}", "    my($min, $total) = $nums->[0], $nums->[0];\n\
    \    for my $i (1 .. @$nums - 1) {\n        $total += $nums->[$i];\n        $total\
    \ = $nums->[$i] if $total > $nums->[$i];\n        $min = $total if $total < $min;\n\
    \    }\n    return $min;\n}", "    my($min_sum, $sum) = $nums->[0], $nums->[0];\n\
    \    for my $i (1 .. @$nums - 1) {\n        $sum = $sum < 0 ? $nums->[$i] : $sum\
    \ + $nums->[$i];\n        $min_sum = $sum if $sum < $min_sum;\n    }\n    return\
    \ $min_sum;\n}", "    my($minSoFar, $current);\n    $minSoFar = $current = $nums->[0];\n\
    \    for (my $i = 1; $i < scalar @$nums; $i++) {\n        $current = max($nums->[$i],\
    \ $current + $nums->[$i]);\n        $minSoFar = min($minSoFar, $current);\n  \
    \  }\n    return $minSoFar;\n}", "    my($length) = scalar(@$nums);\n    my($i,\
    \ $sum, $minSum) = (0, 0, $nums->[0]);\n    while ($i < $length) {\n        $sum\
    \ += $nums->[$i];\n        $minSum = $sum if ($sum < $minSum);\n        $sum =\
    \ 0 if ($sum < 0);\n        $i++;\n    }\n    return $minSum;\n}", "    my $min_sum\
    \ = $nums->[0];\n    my $curr_sum = $nums->[0];\n    for my $i (1 .. $#$nums)\
    \ {\n        $curr_sum = $nums->[$i] + ($curr_sum > 0 ? $curr_sum : 0);\n    \
    \    $min_sum = $curr_sum if $curr_sum < $min_sum;\n    }\n    return $min_sum;\n\
    }", "    my($n, $minSum, $curSum) = (scalar(@$nums), 0, 0);\n    if ($n > 0) {\n\
    \        $minSum = $nums->[0];\n        $curSum = $nums->[0];\n        for (my\
    \ $i = 1; $i < $n; $i++) {\n            $curSum = min($curSum + $nums->[$i], $nums->[$i]);\n\
    \            $minSum = min($minSum, $curSum);\n        }\n    }\n    return $minSum;\n\
    }", "    my $i = 0;\n    my $size = scalar @$nums;\n    my $min = $nums->[0];\n\
    \    my $currSum = 0;\n    while ($i < $size) {\n        $currSum += $nums->[$i];\n\
    \        if ($currSum < $min) {\n            $min = $currSum;\n        }\n   \
    \     if ($currSum > 0) {\n            $currSum = 0;\n        }\n        $i++;\n\
    \    }\n    return $min;\n}", "    my $min = 0;\n    my $sum = 0;\n    foreach\
    \ my $i (0 .. $#{$nums}) {\n        $sum += $nums->[$i];\n        if ($sum < $min)\
    \ {\n            $min = $sum;\n        }\n        if ($sum > 0) {\n          \
    \  $sum = 0;\n        }\n    }\n    return $min;\n}", "    my $min = 0;\n    my\
    \ $sum = 0;\n    for my $num (@$nums) {\n        $sum += $num;\n        $min =\
    \ $sum if $sum < $min;\n        $sum = 0 if $sum < 0;\n    }\n    return $min;\n\
    }", "    my $min_sum = $nums->[0];\n    my $curr_sum = $nums->[0];\n    for my\
    \ $i (1 .. @$nums - 1) {\n        if ($curr_sum < 0) {\n            $curr_sum\
    \ = $nums->[$i];\n        } else {\n            $curr_sum += $nums->[$i];\n  \
    \      }\n        $min_sum = $curr_sum if $curr_sum < $min_sum;\n    }\n    return\
    \ $min_sum;\n}", "    return undef if scalar(@$nums) == 0;\n    my $result = $$nums[0];\n\
    \    my $temp = 0;\n    for(my $i = 0; $i < scalar(@$nums); $i++) {\n        $temp\
    \ += $$nums[$i];\n        $result = $temp if $temp < $result;\n        $temp =\
    \ 0 if $temp > 0;\n    }\n    return $result;\n}", "    my $min = 0;\n    my $min_sum\
    \ = 2**31 - 1;\n    my $sum = 0;\n    for my $i (@$nums) {\n        $sum += $i;\n\
    \        if ($sum < $min_sum) {\n            $min_sum = $sum;\n        }\n   \
    \     if ($sum > 0) {\n            $sum = 0;\n        }\n    }\n    return $min_sum;\n\
    }", "    my $len = scalar @$nums;\n    my $sum = 0;\n    my $min = $nums->[0];\n\
    \    for (my $i = 0; $i < $len; $i++) {\n        $sum += $nums->[$i];\n      \
    \  $min = $sum if $sum < $min;\n        $sum = 0 if $sum < 0;\n    }\n    return\
    \ $min;\n}", "    my $minSum = $nums->[0];\n    my $maxSum = $nums->[0];\n   \
    \ my $numsSum = $nums->[0];\n    my $i = 1;\n    while ($i < scalar @$nums) {\n\
    \        $numsSum += $nums->[$i];\n        if ($numsSum > $maxSum) {\n       \
    \     $maxSum = $numsSum;\n        } elsif ($numsSum < $minSum) {\n          \
    \  $minSum = $numsSum;\n        }\n        $i++;\n    }\n    return $minSum;\n\
    }", "    my $global = $nums->[0];\n    my $local = $nums->[0];\n    for my $i\
    \ (1 .. $#$nums) {\n        my $element = $nums->[$i];\n        $local = $element\
    \ if $local < 0;\n        $local += $element;\n        $global = $local if $local\
    \ < $global;\n    }\n    return $global;\n}", "    my $sum = 0;\n    my $min =\
    \ $nums->[0];\n    for (@$nums) {\n        $sum += $_;\n        $min = $sum if\
    \ $sum < $min;\n        $sum = 0 if $sum < 0;\n    }\n    return $min;\n}", " \
    \   my $count = @$nums;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $sum =\
    \ 0;\n    for my $i (0 .. $count-1) {\n        for my $j ($i .. $count-1) {\n\
    \            my $temp = arraySum(@$nums[$i .. $j]);\n            if($temp > $sum)\
    \ {\n                $sum = $temp;\n                $max_i = $i;\n           \
    \     $max_j = $j;\n            }\n        }\n    }\n    return ($max_i, $max_j,\
    \ $sum);\n}", "    my $sum = 0;\n    my $min = $nums->[0];\n    foreach my $n\
    \ (@$nums) {\n        $sum += $n;\n        $min = $sum if $sum < $min;\n     \
    \   $sum = 0 if $sum < 0;\n    }\n    return $min;\n}", "    my $sum = 0;\n  \
    \  my $min = -1;\n    for(my $left = 0, my $right = 0; $right < scalar(@$nums);\
    \ $right++) {\n        $sum += $nums->[$right];\n        if ($sum <= 0) {\n  \
    \          $left = $right + 1;\n            $sum = 0;\n        } elsif ($min ==\
    \ -1 || $sum < $min) {\n            $min = $sum;\n        }\n    }\n    return\
    \ $min;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
