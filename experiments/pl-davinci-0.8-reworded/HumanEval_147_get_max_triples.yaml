name: HumanEval_147_get_max_triples
language: pl
prompt: "# You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> get_max_triples(5)\n\
  # 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7,\
  \ 13).\nsub get_max_triples {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n\
  \        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(6),4)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $m = $n + 1;\n    my @q;\n    my @a;\n    # build an array a\
    \ where a[i] = i * i - i + 1\n    for (my $i = 1; $i < $m; $i++) {\n        $a[$i]\
    \ = $i * $i - $i + 1;\n    }\n    my $answer = 0;\n    for (my $i = 1; $i < $m;\
    \ $i++) {\n        my $s = 0;\n        my $t = $i + 1;\n        my $r = $n;\n\
    \        while ($t <= $r) {\n            my $m = int(($t + $r) / 2);\n       \
    \     if (($a[$i] + $a[$m]) * ($m - $i) < $a[$m]) {\n                $t = $m +\
    \ 1;\n            } else {\n                $r = $m - 1;\n            }\n    \
    \    }\n        $q[$i] = $t;\n    }\n    for (my $i = 1; $i < $m; $i++) {\n  \
    \      for (my $j = $q[$i]; $j < $m; $j++) {\n            my $s = $a[$i] + $a[$j];\n\
    \            my $r = $n;\n            while ($j < $r) {\n                my $m\
    \ = int(($j + $r + 1) / 2);\n                if ($s * ($m - $j) < $a[$m]) {\n\
    \                    $r = $m - 1;\n                } else {\n                \
    \    $j = $m;\n                }\n            }\n            if ($s % 3 == 0)\
    \ {\n                $answer++;\n            }\n        }\n    }\n    return $answer;\n\
    }", "    my $a_ref = create_arr($n);\n    my $count = 0;\n    my $i = 0;\n   \
    \ my $j = 0;\n    my $k = 0;\n    my $sum = 0;\n    my $min = 0;\n    my $max\
    \ = 0;\n    $min = @$a_ref[0];\n    $max = @$a_ref[0];\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $max = max(@$a_ref[$i], $max);\n        $min = min(@$a_ref[$i],\
    \ $min);\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1;\
    \ $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n         \
    \       $sum = @$a_ref[$i] + @$a_ref[$j] + @$a_ref[$k];\n                if ($sum\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my($total) = 0;\n    for (my($i)\
    \ = 1; $i < $n - 1; $i++) {\n        for (my($j) = $i + 1; $j < $n; $j++) {\n\
    \            for (my($k) = $j + 1; $k <= $n; $k++) {\n                my($sum)\
    \ = ($i*$i-$i+1) + ($j*$j-$j+1) + ($k*$k-$k+1);\n                if ($sum % 3\
    \ == 0) {\n                    $total++;\n                }\n            }\n \
    \       }\n    }\n    return $total;\n}", "    my $cnt = 0;\n    my $last = 0;\n\
    \    my $last_idx = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        my $val\
    \ = $i * $i - $i + 1;\n        $last_idx = $i - 1;\n        $last = $i - 1;\n\
    \        if ($last_idx >= 0) {\n            if ($val % 3 == 0) {\n           \
    \     $cnt += $last_idx * $last;\n            }\n            elsif (($val + 1)\
    \ % 3 == 0) {\n                my $idx = $last_idx;\n                while ($idx\
    \ >= 0 && ($val + 1) % 3 != 0) {\n                    $val += $idx;\n        \
    \            $idx--;\n                }\n                if ($idx >= 0) {\n  \
    \                  $cnt += $idx * $last;\n                }\n            }\n \
    \           elsif (($val + 2) % 3 == 0) {\n                my $idx = $last_idx;\n\
    \                while ($idx >= 0 && ($val + 2) % 3 != 0) {\n                \
    \    $val += $idx;\n                    $idx--;\n                }\n         \
    \       if ($idx >= 0) {\n                    $cnt += $idx * $last;\n        \
    \        }\n            }\n        }\n    }\n    return $cnt;\n}", "    my $a\
    \ = 1;\n    my $b = 3;\n    my $c = 7;\n    my $count = 0;\n    while($c <= $n)\
    \ {\n        if (($a + $b + $c) % 3 == 0) {\n            $count++;\n        }\n\
    \        $a += 2;\n        $b += 4;\n        $c += 6;\n    }\n    return $count;\n\
    }", "    # Write your code here\n    # To print results to the standard output\
    \ you can use print\n    # Example:\n    # print \"Hello world!\\n\";\n    my\
    \ $sum = 0;\n    for(my $i = 1; $i <= $n - 2; $i++) {\n        for(my $j = $i\
    \ + 1; $j <= $n - 1; $j++) {\n            for(my $k = $j + 1; $k <= $n; $k++)\
    \ {\n                my $a_i = $i * $i - $i + 1;\n                my $a_j = $j\
    \ * $j - $j + 1;\n                my $a_k = $k * $k - $k + 1;\n              \
    \  if(($a_i + $a_j + $a_k) % 3 == 0) {\n                    $sum += 1;\n     \
    \           }\n            }\n        }\n    }\n    return $sum;\n}", "    my\
    \ $s = 0;\n    for (my $j = 1; $j < $n - 1; $j++) {\n        my $sj = $j * $j\
    \ - $j + 1;\n        for (my $k = $j + 1; $k < $n; $k++) {\n            my $sk\
    \ = $k * $k - $k + 1;\n            my $rem = (3 - $sj % 3) % 3;\n            next\
    \ if $rem != $sk % 3;\n            $s++;\n        }\n    }\n    return $s;\n}",
  "    my @a = ();\n    for(my $i = 1; $i <= $n; $i++) {\n        push(@a, $i * $i\
    \ - $i + 1);\n    }\n    my $result = 0;\n    for(my $i = 0; $i < $n - 2; $i++)\
    \ {\n        for(my $j = $i + 1; $j < $n - 1; $j++) {\n            for(my $k =\
    \ $j + 1; $k < $n; $k++) {\n                if(($a[$i] + $a[$j] + $a[$k]) % 3\
    \ == 0) {\n                    $result++;\n                }\n            }\n\
    \        }\n    }\n    return $result;\n}", "    my $sum = 0;\n    my $count =\
    \ 0;\n    my $i;\n    for ($i = 1; $i < $n; $i++) {\n        $sum += $i * $i -\
    \ $i + 1;\n        if ($sum % 3 == 0) {\n            $count++;\n        }\n  \
    \  }\n    return $count;\n}", "    my $cnt = 0;\n    for (1..$n) {\n        my\
    \ $v = $_ * $_ - $_ + 1;\n        for ($_ + 1..$n) {\n            my $u = $_ *\
    \ $_ - $_ + 1;\n            for ($_ + 1..$n) {\n                my $w = $_ * $_\
    \ - $_ + 1;\n                $cnt++ if ($v + $u + $w) % 3 == 0;\n            }\n\
    \        }\n    }\n    return $cnt;\n}", "    my $count = 0;\n    my @a = (1);\n\
    \    for (2..$n) {\n        push @a, $_*$_ - $_ + 1;\n        for my $i (0..$#a-2)\
    \ {\n            for my $j ($i+1..$#a-1) {\n                for my $k ($j+1..$#a)\
    \ {\n                    $count++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n  \
    \              }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $res = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = $i\
    \ + 1; $j < $n; $j++) {\n            my $sum = ($i * $i - $i + 1) + ($j * $j -\
    \ $j + 1);\n            for (my $k = $j + 1; $k < $n; $k++) {\n              \
    \  if (($sum + ($k * $k - $k + 1)) % 3 == 0) {\n                    $res++;\n\
    \                }\n            }\n        }\n    }\n    return $res;\n}", " \
    \   my $a = [];\n    my $count = 0;\n    my $map = {};\n    for(my $i = 1; $i\
    \ <= $n; $i++) {\n        $a->[$i - 1] = $i * $i - $i + 1;\n        $map->{$a->[$i\
    \ - 1]} = $i - 1;\n    }\n    for(my $i = 0; $i < $n; $i++) {\n        for(my\
    \ $j = $i + 1; $j < $n; $j++) {\n            my $sum = $a->[$i] + $a->[$j];\n\
    \            my $rem = $sum % 3;\n            my $k = $map->{3 - $rem};\n    \
    \        if(defined($k) && $k > $j) {\n                $count++;\n           \
    \ }\n        }\n    }\n    return $count;\n}", "    return 0 if ($n < 3);\n  \
    \  my @a = map {$_ * $_ - $_ + 1} (1..$n);\n    my $cnt = 0;\n    foreach my $i\
    \ (0..($n-1)) {\n        foreach my $j (($i+1)..($n-1)) {\n            foreach\
    \ my $k (($j+1)..($n-1)) {\n                ++$cnt if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0);\n            }\n        }\n    }\n    return $cnt;\n}", "    my $result\
    \ = 0;\n    for(my $i = 1; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j\
    \ < $n; $j++) {\n            if(($i * $i - $i + 1 + $j * $j - $j + 1) % 3 == 0)\
    \ {\n                for(my $k = $j + 1; $k <= $n; $k++) {\n                 \
    \   if(($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n\
    \                        $result++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my $triples =\
    \ 0;\n    for my $i (0..$n-1) {\n        for my $j ($i+1..$n-1) {\n          \
    \  for my $k ($j+1..$n-1) {\n                if (($i+1)*($i+1)-($i+1)+1 + ($j+1)*($j+1)-($j+1)+1\
    \ + ($k+1)*($k+1)-($k+1)+1) % 3 == 0 {\n                    $triples++;\n    \
    \            }\n            }\n        }\n    }\n    return $triples;\n}", " \
    \   my @result = (1);\n    for (my $i = 2; $i <= $n; $i++) {\n        push @result,\
    \ $i * $i - $i + 1;\n    }\n    my $count = 0;\n    for (my $i = 0; $i < $n -\
    \ 2; $i++) {\n        for (my $j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ (my $k = $j + 1; $k < $n; $k++) {\n                if (($result[$i] + $result[$j]\
    \ + $result[$k]) % 3 == 0) {\n                    $count++;\n                }\n\
    \            }\n        }\n    }\n    return $count;\n}\nmy $n = <STDIN>;\nmy\
    \ $result = get_max_triples($n);\nprint(\"$result\\n\");", "    my $result = 0;\n\
    \    my @a = ();\n    my @sum = ();\n    for (my $i = 1; $i <= $n; $i++) {\n \
    \       $a[$i] = $i * $i - $i + 1;\n        $sum[$i] = $a[$i] + $sum[$i - 1];\n\
    \    }\n    my @dp = ();\n    for (my $i = 1; $i <= $n; $i++) {\n        $dp[$i]\
    \ = [];\n        for (my $j = 1; $j <= $n; $j++) {\n            if ($i == $j)\
    \ {\n                $dp[$i][$j] = 0;\n            } else {\n                $dp[$i][$j]\
    \ = $i;\n            }\n        }\n    }\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j <= $n; $j++) {\n            my $sum = $sum[$j]\
    \ - $sum[$i - 1];\n            my $m = $j;\n            for (my $k = $j; $k <=\
    \ $n; $k++) {\n                if ($sum % 3 == 0) {\n                    $result\
    \ += $k - $m + 1;\n                    last;\n                }\n            \
    \    $sum += $a[$k];\n                $m++;\n            }\n        }\n    }\n\
    \    return $result;\n}", "    my $count = 0;\n    my @a = (1);\n    for(my $i\
    \ = 1; $i < $n; $i++){\n        push @a, $i * $i - $i + 1;\n    }\n    for(my\
    \ $i = 0; $i < $n - 2; $i++){\n        for(my $j = $i + 1; $j < $n - 1; $j++){\n\
    \            for(my $k = $j + 1; $k < $n; $k++){\n                $count++ if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0);\n            }\n        }\n    }\n  \
    \  return $count;\n}", "    my @a = (1..$n);\n    map { $_ * $_ - $_ + 1 } @a;\n\
    \    my $cnt = 0;\n    for my $i (0..$#a-2) {\n        for my $j ($i+1..$#a-1)\
    \ {\n            for my $k ($j+1..$#a) {\n                $cnt++ if ( ($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0 );\n            }\n        }\n    }\n    return\
    \ $cnt;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
