name: HumanEval_147_get_max_triples
language: pl
prompt: "# You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> get_max_triples(5)\n\
  # 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7,\
  \ 13).\nsub get_max_triples {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n\
  \        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(6),4)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $m = $n + 1;\n    my @q;\n    my @a;\n    # build an array a\
    \ where a[i] = i * i - i + 1\n    for (my $i = 1; $i < $m; $i++) {\n        $a[$i]\
    \ = $i * $i - $i + 1;\n    }\n    my $answer = 0;\n    for (my $i = 1; $i < $m;\
    \ $i++) {\n        my $s = 0;\n        my $t = $i + 1;\n        my $r = $n;\n\
    \        while ($t <= $r) {\n            my $m = int(($t + $r) / 2);\n       \
    \     if (($a[$i] + $a[$m]) * ($m - $i) < $a[$m]) {\n                $t = $m +\
    \ 1;\n            } else {\n                $r = $m - 1;\n            }\n    \
    \    }\n        $q[$i] = $t;\n    }\n    for (my $i = 1; $i < $m; $i++) {\n  \
    \      for (my $j = $q[$i]; $j < $m; $j++) {\n            my $s = $a[$i] + $a[$j];\n\
    \            my $r = $n;\n            while ($j < $r) {\n                my $m\
    \ = int(($j + $r + 1) / 2);\n                if ($s * ($m - $j) < $a[$m]) {\n\
    \                    $r = $m - 1;\n                } else {\n                \
    \    $j = $m;\n                }\n            }\n            if ($s % 3 == 0)\
    \ {\n                $answer++;\n            }\n        }\n    }\n    return $answer;\n\
    }", "    my $a_ref = create_arr($n);\n    my $count = 0;\n    my $i = 0;\n   \
    \ my $j = 0;\n    my $k = 0;\n    my $sum = 0;\n    my $min = 0;\n    my $max\
    \ = 0;\n    $min = @$a_ref[0];\n    $max = @$a_ref[0];\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $max = max(@$a_ref[$i], $max);\n        $min = min(@$a_ref[$i],\
    \ $min);\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1;\
    \ $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n         \
    \       $sum = @$a_ref[$i] + @$a_ref[$j] + @$a_ref[$k];\n                if ($sum\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my($total) = 0;\n    for (my($i)\
    \ = 1; $i < $n - 1; $i++) {\n        for (my($j) = $i + 1; $j < $n; $j++) {\n\
    \            for (my($k) = $j + 1; $k <= $n; $k++) {\n                my($sum)\
    \ = ($i*$i-$i+1) + ($j*$j-$j+1) + ($k*$k-$k+1);\n                if ($sum % 3\
    \ == 0) {\n                    $total++;\n                }\n            }\n \
    \       }\n    }\n    return $total;\n}", "    my $cnt = 0;\n    my $last = 0;\n\
    \    my $last_idx = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        my $val\
    \ = $i * $i - $i + 1;\n        $last_idx = $i - 1;\n        $last = $i - 1;\n\
    \        if ($last_idx >= 0) {\n            if ($val % 3 == 0) {\n           \
    \     $cnt += $last_idx * $last;\n            }\n            elsif (($val + 1)\
    \ % 3 == 0) {\n                my $idx = $last_idx;\n                while ($idx\
    \ >= 0 && ($val + 1) % 3 != 0) {\n                    $val += $idx;\n        \
    \            $idx--;\n                }\n                if ($idx >= 0) {\n  \
    \                  $cnt += $idx * $last;\n                }\n            }\n \
    \           elsif (($val + 2) % 3 == 0) {\n                my $idx = $last_idx;\n\
    \                while ($idx >= 0 && ($val + 2) % 3 != 0) {\n                \
    \    $val += $idx;\n                    $idx--;\n                }\n         \
    \       if ($idx >= 0) {\n                    $cnt += $idx * $last;\n        \
    \        }\n            }\n        }\n    }\n    return $cnt;\n}", "    my $a\
    \ = 1;\n    my $b = 3;\n    my $c = 7;\n    my $count = 0;\n    while($c <= $n)\
    \ {\n        if (($a + $b + $c) % 3 == 0) {\n            $count++;\n        }\n\
    \        $a += 2;\n        $b += 4;\n        $c += 6;\n    }\n    return $count;\n\
    }", "    # Write your code here\n    # To print results to the standard output\
    \ you can use print\n    # Example:\n    # print \"Hello world!\\n\";\n    my\
    \ $sum = 0;\n    for(my $i = 1; $i <= $n - 2; $i++) {\n        for(my $j = $i\
    \ + 1; $j <= $n - 1; $j++) {\n            for(my $k = $j + 1; $k <= $n; $k++)\
    \ {\n                my $a_i = $i * $i - $i + 1;\n                my $a_j = $j\
    \ * $j - $j + 1;\n                my $a_k = $k * $k - $k + 1;\n              \
    \  if(($a_i + $a_j + $a_k) % 3 == 0) {\n                    $sum += 1;\n     \
    \           }\n            }\n        }\n    }\n    return $sum;\n}", "    my\
    \ $s = 0;\n    for (my $j = 1; $j < $n - 1; $j++) {\n        my $sj = $j * $j\
    \ - $j + 1;\n        for (my $k = $j + 1; $k < $n; $k++) {\n            my $sk\
    \ = $k * $k - $k + 1;\n            my $rem = (3 - $sj % 3) % 3;\n            next\
    \ if $rem != $sk % 3;\n            $s++;\n        }\n    }\n    return $s;\n}",
  "    my @a = ();\n    for(my $i = 1; $i <= $n; $i++) {\n        push(@a, $i * $i\
    \ - $i + 1);\n    }\n    my $result = 0;\n    for(my $i = 0; $i < $n - 2; $i++)\
    \ {\n        for(my $j = $i + 1; $j < $n - 1; $j++) {\n            for(my $k =\
    \ $j + 1; $k < $n; $k++) {\n                if(($a[$i] + $a[$j] + $a[$k]) % 3\
    \ == 0) {\n                    $result++;\n                }\n            }\n\
    \        }\n    }\n    return $result;\n}", "    my $sum = 0;\n    my $count =\
    \ 0;\n    my $i;\n    for ($i = 1; $i < $n; $i++) {\n        $sum += $i * $i -\
    \ $i + 1;\n        if ($sum % 3 == 0) {\n            $count++;\n        }\n  \
    \  }\n    return $count;\n}", "    my $cnt = 0;\n    for (1..$n) {\n        my\
    \ $v = $_ * $_ - $_ + 1;\n        for ($_ + 1..$n) {\n            my $u = $_ *\
    \ $_ - $_ + 1;\n            for ($_ + 1..$n) {\n                my $w = $_ * $_\
    \ - $_ + 1;\n                $cnt++ if ($v + $u + $w) % 3 == 0;\n            }\n\
    \        }\n    }\n    return $cnt;\n}", "    my $count = 0;\n    my @a = (1);\n\
    \    for (2..$n) {\n        push @a, $_*$_ - $_ + 1;\n        for my $i (0..$#a-2)\
    \ {\n            for my $j ($i+1..$#a-1) {\n                for my $k ($j+1..$#a)\
    \ {\n                    $count++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n  \
    \              }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $res = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = $i\
    \ + 1; $j < $n; $j++) {\n            my $sum = ($i * $i - $i + 1) + ($j * $j -\
    \ $j + 1);\n            for (my $k = $j + 1; $k < $n; $k++) {\n              \
    \  if (($sum + ($k * $k - $k + 1)) % 3 == 0) {\n                    $res++;\n\
    \                }\n            }\n        }\n    }\n    return $res;\n}", " \
    \   my $a = [];\n    my $count = 0;\n    my $map = {};\n    for(my $i = 1; $i\
    \ <= $n; $i++) {\n        $a->[$i - 1] = $i * $i - $i + 1;\n        $map->{$a->[$i\
    \ - 1]} = $i - 1;\n    }\n    for(my $i = 0; $i < $n; $i++) {\n        for(my\
    \ $j = $i + 1; $j < $n; $j++) {\n            my $sum = $a->[$i] + $a->[$j];\n\
    \            my $rem = $sum % 3;\n            my $k = $map->{3 - $rem};\n    \
    \        if(defined($k) && $k > $j) {\n                $count++;\n           \
    \ }\n        }\n    }\n    return $count;\n}", "    return 0 if ($n < 3);\n  \
    \  my @a = map {$_ * $_ - $_ + 1} (1..$n);\n    my $cnt = 0;\n    foreach my $i\
    \ (0..($n-1)) {\n        foreach my $j (($i+1)..($n-1)) {\n            foreach\
    \ my $k (($j+1)..($n-1)) {\n                ++$cnt if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0);\n            }\n        }\n    }\n    return $cnt;\n}", "    my $result\
    \ = 0;\n    for(my $i = 1; $i < $n - 1; $i++) {\n        for(my $j = $i + 1; $j\
    \ < $n; $j++) {\n            if(($i * $i - $i + 1 + $j * $j - $j + 1) % 3 == 0)\
    \ {\n                for(my $k = $j + 1; $k <= $n; $k++) {\n                 \
    \   if(($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n\
    \                        $result++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my $triples =\
    \ 0;\n    for my $i (0..$n-1) {\n        for my $j ($i+1..$n-1) {\n          \
    \  for my $k ($j+1..$n-1) {\n                if (($i+1)*($i+1)-($i+1)+1 + ($j+1)*($j+1)-($j+1)+1\
    \ + ($k+1)*($k+1)-($k+1)+1) % 3 == 0 {\n                    $triples++;\n    \
    \            }\n            }\n        }\n    }\n    return $triples;\n}", " \
    \   my @result = (1);\n    for (my $i = 2; $i <= $n; $i++) {\n        push @result,\
    \ $i * $i - $i + 1;\n    }\n    my $count = 0;\n    for (my $i = 0; $i < $n -\
    \ 2; $i++) {\n        for (my $j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ (my $k = $j + 1; $k < $n; $k++) {\n                if (($result[$i] + $result[$j]\
    \ + $result[$k]) % 3 == 0) {\n                    $count++;\n                }\n\
    \            }\n        }\n    }\n    return $count;\n}\nmy $n = <STDIN>;\nmy\
    \ $result = get_max_triples($n);\nprint(\"$result\\n\");", "    my $result = 0;\n\
    \    my @a = ();\n    my @sum = ();\n    for (my $i = 1; $i <= $n; $i++) {\n \
    \       $a[$i] = $i * $i - $i + 1;\n        $sum[$i] = $a[$i] + $sum[$i - 1];\n\
    \    }\n    my @dp = ();\n    for (my $i = 1; $i <= $n; $i++) {\n        $dp[$i]\
    \ = [];\n        for (my $j = 1; $j <= $n; $j++) {\n            if ($i == $j)\
    \ {\n                $dp[$i][$j] = 0;\n            } else {\n                $dp[$i][$j]\
    \ = $i;\n            }\n        }\n    }\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j <= $n; $j++) {\n            my $sum = $sum[$j]\
    \ - $sum[$i - 1];\n            my $m = $j;\n            for (my $k = $j; $k <=\
    \ $n; $k++) {\n                if ($sum % 3 == 0) {\n                    $result\
    \ += $k - $m + 1;\n                    last;\n                }\n            \
    \    $sum += $a[$k];\n                $m++;\n            }\n        }\n    }\n\
    \    return $result;\n}", "    my $count = 0;\n    my @a = (1);\n    for(my $i\
    \ = 1; $i < $n; $i++){\n        push @a, $i * $i - $i + 1;\n    }\n    for(my\
    \ $i = 0; $i < $n - 2; $i++){\n        for(my $j = $i + 1; $j < $n - 1; $j++){\n\
    \            for(my $k = $j + 1; $k < $n; $k++){\n                $count++ if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0);\n            }\n        }\n    }\n  \
    \  return $count;\n}", "    my @a = (1..$n);\n    map { $_ * $_ - $_ + 1 } @a;\n\
    \    my $cnt = 0;\n    for my $i (0..$#a-2) {\n        for my $j ($i+1..$#a-1)\
    \ {\n            for my $k ($j+1..$#a) {\n                $cnt++ if ( ($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0 );\n            }\n        }\n    }\n    return\
    \ $cnt;\n}", "    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    my $count = 0;\n\
    \    for my $i (0..$#a) {\n        for my $j ($i+1..$#a) {\n            for my\
    \ $k ($j+1..$#a) {\n                $count++ if ($a[$i] + $a[$j] + $a[$k]) % 3\
    \ == 0;\n            }\n        }\n    }\n    return $count;\n}", "    my $c =\
    \ 0;\n    my $s = 0;\n    my $i = 1;\n    my $j = 2;\n    my $k = 3;\n    while\
    \ (1) {\n        while ($k <= $n) {\n            $s = $i * $i - $i + 1 + $j *\
    \ $j - $j + 1 + $k * $k - $k + 1;\n            if ($s % 3 == 0) {\n          \
    \      ++$c;\n            }\n            ++$k;\n        }\n        ++$j;\n   \
    \     $k = $j + 1;\n        if ($j > $n - 1) {\n            ++$i;\n          \
    \  $j = $i + 1;\n            $k = $j + 1;\n            if ($i > $n - 2) {\n  \
    \              last;\n            }\n        }\n    }\n    return $c;\n}", " \
    \   my $count = 0;\n    my @array = ();\n    for (my $i = 1; $i <= $n; $i++) {\n\
    \        push @array, $i*$i - $i + 1;\n    }\n    for (my $i = 0; $i < scalar\
    \ @array; $i++) {\n        for (my $j = $i + 1; $j < scalar @array; $j++) {\n\
    \            for (my $k = $j + 1; $k < scalar @array; $k++) {\n              \
    \  if (($array[$i] + $array[$j] + $array[$k]) % 3 == 0) {\n                  \
    \  $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }", "    my $total_triples = 0;\n    for(my $i = 1; $i < $n; $i++) {\n       \
    \ for(my $j = $i + 1; $j < $n; $j++) {\n            for(my $k = $j + 1; $k < $n;\
    \ $k++) {\n                $total_triples++ if $i * $i - $i + 1 + $j * $j - $j\
    \ + 1 + $k * $k - $k + 1 % 3 == 0;\n            }\n        }\n    }\n    return\
    \ $total_triples;\n}", "    # Write your code here\n    # To print results to\
    \ the standard output you can use print\n    # Example:\n    # print \"Hello world!\\\
    n\";\n}", "    my $res = 0;\n    my $a_prev_sum = 0;\n    my $a_curr_sum = 0;\n\
    \    for(my $i = 1; $i <= $n; $i++){\n        $a_curr_sum += $i * $i - $i + 1;\n\
    \        if($a_curr_sum % 3 == 0){\n            $res += ($i - 1) * ($i - 2) /\
    \ 2;\n        }\n        $res += $i * ($a_curr_sum - $a_prev_sum) / 3;\n     \
    \   $a_prev_sum = $a_curr_sum;\n    }\n    return $res;\n}", "    my $sum = 0;\n\
    \    my $count = 0;\n    for (my $i = 1; $i < $n - 1; $i++) {\n        $sum +=\
    \ $i * $i - $i + 1;\n        if ($sum % 3 == 0) {\n            $count++;\n   \
    \     }\n    }\n    return $count;\n}", "    my @a = map {$_ * $_ - $_ + 1} (1..$n);\n\
    \    my $count = 0;\n    for (my $i = 0; $i < $n - 2; $i++) {\n        for (my\
    \ $j = $i + 1; $j < $n - 1; $j++) {\n            for (my $k = $j + 1; $k < $n;\
    \ $k++) {\n                $count++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n\
    \            }\n        }\n    }\n    return $count;\n}", "    my @a = map { $_\
    \ * $_ - $_ + 1 } (1..$n);\n    my $cnt = 0;\n    for my $i (0..$#a-2) {\n   \
    \     for my $j ($i+1..$#a-1) {\n            for my $k ($j+1..$#a) {\n       \
    \         $cnt++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n            }\n    \
    \    }\n    }\n    return $cnt;\n}", "    my @a = ();\n    my $triple = 0;\n \
    \   my $last_sum = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        push(@a,$i*$i-$i+1);\n\
    \        for(my $j = 0; $j < $i-1; $j++) {\n            for(my $k = $j+1; $k <\
    \ $i; $k++) {\n                if (($a[$j]+$a[$k]+$a[$i-1])%3 == 0) {\n      \
    \              $triple++;\n                }\n            }\n        }\n    }\n\
    \    return $triple;\n}\n1;", "    my $a = [];\n    $a->[0] = 0;\n    for my $i\
    \ (1..$n) {\n        $a->[$i] = $i * $i - $i + 1;\n    }\n    my $max_triples\
    \ = 0;\n    for my $i (1..$n-2) {\n        for my $j ($i+1..$n-1) {\n        \
    \    for my $k ($j+1..$n) {\n                if (($a->[$i] + $a->[$j] + $a->[$k])\
    \ % 3 == 0) {\n                    $max_triples++;\n                }\n      \
    \      }\n        }\n    }\n    return $max_triples;\n}", "    my $a = [1,3,7,13,21];\n\
    \    my $count = 0;\n    my $i = 0;\n    my $j = 1;\n    my $k = 2;\n    if ($n\
    \ < 3) {\n        return 0;\n    }\n    # p(@$a);\n    for $i (0..$n-3) {\n  \
    \      for $j ($i+1..$n-2) {\n            for $k ($j+1..$n-1) {\n            \
    \    if ($$a[$i] + $$a[$j] + $$a[$k] % 3 == 0) {\n                    $count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }", "    my @a = (1);\n    foreach my $i (2..$n) {\n        push @a, ($i * $i\
    \ - $i + 1);\n    }\n    my $sum = 0;\n    foreach my $i (0..$#a-2) {\n      \
    \  foreach my $j ($i+1..$#a-1) {\n            foreach my $k ($j+1..$#a) {\n  \
    \              $sum++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n            }\n\
    \        }\n    }\n    return $sum;\n}", "    return $n - ($n % 3);\n}", "   \
    \ my $count = 0;\n    my @a = (1);\n    foreach my $i (1..$n-1) {\n        $a[$i]\
    \ = $i * $i - $i + 1;\n        foreach my $j (0..$i-1) {\n            foreach\
    \ my $k (0..$j-1) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0)\
    \ {\n                    $count++;\n                }\n            }\n       \
    \ }\n    }\n    return $count;\n}", "    my @a = (0) x $n;\n    for my $i (1..$n)\
    \ {\n        $a[$i-1] = $i * $i - $i + 1;\n    }\n    my $count = 0;\n    for\
    \ my $i (0..$n-3) {\n        for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1)\
    \ {\n                if ($a[$i] + $a[$j] + $a[$k] % 3 == 0) {\n              \
    \      $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    my $i = 0;\n    my $triples = 0;\n    my $arr = [];\n    for($i\
    \ = 1; $i <= $n; $i++) {\n        $arr->[$i - 1] = $i * $i - $i + 1;\n    }\n\
    \    # find all possible triples.\n    for($i = 0; $i < $n - 2; $i++) {\n    \
    \    for(my $j = $i + 1; $j < $n - 1; $j++) {\n            for(my $k = $j + 1;\
    \ $k < $n; $k++) {\n                my $sum = $arr->[$i] + $arr->[$j] + $arr->[$k];\n\
    \                if($sum % 3 == 0) {\n                    $triples++;\n      \
    \          }\n            }\n        }\n    }\n    return $triples;\n}", "   \
    \ my @triples;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = $i\
    \ + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n \
    \               if (($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) %\
    \ 3 == 0) {\n                    push @triples, [$i, $j, $k];\n              \
    \  }\n            }\n        }\n    }\n    return scalar @triples;\n}", "    my($result)\
    \ = 0;\n    if($n < 3) {\n        return $result;\n    }\n    my($a) = [];\n \
    \   for(my($i) = 1; $i <= $n; $i++) {\n        $a->[$i] = $i * $i - $i + 1;\n\
    \    }\n    for(my($i) = 1; $i <= $n - 2; $i++) {\n        for(my($j) = $i + 1;\
    \ $j <= $n - 1; $j++) {\n            for(my($k) = $j + 1; $k <= $n; $k++) {\n\
    \                if(($a->[$i] + $a->[$j] + $a->[$k]) % 3 == 0) {\n           \
    \         $result++;\n                }\n            }\n        }\n    }\n   \
    \ return $result;\n}", "    my $max_triples = 0;\n    for (my $i = 1; $i < $n;\
    \ $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my\
    \ $k = $j + 1; $k < $n; $k++) {\n                if (($i * $i - $i + 1 + $j *\
    \ $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n                    $max_triples++;\n\
    \                }\n            }\n        }\n    }\n    return $max_triples;\n\
    }", "    my @a = (0..$n-1);\n    for(my $i=0; $i<$n; $i++) {\n        $a[$i] =\
    \ $i*$i - $i + 1;\n    }\n    # print join(',', @a) . \"\\n\";\n    my $count\
    \ = 0;\n    for(my $i=0; $i<$n-2; $i++) {\n        for(my $j=$i+1; $j<$n-1; $j++)\
    \ {\n            for(my $k=$j+1; $k<$n; $k++) {\n                if(($a[$i] +\
    \ $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}", "    my $cnt =\
    \ 0;\n    my $mod;\n    my $sum = 0;\n    for (my $i = 1; $i <= $n - 2; $i++)\
    \ {\n        for (my $j = $i + 1; $j <= $n - 1; $j++) {\n            for (my $k\
    \ = $j + 1; $k <= $n; $k++) {\n                $sum = $i * $i - $i + 1 + $j *\
    \ $j - $j + 1 + $k * $k - $k + 1;\n                $mod = $sum % 3;\n        \
    \        if ($mod == 0) {\n                    $cnt++;\n                }\n  \
    \          }\n        }\n    }\n    return $cnt;\n}", "    my $i;\n    my $j;\n\
    \    my $k;\n    my $max_triples = 0;\n    my $triples;\n    my $a = [];\n   \
    \ my $mod3 = [];\n    my $mod3_length = [];\n    # Initialize the mod3 hash to\
    \ record the occurance of each number's mod3 value\n    for ($i = 0; $i < 3; $i++)\
    \ {\n        $mod3->[$i] = {};\n        $mod3_length->[$i] = 0;\n    }\n    #\
    \ Insert the first two elements into the mod3 hash\n    for ($i = 0; $i < 3; $i++)\
    \ {\n        if ($i < 2) {\n            $a->[$i] = $i * $i - $i + 1;\n       \
    \     if (!exists $mod3->[$a->[$i] % 3]->{$a->[$i]}) {\n                $mod3->[$a->[$i]\
    \ % 3]->{$a->[$i]} = 1;\n                $mod3_length->[$a->[$i] % 3] += 1;\n\
    \            }\n        }\n        # Calculate the max triples when i is equal\
    \ to 1 and 2\n        if ($i == 1) {\n            $triples = 0;\n            if\
    \ ($a->[$i] % 3 == 0) {\n                if (exists $mod3->[($a->[$i] - $a->[0])\
    \ % 3]->{$a->[$i] - $a->[0]}) {\n                    $triples += $mod3_length->[($a->[$i]\
    \ - $a->[0]) % 3] - 1;\n                }\n            }\n            if ($triples\
    \ > $max_triples) {\n                $max_triples = $triples;\n            }\n\
    \        }\n        if ($i == 2) {\n            $triples = 0;\n            if\
    \ ($a->[$i] % 3 == 0) {\n                if (exists $mod3->[($a->[$i] - $a->[0])\
    \ % 3]->{$a->", "    my @a = (1..$n);\n    for my $i (0..$#a) {\n        $a[$i]\
    \ = $a[$i] * $a[$i] - $a[$i] + 1;\n    }\n    my $ret = 0;\n    for my $i (0..$#a)\
    \ {\n        for my $j ($i+1..$#a) {\n            for my $k ($j+1..$#a) {\n  \
    \              $ret++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n            }\n\
    \        }\n    }\n    return $ret;\n}", "    my $result = 0;\n    my @a = ();\n\
    \    for (my $i = 1; $i <= $n; $i++) {\n        push @a, $i * $i - $i + 1;\n \
    \   }\n    for (my $i = 0; $i < $n - 2; $i++) {\n        for (my $j = $i + 1;\
    \ $j < $n - 1; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n  \
    \              if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                  \
    \  $result++;\n                }\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my $count = 0;\n    for (my $i = 1; $i < $n; $i++) {\n  \
    \      for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($i * $i - $i + 1 + $j * $j - $j + 1 +\
    \ $k * $k - $k + 1) % 3 == 0) {\n                    $count++;\n             \
    \   }\n            }\n        }\n    }\n    return $count;\n}", "    my($i, $j,\
    \ $k, $count);\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = $i + 1; $j\
    \ < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n            \
    \    if (($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}", "    my @a = (1);\n    my $counter = 0;\n    foreach\
    \ my $i (2..$n) {\n        push @a, $i * $i - $i + 1;\n        foreach my $j (0..$i-2)\
    \ {\n            foreach my $k ($j+1..$i-1) {\n                if(($a[$j] + $a[$k]\
    \ + $a[$i-1]) % 3 == 0) {\n                    $counter++;\n                }\n\
    \            }\n        }\n    }\n    return $counter;\n}", "    my $c = 0;\n\
    \    for my $i (1..$n) {\n        for my $j ($i+1..$n) {\n            for my $k\
    \ ($j+1..$n) {\n                my $a = $i * $i - $i + 1;\n                my\
    \ $b = $j * $j - $j + 1;\n                my $c = $k * $k - $k + 1;\n        \
    \        $c++ if ($a + $b + $c) % 3 == 0;\n            }\n        }\n    }\n \
    \   return $c;\n}", "    my @a = (1);\n    for my $i (2..$n) {\n        push @a,\
    \ $i * $i - $i + 1;\n    }\n    my $max_cnt = 0;\n    for my $i (0..$#a) {\n \
    \       for my $j ($i+1..$#a) {\n            for my $k ($j+1..$#a) {\n       \
    \         if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $max_cnt++;\n\
    \                }\n            }\n        }\n    }\n    return $max_cnt;\n}",
  "    my @a = map {$_*$_ - $_ + 1} (1..$n);\n    my $count = 0;\n    for my $i (0..$#a-2)\
    \ {\n        for my $j ($i+1..$#a-1) {\n            for my $k ($j+1..$#a) {\n\
    \                $count++ if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0);\n        \
    \    }\n        }\n    }\n    return $count;\n}", "    my $i = 0;\n    my $j =\
    \ 0;\n    my $k = 0;\n    my $triples = 0;\n    my @array;\n    # (a[i], a[j],\
    \ a[k]) = (array[i], array[j], array[k])\n    # i < j < k, so i < j and j < k.\n\
    \    # i = 0,1,2,3;\n    # j = 1,2,3,4;\n    # k = 2,3,4,5;\n    for ($i = 0;\
    \ $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n     \
    \       for ($k = $j + 1; $k < $n; $k++) {\n                my $sum = ($i + 1)\
    \ * ($i + 1) - ($i + 1) + 1;\n                $sum += ($j + 1) * ($j + 1) - ($j\
    \ + 1) + 1;\n                $sum += ($k + 1) * ($k + 1) - ($k + 1) + 1;\n   \
    \             if ($sum % 3 == 0) {\n                    $triples++;\n        \
    \        }\n            }\n        }\n    }\n    return $triples;\n}", "    my\
    \ $count = 0;\n    # Write your code here.\n    my @a = (1);\n    foreach my $i\
    \ (1..$n-1) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n    # Compare each number\
    \ with all the numbers in front of it. \n    # If sum of the numbers is multiple\
    \ of 3, then increase counter by 1.\n    foreach my $i (0..$n-3) {\n        foreach\
    \ my $j ($i+1..$n-2) {\n            foreach my $k ($j+1..$n-1) {\n           \
    \     if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $a = [];\n    for(my $i = 1; $i <= $n; $i++) {\n        push @$a, $i *\
    \ $i - $i + 1;\n    }\n    my $s = 0;\n    for(my $i = 0; $i < $n - 2; $i++) {\n\
    \        for(my $j = $i + 1; $j < $n - 1; $j++) {\n            for(my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if(($a->[$i] + $a->[$j] + $a->[$k]) %\
    \ 3 == 0) {\n                    $s++;\n                }\n            }\n   \
    \     }\n    }\n    return $s;\n}", "    return 0 if ($n < 3);\n    my $res =\
    \ 0;\n    for my $i (1..$n) {\n        my $val = $i * $i - $i + 1;\n        for\
    \ my $j (($i+1)..$n) {\n            my $val1 = $j * $j - $j + 1;\n           \
    \ if (($val + $val1) % 3 == 0) {\n                for my $k (($j+1)..$n) {\n \
    \                   my $val2 = $k * $k - $k + 1;\n                    if (($val\
    \ + $val1 + $val2) % 3 == 0) {\n                        $res++;\n            \
    \        }\n                }\n            }\n        }\n    }\n    return $res;\n\
    }", "    my $sum = 0;\n    my $count = 0;\n    my $i = 1;\n    while($i < $n)\
    \ {\n        $sum += $i;\n        $count++ if ($sum % 3 == 0);\n        $i++;\n\
    \    }\n    return $count;\n}", "    my $i;\n    my $a = 0;", "    my $total =\
    \ 0;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = $i + 1; $j <\
    \ $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n           \
    \     if ((($i*$i-$i+1) + ($j*$j-$j+1) + ($k*$k-$k+1)) % 3 == 0) {\n         \
    \           $total++;\n                }\n            }\n        }\n    }\n  \
    \  return $total;\n}", "    # Write your code here\n    # To print results to\
    \ the standard output you can use print\n    # Example:\n    # print \"Hello world!\\\
    n\";\n    my @a;\n    for(my $i = 1; $i <= $n; $i++){\n        $a[$i] = $i * $i\
    \ - $i + 1;\n    }\n    my $count = 0;\n    for(my $i = 1; $i <= $n - 2; $i++){\n\
    \        for(my $j = $i + 1; $j <= $n - 1; $j++){\n            for(my $k = $j\
    \ + 1; $k <= $n; $k++){\n                if(($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0){\n                    $count++;\n                }\n            }\n     \
    \   }\n    }\n    return $count;\n}", "    my $triples = 0;\n    for my $i (0..$n-3)\
    \ {\n        for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1) {\n\
    \                if (($i*$i - $i + 1 + $j*$j - $j + 1 + $k*$k - $k + 1) % 3 ==\
    \ 0) {\n                    $triples++;\n                }\n            }\n  \
    \      }\n    }\n    return $triples;\n}", "    return 0 if $n < 3;\n    my $count\
    \ = 0;\n    my $sum = 3;\n    my $i = 1;\n    my $j = 2;\n    my $k = 3;\n   \
    \ while ($i < $n) {\n        while ($j < $n) {\n            while ($k < $n) {\n\
    \                $count++ if $sum == 3;\n                $k++;\n             \
    \   $sum += (($k * $k) - $k + 1);\n            }\n            $j++;\n        \
    \    $sum -= $j;\n            $sum += (($j * $j) - $j + 1);\n            $k =\
    \ $j + 1;\n            $sum += (($k * $k) - $k + 1);\n        }\n        $i++;\n\
    \        $sum -= $i;\n        $sum += (($i * $i) - $i + 1);\n        $j = $i +\
    \ 1;\n        $sum += (($j * $j) - $j + 1);\n        $k = $j + 1;\n        $sum\
    \ += (($k * $k) - $k + 1);\n    }\n    return $count;\n}", "    my $sum = 0;\n\
    \    for(my $i = 0; $i < $n - 2; $i++) {\n        for(my $j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for(my $k = $j + 1; $k < $n; $k++) {\n           \
    \     $sum += 1 if($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) % 3\
    \ == 0;\n            }\n        }\n    }\n    return $sum;\n}", "    return ($n\
    \ < 3 ? 0 : $n - 2);\n}", "    my @a = ();\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        push @a, $i * $i - $i + 1;\n    }\n    my $count = 0;\n    for (my\
    \ $i = 0; $i < $n - 2; $i++) {\n        for (my $j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}", "    my $sum\
    \ = 0;\n    my $trips = 0;\n    # Your code here\n    return $trips;\n}", "  \
    \  my $a_ref = [ map {$_ * $_ - $_ + 1} (1..$n) ];\n    my $s = 0;\n    for my\
    \ $i (0..$n-3) {\n        for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1)\
    \ {\n                $s++ if (($a_ref->[$i] + $a_ref->[$j] + $a_ref->[$k]) % 3\
    \ == 0);\n            }\n        }\n    }\n    return $s;\n}", "    my $max_triples\
    \ = 0;\n    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    for (my $i = 0; $i\
    \ < $n - 2; $i++) {\n        for (my $j = $i + 1; $j < $n - 1; $j++) {\n     \
    \       for (my $k = $j + 1; $k < $n; $k++) {\n                $max_triples++\
    \ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n            }\n        }\n    }\n \
    \   return $max_triples;\n}", "    $n--;\n    my $sum = 0;\n    for my $i (1..$n-1)\
    \ {\n        $sum += $i * ($n - $i);\n    }\n    return $sum;\n}", "    my $count\
    \ = 0;\n    my @a = ();\n    for(my $i = 1; $i <= $n; $i++) {\n        push(@a,\
    \ $i * $i - $i + 1);\n    }\n    my @cache = (0) x $n;\n    for(my $i = 0; $i\
    \ < $n; $i++) {\n        my $sum = $a[$i];\n        for(my $j = $i + 1; $j < $n;\
    \ $j++) {\n            $sum += $a[$j];\n            my $res = $sum % 3;\n    \
    \        if($res == 0) {\n                $count += $cache[$j];\n            }\n\
    \            $cache[$j]++;\n        }\n    }\n    return $count;\n}", "    my\
    \ @A = (1);\n    for my $i (1..$n-1) {\n        push @A, $i*$i - $i + 1;\n   \
    \ }\n    #say join(\" \", @A);\n    my $count = 0;\n    for my $i (0..$n-3) {\n\
    \        for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1) {\n    \
    \            #say \"$i $j $k\";\n                if(($A[$i] + $A[$j] + $A[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my $max_triples = 0;\n    my $a\
    \ = 1;\n    my $b = 3;\n    my $c = 7;\n    while($c <= $n){\n        if($a+$b+$c\
    \ <= $n && ($a+$b+$c)%3 == 0){\n            $max_triples++;\n        }\n     \
    \   $a += 3;\n        $b += 6;\n        $c += 10;\n    }\n    return $max_triples;\n\
    }", "    # Return the number of triples as described above.\n    my $count = 0;\n\
    \    my @a = ();\n    my $c = 0;\n    my $res = 0;\n    my @b = ();\n    my $sum\
    \ = 0;\n    for(my $i = 1; $i <= $n; $i++){\n        $c = $i * $i - $i + 1;\n\
    \        push(@a, $c);\n    }\n    #print join(\" \", @a), \"\\n\";\n    my $size\
    \ = scalar @a;\n    for(my $i = 0; $i < $size - 2; $i++){\n        for(my $j =\
    \ $i + 1; $j < $size - 1; $j++){\n            for(my $k = $j + 1; $k < $size;\
    \ $k++){\n                $sum = $a[$i] + $a[$j] + $a[$k];\n                if($sum\
    \ % 3 == 0){\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    #print $count, \"\\n\";\n    return $count;\n}", "    my\
    \ $i = 1;\n    my @res = [];\n    while($i <= $n) {\n        push @res, $i * $i\
    \ - $i + 1;\n        $i++;\n    }\n    my $count = 0;\n    for(my $i = 0; $i <\
    \ $n - 2; $i++) {\n        for(my $j = $i + 1; $j < $n - 1; $j++) {\n        \
    \    for(my $k = $j + 1; $k < $n; $k++) {\n                if(($res[$i] + $res[$j]\
    \ + $res[$k]) % 3 == 0) {\n                    $count++;\n                }\n\
    \            }\n        }\n    }\n    return $count;\n}", "    my @a = map {$_\
    \ * $_ - $_ + 1} (1..$n);\n    my $count = 0;\n    for my $i (0..$#a) {\n    \
    \    for my $j ($i+1..$#a) {\n            for my $k ($j+1..$#a) {\n          \
    \      $count++ if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0);\n            }\n   \
    \     }\n    }\n    return $count;\n}", "    my @a = (1);\n    for my $i (1..$n-1)\
    \ {\n        push @a, $i*$i - $i + 1;\n    }\n    my $count = 0;\n    for my $i\
    \ (0..$n-3) {\n        for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1)\
    \ {\n                my $sum = $a[$i] + $a[$j] + $a[$k];\n                $count++\
    \ if($sum % 3 == 0);\n            }\n        }\n    }\n    return $count;\n}",
  "    my $r = 0;\n    for my $i (1..$n-2) {\n        for my $j ($i+1..$n-1) {\n \
    \           for my $k ($j+1..$n) {\n                $r++ if ($i*$i-$i+1 + $j*$j-$j+1\
    \ + $k*$k-$k+1) % 3 == 0;\n            }\n        }\n    }\n    return $r;\n}",
  "    my $triples = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j\
    \ = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k +\
    \ 1) % 3 == 0) {\n                    $triples++;\n                }\n       \
    \     }\n        }\n    }\n    return $triples;\n}", "    return $n;\n}", "  \
    \  my @a = (1);\n    my $res = 0;\n    for (2..$n) {\n        my $i = $_;\n  \
    \      $a[$i] = $i*$i - $i + 1;\n        if (($a[$i-1] + $a[$i] + $a[$i-2]) %\
    \ 3 == 0) {\n            $res++;\n        }\n    }\n    return $res;\n}", "  \
    \  my $result = 0;\n    my $mod = $n % 3;\n    $n = ($n - $mod) / 3;\n    $result\
    \ += $n * $n;\n    $n = ($n + $mod) / 2;\n    $result += $n * $n;\n    return\
    \ $result;\n}", "    my $ones = 0;\n    my $zeros = 0;\n    for (my $i = 1; $i\
    \ <= $n; $i++) {\n        my $bit = ($i * $i - $i + 1) % 3;\n        if ($bit\
    \ == 1) {\n            $ones++;\n        } elsif ($bit == 0) {\n            $zeros++;\n\
    \        }\n    }\n    return min($ones, $zeros) + ($ones - min($ones, $zeros))\
    \ * 2;\n}", "    my $sum = 0;\n    # Write your code here.\n    return $sum;\n\
    }", "    my($max) = int($n / 3);\n    return $max * ($max + 1) / 2;\n}", "   \
    \ my $sum = 0;\n    foreach my $i (1..$n-2) {\n        foreach my $j ($i+1..$n-1)\
    \ {\n            foreach my $k ($j+1..$n) {\n                $sum++ if (($i+$j+$k)\
    \ % 3 == 0);\n            }\n        }\n    }\n    return $sum;\n}", "    return\
    \ 1;\n}", "    my($total, $pos_mod3, $neg_mod3) = (0, 0, 0);\n    foreach my $i\
    \ (1..$n) {\n        my $a_i = $i * $i - $i + 1;\n        if($a_i % 3 == 0) {\n\
    \            $total += $pos_mod3;\n        }\n        elsif($a_i % 3 == 1) {\n\
    \            $pos_mod3++;\n        }\n        else {\n            $total += $neg_mod3;\n\
    \            $neg_mod3++;\n        }\n    }\n    return $total;\n}", "    my $ret\
    \ = 0;\n    for(my $i = 1; $i < $n - 1; $i++){\n        for(my $j = $i + 1; $j\
    \ < $n; $j++){\n            my $a = $i * $i - $i + 1;\n            my $b = $j\
    \ * $j - $j + 1;\n            my $sum = $a + $b;\n            my $k = sqrt($sum);\n\
    \            if($k > 0 && $k == int($k)){\n                if($k <= $n && $sum\
    \ % 3 == 0){\n                    print \"($a, $b, $k)\\n\";\n               \
    \     $ret++;\n                }\n            }\n        }\n    }\n    return\
    \ $ret;\n}", "    my $m = 0;\n    for my $i (1..$n-2) {\n        for my $j ($i+1..$n-1)\
    \ {\n            for my $k ($j+1..$n) {\n                my $x = $i * $i - $i\
    \ + 1;\n                my $y = $j * $j - $j + 1;\n                my $z = $k\
    \ * $k - $k + 1;\n                if(($x + $y + $z) % 3 == 0) {\n            \
    \        $m++;\n                }\n            }\n        }\n    }\n    return\
    \ $m;\n}", "    my $count = 0;\n    for(my $i = 1; $i < $n - 1; $i++) {\n    \
    \    for(my $j = $i + 1; $j < $n; $j++) {\n            for(my $k = $j + 1; $k\
    \ <= $n; $k++) {\n                my $value = $i * $i - $i + 1 + $j * $j - $j\
    \ + 1 + $k * $k - $k + 1;\n                if($value % 3 == 0) {\n           \
    \         $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    my $arr_ref = [map($_ * $_ - $_ + 1, (1..$n))];\n    my $total\
    \ = 0;\n    for my $i (0..$n - 3) {\n        for my $j ($i + 1..$n - 2) {\n  \
    \          for my $k ($j + 1..$n - 1) {\n                $total++ if (($arr_ref->[$i]\
    \ + $arr_ref->[$j] + $arr_ref->[$k]) % 3 == 0);\n            }\n        }\n  \
    \  }\n    return $total;\n}", "    my $count = 0;\n    my @arr = (1);\n    for\
    \ (my $i = 2; $i <= $n; $i++) {\n        push @arr, $i * $i - $i + 1;\n    }\n\
    \    for (my $i = 0; $i < $n - 2; $i++) {\n        for (my $j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n          \
    \      if (($arr[$i] + $arr[$j] + $arr[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   return 0 if ($n < 3);\n    my $a = $n * ($n - 1) / 2;\n    my $b = $n - 1;\n\
    \    return $a - $b;\n}", "    my @a = map {$_ * $_ - $_ + 1} (1..$n);\n    my\
    \ $count = 0;\n    for my $i (0..$#a-2) {\n        for my $j ($i+1..$#a-1) {\n\
    \            if(($a[$i] + $a[$j]) % 3 == 0) {\n                for my $k ($j+1..$#a)\
    \ {\n                    if(($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n         \
    \               $count++;\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return $count;\n}", "    my $a = 0;\n    my $b =\
    \ 0;\n    my $count = 0;\n    if($n >= 3){\n        $a = 3;\n        $b = 1;\n\
    \        $count = 1;\n    }\n    if($n >= 4){\n        $a = 6;\n        $b = 4;\n\
    \        $count = 3;\n    }\n    if($n >= 5){\n        $a = 10;\n        $b =\
    \ 5;\n        $count = 5;\n    }\n    if($n >= 6){\n        $a = 15;\n       \
    \ $b = 6;\n        $count = 7;\n    }\n    my $i = 7;\n    my $x = 21;\n    my\
    \ $y = 7;\n    my $z = 3;\n    my $sum = $a + $b;\n    while($i <= $n){\n    \
    \    $sum = $a + $b;\n        if($sum % 3 == 0){\n            $count++;\n    \
    \    }\n        $a = $x + $y + $z;\n        $y = $x;\n        $x = $y + $z;\n\
    \        $z = $x;\n        $b = $x;\n        $i++;\n    }\n    return $count;\n\
    }\n1;", "    $n;\n}", "    my $a = [];\n    for (my $i = 1; $i <= $n; $i++) {\n\
    \        $a->[$i] = $i * $i - $i + 1;\n    }\n    my $triples = 0;\n    for (my\
    \ $i = 1; $i <= $n - 2; $i++) {\n        for (my $j = $i + 1; $j <= $n - 1; $j++)\
    \ {\n            for (my $k = $j + 1; $k <= $n; $k++) {\n                $triples++\
    \ if (($a->[$i] + $a->[$j] + $a->[$k]) % 3 == 0);\n            }\n        }\n\
    \    }\n    return $triples;\n}", "    #say join ',', 1..$n;\n    my $cnt = 0;\n\
    \    for my $i (0..$n-1) {\n        for my $j ($i+1..$n-1) {\n            for\
    \ my $k ($j+1..$n-1) {\n                $cnt++ if ($i * $i - $i + 1 + $j * $j\
    \ - $j + 1 + $k * $k - $k + 1) % 3 == 0;\n            }\n        }\n    }\n  \
    \  return $cnt;\n}", "    my($c) = 0;\n    my($f) = 0;\n    for my $i (0..$n-1)\
    \ {\n        my($s) = ($i * $i - $i + 1) % 3;\n        $f += $s == 1 ? 1 : 0;\n\
    \        $c += $s == 2 ? $f : 0;\n    }\n    return $c;\n}", "    my $count =\
    \ 0;\n    my @a = ();\n    for (my $i = 1; $i <= $n; $i++) {\n        push @a,\
    \ $i * $i - $i + 1;\n    }\n    for (my $i = 0; $i < $n - 2; $i++) {\n       \
    \ for (my $j = $i + 1; $j < $n - 1; $j++) {\n            for (my $k = $j + 1;\
    \ $k < $n; $k++) {\n                $count++ if ($a[$i] + $a[$j] + $a[$k]) % 3\
    \ == 0;\n            }\n        }\n    }\n    return $count;\n}", "    my $max_triples\
    \ = 0;\n    my $triples = 0;\n    my $last_i = -1;\n    my $last_j = -1;\n   \
    \ my $last_k = -1;\n    my $last_sum = -1;\n    for (my $i = 1; $i < $n; $i++){\n\
    \        my $a_i = $i * $i - $i + 1;\n        for (my $j = $i + 1; $j < $n; $j++){\n\
    \            my $a_j = $j * $j - $j + 1;\n            my $sum = $a_i + $a_j;\n\
    \            my $k = int(sqrt($sum + $sum + 1) + 1);\n            if ($k <= $n){\n\
    \                $a_k = $k * $k - $k + 1;\n                my $cur_sum = $sum\
    \ + $a_k;\n                my $cur_sum_mod = $cur_sum % 3;\n                if\
    \ ($last_sum == $cur_sum && $last_i == $i && $last_j == $j && $last_k == $k){\n\
    \                    $triples++;\n                }\n                elsif ($cur_sum_mod\
    \ == 0){\n                    $triples = 1;\n                    $last_i = $i;\n\
    \                    $last_j = $j;\n                    $last_k = $k;\n      \
    \              $last_sum = $cur_sum;\n                }\n                if ($triples\
    \ > $max_triples){\n                    $max_triples = $triples;\n           \
    \     }\n            }\n        }\n    }\n    return $max_triples;\n}", "    my\
    \ $a_len = $n;\n    my @a = (1);\n    for (my $i = 1; $i < $a_len; $i++) {\n \
    \       push @a, $i * $i - $i + 1;\n    }\n    my $count = 0;\n    for (my $i\
    \ = 0; $i < $a_len - 2; $i++) {\n        for (my $j = $i + 1; $j < $a_len - 1;\
    \ $j++) {\n            for (my $k = $j + 1; $k < $a_len; $k++) {\n           \
    \     if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $a = _get_a($n);\n    my $total = 0;\n    for my $i (0..$n-1) {\n     \
    \   for my $j ($i+1..$n-1) {\n            for my $k ($j+1..$n-1) {\n         \
    \       if (($a->[$i] + $a->[$j] + $a->[$k]) % 3 == 0) {\n                   \
    \ $total++;\n                }\n            }\n        }\n    }\n    return $total;\n\
    }", "    my $total = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++)\
    \ {\n                my $a = $i * $i - $i + 1;\n                my $b = $j * $j\
    \ - $j + 1;\n                my $c = $k * $k - $k + 1;\n                $total++\
    \ if (($a + $b + $c) % 3 == 0);\n            }\n        }\n    }\n    return $total;\n\
    }", "    my $n_triples = 0;\n    my $i = 0;\n    my $j = 1;\n    my $k = 2;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    while ($j < $n) {\n     \
    \   $a = $i*$i - $i + 1;\n        $b = $j*$j - $j + 1;\n        $c = $k*$k - $k\
    \ + 1;\n        print \"a: $a, b: $b, c: $c\\n\";\n        if (($a + $b + $c)\
    \ % 3 == 0) {\n            $n_triples++;\n        }\n        if ($k == $n) {\n\
    \            $i++;\n            $j++;\n            $k = $j + 1;\n        } else\
    \ {\n            $k++;\n        }\n    }\n    return $n_triples;\n}", "    my\
    \ $triples = 0;\n    my $c_sum = 0;\n    my @arr = ();\n    my $t1 = 0;\n    my\
    \ $t2 = 0;\n    my $t3 = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    for($i = 1; $i <= $n; $i++){\n        $c_sum = ($i * $i) - $i + 1;\n    \
    \    if(($c_sum % 3) == 0){\n            $triples++;\n        }\n        for($j\
    \ = $i + 1; $j <= $n; $j++){\n            $t1 = $c_sum;\n            $t2 = ($j\
    \ * $j) - $j + 1;\n            if(($t1 + $t2) % 3 == 0){\n                $triples++;\n\
    \            }\n            for($k = $j + 1; $k <= $n; $k++){\n              \
    \  $t3 = ($k * $k) - $k + 1;\n                if(($t1 + $t2 + $t3) % 3 == 0){\n\
    \                    $triples++;\n                }\n            }\n        }\n\
    \    }\n    return $triples;\n}\n1;", "    my @range = (1..$n);\n    my @a = map\
    \ { my $i = $_; ($i * $i) - $i + 1 } @range;\n    my $triples = 0;\n    for (my\
    \ $i = 0; $i < $n - 2; $i++) {\n        for (my $j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $triples++;\n          \
    \      }\n            }\n        }\n    }\n    return $triples;\n}", "    my $triples\
    \ = 0;\n    for my $i (0..$n-1) {\n        for my $j ($i+1..$n-1) {\n        \
    \    for my $k ($j+1..$n-1) {\n                $triples++ if ($i*$i - $i + 1 +\
    \ $j*$j - $j + 1 + $k*$k - $k + 1) % 3 == 0;\n            }\n        }\n    }\n\
    \    return $triples;\n}", "    my $count = 0;\n    for (my $i = 1; $i < $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($i * $i - $i + 1 + $j * $j - $j\
    \ + 1 + $k * $k - $k + 1) % 3 == 0) {\n                    $count += 1;\n    \
    \            }\n            }\n        }\n    }\n    return $count;\n}", "   \
    \ my $sum = 0;\n    my $r = (1 .. $n);\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $k = 0;\n    foreach $i (0 .. scalar(@$r) - 3) {\n        foreach $j ($i + 1\
    \ .. scalar(@$r) - 2) {\n            foreach $k ($j + 1 .. scalar(@$r) - 1) {\n\
    \                $sum++ if (($r->[$i] + $r->[$j] + $r->[$k]) % 3 == 0);\n    \
    \        }\n        }\n    }\n    return $sum;\n}", "    my @a = (1);\n    for\
    \ my $i (1..$n-1) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n    my $count\
    \ = 0;\n    for my $i (0..$n-3) {\n        for my $j ($i+1..$n-2) {\n        \
    \    for my $k ($j+1..$n-1) {\n                if(($a[$i] + $a[$j] + $a[$k]) %\
    \ 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my @array = map { ($_ * $_) -\
    \ $_ + 1 } (1..$n);\n    my $count = 0;\n    for my $i (0..$#array-2) {\n    \
    \    for my $j ($i+1..$#array-1) {\n            for my $k ($j+1..$#array) {\n\
    \                my $sum = $array[$i] + $array[$j] + $array[$k];\n           \
    \     if ($sum % 3 == 0) {\n                    $count++;\n                }\n\
    \            }\n        }\n    }\n    return $count;\n}", "    my @a = (1);\n\
    \    for my $i (2..$n) {\n        push @a, $i * $i - $i + 1;\n    }\n    my $count\
    \ = 0;\n    for my $i (0..$#a) {\n        for my $j ($i+1..$#a) {\n          \
    \  for my $k ($j+1..$#a) {\n                $count++ if ($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0;\n            }\n        }\n    }\n    return $count;\n}", "    my\
    \ @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    my $num = 0;\n    for my $i (0..$#a)\
    \ {\n        for my $j ($i+1..$#a) {\n            for my $k ($j+1..$#a) {\n  \
    \              $num++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n            }\n\
    \        }\n    }\n    return $num;\n}", "    $n = int($n);\n    my $count = 0;\n\
    \    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if (($i\
    \ * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n         \
    \           $count++;\n                }\n            }\n        }\n    }\n  \
    \  return $count;\n}", "    my $triples = 0;\n    for my $i (0..$n-1) {\n    \
    \    for my $j ($i+1..$n-1) {\n            for my $k ($j+1..$n-1) {\n        \
    \        $triples++ if (($i*$i-$i+1 + $j*$j-$j+1 + $k*$k-$k+1) % 3 == 0);\n  \
    \          }\n        }\n    }\n    return $triples;\n}", "    my $max_triples\
    \ = 0;\n    my $triples = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        my\
    \ $a_i = $i * $i - $i + 1;\n        for (my $j = $i + 1; $j < $n; $j++) {\n  \
    \          my $a_j = $j * $j - $j + 1;\n            if (($a_i + $a_j) % 3 == 0)\
    \ {\n                for (my $k = $j + 1; $k < $n; $k++) {\n                 \
    \   my $a_k = $k * $k - $k + 1;\n                    if (($a_i + $a_j + $a_k)\
    \ % 3 == 0) {\n                        $triples++;\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return $triples;\n}", " \
    \   my @a = map {$_ * $_ - $_ + 1} (1..$n);\n    my $cnt = 0;\n    for my $i (0..$#a)\
    \ {\n        for my $j ($i+1..$#a) {\n            for my $k ($j+1..$#a) {\n  \
    \              ++$cnt if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n            }\n\
    \        }\n    }\n    return $cnt;\n}", "    my $triples = 0;\n    my $sum =\
    \ 0;\n    my $A = [];\n    my $B = [];\n    my $C = [];\n    for (my $i = 1; $i\
    \ <= $n; $i++) {\n        $sum = $i * $i - $i + 1;\n        if ($sum % 3 == 0)\
    \ {\n            push(@$A, $sum);\n        }\n        elsif ($sum % 3 == 1) {\n\
    \            push(@$B, $sum);\n        }\n        else {\n            push(@$C,\
    \ $sum);\n        }\n    }\n    $triples += ($#$A + 1) * ($#$B + 1) * ($#$C +\
    \ 1);\n    $triples += ($#$A + 1) * ($#$B + 1) * ($#$A + 1);\n    $triples +=\
    \ ($#$A + 1) * ($#$C + 1) * ($#$C + 1);\n    $triples += ($#$B + 1) * ($#$C +\
    \ 1) * ($#$B + 1);\n    return $triples;\n}", "    my $count = 0;\n    my @a =\
    \ ();\n    for(my $i = 1; $i <= $n; $i++) {\n        push(@a, $i * $i - $i + 1);\n\
    \    }\n    for(my $i = 0; $i < $n - 2; $i++) {\n        for(my $j = $i + 1; $j\
    \ < $n - 1; $j++) {\n            for(my $k = $j + 1; $k < $n; $k++) {\n      \
    \          if(($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   return 0 if($n < 3);\n    my $sum = 0;\n    my $count = 0;\n    my $max =\
    \ $n + 1;\n    for(my $i = 1; $i < $max; $i++){\n        $sum += $i * $i - $i\
    \ + 1;\n        if($sum == 0){\n            $count++;\n        }\n        elsif($sum\
    \ % 3 == 0){\n            $count++;\n        }\n    }\n    return $count;\n}",
  "    my $count = 0;\n    for (my $i = 1; $i < $n - 1; $i++) {\n        my $a = $i\
    \ * $i - $i + 1;\n        for (my $j = $i + 1; $j < $n; $j++) {\n            my\
    \ $b = $j * $j - $j + 1;\n            for (my $k = $j + 1; $k <= $n; $k++) {\n\
    \                my $c = $k * $k - $k + 1;\n                if (($a + $b + $c)\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for(my $i\
    \ = 1; $i < $n; $i++){\n        for(my $j = $i + 1; $j < $n; $j++){\n        \
    \    my $sum = $i * $i - $i + 1 + $j * $j - $j + 1;\n            if($sum % 3 ==\
    \ 0){\n                $count++;\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    my @a = (1);\n    my @result = (0);\n    # a[1] = 1\n    #\
    \ a[2] = 3\n    # a[3] = 7\n    # a[4] = 13\n    # a[5] = 21\n    # a[6] = 31\n\
    \    # a[7] = 43\n    # a[8] = 57\n    # a[9] = 73\n    # a[10] = 91\n    # a[11]\
    \ = 111\n    # a[12] = 133\n    # a[13] = 157\n    # a[14] = 183\n    # a[15]\
    \ = 211\n    # a[16] = 241\n    # a[17] = 273\n    # a[18] = 307\n    # a[19]\
    \ = 343\n    # a[20] = 381\n    # a[21] = 421\n    # a[22] = 463\n    # a[23]\
    \ = 507\n    # a[24] = 553\n    # a[25] = 601\n    # a[26] = 651\n    # a[27]\
    \ = 703\n    # a[28] = 757\n    # a[29] = 813\n    # a[30] = 871\n    # a[31]\
    \ = 931\n    # a[32] = 993\n    # a[33] = 1057\n    # a[34] = 1123\n    # a[35]\
    \ = 1191\n    # a[36] = 1261\n    # a[37] = 1333\n    # a[38] = 1407\n    # a[39]\
    \ = 1483\n    # a[40] = 1561\n    # a[41] = 1641\n    # a[42] = 1723\n    # a[43]\
    \ = 1807\n    # a[44] = 1893\n    # a[45] = 1981\n    # a[46] = 2071\n    # a[47]\
    \ = 2163\n    # a[48] = 2257\n    # a[49] = 2353\n    # a[50] = 2451\n    # a[51]\
    \ = 2551\n    # a[52]", "    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    my\
    \ $count = 0;\n    for (my $i = 0; $i < $n - 2; $i++) {\n        for (my $j =\
    \ $i + 1; $j < $n - 1; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++)\
    \ {\n                my $sum = $a[$i] + $a[$j] + $a[$k];\n                if ($sum\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my $triples = 0;\n    for my $i\
    \ (0..$n - 3) {\n        for my $j ($i + 1..$n - 2) {\n            for my $k ($j\
    \ + 1..$n - 1) {\n                my $num = $i * $i - $i + 1 + $j * $j - $j +\
    \ 1 + $k * $k - $k + 1;\n                if ($num % 3 == 0) {\n              \
    \      $triples += 1;\n                }\n            }\n        }\n    }\n  \
    \  return $triples;\n}", "    my @a = (1);\n    for (2..$n) {\n        push @a,\
    \ $_*$_ - $_ + 1;\n    }\n    my $cnt = 0;\n    for (my $i = 0; $i < $n - 2; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n - 1; $j++) {\n            for (my $k\
    \ = $j + 1; $k < $n; $k++) {\n                my $sum = $a[$i] + $a[$j] + $a[$k];\n\
    \                if ($sum % 3 == 0) {\n                    $cnt++;\n         \
    \       }\n            }\n        }\n    }\n    return $cnt;\n}", "    my $count\
    \ = 0;\n    my @arr = (1);\n    for(my $i = 2; $i <= $n; $i++) {\n        my $val\
    \ = $i * $i - $i + 1;\n        push @arr, $val;\n        for(my $j = 0; $j < $i\
    \ - 1; $j++) {\n            for(my $k = $j + 1; $k < $i; $k++) {\n           \
    \     if(($arr[$j] + $arr[$k] + $val) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $max = 0;\n    my $s = 0;\n    for (1..$n) {\n        my $y = $_ * $_ -\
    \ $_ + 1;\n        $s += $y;\n        $s -= $max if ($s > 3);\n        $max =\
    \ $y if ($y > $max);\n    }\n    return $s >= 3 ? $n-2 : $n-1;\n}", "    my @a\
    \ = ();\n    my @dp = ();\n    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        push @a, $i * $i - $i + 1;\n        push @dp, 0;\n    }\n    for\
    \ (my $i = 1; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n\
    \            if (($a[$i] + $a[$j]) % 3 == 0) {\n                $dp[$j] = max($dp[$j],\
    \ $dp[$i] + 1);\n            }\n        }\n    }\n    for (my $i = 0; $i < $n;\
    \ $i++) {\n        $count = max($count, $dp[$i]);\n    }\n    return $count;\n\
    }", "    my $sum = 0;\n    for(my $j = 1; $j < $n - 1; $j++){\n        my $t1\
    \ = $j + 1;\n        my $t2 = $n;\n        while($t1 < $t2){\n            my $sum\
    \ = ($j + 1) ** 2 - ($j + 1) + 1 + \n                      ($j + 2) ** 2 - ($j\
    \ + 2) + 1 + \n                      ($j + 3) ** 2 - ($j + 3) + 1;\n         \
    \   if($sum % 3 == 0){\n                $t1++;\n                $t2--;\n     \
    \       }elsif($sum % 3 == 1){\n                $t1++;\n            }else{\n \
    \               $t2--;\n            }\n        }\n    }\n    return $sum;\n}",
  "    my @a = map {$_*$_ - $_ + 1} (1..$n);\n    my $count = 0;\n    for my $i (0..$#a-2)\
    \ {\n        for my $j ($i+1..$#a-1) {\n            for my $k ($j+1..$#a) {\n\
    \                $count++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n          \
    \  }\n        }\n    }\n    return $count;\n}", "    my @a = (1);\n    my $count\
    \ = 0;\n    for(my $i = 1; $i < $n; $i++) {\n        $a[$i] = $i * $i - $i + 1;\n\
    \        $count += get_max_pairs($i - 1, \\@a);\n    }\n    return $count;\n}",
  "    my $count = 0;\n    my @array = ();\n    for(my $i = 1; $i <= $n; $i++) {\n\
    \        push(@array, $i * $i - $i + 1);\n    }\n    for(my $i = 0; $i < scalar(@array)\
    \ - 2; $i++) {\n        for(my $j = $i + 1; $j < scalar(@array) - 1; $j++) {\n\
    \            for(my $k = $j + 1; $k < scalar(@array); $k++) {\n              \
    \  if (($array[$i] + $array[$j] + $array[$k]) % 3 == 0) {\n                  \
    \  $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n1;", "    my @a = ();\n    my $count = 0;\n    for(my $i = 1; $i <= $n; $i++)\
    \ {\n        push(@a, $i * $i - $i + 1);\n    }\n    print \"\\n\";\n    for(my\
    \ $i = 0; $i < $n - 2; $i++) {\n        for(my $j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for(my $k = $j + 1; $k < $n; $k++) {\n                if(($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}", "    my $sum\
    \ = 0;\n    my $sum_mult_3 = 0;\n    my $sum_mult_3_minus_1 = 0;\n    my $sum_mult_3_minus_2\
    \ = 0;\n    my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        my\
    \ $current = $i * $i - $i + 1;\n        $sum += $current;\n        if ($current\
    \ % 3 == 0) {\n            $sum_mult_3 += $current;\n        } elsif ($current\
    \ % 3 == 1) {\n            $sum_mult_3_minus_1 += $current;\n        } else {\n\
    \            $sum_mult_3_minus_2 += $current;\n        }\n        $count += floor($sum_mult_3\
    \ / 3) + floor($sum_mult_3_minus_1 / 3) + floor($sum_mult_3_minus_2 / 3);\n  \
    \  }\n    return $count;\n}", "    my @arr = map { $_ * $_ - $_ + 1 } (1..$n);\n\
    \    my %res;\n    my $r = 0;\n    my $t;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            $t = $arr[$i]\
    \ + $arr[$j];\n            $r += exists $res{$t};\n            $res{$arr[$j]}\
    \ = 1;\n        }\n        delete $res{$arr[$i]};\n    }\n    return $r;\n}",
  "    my($count, $a) = (0, [1]);\n    foreach my $i (1..$n) {\n        $a->[$i] =\
    \ $i * $i - $i + 1;\n        $count++ if $a->[$i-1] + $a->[$i] + $a->[$i+1] %\
    \ 3 == 0;\n    }\n    return $count;\n}", "    my($sum,$result,$i,$j,$k) = (0,0,0,0,0);\n\
    \    my @a = ();\n    foreach (1..$n) {\n        push @a, (($_*$_)-$_+1);\n  \
    \  }\n    print \"DEBUG \".join(',',@a).\"\\n\";\n    for ($i=0;$i<$n;$i++) {\n\
    \        for ($j=$i+1;$j<$n;$j++) {\n            for ($k=$j+1;$k<$n;$k++) {\n\
    \                $sum = $a[$i]+$a[$j]+$a[$k];\n                print \"DEBUG:\
    \ a[$i]+a[$j]+a[$k] = $sum\\n\";\n                if ($sum % 3 == 0) {\n     \
    \               $result++;\n                }\n            }\n        }\n    }\n\
    \    return $result;\n}", "    my $tot = 0;\n    for (my $i = 1; $i < $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($i*$i - $i + 1 + $j*$j - $j + 1\
    \ + $k*$k - $k + 1) % 3 == 0) {\n                    $tot++;\n               \
    \ }\n            }\n        }\n    }\n    return $tot;\n}", "    # Write your\
    \ code here\n    my $sum = 0;\n    my $sum_divided_by_3 = 0;\n    my $sum_n =\
    \ $n;\n    while ($sum_n > 0) {\n        $sum += $sum_n;\n        $sum_n--;\n\
    \    }\n    $sum_divided_by_3 = $sum / 3;\n    my $num_divided_by_3 = 0;\n   \
    \ for (my $i = $n; $i > 0; $i--) {\n        if ($i % 3 == 0) {\n            $num_divided_by_3++;\n\
    \        }\n    }\n    my $num_triple = $num_divided_by_3 * $sum_divided_by_3;\n\
    \    return $num_triple;\n}", "    # Write your code here\n    my @array;\n  \
    \  my $count = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        push(@array,\
    \ $i * $i - $i + 1);\n    }\n    for (my $i = 0; $i < $n - 2; $i++) {\n      \
    \  for (my $j = $i + 1; $j < $n - 1; $j++) {\n            for (my $k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($array[$i] + $array[$j] + $array[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my @a = map { $_ * $_ - $_ + 1\
    \ } (1..$n);\n    my $count = 0;\n    for (my $i = 0; $i < $n - 2; $i++) {\n \
    \       for (my $j = $i + 1; $j < $n - 1; $j++) {\n            for (my $k = $j\
    \ + 1; $k < $n; $k++) {\n                $count++ if ($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0;\n            }\n        }\n    }\n    return $count;\n}", "    my\
    \ @nums = ();\n    for(my $i = 1; $i <= $n; $i++){\n        push(@nums, i * i\
    \ - i + 1);\n    }\n    my $count = 0;\n    for(my $i = 0; $i < $n - 2; $i++){\n\
    \        for(my $j = $i + 1; $j < $n - 1; $j++){\n            for(my $k = $j +\
    \ 1; $k < $n; $k++){\n                if(($nums[$i] + $nums[$j] + $nums[$k]) %\
    \ 3 == 0){\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my $a_ref = [];\n    for my $i\
    \ (0..$n-1) {\n        push @$a_ref, $i*$i - $i + 1;\n    }\n    my $num_triples\
    \ = 0;\n    for my $i (0..$n-3) {\n        for my $j ($i+1..$n-2) {\n        \
    \    for my $k ($j+1..$n-1) {\n                if (($a_ref->[$i] + $a_ref->[$j]\
    \ + $a_ref->[$k]) % 3 == 0) {\n                    $num_triples++;\n         \
    \       }\n            }\n        }\n    }\n    return $num_triples;\n}", "  \
    \  my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    my @b = (0) x $n;\n    my $count\
    \ = 0;\n    for my $i (1..$n) {\n        for my $j ($i+1..$n) {\n            my\
    \ $k = $j + 1;\n            while ($k <= $n && !(($a[$i] + $a[$j] + $a[$k]) %\
    \ 3)) {\n                $count++;\n                $k++;\n            }\n   \
    \     }\n    }\n    return $count;\n}", "    my @a = map { $_ * $_ - $_ + 1 }\
    \ (1..$n);\n    my $count = 0;\n    for my $i (0..$#a-2) {\n        for my $j\
    \ ($i+1..$#a-1) {\n            for my $k ($j+1..$#a) {\n                $count++\
    \ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n            }\n        }\n    }\n \
    \   return $count;\n}", "    my $sum;\n    my $count = 0;\n    for (my $i = 1;\
    \ $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n          \
    \  for (my $k = $j + 1; $k < $n; $k++) {\n                $sum = $i * $i - $i\
    \ + 1 + $j * $j - $j + 1 + $k * $k - $k + 1;\n                $count++ if $sum\
    \ % 3 == 0;\n            }\n        }\n    }\n    return $count;\n}", "    my\
    \ $cnt = 0;\n    for my $i (1..$n-2) {\n        for my $j ($i+1..$n-1) {\n   \
    \         for my $k ($j+1..$n) {\n                $cnt++ if ($i*$i - $i + 1 +\
    \ $j*$j - $j + 1 + $k*$k - $k + 1) % 3 == 0;\n            }\n        }\n    }\n\
    \    return $cnt;\n}", "    my @array;\n    my $result = 0;\n    for(my $i = 1;\
    \ $i <= $n; $i++) {\n        push @array, $i * $i - $i + 1;\n    }\n    for(my\
    \ $i = 0; $i < $n - 2; $i++) {\n        for(my $j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for(my $k = $j + 1; $k < $n; $k++) {\n                if(($array[$i]\
    \ + $array[$j] + $array[$k]) % 3 == 0) {\n                    $result++;\n   \
    \             }\n            }\n        }\n    }\n    return $result;\n}", " \
    \   my $sum = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = $i\
    \ + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n \
    \               if (($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) %\
    \ 3 == 0) {\n                    $sum++;\n                }\n            }\n \
    \       }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1;\
    \ $i < $n - 1; $i++) {\n        my $a = $i * $i - $i + 1;\n        for (my $j\
    \ = $i + 1; $j < $n; $j++) {\n            my $b = $j * $j - $j + 1;\n        \
    \    for (my $k = $j + 1; $k <= $n; $k++) {\n                my $c = $k * $k -\
    \ $k + 1;\n                $sum++ if ($a + $b + $c) % 3 == 0;\n            }\n\
    \        }\n    }\n    return $sum;\n}", "    my $count=0;\n    my @a;\n    for(my\
    \ $i=1;$i<=$n;$i++){\n        push(@a,($i*$i)-$i+1);\n    }\n    for(my $i=0;$i<scalar(@a);$i++){\n\
    \        for(my $j=$i+1;$j<scalar(@a);$j++){\n            for(my $k=$j+1;$k<scalar(@a);$k++){\n\
    \                if(($a[$i]+$a[$j]+$a[$k])%3==0){\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   # Return the number of triples\n    my $count = 0;\n    my @a = ();\n    for(my\
    \ $i = 1; $i <= $n; $i++) {\n        push(@a, $i * $i - $i + 1);\n    }\n    #\
    \ print join(' ', @a) . \"\\n\";\n    for(my $i = 0; $i < $n - 2; $i++) {\n  \
    \      for(my $j = $i + 1; $j < $n - 1; $j++) {\n            for(my $k = $j +\
    \ 1; $k < $n; $k++) {\n                # print \"($a[$i], $a[$j], $a[$k])\\n\"\
    ;\n                if(($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n               \
    \     $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    my @res;\n\
    \    for my $i (0..$#a) {\n        for my $j ($i+1..$#a) {\n            for my\
    \ $k ($j+1..$#a) {\n                push @res, [$a[$i], $a[$j], $a[$k]] if ($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0;\n            }\n        }\n    }\n    return scalar\
    \ @res;\n}", "    my $res = 0;\n    for (my $i = 1; $i < $n - 1; $i++) {\n   \
    \     my $a_i = $i * $i - $i + 1;\n        if ($a_i % 3 == 0) {\n            $res\
    \ += ($n - $i - 1);\n        }\n    }\n    return $res;\n}", "    my $count =\
    \ 0;\n    for (my $i = 1; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j\
    \ < $n; $j++) {\n            for (my $k = $j + 1; $k <= $n; $k++) {\n        \
    \        if (($i*$i - $i + 1 + $j*$j - $j + 1 + $k*$k - $k + 1) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}", "    my $total = 0;\n    for my $j (2 .. $n-1)\
    \ {\n        my $num_pre = ($j-1)*($j-2)/2;\n        $total += $num_pre;\n   \
    \ }\n    return $total;\n}", "    my @a = (1);\n    for (my $i = 1; $i < $n; $i++)\
    \ {\n        push @a, ($i * $i - $i + 1);\n    }\n    my $cnt = 0;\n    for (my\
    \ $i = 0; $i < $n - 2; $i++) {\n        for (my $j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $cnt++;\n              \
    \  }\n            }\n        }\n    }\n    return $cnt;\n}", "    my($c,$sum,$a,$b,$c);\n\
    \    for(my $a=1;$a<$n;$a++){\n        for(my $b=$a+1;$b<$n;$b++){\n         \
    \   for(my $c=$b+1;$c<$n;$c++){\n                $sum = get_sequence_value($a)\
    \ + get_sequence_value($b) + get_sequence_value($c);\n                if($sum\
    \ % 3 == 0){\n                    $c++;\n                }\n            }\n  \
    \      }\n    }\n    return $c;\n}", "    my $count = 0;\n    for (my $i = 1;\
    \ $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n          \
    \  if (($i * $i - $i + 1 + $j * $j - $j + 1) % 3 == 0) {\n                for\
    \ (my $k = $j + 1; $k < $n; $k++) {\n                    if (($i * $i - $i + 1\
    \ + $j * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n                       \
    \ $count++;\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return $count;\n}", "    my $counter = 0;\n    my @nums = ();\n\
    \    # TODO: implement this method\n    for (my $i = 1; $i <= $n; $i++) {\n  \
    \      my $tmp = $i * $i - $i + 1;\n        push @nums, $tmp;\n    }\n    for\
    \ (my $i = 0; $i < scalar @nums; $i++) {\n        for (my $j = $i + 1; $j < scalar\
    \ @nums; $j++) {\n            for (my $k = $j + 1; $k < scalar @nums; $k++) {\n\
    \                if (($nums[$i] + $nums[$j] + $nums[$k]) % 3 == 0) {\n       \
    \             $counter++;\n                }\n            }\n        }\n    }\n\
    \    return $counter;\n}", "    my @a = map {$_ * $_ - $_ + 1} (1..$n);\n    my\
    \ $triples = 0;\n    for my $i (0..$#a) {\n        for my $j ($i+1..$#a) {\n \
    \           for my $k ($j+1..$#a) {\n                $triples++ if $a[$i] + $a[$j]\
    \ + $a[$k] % 3 == 0;\n            }\n        }\n    }\n    return $triples;\n}",
  "    my @a = ();\n    for (my $i = 1; $i <= $n; $i++) {\n        push @a, $i * $i\
    \ - $i + 1;\n    }\n    my $count = 0;\n    for (my $i = 0; $i < $n - 2; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n - 1; $j++) {\n            for (my $k\
    \ = $j + 1; $k < $n; $k++) {\n                if(($a[$i] + $a[$j] + $a[$k]) %\
    \ 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $i\
    \ (1..$n-2) {\n        for my $j ($i+1..$n-1) {\n            for my $k ($j+1..$n)\
    \ {\n                $count++ if ($i*$i - $i + 1 + $j*$j - $j + 1 + $k*$k - $k\
    \ + 1) % 3 == 0;\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my $res = 0;\n    my $a = [map { $res += $_ - 1; $res + 1 } (1..$n)];\n  \
    \  return $res;\n}", "    my $count = 0;\n    for (my $i = 1; $i < $n - 1; $i++)\
    \ {\n        my $a = $i * $i - $i + 1;\n        for (my $j = $i + 1; $j < $n;\
    \ $j++) {\n            my $b = $j * $j - $j + 1;\n            for (my $k = $j\
    \ + 1; $k <= $n; $k++) {\n                my $c = $k * $k - $k + 1;\n        \
    \        $count++ if ($a + $b + $c) % 3 == 0;\n            }\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for my $i (0..$n-3) {\n    \
    \    for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1) {\n        \
    \        $count++ if ($i+$j+$k) % 3 == 0;\n            }\n        }\n    }\n \
    \   return $count;\n}", "    my $count = 0;\n    for my $i (1..$n-2) {\n     \
    \   for my $j ($i+1..$n-1) {\n            for my $k ($j+1..$n) {\n           \
    \     if (($i*$i-$i+1+$j*$j-$j+1+$k*$k-$k+1) % 3 == 0) {\n                   \
    \ $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }", "    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    my $count = 0;\n    for\
    \ my $i (0..$#a) {\n        for my $j ($i+1..$#a) {\n            for my $k ($j+1..$#a)\
    \ {\n                $count++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n      \
    \      }\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n    my\
    \ @a = (1);\n    for (my $i = 1; $i < $n; $i++) {\n        $a[$i] = $i * $i -\
    \ $i + 1;\n        for (my $j = $i - 1; $j >= 0; $j--) {\n            if ($a[$i]\
    \ + $a[$j] >= $a[$j - 1]) {\n                $count++;\n            }\n      \
    \  }\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $i (1..$n-2)\
    \ {\n        for my $j ($i+1..$n-1) {\n            for my $k ($j+1..$n) {\n  \
    \              if (($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) %\
    \ 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    my @nums =\
    \ ();\n    # Generate values of the array\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        push(@nums, $i * $i - $i + 1);\n    }\n    # Since the array is sorted,\
    \ you can use 3 pointers to check\n    # if the sum of 3 elements is a multiple\
    \ of 3\n    for (my $i = 0; $i < $n - 2; $i++) {\n        my $j = $i + 1;\n  \
    \      my $k = $j + 1;\n        while ($j < $n - 1) {\n            while ($k <\
    \ $n) {\n                my $sum = $nums[$i] + $nums[$j] + $nums[$k];\n      \
    \          if ($sum % 3 == 0) {\n                    $count++;\n             \
    \   }\n                $k++;\n            }\n            $j++;\n            $k\
    \ = $j + 1;\n        }\n    }\n    return $count;\n}", "    my $ret = 0;\n   \
    \ my @a = map {$_ * $_ - $_ + 1} (1..$n);\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $ret++;\n                }\n            }\n      \
    \  }\n    }\n    return $ret;\n}", "    my $res = 0;\n    my @a = map {$_ * $_\
    \ - $_ + 1} (1..$n);\n    for my $i (0..$n-3) {\n        for my $j ($i+1..$n-2)\
    \ {\n            for my $k ($j+1..$n-1) {\n                if ($a[$i] + $a[$j]\
    \ + $a[$k] % 3 == 0) {\n                    $res++;\n                }\n     \
    \       }\n        }\n    }\n    return $res;\n}", "    # Write your code here\n\
    \    # To print results to the standard output you can use print\n    # Example:\n\
    \    # print \"Hello world!\\n\";\n}", "    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n\
    \    my $ans = 0;\n    for my $i (0..$#a) {\n        for my $j ($i + 1..$#a) {\n\
    \            for my $k ($j + 1..$#a) {\n                $ans++ if ($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0;\n            }\n        }\n    }\n    return $ans;\n}",
  "    my @a = ();\n    my $ret = 0;\n    my $count = 0;\n    for(my $i = 1; $i <=\
    \ $n; $i++) {\n        push(@a, $i * $i - $i + 1);\n    }\n    for(my $i = 0;\
    \ $i < $n - 2; $i++) {\n        for(my $j = $i + 1; $j < $n - 1; $j++) {\n   \
    \         for(my $k = $j + 1; $k < $n; $k++) {\n                if(($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0) {\n                    $ret++;\n                }\n    \
    \        }\n        }\n    }\n    return $ret;\n}", "    my $j = 1;\n    my $k\
    \ = 2;\n    my $count = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        my $a\
    \ = $i * $i - $i + 1;\n        $j = $i + 1;\n        $k = $j + 1;\n        for\
    \ (; $j < $n; $j++) {\n            my $b = $j * $j - $j + 1;\n            $k =\
    \ $j + 1;\n            for (; $k < $n; $k++) {\n                my $c = $k * $k\
    \ - $k + 1;\n                if (($a + $b + $c) % 3 == 0) {\n                \
    \    print \"$a + $b + $c\\n\";\n                    $count++;\n             \
    \   }\n            }\n        }\n    }\n    return $count;\n}", "    $n = int\
    \ $n;\n    my $c = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j\
    \ = $i + 1; $j < $n; $j++) {\n            my $triple = 1 + $i * $i - $i + 1;\n\
    \            $triple += 1 + $j * $j - $j + 1;\n            my $k = $j + 1;\n \
    \           while ($k < $n) {\n                $triple += 1 + $k * $k - $k + 1;\n\
    \                if ($triple % 3 == 0) {\n                    $c++;\n        \
    \        }\n                $k++;\n            }\n        }\n    }\n    return\
    \ $c;\n}", "    my $count = 0;\n    for(my $i = 1; $i < $n - 1; $i++) {\n    \
    \    for(my $j = $i + 1; $j < $n; $j++) {\n            if(($i + $j) % 3 == 0)\
    \ {\n                my $k = ($i + $j) / 3;\n                if($k <= $n && $k\
    \ > $j) {\n                    $count += 1;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my $sum;\n    my $count = 0;\n\
    \    for (my $i = 1; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            $sum = $i * $i - $i + 1 + $j * $j - $j + 1;\n            for\
    \ (my $k = $j + 1; $k < $n; $k++) {\n                if ($sum + $k * $k - $k +\
    \ 1 % 3 == 0) {\n                    $count++;\n                }\n          \
    \  }\n        }\n    }\n    return $count;\n}", '    my @a = (0, 1);', "    my\
    \ $count = 0;\n    my @a = ();\n    # Write your code here\n    for(my $i = 1;\
    \ $i <= $n; $i++) {\n        push(@a, $i * $i - $i + 1);\n    }\n    for(my $i\
    \ = 0; $i < $n - 2; $i++) {\n        for(my $j = $i + 1; $j < $n - 1; $j++) {\n\
    \            for(my $k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}", "    my @a =\
    \ map { $_ * $_ - $_ + 1 } (1..$n);\n    my $max_triples = 0;\n    for my $i (0..$#a)\
    \ {\n        for my $j ($i+1..$#a) {\n            for my $k ($j+1..$#a) {\n  \
    \              my $triple = $a[$i] + $a[$j] + $a[$k];\n                $max_triples++\
    \ if $triple % 3 == 0;\n            }\n        }\n    }\n    return $max_triples;\n\
    }", "    my @a = ();\n    for (my $i = 1; $i <= $n; $i++) {\n        push @a,\
    \ ($i * $i - $i + 1);\n    }\n    my $cnt = 0;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $cnt++;\n                }\n            }\n      \
    \  }\n    }\n    return $cnt;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <\
    \ $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for\
    \ (my $k = $j + 1; $k < $n; $k++) {\n                if (($i * $i - $i + 1 + $j\
    \ * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n                    $sum++;\n\
    \                }\n            }\n        }\n    }\n    return $sum;\n}", " \
    \   my @a = (1);\n    for (my $i = 1; $i < $n; $i++) {\n        $a[$i] = $i *\
    \ $i - $i + 1;\n    }\n    # Consecutive multiple of 3\n    my @sum_triples =\
    \ (0, 0, 0);\n    my $sum = 0;\n    my $k = 0;\n    foreach (@a) {\n        $sum\
    \ += $_;\n        $sum_triples[$k] += 1;\n        $k = ($k + 1) % 3;\n    }\n\
    \    my $res = $sum_triples[0] * $sum_triples[1] * $sum_triples[2];\n    print\
    \ \"a = [\", join(\", \", @a), \"]\\n\";\n    print \"sum_triples = [\", join(\"\
    , \", @sum_triples), \"]\\n\";\n    return $res;\n}", "    # Return the number\
    \ of triples of a where i < j < k, \n    # and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n    return 3;\n}", "    # Write your code here\n    my $sum = 0;\n  \
    \  for (my $i = 1; $i < $n - 1; $i++) {\n        for (my $j = $i + 1; $j < $n;\
    \ $j++) {\n            for (my $k = $j + 1; $k <= $n; $k++) {\n              \
    \  my $a_i = $i * $i - $i + 1;\n                my $a_j = $j * $j - $j + 1;\n\
    \                my $a_k = $k * $k - $k + 1;\n                $sum++ if ($a_i\
    \ + $a_j + $a_k) % 3 == 0;\n            }\n        }\n    }\n    return $sum;\n\
    }\n1;", "    my $sum = 0;\n    my $count = 0;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        $sum += ($i + 1) * ($i + 1) - ($i + 1) + 1;\n        if ($sum % 3\
    \ == 0) {\n            $count++;\n        }\n    }\n    return $count;\n}", " \
    \   my $triples = 0;\n    my @a = map { my $i = $_; $i * $i - $i + 1 } (1..$n);\n\
    \    for my $i (0..$#a) {\n        for my $j ($i+1..$#a) {\n            for my\
    \ $k ($j+1..$#a) {\n                $triples++ if ($a[$i] + $a[$j] + $a[$k]) %\
    \ 3 == 0;\n            }\n        }\n    }\n    return $triples;\n}", "    my\
    \ @a = (1);\n    my $sum = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        $a[$i]\
    \ = $i * $i - $i + 1;\n        if (($a[$i - 1] + $a[$i]) % 3 == 0) {\n       \
    \     $sum++;\n        }\n    }\n    return $sum;\n}", "    my @a = (1);\n   \
    \ for (2..$n) {\n        push @a, $_*$_ - $_ + 1;\n    }\n    print \"@a\\n\"\
    ;\n    my $count = 0;\n    for my $i (0..$#a) {\n        my $a = $a[$i];\n   \
    \     for my $j ($i+1..$#a) {\n            my $b = $a[$j];\n            for my\
    \ $k ($j+1..$#a) {\n                my $c = $a[$k];\n                if (($a +\
    \ $b + $c) % 3 == 0) {\n                    print \"$a $b $c\\n\";\n         \
    \           $count++;\n                }\n            }\n        }\n    }\n  \
    \  return $count;\n}", "    my $triples = 0;\n    for my $i (0..$n-3) {\n    \
    \    for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1) {\n        \
    \        if (($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0)\
    \ {\n                    $triples++;\n                }\n            }\n     \
    \   }\n    }\n    return $triples;\n}", "    my $triples = 0;\n    for (my $i\
    \ = 1; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n     \
    \       for (my $k = $j + 1; $k < $n; $k++) {\n                my $x = $i * $i\
    \ - $i + 1;\n                my $y = $j * $j - $j + 1;\n                my $z\
    \ = $k * $k - $k + 1;\n                if (($x + $y + $z) % 3 == 0) {\n      \
    \              # print \"($x, $y, $z)\\n\";\n                    $triples++;\n\
    \                }\n            }\n        }\n    }\n    return $triples;\n}",
  "    my($res) = 0;\n    for (my($i) = 1; $i < $n; $i++) {\n        for (my($j) =\
    \ $i + 1; $j < $n; $j++) {\n            for (my($k) = $j + 1; $k < $n; $k++) {\n\
    \                my($x) = $i * $i - $i + 1;\n                my($y) = $j * $j\
    \ - $j + 1;\n                my($z) = $k * $k - $k + 1;\n                if ($x\
    \ + $y + $z % 3 == 0) {\n                    $res++;\n                }\n    \
    \        }\n        }\n    }\n    return $res;\n}", "    my $count = 0;\n    my\
    \ @a = ();\n    for (my $i = 1; $i <= $n; $i++) {\n        push @a, $i * $i -\
    \ $i + 1;\n    }\n    for (my $i = 0; $i < $n - 2; $i++) {\n        for (my $j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++)\
    \ {\n                $count++ if ($a[$i] + $a[$j] + $a[$k]) % 3 == 0;\n      \
    \      }\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n    my\
    \ @a = ();\n    for(my $i = 1; $i <= $n; $i++) {\n        push(@a, $i * $i - $i\
    \ + 1);\n    }\n    for(my $i = 0; $i < scalar(@a); $i++) {\n        for(my $j\
    \ = $i + 1; $j < scalar(@a); $j++) {\n            for(my $k = $j + 1; $k < scalar(@a);\
    \ $k++) {\n                if(($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n       \
    \             $count++;\n                }\n            }\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for my $i (0..$n-3) {\n    \
    \    for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1) {\n        \
    \        if (($i+1)*($i+1)-($i+1)+1 + ($j+1)*($j+1)-($j+1)+1 + ($k+1)*($k+1)-($k+1)+1)\
    \ % 3 == 0 {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my $triples = 0;\n    for my $i\
    \ (0..$n-3) {\n        for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1)\
    \ {\n                my $a = $i+1;\n                my $b = $j+1;\n          \
    \      my $c = $k+1;\n                $triples++ if (($a*$a-$a+1) + ($b*$b-$b+1)\
    \ + ($c*$c-$c+1)) % 3 == 0;\n            }\n        }\n    }\n    return $triples;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
