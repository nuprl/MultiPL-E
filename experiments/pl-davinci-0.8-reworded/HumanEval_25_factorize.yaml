name: HumanEval_25_factorize
language: pl
prompt: "# Return array of prime factors of given integer in the order from smallest\
  \ to largest.\n# Each of the factors should be arrayed number of times corresponding\
  \ to how many times it appeares in factorization.\n# Input number should be equal\
  \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
  # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\nsub factorize {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&factorize;\n\
  \        if(eq_deeply($candidate->(2),[2])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(4),[2, 2])) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[2,\
  \ 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(57),[3,\
  \ 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3249),[3,\
  \ 3, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20577),[3,\
  \ 19, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(18),[2, 3, 3])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    my $divisor = 2;\n    while ($n > 1) {\n     \
    \   if ($n % $divisor == 0) {\n            push @result, $divisor;\n         \
    \   $n /= $divisor;\n        } else {\n            $divisor++;\n        }\n  \
    \  }\n    return @result;\n}", "    my @out;\n    while ($n % 2 == 0) {\n    \
    \    push @out, 2;\n        $n /= 2;\n    }\n    for (my $i = 3; $i <= $n; $i\
    \ += 2) {\n        while ($n % $i == 0) {\n            push @out, $i;\n      \
    \      $n /= $i;\n        }\n    }\n    return @out;\n}", "    my @factors;\n\
    \    #todo\n    return @factors;\n}", "    my $d = 2;\n    my @factors;\n    while\
    \ ($n > 1) {\n        if ($n % $d == 0) {\n            push @factors, $d;\n  \
    \          $n /= $d;\n        } else {\n            $d += 1;\n        }\n    }\n\
    \    return @factors;\n}", "    my @res;\n    for my $i (2..int(sqrt($n))) {\n\
    \        while ($n % $i == 0) {\n            push @res, $i;\n            $n /=\
    \ $i;\n        }\n    }\n    if ($n > 1) {\n        push @res, $n;\n    }\n  \
    \  return @res;\n}", "    my @ret;\n    # your code here\n    return @ret;\n}",
  "    my @result;\n    foreach my $i (2..$n) {\n        while($n % $i == 0) {\n \
    \           push @result, $i;\n            $n /= $i;\n        }\n    }\n    return\
    \ @result;\n}", "    my @a;\n    my $factor;\n    my $is_factor;\n    $factor\
    \ = 2;\n    while ($n > 1) {\n        $is_factor = 0;\n        while ($n % $factor\
    \ == 0) {\n            $is_factor = 1;\n            $n /= $factor;\n        }\n\
    \        if ($is_factor) {\n            push @a, $factor;\n        }\n       \
    \ $factor += 1;\n    }\n    return @a;\n}", "    my @f;\n    for ( my $i = 2;\
    \ $i <= sqrt($n); $i++ ) {\n        if ( $n % $i == 0 ) {\n            my $num_divisors\
    \ = 0;\n            while ( $n % $i == 0 ) {\n                $num_divisors++;\n\
    \                $n /= $i;\n            }\n            push @f, ($i) x $num_divisors;\n\
    \        }\n    }\n    push @f, $n if $n > 1;\n    return @f;\n}", "    die \"\
    Please provide integer greater than 1\" if $n < 2;\n    my @factors;\n    for\
    \ my $div (2..$n) {\n        while ($n % $div == 0) {\n            push @factors,\
    \ $div;\n            $n /= $div;\n        }\n    }\n    die \"Something went wrong\
    \ with factorization\" if $n != 1;\n    return @factors;\n}", "    # your code\
    \ here\n}", "    my @factors;\n    my $test = 2;\n    while ($n > 1) {\n     \
    \   if ($n % $test == 0) {\n            push @factors, $test;\n            $n\
    \ /= $test;\n        } else {\n            $test++;\n        }\n    }\n    return\
    \ @factors;\n}", "    # Trivial case: '1' has no factors.\n    if ($n == 1) {\n\
    \        return ();\n    }\n    my @factors;\n    # Test if $n is a prime.\n \
    \   if (is_prime($n)) {\n        return ($n);\n    }\n    # See if n is divisible\
    \ by a prime (starting with 2).\n    my $prime_index = 0;\n    while ($n > 1)\
    \ {\n        my $prime = nth_prime($prime_index);\n        if ($n % $prime ==\
    \ 0) {\n            # If it is, add it to the list of factors and divide $n by\
    \ $prime.\n            push @factors, $prime;\n            $n /= $prime;\n   \
    \     } else {\n            # Otherwise, increment index and try the next prime.\n\
    \            $prime_index++;\n        }\n    }\n    return @factors;\n}", "  \
    \  my @factors;\n    my $divisor = 2;\n    while ($n > 1) {\n        if ($n %\
    \ $divisor == 0) {\n            push @factors, $divisor;\n            $n /= $divisor;\n\
    \        } else {\n            $divisor += 1;\n        }\n    }\n    return @factors;\n\
    }", "    my @factors;\n    while ($n % 2 == 0) {\n        push @factors, 2;\n\
    \        $n /= 2;\n    }\n    for (my $i = 3; $i <= sqrt($n); $i += 2) {\n   \
    \     while ($n % $i == 0) {\n            push @factors, $i;\n            $n /=\
    \ $i;\n        }\n    }\n    if ($n > 2) {\n        push @factors, $n;\n    }\n\
    \    return @factors;\n}", '    return () if $n == 1;', "    my @factors;\n  \
    \  while($n > 1) {\n        for(my $i = 2; $i <= $n; $i++) {\n            if($n\
    \ % $i == 0) {\n                push @factors, $i;\n                $n /= $i;\n\
    \                last;\n            }\n        }\n    }\n    return @factors;\n\
    }", "    my @factors;\n    my $primes = primes();\n    foreach my $p (@$primes)\
    \ {\n        if ($n == 1) {\n            last;\n        }\n        if ($n % $p\
    \ == 0) {\n            push @factors, $p;\n            $n /= $p;\n        }\n\
    \    }\n    return @factors;\n}", "    my @factors;\n    my $factor = 2;\n   \
    \ while($n > 1) {\n        if ($n % $factor == 0) {\n            push @factors,\
    \ $factor;\n            $n /= $factor;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    return @factors;\n}", "    my @factors;\n    while ($n\
    \ % 2 == 0) {\n        push @factors, 2;\n        $n /= 2;\n    }\n    my $divisor\
    \ = 3;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   push @factors, $divisor;\n            $n /= $divisor;\n        }\n       \
    \ $divisor += 2;\n    }\n    return @factors;\n}", "    my @result;\n    for my\
    \ $p (@primes) {\n        if ($p * $p > $n) {\n            push @result, $n;\n\
    \            last;\n        }\n        my $mult = 0;\n        for (;;) {\n   \
    \         last if $n % $p;\n            $n /= $p;\n            $mult++;\n    \
    \    }\n        push @result, ($p) x $mult if $mult;\n    }\n    return @result;\n\
    }", "    my @factors;\n    while ($n > 1) {\n        # find smallest factor\n\
    \        my $factor = smallest_factor($n);\n        # collect it\n        push\
    \ @factors, $factor;\n        # eliminate it from n\n        $n /= $factor;\n\
    \    }\n    return @factors;\n}", "    my(@r);\n    my $p = 2;\n    for (; $p\
    \ * $p <= $n; $p++){\n        if ($n % $p == 0){\n            push @r, $p;\n \
    \           $n /= $p;\n            $p--;\n        }\n    }\n    push @r, $n;\n\
    \    return @r;\n}", "    my @factors;\n    foreach my $divisor (2..int(sqrt($n)))\
    \ {\n        while( $n % $divisor == 0 ) {\n            push @factors, $divisor;\n\
    \            $n /= $divisor;\n        }\n    }\n    push @factors, $n;\n    return\
    \ @factors;\n}", "    my @factors;\n    my $f = 2;\n    while($n != 1) {\n   \
    \     my $r = $n % $f;\n        if($r == 0) {\n            push @factors, $f;\n\
    \            $n /= $f;\n        } else {\n            $f++;\n        }\n    }\n\
    \    return @factors;\n}", "    my @f = ();\n    while($n % 2 == 0) {\n      \
    \  push @f, 2;\n        $n /= 2;\n    }\n    my $i = 3;\n    while($i <= $n) {\n\
    \        if($n % $i == 0) {\n            push @f, $i;\n            $n /= $i;\n\
    \        } else {\n            $i += 2;\n        }\n    }\n    return @f;\n}",
  "    my @factors;\n    my $prime = 2;\n    while($n > 1) {\n        if($n % $prime\
    \ == 0) {\n            push @factors, $prime;\n            $n /= $prime;\n   \
    \     } else {\n            $prime++;\n        }\n    }\n    return @factors;\n\
    }", "    my @factors;\n    while ($n % 2 == 0) {\n        push @factors, 2;\n\
    \        $n /= 2;\n    }\n    for (my $i = 3; $i * $i <= $n; $i += 2) {\n    \
    \    while ($n % $i == 0) {\n            push @factors, $i;\n            $n /=\
    \ $i;\n        }\n    }\n    if ($n > 2) {\n        push @factors, $n;\n    }\n\
    \    return @factors;\n}", "    my @factors;\n    for my $i (2..$n) {\n      \
    \  while($n % $i == 0) {\n            push @factors, $i;\n            $n /= $i;\n\
    \        }\n    }\n    return @factors;\n}", "    my @factors;\n    my $i;\n \
    \   for ($i = 2; $i <= $n; ++$i) {\n        next unless $n % $i == 0;\n      \
    \  push @factors, $i;\n        $n /= $i;\n        redo;\n    }\n    return @factors;\n\
    }", "    my $sqrt = sqrt($n);\n    my @ret = ();\n    while (1) {\n        my\
    \ $fact = first { $n % $_ == 0 } 2..$sqrt;\n        last unless $fact;\n     \
    \   push @ret, $fact;\n        $n /= $fact;\n    }\n    if ($n > 1) {\n      \
    \  push @ret, $n;\n    }\n    return @ret;\n}", "    my @res;\n    while (1) {\n\
    \        if ($n <= 1) {\n            return @res;\n        }\n        elsif (is_prime($n))\
    \ {\n            push @res, $n;\n            return @res;\n        }\n       \
    \ else {\n            my $min_div = min_divisor($n);\n            push @res, $min_div;\n\
    \            $n /= $min_div;\n        }\n    }\n}", "    my @factors;\n    my\
    \ $div = 2;\n    while ($n > 1) {\n        while ($n % $div == 0) {\n        \
    \    push @factors, $div;\n            $n /= $div;\n        }\n        $div +=\
    \ 1;\n    }\n    return @factors;\n}", "    my @a;\n    my $i = 2;\n    while\
    \ ($n > 1) {\n        if ($n % $i == 0) {\n            push @a, $i;\n        \
    \    $n /= $i;\n        } else {\n            $i += 1;\n        }\n    }\n   \
    \ return @a;\n}", "    my @factors;\n    for my $p (@primes) {\n        last if\
    \ $p*$p > $n;\n        if ( $n % $p == 0 ) {\n            push @factors, $p;\n\
    \            $n /= $p;\n        }\n    }\n    push @factors, $n if $n > 1;\n \
    \   return @factors;\n}", "    my @f;\n    while ($n % 2 == 0) {\n        push\
    \ @f, 2;\n        $n /= 2;\n    }\n    my $p = 3;\n    while ($n > 1) {\n    \
    \    while ($n % $p == 0) {\n            push @f, $p;\n            $n /= $p;\n\
    \        }\n        $p += 2;\n    }\n    return @f;\n}", "    return [] if $n\
    \ == 1;\n    my @primes = grep {is_prime($_)} (2..$n);\n    return [$n] if scalar\
    \ @primes == 0;\n    my @factors;\n    push @factors, $primes[0] while $n % $primes[0]\
    \ == 0;\n    push @factors, @{factorize($n / $primes[0])};\n    return \\@factors;\n\
    }", "    #TODO: write code here\n    my @sieve = sieve($n);\n    my @factors;\n\
    \    #my $i = 0;\n    #my $factor;\n    while ($n > 1) {\n        for (@sieve)\
    \ {\n            if ($n % $_ == 0) {\n                push(@factors, $_);\n  \
    \              $n /= $_;\n                last;\n            }\n        }\n  \
    \  }\n    return @factors;\n}", "    my @factors;\n    for (my $p = 2; $p <= $n;\
    \ $p++) {\n        my $count = 0;\n        while ($n % $p == 0) {\n          \
    \  $count++;\n            $n /= $p;\n        }\n        push @factors, ($p) x\
    \ $count if $count > 0;\n    }\n    return @factors;\n}", "    my @factors;\n\
    \    for (my $d = 2; $d <= $n; $d++) {\n        while ($n % $d == 0) {\n     \
    \       push @factors, $d;\n            $n /= $d;\n        }\n    }\n    return\
    \ @factors;\n}", "    my @prime_factors;\n    my $i = 2;\n    while (1) {\n  \
    \      if ($n % $i == 0) {\n            $n /= $i;\n            push @prime_factors,\
    \ $i;\n        } else {\n            $i++;\n        }\n        last if $n == 1;\n\
    \    }\n    return @prime_factors;\n}", "    my @factors;\n    for my $p (@PRIMES)\
    \ {\n        push @factors, $p for 1..int($n/$p);\n        last if $n < $p**2;\n\
    \    }\n    @factors;\n}", "    my @factors;\n    while ($n % 2 == 0) {\n    \
    \    push @factors, 2;\n        $n /= 2;\n    }\n    my $div = 3;\n    while ($n\
    \ > 1) {\n        while ($n % $div == 0) {\n            push @factors, $div;\n\
    \            $n /= $div;\n        }\n        $div += 2;\n    }\n    return @factors;\n\
    }", "    my @factors;\n    for my $factor (2 .. $n) {\n        next unless $n\
    \ % $factor == 0;", "    my $i = 2;\n    my @result;\n    while ($n > 1) {\n \
    \       while ($n % $i == 0) {\n            push @result, $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return @result;\n}", "    return\
    \ [] if $n == 1;\n    my @factors;\n    for my $f (2..$n) {\n        if ($n %\
    \ $f == 0) {\n            push @factors, $f;\n            my @sub_factors = factorize($n\
    \ / $f);\n            push @factors, @sub_factors;\n            last;\n      \
    \  }\n    }\n    return @factors;\n}", "    my @factors;\n    # Sieve of Eratosthenes\
    \ to get all primes less than n\n    my @nums = (1..$n);\n    # first $n numbers\n\
    \    @nums[0..$n] = (); # cross them out\n    # while there are more than 2 numbers\n\
    \    while (@nums > 2) {\n        # first prime number is the first number not\
    \ crossed out\n        my $i = shift @nums;\n        # cross out all numbers that\
    \ are multiples of $i\n        @nums = grep {$_ % $i} @nums;\n    }\n    my @primes\
    \ = @nums;\n    # if $n is prime, done\n    return $n if @primes == 1;\n    #\
    \ else, factorize\n    my $cur_factor = shift @primes;\n    while ($n > 1) {\n\
    \        if ($n % $cur_factor == 0) {\n            push @factors, $cur_factor;\n\
    \            $n /= $cur_factor;\n        } else {\n            $cur_factor = shift\
    \ @primes;\n        }\n    }\n    @factors;\n}", "    my @factors;\n    for (my\
    \ $divisor = 2; $divisor <= $n; ++$divisor) {\n        while ($n % $divisor ==\
    \ 0) {\n            push @factors, $divisor;\n            $n /= $divisor;\n  \
    \      }\n    }\n    @factors;\n}", "    my @f = ();\n    for (my $i = 2; $i <=\
    \ $n; $i++) {\n        while ($n % $i == 0) {\n            push @f, $i;\n    \
    \        $n /= $i;\n        }\n    }\n    return @f;\n}", "    my @factors;\n\
    \    my $f = 2;\n    while ($n > 1) {\n        while ($n % $f == 0) {\n      \
    \      push @factors, $f;\n            $n /= $f;\n        }\n        $f++;\n \
    \   }\n    return @factors;\n}", "    my @factors;\n    my $factor = 2;\n    while\
    \ ($n > 1) {\n        while (0 == $n % $factor) {\n            push @factors,\
    \ $factor;\n            $n /= $factor;\n        }\n        $factor++;\n    }\n\
    \    return @factors;\n}", "    my $p = 2;\n    my @res;\n    while($n > 1) {\n\
    \        if($n % $p == 0) {\n            push @res, $p;\n            $n /= $p;\n\
    \        } else {\n            $p++;\n        }\n    }\n    return @res;\n}",
  "    my @factorization;\n    for (my $i = 2; $i <= $n; $i++) {\n        while ($n\
    \ % $i == 0) {\n            push @factorization, $i;\n            $n /= $i;\n\
    \        }\n    }\n    return @factorization;\n}", "    my @factors;\n    while($n\
    \ > 1) {\n        push @factors, $n;\n        $n /= 2 while $n % 2 == 0;\n   \
    \     $n /= 3 while $n % 3 == 0;\n        my $p = 5;\n        my $s = 2;\n   \
    \     my $t = 3;\n        while ($p <= $n) {\n            $n /= $p while $n %\
    \ $p == 0;\n            $p += $s;\n            $s = 6 - $s;\n        }\n    }\n\
    \    return @factors;\n}", "    my @result;\n    my $i = 2;\n    my $pf = 0;\n\
    \    while($i <= $n) {\n        if(!($n % $i)) {\n            $pf = $i;\n    \
    \        $n /= $i;\n            push @result, $pf;\n        } else {\n       \
    \     $i++;\n        }\n    }\n    return @result;\n}", "    my @res;\n    my\
    \ $p = 2;\n    while ($n > 1) {\n        if ($n % $p == 0) {\n            $n /=\
    \ $p;\n            push @res, $p;\n        } else {\n            $p++;\n     \
    \   }\n    }\n    return @res;\n}", "    my @factors;\n    for (my $d = 2; $d\
    \ * $d <= $n; $d++) {\n        while ($n % $d == 0) {\n            push @factors,\
    \ $d;\n            $n /= $d;\n        }\n    }\n    push @factors, $n if $n >\
    \ 1;\n    return @factors;\n}", "    # should return 1 if $n = 1\n    return [1]\
    \ if ($n == 1);\n    return [$n] if (is_prime($n));\n    my @result;\n    my $max\
    \ = $n;\n    # go through numbers in order\n    for (my $i = 2; $i <= $max; $i++)\
    \ {\n        #print \"$i : $n\\n\";\n        if (is_prime($i)) {\n           \
    \ while ($n % $i == 0) {\n                push @result, $i;\n                $n\
    \ /= $i;\n            }\n            #print \"@result\\n\";\n            $max\
    \ = $n;\n        }\n    }\n    return \\@result;\n}", "    my @factors;\n    while\
    \ ($n % 2 == 0) {\n        push @factors, 2;\n        $n /= 2;\n    }\n    my\
    \ $i = 3;\n    while ($i <= sqrt($n)) {\n        while ($n % $i == 0) {\n    \
    \        push @factors, $i;\n            $n /= $i;\n        }\n        $i += 2;\n\
    \    }\n    push @factors, $n if $n > 2;\n    return @factors;\n}", "    my @f\
    \ = ();\n    while($n % 2 == 0) {\n        push @f, 2;\n        $n /= 2;\n   \
    \ }\n    my $i = 3;\n    while($i <= $n) {\n        if($n % $i == 0) {\n     \
    \       push @f, $i;\n            $n /= $i;\n        } else {\n            $i\
    \ += 2;\n        }\n    }\n    return @f;\n}", "    my @factors;\n    while ($n\
    \ % 2 == 0) {\n        push @factors, 2;\n        $n /= 2;\n    }\n    my $d =\
    \ 3;\n    while ($d*$d <= $n) {\n        while ($n % $d == 0) {\n            push\
    \ @factors, $d;\n            $n /= $d;\n        }\n        $d += 2;\n    }\n \
    \   if ($n > 1) {\n        push @factors, $n;\n    }\n    return @factors;\n}",
  "    my @result;\n    while (1) {\n        last if $n == 1;\n        for my $i (2..($n-1))\
    \ {\n            if ($n % $i == 0) {\n                push @result, $i;\n    \
    \            $n /= $i;\n                last;\n            }\n        }\n    }\n\
    \    return @result;\n}", "    # Initialize the function with 2, the first prime\n\
    \    # The recursive part of the function will add other primes\n    # as needed\
    \ to reduce n to 1\n    return factorize_with_first_primes(2,$n);\n}", "    my\
    \ @ret;\n    while( $n % 2 == 0 ) {\n        push @ret, 2;\n        $n /= 2;\n\
    \    }\n    my $p = 3;\n    while( $n > 1 ) {\n        if( $n % $p == 0 ) {\n\
    \            push @ret, $p;\n            $n /= $p;\n        } else {\n       \
    \     $p += 2;\n        }\n    }\n    return @ret;\n}", "    my @factors;\n  \
    \  my $f;\n    while(1) {\n        ($f, $n) = prime_factor($n);\n        last\
    \ if $f == 1;\n        push @factors, $f;\n    }\n    return @factors;\n}", " \
    \   my @factors;\n    while ($n != 1) {\n        my $p = pop @primes;\n      \
    \  while ($n % $p == 0) {\n            push @factors, $p;\n            $n /= $p;\n\
    \        }\n    }\n    return @factors;\n}", "    my @factors;\n    my $c = 2;\n\
    \    while ($n > 1) {\n        while ($n % $c == 0) {\n            push @factors,\
    \ $c;\n            $n /= $c;\n        }\n        $c++;\n    }\n    return @factors;\n\
    }", "    my @factors;\n    for(my $i = 2; $i <= $n; $i++) {\n        my $count\
    \ = 0;\n        while($n % $i == 0) {\n            $count++;\n            $n /=\
    \ $i;\n        }\n        if($count > 0) {\n            push @factors, $i x $count;\n\
    \        }\n    }\n    return @factors;\n}", "    return [prime_factors($n), ($n\
    \ / reduce { $a * $b } @{ prime_factors($n) }) ];\n}", "    my @prime_factors;\n\
    \    while($n != 1) {\n        my $p = first_prime_divisor($n);\n        push\
    \ @prime_factors, $p;\n        $n /= $p;\n    }\n    return @prime_factors;\n}",
  "    my @factors;\n    while ($n > 1) {\n        my $p = 2;\n        while ($n %\
    \ $p) {\n            $p = next_prime($p);\n        }\n        push @factors, $p;\n\
    \        $n /= $p;\n    }\n    return @factors;\n}", "    my @factors;\n    while\
    \ ($n % 2 == 0) {\n        push @factors, 2;\n        $n /= 2;\n    }\n    my\
    \ $divisor = 3;\n    while ($n != 1) {\n        while ($n % $divisor == 0) {\n\
    \            push @factors, $divisor;\n            $n /= $divisor;\n        }\n\
    \        $divisor += 2;\n    }\n    return @factors;\n}", "    # TODO: implement\
    \ this function.\n    my @result;\n    for (my $i = 2; $i <= $n; $i++) {\n   \
    \     if ($n % $i == 0) {\n            push @result, $i;\n            $n /= $i;\n\
    \            $i--;\n        }\n    }\n    return @result;\n}", "    my @result;\n\
    \    my $factor = 2;\n    while ($n > 1) {\n        while ($n % $factor == 0)\
    \ {\n            push @result, $factor;\n            $n /= $factor;\n        }\n\
    \        $factor++;\n    }\n    return @result;\n}", "    # ... your code goes\
    \ here ...\n}", "    my @primeFactors;\n    my $primeFactor = 2;\n    while($n\
    \ > 1) {\n        if ($n % $primeFactor == 0) {\n            push @primeFactors,\
    \ $primeFactor;\n            $n /= $primeFactor;\n        } else {\n         \
    \   $primeFactor++;\n        }\n    }\n    return @primeFactors;\n}", "    my\
    \ @f = ();\n    if ($n <= 1) {\n        return @f;\n    }\n    while ($n > 1)\
    \ {\n        my $f = smallest_prime_factor($n);\n        push @f, $f;\n      \
    \  $n /= $f;\n    }\n    return @f;\n}", "    my @f = ();\n    for my $i (2..($n\
    \ / 2 + 1)) {\n        my $m = $n;\n        while ($m % $i == 0) {\n         \
    \   push @f, $i;\n            $m /= $i;\n        }\n    }\n    push @f, $n if\
    \ ($n > 1 && $f[-1] != $n);\n    return @f;\n}", "    my @factors;\n    while\
    \ ($n % 2 == 0) {\n        push @factors, 2;\n        $n /= 2;\n    }\n    my\
    \ $c = 3;\n    while ($c * $c <= $n) {\n        if ($n % $c == 0) {\n        \
    \    push @factors, $c;\n            $n /= $c;\n        } else {\n           \
    \ $c += 2;\n        }\n    }\n    push @factors, $n if $n > 1;\n    return @factors;\n\
    }", "    my @factors;\n    my $product = 1;\n    foreach my $f (@_) {\n      \
    \  if ($n % $f == 0) {\n            push @factors, $f;\n            $product *=\
    \ $f;\n        }\n    }\n    if ($product != $n) {\n        die \"Invalid list\
    \ of factors: $n\";\n    }\n    return @factors;\n}", "    my @res;\n    for my\
    \ $div(2..$n) {\n        while($n % $div == 0) {\n            push @res, $div;\n\
    \            $n /= $div;\n        }\n    }\n    return @res;\n}", "    my @factors;\n\
    \    foreach my $factor(2..$n) {\n        if ($n % $factor == 0) {\n         \
    \   push @factors, $factor;\n            $n /= $factor;\n            redo;\n \
    \       }\n    }\n    return @factors;\n}", "    my @result;\n    my $d = 2;\n\
    \    while ($n > 1) {\n        while ($n % $d == 0) {\n            push @result,\
    \ $d;\n            $n /= $d;\n        }\n        $d++;\n    }\n    return @result;\n\
    }", "    my @factorized = ();\n    my $factor;\n    while ($n % 2 == 0) {\n  \
    \      push @factorized, 2;\n        $n /= 2;\n    }\n    $factor = 3;\n    while\
    \ ($factor * $factor <= $n) {\n        if ($n % $factor == 0) {\n            push\
    \ @factorized, $factor;\n            $n /= $factor;\n        } else {\n      \
    \      $factor += 2;\n        }\n    }\n    if ($n > 1) {\n        push @factorized,\
    \ $n;\n    }\n    return @factorized;\n}", "    my @factors;\n    for my $i (2..sqrt($n))\
    \ {\n        while ($n % $i == 0) {\n            push @factors, $i;\n        \
    \    $n /= $i;\n        }\n    }\n    push @factors, $n if $n > 1;\n    return\
    \ @factors;\n}", "    my @factors;\n    my $i;\n    for ($i = 2; $i <= $n; $i++)\
    \ {\n        while ($n % $i == 0) {\n            push @factors, $i;\n        \
    \    $n /= $i;\n        }\n    }\n    return @factors;\n}", "    my @factors;\n\
    \    for my $p (pfactors($n)) {\n        push @factors, $p for 1..$p;\n    }\n\
    \    return @factors;\n}", '    return () if $n == 1;', "    my @factors;\n  \
    \  while ($n % 2 == 0) {\n        push @factors, 2;\n        $n /= 2;\n    }\n\
    \    my $factor = 3;\n    while ($factor * $factor <= $n) {\n        if ($n %\
    \ $factor == 0) {\n            push @factors, $factor;\n            $n /= $factor;\n\
    \        } else {\n            $factor += 2;\n        }\n    }\n    if ($n > 1)\
    \ {\n        push @factors, $n;\n    }\n    return @factors;\n}", "    my @f;\n\
    \    if(is_prime($n)) {\n        push @f, $n;\n    } else {\n        my @p = primes_upto($n\
    \ - 1);\n        my $i = 0;\n        my $f = $p[$i];\n        while($n > 1) {\n\
    \            if($n % $f == 0) {\n                push @f, $f;\n              \
    \  $n /= $f;\n            } else {\n                $i++;\n                $f\
    \ = $p[$i];\n            }\n        }\n    }\n    return @f;\n}", "    my(@factors,\
    \ $i);\n    $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n     \
    \       push(@factors, $i);\n            $n /= $i;\n        } else {\n       \
    \     $i++;\n        }\n    }\n    return @factors;\n}", "    my @factors;\n \
    \   foreach my $i (2..$n) {\n        if (is_prime($i)) {\n            while ($n\
    \ % $i == 0) {\n                push @factors, $i;\n                $n /= $i;\n\
    \            }\n        }\n    }\n    return @factors;\n}", "    my @res;\n  \
    \  if ($n > 1) {\n        for my $p (@primes) {\n            if ($n % $p == 0)\
    \ {\n                push @res, $p;\n                $n /= $p;\n             \
    \   last;\n            }\n        }\n        push @res, factorize($n);\n    }\n\
    \    return @res;\n}", "    my @factors;\n    my $d = 2;\n    while($n > 1) {\n\
    \        while($n % $d == 0) {\n            push @factors, $d;\n            $n\
    \ /= $d;\n        }\n        $d++;\n    }\n    return @factors;\n}", "    my @out;\n\
    \    for my $f (@PRIMES) {\n        while ($n % $f == 0) {\n            push @out,\
    \ $f;\n            $n /= $f;\n        }\n    }\n    @out;\n}", "    my @factors;\n\
    \    if ($n <= 1) { return @factors; }\n    for (my $d = 2; $d <= $n; $d++) {\n\
    \        if ($n % $d == 0) {\n            push @factors, $d;\n            $n /=\
    \ $d;\n            $d = 1;\n        }\n    }\n    return @factors;\n}", "    my\
    \ @factors;\n    my $n_before = $n;\n    my $div = 2;\n    while ($n > 1) {\n\
    \        while ($n % $div == 0) {\n            push @factors, $div;\n        \
    \    $n /= $div;\n        }\n        $div++;\n    }\n    my $n_after = eval join('*',\
    \ @factors);\n    die \"Can't factorize $n_before to $n_after\" if $n_before !=\
    \ $n_after;\n    return @factors;\n}", "    my @factors;\n    my $cur_factor =\
    \ 2;\n    if ($n <= 1) {\n        return @factors;\n    }\n    while ($n > 1)\
    \ {\n        if ($n % $cur_factor == 0) {\n            push @factors, $cur_factor;\n\
    \            $n /= $cur_factor;\n        } else {\n            $cur_factor++;\n\
    \        }\n    }\n    return @factors;\n}", "    my @f;\n    while ($n % 2 ==\
    \ 0) {\n        push @f, 2;\n        $n /= 2;\n    }\n    while ($n % 3 == 0)\
    \ {\n        push @f, 3;\n        $n /= 3;\n    }\n    my $i = 5;\n    while ($i\
    \ <= sqrt($n)) {\n        while ($n % $i == 0) {\n            push @f, $i;\n \
    \           $n /= $i;\n        }\n        $i += 2;\n        while ($n % $i ==\
    \ 0) {\n            push @f, $i;\n            $n /= $i;\n        }\n        $i\
    \ += 4;\n    }\n    push @f, $n if $n > 1;\n    return @f;\n}", "    my @factors;\n\
    \    for my $m(2..$n) {\n        if(is_prime($m)) {\n            while($n % $m\
    \ == 0) {\n                push @factors, $m;\n                $n /= $m;\n   \
    \         }\n        }\n    }\n    return @factors;\n}", "    my @res;\n    for\
    \ (my $d = 2; $d <= $n; $d++) {\n        while ($n % $d == 0) {\n            push\
    \ @res, $d;\n            $n /= $d;\n        }\n    }\n    return @res;\n}", " \
    \   my $f = 2;\n    my @factors;\n    while ($n > 1) {\n        if ($n % $f ==\
    \ 0) {\n            push @factors, $f;\n            $n /= $f;\n        } else\
    \ {\n            $f++;\n        }\n    }\n    return @factors;\n}", "    my @factors;\n\
    \    my $i = 2;\n    my $t = $n;\n    while($i <= $t) {\n        if($t % $i ==\
    \ 0) {\n            push @factors, $i;\n            $t /= $i;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    @factors;\n}", "    my @factors;\n\
    \    for my $factor (2..$n) {\n        next unless $n % $factor == 0;\n      \
    \  push @factors, $factor;\n        $n /= $factor;\n        last if $n == 1;\n\
    \    }\n    return @factors;\n}", "    my @factors;\n    my $f = 2;\n    while\
    \ ($n != 1) {\n        if ($n % $f == 0) {\n            push @factors, $f;\n \
    \           $n /= $f;\n        } else {\n            $f++;\n        }\n    }\n\
    \    return @factors;\n}", "    my $factors = [1];\n    for my $m (2..$n/2) {\n\
    \        push @$factors, $m for (1..int($n/$m) - 1) if $n % $m == 0;\n    }\n\
    \    push @$factors, $n;\n    return $factors;\n}", "    my @pfs;\n    for (my\
    \ $i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            push\
    \ @pfs, $i;\n            $n /= $i;\n        }\n    }\n    return @pfs;\n}", " \
    \   my @ret;\n    if ($n > 1) {\n        my $d = 2;\n        my $n0 = $n;\n  \
    \      while ($n0 > 1) {\n            if ($n0 % $d == 0) {\n                $n0\
    \ /= $d;\n                push @ret, $d;\n            } else {\n             \
    \   $d += 1;\n            }\n        }\n    }\n    return @ret;\n}", "    my $res\
    \ = [];\n    for(2..($n/2)) {\n        while($n % $_ == 0) {\n            push\
    \ @$res, $_;\n            $n /= $_;\n        }\n    }\n    return $res;\n}", " \
    \   my @f;\n    my $d = 2;\n    while ($n > 1) {\n        if ($n % $d == 0) {\n\
    \            push @f, $d;\n            $n /= $d;\n        } else {\n         \
    \   $d++;\n        }\n    }\n    return @f;\n}", "    my @ret;\n    for (my $i\
    \ = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            push @ret,\
    \ $i;\n            $n /= $i;\n            $i--;\n        }\n    }\n    return\
    \ @ret;\n}", "    my @factors;\n    my $primes = primes_list();\n    foreach my\
    \ $p (@$primes) {\n        while ($n % $p == 0) {\n            push @factors,\
    \ $p;\n            $n /= $p;\n        }\n    }\n    return @factors;\n}", "  \
    \  my @factors;\n    while ($n % 2 == 0) {\n        push @factors, 2;\n      \
    \  $n /= 2;\n    }\n    my $i = 3;\n    while ($i <= sqrt($n)) {\n        while\
    \ ($n % $i == 0) {\n            push @factors, $i;\n            $n /= $i;\n  \
    \      }\n        $i += 2;\n    }\n    push @factors, $n if $n > 2;\n    return\
    \ @factors;\n}", "    my @res;\n    my $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            push @res, $d;\n            $n /= $d;\n\
    \        }\n        $d += 1;\n    }\n    return @res;\n}", "    my @factors;\n\
    \    my $factor = 2;\n    my $step = 1;\n    if ($n <= 1) {\n        return ();\n\
    \    }\n    while ($n != 1) {\n        if (is_prime($factor)) {\n            while\
    \ ($n % $factor == 0) {\n                push @factors, $factor;\n           \
    \     $n /= $factor;\n            }\n        }\n        $factor += $step;\n  \
    \      if (is_prime($factor)) {\n            $step = 2;\n        }\n    }\n  \
    \  return @factors;\n}", "    my @factors;\n    if ($n < 2) {\n        return\
    \ @factors;\n    }\n    my $prime = 2;\n    while ($n > 1) {\n        while ($n\
    \ % $prime == 0) {\n            push @factors, $prime;\n            $n /= $prime;\n\
    \        }\n        $prime += 1;\n    }\n    return @factors;\n}", "    my @factors;\n\
    \    my $f = 2;\n    while ($n > 1) {\n        if ($n % $f == 0) {\n         \
    \   push @factors, $f;\n            $n /= $f;\n        } else {\n            $f++;\n\
    \        }\n    }\n    return @factors;\n}", "    my @res;\n    for (2..$n) {\n\
    \        if ($n % $_ == 0) {\n            push @res, $_;\n            $n /= $_;\n\
    \            last;\n        }\n    }\n    push @res, factorize($n) if $n > 1;\n\
    \    return @res;\n}", "    my @factors;\n    my $div = 2;\n    while ($n > 1)\
    \ {\n        while ($n % $div == 0) {\n            push @factors, $div;\n    \
    \        $n /= $div;\n        }\n        $div++;\n    }\n    return @factors;\n\
    }", "    my @factors;\n    while ($n != 1) {\n        my $p = smallest_prime_factor($n);\n\
    \        push @factors, $p;\n        $n /= $p;\n    }\n    return @factors;\n}",
  "    my(@res);\n    while ($n % 2 == 0) {\n        push @res, 2;\n        $n /=\
    \ 2;\n    }\n    my($d) = 3;\n    while ($d * $d <= $n) {\n        while ($n %\
    \ $d == 0) {\n            push @res, $d;\n            $n /= $d;\n        }\n \
    \       $d += 2;\n    }\n    if ($n > 1) {\n        push @res, $n;\n    }\n  \
    \  return @res;\n}", "    my @factors;\n    while ($n % 2 == 0) {\n        push\
    \ @factors, 2;\n        $n /= 2;\n    }\n    if ($n > 1) {\n        push @factors,\
    \ $n;\n    }\n    return @factors;\n}", "    my @result;\n    while($n % 2 ==\
    \ 0) {\n        push @result, 2;\n        $n /= 2;\n    }\n    for my $i (3..int(sqrt($n)))\
    \ {\n        while($n % $i == 0) {\n            push @result, $i;\n          \
    \  $n /= $i;\n        }\n    }\n    push @result, $n if $n > 2;\n    return @result;\n\
    }", "    my @factors;\n    for (my $i = 2; $i * $i <= $n; $i++) {\n        while\
    \ ($n % $i == 0) {\n            push @factors, $i;\n            $n /= $i;\n  \
    \      }\n    }\n    if ($n > 1) {\n        push @factors, $n;\n    }\n    return\
    \ @factors;\n}", "    my @ret;\n    while ($n % 2 == 0) {\n        push @ret,\
    \ 2;\n        $n /= 2;\n    }\n    my $p = 3;\n    while ($n > 1) {\n        if\
    \ ($n % $p == 0) {\n            push @ret, $p;\n            $n /= $p;\n      \
    \  } else {\n            $p += 2;\n        }\n    }\n    return @ret;\n}", " \
    \   my $MAX = 4 * 1024;\n    my @result;\n    for (my $p = 2; $p <= $MAX; $p++)\
    \ {\n        next unless is_prime($p);\n        while ($n % $p == 0) {\n     \
    \       push @result, $p;\n            $n /= $p;\n        }\n    }\n    $n > 1\
    \ and croak \"Can't factorize: $n\";\n    return @result;\n}", "    my @factors;\n\
    \    my $i = 2;\n    while ($n != 1) {\n        while ($n % $i == 0) {\n     \
    \       push @factors, $i;\n            $n /= $i;\n        }\n        $i++;\n\
    \    }\n    return @factors;\n}", "    my @factors;\n    while($n > 1) {\n   \
    \     my $i = 2;\n        while($n % $i) {\n            $i++;\n        }\n   \
    \     push @factors, $i;\n        $n /= $i;\n    }\n    return @factors;\n}",
  "    my @ret = ();\n    my $prime = 2;\n    while ($n > 1) {\n        while ($n\
    \ % $prime == 0) {\n            push @ret, $prime;\n            $n /= $prime;\n\
    \        }\n        $prime = next_prime($prime);\n    }\n    return @ret;\n}",
  "    my $div = 2;\n    my @factors;\n    while ($n > 1) {\n        if ($n % $div\
    \ == 0) {\n            push @factors, $div;\n            $n /= $div;\n       \
    \ } else {\n            $div++;\n        }\n    }\n    return @factors;\n}", " \
    \   my @res;\n    my $i = 2;\n    while ($n > 1) {\n        while ( $n % $i ==\
    \ 0 ) {\n            push @res, $i;\n            $n /= $i;\n        }\n      \
    \  $i++;\n    }\n    return @res;\n}", "    my @factors;\n    my $f = 2;\n   \
    \ while ($n > 1) {\n        if ($n % $f == 0) {\n            push @factors, $f;\n\
    \            $n /= $f;\n        } else {\n            $f++;\n        }\n    }\n\
    \    return @factors;\n}", "    my @factors;\n    for my $factor(2..sqrt($n))\
    \ {\n        while($n % $factor == 0) {\n            push @factors, $factor;\n\
    \            $n /= $factor;\n        }\n    }\n    push @factors, $n;\n    return\
    \ @factors;\n}", "    my $loop = 1;\n    my @factors;\n    my $factor;\n    my\
    \ $temp;\n    while ($loop == 1) {\n        $factor = lpf($n);\n        push @factors,\
    \ $factor;\n        $temp = ($n / $factor);\n        if ($temp < 2) {\n      \
    \      $loop = 0;\n        }\n        $n = $temp;\n    }\n    return @factors;\n\
    }", "    my $i = 2;\n    my @factors;\n    while ($n > 1) {\n        while ($n\
    \ % $i == 0) {\n            push @factors, $i;\n            $n /= $i;\n      \
    \  }\n        $i++;\n    }\n    return @factors;\n}", "    my @factors;\n    if\
    \ ($n==1) {\n        @factors = (1);\n    } else {\n        my $factor = 2;\n\
    \        my $factor_max = int(sqrt($n));\n        while ($factor <= $factor_max)\
    \ {\n            if ($n % $factor == 0) {\n                push @factors, $factor;\n\
    \                $n /= $factor;\n                $factor_max = int(sqrt($n));\n\
    \            } else {\n                $factor++;\n            }\n        }\n\
    \        push @factors, $n;\n    }\n    return @factors;\n}", "    my @prime_factors;\n\
    \    for my $i (2..sqrt($n)) {\n        if ($n % $i == 0) {\n            push\
    \ @prime_factors, $i;\n            $n /= $i;\n            redo;\n        }\n \
    \   }\n    push @prime_factors, $n;\n    return @prime_factors;\n}", "    my @factors;\n\
    \    my $f = 2;\n    while ($n > 1) {\n        while ($n % $f == 0) {\n      \
    \      push @factors, $f;\n            $n /= $f;\n        }\n        $f++;\n \
    \   }\n    return @factors;\n}", "    my @result;\n    my $prime = 2;\n    while\
    \ (1) {\n        if ($n % $prime == 0) {\n            push @result, $prime;\n\
    \            $n /= $prime;\n        } else {\n            $prime += $prime ==\
    \ 2 ? 1 : 2;\n        }\n        last if $n == 1;\n    }\n    return @result;\n\
    }", "    my @factors;\n    for my $d (2..sqrt($n)) {\n        if ($n % $d == 0)\
    \ {\n            push @factors, $d;\n            $n /= $d;\n            redo;\n\
    \        }\n    }\n    push @factors, $n;\n    return @factors;\n}", "    my(@res);\n\
    \    for my $d ( 2 .. $n ) {\n        next if $n % $d;\n        push @res, $d;\n\
    \        $n /= $d;\n        redo if $n > 1;\n    }\n    return @res;\n}", "  \
    \  my @factors;\n    while ($n % 2 == 0) {\n        push @factors, 2;\n      \
    \  $n /= 2;\n    }\n    my $q = 3;\n    while ($q**2 <= $n) {\n        while ($n\
    \ % $q == 0) {\n            push @factors, $q;\n            $n /= $q;\n      \
    \  }\n        $q += 2;\n    }\n    if ($n > 1) {\n        push @factors, $n;\n\
    \    }\n    return @factors;\n}", "    my @factors;\n    my $current_factor =\
    \ 2;\n    while($n != 1) {\n        while($n % $current_factor == 0) {\n     \
    \       push @factors, $current_factor;\n            $n /= $current_factor;\n\
    \        }\n        $current_factor++;\n    }\n    return @factors;\n}", "   \
    \ my @result;\n    for my $factor (2 .. sqrt($n)) {\n        while ($n % $factor\
    \ == 0) {\n            push @result, $factor;\n            $n /= $factor;\n  \
    \      }\n    }\n    push @result, $n;\n    return @result;\n}", "    my @factors;\n\
    \    my $p = 2;\n    while($n > 1) {\n        if ($n % $p == 0) {\n          \
    \  push @factors, $p;\n            $n /= $p;\n        } else {\n            $p++;\n\
    \        }\n    }\n    return @factors;\n}", "    my @factors;\n    while ( $n\
    \ % 2 == 0 ) {\n        push @factors, 2;\n        $n /= 2;\n    }\n    for (\
    \ my $i = 3; $i * $i <= $n; $i += 2 ) {\n        while ( $n % $i == 0 ) {\n  \
    \          push @factors, $i;\n            $n /= $i;\n        }\n    }\n    push\
    \ @factors, $n if $n > 2;\n    return @factors;\n}", "    my(@r);\n    return\
    \ () if $n == 1;\n    if ($n > 1 and prime($n)) {\n        push @r, $n;\n    \
    \    return @r;\n    }\n    for my $i (2..sqrt($n)) {\n        if ($n % $i ==\
    \ 0) {\n            push @r, $i;\n            $n /= $i;\n            return (@r,\
    \ factorize($n));\n        }\n    }\n}", "    my(@factors);\n    for (my $i =\
    \ 2; $i <= sqrt($n); $i++) {\n        while ($n % $i == 0) {\n            push\
    \ @factors, $i;\n            $n /= $i;\n        }\n    }\n    push @factors, $n\
    \ if $n > 1;\n    return @factors;\n}", "    my(@factors, $factor);\n    my($i,\
    \ $j);", "    my @factors;\n    my $cur_factor = 2;\n    my $root = sqrt($n);\n\
    \    if ($n % $cur_factor == 0) {\n        push @factors, $cur_factor;\n     \
    \   $n /= $cur_factor;\n    }\n    $cur_factor = 3;\n    while ($cur_factor <=\
    \ $root) {\n        if ($n % $cur_factor == 0) {\n            push @factors, $cur_factor;\n\
    \            $n /= $cur_factor;\n        } else {\n            $cur_factor +=\
    \ 2;\n        }\n    }\n    if ($n > 1) {\n        push @factors, $n;\n    }\n\
    \    return @factors;\n}", "    my $i = 2;\n    my @result;\n    while ($n >=\
    \ $i) {\n        while (($n % $i) == 0) {\n            push @result, $i;\n   \
    \         $n /= $i;\n        }\n        $i++;\n    }\n    return @result;\n}",
  "    my @factors;\n    for my $i (2..$n/2) {\n        if ($n % $i == 0) {\n    \
    \        push @factors, $i;\n            my @subfactors = factorize($n/$i);\n\
    \            return (@factors, @subfactors);\n        }\n    }\n    return ($n);\n\
    }", "    return if $n < 2;\n    my @primes = (2);\n    my @factors;\n    while($n\
    \ > 1) {\n        if($n % $primes[-1] == 0) {\n            push @factors, $primes[-1];\n\
    \            $n /= $primes[-1];\n        } else {\n            push @primes, shift\
    \ @primes;\n        }\n    }\n    return @factors;\n}", "    my @factorized =\
    \ ();\n    my $factor = 2;\n    while ($n != 1) {\n        while ($n % $factor\
    \ == 0) {\n            push @factorized, $factor;\n            $n /= $factor;\n\
    \        }\n        $factor = next_prime($factor);\n    }\n    return @factorized;\n\
    }", "    my $i = 2;\n    my @ret;\n    while($n != 1) {\n        while($n % $i\
    \ == 0) {\n            push @ret, $i;\n            $n /= $i;\n        }\n    \
    \    $i++;\n    }\n    return @ret;\n}", "    my @f;\n    for(my $i = 2; $i <=\
    \ $n; $i++) {\n        if ($n % $i == 0) {\n            push @f, $i;\n       \
    \     $n /= $i;\n            $i--;\n        }\n    }\n    return @f;\n}", "  \
    \  my @result;\n    my $f = 2;\n    while ($n > 1) {\n        while ($n % $f ==\
    \ 0) {\n            push @result, $f;\n            $n /= $f;\n        }\n    \
    \    $f += 1;\n    }\n    return @result;\n}", "    my $factor = 2;\n    my @factorization;\n\
    \    while ($n > 1) {\n        while ($n % $factor == 0) {\n            push @factorization,\
    \ $factor;\n            $n /= $factor;\n        }\n        $factor++;\n    }\n\
    \    return @factorization;\n}", "    my @factors;\n    for (my $div = 2; $div\
    \ <= $n; $div++) {\n        if ($n % $div == 0) {\n            push @factors,\
    \ $div;\n            $n /= $div;\n            redo;\n        }\n    }\n    return\
    \ @factors;\n}", "    my @ret = ();\n    while(1) {\n        my $factor = (2..$n-1)[rand($n-2)];\n\
    \        if($n % $factor == 0) {\n            push @ret, factorize($factor);\n\
    \            push @ret, factorize($n/$factor);\n            return @ret;\n   \
    \     }\n    }\n}", "    my $factor = 2;\n    my @prime_factors;\n    while ($n\
    \ > 1) {\n        while ($n % $factor == 0) {\n            push @prime_factors,\
    \ $factor;\n            $n /= $factor;\n        }\n        $factor++;\n    }\n\
    \    return @prime_factors;\n}", "    my @factors;\n    my $count = 0;\n    #\
    \ check for factors of 2 first\n    while ($n % 2 == 0) {\n        push @factors,\
    \ 2;\n        $n = $n / 2;\n    }\n    # now look for odd factors\n    for (my\
    \ $i = 3; $i <= sqrt($n); $i = $i + 2) {\n        while ($n % $i == 0) {\n   \
    \         push @factors, $i;\n            $n = $n / $i;\n        }\n    }\n  \
    \  # this is to handle the case when $n is a prime number greater than 2\n   \
    \ if ($n > 2) {\n        push @factors, $n;\n    }\n    return @factors;\n}",
  "    my @factors;\n    my $d = 2;\n    while($n > 1) {\n        while($n % $d ==\
    \ 0) {\n            push @factors, $d;\n            $n /= $d;\n        }\n   \
    \     $d++;\n    }\n    return @factors;\n}", "    my(@res) = ();\n    if ($n\
    \ < 2) {\n        return @res;\n    }\n    my($d) = 2;\n    while ($n >= ($d *\
    \ $d)) {\n        if ($n % $d == 0) {\n            push(@res, $d);\n         \
    \   $n /= $d;\n        } else {\n            $d++;\n        }\n    }\n    push(@res,\
    \ $n);\n    return @res;\n}", "    my @factors;\n    while($n > 1) {\n       \
    \ foreach my $p (@primes) {\n            if($n % $p == 0) {\n                push\
    \ @factors, $p;\n                $n /= $p;\n                last;\n          \
    \  }\n        }\n    }\n    return @factors;\n}", "    my @factors;\n    while($n\
    \ > 1) {\n        for(my $i = 2; $i <= $n; $i++) {\n            if($n % $i ==\
    \ 0) {\n                push @factors, $i;\n                $n /= $i;\n      \
    \          last;\n            }\n        }\n    }\n    return @factors;\n}", " \
    \   my $d = 2;\n    my @factors;\n    while ($n > 1) {\n        if ($n % $d ==\
    \ 0) {\n            push @factors, $d;\n            $n /= $d;\n        } else\
    \ {\n            $d += 1;\n        }\n    }\n    return @factors;\n}", "    my\
    \ @factors;\n    while ($n % 2 == 0) {\n        push @factors, 2;\n        $n\
    \ /= 2;\n    }\n    my $divisor = 3;\n    while ($n > 1) {\n        if ($n % $divisor\
    \ == 0) {\n            push @factors, $divisor;\n            $n /= $divisor;\n\
    \        } else {\n            $divisor += 2;\n        }\n    }\n    return @factors;\n\
    }", "    return @_ if $n < 1;\n    my @pfactors;\n    my $factor = 2;\n    while\
    \ ( $n != 1 ) {\n        if ( $n % $factor == 0 ) {\n            push @pfactors,\
    \ $factor;\n            $n /= $factor;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    return @pfactors;\n}", "    my $k = 2;\n    my @factors;\n\
    \    while ($n > 1) {\n        while ($n % $k == 0) {\n            push @factors,\
    \ $k;\n            $n /= $k;\n        }\n        $k += 1;\n    }\n    return @factors;\n\
    }", "    my @factors;\n    while ($n > 1) {\n        my $factor = lowest_prime_factor($n);\n\
    \        push @factors, $factor;\n        $n /= $factor;\n    }\n    return @factors;\n\
    }", "    my @result;\n    for (my $i = 2; $i <= $n; ++$i) {\n        if ($n %\
    \ $i == 0) {\n            push @result, $i;\n            $n /= $i;\n         \
    \   --$i;\n        }\n    }\n    return @result;\n}", "    my @factors;\n    for\
    \ my $i (2..$n) {\n        if ($n % $i == 0) {\n            push @factors, $i;\n\
    \            $n /= $i;\n            redo;\n        }\n    }\n    return @factors;\n\
    }", "    my $a = [];\n    while ($n % 2 == 0) {\n        push(@$a, 2);\n     \
    \   $n /= 2;\n    }\n    my $p = 3;\n    while ($n > 1) {\n        while ($n %\
    \ $p == 0) {\n            push(@$a, $p);\n            $n /= $p;\n        }\n \
    \       $p += 2;\n    }\n    return $a;\n}", "    my @res;\n    my $i = 2;\n \
    \   while ($n != 1) {\n        if ($n % $i == 0) {\n            push @res, $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return @res;\n}", "    my @ret = ();\n    for my $i (2..$n) {\n        if\
    \ ($n % $i == 0) {\n            push @ret, $i;\n            $n /= $i;\n      \
    \      $i = 1;\n        }\n    }\n    return @ret;\n}", "    my @factors;\n  \
    \  my $p = 2;\n    while ($n > 1) {\n        if ($n % $p == 0) {\n           \
    \ push @factors, $p;\n            $n /= $p;\n        } else {\n            $p++;\n\
    \        }\n    }\n    return @factors;\n}", "    my @factors;\n    for my $p\
    \ (@_primes) {\n        while ($n % $p == 0) {\n            push @factors, $p;\n\
    \            $n /= $p;\n        }\n    }\n    return @factors;\n}", "    my(@f,\
    \ $factor);\n    # 1 (special case)\n    if($n == 1) {\n        return @f;\n \
    \   }\n    # other cases\n    for($factor = 2; $factor <= $n; $factor++) {\n \
    \       if($n % $factor == 0) {\n            push(@f, $factor);\n            $n\
    \ /= $factor;\n            $factor--;\n        }\n    }\n    return @f;\n}", " \
    \   my @factors;\n    for my $f (2..sqrt($n)) {\n        if (is_prime($f)) {\n\
    \            if ($n % $f == 0) {\n                push @factors, $f;\n       \
    \         $n /= $f;\n                redo;\n            }\n        }\n    }\n\
    \    push @factors, $n;\n    return @factors;\n}", "    my @res;\n    while ($n\
    \ % 2 == 0) {\n        push @res, 2;\n        $n /= 2;\n    }\n    for (my $i\
    \ = 3; $i <= $n; $i += 2) {\n        while ($n % $i == 0) {\n            push\
    \ @res, $i;\n            $n /= $i;\n        }\n    }\n    return @res;\n}", " \
    \   my $i = 2;\n    my @res;\n    while ($n > 1) {\n        if ($n % $i == 0)\
    \ {\n            push @res, $i;\n            $n /= $i;\n        } else {\n   \
    \         $i++;\n        }\n    }\n    return @res;\n}", "    my(@factors, $d,\
    \ $k);\n    $k = $n;\n    for ($d = 2; $d * $d <= $k; $d += 1) {\n        if ($k\
    \ % $d == 0) {\n            push @factors, $d;\n            do {\n           \
    \     $k /= $d;\n            } while ($k % $d == 0);\n        }\n    }\n    if\
    \ ($k > 1) {\n        push @factors, $k;\n    }\n    return \\@factors;\n}", " \
    \   my @factors;\n    my $prime = 2;\n    while($n > 1) {\n        if($n % $prime\
    \ == 0) {\n            push @factors, $prime;\n            $n /= $prime;\n   \
    \     } else {\n            $prime += 1;\n        }\n    }\n    return @factors;\n\
    }", "    my @factors;\n    while ($n > 1) {\n        my $i = 2;\n        while\
    \ ($n % $i != 0) {\n            $i++;\n        }\n        push @factors, $i;\n\
    \        $n /= $i;\n    }\n    return @factors;\n}", "    my @factors;\n    my\
    \ $factor;\n    $factor = shift @{primes_up_to($n)};\n    while($n > 1) {\n  \
    \      while($n % $factor == 0) {\n            push @factors, $factor;\n     \
    \       $n /= $factor;\n        }\n        $factor = shift @{primes_up_to($n)};\n\
    \    }\n    return @factors;\n}", "    my @factors;\n    for my $factor (get_factors($n))\
    \ {\n        push @factors, ($factor) x ($n / $factor);\n        $n /= $factor;\n\
    \    }\n    return @factors;\n}", "    my @r;\n    return @r if ($n <= 1);\n \
    \   if ($n == 2 || $n == 3) {\n        push @r, $n;\n        return @r;\n    }\n\
    \    if ($n % 2 == 0) {\n        push @r, 2;\n        $n /= 2;\n    }\n    if\
    \ ($n % 3 == 0) {\n        push @r, 3;\n        $n /= 3;\n    }\n    my $candidate\
    \ = 5;\n    while ($candidate * $candidate <= $n) {\n        if ($n % $candidate\
    \ == 0) {\n            push @r, $candidate;\n            $n /= $candidate;\n \
    \       } else {\n            $candidate += 2;\n        }\n    }\n    if ($n >\
    \ 1) {\n        push @r, $n;\n    }\n    return @r;\n}", "    my @out;\n    my\
    \ $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            push\
    \ @out, $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return\
    \ @out;\n}", "    return \"Wrong input\" if !$n;\n    my(@factors, $i);\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            push\
    \ @factors, $i;\n            $n /= $i;\n        }\n    }\n    return @factors;\n\
    }", "    my @result;\n    for my $d (2..$n) {\n        if ($n % $d == 0) {\n \
    \           push @result, $d;\n            $n /= $d;\n            redo if $n >\
    \ 1;\n        }\n    }\n    return @result;\n}", "    my $p = 2;\n    my @factors;\n\
    \    while ($n > 1) {\n        if ( $n % $p == 0 ) {\n            $n /= $p;\n\
    \            push @factors, $p;\n        } else {\n            $p += 1;\n    \
    \    }\n    }\n    return @factors;\n}", "    my @factors;\n    while ($n != 1)\
    \ {\n        my $cur_factor = 2;\n        while ($n % $cur_factor != 0) {\n  \
    \          $cur_factor++;\n        }\n        push @factors, $cur_factor;\n  \
    \      $n /= $cur_factor;\n    }\n    return @factors;\n}", "    my @result;\n\
    \    my $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n      \
    \      push @result, $i;\n            $n /= $i;\n        }\n        $i++;\n  \
    \  }\n    return @result;\n}", "    my(@prime_factors) = ();\n    my($factor)\
    \ = 2;\n    while($n > 1) {\n        while($n % $factor == 0) {\n            push(@prime_factors,\
    \ $factor);\n            $n /= $factor;\n        }\n        $factor++;\n    }\n\
    \    return @prime_factors;\n}", "    my @factors;\n    my $sqrt = sqrt($n);\n\
    \    for my $p (2..$sqrt) {\n        my $count = 0;\n        while ($n % $p ==\
    \ 0) {\n            $n /= $p;\n            $count++;\n        }\n        push\
    \ @factors, ($p) x $count;\n    }\n    push @factors, $n if $n > 1;\n    return\
    \ @factors;\n}", "    my @factors;\n    my $divisor = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divisor == 0) {\n            push @factors, $divisor;\n\
    \            $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return\
    \ @factors;\n}", "    my @r;\n    if ($n < 2) {\n        return @r;\n    }\n \
    \   while ($n % 2 == 0) {\n        push @r, 2;\n        $n /= 2;\n    }\n    for\
    \ my $d (3..int(sqrt($n))+1) {\n        while ($n % $d == 0) {\n            push\
    \ @r, $d;\n            $n /= $d;\n        }\n    }\n    push @r, $n if $n > 1;\n\
    \    return @r;\n}", "    die \"Number is smaller than 2\" if ($n < 2);\n    my\
    \ @factors;\n    # Your code goes here\n    while ($n % 2 == 0) {\n        push\
    \ @factors, 2;\n        $n /= 2;\n    }\n    my $i = 3;\n    while ($i <= sqrt($n))\
    \ {\n        while ($n % $i == 0) {\n            push @factors, $i;\n        \
    \    $n /= $i;\n        }\n        $i += 2;\n    }\n    push @factors, $n if ($n\
    \ > 2);\n    return @factors;\n}", "    my @f = ();\n    while ( $n % 2 == 0 )\
    \ {\n        push @f, 2;\n        $n /= 2;\n    }\n    my $f = 3;\n    while (\
    \ $f * $f <= $n ) {\n        if ( $n % $f == 0 ) {\n            push @f, $f;\n\
    \            $n /= $f;\n        } else {\n            $f += 2;\n        }\n  \
    \  }\n    push @f, $n if $n > 1;\n    return @f;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
