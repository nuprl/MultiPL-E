name: HumanEval_25_factorize
language: pl
prompt: "# Return array of prime factors of given integer in the order from smallest\
  \ to largest.\n# Each of the factors should be arrayed number of times corresponding\
  \ to how many times it appeares in factorization.\n# Input number should be equal\
  \ to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n\
  # [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\nsub factorize {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&factorize;\n\
  \        if(eq_deeply($candidate->(2),[2])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(4),[2, 2])) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[2,\
  \ 2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(57),[3,\
  \ 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3249),[3,\
  \ 3, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(185193),[3, 3, 3, 19, 19, 19])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20577),[3,\
  \ 19, 19, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(18),[2, 3, 3])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    my $divisor = 2;\n    while ($n > 1) {\n     \
    \   if ($n % $divisor == 0) {\n            push @result, $divisor;\n         \
    \   $n /= $divisor;\n        } else {\n            $divisor++;\n        }\n  \
    \  }\n    return @result;\n}", "    my @out;\n    while ($n % 2 == 0) {\n    \
    \    push @out, 2;\n        $n /= 2;\n    }\n    for (my $i = 3; $i <= $n; $i\
    \ += 2) {\n        while ($n % $i == 0) {\n            push @out, $i;\n      \
    \      $n /= $i;\n        }\n    }\n    return @out;\n}", "    my @factors;\n\
    \    #todo\n    return @factors;\n}", "    my $d = 2;\n    my @factors;\n    while\
    \ ($n > 1) {\n        if ($n % $d == 0) {\n            push @factors, $d;\n  \
    \          $n /= $d;\n        } else {\n            $d += 1;\n        }\n    }\n\
    \    return @factors;\n}", "    my @res;\n    for my $i (2..int(sqrt($n))) {\n\
    \        while ($n % $i == 0) {\n            push @res, $i;\n            $n /=\
    \ $i;\n        }\n    }\n    if ($n > 1) {\n        push @res, $n;\n    }\n  \
    \  return @res;\n}", "    my @ret;\n    # your code here\n    return @ret;\n}",
  "    my @result;\n    foreach my $i (2..$n) {\n        while($n % $i == 0) {\n \
    \           push @result, $i;\n            $n /= $i;\n        }\n    }\n    return\
    \ @result;\n}", "    my @a;\n    my $factor;\n    my $is_factor;\n    $factor\
    \ = 2;\n    while ($n > 1) {\n        $is_factor = 0;\n        while ($n % $factor\
    \ == 0) {\n            $is_factor = 1;\n            $n /= $factor;\n        }\n\
    \        if ($is_factor) {\n            push @a, $factor;\n        }\n       \
    \ $factor += 1;\n    }\n    return @a;\n}", "    my @f;\n    for ( my $i = 2;\
    \ $i <= sqrt($n); $i++ ) {\n        if ( $n % $i == 0 ) {\n            my $num_divisors\
    \ = 0;\n            while ( $n % $i == 0 ) {\n                $num_divisors++;\n\
    \                $n /= $i;\n            }\n            push @f, ($i) x $num_divisors;\n\
    \        }\n    }\n    push @f, $n if $n > 1;\n    return @f;\n}", "    die \"\
    Please provide integer greater than 1\" if $n < 2;\n    my @factors;\n    for\
    \ my $div (2..$n) {\n        while ($n % $div == 0) {\n            push @factors,\
    \ $div;\n            $n /= $div;\n        }\n    }\n    die \"Something went wrong\
    \ with factorization\" if $n != 1;\n    return @factors;\n}", "    # your code\
    \ here\n}", "    my @factors;\n    my $test = 2;\n    while ($n > 1) {\n     \
    \   if ($n % $test == 0) {\n            push @factors, $test;\n            $n\
    \ /= $test;\n        } else {\n            $test++;\n        }\n    }\n    return\
    \ @factors;\n}", "    # Trivial case: '1' has no factors.\n    if ($n == 1) {\n\
    \        return ();\n    }\n    my @factors;\n    # Test if $n is a prime.\n \
    \   if (is_prime($n)) {\n        return ($n);\n    }\n    # See if n is divisible\
    \ by a prime (starting with 2).\n    my $prime_index = 0;\n    while ($n > 1)\
    \ {\n        my $prime = nth_prime($prime_index);\n        if ($n % $prime ==\
    \ 0) {\n            # If it is, add it to the list of factors and divide $n by\
    \ $prime.\n            push @factors, $prime;\n            $n /= $prime;\n   \
    \     } else {\n            # Otherwise, increment index and try the next prime.\n\
    \            $prime_index++;\n        }\n    }\n    return @factors;\n}", "  \
    \  my @factors;\n    my $divisor = 2;\n    while ($n > 1) {\n        if ($n %\
    \ $divisor == 0) {\n            push @factors, $divisor;\n            $n /= $divisor;\n\
    \        } else {\n            $divisor += 1;\n        }\n    }\n    return @factors;\n\
    }", "    my @factors;\n    while ($n % 2 == 0) {\n        push @factors, 2;\n\
    \        $n /= 2;\n    }\n    for (my $i = 3; $i <= sqrt($n); $i += 2) {\n   \
    \     while ($n % $i == 0) {\n            push @factors, $i;\n            $n /=\
    \ $i;\n        }\n    }\n    if ($n > 2) {\n        push @factors, $n;\n    }\n\
    \    return @factors;\n}", '    return () if $n == 1;', "    my @factors;\n  \
    \  while($n > 1) {\n        for(my $i = 2; $i <= $n; $i++) {\n            if($n\
    \ % $i == 0) {\n                push @factors, $i;\n                $n /= $i;\n\
    \                last;\n            }\n        }\n    }\n    return @factors;\n\
    }", "    my @factors;\n    my $primes = primes();\n    foreach my $p (@$primes)\
    \ {\n        if ($n == 1) {\n            last;\n        }\n        if ($n % $p\
    \ == 0) {\n            push @factors, $p;\n            $n /= $p;\n        }\n\
    \    }\n    return @factors;\n}", "    my @factors;\n    my $factor = 2;\n   \
    \ while($n > 1) {\n        if ($n % $factor == 0) {\n            push @factors,\
    \ $factor;\n            $n /= $factor;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    return @factors;\n}", "    my @factors;\n    while ($n\
    \ % 2 == 0) {\n        push @factors, 2;\n        $n /= 2;\n    }\n    my $divisor\
    \ = 3;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   push @factors, $divisor;\n            $n /= $divisor;\n        }\n       \
    \ $divisor += 2;\n    }\n    return @factors;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
