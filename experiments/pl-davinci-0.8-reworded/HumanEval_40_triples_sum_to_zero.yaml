name: HumanEval_40_triples_sum_to_zero
language: pl
prompt: "# triples_sum_to_zero takes an array of integers as an input.\n# it returns\
  \ 1 if there are three distinct elements in the array that\n# sum to zero, and \
  \ otherwise.\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n# 1\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> triples_sum_to_zero([2,\
  \ 4, -5, 3, 9, 7])\n# 1\n# >>> triples_sum_to_zero([1])\n# \"\"\nsub triples_sum_to_zero\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5,\
  \ -1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 5, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($head, $tail) = ($l->[0], $l->[1]);\n    while ($head) {\n \
    \       while ($tail) {\n            if (exists($indexes{-($head + $tail)})) {\n\
    \                return 1;\n            }\n            $tail = $tail->[1];\n \
    \       }\n        $indexes{$head} = 1;\n        $head = $head->[1];\n       \
    \ $tail = $head->[1];\n    }\n    return 0;\n}", "    for (my $i = 0; $i < @$l;\
    \ $i++) {\n        for (my $j = $i + 1; $j < @$l; $j++) {\n            for (my\
    \ $k = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my @array = sort {$a <=> $b} @$l;\n\
    \    # check whether any triple in array sums to zero\n    for (my $i = 0; $i\
    \ < @array - 2; $i++){\n        my $a = $array[$i];\n        # binary search for\
    \ -a in array[i+1..]\n        my $j = $i + 1;\n        my $k = @array - 1;\n \
    \       while ($j < $k){\n            my $b = $array[$j];\n            my $c =\
    \ $array[$k];\n            if ($a + $b + $c == 0){\n                return 1;\n\
    \            }\n            elsif ($a + $b + $c < 0){\n                $j++;\n\
    \            }\n            else{\n                $k--;\n            }\n    \
    \    }\n    }\n    return \"\";\n}", "    my(@arr) = @$l;\n    my(@s_arr) = sort\
    \ {$a <=> $b} @arr;\n    my(@result) = ();\n    my($i, $j, $k, $res);\n    for\
    \ ($i = 0; $i < @s_arr; $i++) {\n        $j = $i + 1;\n        $k = @s_arr - 1;\n\
    \        while ($j < $k) {\n            if ($s_arr[$i] + $s_arr[$j] + $s_arr[$k]\
    \ == 0) {\n                if ($i != $j && $j != $k && $i != $k) {\n         \
    \           return 1;\n                }\n            }\n            if ($s_arr[$i]\
    \ + $s_arr[$j] + $s_arr[$k] > 0) {\n                $k--;\n            } else\
    \ {\n                $j++;\n            }\n        }\n    }\n    return \"\";\n\
    }", "    my($j, $k, $n, $flag);\n    $n = @$l;\n    if ($n < 3) {\n        return\
    \ \"\";\n    }\n    $flag = 0;\n    for ($j = 0; $j < $n; $j++) {\n        for\
    \ ($k = $j + 1; $k < $n; $k++) {\n            if (contains($l, $j, $k, -($l->[$j]\
    \ + $l->[$k]))) {\n                $flag = 1;\n                last;\n       \
    \     }\n        }\n        if ($flag) {\n            last;\n        }\n    }\n\
    \    if ($flag) {\n        return 1;\n    } else {\n        return \"\";\n   \
    \ }\n}", "    my($result) = \"\";\n    my($i);\n    my($j);\n    my($k);\n   \
    \ # Make sure that the list is of length at least 3.\n    if(@$l < 3) {\n    \
    \    # The list is not of length at least 3, so no triples sum to zero.\n    \
    \    $result = \"\";\n    } else {\n        # The list is of length at least 3,\
    \ so look for triples that sum to zero.\n        $result = \"\";\n        for($i\
    \ = 0; $i < @$l; $i++) {\n            for($j = $i + 1; $j < @$l; $j++) {\n   \
    \             for($k = $j + 1; $k < @$l; $k++) {\n                    if(@$l[$i]\
    \ + @$l[$j] + @$l[$k] == 0) {\n                        $result = 1;\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my(@a,$i,$j,$k);\n    @a = @$l;\n    for ($i = 0; $i < @a;\
    \ $i++) {\n        for ($j = $i + 1; $j < @a; $j++) {\n            for ($k = $j\
    \ + 1; $k < @a; $k++) {\n                if ($a[$i] + $a[$j] + $a[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    return 0;\n}", "    my(@l) = @$l;\n    for\
    \ my $i (0..$#l-2) {\n        for my $j ($i+1..$#l-1) {\n            for my $k\
    \ ($j+1..$#l) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    my($r) = 0;\n    if (@$l >= 3) {\n        my($d) =\
    \ {};\n        foreach my $e (@$l) {\n            if (exists($d->{$e})) {\n  \
    \              $d->{$e}++;\n            } else {\n                $d->{$e} = 1;\n\
    \            }\n        }\n        foreach my $j (keys(%$d)) {\n            foreach\
    \ my $k (keys(%$d)) {\n                if ($d->{$j} >= 1 && $d->{$k} >= 1 && $j\
    \ != $k) {\n                    my($n) = -($j + $k);\n                    if (exists($d->{$n})\
    \ && $d->{$n} >= 1 && $j != $n && $k != $n) {\n                        $r = 1;\n\
    \                        last;\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return $r;\n}", "    my $length = @$l;\n  \
    \  if ( $length >= 3 ) {\n        my $first = shift @$l;\n        foreach $second\
    \ (@$l) {\n            foreach $third (@$l) {\n                if ( $first + $second\
    \ + $third == 0 ) {\n                    return 1;\n                }\n      \
    \      }\n        }\n    }\n    return \"\";\n}", "    my $i;\n    my $j;\n  \
    \  my $k;\n    my $prev;\n    my @a = sort {$a <=> $b} @$l;\n    my $len = @a;\n\
    \    for ($i = 0; $i < $len - 2; $i++) {\n        if ($a[$i] == $prev) {\n   \
    \         next;\n        }\n        $prev = $a[$i];\n        $j = $i + 1;\n  \
    \      $k = $len - 1;\n        while ($j < $k) {\n            if ($a[$i] + $a[$j]\
    \ + $a[$k] == 0) {\n                return 1;\n            }\n            if ($a[$i]\
    \ + $a[$j] + $a[$k] < 0) {\n                $j++;\n            } else {\n    \
    \            $k--;\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   for my $i (0..$#$l) {\n        for my $j (($i+1)..$#$l) {\n            for\
    \ my $k (($j+1)..$#$l) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n                    return 1;\n                }\n            }\n    \
    \    }\n    }\n    return \"\";\n}", "    my @a = sort {$a <=> $b} @$l;\n    for\
    \ my $a (@a) {\n        for my $b (@a) {\n            for my $c (@a) {\n     \
    \           if ($a + $b + $c == 0) {\n                    return 1;\n        \
    \        }\n            }\n        }\n    }\n    return 0;\n}", "    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    # my $rc = \"\";\n    my $found = 0;\n  \
    \  my @list = sort {$a <=> $b} @$l;\n    my $n = scalar(@list);\n    while ($i\
    \ < $n-2) {\n        $j = $i+1;\n        $k = $n-1;\n        while ($j < $k) {\n\
    \            if ($list[$i] + $list[$j] + $list[$k] == 0) {\n                #\
    \ $rc = \"1\";\n                $found = 1;\n                last;\n         \
    \   } elsif ($list[$i] + $list[$j] + $list[$k] < 0) {\n                $j++;\n\
    \            } else {\n                $k--;\n            }\n        }\n     \
    \   $i++;\n    }\n    return $found;\n}", "    return 0 if @$l < 3;\n    my %sums;\n\
    \    for my $i (@$l) {\n        for my $j (@$l) {\n            my $key = $i +\
    \ $j;\n            $sums{$key}++;\n        }\n    }\n    return 0 unless (exists\
    \ $sums{0});\n    return 1;\n}", "    # @l = sort {$a <=> $b} @$l;\n    # for\
    \ my $i (0..scalar(@l)-3) {\n    #     my $j = $i+1;\n    #     my $k = scalar(@l)-1;\n\
    \    #     while ($j < $k) {\n    #         # print \"$i $j $k $l->[$i] $l->[$j]\
    \ $l->[$k]\\n\";\n    #         my $sum = $l->[$i] + $l->[$j] + $l->[$k];\n  \
    \  #         if ($sum == 0) {\n    #             return 1;\n    #         } elsif\
    \ ($sum < 0) {\n    #             $j++;\n    #         } else {\n    #       \
    \      $k--;\n    #         }\n    #     }\n    # }\n    my %set;\n    for my\
    \ $i (0..scalar(@$l)-1) {\n        for my $j ($i+1..scalar(@$l)-1) {\n       \
    \     my $sum = $l->[$i] + $l->[$j];\n            return 1 if $set{-$sum};\n \
    \           $set{$l->[$j]} = 1;\n        }\n    }\n    return '';\n}", "    my\
    \ $n = scalar(@$l);\n    return \"\" if $n < 3;\n    my $seen = {};\n    for my\
    \ $i (0..$n-1) {\n        for my $j ($i+1..$n-1) {\n            my $v = - $l->[$i]\
    \ - $l->[$j];\n            if (exists $seen->{$v}) {\n                return 1;\n\
    \            }\n        }\n        $seen->{$l->[$i]} = 1;\n    }\n    return \"\
    \";\n}", "    return triples_sum_to_n($l, 0);\n}", "    for (my $i = 0; $i < @$l\
    \ - 2; $i++) {\n        for (my $j = $i + 1; $j < @$l - 1; $j++) {\n         \
    \   for (my $k = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return '';\n}", "    my(@s, $i, $j, $k);\n  \
    \  if (scalar(@$l) < 3) {\n        return \"\";\n    }\n    @s = sort {$a <=>\
    \ $b} @$l;\n    for ($i = 0; $i < $#s; $i++) {\n        $j = $i + 1;\n       \
    \ $k = $#s;\n        while ($j < $k) {\n            if ($s[$i] + $s[$j] + $s[$k]\
    \ == 0) {\n                return 1;\n            } elsif ($s[$i] + $s[$j] + $s[$k]\
    \ < 0) {\n                $j++;\n            } else {\n                $k--;\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    return 0 unless @$l\
    \ >= 3;\n    my @s = sort {$a <=> $b} @$l;\n    my($min, $mid, $max) = ($s[0],\
    \ $s[1], $s[2]);\n    my($m0, $m1, $m2) = ($min, $mid, $max);\n    while (1) {\n\
    \        my $sum = $min + $mid + $max;\n        if ($sum == 0) {\n           \
    \ return 1;\n        } elsif ($sum < 0) {\n            ++$min;\n            return\
    \ 0 if $min > $mid;\n        } else {\n            --$max;\n            return\
    \ 0 if $max < $mid;\n        }\n    }\n}", "    my($i, $j, $k);\n    for ($i =\
    \ 0; $i < @$l - 2; $i++) {\n        for ($j = $i + 1; $j < @$l - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    for (my $i\
    \ = 0; $i < @$l; $i++) {\n        for (my $j = $i + 1; $j < @$l; $j++) {\n   \
    \         for (my $k = $j + 1; $k < @$l; $k++) {\n                return 1 if\
    \ @$l[$i] + @$l[$j] + @$l[$k] == 0;\n            }\n        }\n    }\n    return\
    \ '';\n}", "    my($i, $j, $k);\n    for ($i = 0; $i < $#$l; $i++) {\n       \
    \ for ($j = $i + 1; $j < $#$l; $j++) {\n            for ($k = $j + 1; $k < $#$l;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    my $n = @$l;\n    for(my $i = 0; $i < $n; $i++) {\n\
    \        for(my $j = $i + 1; $j < $n; $j++) {\n            for(my $k = $j + 1;\
    \ $k < $n; $k++) {\n                if(($l->[$i] + $l->[$j] + $l->[$k]) == 0)\
    \ {\n                    return 1;\n                }\n            }\n       \
    \ }\n    }\n    return \"\";\n}", "    my @list = @$l;\n    my $count = 0;\n \
    \   my $sum = 0;\n    my $retval = 0;\n    for(my $i = 0; $i < @list; $i++) {\n\
    \        for(my $j = $i + 1; $j < @list; $j++) {\n            for(my $k = $j +\
    \ 1; $k < @list; $k++) {\n                $sum = $list[$i] + $list[$j] + $list[$k];\n\
    \                if($sum == 0) {\n                    $retval = 1;\n         \
    \       }\n            }\n        }\n    }\n    return $retval;\n}", "    my(@a)\
    \ = @$l;\n    my(@result) = ();\n    my(@sorted_list) = sort {$a <=> $b} @a;\n\
    \    my($i) = 0;\n    my($j) = 1;\n    my($k) = 2;\n    my($size) = scalar(@sorted_list);\n\
    \    while($i < $size - 2) {\n\twhile($j < $size - 1) {\n\t    while($k < $size)\
    \ {\n\t\tif($sorted_list[$i] + $sorted_list[$j] + $sorted_list[$k] == 0) {\n\t\
    \t    return 1;\n\t\t}\n\t\t$k = $k + 1;\n\t    }\n\t    $j = $j + 1;\n\t    $k\
    \ = $j + 1;\n\t}\n\t$i = $i + 1;\n\t$j = $i + 1;\n\t$k = $j + 1;\n    }\n    return\
    \ \"\";\n}", "    # your code here\n}", "    my @s = sort {$a <=> $b} @$l;\n \
    \   my $i = 0;\n    my $j = 1;\n    my $k = 2;\n    while ($i < @s) {\n      \
    \  while ($j < @s && $k < @s) {\n            if ($s[$i] + $s[$j] + $s[$k] == 0)\
    \ {\n                return 1;\n            }\n            $k++;\n        }\n\
    \        $i++;\n        $j++;\n        $k = $j + 1;\n    }\n    return \"\";\n\
    }", "    my $size = scalar(@$l);\n    if ($size < 3) {\n        return '';\n \
    \   }\n    for (my $i = 0; $i < $size; $i++) {\n        for (my $j = $i + 1; $j\
    \ < $size; $j++) {\n            for (my $k = $j + 1; $k < $size; $k++) {\n   \
    \             if (@$l[$i] + @$l[$j] + @$l[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return '';\n}",
  "    # your code here\n}", "    my(@x, %h, $i, $j, $k);\n    for ($i = 0; $i < @$l;\
    \ $i++) {\n        for ($j = $i + 1; $j < @$l; $j++) {\n            if ($h{ -\
    \ $l->[$i] - $l->[$j] }) {\n                return 1;\n            }\n       \
    \ }\n        for ($k = 0; $k < @$l; $k++) {\n            $h{$l->[$k]} = 1;\n \
    \       }\n    }\n    return \"\";\n}", "    my $size = @$l;\n    my @values;\n\
    \    my $res = 0;\n    if ($size < 3) {\n        return $res;\n    }\n    for\
    \ (my $i = 0; $i < $size; $i++) {\n        my $curr = $l->[$i];\n        for (my\
    \ $j = $i + 1; $j < $size; $j++) {\n            my $curr2 = $l->[$j];\n      \
    \      for (my $k = $j + 1; $k < $size; $k++) {\n                my $curr3 = $l->[$k];\n\
    \                if ($curr + $curr2 + $curr3 == 0) {\n                    $res\
    \ = 1;\n                    return $res;\n                }\n            }\n \
    \       }\n    }\n    return $res;\n}", "    my(@a) = sort {$a <=> $b} @$l;\n\
    \    my($i, $j, $k, $n);\n    $n = scalar(@a);\n    for ($i = 0; $i < $n - 2;\
    \ $i++) {\n        $j = $i + 1;\n        $k = $n - 1;\n        while ($j < $k)\
    \ {\n            my($s) = $a[$i] + $a[$j] + $a[$k];\n            if ($s == 0)\
    \ {\n                return 1;\n            } elsif ($s < 0) {\n             \
    \   $j++;\n            } else {\n                $k--;\n            }\n      \
    \  }\n    }\n    return \"\";\n}", "    if(@$l == 0){\n        return \"\";\n\
    \    }\n    if(@$l == 1){\n        return \"\";\n    }\n    for(my $i = 0; $i\
    \ < @$l; $i++){\n        for(my $j = 0; $j < @$l; $j++){\n            for(my $k\
    \ = 0; $k < @$l; $k++){\n                if(($l->[$i] + $l->[$j] + $l->[$k]) ==\
    \ 0){\n                    return 1;\n                }\n            }\n     \
    \   }\n    }\n    return \"\";\n}", "    my(@l) = @$l;\n    my(@p) = sort {$a\
    \ <=> $b} @l;\n    my($start) = 0;\n    my($end) = scalar(@p) - 1;\n    while\
    \ ($start < $end - 1) {\n        my($sum) = $p[$start] + $p[$end];\n        my($add)\
    \ = binary_search(\\@p, $start + 1, $end - 1, -$sum);\n        if ($add) {\n \
    \           return 1;\n        } elsif ($sum > 0) {\n            $end--;\n   \
    \     } else {\n            $start++;\n        }\n    }\n    return \"\";\n}",
  "    my $i = 0;\n    my $j = 1;\n    my $k = 2;\n    while ($i <= $#{$l}) {\n  \
    \      while ($j <= $#{$l}) {\n            while ($k <= $#{$l}) {\n          \
    \      if (($l->[$i] + $l->[$j] + $l->[$k]) == 0) {\n                    return\
    \ 1;\n                }\n                $k++;\n            }\n            $j++;\n\
    \            $k = $j + 1;\n        }\n        $i++;\n        $j = $i + 1;\n  \
    \      $k = $j + 1;\n    }\n    return \"\";\n}", "    my($n1, $n2, $n3);\n  \
    \  foreach $n1 (@$l) {\n        foreach $n2 (@$l) {\n            foreach $n3 (@$l)\
    \ {\n                return 1 if ($n1 != $n2 && $n2 != $n3 && $n1 != $n3 && $n1\
    \ + $n2 + $n3 == 0);\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   return \"\" if( scalar(@$l) < 3 );\n    for my $a (@$l) {\n        for my\
    \ $b (@$l) {\n            next if( $a == $b );\n            for my $c (@$l) {\n\
    \                next if( $a == $c or $b == $c );\n                return 1 if(\
    \ $a + $b + $c == 0 );\n            }\n        }\n    }\n    return \"\";\n}",
  '    return "" if @$l < 3;', "    if(scalar(@$l) < 3) {\n        return \"\";\n\
    \    }\n    if(triples_sum_to_zero_helper($l, 0, {}, 0, 0)) {\n        return\
    \ 1;\n    }\n    return \"\";\n}", "    my $i;\n    my $j;\n    my $k;\n    #print\
    \ \"$l[0]\";\n    for ($i = 0; $i < $#{$l}; $i++) {\n        for ($j = $i + 1;\
    \ $j < $#{$l}; $j++) {\n            for ($k = $j + 1; $k < $#{$l}; $k++) {\n \
    \               if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   if (scalar(@$l) < 3) {\n        return \"\";\n    }\n    if (not is_sorted($l))\
    \ {\n        return \"\";\n    }\n    my $n = scalar(@$l);\n    my $i = 0;\n \
    \   while ($i < $n) {\n        my $j = $i + 1;\n        while ($j < $n) {\n  \
    \          my $k = $j + 1;\n            while ($k < $n) {\n                if\
    \ ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n   \
    \             }\n                $k = $k + 1;\n            }\n            $j =\
    \ $j + 1;\n        }\n        $i = $i + 1;\n    }\n    return \"\";\n}", "   \
    \ my $n = scalar(@$l);\n    my $r = 0;\n    my $i = 0;\n    while ($i < $n) {\n\
    \        my $j = $i + 1;\n        while ($j < $n) {\n            my $k = $j +\
    \ 1;\n            while ($k < $n) {\n                if ($l->[$i] + $l->[$j] +\
    \ $l->[$k] == 0) {\n                    $r = 1;\n                }\n         \
    \       $k = $k + 1;\n            }\n            $j = $j + 1;\n        }\n   \
    \     $i = $i + 1;\n    }\n    return $r;\n}", "    my(@l) = @$l;\n    my($i,\
    \ $j, $k);\n    my($n) = scalar(@l);\n    for ($i = 0; $i < $n; $i++) {\n\tfor\
    \ ($j = $i + 1; $j < $n; $j++) {\n\t    for ($k = $j + 1; $k < $n; $k++) {\n\t\
    \tif ($l[$i] + $l[$j] + $l[$k] == 0) {\n\t\t    return 1;\n\t\t}\n\t    }\n\t\
    }\n    }\n    return \"\";\n}", "    if (scalar(@$l) < 3) {\n        return \"\
    \";\n    }\n    for (my $i = 0; $i < scalar(@$l) - 2; $i++) {\n        for (my\
    \ $j = $i + 1; $j < scalar(@$l) - 1; $j++) {\n            for (my $k = $j + 1;\
    \ $k < scalar(@$l); $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my($s, $t);\n    my(%seen);\n   \
    \ foreach my $i (@$l) {\n        foreach my $j (@$l) {\n            next if $i\
    \ == $j;\n            next if $seen{$i, $j};\n            $seen{$i, $j} = 1;\n\
    \            $s = $i + $j;\n            foreach my $k (@$l) {\n              \
    \  next if $i == $k;\n                next if $j == $k;\n                next\
    \ if $s == $k;\n                if ($s + $k == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my(@t) = @$l;\n    my(@t1) = @t;\n    my(@t2) = @t;\n    my(@t3) = @t;\n  \
    \  my($i, $j, $k);\n    my($len) = length($l);\n    for($i = 0; $i < $len; $i++){\n\
    \        for($j = 0; $j < $len; $j++){\n            for($k = 0; $k < $len; $k++){\n\
    \                if(($t1[$i] + $t2[$j] + $t3[$k]) == 0){\n                   \
    \ return 1;\n                }\n            }\n        }\n    }\n    return \"\
    \";\n}", "    my $k;\n    my $s;\n    my $j;\n    my $i;\n    my $a;\n    my $n;\n\
    \    my $result;\n    $n = scalar(@$l);\n    $result = 0;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $a = @$l[$i];\n        for ($j = $i + 1; $j < $n; $j++)\
    \ {\n            $s = $a + @$l[$j];\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if ($s + @$l[$k] == 0) {\n                    $result = 1;\n\
    \                }\n            }\n        }\n    }\n    return $result;\n}",
  "    if(scalar(@$l) < 3) { return \"\"; }\n    for(my $i = 0; $i < scalar(@$l) -\
    \ 2; $i++) {\n        for(my $j = $i + 1; $j < scalar(@$l) - 1; $j++) {\n    \
    \        for(my $k = $j + 1; $k < scalar(@$l); $k++) {\n                if($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    my(@l) = @$l;\n\
    \    # base case: not enough elements\n    if (scalar(@l) < 3) {\n        return\
    \ \"\";\n    }\n    # recursive case\n    else {\n        my $t = shift(@l);\n\
    \        my @r = triples_sum_to_zero(\\@l);\n        if (@r) {\n            return\
    \ @r;\n        }\n        else {\n            my @t = triples_sum_to_zero_helper(\\\
    @l, $t);\n            if (@t) {\n                return @t;\n            }\n \
    \           else {\n                return \"\";\n            }\n        }\n \
    \   }\n}", "    for my $i (0..(@$l-1)) {\n        for my $j (($i+1)..(@$l-1))\
    \ {\n            for my $k (($j+1)..(@$l-1)) {\n                if (($l->[$i]\
    \ + $l->[$j] + $l->[$k]) == 0) {\n                    return 1;\n            \
    \    }\n            }\n        }\n    }\n    return \"\";\n}", "    my $i;\n \
    \   my $j;\n    my $k;\n    my $n = @$l;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k\
    \ < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my $s = 0;\n    my $s1 = 0;\n    my $s2 = 0;\n\
    \    my $r = 0;\n    my $r1 = 0;\n    my $r2 = 0;\n    if (@$l > 2) {\n      \
    \  $s = $l->[0];\n        $r = $l->[1];\n        while ($s < (@$l - 2)) {\n  \
    \          $s1 = $s + 1;\n            $r1 = $r + 1;\n            $r2 = @$l - 1;\n\
    \            while ($r1 < $r2) {\n                if ($l->[$s] + $l->[$r1] + $l->[$r2]\
    \ == 0) {\n                    return 1;\n                }\n                if\
    \ ($l->[$s] + $l->[$r1] + $l->[$r2] < 0) {\n                    $r1++;\n     \
    \           }\n                else {\n                    $r2--;\n          \
    \      }\n            }\n            $s++;\n            $r++;\n        }\n   \
    \ }\n    return \"\";\n}", "    my @array = @$l;\n    if(scalar(@array) < 3) {\n\
    \        return '';\n    }\n    # COMPLETE THIS IMPLEMENTATION\n    return 1;\n\
    }", "    my($r) = ();\n    my($z) = 0;\n    foreach my $i (0..$#$l-2) {\n    \
    \    foreach my $j ($i+1..$#$l-1) {\n            foreach my $k ($j+1..$#$l) {\n\
    \                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                \
    \    $z = 1;\n                }\n            }\n        }\n    }\n    return $z;\n\
    }", "    my @x = @$l;\n    my $res = 0;\n    my $n = scalar(@x);\n    for (my\
    \ $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n  \
    \          for (my $k = $j + 1; $k < $n; $k++) {\n                if ($x[$i] +\
    \ $x[$j] + $x[$k] == 0) {\n                    $res = 1;\n                }\n\
    \            }\n        }\n    }\n    return $res;\n}", "    my $success = \"\"\
    ;\n    my $sortedL = [sort {$a <=> $b} @$l];\n    for (my $i = 0; $i < @$sortedL\
    \ - 2; $i++) {\n        my $fst = $sortedL->[$i];\n        my $j = $i + 1;\n \
    \       my $k = $#$sortedL;\n        while ($j < $k) {\n            my $snd =\
    \ $sortedL->[$j];\n            my $trd = $sortedL->[$k];\n            if ($fst\
    \ + $snd + $trd == 0) {\n                $success = 1;\n                last;\n\
    \            } elsif ($fst + $snd + $trd < 0) {\n                $j++;\n     \
    \       } else {\n                $k--;\n            }\n        }\n    }\n   \
    \ return $success;\n}", "    my $n = @$l;\n    my %sums;\n    for my $i (0..$n-1)\
    \ {\n        for my $j ($i+1..$n-1) {\n            $sums{$l->[$i] + $l->[$j]}++;\n\
    \        }\n    }\n    for my $k (0..$n-1) {\n        return 1 if $sums{- $l->[$k]};\n\
    \    }\n    return \"\";\n}", '    return "" if ($#$l < 2);', "    my($first,\
    \ $second, $third, $n);\n    $n = @$l;\n    # Write your code here\n    return\
    \ \"\";\n}", "    #@_ is the array of args to the function.\n    #$l will get\
    \ a copy of the first argument.\n    my $ans = \"\";\n    foreach $a (@$l) {\n\
    \        foreach $b (@$l) {\n            foreach $c (@$l) {\n                if\
    \ ($a != $b && $b != $c && $a != $c) {\n                    if ($a + $b + $c ==\
    \ 0) {\n                        $ans = 1;\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return $ans;\n}", "    for my $i\
    \ (0..scalar(@$l)-3) {\n        for my $j ($i+1..scalar(@$l)-2) {\n          \
    \  for my $k ($j+1..scalar(@$l)-1) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return '';\n}", "    # ADD CODE HERE\n    if\
    \ (scalar(@$l) < 3) {\n        return \"\";\n    }\n    my $a = $l->[0];\n   \
    \ my $b = $l->[1];\n    my $c = $l->[2];\n    # $d is used to store the elements\
    \ that have already been checked\n    my $d = [$a, $b, $c];\n    # $count is the\
    \ number of distinct elements in $d\n    my $count = 3;\n    my $i = 3;\n    my\
    \ $length = scalar(@$l);\n    while ($i < $length) {\n        my $j = 0;\n   \
    \     while ($j < $count) {\n            my $k = $j + 1;\n            while ($k\
    \ < $count) {\n                if ($d->[$j] + $d->[$k] + $l->[$i] == 0) {\n  \
    \                  return 1;\n                }\n                $k = $k + 1;\n\
    \            }\n            $j = $j + 1;\n        }\n        # Push the elements\
    \ one by one into $d\n        # if the element has already been in $d\n      \
    \  # it will not be pushed again\n        $j = 0;\n        my $flag = 0;\n   \
    \     while ($j < $count) {\n            if ($d->[$j] == $l->[$i]) {\n       \
    \         $flag = 1;\n            }\n            $j = $j + 1;\n        }\n   \
    \     if ($flag == 0) {\n            push(@$d, $l->[$i]);\n            $count\
    \ = $count + 1;\n        }\n        $i = $i + 1;\n    }\n    return \"\";\n}",
  "    my($i);\n    for($i = 0; $i < scalar(@$l) - 2; $i++) {\n        my($j);\n \
    \       for($j = $i + 1; $j < scalar(@$l) - 1; $j++) {\n            my($k);\n\
    \            for($k = $j + 1; $k < scalar(@$l); $k++) {\n                if(@$l[$i]\
    \ + @$l[$j] + @$l[$k] == 0) {\n                    return 1;\n               \
    \ }\n            }\n        }\n    }\n    return 0;\n}", "    my @list = @$l;\n\
    \    foreach my $i (0..scalar(@list)-1) {\n        foreach my $j ($i+1..scalar(@list)-1)\
    \ {\n            foreach my $k ($j+1..scalar(@list)-1) {\n                if ($list[$i]\
    \ + $list[$j] + $list[$k] == 0) {\n                    return 1;\n           \
    \     }\n            }\n        }\n    }\n    return \"\";\n}", "    my $n = @$l;\n\
    \    if ($n < 3) {\n        return \"\";\n    }\n    my @a = sort {$a <=> $b}\
    \ @$l;\n    my $i = 0;\n    while ($i < $n - 2) {\n        my $j = $i + 1;\n \
    \       my $k = $n - 1;\n        while ($j < $k) {\n            my $sum = $a[$i]\
    \ + $a[$j] + $a[$k];\n            if ($sum == 0) {\n                return 1;\n\
    \            }\n            if ($sum < 0) {\n                $j++;\n         \
    \   } else {\n                $k--;\n            }\n        }\n        $i++;\n\
    \    }\n    return \"\";\n}", "    my @s = sort {$a <=> $b} @$l;\n    for (my\
    \ $i = 0; $i < scalar(@s) - 2; $i++) {\n        my $j = $i + 1;\n        my $k\
    \ = scalar(@s) - 1;\n        while ($j < $k) {\n            my $sum = $s[$i] +\
    \ $s[$j] + $s[$k];\n            if ($sum == 0) {\n                return 1;\n\
    \            } elsif ($sum < 0) {\n                $j++;\n            } else {\n\
    \                $k--;\n            }\n        }\n    }\n    return \"\";\n}",
  "    my @arr = @$l;\n    my %hash;\n    my $sum = 0;\n    my $f = 0;\n    my $a\
    \ = 0;\n    my $b = 0;\n    my $c = 0;\n    foreach $a (@arr) {\n        foreach\
    \ $b (@arr) {\n            foreach $c (@arr) {\n                $sum = $a + $b\
    \ + $c;\n                if ($sum == 0) {\n                    if (exists $hash{$a}\
    \ and exists $hash{$b} and exists $hash{$c}) {\n                        next;\n\
    \                    } else {\n                        $f = 1;\n             \
    \           last;\n                    }\n                }\n            }\n \
    \       }\n    }\n    return $f;\n}", "    my $ret = \"\";\n    if(scalar @$l\
    \ >= 3) {\n        my $hash = {};\n        for my $ele (@$l) {\n            $hash->{$ele}\
    \ = 0;\n        }\n        for my $ele (@$l) {\n            for my $x (keys %$hash)\
    \ {\n                if($hash->{$x} == 0) {\n                    if(exists $hash->{0\
    \ - $ele - $x}) {\n                        if($hash->{0 - $ele - $x} == 0) {\n\
    \                            $ret = 1;\n                            last;\n  \
    \                      }\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return $ret;\n}", "    # if the length of the array\
    \ is less than three, or if there are\n    # no duplicates, return an empty string.\n\
    \    return '' if scalar(@$l) < 3;\n    my %h = ();\n    # loop through the list\
    \ and add all of the elements to a hash\n    # this is O(n)\n    foreach my $i\
    \ (@$l) {\n        $h{$i} = 1;\n    }\n    # loop through the list and look for\
    \ the negative of each element\n    # in the hash.  if it is there, check for\
    \ the complement.\n    # check for the complement by using an inner loop that\
    \ traverses\n    # the hash from the same point as the outer loop.  this will\n\
    \    # ensure that all the combinations are checked.\n    # this is O(n^2)\n \
    \   foreach my $i (@$l) {\n        foreach my $j (keys %h) {\n            if (exists\
    \ $h{-($i + $j)}) {\n                return 1;\n            }\n        }\n   \
    \ }\n    return '';\n}", "    return 0 if @$l < 3;\n    # the following 2 loops\
    \ are O(n^2).\n    # they are followed by a final O(n) loop.\n    #   O(n^2) +\
    \ O(n) = O(n^2)\n    # O(n^2) is the time complexity of the algorithm.\n    my\
    \ $r;\n    for my $i (0 .. $#$l - 2) {\n        for my $j ($i + 1 .. $#$l - 1)\
    \ {\n            $r = 0 - ($l->[$i] + $l->[$j]);\n            return 1 if $r !=\
    \ $l->[$i] and $r != $l->[$j] and\n                grep { $_ == $r } @$l[$j +\
    \ 1 .. $#$l];\n        }\n    }\n    return 0;\n}", "    my($len) = scalar(@$l);\n\
    \    if ($len < 3) {\n        return \"\";\n    }\n    for my $i (0..$len-3) {\n\
    \        for my $j ($i+1..$len-2) {\n            for my $k ($j+1..$len-1) {\n\
    \                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                \
    \    return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my @list = @$l;\n    my $r = \"\";\n    my %seen;\n    if (scalar(@list)\
    \ > 2) {\n        foreach $a (0..$#list-2) {\n            foreach $b ($a+1..$#list-1)\
    \ {\n                $diff = 0 - ($list[$a] + $list[$b]);\n                if\
    \ (exists $seen{$diff}) {\n                    return 1;\n                }\n\
    \                $seen{$list[$b]} = 1;\n            }\n        }\n    }\n    return\
    \ $r;\n}", "    foreach $a (@$l) {\n        foreach $b (@$l) {\n            foreach\
    \ $c (@$l) {\n                if($a+$b+$c == 0) {\n                    return\
    \ \"1\";\n                }\n            }\n        }\n    }\n    return \"\"\
    ;\n}", "    my(@a) = @$l;\n    my(@b);\n    my(@c);\n    my(@d);\n    my($n) =\
    \ 0;\n    my($index) = 0;\n    if (scalar(@a) < 3) {\n        return \"\";\n \
    \   }\n    @b = sort {$a <=> $b} @a;\n    while ($index < scalar(@b)) {\n    \
    \    $n = $b[$index];\n        if ($n > 0) {\n            return \"\";\n     \
    \   }\n        $c[$index] = $n;\n        $index++;\n    }\n    @d = @c;\n    my($target)\
    \ = 0;\n    $index = 0;\n    my($start) = 0;\n    my($end) = scalar(@c) - 1;\n\
    \    while ($index < scalar(@c)) {\n        $target = -1 * $c[$index];\n     \
    \   $start = $index + 1;\n        $end = scalar(@c) - 1;\n        while ($start\
    \ < $end) {\n            if ($c[$start] + $c[$end] == $target) {\n           \
    \     return 1;\n            }\n            if ($c[$start] + $c[$end] < $target)\
    \ {\n                $start++;\n            }\n            else {\n          \
    \      $end--;\n            }\n        }\n        $index++;\n    }\n    return\
    \ \"\";\n}", "    my($s, $i, $j, $k);\n    my($triple) = 0;\n    $s = 0;\n   \
    \ for ($i = 0; $i < $#$l; $i++) {\n        for ($j = $i + 1; $j < $#$l; $j++)\
    \ {\n            for ($k = $j + 1; $k < $#$l; $k++) {\n                if (($l->[$i]\
    \ + $l->[$j] + $l->[$k]) == 0) {\n                    $triple = 1;\n         \
    \       }\n            }\n        }\n    }\n    return $triple;\n}", "    my $it\
    \ = combinations(3, $l);\n    while (my $t = $it->next) {\n        return 1 if\
    \ sum(@$t) == 0;\n    }\n    return \"\";\n}", "    my($i, $j, $k);\n    my($an)\
    \ = scalar(@$l);\n    my($flag) = 0;\n    for($i = 0; $i < $an; $i++) {\n    \
    \    for($j = $i + 1; $j < $an; $j++) {\n            for($k = $j + 1; $k < $an;\
    \ $k++) {\n                if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n       \
    \             $flag = 1;\n                    last;\n                }\n     \
    \       }\n        }\n    }\n    return $flag;\n}", "    my $s = @$l;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $result = 0;\n    for ($i = 0; $i < $s -\
    \ 2; $i++) {\n        for ($j = $i + 1; $j < $s - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $s; $k++) {\n                $result = 1 if (@$l[$i] + @$l[$j]\
    \ + @$l[$k] == 0);\n            }\n        }\n    }\n    return $result;\n}",
  "    my @list = @$l;\n    my $len = scalar @list;\n    my $set = new Set::Scalar(\\\
    @list);\n    #print \"set = $set\\n\";\n    my $seen = new Set::Scalar;\n    my\
    \ $triple = new Set::Scalar;\n    my $result = \"\";\n    my $k = 0;\n    for\
    \ ($k = 0; $k < $len; $k++) {\n        my $target = -1 * $list[$k];\n        #print\
    \ \"target = $target\\n\";\n        my $j = 0;\n        for ($j = 0; $j < $len;\
    \ $j++) {\n            my $element = $list[$j];\n            $seen->insert($element);\n\
    \            my $diff = $target - $element;\n            #print \"diff = $diff\\\
    n\";\n            if ($set->has($diff) && $diff ne $element && !$seen->has($diff))\
    \ {\n                $triple->insert($k);\n                $triple->insert($j);\n\
    \                $triple->insert($set->at($diff));\n                $result =\
    \ 1;\n                last;\n            }\n        }\n        if ($result eq\
    \ 1) {\n            last;\n        }\n    }\n    #print \"result = $result\\n\"\
    ;\n    #print \"triple = $triple\\n\";\n    return $result;\n}", "    foreach\
    \ my $x (@$l) {\n        foreach my $y (@$l) {\n            foreach my $z (@$l)\
    \ {\n                if ($x != $y && $y != $z && $x != $z && $x + $y + $z == 0)\
    \ {\n                    return 1;\n                }\n            }\n       \
    \ }\n    }\n    return \"\";\n}", "    my $res = \"\";\n    my @s = sort {$a <=>\
    \ $b} @$l;\n    for my $i (0..$#s) {\n        for my $j ($i+1..$#s) {\n      \
    \      for my $k ($j+1..$#s) {\n                $res = $s[$i] + $s[$j] + $s[$k];\n\
    \                last if $res == 0;\n            }\n            last if $res ==\
    \ 0;\n        }\n        last if $res == 0;\n    }\n    $res ? \"\" : 1;\n}",
  "    foreach $i (0..@$l-3) {\n        foreach $j ($i+1..@$l-2) {\n            foreach\
    \ $k ($j+1..@$l-1) {\n                if($$l[$i] + $$l[$j] + $$l[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my $total = 0;\n    my $n = scalar(@$l);\n\
    \    for (my $i = 0; $i < $n - 2; $i++) {\n        for (my $j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n          \
    \      if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    $total++;\n\
    \                }\n            }\n        }\n    }\n    return $total;\n}", " \
    \   return 0;\n}", "    for my $i (0..$#$l-2) {\n        for my $j ($i+1..$#$l-1)\
    \ {\n            for my $k ($j+1..$#$l) {\n                return 1 if $l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0;\n            }\n        }\n    }\n    return \"\"\
    ;\n}", "    my @list = @$l;\n    my $size = scalar @list;\n    my $count = 0;\n\
    \    for(my $i = 0; $i < $size; $i++) {\n        for(my $j = $i + 1; $j < $size;\
    \ $j++) {\n            for(my $k = $j + 1; $k < $size; $k++) {\n             \
    \   if($list[$i] + $list[$j] + $list[$k] == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   my($a, $b, $c);\n    my($head) = $l;\n    my($res) = \"\";\n    while ($head\
    \ && $head->{item}) {\n        $a = $head->{item};\n        $head = $head->{next};\n\
    \        $b = $head->{item};\n        $head = $head->{next};\n        $c = $head->{item};\n\
    \        $head = $head->{next};\n        if ($a + $b + $c == 0) {\n          \
    \  $res = 1;\n            last;\n        }\n    }\n    return $res;\n}", "   \
    \ # you can use your functions from above\n    # or write your own\n    if ( scalar\
    \ (@$l) < 3 ) {\n        return \"\";\n    }", "    my $r = \"\";\n    # your\
    \ code here", "    my $res = 0;\n    for my $i (0..$#$l - 2) {\n        for my\
    \ $j ($i + 1..$#$l - 1) {\n            for my $k ($j + 1..$#$l) {\n          \
    \      if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    $res =\
    \ 1;\n                    last;\n                }\n            }\n        }\n\
    \    }\n    return $res;\n}", '    # your code goes here', "    my $n = scalar(@$l);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    if(!is_array($l))\
    \ {\n        print STDERR \"Error: triples_sum_to_zero expects an array as an\
    \ input.\\n\";\n        return \"\";\n    }\n    if(@$l < 3) {\n        return\
    \ \"\";\n    }\n    my $l_length = @$l;\n    for(my $i = 0; $i < $l_length - 2;\
    \ $i++) {\n        for(my $j = $i + 1; $j < $l_length - 1; $j++) {\n         \
    \   for(my $k = $j + 1; $k < $l_length; $k++) {\n                if($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n               \
    \ }\n            }\n        }\n    }\n    return \"\";\n}", "    my $n = scalar(@$l);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                return\
    \ 1 if $$l[$i] + $$l[$j] + $$l[$k] == 0;\n            }\n        }\n    }\n  \
    \  return 0;\n}", "    if (scalar(@$l) < 3) {\n        return \"\";\n    }\n \
    \   for my $i (0..$#$l) {\n        for my $j ($i+1..$#$l) {\n            for my\
    \ $k ($j+1..$#$l) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0)\
    \ {\n                    return 1;\n                }\n            }\n       \
    \ }\n    }\n    return \"\";\n}", "    my($s) = @$l;\n    my($i, $j, $k);\n  \
    \  my($n) = scalar(@$s);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n \
    \               if ($s->[$i] + $s->[$j] + $s->[$k] == 0) {\n                 \
    \   return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my $triples = 0;\n    for my $i (0..scalar(@$l)-3) {\n     \
    \   for my $j ($i+1..scalar(@$l)-2) {\n            for my $k ($j+1..scalar(@$l)-1)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        $triples = 1;\n                }\n            }\n        }\n    }\n \
    \   return $triples;\n}", "    my($r) = \"\";\n    my(@l) = sort(@$l);\n    my($i,\
    \ $j, $k);\n    for ($i = 0; $i < @l; $i++) {\n        for ($j = $i + 1; $j <\
    \ @l; $j++) {\n            for ($k = $j + 1; $k < @l; $k++) {\n              \
    \  if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    $r = 1;\n       \
    \             last;\n                }\n            }\n        }\n    }\n    return\
    \ $r;\n}", "    my $j;\n    my $k;\n    my $result = \"\";\n    for (my $i = 0;\
    \ $i < @$l; $i++) {\n        $j = $i + 1;\n        while ($j < @$l) {\n      \
    \      $k = $j + 1;\n            while ($k < @$l) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    $result = 1;\n          \
    \      }\n                $k++;\n            }\n            $j++;\n        }\n\
    \    }\n    return $result;\n}", "    my $triples_sum_to_zero = \"\";\n    # your\
    \ code goes here...\n    @l=sort{$a<=>$b}@l;\n    $n = $#l;\n    for ($i=0;$i<$n-1;$i++)\
    \ {\n        $j=$i+1;\n        $k=$n;\n        while ($j<$k) {\n            if\
    \ ($l[$i]+$l[$j]+$l[$k]==0) {\n                $triples_sum_to_zero = \"1\";\n\
    \                last;\n            } elsif ($l[$i]+$l[$j]+$l[$k]<0) {\n     \
    \           $j++;\n            } else {\n                $k--;\n            }\n\
    \        }\n    }\n    return $triples_sum_to_zero;\n}", "    my $retval = \"\"\
    ;\n    my $num_of_nums = scalar(@$l);\n    if ( $num_of_nums > 2 ) {\n       \
    \ for (my $i = 0; $i < $num_of_nums; $i++ ) {\n            for (my $j = $i + 1;\
    \ $j < $num_of_nums; $j++ ) {\n                for (my $k = $j + 1; $k < $num_of_nums;\
    \ $k++ ) {\n                    if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n \
    \                       $retval = 1;\n                        goto SUM_TO_ZERO;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   SUM_TO_ZERO:\n    return $retval;\n}", "    my @arr = @$l;\n    my $len =\
    \ scalar @arr;\n    my %hash = ();\n    foreach $i (@arr) {\n        $hash{$i}\
    \ = 1;\n    }\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1;\
    \ $j < $len; $j++) {\n            $k = $arr[$i] + $arr[$j];\n            if ($hash{-$k})\
    \ {\n                return 1;\n            }\n        }\n    }\n    return 0;\n\
    }", "    my $n = scalar(@$l);\n    my @l = sort {$a <=> $b} @$l;\n    for my $i\
    \ (0..$n-3) {\n        for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1)\
    \ {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                  \
    \  return 1;\n                }\n            }\n        }\n    }\n    return \"\
    \";\n}", "    my($i, $j, $k);\n    for ($i = 0; $i < @$l - 2; $i++) {\n      \
    \  for ($j = $i + 1; $j < @$l - 1; $j++) {\n            for ($k = $j + 1; $k <\
    \ @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n \
    \                   return 1;\n                }\n            }\n        }\n \
    \   }\n    return \"\";\n}", "    my $n = @$l;\n    my %count;\n    for (0..$n-1)\
    \ {\n        for my $j ($_+1..$n-1) {\n            for my $k ($j+1..$n-1) {\n\
    \                if (($$l[$_] + $$l[$j] + $$l[$k]) == 0) {\n                 \
    \   return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my $r = '';\n    my $i;\n    my $j;\n    my $k;\n    my $size\
    \ = scalar(@$l);\n    for ($i = 0; $i < $size; $i++) {\n        for ($j = $i +\
    \ 1; $j < $size; $j++) {\n            for ($k = $j + 1; $k < $size; $k++) {\n\
    \                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                \
    \    $r = 1;\n                    last;\n                }\n            }\n  \
    \      }\n    }\n    return $r;\n}", "    my(@l) = @$l;\n    my(@x);\n    my($x);\n\
    \    my($num_zeros);\n    my($i);\n    my($j);\n    my($k);\n    my($a);\n   \
    \ my($b);\n    my($c);\n    if (@l < 3) {\n        $x = 0;\n    }\n    else {\n\
    \        # count zeros\n        $num_zeros = 0;\n        for ($i = 0; $i < @l;\
    \ $i++) {\n            if ($l[$i] == 0) {\n                $num_zeros++;\n   \
    \         }\n        }\n        # if there are more than two zeros, return 1\n\
    \        if ($num_zeros >= 3) {\n            $x = 1;\n        }\n        else\
    \ {\n            # remove zeros from list\n            @x = @l;\n            for\
    \ ($i = @x - 1; $i >= 0; $i--) {\n                if ($x[$i] == 0) {\n       \
    \             splice(@x, $i, 1);\n                }\n            }\n         \
    \   # for each pair of numbers\n            $x = 0;\n            for ($i = 0;\
    \ $i < @x; $i++) {\n                for ($j = $i + 1; $j < @x; $j++) {\n     \
    \               # find the third number to sum to zero\n                    $a\
    \ = $x[$i];\n                    $b = $x[$j];\n                    $c = -($a +\
    \ $b);\n                    # if the third number is in the list, set x = 1 and\
    \ stop\n                    for ($k = 0; $k < @x; $k++) {\n                  \
    \      if ($x[$k] == $c) {\n                            $x = 1;\n            \
    \                last;\n                        }\n                    }\n   \
    \                 if ($x == 1) {\n                        last;\n            \
    \        }\n                }\n                if ($x == 1) {\n              \
    \      last;\n                }\n            }\n        }\n    }\n    return $x;\n\
    }", "    my($j, $k, $size);\n    $size = scalar(@$l);\n    for ($j = 0; $j < $size;\
    \ $j++) {\n        for ($k = $j + 1; $k < $size; $k++) {\n            if (exists\
    \ $hash{$l->[$j] + $l->[$k]}) {\n                return 1;\n            }\n  \
    \      }\n    }\n    return 0;\n}", "    return \"\";\n}", "    if (scalar(@$l)\
    \ < 3) {\n        return \"\";\n    }", "    my @intlist = @$l;\n    if (scalar(@intlist)\
    \ < 3) { return \"\"; }\n    my %seen;\n    for my $x (@intlist) {\n        for\
    \ my $y (@intlist) {\n            my $z = -$x - $y;\n            if ($seen{$x}\
    \ && $seen{$y} && $seen{$z}) {\n                return 1;\n            }\n   \
    \     }\n        $seen{$x} = 1;\n    }\n    return \"\";\n}", "    my $ret = \"\
    \";\n    for my $i (0..$#$l-2) {\n        for my $j ($i+1..$#$l-1) {\n       \
    \     for my $k ($j+1..$#$l) {\n                if($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    $ret = 1;\n                }\n            }\n \
    \       }\n    }\n    return $ret;\n}", "    my(@c) = ();\n    my($v);\n    foreach\
    \ my $i (0..$#$l-2) {\n        for (my $j = $i+1; $j <= $#$l-1; $j++) {\n    \
    \        $v = 0 - ($l->[$i] + $l->[$j]);\n            if ($v < $l->[$j]) {\n \
    \               last;\n            }\n            if (grep { $_ == $v } @$l[$j+1..$#$l])\
    \ {\n                push @c, $l->[$i], $l->[$j], $v;\n            }\n       \
    \ }\n    }\n    return @c ? join(',', @c) : '';\n}", "    my @l = @$l;\n    my\
    \ %m = ();\n    my $i;\n    my $j;\n    my $k;\n    my $s;\n    my $r = '';\n\
    \    if ( scalar(@l) >= 3 ) {\n        for ( $i = 0; $i < scalar(@l); $i++ ) {\n\
    \            for ( $j = $i + 1; $j < scalar(@l); $j++ ) {\n                $s\
    \ = $l[$i] + $l[$j];\n                if ( !$m{$s} ) {\n                    $m{$s}\
    \ = [ [ $i, $j ] ];\n                }\n                else {\n             \
    \       push( @{ $m{$s} }, [ $i, $j ] );\n                }\n            }\n \
    \       }\n        for ( $i = 0; $i < scalar(@l); $i++ ) {\n            if ( $m{-$l[$i]}\
    \ ) {\n                foreach $h ( @{ $m{-$l[$i]} } ) {\n                   \
    \ if ( $h->[0] != $i && $h->[1] != $i ) {\n                        $r = 1;\n \
    \                       last;\n                    }\n                }\n    \
    \        }\n        }\n    }\n    return $r;\n}", "    my $r = \"\";\n    my $n\
    \ = scalar(@$l);\n    if ($n >= 3) {\n        foreach my $i (0..$n-3) {\n    \
    \        foreach my $j ($i+1..$n-2) {\n                foreach my $k ($j+1..$n-1)\
    \ {\n                    if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n        \
    \                $r = 1;\n                        last;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return $r;\n}", "   \
    \ my($i, $j, $k);\n    my($result) = 0;\n    for($i = 0; $i < @$l; $i++) {\n \
    \       for($j = $i + 1; $j < @$l; $j++) {\n            for($k = $j + 1; $k <\
    \ @$l; $k++) {\n                if($$l[$i] + $$l[$j] + $$l[$k] == 0) {\n     \
    \               $result = 1;\n                }\n            }\n        }\n  \
    \  }\n    return $result;\n}", "    my $n = scalar(@$l);\n    if ($n < 3) {\n\
    \        return \"\";\n    }\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    my($result)\
    \ = \"\";\n    my($i, $j, $k);\n    for($i = 0; $i < $#$l; $i++) {\n        for($j\
    \ = $i + 1; $j < $#$l; $j++) {\n            for($k = $j + 1; $k < $#$l; $k++)\
    \ {\n                if(($l->[$i] + $l->[$j] + $l->[$k]) == 0) {\n           \
    \         $result = 1;\n                }\n            }\n        }\n    }\n \
    \   return $result;\n}", "    my($a, $b, $c);\n    my($a1, $b1, $c1);\n    my($i,\
    \ $j, $k);\n    my($n);\n    $n = $#$l;\n    for($i = 0; $i < $n - 2; $i++) {\n\
    \t$a = $l->[$i];\n\tfor($j = $i + 1; $j < $n - 1; $j++) {\n\t    $b = $l->[$j];\n\
    \t    for($k = $j + 1; $k < $n; $k++) {\n\t\t$c = $l->[$k];\n\t\tif($a + $b +\
    \ $c == 0) {\n\t\t    return($a, $b, $c);\n\t\t}\n\t    }\n\t}\n    }\n    return();\n\
    }", "    @$l = sort {$a <=> $b} @$l;\n    my($i, $j, $k);\n    for($i = 0; $i\
    \ < @$l - 2; $i++) {\n        $j = $i + 1;\n        $k = @$l - 1;\n        while($j\
    \ < $k) {\n            if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n           \
    \     return 1;\n            } elsif($l->[$i] + $l->[$j] + $l->[$k] < 0) {\n \
    \               $j++;\n            } else {\n                $k--;\n         \
    \   }\n        }\n    }\n    return \"\";\n}", "    my @list = @$l;\n    if (@list\
    \ < 3) {\n        return \"\";\n    }\n    my @sorted = sort {$a <=> $b} @list;\n\
    \    my $length = @sorted;\n    my $x = 0;\n    my $y = 1;\n    my $z = 2;\n \
    \   while ($z < $length) {\n        my $a = $sorted[$x];\n        my $b = $sorted[$y];\n\
    \        my $c = $sorted[$z];\n        if ($a + $b + $c == 0) {\n            return\
    \ 1;\n        }\n        if ($z == $length - 1) {\n            if ($y == $length\
    \ - 2) {\n                return \"\";\n            }\n            $y++;\n   \
    \         $z = $y + 1;\n        } else {\n            $z++;\n        }\n    }\n\
    \    return \"\";\n}", "    my($p, $q, $r);\n    my(@input) = sort {$a <=> $b}\
    \ @$l;\n    my($n) = @input;\n    my($good) = \"\";\n    for ($p = 0; $p < $n\
    \ - 2; $p++) {\n        $q = $p + 1;\n        $r = $n - 1;\n        while ($q\
    \ < $r) {\n            if ($input[$p] + $input[$q] + $input[$r] == 0) {\n    \
    \            $good = 1;\n                last;\n            } elsif ($input[$p]\
    \ + $input[$q] + $input[$r] < 0) {\n                $q++;\n            } else\
    \ {\n                $r--;\n            }\n        }\n    }\n    return $good;\n\
    }", "    # Replace the following line with your implementation of triples_sum_to_zero\n\
    \    return 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n    my $j;\n    my\
    \ $k;\n    for($i = 0; $i < $n - 2; $i++) {\n        for($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for($k = $j + 1; $k < $n; $k++) {\n              \
    \  if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   my $t = 0;\n    my %h;\n    for (@$l) {\n        $h{$_} = 1;\n    }\n    foreach\
    \ my $i (@$l) {\n        foreach my $j (@$l) {\n            if (($h{-$i-$j}) &&\
    \ (($i ne $j) && ($i ne -$i-$j) && ($j ne -$i-$j))) {\n                $t = 1;\n\
    \            }\n        }\n    }\n    return $t;\n}", "    my $s = 0;\n    foreach\
    \ my $i (0..$#$l - 2) {\n        foreach my $j ($i + 1..$#$l - 1) {\n        \
    \    foreach my $k ($j + 1..$#$l) {\n                $s += (3 * ($l->[$i] + $l->[$j]\
    \ + $l->[$k]) == 0);\n            }\n        }\n    }\n    return $s;\n}", " \
    \   my $ans = \"\";\n    for my $i (0..@$l-1) {\n        for my $j ($i+1..@$l-1)\
    \ {\n            for my $k ($j+1..@$l-1) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    $ans = 1;\n                }\n     \
    \       }\n        }\n    }\n    return $ans;\n}", "    foreach my $x (@$l) {\n\
    \        foreach my $y (@$l) {\n            foreach my $z (@$l) {\n          \
    \      if ($x != $y && $y != $z && $x != $z && $x + $y + $z == 0) {\n        \
    \            return 1;\n                }\n            }\n        }\n    }\n \
    \   return 0;\n}", "    my @a = @$l;\n    my $n = scalar(@a);\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n     \
    \       for (my $k = $j + 1; $k < $n; $k++) {\n                if ($a[$i] + $a[$j]\
    \ + $a[$k] == 0) {\n                    return 1;\n                }\n       \
    \     }\n        }\n    }\n    return 0;\n}", "    my($r) = 0;\n    my($i);\n\
    \    my($j);\n    my($k);\n    for($i = 0; $i < scalar(@$l); $i++) {\n       \
    \ for($j = $i + 1; $j < scalar(@$l); $j++) {\n            for($k = $j + 1; $k\
    \ < scalar(@$l); $k++) {\n                if($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n                    $r = 1;\n                }\n            }\n      \
    \  }\n    }\n    return $r;\n}", "    my $triples = 0;\n    for (my $i = 0; $i\
    \ < @$l - 2; $i++) {\n        for (my $j = $i + 1; $j < @$l - 1; $j++) {\n   \
    \         for (my $k = $j + 1; $k < @$l; $k++) {\n                $triples++ if\
    \ $l->[$i] + $l->[$j] + $l->[$k] == 0;\n            }\n        }\n    }\n    return\
    \ $triples;\n}", "    my $i;\n    my $j;\n    my $k;\n    my $found = 0;\n   \
    \ for($i = 0; $i < $#$l && !$found; $i++){\n        for($j = $i + 1; $j < $#$l\
    \ && !$found; $j++){\n            for($k = $j + 1; $k < $#$l && !$found; $k++){\n\
    \                if($$l[$i] + $$l[$j] + $$l[$k] == 0){\n                    $found\
    \ = 1;\n                }\n            }\n        }\n    }\n    return $found;\n\
    }", "    my @x = @$l;\n    for (my $i = 0; $i < @x; $i++) {\n        for (my $j\
    \ = $i + 1; $j < @x; $j++) {\n            for (my $k = $j + 1; $k < @x; $k++)\
    \ {\n                if ($x[$i] + $x[$j] + $x[$k] == 0) {\n                  \
    \  return 1;\n                }\n            }\n        }\n    }\n    return \"\
    \";\n}", "    my @a = @$l;\n    my $i;\n    my $j;\n    my $k;\n    my $sum;\n\
    \    my $len = @a;\n    for ($i = 0; $i < $len - 2; $i++) {\n        for ($j =\
    \ $i + 1; $j < $len - 1; $j++) {\n            for ($k = $j + 1; $k < $len; $k++)\
    \ {\n                $sum = $a[$i] + $a[$j] + $a[$k];\n                if ($sum\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my($i);\n    my($j);\n    my($k);\n\
    \    my($len) = @$l;\n    for($i = 0; $i < $len; $i++) {\n        for($j = $i\
    \ + 1; $j < $len; $j++) {\n            for($k = $j + 1; $k < $len; $k++) {\n \
    \               if(@$l[$i] + @$l[$j] + @$l[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my($i);\n    my($j);\n    my($k);\n    for ($i = 0; $i < @$l; $i++) {\n   \
    \     for ($j = $i + 1; $j < @$l; $j++) {\n            for ($k = $j + 1; $k <\
    \ @$l; $k++) {\n                if (@$l[$i] + @$l[$j] + @$l[$k] == 0) {\n    \
    \                return 1;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    # your code here\n    my @list = ();\n    my @temp\
    \ = ();\n    my $check = 0;\n    foreach $i (0..scalar(@$l)-1){\n        foreach\
    \ $j ($i+1..scalar(@$l)-1){\n            foreach $k ($j+1..scalar(@$l)-1){\n \
    \               if($$l[$i]+$$l[$j]+$$l[$k] == 0){\n                    @temp =\
    \ ($$l[$i],$$l[$j],$$l[$k]);\n                    @temp = sort{$a<=>$b}@temp;\n\
    \                    if(!(grep {$_ eq \"@temp\"} @list)){\n                  \
    \      push @list, \"@temp\";\n                        $check++;\n           \
    \         }\n                }\n            }\n        }\n    }\n    if($check\
    \ > 0){\n        return 1;\n    }\n    else{\n        return \"\";\n    }\n}",
  "    my $i;\n    my $j;\n    my $k;\n    my $n = $#$l + 1;\n    my $ret = \"\";\n\
    \    for ($i = 0; $i < $n - 2; $i = $i + 1) {\n        for ($j = $i + 1; $j <\
    \ $n - 1; $j = $j + 1) {\n            for ($k = $j + 1; $k < $n; $k = $k + 1)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        $ret = 1;\n                }\n            }\n        }\n    }\n    return\
    \ $ret;\n}", "    for my $i (0..$#$l-2) {\n        for my $j ($i+1..$#$l-1) {\n\
    \            for my $k ($j+1..$#$l) {\n                return 1 if $l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0;\n            }\n        }\n    }\n    return \"\"\
    ;\n}", "    my @set = ();\n    foreach (@$l) {\n        if ($_ == 0) {\n     \
    \       if (exists $set[0]) {\n                return 1;\n            } else {\n\
    \                $set[0] = 0;\n            }\n        } else {\n            if\
    \ (exists $set[-$_]) {\n                return 1;\n            } else {\n    \
    \            $set[$_] = 1;\n            }\n        }\n    }\n    return \"\";\n\
    }", "    my $n = scalar(@$l);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    my($i, $j,\
    \ $k);\n    my($ret);\n    $ret = \"\";\n    for($i = 0; $i < $#$l; $i++) {\n\
    \        for($j = $i + 1; $j < $#$l; $j++) {\n            for($k = $j + 1; $k\
    \ < $#$l; $k++) {\n                if($$l[$i] + $$l[$j] + $$l[$k] == 0) {\n  \
    \                  $ret = 1;\n                }\n            }\n        }\n  \
    \  }\n    return $ret;\n}", "    for my $i (0..scalar(@$l)-1) {\n        for my\
    \ $j ($i+1..scalar(@$l)-1) {\n            for my $k ($j+1..scalar(@$l)-1) {\n\
    \                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                \
    \    return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    if(scalar(@$l) < 3) { return \"\"; }\n    my %h = ();\n    foreach\
    \ my $x (@$l) {\n        if(exists($h{$x})) {\n            if($h{$x} == 2) { return\
    \ 1; }\n            $h{$x}++;\n        } else {\n            $h{$x} = 1;\n   \
    \     }\n    }\n    for(my $i = 0; $i < scalar(@$l) - 1; $i++) {\n        for(my\
    \ $j = $i + 1; $j < scalar(@$l); $j++) {\n            my $x = $l->[$i];\n    \
    \        my $y = $l->[$j];\n            my $z = -($x + $y);\n            if(exists($h{$z}))\
    \ {\n                if($z == $x && $h{$x} == 1) {\n                    next;\n\
    \                }\n                if($z == $y && $h{$y} == 1) {\n          \
    \          next;\n                }\n                return 1;\n            }\n\
    \        }\n    }\n    return \"\";\n}", "    my($c);\n    foreach my $a (@$l)\
    \ {\n\tforeach my $b (@$l) {\n\t    foreach my $c (@$l) {\n\t\tif (($a != $b)\
    \ && ($a != $c) && ($b != $c) &&\n\t\t    ($a + $b + $c == 0)) {\n\t\t    return\
    \ \"1\";\n\t\t}\n\t    }\n\t}\n    }\n    return \"\";\n}", "    my($i);\n   \
    \ my($j);\n    my($k);\n    my($count);\n    $count = 0;\n    for ($i = 0; $i\
    \ < (scalar(@$l) - 2); $i++) {\n        for ($j = $i + 1; $j < (scalar(@$l) -\
    \ 1); $j++) {\n            for ($k = $j + 1; $k < scalar(@$l); $k++) {\n     \
    \           if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}", " \
    \   for (my $i = 0; $i < @$l - 2; $i++) {\n        for (my $j = $i + 1; $j < @$l\
    \ - 1; $j++) {\n            for (my $k = $j + 1; $k < @$l; $k++) {\n         \
    \       if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my $l_len = scalar(@$l);\n    if ($l_len < 3) { return(\"\"); }\n    my @sorted\
    \ = sort { $a <=> $b } @$l;\n    for (my $i = 0; $i < $l_len - 2; $i++) {\n  \
    \      for (my $j = $i + 1; $j < $l_len - 1; $j++) {\n            for (my $k =\
    \ $j + 1; $k < $l_len; $k++) {\n                if (($sorted[$i] + $sorted[$j]\
    \ + $sorted[$k]) == 0) {\n                    return(1);\n                }\n\
    \            }\n        }\n    }\n    return(\"\");\n}", "    my($n) = @$l;\n\
    \    for(my($i) = 0; $i < $n; $i++) {\n        for(my($j) = $i + 1; $j < $n; $j++)\
    \ {\n            for(my($k) = $j + 1; $k < $n; $k++) {\n                if($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    foreach my $a\
    \ (@$l) {\n        foreach my $b (@$l) {\n            foreach my $c (@$l) {\n\
    \                if ($a + $b + $c == 0) {\n                    return 1;\n   \
    \             }\n            }\n        }\n    }\n    return \"\";\n}", "    my($a,\
    \ $b, $c);\n    for $a (@$l) {\n        for $b (@$l) {\n            for $c (@$l)\
    \ {\n                return 1 if $a + $b + $c == 0;\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my($i, $j, $k);\n    my(@sorted_list) = sort\
    \ {$a <=> $b} @$l;\n    for($i = 0; $i < $#sorted_list; $i++) {\n\t$j = $i + 1;\n\
    \t$k = $#sorted_list;\n\twhile($j < $k) {\n\t    if($sorted_list[$i] + $sorted_list[$j]\
    \ + $sorted_list[$k] == 0) {\n\t\treturn 1;\n\t    }\n\t    elsif($sorted_list[$i]\
    \ + $sorted_list[$j] + $sorted_list[$k] < 0) {\n\t\t$j++;\n\t    }\n\t    else\
    \ {\n\t\t$k--;\n\t    }\n\t}\n    }\n    return \"\";\n}", "    my $ans = \"\"\
    ;\n    foreach my $i (0..$#$l-2) {\n\tforeach my $j ($i+1..$#$l-1) {\n\t    foreach\
    \ my $k ($j+1..$#$l) {\n\t\tif ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\t\t \
    \   $ans = 1;\n\t\t}\n\t    }\n\t}\n    }\n    return $ans;\n}", "    my($r) =\
    \ \"\";\n    if (scalar(@$l) >= 3) {\n        my(@s) = sort {$a <=> $b} @$l;\n\
    \        my($i) = 0;\n        while ($i < scalar(@s) - 2) {\n            my($j)\
    \ = $i + 1;\n            my($k) = scalar(@s) - 1;\n            while ($j < $k)\
    \ {\n                my($t) = $s[$i] + $s[$j] + $s[$k];\n                if ($t\
    \ == 0) {\n                    $r = 1;\n                    last;\n          \
    \      }\n                elsif ($t < 0) {\n                    $j++;\n      \
    \          }\n                else {\n                    $k--;\n            \
    \    }\n            }\n            last if ($r);\n            $i++;\n        }\n\
    \    }\n    return $r;\n}", "    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    for ($i = 0; $i < scalar(@$l); $i++) {\n        for ($j = $i + 1; $j < scalar(@$l);\
    \ $j++) {\n            for ($k = $j + 1; $k < scalar(@$l); $k++) {\n         \
    \       if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my($i, $j, $k);\n    for ($i = 0; $i < scalar(@$l); $i++) {\n        for ($j\
    \ = $i + 1; $j < scalar(@$l); $j++) {\n            for ($k = $j + 1; $k < scalar(@$l);\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my($u) = {};\n    my($i, $j, $k);\n    foreach $i (@$l)\
    \ {\n        $u->{$i} = 1;\n    }\n    foreach $i (@$l) {\n        foreach $j\
    \ (@$l) {\n            if (($i < $j) && ($u->{$i} + $u->{$j})) {\n           \
    \     $k = -($i + $j);\n                if ($u->{$k}) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my(@A) = @$l;\n    my(@B);\n    my(@C);\n    my($a, $b, $c);\n    if(scalar(@A)\
    \ < 3) {\n        return \"\";\n    }\n    if(scalar(@A) == 3) {\n        return\
    \ $A[0] + $A[1] + $A[2] == 0 ? 1 : \"\";\n    }\n    @B = @A;\n    while(scalar(@B)\
    \ > 2) {\n        $a = shift(@B);\n        @C = @B;\n        while(scalar(@C)\
    \ > 1) {\n            $b = shift(@C);\n            foreach $c (@C) {\n       \
    \         if($a + $b + $c == 0) {\n                    return 1;\n           \
    \     }\n            }\n        }\n    }\n    return \"\";\n}", "    my @a = sort\
    \ {$a <=> $b} @$l;\n    my $curr = 0;\n    my $s = \"\";\n    while($curr < scalar(@a))\
    \ {\n        my $start = $curr + 1;\n        my $end = scalar(@a) - 1;\n     \
    \   while($start < $end) {\n            my $sum = $a[$curr] + $a[$start] + $a[$end];\n\
    \            if($sum == 0) {\n                return 1;\n            }\n     \
    \       elsif($sum < 0) {\n                $start += 1;\n            }\n     \
    \       else {\n                $end -= 1;\n            }\n        }\n       \
    \ $curr += 1;\n    }\n    return $s;\n}", "    my $result = \"\";\n    my $i;\n\
    \    my $j;\n    my $k;\n    for ($i = 0; $i < $#$l - 1; $i++) {\n        for\
    \ ($j = $i + 1; $j < $#$l; $j++) {\n            for ($k = $j + 1; $k < $#$l +\
    \ 1; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n   \
    \                 $result = 1;\n                }\n            }\n        }\n\
    \    }\n    return $result;\n}", "    my @list = @$l;\n    my $n=scalar(@list);\n\
    \    # We will store the value 0 at the index of the list\n    # of all the possible\
    \ sums of pairs of numbers in the list.\n    # If we ever find a match, we can\
    \ return true.\n    my @sums_at_index = ();\n    # We will assume that we don't\
    \ need the value at index 0,\n    # so we will leave it as undef.\n    # For example,\
    \ if the list is [1, 2, 3],\n    # then the index of the sum of 2+3 will be in\
    \ index 5 of @sums_at_index.\n    for (my $i=0; $i<$n; $i++) {\n        for (my\
    \ $j=$i+1; $j<$n; $j++) {\n            my $sum=$list[$i]+$list[$j];\n        \
    \    # If we have seen a 0 at this index, then we have a match!\n            if\
    \ (defined($sums_at_index[$sum])) {\n                return 1;\n            }\n\
    \            $sums_at_index[$sum]=1;\n        }\n    }\n    return \"\";\n}",
  "    for my $i (0..$#$l - 2) {\n        for my $j ($i + 1..$#$l - 1) {\n       \
    \     for my $k ($j + 1..$#$l) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return '';\n}", "    my($i, $j, $k);\n    for($i = 0; $i\
    \ < @$l - 2; $i = $i + 1) {\n        for($j = $i + 1; $j < @$l - 1; $j = $j +\
    \ 1) {\n            for($k = $j + 1; $k < @$l; $k = $k + 1) {\n              \
    \  if($$l[$i] + $$l[$j] + $$l[$k] == 0) {\n                    return 1;\n   \
    \             }\n            }\n        }\n    }\n    return \"\";\n}", "    for\
    \ my $i (0..($#{$l} - 2)) {\n        for my $j (($i + 1)..($#{$l} - 1)) {\n  \
    \          for my $k (($j + 1)..$#{$l}) {\n                return 1 if $l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0;\n            }\n        }\n    }\n    return \"\"\
    ;\n}", "    if( scalar(@$l) < 3 ) {\n        return \"\";\n    }", "    my $length\
    \ = scalar(@$l);\n    if ($length < 3) {\n        return \"\";\n    }\n    my\
    \ %hash = map { $_ => 1 } @$l;\n    for (my $i = 0; $i < $length - 2; $i++) {\n\
    \        for (my $j = $i + 1; $j < $length - 1; $j++) {\n            if (exists\
    \ $hash{-($$l[$i] + $$l[$j])}) {\n                return 1;\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my($l2, $l3);\n    if(@$l < 3) {\n\
    \        return \"\";\n    }\n    for(@$l) {\n        $l2->{$_} = 1;\n    }\n\
    \    for(@$l) {\n        $l3->{$_} = 1;\n    }\n    for(@$l) {\n        return\
    \ 1 if(($l2->{-$_} && $l3->{$_}) || ($l2->{$_} && $l3->{-$_}));\n    }\n    return\
    \ \"\";\n}", "    my $s = 0;\n    my $z = 0;\n    my $hash = {};\n    foreach\
    \ my $n(@$l) {\n        $hash->{$n} = $n;\n    }\n    foreach my $a(keys %$hash)\
    \ {\n        foreach my $b(keys %$hash) {\n            foreach my $c(keys %$hash)\
    \ {\n                if ($a + $b + $c == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   my $r = \"\";\n    my @list = sort @$l;\n    my $i = 0;\n    while($i < @list){\n\
    \        my $j = $i + 1;\n        my $k = @list - 1;\n        while($j < $k){\n\
    \            my $sum = $list[$i] + $list[$j] + $list[$k];\n            if($sum\
    \ == 0){\n                $r = 1;\n                return $r;\n            }\n\
    \            elsif($sum > 0){\n                $k--;\n            }\n        \
    \    else{\n                $j++;\n            }\n        }\n        $i++;\n \
    \   }\n    return $r;\n}", "    if (scalar(@$l) < 3) { return \"\"; }\n    my\
    \ %d;\n    foreach my $i (@$l) {\n        foreach my $j (@$l) {\n            if\
    \ ($i != $j) {\n                $d{$i + $j} = 1;\n            }\n        }\n \
    \   }\n    foreach my $i (@$l) {\n        if (exists($d{-$i})) {\n           \
    \ return 1;\n        }\n    }\n    return \"\";\n}", "    my @nums = sort {$a\
    \ <=> $b} @$l;\n    for (my $i = 0; $i < @nums; $i++) {\n        my $start = $i\
    \ + 1;\n        my $end = @nums - 1;\n        while ($start < $end) {\n      \
    \      my $sum = $nums[$i] + $nums[$start] + $nums[$end];\n            if ($sum\
    \ == 0) {\n                return 1;\n            } elsif ($sum < 0) {\n     \
    \           $start++;\n            } else {\n                $end--;\n       \
    \     }\n        }\n    }\n    return \"\";\n}", "    my $r = \"\";\n    for(my\
    \ $i = 0; $i < $#$l - 2; $i++) {\n        for(my $j = $i + 1; $j < $#$l - 1; $j++)\
    \ {\n            for(my $k = $j + 1; $k < $#$l; $k++) {\n                if($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    $r = 1;\n               \
    \     last;\n                }\n            }\n        }\n    }\n    return $r;\n\
    }", "    my $result = \"\";\n    # empty array\n    if(!@$l) {\n        return\
    \ $result;\n    }\n    # single element\n    if(@$l == 1) {\n        return $result;\n\
    \    }\n    # two elements\n    if(@$l == 2) {\n        return $result;\n    }\n\
    \    # more than two elements\n    $result = sum_to_zero($l);\n    return $result;\n\
    }", "    my @list = @$l;\n    my %num_count;\n    # print \"checking: @list\\\
    n\";\n    my $count = 0;\n    my $first = 0;\n    for my $num (@list) {\n    \
    \    if (exists $num_count{$num}) {\n            $num_count{$num}++;\n       \
    \ } else {\n            $num_count{$num} = 1;\n        }\n        $count++ if\
    \ ($num == 0);\n        $first = $num if ($num < $first);\n    }\n    my $second\
    \ = $first;\n    for my $num (keys %num_count) {\n        if ($num < $second &&\
    \ $num != $first) {\n            $second = $num;\n        }\n    }\n    if ($count\
    \ >= 3) {\n        return 1;\n    } elsif ($count >= 2 && $second < 0) {\n   \
    \     return 1;\n    }\n    my $third = $second;\n    for my $num (keys %num_count)\
    \ {\n        if ($num < $third && $num != $first && $num != $second) {\n     \
    \       $third = $num;\n        }\n    }\n    if ($count >= 1 && $second + $third\
    \ == 0) {\n        return 1;\n    }\n    return 0;\n}", "    my $s = '';\n   \
    \ for my $i (0..$#$l) {\n        for my $j ($i+1..$#$l) {\n            for my\
    \ $k ($j+1..$#$l) {\n                $s = 1 if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0);\n            }\n        }\n    }\n    return $s;\n}", "    my $size =\
    \ scalar(@$l);\n    # print $size;\n    if ($size < 3) {\n        return \"\"\
    ;\n    }", "    my($a);\n    my($b);\n    my($c);\n    my($found) = 0;\n    for\
    \ ($a = 0; $a < @$l; $a++) {\n        for ($b = $a + 1; $b < @$l; $b++) {\n  \
    \          for ($c = $b + 1; $c < @$l; $c++) {\n                $found = 1 if\
    \ ($l->[$a] + $l->[$b] + $l->[$c] == 0);\n            }\n        }\n    }\n  \
    \  return $found;\n}", "    return \"\" if(scalar(@$l) < 3);\n    my @sorted =\
    \ sort {$a <=> $b} @$l;\n    for my $i (0..scalar(@sorted)-3) {\n        my $j\
    \ = $i+1;\n        my $k = scalar(@sorted)-1;\n        while($j < $k) {\n    \
    \        if($sorted[$i] + $sorted[$j] + $sorted[$k] == 0) {\n                return\
    \ 1;\n            } elsif($sorted[$i] + $sorted[$j] + $sorted[$k] < 0) {\n   \
    \             $j += 1;\n            } else {\n                $k -= 1;\n     \
    \       }\n        }\n    }\n    return \"\";\n}", "    return \"\" if @$l < 3;\n\
    \    my @ans;\n    my $p = $l->[0];\n    my @sum = map {$p + $_} @$l[1..$#$l];\n\
    \    for my $i (0..$#sum) {\n        for my $j (0..$#sum) {\n            next\
    \ if $i == $j;\n            if (in_array($sum[$i] + $sum[$j], @$l)) {\n      \
    \          my $a = [$p, $sum[$i], $sum[$j]];\n                @$a = sort {$a <=>\
    \ $b} @$a;\n                push @ans, $a;\n            }\n        }\n    }\n\
    \    @ans = sort {$a->[0] <=> $b->[0]} @ans;\n    return uniq(\\@ans);\n}", " \
    \   my $n = @$l;\n    my $sum;\n    for (my $i = 0; $i < $n; $i++) {\n       \
    \ for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k <\
    \ $n; $k++) {\n                if (($l->[$i] + $l->[$j] + $l->[$k]) == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    if (@$l < 3) {\n        return \"\";\n    }\n\
    \    my %uniq;\n    foreach my $i (@$l) {\n        $uniq{$i} = 1;\n    }\n   \
    \ my @uniq = keys %uniq;\n    my $n = @uniq;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if ($uniq[$i] + $uniq[$j] + $uniq[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my @a = @$l;\n    return \"\" if\
    \ ($#a < 2);\n    my $triples_hash = {};\n    my $i;\n    my $j;\n    my $k;\n\
    \    for ($i = 0; $i <= $#a; $i++) {\n        for ($j = $i + 1; $j <= $#a; $j++)\
    \ {\n            for ($k = $j + 1; $k <= $#a; $k++) {\n                if ($a[$i]\
    \ + $a[$j] + $a[$k] == 0) {\n                    $triples_hash->{$a[$i] . \"-\"\
    \ . $a[$j] . \"-\" . $a[$k]} = 1;\n                }\n            }\n        }\n\
    \    }\n    if (keys %$triples_hash) {\n        return 1;\n    } else {\n    \
    \    return \"\";\n    }\n}", "    my($r) = \"\";\n    my(@a) = ();\n    @a =\
    \ @$l;\n    @a = sort {$a <=> $b} @a;\n    for (my $i = 0; $i < @a; $i++) {\n\
    \        my($s) = $a[$i];\n        my($j) = $i + 1;\n        my($k) = @a - 1;\n\
    \        while ($j < $k) {\n            my($t) = $s + $a[$j] + $a[$k];\n     \
    \       if ($t == 0) {\n                $r = \"1\";\n                $j = $k +\
    \ 1;\n            } elsif ($t < 0) {\n                $j++;\n            } else\
    \ {\n                $k--;\n            }\n        }\n    }\n    return $r;\n}",
  "    my($length) = @$l;\n    my($i);\n    for($i = 0; $i < $length; $i++) {\n  \
    \      my($j);\n        for($j = $i + 1; $j < $length; $j++) {\n            my($k);\n\
    \            for($k = $j + 1; $k < $length; $k++) {\n                my($sum)\
    \ = $l->[$i] + $l->[$j] + $l->[$k];\n                if($sum == 0) {\n       \
    \             return 1;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    for my $i (0..$#$l-2) {\n        for my $j ($i+1..$#$l-1)\
    \ {\n            for my $k ($j+1..$#$l) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return \"\";\n}", "    my $result = \"\";\n \
    \   foreach my $i (0..length($l)-1) {\n        foreach my $j ($i+1..length($l)-1)\
    \ {\n            foreach my $k ($j+1..length($l)-1) {\n                if(substr($l,\
    \ $i, 1) + substr($l, $j, 1) + substr($l, $k, 1) == 0) {\n                   \
    \ $result = 1;\n                }\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    my $r = \"\";\n    #check if there are more than 2 elements\n\
    \    if(scalar(@$l) > 2){\n        #initialize variables\n        my $i = 0;\n\
    \        my $j = 0;\n        my $k = 0;\n        #check whether array has a zero\
    \ or not\n        if(0 ~~ @$l){\n            # if yes, then check the index of\
    \ zero\n            # and check whether the index that is before the zero is\n\
    \            # positive or not, and index after the zero is negative or not\n\
    \            for(@$l){\n                if($_ == 0){\n                    $k =\
    \ $i;\n                }\n                $i++;\n            }\n            $i\
    \ = 0;\n            for(@$l){\n                if($i == $k-1){\n             \
    \       $j = $_;\n                }\n                $i++;\n            }\n  \
    \          $i = 0;\n            for(@$l){\n                if($i == $k+1){\n \
    \                   if($_ == (-1)*$j){\n                        $r = 1;\n    \
    \                }\n                }\n                $i++;\n            }\n\
    \        }else{\n            # if no, then check the array has any negative number\
    \ or not\n            # if yes, then check whether array has any positive number\n\
    \            # or not, if yes, then check whether the sum of these two\n     \
    \       # numbers is equal to the absolute value of the negative number\n    \
    \        for(@$l){\n                if($_ < 0){\n                    for(@$l){\n\
    \                        if($_ > 0){\n                            if($_ + @$l[$i]\
    \ == -1*$_){\n                                $r = 1;\n                      \
    \      }\n                        }\n                        $i++;\n         \
    \           }\n                }\n                $i = 0;\n            }\n   \
    \     }\n    }\n    return $r;\n}", "    my @list = @$l;\n    my $sz = @list;\n\
    \    if($sz < 3) {\n        return \"\";\n    }\n    else {\n        my $flag\
    \ = 0;\n        for my $i (0..($sz-1)) {\n            for my $j ($i+1..($sz-1))\
    \ {\n                for my $k ($j+1..($sz-1)) {\n                    if($list[$i]\
    \ + $list[$j] + $list[$k] == 0) {\n                        $flag = 1;\n      \
    \              }\n                }\n            }\n        }\n        if($flag\
    \ == 1) {\n            return 1;\n        }\n        else {\n            return\
    \ \"\";\n        }\n    }\n}", "    my @a = @$l;\n    my $n = scalar(@a);\n  \
    \  for(my $i = 0; $i < $n - 2; $i = $i + 1) {\n        for(my $j = $i + 1; $j\
    \ < $n - 1; $j = $j + 1) {\n            for(my $k = $j + 1; $k < $n; $k = $k +\
    \ 1) {\n                if($a[$i] + $a[$j] + $a[$k] == 0) {\n                \
    \    return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my($i, $j, $k);\n    for ($i = 0; $i < length($l) - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < length($l) - 1; $j++) {\n            for ($k\
    \ = $j + 1; $k < length($l); $k++) {\n                return 1 if ($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0);\n            }\n        }\n    }\n    return \"\"\
    ;\n}", "    my @l = @$l;\n    if(@l < 3) {\n        return 0;\n    }", "    my\
    \ @list = @$l;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    for $i (0..$#list-2)\
    \ {\n        for $j ($i+1..$#list-1) {\n            for $k ($j+1..$#list) {\n\
    \                return 1 if $list[$i] + $list[$j] + $list[$k] == 0;\n       \
    \     }\n        }\n    }\n    return \"\";\n}", "    return 0;\n}", "    my $len\
    \ = @$l;\n    return 0 if $len < 3;\n    for my $i (0..$len-3) {\n        for\
    \ my $j ($i+1..$len-2) {\n            for my $k ($j+1..$len-1) {\n           \
    \     return 1 if ($l->[$i] + $l->[$j] + $l->[$k] == 0);\n            }\n    \
    \    }\n    }\n    return 0;\n}", "    my $ret = \"\";\n    for (my $i = 0; $i\
    \ < @$l; $i++) {\n        for (my $j = $i + 1; $j < @$l; $j++) {\n           \
    \ for (my $k = $j + 1; $k < @$l; $k++) {\n                if (($l->[$i] + $l->[$j]\
    \ + $l->[$k]) == 0) {\n                    $ret = 1;\n                }\n    \
    \        }\n        }\n    }\n    return $ret;\n}", "    my $match = 0;\n    for(my\
    \ $i = 0; $i < @$l; $i++) {\n        for(my $j = $i + 1; $j < @$l; $j++) {\n \
    \           for(my $k = $j + 1; $k < @$l; $k++) {\n                if($$l[$i]\
    \ + $$l[$j] + $$l[$k] == 0) {\n                    $match = 1;\n             \
    \   }\n            }\n        }\n    }\n    return $match;\n}", "    my(@l) =\
    \ @$l;\n    my($triples) = 0;\n    my($i);\n    my($j);\n    my($k);\n    for($i\
    \ = 0; $i < $#l - 1; $i++) {\n        for($j = $i + 1; $j < $#l; $j++) {\n   \
    \         for($k = $j + 1; $k < $#l + 1; $k++) {\n                if($l[$i] +\
    \ $l[$j] + $l[$k] == 0) {\n                    $triples = 1;\n               \
    \ }\n            }\n        }\n    }\n    return $triples;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
