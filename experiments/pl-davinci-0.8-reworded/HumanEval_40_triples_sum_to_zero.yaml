name: HumanEval_40_triples_sum_to_zero
language: pl
prompt: "# triples_sum_to_zero takes an array of integers as an input.\n# it returns\
  \ 1 if there are three distinct elements in the array that\n# sum to zero, and ''\
  \ otherwise.\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n# 1\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> triples_sum_to_zero([2,\
  \ 4, -5, 3, 9, 7])\n# 1\n# >>> triples_sum_to_zero([1])\n# \"\"\nsub triples_sum_to_zero\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5,\
  \ -1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 5, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $r = \"\";\n    my $i;\n    my $j;\n    my $k;\n    for ($i\
    \ = 0; $i < @$l - 2; $i++) {\n        for ($j = $i + 1; $j < @$l - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    $r = 1;\n               \
    \ }\n            }\n        }\n    }\n    return $r;\n}", "    if (scalar(@$l)\
    \ == 1) {\n        return \"\";\n    }\n    if (scalar(@$l) == 2) {\n        return\
    \ ($l->[0] + $l->[1] == 0) ? 1 : \"\";\n    }\n    my @list = sort {$a <=> $b}\
    \ @$l;\n    my($first, $last) = (0, scalar(@list) - 1);\n    while ($first < $last\
    \ - 1) {\n        my $second = $first + 1;\n        while ($second < $last) {\n\
    \            my $third = $last;\n            while ($second < $third) {\n    \
    \            my $sum = $list[$first] + $list[$second] + $list[$third];\n     \
    \           if ($sum == 0) {\n                    return 1;\n                }\n\
    \                if ($sum < 0) {\n                    last;\n                }\n\
    \                $third--;\n            }\n            $second++;\n        }\n\
    \        $first++;\n    }\n    return \"\";\n}", "    my($a, $b, $c, $t);\n  \
    \  for $a (@$l) {\n        $t->{$a}++;\n    }\n    for $a (@$l) {\n        for\
    \ $b (@$l) {\n            if ($a == $b) {\n                next;\n           \
    \ }\n            if ($t->{-$a-$b}) {\n                return 1;\n            }\n\
    \        }\n    }\n    return \"\";\n}", "    my(@a) = @$l;\n    if (scalar(@a)\
    \ < 3) {\n        return '';\n    }\n    my $h = {};\n    my $i;\n    my $x;\n\
    \    my $y;\n    my $z;\n    for ($i = 0; $i < scalar(@a); $i++) {\n        $x\
    \ = $a[$i];\n        for ($j = $i + 1; $j < scalar(@a); $j++) {\n            $y\
    \ = $a[$j];\n            $z = -($x + $y);\n            if ($h->{$z}) {\n     \
    \           return 1;\n            }\n        }\n        $h->{$x} = 1;\n    }\n\
    \    return '';\n}", "    # Insert your code here\n    return \"\";\n}", "   \
    \ my($i, $j, $k);\n    for($i = 0; $i < @$l - 2; $i++){\n        for($j = $i +\
    \ 1; $j < @$l - 1; $j++){\n            for($k = $j + 1; $k < @$l; $k++){\n   \
    \             if($l->[$i] + $l->[$j] + $l->[$k] == 0){\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my $r = '';\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my @a = @$l;\n\
    \    while($i < @a) {\n        $j = $i + 1;\n        while($j < @a) {\n      \
    \      $k = $j + 1;\n            while($k < @a) {\n                if($a[$i] +\
    \ $a[$j] + $a[$k] == 0) {\n                    $r = 1;\n                    return\
    \ $r;\n                }\n                $k = $k + 1;\n            }\n      \
    \      $j = $j + 1;\n        }\n        $i = $i + 1;\n    }\n    return $r;\n}",
  "    my @list = @$l;\n    my $listLength = scalar @list;\n    if ($listLength <\
    \ 3) {\n        return \"\";\n    }\n    else {\n        # sort the list\n   \
    \     @list = sort {$a <=> $b} @list;\n        for my $i (0..$listLength-1) {\n\
    \            for my $j ($i+1..$listLength-1) {\n                for my $k ($j+1..$listLength-1)\
    \ {\n                    if ($list[$i] + $list[$j] + $list[$k] == 0) {\n     \
    \                   return 1;\n                    }\n                }\n    \
    \        }\n        }\n        return \"\";\n    }\n}", "    my @list = @$l;\n\
    \    my $result = \"\";\n    for(my $i = 0; $i < $#list; $i++){\n        for(my\
    \ $j = $i + 1; $j < $#list; $j++){\n            for(my $k = $j + 1; $k < $#list;\
    \ $k++){\n                my $sum = $list[$i] + $list[$j] + $list[$k];\n     \
    \           if($sum == 0){\n                    $result = 1;\n               \
    \ }\n            }\n        }\n    }\n    return $result;\n}", "    if (@$l <\
    \ 3) {\n        return \"\";\n    }\n    for (my $i = 0; $i < $#$l - 1; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $#$l; $j++) {\n            for (my $k =\
    \ $j + 1; $k <= $#$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my @list = @$l;\n    for(my $i =\
    \ 0; $i < scalar(@list); $i++){\n        for(my $j = $i + 1; $j < scalar(@list);\
    \ $j++){\n            for(my $k = $j + 1; $k < scalar(@list); $k++){\n       \
    \         if($list[$i] + $list[$j] + $list[$k] == 0){\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my @l = @$l;\n    my @results = ();\n    foreach $a (@l) {\n        foreach\
    \ $b (@l) {\n            foreach $c (@l) {\n                if($a+$b+$c == 0)\
    \ {\n                    push(@results, $a);\n                    push(@results,\
    \ $b);\n                    push(@results, $c);\n                }\n         \
    \   }\n        }\n    }\n    @results = sort(@results);\n    my $size = @results;\n\
    \    my $s = \"\";\n    for(my $i = 0; $i < $size; $i += 1) {\n        $s = $s.$results[$i];\n\
    \    }\n    return $s;\n}", "    my $ret = '';\n    my $len = scalar(@$l);\n \
    \   if ($len > 3) {\n        my $num_to_find = 0;\n        my $i = 0;\n      \
    \  my $j = 1;\n        my $k = 2;\n        while ($i < $len) {\n            while\
    \ ($j < $len) {\n                while ($k < $len) {\n                    if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == $num_to_find) {\n                        $ret = 1;\n\
    \                        last;\n                    }\n                    $k++;\n\
    \                }\n                $j++;\n            }\n            $i++;\n\
    \        }\n    }\n    return $ret;\n}", "    my $result = \"\";\n    my %hash;\n\
    \    foreach my $num (@$l) {\n        $hash{$num} = 1;\n    }\n    foreach my\
    \ $key (keys %hash) {\n        my $left = $key;\n        foreach my $num (@$l)\
    \ {\n            if ($hash{-$left-$num} && ($num!=$left) && (-$left-$num)!=$num)\
    \ {\n                $result = 1;\n                last;\n            }\n    \
    \    }\n    }\n    return $result;\n}", "    my($found) = '';\n    my($i);\n \
    \   my($j);\n    my($k);\n    my($num_elements) = scalar(@$l);\n    if ($num_elements\
    \ < 3) {\n\treturn $found;\n    }\n    for ($i = 0; $i < $num_elements-2; $i++)\
    \ {\n\tfor ($j = $i+1; $j < $num_elements-1; $j++) {\n\t    for ($k = $j+1; $k\
    \ < $num_elements; $k++) {\n\t\tif (($$l[$i] + $$l[$j] + $$l[$k]) == 0) {\n\t\t\
    \    $found = 1;\n\t\t    last;\n\t\t}\n\t    }\n\t}\n    }\n    return $found;\n\
    }", "    my $ret = \"\";\n    my %h = ();\n    my @a = sort {$a <=> $b} @$l;\n\
    \    for (my $i = 0; $i < @a; $i++) {\n        for (my $j = $i + 1; $j < @a; $j++)\
    \ {\n            if (exists $h{$a[$i]}{$a[$j]}) {\n                next;\n   \
    \         }\n            my $x = 0 - ($a[$i] + $a[$j]);\n            my $pos =\
    \ search(\\@a, $x, $j + 1, scalar(@a) - 1);\n            if ($pos != -1) {\n \
    \               $ret = 1;\n                last;\n            }\n            $h{$a[$i]}{$a[$j]}\
    \ = 1;\n        }\n    }\n    return $ret;\n}", "    my $r = '';\n    # TODO:\n\
    \    # Check the array. Return 1 if there are three distinct elements a, b, c\n\
    \    # such that a + b + c = 0.\n    # Otherwise, return ''.\n    return $r;\n\
    }", "    my @arr = @$l;\n    my $result = '';\n    my %hash = ();\n    my $num_0\
    \ = 0;\n    for (my $i = 0; $i < scalar(@arr); $i++) {\n        if ($arr[$i] ==\
    \ 0) {\n            $num_0++;\n        } else {\n            if (exists $hash{$arr[$i]})\
    \ {\n                $hash{$arr[$i]}++;\n            } else {\n              \
    \  $hash{$arr[$i]} = 1;\n            }\n        }\n    }\n    if ($num_0 >= 3)\
    \ {\n        $result = 1;\n    } else {\n        for (my $i = 0; $i < scalar(@arr);\
    \ $i++) {\n            if ($arr[$i] != 0) {\n                if (exists $hash{-2\
    \ * $arr[$i]}) {\n                    $result = 1;\n                    last;\n\
    \                }\n            }\n        }\n    }\n    return $result;\n}",
  "    my @a = @$l;\n    # your code here\n    my $val;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $len = scalar @a;\n    if ($len < 3) {\n        return \"\"\
    ;\n    }\n    for ($i = 0; $i < $len; $i += 1) {\n        for ($j = $i + 1; $j\
    \ < $len; $j += 1) {\n            for ($k = $j + 1; $k < $len; $k += 1) {\n  \
    \              if ($a[$i] + $a[$j] + $a[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    return \"\" if scalar(@$l) < 3;\n    @$l = sort {$a <=> $b} @$l;\n    for my\
    \ $i (0..scalar(@$l)-3) {\n        my $ii = $i+1;\n        my $iii = scalar(@$l)-1;\n\
    \        while ($ii < $iii) {\n            my $e = $l->[$i] + $l->[$ii] + $l->[$iii];\n\
    \            if ($e == 0) {\n                return 1;\n            } elsif ($e\
    \ > 0) {\n                $iii--;\n            } else {\n                $ii++;\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    my $hash;\n    my\
    \ $result = \"\";\n    foreach my $el (@$l) {\n        my $key = -$el;\n     \
    \   if ($hash->{$key}) {\n            if (length($hash->{$key}) == 1) {\n    \
    \            $hash->{$key} .= $el;\n            }\n            elsif ($hash->{$key}\
    \ =~ /$el/) {\n                $hash->{$key} =~ s/$el//;\n                $result\
    \ = 1;\n            }\n        }\n        elsif ($hash->{$el}) {\n           \
    \ $hash->{$el} .= $el;\n        }\n        else {\n            $hash->{$el} =\
    \ \"\";\n        }\n    }\n    return $result;\n}", "    my @aa = @$l;\n    my\
    \ $n = scalar(@aa);\n    my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if ($aa[$i] + $aa[$j] +\
    \ $aa[$k] == 0) {\n                    return 1;\n                }\n        \
    \    }\n        }\n    }\n    return \"\";\n}", "    my @arr = @$l;\n    my %hash\
    \ = ();\n    foreach $x (@arr) {\n        if(exists $hash{$x}) {\n           \
    \ $hash{$x} = $hash{$x} + 1;\n        } else {\n            $hash{$x} = 1;\n \
    \       }\n    }\n    foreach $y (@arr) {\n        if($y != 0) {\n           \
    \ if(exists $hash{-$y}) {\n                if(exists $hash{-2*$y}) {\n       \
    \             return 1;\n                }\n            }\n        } else {\n\
    \            if($hash{$y} >= 3) {\n                return 1;\n            }\n\
    \        }\n    }\n    return \"\";\n}", "    my @sorted = sort {$a <=> $b} @$l;\n\
    \    my $pos = 0;\n    while ($pos < scalar(@sorted) - 2) {\n        my $neg =\
    \ $pos + 1;\n        my $end = scalar(@sorted) - 1;\n        while ($neg < $end)\
    \ {\n            if ($sorted[$pos] + $sorted[$neg] + $sorted[$end] == 0) {\n \
    \               return 1;\n            } elsif ($sorted[$pos] + $sorted[$neg]\
    \ + $sorted[$end] < 0) {\n                $neg += 1;\n            } else {\n \
    \               $end -= 1;\n            }\n        }\n        $pos += 1;\n   \
    \ }\n    return \"\";\n}", "    my(@sorted);\n    my($idx);\n    my($idx1);\n\
    \    my($idx2);\n    my($len);\n    my($left);\n    my($right);\n    my($sum);\n\
    \    if ($#{$l} < 2) {\n        return '';\n    }\n    @sorted = (sort {$a <=>\
    \ $b} @{$l});\n    $len = $#sorted;\n    for ($idx1 = 0; $idx1 < $len; $idx1++)\
    \ {\n        $left = $idx1 + 1;\n        $right = $len;\n        while ($left\
    \ < $right) {\n            $sum = $sorted[$idx1] + $sorted[$left] + $sorted[$right];\n\
    \            if ($sum == 0) {\n                return 1;\n            }\n    \
    \        if ($sum < 0) {\n                $left++;\n            }\n          \
    \  else {\n                $right--;\n            }\n        }\n    }\n    return\
    \ '';\n}", "    return \"\" if @$l < 3;\n    my $result = \"\";\n    my $seen\
    \ = {};\n    for my $i (@$l) {\n        $seen->{$i} = 1;\n    }\n    for my $i\
    \ (@$l) {\n        for my $j (@$l) {\n            if ($seen->{-$i-$j}) {\n   \
    \             $result = 1;\n                last;\n            }\n        }\n\
    \    }\n    return $result;\n}", "    my $zero_exists = '';\n    my $prev_n =\
    \ 0;\n    my $prev_prev_n = 0;\n    foreach my $n (@$l) {\n        if ($prev_n\
    \ + $prev_prev_n + $n == 0) {\n            $zero_exists = 1;\n            last;\n\
    \        }\n        $prev_prev_n = $prev_n;\n        $prev_n = $n;\n    }\n  \
    \  return $zero_exists;\n}", "    return '' if @$l < 3;\n    my %h;\n    foreach\
    \ my $e (@$l) {\n        foreach my $x (keys %h) {\n            if (exists $h{$e\
    \ + $x}) {\n                return 1;\n            }\n        }\n        $h{$e}\
    \ = 1;\n    }\n    return '';\n}", "    if (@$l < 3) {\n        return \"\";\n\
    \    }\n    my %pairs;\n    for (my $i = 0; $i < @$l - 1; $i++) {\n        for\
    \ (my $j = $i + 1; $j < @$l; $j++) {\n            $pairs{$l->[$i] + $l->[$j]}\
    \ = 1;\n        }\n    }\n    for my $val (@$l) {\n        if ($pairs{-$val})\
    \ {\n            return 1;\n        }\n    }\n    return \"\";\n}", "    my $d\
    \ = {};\n    foreach my $i (0..@$l-1) {\n        foreach my $j ($i+1..@$l-1) {\n\
    \            if (defined $d->{-($$l[$i]+$$l[$j])}) {\n                return 1;\n\
    \            }\n        }\n        $d->{$$l[$i]} = 1;\n    }\n    return \"\"\
    ;\n}", "    my $triple = '';\n    my $k = 0;\n    while ($k < $#$l) {\n      \
    \  my $j = $k + 1;\n        while ($j < $#$l) {\n            my $i = $j + 1;\n\
    \            while ($i <= $#$l) {\n                if ($l->[$k] + $l->[$j] + $l->[$i]\
    \ == 0) {\n                    $triple = 1;\n                }\n             \
    \   $i++;\n            }\n            $j++;\n        }\n        $k++;\n    }\n\
    \    return $triple;\n}", "    my @a = @$l;\n    my $N = scalar(@a);\n    my $found\
    \ = 0;\n    my $i = 0;\n    while (!$found && $i < $N - 2) {\n        my $j =\
    \ $i + 1;\n        while (!$found && $j < $N - 1) {\n            my $k = $j +\
    \ 1;\n            while (!$found && $k < $N) {\n                if ($a[$i] + $a[$j]\
    \ + $a[$k] == 0) {\n                    $found = 1;\n                }\n     \
    \           $k++;\n            }\n            $j++;\n        }\n        $i++;\n\
    \    }\n    return $found;\n}", "    my $n = $#{$l} + 1;\n    my $i;\n    my $j;\n\
    \    my $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n              \
    \  if (($l->[$i] + $l->[$j] + $l->[$k]) == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   my($r) = '';\n    my(@s) = sort {$a <=> $b} @$l;\n    my($s);\n    my($e);\n\
    \    my($p);\n    my($n);\n    $s = 0;\n    $e = $#s;\n    while ($s < $e) {\n\
    \t$p = $s + 1;\n\t$n = $e;\n\twhile ($p < $n) {\n\t    if ($s[$s] + $s[$p] + $s[$n]\
    \ == 0) {\n\t\t$r = 1;\n\t\tlast;\n\t    }\n\t    elsif ($s[$s] + $s[$p] + $s[$n]\
    \ < 0) {\n\t\t$p++;\n\t    }\n\t    else {\n\t\t$n--;\n\t    }\n\t}\n\tlast if\
    \ $r == 1;\n\t$s++;\n    }\n    return $r;\n}", "    my @a = @$l;\n    my %h;\n\
    \    my @r;\n    foreach my $a(@a) {\n        if(exists $h{$a}) {\n          \
    \  push @r, $a;\n        } else {\n            $h{-$a} = 1;\n        }\n    }\n\
    \    return scalar(@r) >= 3 ? 1 : '';\n}", "    @sorted = sort {$a <=> $b} @$l;\n\
    \    for ($i = 0; $i < @sorted - 2; $i++) {\n        $j = $i + 1;\n        $k\
    \ = @sorted - 1;\n        while ($j < $k) {\n            $sum = $sorted[$i] +\
    \ $sorted[$j] + $sorted[$k];\n            if ($sum == 0) {\n                return\
    \ 1;\n            }\n            elsif ($sum < 0) {\n                $j++;\n \
    \           }\n            else {\n                $k--;\n            }\n    \
    \    }\n    }\n    return \"\";\n}", "    if (scalar(@$l) < 3) {\n        return\
    \ '';\n    }\n    my %map = ();\n    for my $i (0..scalar(@$l)-1) {\n        for\
    \ my $j ($i+1..scalar(@$l)-1) {\n            if (exists($map{-$l->[$i]-$l->[$j]}))\
    \ {\n                return 1;\n            }\n        }\n        $map{$l->[$i]}\
    \ = 1;\n    }\n    return '';\n}", "    my $i;\n    my $j;\n    my $k;\n    my\
    \ $lasti;\n    my $lastj;\n    my $lastk;\n    my $len;\n    my $tmp;\n    $len\
    \ = scalar(@$l);\n    if ($len < 3) {\n        return \"\";\n    }\n    $lasti\
    \ = $len - 3;\n    for ($i = 0; $i <= $lasti; $i++) {\n        $lastj = $len -\
    \ 2;\n        for ($j = $i + 1; $j <= $lastj; $j++) {\n            $lastk = $len\
    \ - 1;\n            for ($k = $j + 1; $k <= $lastk; $k++) {\n                if\
    \ ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n   \
    \             }\n            }\n        }\n    }\n    return \"\";\n}", "    my($i,\
    \ $j, $k);\n    for ($i = 0; $i < scalar(@$l) - 2; $i++) {\n        for ($j =\
    \ $i + 1; $j < scalar(@$l) - 1; $j++) {\n            for ($k = $j + 1; $k < scalar(@$l);\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    my @t = sort {$a <=> $b} @$l;\n    my $i = 0;\n  \
    \  my $j = 1;\n    my $k = 2;\n    while ($k < @t) {\n        if ($t[$i] + $t[$j]\
    \ + $t[$k] == 0) {\n            return 1;\n        } elsif ($t[$i] + $t[$j] +\
    \ $t[$k] < 0) {\n            $j += 1;\n            $k += 1;\n        } else {\n\
    \            $i += 1;\n            $j += 1;\n            $k += 1;\n        }\n\
    \    }\n    return \"\";\n}", "    my @list = @$l;\n    my $n = scalar(@list);\n\
    \    return '' if $n < 3;\n    @list = sort {$a <=> $b} @list;\n    foreach my\
    \ $i (0..$n-3) {\n        foreach my $j ($i+1..$n-2) {\n            foreach my\
    \ $k ($j+1..$n-1) {\n                return 1 if $list[$i] + $list[$j] + $list[$k]\
    \ == 0;\n            }\n        }\n    }\n    return '';\n}", "    my @neg = grep\
    \ { $_ < 0 } @$l;\n    my @pos = grep { $_ > 0 } @$l;\n    return '' unless @neg\
    \ && @pos;\n    my %neg = map { $_ => 1 } @neg;\n    my %pos = map { $_ => 1 }\
    \ @pos;\n    my %zero = map { $_ => 1 } grep { $_ == 0 } @$l;\n    return 1 if\
    \ $zero{0} && $zero{0} > 2;\n    foreach my $n (@neg) {\n        return 1 if ($pos{-$n}\
    \ || $zero{-$n});\n    }\n    foreach my $p (@pos) {\n        return 1 if ($neg{-$p}\
    \ || $zero{-$p});\n    }\n    return '';\n}", "    for my $i (0..$#$l-2) {\n \
    \       for my $j ($i+1..$#$l-1) {\n            for my $k ($j+1..$#$l) {\n   \
    \             return 1 if $l->[$i] + $l->[$j] + $l->[$k] == 0;\n            }\n\
    \        }\n    }\n    return '';\n}", "    my($res) = '';\n    for (my($i) =\
    \ 0; $i < @$l; $i++) {\n        for (my($j) = $i + 1; $j < @$l; $j++) {\n    \
    \        for (my($k) = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    $res = 1;\n             \
    \       last;\n                }\n            }\n        }\n    }\n    return\
    \ $res;\n}", "    my $n;\n    my $i;\n    my $j;\n    my $k;\n    my $count;\n\
    \    my $tmp;\n    my @a;\n    my $sum;\n    $n = scalar(@$l);\n    if ($n < 3)\
    \ {\n        return \"\";\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n; $j++) {\n            if ($l->[$i] > $l->[$j]) {\n   \
    \             $tmp = $l->[$i];\n                $l->[$i] = $l->[$j];\n       \
    \         $l->[$j] = $tmp;\n            }\n        }\n    }\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $a[$i] = $l->[$i];\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n    \
    \        for ($k = $j + 1; $k < $n; $k++) {\n                $sum = $a[$i] + $a[$j]\
    \ + $a[$k];\n                if ($sum == 0) {\n                    $count = 1;\n\
    \                }\n            }\n        }\n    }\n    return ($count == 1)\
    \ ? 1 : \"\";\n}", "    my($i, $j, $k);\n    my($result) = '';\n    my($subsum);\n\
    \    for ($i = 0; $i < $#$l; $i++) {\n        for ($j = $i + 1; $j < $#$l; $j++)\
    \ {\n            for ($k = $j + 1; $k < $#$l; $k++) {\n                $subsum\
    \ = $l->[$i] + $l->[$j] + $l->[$k];\n                if ($subsum == 0) {\n   \
    \                 $result = 1;\n                    last;\n                }\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my @l = @$l;\n\
    \    my %h;\n    for (my $i = 0; $i < @l; $i++) {\n        for (my $j = $i + 1;\
    \ $j < @l; $j++) {\n            my $v = $l[$i] + $l[$j];\n            push @{$h{$v}},\
    \ [$i, $j];\n        }\n    }\n    for (my $i = 0; $i < @l; $i++) {\n        if\
    \ (defined $h{-$l[$i]}) {\n            my $r = $h{-$l[$i]};\n            for (my\
    \ $j = 0; $j < @$r; $j++) {\n                if ($i != $r->[$j][0] && $i != $r->[$j][1])\
    \ {\n                    return 1;\n                }\n            }\n       \
    \ }\n    }\n    return '';\n}", "    my $result = 0;\n    for (my $i = 0; $i <\
    \ @$l - 2; $i++) {\n        for (my $j = $i + 1; $j < @$l - 1; $j++) {\n     \
    \       for (my $k = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0) {\n                    $result = 1;\n            \
    \    }\n            }\n        }\n    }\n    return $result;\n}", "    my @list\
    \ = @$l;\n    if (scalar(@list) < 3) {\n\treturn \"\";\n    }\n    my %ht = ();\n\
    \    foreach my $e (@list) {\n\tif (!defined($ht{$e})) {\n\t    $ht{$e} = 1;\n\
    \t} else {\n\t    $ht{$e}++;\n\t}\n    }\n    if ($ht{0} >= 3) {\n\treturn 1;\n\
    \    }\n    foreach my $i (0..$#list) {\n\tmy $e1 = $list[$i];\n\tforeach my $j\
    \ ($i+1..$#list) {\n\t    my $e2 = $list[$j];\n\t    if ($ht{-$e1-$e2} >= 1) {\n\
    \t\treturn 1;\n\t    }\n\t}\n    }\n    return \"\";\n}", "    my($i);\n    for($i\
    \ = 0; $i < @$l - 2; $i++) {\n        my($a) = $l->[$i];\n        my($j);\n  \
    \      for($j = $i + 1; $j < @$l - 1; $j++) {\n            my($b) = $l->[$j];\n\
    \            my($k);\n            for($k = $j + 1; $k < @$l; $k++) {\n       \
    \         my($c) = $l->[$k];\n                if($a + $b + $c == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    my $c = '';\n    my @a = sort(@$l);\n    for my $i\
    \ (0..$#a-2) {\n        my $j = $i+1;\n        my $k = $#a;\n        while ($j\
    \ < $k) {\n            my $r = $a[$i] + $a[$j] + $a[$k];\n            if ($r ==\
    \ 0) {\n                $c = 1;\n                last;\n            } elsif ($r\
    \ < 0) {\n                $j++;\n            } else {\n                $k--;\n\
    \            }\n        }\n    }\n    return $c;\n}", "    my $i;\n    my $j;\n\
    \    my $k;\n    for ($i = 0; $i < @$l - 2; $i = $i + 1) {\n        for ($j =\
    \ $i + 1; $j < @$l - 1; $j = $j + 1) {\n            for ($k = $j + 1; $k < @$l;\
    \ $k = $k + 1) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    my($sum, $h);\n    $h = {};\n    foreach $a\
    \ (@$l) {\n        foreach $b (@$l) {\n            $sum = $a + $b;\n         \
    \   if (exists($h->{-$sum})) {\n                return 1;\n            }\n   \
    \         $h->{$sum} = 1;\n        }\n    }\n    return \"\";\n}", "    my($x,\
    \ $y, $z);\n    my($r) = '';\n    my(%hash);\n    foreach $x (@$l) {\n       \
    \ $hash{$x}++;\n    }\n    foreach $x (@$l) {\n        foreach $y (@$l) {\n  \
    \          $z = - $x - $y;\n            if($hash{$z} > 0 && $x < $y && $y < $z)\
    \ {\n                $r = 1;\n                last;\n            }\n        }\n\
    \    }\n    return $r;\n}", "    my $result = \"\";\n    for(my $i = 0; $i < @$l;\
    \ $i++) {\n        for(my $j = $i + 1; $j < @$l; $j++) {\n            for(my $k\
    \ = $j + 1; $k < @$l; $k++) {\n                if($$l[$i] + $$l[$j] + $$l[$k]\
    \ == 0) {\n                    $result = 1;\n                }\n            }\n\
    \        }\n    }\n    return $result;\n}", "    my($i, $j, $k);\n    my($sum);\n\
    \    my($result) = \"\";\n    for ($i = 0; $i < length(@$l); $i = $i + 1) {\n\
    \        for ($j = $i + 1; $j < length(@$l); $j = $j + 1) {\n            for ($k\
    \ = $j + 1; $k < length(@$l); $k = $k + 1) {\n                $sum = $$l[$i] +\
    \ $$l[$j] + $$l[$k];\n                if ($sum == 0) {\n                    $result\
    \ = 1;\n                }\n            }\n        }\n    }\n    return $result;\n\
    }", "    my @list = sort {$a <=> $b} @$l;\n    my $n = scalar @list;\n    my $k\
    \ = 0;\n    my $j = 0;\n    my $i = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n\
    \        $j = $i + 1;\n        $k = $n - 1;\n        while ($j < $k) {\n     \
    \       my $sum = $list[$i] + $list[$j] + $list[$k];\n            if ($sum ==\
    \ 0) {\n                return 1;\n            } elsif ($sum < 0) {\n        \
    \        $j++;\n            } else {\n                $k--;\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my($x, $y, $z);\n    foreach $x (@$l)\
    \ {\n        foreach $y (@$l) {\n            foreach $z (@$l) {\n            \
    \    if ($x != $y && $y != $z && $x != $z &&\n                    $x + $y + $z\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    if(scalar(@$l) < 3) {\n        return\
    \ \"\";\n    }\n    my %seen = ();\n    foreach my $i (@$l) {\n        $seen{$i}\
    \ = 1;\n    }\n    my @keys = keys %seen;\n    foreach my $i (@keys) {\n     \
    \   foreach my $j (@keys) {\n            if(($i != $j) && (exists $seen{-$i-$j}))\
    \ {\n                return 1;\n            }\n        }\n    }\n    return \"\
    \";\n}", "    my $len = scalar(@$l);\n    if ($len == 1) {\n        return '';\n\
    \    }\n    for (my $i = 0; $i < $len - 2; $i++) {\n        for (my $j = $i +\
    \ 1; $j < $len - 1; $j++) {\n            for (my $k = $j + 1; $k < $len; $k++)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        return 1;\n                }\n            }\n        }\n    }\n    return\
    \ '';\n}", "    @$l == 3 or return '';\n    $l->[0] + $l->[1] + $l->[2] == 0 and\
    \ return 1;\n    return '';\n}", "    if (scalar(@$l) < 3) {\n        return '';\n\
    \    } else {\n        for my $i (0..scalar(@$l)-1) {\n            for my $j (0..scalar(@$l)-1)\
    \ {\n                for my $k (0..scalar(@$l)-1) {\n                    if ($i\
    \ != $j && $j != $k && $i != $k && $l->[$i] + $l->[$j] + $l->[$k] == 0) {\n  \
    \                      return 1;\n                    }\n                }\n \
    \           }\n        }\n        return '';\n    }\n}", "    if (scalar(@$l)\
    \ < 3) {\n        return \"\";\n    }", "    for my $i (0..$#$l-2) {\n       \
    \ for my $j ($i+1..$#$l-1) {\n            for my $k ($j+1..$#$l) {\n         \
    \       if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return '';\n}",
  "    my $result = \"\";\n    # sort the list, then walk through the list\n    #\
    \ in O(n) time, and check whether we can find\n    # three values that sum to\
    \ zero in O(log n) time.\n    my @sorted = sort {$a <=> $b} @$l;\n    for (my\
    \ $i = 0; $i < scalar(@sorted); $i++) {\n        for (my $j = $i + 1; $j < scalar(@sorted);\
    \ $j++) {\n            my $wanted = -($sorted[$i] + $sorted[$j]);\n          \
    \  if (binary_search(\\@sorted, $wanted) >= 0) {\n                $result = 1;\n\
    \                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "    foreach my $i (0..$#$l - 2) {\n        foreach my $j ($i + 1..$#$l -\
    \ 1) {\n            foreach my $k ($j + 1..$#$l) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return '';\n}", "    return \"\" if\
    \ $#$l < 2;\n    my $r = \"\";\n    my($i, $j, $k);\n    for ($i = 0; $i <= $#$l;\
    \ $i++) {\n        for ($j = $i + 1; $j <= $#$l; $j++) {\n            for ($k\
    \ = $j + 1; $k <= $#$l; $k++) {\n                $r = 1 if $l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0;\n            }\n        }\n    }\n    return $r;\n}", "   \
    \ return \"\" if(scalar(@$l) < 3);\n    my $ret = \"\";\n    for my $i (0..scalar(@$l)-1)\
    \ {\n        for my $j ($i+1..scalar(@$l)-1) {\n            for my $k ($j+1..scalar(@$l)-1)\
    \ {\n                $ret = 1 if($l->[$i] + $l->[$j] + $l->[$k] == 0);\n     \
    \       }\n        }\n    }\n    return $ret;\n}", "    my(@l) = @$l;\n    my(@r);\n\
    \    my(%h);\n    foreach (@l) {\n        push(@r, $_);\n        $h{$_} = 1;\n\
    \    }\n    foreach my $i (0..$#r) {\n        foreach my $j (($i+1)..$#r) {\n\
    \            my($x) = - ($r[$i] + $r[$j]);\n            if (exists($h{$x})) {\n\
    \                return 1;\n            }\n        }\n    }\n    return \"\";\n\
    }", "    my @numbers = split(/,/, $l);\n    for (my $i = 0; $i < scalar(@numbers);\
    \ $i++) {\n        for (my $j = $i + 1; $j < scalar(@numbers); $j++) {\n     \
    \       for (my $k = $j + 1; $k < scalar(@numbers); $k++) {\n                if\
    \ ($numbers[$i] + $numbers[$j] + $numbers[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my(@sorted) = sort(@$l);\n    my($i, $j, $k);\n    my($sum);\n    for($i =\
    \ 0; $i < @sorted - 2; $i++) {\n        $j = $i + 1;\n        $k = @sorted - 1;\n\
    \        while($j < $k) {\n            $sum = $sorted[$i] + $sorted[$j] + $sorted[$k];\n\
    \            if($sum == 0) {\n                return 1;\n            }\n     \
    \       elsif($sum < 0) {\n                $j++;\n            }\n            else\
    \ {\n                $k--;\n            }\n        }\n    }\n    return \"\";\n\
    }", "    return(0) if $#$l < 2;\n    my($h) = {};\n    foreach my $i (0..$#$l)\
    \ {\n        next if exists $h->{$l->[$i]};\n        foreach my $j ($i+1..$#$l)\
    \ {\n            next if exists $h->{$l->[$j]};\n            my($temp) = $l->[$i]\
    \ + $l->[$j];\n            foreach my $k ($j+1..$#$l) {\n                next\
    \ if exists $h->{$l->[$k]};\n                if($temp + $l->[$k] == 0) {\n   \
    \                 return(1);\n                }\n            }\n        }\n  \
    \  }\n    return(0);\n}", "    my $x;\n    my $y;\n    my $z;\n    my $result\
    \ = \"\";\n    my $found = 0;\n    my $j = 0;\n    my $k = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    for($x = 0; $x < $#{$l}; $x++) {\n        for($y = $x + 1;\
    \ $y < $#{$l}; $y++) {\n            for($z = $y + 1; $z < $#{$l}; $z++) {\n  \
    \              if($l->[$x] + $l->[$y] + $l->[$z] == 0) {\n                   \
    \ $found = 1;\n                    last;\n                }\n            }\n \
    \           if($found) {\n                last;\n            }\n        }\n  \
    \      if($found) {\n            last;\n        }\n    }\n    if($found) {\n \
    \       $result = 1;\n    }\n    return $result;\n}", "    my $n = scalar(@$l);\n\
    \    my %exists = ();\n    my $result = '';\n    for(my $i = 0; $i < $n; $i++){\n\
    \        $exists{$$l[$i]} = 1;\n    }\n    for(my $i = 0; $i < $n; $i++){\n  \
    \      for(my $j = $i + 1; $j < $n; $j++){\n            if(exists($exists{-$$l[$i]\
    \ - $$l[$j]})){\n                $result = 1;\n                last;\n       \
    \     }\n        }\n    }\n    return $result;\n}", "    my $a;\n    my $b;\n\
    \    my $c;\n    my $tmp;\n    # Insert your code here!\n    for $a (@$l) {\n\
    \        for $b (@$l) {\n            for $c (@$l) {\n                if ($a ==\
    \ $b || $a == $c || $b == $c) {\n                    next;\n                }\n\
    \                elsif ($a + $b + $c == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   my @list = @$l;\n    my $result = '';\n    my $n = scalar @list;\n    if ($n\
    \ > 2) {\n        for (my $i = 0; $i < $n - 2; $i++) {\n            for (my $j\
    \ = $i + 1; $j < $n - 1; $j++) {\n                for (my $k = $j + 1; $k < $n;\
    \ $k++) {\n                    if ($list[$i] + $list[$j] + $list[$k] == 0) {\n\
    \                        $result = 1;\n                    }\n               \
    \ }\n            }\n        }\n    }\n    return $result;\n}", "    my(@x) = @$l;\n\
    \    my($a, $b, $c);\n    foreach $a (@x) {\n        foreach $b (@x) {\n     \
    \       foreach $c (@x) {\n                return(1) if $a != $b && $b != $c &&\
    \ $a != $c && $a + $b + $c == 0;\n            }\n        }\n    }\n    return(\"\
    \");\n}", "    my $n = @$l;\n    my $sum = 0;\n    my $sum_pos = 0;\n    my $sum_neg\
    \ = 0;\n    my $sum_zero = 0;\n    my $product = 1;\n    my $product_pos = 1;\n\
    \    my $product_neg = 1;\n    my $product_zero = 1;\n    my $neg = 0;\n    my\
    \ $pos = 0;\n    my $zero = 0;\n    my $i = 0;\n    while ($i < $n) {\n      \
    \  my $x = $l->[$i];\n        if ($x == 0) {\n            $zero++;\n         \
    \   $product_zero *= $x;\n        }\n        elsif ($x > 0) {\n            $sum_pos\
    \ += $x;\n            $product_pos *= $x;\n            $pos++;\n        }\n  \
    \      else {\n            $sum_neg += $x;\n            $product_neg *= $x;\n\
    \            $neg++;\n        }\n        $sum += $x;\n        $product *= $x;\n\
    \        $i++;\n    }\n    if ($sum == 0 && $n > 2) {\n        return 1;\n   \
    \ }\n    if ($zero > 0 && $product == 0) {\n        return 1;\n    }\n    if ($product_zero\
    \ == 0 && $product_pos == 0 && $pos > 2) {\n        return 1;\n    }\n    if ($product_zero\
    \ == 0 && $product_neg == 0 && $neg > 2) {\n        return 1;\n    }\n    if ($product_pos\
    \ == 0 && $product_neg == 0 && $pos > 0 && $neg > 0) {\n        return 1;\n  \
    \  }\n    return '';\n}", "    return \"\" if @$l < 3;\n    # there are n(n-1)(n-2)/6\
    \ triplets\n    # we'll save the results in a hash\n    my %result = ();\n   \
    \ for (my $i = 0; $i < @$l; $i++) {\n        for (my $j = $i + 1; $j < @$l; $j++)\
    \ {\n            for (my $k = $j + 1; $k < @$l; $k++) {\n                $result{$l->[$i]\
    \ + $l->[$j] + $l->[$k]} = 1;\n            }\n        }\n    }\n    return exists\
    \ $result{0} ? 1 : \"\";\n}", "    my $flag = 0;\n    for (my $i = 0; $i < @$l\
    \ - 2; $i++) {\n        for (my $j = $i + 1; $j < @$l - 1; $j++) {\n         \
    \   for (my $k = $j + 1; $k < @$l; $k++) {\n                if (@$l[$i] + @$l[$j]\
    \ + @$l[$k] == 0) {\n                    $flag = 1;\n                }\n     \
    \       }\n        }\n    }\n    return $flag;\n}", "    my(@a) = @$l;\n    my(@b)\
    \ = sort {$a <=> $b} @a;\n    my($i);\n    my($j);\n    my($k);\n    $i = 0;\n\
    \    while ($i < $#b) {\n\tif ($b[$i] > 0) {\n\t    return '';\n\t}\n\t$j = $i\
    \ + 1;\n\twhile ($j < $#b) {\n\t    $k = $j + 1;\n\t    while ($k <= $#b) {\n\t\
    \tif ($b[$i] + $b[$j] + $b[$k] == 0) {\n\t\t    return 1;\n\t\t}\n\t\t$k = $k\
    \ + 1;\n\t    }\n\t    $j = $j + 1;\n\t}\n\t$i = $i + 1;\n    }\n    return '';\n\
    }", "    my(@h);\n    my($i);\n    my($j);\n    my($k);\n    my($flag);\n    @h\
    \ = ();\n    foreach $i (@$l) {\n        $h[$i] = 1;\n    }\n    $flag = \"\"\
    ;\n    foreach $i (@$l) {\n        foreach $j (@$l) {\n            $k = -($i +\
    \ $j);\n            if ($h[$k] && $i != $j && $i != $k && $j != $k) {\n      \
    \          $flag = 1;\n                last;\n            }\n        }\n    }\n\
    \    return $flag;\n}", "    return '' if @$l < 3;\n    my $al = array2hash($l);\n\
    \    for my $a (keys %$al) {\n        for my $b (keys %$al) {\n            for\
    \ my $c (keys %$al) {\n                return 1 if $a != $b && $b != $c && $a\
    \ != $c && $a + $b + $c == 0;\n            }\n        }\n    }\n    return '';\n\
    }", "    my @list = @$l;\n    my $result = \"\";\n    my %hash = ();\n    my $i;\n\
    \    my $j;\n    my $key;\n    my $value;\n    my $k;\n    for($i = 0; $i < scalar(@list);\
    \ $i++) {\n        for($j = $i + 1; $j < scalar(@list); $j++) {\n            $key\
    \ = \"$list[$i] $list[$j]\";\n            $value = -($list[$i] + $list[$j]);\n\
    \            $hash{$key} = $value;\n        }\n    }\n    for($k = 0; $k < scalar(@list);\
    \ $k++) {\n        $key = \"$list[$k] $hash{$list[$k]}\";\n        if(exists($hash{$key}))\
    \ {\n            $result = 1;\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "    my @ls = sort {$a <=> $b} @$l;\n    for (my $i = 0; $i <\
    \ scalar(@ls); $i++) {\n        my $j = $i + 1;\n        my $k = scalar(@ls) -\
    \ 1;\n        while ($j < $k) {\n            my $sum = $ls[$i] + $ls[$j] + $ls[$k];\n\
    \            if ($sum == 0) {\n                return 1;\n            } elsif\
    \ ($sum < 0) {\n                $j++;\n            } else {\n                $k--;\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    return '' unless\
    \ @$l > 2;", "    return '' unless @$l >= 3;\n    my $r = 0;\n    my $h = {};\n\
    \    for(my $i = 0; $i < @$l - 2; $i++) {\n        my $i1 = $l->[$i];\n      \
    \  next if exists $h->{$i1};\n        $h->{$i1} = 1;\n        my $h1 = {};\n \
    \       for(my $j = $i + 1; $j < @$l - 1; $j++) {\n            my $i2 = $l->[$j];\n\
    \            next if exists $h1->{$i2};\n            $h1->{$i2} = 1;\n       \
    \     my $i3 = 0 - $i1 - $i2;\n            if(grep $_ == $i3, @$l) {\n       \
    \         $r = 1;\n                last;\n            }\n        }\n    }\n  \
    \  return $r;\n}", "    my @s = sort {$a <=> $b} @$l;\n    my $i = 0;\n    my\
    \ $j = $#s - 1;\n    for my $p (@s) {\n        $i++;\n        $j = $#s;\n    \
    \    next if $i > $j;\n        while ($i < $j) {\n            my $sum = $p + $s[$i]\
    \ + $s[$j];\n            if ($sum == 0) {\n                return 1;\n       \
    \     } elsif ($sum > 0) {\n                $j--;\n            } else {\n    \
    \            $i++;\n            }\n        }\n    }\n    return '';\n}", "   \
    \ return \"\" if @$l < 3;\n    my %h;\n    foreach my $v (@$l) {\n        my $n\
    \ = $h{$v};\n        if ($n) {\n            return 1 if $n == 2;\n           \
    \ $h{$v} = 2;\n        } else {\n            $h{$v} = 1;\n        }\n    }\n \
    \   foreach my $v (@$l) {\n        return 1 if $h{-2 * $v};\n    }\n    return\
    \ \"\";\n}", "    @l = @$l;\n    for my $i (0..$#l) {\n        for my $j ($i+1..$#l)\
    \ {\n            for my $k ($j+1..$#l) {\n                return 1 if $l[$i] +\
    \ $l[$j] + $l[$k] == 0;\n            }\n        }\n    }\n    return \"\";\n}",
  "    my(@z) = (1..$l);\n    my($i, $j, $k);\n    for($i = 0; $i < @z; $i++) {\n\t\
    for($j = $i + 1; $j < @z; $j++) {\n\t    for($k = $j + 1; $k < @z; $k++) {\n\t\
    \tif($z[$i] + $z[$j] + $z[$k] == 0) {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n\
    \    }\n    return \"\";\n}", "    my @list = @$l;\n    for my $i (0..$#list)\
    \ {\n        for my $j (0..$#list) {\n            for my $k (0..$#list) {\n  \
    \              if ($i != $j && $j != $k && $i != $k) {\n                    return\
    \ 1 if ($list[$i] + $list[$j] + $list[$k] == 0);\n                }\n        \
    \    }\n        }\n    }\n    return \"\";\n}", "    my $size = scalar(@$l);\n\
    \    my $ret = '';\n    my %hash;\n    for(my $i = 0; $i < $size; $i++) {\n  \
    \      for(my $j = $i + 1; $j < $size; $j++) {\n            my $sum = $l->[$i]\
    \ + $l->[$j];\n            $hash{$sum}->{$i} = 1;\n            $hash{$sum}->{$j}\
    \ = 1;\n        }\n    }\n    for(my $i = 0; $i < $size; $i++) {\n        if(defined($hash{-$l->[$i]}))\
    \ {\n            if(!defined($hash{-$l->[$i]}->{$i})) {\n                $ret\
    \ = 1;\n                last;\n            }\n        }\n    }\n    return $ret;\n\
    }", "    # Check if the array has more than three elements.\n    if (scalar(@$l)\
    \ < 3) {\n        return \"\";\n    }\n    # Define a multiset to hold all the\
    \ elements.\n    my $m = {};\n    # Go through the array and build the multiset.\n\
    \    foreach my $ele (@$l) {\n        $m->{$ele}++;\n    }\n    # Go through the\
    \ multiset.\n    foreach my $ele (keys %$m) {\n        my $current_ele = $ele;\n\
    \        my $count = $m->{$ele};\n        my $opposite = 0 - $ele;\n        #\
    \ Go through the multiset, check if the current element has\n        # already\
    \ been visited and if the opposite of the current element\n        # exists in\
    \ the multiset.\n        if ($count > 0 && exists $m->{$opposite}) {\n       \
    \     # Decrement the count of the current element, decrement the\n          \
    \  # count of the opposite element, and check if there exists\n            # a\
    \ third element such that the sum of the three elements is\n            # zero.\n\
    \            $m->{$ele}--;\n            $m->{$opposite}--;\n            my $check\
    \ = $opposite - $ele;\n            # If there is no such element, return an empty\
    \ string.\n            if (!exists $m->{$check} || $m->{$check} == 0) {\n    \
    \            return \"\";\n            }\n            # Otherwise, return 1.\n\
    \            else {\n                return 1;\n            }\n        }\n   \
    \ }\n    # Return an empty string.\n    return \"\";\n}", "    my(@a) = @$l;\n\
    \    my $n = @a;\n    my($i, $j, $k);\n    if ($n < 3) { return ''; }\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n    \
    \        for ($k = $j + 1; $k < $n; $k++) {\n                if ($a[$i] + $a[$j]\
    \ + $a[$k] == 0) {\n                    return 1;\n                }\n       \
    \     }\n        }\n    }\n    return '';\n}", "    return '' unless(scalar(@$l)\
    \ >= 3);\n    my %freq;\n    for my $i (@$l) {\n        $freq{$i}++;\n    }\n\
    \    for my $i (keys %freq) {\n        for my $j (keys %freq) {\n            if\
    \ ($i != $j && $freq{-$i-$j}) {\n                return 1;\n            }\n  \
    \      }\n    }\n    return '';\n}", "    my $ret = '';\n    if (scalar(@$l) >\
    \ 2) {\n        my %h = map {($_ => 1)} @$l;\n        for my $i (0..scalar(@$l)-1)\
    \ {\n            for my $j ($i+1..scalar(@$l)-1) {\n                if ($h{-$l->[$i]-$l->[$j]})\
    \ {\n                    $ret = 1;\n                    last;\n              \
    \  }\n            }\n        }\n    }\n    return $ret;\n}", "    my $a = \"\"\
    ;\n    my @nums = sort {$a <=> $b} @$l;\n    my $nums_ref = \\@nums;\n    my $j\
    \ = $#nums;\n    my $k = $#nums;\n    for my $i (0..$#nums-2) {\n        $j =\
    \ $i + 1;\n        $k = $#nums;\n        while ($j < $k) {\n            my $f\
    \ = $nums[$i] + $nums[$j] + $nums[$k];\n            if ($f == 0) {\n         \
    \       $a = 1;\n                last;\n            }\n            elsif ($f >\
    \ 0) {\n                $k--;\n            }\n            else {\n           \
    \     $j++;\n            }\n        }\n    }\n    return $a;\n}", "    if(scalar(@$l)\
    \ < 3) {\n        return '';\n    }\n    else {\n        my $dict = {};\n    \
    \    foreach my $n (@$l) {\n            if(exists $dict->{$n}) {\n           \
    \     $dict->{$n}++;\n            }\n            else {\n                $dict->{$n}\
    \ = 1;\n            }\n        }\n        foreach my $n (@$l) {\n            if($n\
    \ == 0) {\n                if($dict->{$n} > 2) {\n                    return 1;\n\
    \                }\n            }\n            else {\n                if($dict->{-$n})\
    \ {\n                    return 1;\n                }\n            }\n       \
    \ }\n        return '';\n    }\n}", "    my $ret = '';\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    my $n = @$l;\n    while ($i < $n - 2) {\n     \
    \   $j = $i + 1;\n        while ($j < $n - 1) {\n            $k = $j + 1;\n  \
    \          while ($k < $n) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    $ret = 1;\n                    last;\n        \
    \        }\n                $k++;\n            }\n            $j++;\n        }\n\
    \        $i++;\n    }\n    return $ret;\n}", "    return \"\" if(scalar(@$l) <\
    \ 3);\n    for(my $i = 0; $i < scalar(@$l) - 2; $i++) {\n        for(my $j = $i\
    \ + 1; $j < scalar(@$l) - 1; $j++) {\n            for(my $k = $j + 1; $k < scalar(@$l);\
    \ $k++) {\n                return 1 if($l->[$i] + $l->[$j] + $l->[$k] == 0);\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    my @a = @$l;\n  \
    \  for(my $i = 0; $i < @a; $i++) {\n        for(my $j = $i + 1; $j < @a; $j++)\
    \ {\n            for(my $k = $j + 1; $k < @a; $k++) {\n                if($a[$i]\
    \ + $a[$j] + $a[$k] == 0) {\n                    return 1;\n                }\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    my $k = 0;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $m = scalar(@$l);\n    my $n = $m - 1;\n   \
    \ my $flag = \"\";\n    while ($i < $m-2) {\n        $j = $i + 1;\n        while\
    \ ($j < $m-1) {\n            $k = $j + 1;\n            while ($k < $m) {\n   \
    \             if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                   \
    \ $flag = 1;\n                    last;\n                }\n                $k++;\n\
    \            }\n            if ($flag) {\n                last;\n            }\n\
    \            $j++;\n        }\n        if ($flag) {\n            last;\n     \
    \   }\n        $i++;\n    }\n    return $flag;\n}", "    return 0 if scalar(@$l)\
    \ < 3;\n    foreach my $i (0..$#$l) {\n        foreach my $j ($i + 1..$#$l) {\n\
    \            foreach my $k ($j + 1..$#$l) {\n                return 1 if $l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0;\n            }\n        }\n    }\n    return '';\n\
    }", "    my $n = @$l;\n    return '' if $n < 3;\n    for my $i (0..$n-1) {\n \
    \       for my $j ($i+1..$n-1) {\n            for my $k ($j+1..$n-1) {\n     \
    \           return 1 if $l->[$i] + $l->[$j] + $l->[$k] == 0;\n            }\n\
    \        }\n    }\n    return '';\n}", "    my(@h, $i, $j, $k);\n    @h = sort\
    \ {$a <=> $b} @$l;\n    $i = 0;\n    while ($i < @h - 2) {\n        $j = $i +\
    \ 1;\n        while ($j < @h - 1) {\n            $k = $j + 1;\n            while\
    \ ($k < @h) {\n                if ($h[$i] + $h[$j] + $h[$k] == 0) {\n        \
    \            return 1;\n                }\n                $k++;\n           \
    \ }\n            $j++;\n        }\n        $i++;\n    }\n    return \"\";\n}",
  "    return '' unless ref($l) eq 'ARRAY';\n    my %h;\n    my %dup;\n    foreach\
    \ (@$l) {\n        if (defined $h{$_}) {\n            $dup{$_} = 1;\n        }\
    \ else {\n            $h{$_} = 1;\n        }\n    }\n    foreach (@$l) {\n   \
    \     next if defined $dup{$_};\n        my $a = -($_ + $_);\n        if (defined\
    \ $h{$a}) {\n            return 1;\n        }\n    }\n    return '';\n}", "  \
    \  my(@numbers) = @$l;\n    foreach my $i (0..$#numbers-2) {\n        foreach\
    \ my $j ($i+1..$#numbers-1) {\n            foreach my $k ($j+1..$#numbers) {\n\
    \                if ($numbers[$i] + $numbers[$j] + $numbers[$k] == 0) {\n    \
    \                return 1;\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    return \"\" if(scalar(@$l) < 3);\n    for my $i (0..$#$l)\
    \ {\n        for my $j ($i + 1..$#$l) {\n            for my $k ($j + 1..$#$l)\
    \ {\n                if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n             \
    \       return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my @result = ();\n    my @a = @$l;\n    for my $i (0..$#a) {\n\
    \        for my $j (0..$#a) {\n            for my $k (0..$#a) {\n            \
    \    if ($i != $j && $j != $k && $i != $k) {\n                    if ($a[$i] +\
    \ $a[$j] + $a[$k] == 0) {\n                        return 1;\n               \
    \     }\n                }\n            }\n        }\n    }\n    return \"\";\n\
    }", "    my($i, $j, $k);\n    for ($i = 0; $i < $#$l; $i++) {\n        for ($j\
    \ = $i + 1; $j < $#$l; $j++) {\n            for ($k = $j + 1; $k < $#$l; $k++)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < $#$l;\
    \ $i++) {\n        for ($j = $i + 1; $j < $#$l; $j++) {\n            for ($k =\
    \ $j + 1; $k < $#$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    @$l = sort {$a <=> $b} @$l;\n   \
    \ foreach my $i (0..@$l-1) {\n        my $j = $i+1;\n        my $k = @$l-1;\n\
    \        while ($j < $k) {\n            my $sum = $l->[$i] + $l->[$j] + $l->[$k];\n\
    \            if ($sum == 0) {\n                return 1;\n            } elsif\
    \ ($sum < 0) {\n                $j++;\n            } else {\n                $k--;\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    # replace with solution\n\
    \    my @a = @$l;\n    @a = sort {$a <=> $b} @a;\n    my $i = 0;\n    my $j =\
    \ $#a;\n    while ($i < $j - 1) {\n        my $k = $i + 1;\n        while ($k\
    \ < $j) {\n            if ($a[$i] + $a[$k] + $a[$j] == 0) {\n                return\
    \ 1;\n            }\n            if ($a[$i] + $a[$k] + $a[$j] < 0) {\n       \
    \         $k++;\n            } else {\n                $j--;\n            }\n\
    \        }\n        $i++;\n    }\n    return \"\";\n}", "    my @c = sort {$a\
    \ <=> $b} @$l;\n    my $n = @c;\n    my $i = 0;\n    my $k = $n - 1;\n    my $j\
    \ = 1;\n    while ($i < $n - 2) {\n        $j = $i + 1;\n        $k = $n - 1;\n\
    \        while ($j < $k) {\n            my $s = $c[$i] + $c[$j] + $c[$k];\n  \
    \          if ($s == 0) {\n                return 1;\n            }\n        \
    \    if ($s < 0) {\n                $j += 1;\n            } else {\n         \
    \       $k -= 1;\n            }\n        }\n        $i += 1;\n    }\n    return\
    \ \"\";\n}", "    my($i, $j, $k);\n    my(@a) = @$l;\n    my($n) = scalar(@a);\n\
    \    for ($i = 0; $i < $n; $i++) {\n\tfor ($j = $i + 1; $j < $n; $j++) {\n\t \
    \   for ($k = $j + 1; $k < $n; $k++) {\n\t\tif ($a[$i] + $a[$j] + $a[$k] == 0)\
    \ {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return \"\";\n}", "  \
    \  if (!defined($l)) {\n        return '';\n    }\n    my $pos_nums = [];\n  \
    \  my $neg_nums = [];\n    foreach my $i (@$l) {\n        if ($i < 0) {\n    \
    \        push(@$neg_nums, $i);\n        } else {\n            push(@$pos_nums,\
    \ $i);\n        }\n    }\n    foreach my $i (@$pos_nums) {\n        foreach my\
    \ $j (@$neg_nums) {\n            if (grep {$_ == ($i + $j)} @$pos_nums) {\n  \
    \              return 1;\n            }\n        }\n    }\n    return '';\n}",
  "    my $n = scalar(@$l);\n    if ($n < 3) {\n        return \"\";\n    }\n    my\
    \ @a = sort {$a <=> $b} @$l;\n    my $i = 0;\n    my $j = 1;\n    my $k = $n -\
    \ 1;\n    while ($i < $j && $j < $k) {\n        if ($a[$i] + $a[$j] + $a[$k] ==\
    \ 0) {\n            return 1;\n        }\n        elsif ($a[$i] + $a[$j] + $a[$k]\
    \ < 0) {\n            $j++;\n        }\n        else {\n            $k--;\n  \
    \      }\n    }\n    return \"\";\n}", "    my($n) = &list_length($l);\n    my($i,\
    \ $j, $k);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n              \
    \  if (&list_ith($l, $i) + &list_ith($l, $j) + &list_ith($l, $k) == 0) {\n   \
    \                 return 1;\n                }\n            }\n        }\n   \
    \ }\n    return \"\";\n}", "    for(my $i = 0; $i < @$l; $i++) {\n        for(my\
    \ $j = $i + 1; $j < @$l; $j++) {\n            for(my $k = $j + 1; $k < @$l; $k++)\
    \ {\n                if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n             \
    \       return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my @a = sort(@$l);\n    my $i = 0;\n    while ($i < @a) {\n\
    \        my $j = $i + 1;\n        my $k = @a - 1;\n        while ($j < $k) {\n\
    \            if ($a[$i] + $a[$j] + $a[$k] == 0) {\n                return 1;\n\
    \            } elsif ($a[$i] + $a[$j] + $a[$k] < 0) {\n                $j++;\n\
    \            } else {\n                $k--;\n            }\n        }\n     \
    \   $i++;\n    }\n    return \"\";\n}", "    if (scalar(@$l) < 3) {\n        return\
    \ \"\";\n    }\n    for (my $i = 0; $i < scalar(@$l) - 2; $i++) {\n        for\
    \ (my $j = $i + 1; $j < scalar(@$l) - 1; $j++) {\n            for (my $k = $j\
    \ + 1; $k < scalar(@$l); $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my($i, $j, $k);\n    for ($i = 0;\
    \ $i < $#$l; $i++) {\n        for ($j = $i + 1; $j < $#$l; $j++) {\n         \
    \   for ($k = $j + 1; $k < $#$l; $k++) {\n                return 1 if $l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0;\n            }\n        }\n    }\n    return \"\"\
    ;\n}", "    my @sorted = sort {$a <=> $b} @$l;\n    my $len = scalar @sorted;\n\
    \    if ($len < 3) {\n        return \"\";\n    }\n    for my $i (0..$len-3) {\n\
    \        if (find_two_sum_to_zero(@sorted[$i+1..$len-1],-$sorted[$i])) {\n   \
    \         return 1;\n        }\n    }\n    return \"\";\n}", "    my @l = @$l;\n\
    \    my $i = 0;\n    my $l_len = @l;\n    while ($i < $l_len - 2) {\n        my\
    \ $j = $i + 1;\n        while ($j < $l_len - 1) {\n            my $k = $j + 1;\n\
    \            while ($k < $l_len) {\n                if ($l[$i] + $l[$j] + $l[$k]\
    \ == 0) {\n                    return 1;\n                }\n                $k++;\n\
    \            }\n            $j++;\n        }\n        $i++;\n    }\n    return\
    \ \"\";\n}", "    # your code here\n}", "    my($i, $j, $k);\n    my($s) = '';\n\
    \    if (scalar(@$l) < 3) {\n        return '';\n    }\n    foreach $i (@$l) {\n\
    \        foreach $j (@$l) {\n            foreach $k (@$l) {\n                if\
    \ ($i != $j && $j != $k && $i != $k && $i + $j + $k == 0) {\n                \
    \    $s = 1;\n                }\n            }\n        }\n    }\n    return $s;\n\
    }", "    for my $i (0..$#$l) {\n        for my $j ($i+1..$#$l) {\n           \
    \ for my $k ($j+1..$#$l) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return '';\n}", "    my @arr = @$l;\n    my @negative_arr\
    \ = sort {$a <=> $b} grep {$_ < 0} @arr;\n    my @positive_arr = sort {$a <=>\
    \ $b} grep {$_ > 0} @arr;\n    my $result = '';\n    foreach my $positive (@positive_arr)\
    \ {\n        foreach my $negative (@negative_arr) {\n            my $sum = $positive\
    \ + $negative;\n            if ($sum > 0) {\n                last;\n         \
    \   }\n            if (grep {$_ eq -$sum} @arr) {\n                $result = 1;\n\
    \                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "    my $result = '';\n    my %counts;\n    foreach my $item (@$l) {\n   \
    \     $counts{$item}++;\n    }\n    foreach my $item (@$l) {\n        foreach\
    \ my $item2 (@$l) {\n            next if $item == $item2;\n            next if\
    \ $item == -$item2;\n            my $item3 = -($item + $item2);\n            next\
    \ if $item3 == $item;\n            next if $item3 == $item2;\n            if (exists\
    \ $counts{$item3}) {\n                $result = 1;\n                last;\n  \
    \          }\n        }\n    }\n    return $result;\n}", "    my @l = @$l;\n \
    \   my %h;\n    for my $e (@l) {\n        for my $f (@l) {\n            if ($e\
    \ != $f) {\n                my $g = -$e-$f;\n                return 1 if (defined($h{$g})\
    \ and $h{$g} != $e and $h{$g} != $f);\n            }\n        }\n        $h{$e}\
    \ = $e;\n    }\n    return \"\";\n}", "    my($i, $j, $k);\n    for ($i = 0; $i\
    \ < $#$l; $i++) {\n        for ($j = $i + 1; $j < $#$l; $j++) {\n            for\
    \ ($k = $j + 1; $k < $#$l; $k++) {\n                if ($l->[$i] + $l->[$j] +\
    \ $l->[$k] == 0) {\n                    return 1;\n                }\n       \
    \     }\n        }\n    }\n    return \"\";\n}", "    my $n = @$l;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $k = 0;\n    for($i = 0; $i < $n; $i++) {\n   \
    \     for($j = $i + 1; $j < $n; $j++) {\n            for($k = $j + 1; $k < $n;\
    \ $k++) {\n                if(@$l[$i] + @$l[$j] + @$l[$k] == 0) {\n          \
    \          return 1;\n                }\n            }\n        }\n    }\n   \
    \ return \"\";\n}", "    my($s) = {};\n    foreach my $e (@$l) {\n        if(exists\
    \ $s->{-$e}) {\n            if(exists $s->{$e}) {\n                return '';\n\
    \            }\n            else {\n                return 1;\n            }\n\
    \        }\n        $s->{$e} = 1;\n    }\n    return '';\n}", "    my($s) = 0;\n\
    \    for(my($i) = 0; $i < $#$l; $i++) {\n        for(my($j) = $i + 1; $j < $#$l;\
    \ $j++) {\n            for(my($k) = $j + 1; $k < $#$l; $k++) {\n             \
    \   if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    $s = 1;\n \
    \               }\n            }\n        }\n    }\n    return $s;\n}", "    my\
    \ @values = @$l;\n    my $n = @values;\n    my $triple_found = '';\n    for(my\
    \ $i = 0; $i < $n && !$triple_found; $i++){\n        for(my $j = $i + 1; $j <\
    \ $n && !$triple_found; $j++){\n            for(my $k = $j + 1; $k < $n && !$triple_found;\
    \ $k++){\n                if($values[$i] + $values[$j] + $values[$k] == 0){\n\
    \                    $triple_found = 1;\n                }\n            }\n  \
    \      }\n    }\n    return $triple_found;\n}", "    my @list = @$l;\n    my $list_size\
    \ = scalar @list;\n    my $triples_sum_to_zero = 0;\n    if (scalar @list < 3)\
    \ {\n        return 0;\n    }\n    if ($list_size == 3) {\n        return triples_sum_to_zero_for_case_three($l);\n\
    \    }\n    for (my $i = 0; $i < $list_size - 2; $i++) {\n        for (my $j =\
    \ $i + 1; $j < $list_size - 1; $j++) {\n            for (my $k = $j + 1; $k <\
    \ $list_size; $k++) {\n                my $sum = $list[$i] + $list[$j] + $list[$k];\n\
    \                if ($sum == 0) {\n                    $triples_sum_to_zero =\
    \ 1;\n                    last;\n                }\n            }\n        }\n\
    \    }\n    return $triples_sum_to_zero;\n}", '    my $lt = $l;', "    my $len\
    \ = scalar(@$l);\n    if ($len < 3) {\n        return \"\";\n    }\n    my $m\
    \ = {};\n    my $check_dup = {};\n    for (my $i = 0; $i < $len; $i++) {\n   \
    \     if (exists $check_dup->{$l->[$i]}) {\n            return \"\";\n       \
    \ }\n        $check_dup->{$l->[$i]} = 1;\n        if (exists $m->{$l->[$i]}) {\n\
    \            return \"\";\n        }\n        for (my $j = $i + 1; $j < $len;\
    \ $j++) {\n            if (exists $m->{$l->[$i] + $l->[$j]}) {\n             \
    \   return 1;\n            }\n            $m->{$l->[$i] + $l->[$j]} = 1;\n   \
    \     }\n    }\n    return \"\";\n}", "    foreach my $a (0..$#$l) {\n       \
    \ foreach my $b ($a+1..$#$l) {\n            foreach my $c ($b+1..$#$l) {\n   \
    \             if($l->[$a] + $l->[$b] + $l->[$c] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    return '' unless (scalar(@$l) >= 3);\n    my $hs = {};\n    foreach my $i (0..$#$l)\
    \ {\n        return 1 if $hs->{-$l->[$i]};\n        foreach my $j ($i+1..$#$l)\
    \ {\n            $hs->{$l->[$i] + $l->[$j]} = 1;\n        }\n    }\n    return\
    \ '';\n}", "    my(@a) = split /,/, $l;\n    my %count;\n    foreach my $i (@a)\
    \ {\n        $count{$i}++;\n    }\n    foreach my $i (@a) {\n        foreach my\
    \ $j (@a) {\n            my $num = $i + $j;\n            if ($count{-$num} &&\
    \ $i != $j && $j != -$num && $i != -$num) {\n                return 1;\n     \
    \       }\n        }\n    }\n    return \"\";\n}", "    for my $i (0..scalar(@$l)-3)\
    \ {\n        for my $j ($i+1..scalar(@$l)-2) {\n            for my $k ($j+1..scalar(@$l)-1)\
    \ {\n                return 1 if $l->[$i] + $l->[$j] + $l->[$k] == 0;\n      \
    \      }\n        }\n    }\n    return '';\n}", "    my @l = @$l;\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $result = \"\";\n    for ($i = 0; $i < length(@l)\
    \ - 2; $i = $i + 1) {\n        for ($j = $i + 1; $j < length(@l) - 1; $j = $j\
    \ + 1) {\n            for ($k = $j + 1; $k < length(@l); $k = $k + 1) {\n    \
    \            if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    $result\
    \ = 1;\n                }\n            }\n        }\n    }\n    return $result;\n\
    }", "    my(@x, @y, @z, $i, $j, $k);\n    @x = @$l;\n    for ($i = 0; $i < $#x;\
    \ $i++) {\n        for ($j = $i + 1; $j < $#x; $j++) {\n            for ($k =\
    \ $j + 1; $k < $#x; $k++) {\n                if ($x[$i] + $x[$j] + $x[$k] == 0)\
    \ {\n                    return(1);\n                }\n            }\n      \
    \  }\n    }\n    return(\"\");\n}", "    my $f = 0;\n    my %h;\n    for my $i\
    \ (0..$#$l) {\n        for my $j (0..$#$l) {\n            for my $k (0..$#$l)\
    \ {\n                if ($i != $j && $j != $k && $i != $k) {\n               \
    \     my $n = $l->[$i] + $l->[$j] + $l->[$k];\n                    if ($n == 0)\
    \ {\n                        $f = 1;\n                        goto foo;\n    \
    \                }\n                }\n            }\n        }\n    }\n  foo:\n\
    \    return $f;\n}", "    my($n);\n    my($i);\n    my($j);\n    my($k);\n   \
    \ $n = scalar(@$l);\n    if($n < 3) {\n        return \"\";\n    }\n    for($i\
    \ = 0; $i < $n; $i++) {\n        for($j = $i + 1; $j < $n; $j++) {\n         \
    \   for($k = $j + 1; $k < $n; $k++) {\n                if($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return \"\";\n}", "    my($i, $j, $k);\n    my($n)\
    \ = scalar(@$l);\n    if ($n < 3) { return ''; }\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return '';\n}", "    foreach my $i (0..scalar(@$l)-3) {\n        foreach\
    \ my $j ($i+1..scalar(@$l)-2) {\n            foreach my $k ($j+1..scalar(@$l)-1)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    my $n = scalar(@$l);\n    my $i;\n    my $j;\n    my $k;\n \
    \   for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n   \
    \             }\n            }\n        }\n    }\n    return \"\";\n}", "    #\
    \ YOUR CODE HERE\n    my $i = 0;\n    my $j = 1;\n    my $k = 2;\n    my $flag\
    \ = 0;\n    my $len = scalar @$l;\n    if($len < 3){\n        return '';\n   \
    \ }\n    for(; $i < $len - 2; $i++){\n        for($j = $i + 1; $j < $len - 1;\
    \ $j++){\n            for($k = $j + 1; $k < $len; $k++){\n                if($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0){\n                    $flag = 1;\n             \
    \       last;\n                }\n            }\n        }\n    }\n    if($flag\
    \ == 1){\n        return 1;\n    }\n    else{\n        return '';\n    }\n   \
    \ # END CODE\n}", "    return \"\" if(scalar(@$l) < 3);\n    for my $i (0..scalar(@$l)-3)\
    \ {\n        for my $j ($i+1..scalar(@$l)-2) {\n            for my $k ($j+1..scalar(@$l)-1)\
    \ {\n                return 1 if($$l[$i] + $$l[$j] + $$l[$k] == 0);\n        \
    \    }\n        }\n    }\n    return \"\";\n}", "    for my $i(0..$#$l-2) {\n\
    \        for my $j($i+1..$#$l-1) {\n            for my $k($j+1..$#$l) {\n    \
    \            return 1 if $l->[$i] + $l->[$j] + $l->[$k] == 0;\n            }\n\
    \        }\n    }\n    return '';\n}", "    for (my $i = 0; $i < @$l - 2; $i++)\
    \ {\n        for (my $j = $i + 1; $j < @$l - 1; $j++) {\n            for (my $k\
    \ = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my @a = @$l;\n    my %seen;\n   \
    \ my $sum;\n    foreach my $x (@a) {\n        $seen{$x}++;\n    }\n    foreach\
    \ my $x (@a) {\n        foreach my $y (@a) {\n            $sum = $x + $y;\n  \
    \          if ($seen{-$sum} > 0 && $seen{$x} > 0 && $seen{$y} > 0) {\n       \
    \         return 1;\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   for my $i (0..@$l-3) {\n        for my $j ($i+1..@$l-2) {\n            for\
    \ my $k ($j+1..@$l-1) {\n                return 1 if $l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0;\n            }\n        }\n    }\n    return '';\n}", "    my @a = @$l;\n\
    \    my $c = \"\";\n    for (my $i = 0; $i < @a; $i++) {\n        for (my $j =\
    \ $i + 1; $j < @a; $j++) {\n            for (my $k = $j + 1; $k < @a; $k++) {\n\
    \                if ($a[$i] + $a[$j] + $a[$k] == 0) {\n                    $c\
    \ = 1;\n                }\n            }\n        }\n    }\n    return $c;\n}",
  "    return 0;\n}", "    my(@arr) = @$l;\n    my($c) = 0;\n    for($i = 0; $i <\
    \ @arr; $i++) {\n        for($j = $i + 1; $j < @arr; $j++) {\n            for($k\
    \ = $j + 1; $k < @arr; $k++) {\n                if($arr[$i] + $arr[$j] + $arr[$k]\
    \ == 0) {\n                    $c++;\n                }\n            }\n     \
    \   }\n    }\n    if($c > 0) {\n        return 1;\n    }\n    else {\n       \
    \ return \"\";\n    }\n}", "    my $i;\n    my $j;\n    my $k;\n    my $n = @$l;\n\
    \    # iterate over elements of $l\n    for ($i = 0; $i < $n; $i = $i + 1) {\n\
    \        for ($j = $i + 1; $j < $n; $j = $j + 1) {\n            for ($k = $j +\
    \ 1; $k < $n; $k = $k + 1) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my $triple = '';\n    for my $i (0..($#$l-2))\
    \ {\n        for my $j (($i+1)..($#$l-1)) {\n            for my $k (($j+1)..$#$l)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        $triple = 1;\n                }\n            }\n        }\n    }\n  \
    \  return $triple;\n}", "    my @list = sort {$a <=> $b} @$l;\n    for (my $i\
    \ = 0; $i < $#list; $i++) {\n        my $a = $list[$i];\n        my $start = $i\
    \ + 1;\n        my $end = $#list;\n        while ($start < $end) {\n         \
    \   my $b = $list[$start];\n            my $c = $list[$end];\n            if ($a\
    \ + $b + $c == 0) {\n                return 1;\n            } elsif ($a + $b +\
    \ $c > 0) {\n                $end--;\n            } else {\n                $start++;\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    my($i, $j, $k);\n\
    \    my($result) = \"\";\n    for($i = 0; $i < @$l-2; $i++) {\n        for($j\
    \ = $i+1; $j < @$l-1; $j++) {\n            for($k = $j+1; $k < @$l; $k++) {\n\
    \                $result = 1 if $l->[$i] + $l->[$j] + $l->[$k] == 0;\n       \
    \     }\n        }\n    }\n    return $result;\n}", "    my @a = @$l;\n    my\
    \ $found = 0;\n    for my $i (0..@a-3) {\n        for my $j ($i+1..@a-2) {\n \
    \           for my $k ($j+1..@a-1) {\n                if($a[$i] + $a[$j] + $a[$k]\
    \ == 0) {\n                    $found = 1;\n                    last;\n      \
    \          }\n            }\n        }\n    }\n    return $found;\n}", "    #\
    \ WARNING: Do not change the following line!\n    @_ = @$l;\n    # END WARNING\n\
    \    my $flag = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    for ($i\
    \ = 0; $i < scalar(@_); $i++){\n        for ($j = $i + 1; $j < scalar(@_); $j++){\n\
    \            for ($k = $j + 1; $k < scalar(@_); $k++){\n                if (($_[$i]\
    \ + $_[$j] + $_[$k]) == 0){\n                    $flag = 1;\n                }\n\
    \            }\n        }\n    }\n    if ($flag == 1){\n        return 1;\n  \
    \  }\n    else{\n        return \"\";\n    }\n}", "    my @s = @$l;\n    for my\
    \ $i (0..$#s) {\n        for my $j ($i+1..$#s) {\n            for my $k ($j+1..$#s)\
    \ {\n                if ($s[$i] + $s[$j] + $s[$k] == 0) {\n                  \
    \  return 1;\n                }\n            }\n        }\n    }\n    return \"\
    \";\n}", "    my @l = @$l;\n    # BEGIN SOLUTION\n    if(@l < 3) {\n        return\
    \ \"\";\n    }\n    for(my $i = 0; $i < @l; $i++) {\n        for(my $j = $i +\
    \ 1; $j < @l; $j++) {\n            for(my $k = $j + 1; $k < @l; $k++) {\n    \
    \            if($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n    # END\
    \ SOLUTION\n}", "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    my($r) =\
    \ '';\n    if ($n < 3) {\n        return '';\n    }\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    $r = 1;\n                    last;\n          \
    \      }\n            }\n        }\n    }\n    return $r;\n}", "    return ''\
    \ if @$l < 3;\n    my(%data, $answer);\n    for my $x (@$l) {\n        $data{$x}\
    \ = [];\n    }\n    for my $x (@$l) {\n        for my $y (@$l) {\n           \
    \ for my $z (@$l) {\n                if ($x != $y && $y != $z && $x != $z && $x\
    \ + $y + $z == 0) {\n                    return 1;\n                }\n      \
    \      }\n        }\n    }\n    return '';\n}", "    my(@l) = @$l;\n    for(my\
    \ $i = 0; $i < $#l - 1; $i++) {\n        for(my $j = $i + 1; $j < $#l; $j++) {\n\
    \            for(my $k = $j + 1; $k <= $#l; $k++) {\n                if($l[$i]\
    \ + $l[$j] + $l[$k] == 0) {\n                    return 1;\n                }\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    my($a, $b, $c);\n\
    \    for ($a = 0; $a < @$l - 2; $a++) {\n        for ($b = $a + 1; $b < @$l -\
    \ 1; $b++) {\n            for ($c = $b + 1; $c < @$l; $c++) {\n              \
    \  if ($l->[$a] + $l->[$b] + $l->[$c] == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}", " \
    \   return '' unless @$l > 2;\n    my $i;\n    my $j;\n    my $k;\n    for ($i\
    \ = 0; $i < @$l - 2; $i++) {\n        for ($j = $i + 1; $j < @$l - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < @$l; $k++) {\n                return 1 if\
    \ $l->[$i] + $l->[$j] + $l->[$k] == 0;\n            }\n        }\n    }\n    return\
    \ '';\n}", "    return '' if @$l < 3;\n    # create a new array which has the\
    \ same content as\n    # the input array, but sorted\n    my @sorted = sort {$a\
    \ <=> $b} @$l;\n    # check if there are 3 numbers in the sorted array\n    #\
    \ that sum to zero\n    return 1 if sum_zero(@sorted);\n    # if there are not,\
    \ then check if there are three numbers\n    # in the rest of the sorted array\
    \ that sum to zero\n    return triples_sum_to_zero([@sorted[1..$#sorted]]);\n}",
  "    my $r = '';\n    my $i;\n    my $j;\n    my $k;\n    my $f = 1;\n    my $h\
    \ = {};\n    my $len = scalar(@$l);\n    for($i = 0; $i < $len - 2; $i++) {\n\
    \        if(exists $h->{$l->[$i]}) {\n            next;\n        }\n        for($j\
    \ = $i + 1; $j < $len - 1; $j++) {\n            if(exists $h->{$l->[$j]}) {\n\
    \                next;\n            }\n            for($k = $j + 1; $k < $len;\
    \ $k++) {\n                if(exists $h->{$l->[$k]}) {\n                    next;\n\
    \                }\n                if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    $r = 1;\n                    $f = 0;\n                  \
    \  last;\n                }\n            }\n            if(!$f) {\n          \
    \      last;\n            }\n        }\n        if(!$f) {\n            last;\n\
    \        }\n    }\n    return $r;\n}", "    for (my $i = 0; $i < scalar(@$l) -\
    \ 2; $i++) {\n        for (my $j = $i + 1; $j < scalar(@$l) - 1; $j++) {\n   \
    \         for (my $k = $j + 1; $k < scalar(@$l); $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    # Keep a list\
    \ of the elements that we have seen.\n    my %seen;\n    foreach my $j (@$l) {\n\
    \        # Is there a $k such that $j + $k == 0?\n        if (defined($seen{-$j}))\
    \ {\n            return 1;\n        }\n        # If not, record that we have seen\
    \ $j.\n        $seen{$j} = 1;\n    }\n    return \"\";\n}", "    my $length =\
    \ scalar(@$l);\n    if ($length < 3) {\n        return \"\";\n    }\n    my @sorted\
    \ = sort {$a <=> $b} @$l;\n    my $i = 0;\n    while ($i < $length - 2) {\n  \
    \      my $j = $i + 1;\n        my $k = $length - 1;\n        while ($j < $k)\
    \ {\n            my $sum = $sorted[$i] + $sorted[$j] + $sorted[$k];\n        \
    \    if ($sum == 0) {\n                return 1;\n            }\n            if\
    \ ($sum > 0) {\n                $k--;\n            } else {\n                $j++;\n\
    \            }\n        }\n        $i++;\n    }\n    return \"\";\n}", "    my(@r,\
    \ $i, $j, $k);\n    @r = ();\n    for($i = 0; $i < @$l - 2; $i++) {\n        for($j\
    \ = $i + 1; $j < @$l - 1; $j++) {\n            for($k = $j + 1; $k < @$l; $k++)\
    \ {\n                if($$l[$i] + $$l[$j] + $$l[$k] == 0) {\n                \
    \    return(1);\n                }\n            }\n        }\n    }\n    return(\"\
    \");\n}", "    return \"\" if scalar(@$l) < 3;\n    for my $i (0..scalar(@$l)-3)\
    \ {\n        for my $j ($i+1..scalar(@$l)-2) {\n            for my $k ($j+1..scalar(@$l)-1)\
    \ {\n                return 1 if $l->[$i] + $l->[$j] + $l->[$k] == 0;\n      \
    \      }\n        }\n    }\n    return \"\";\n}", "    return '' unless @$l >=\
    \ 3;", "    my $index = 0;\n    foreach my $index1 (0..$#{$l}) {\n        foreach\
    \ my $index2 ($index1+1..$#{$l}) {\n            foreach my $index3 ($index2+1..$#{$l})\
    \ {\n                if ($l->[$index1] + $l->[$index2] + $l->[$index3] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}", "    return 1 if (triples_sum_to_target($l, 0));\n\
    \    return \"\";\n}", "    my($a, $b, $c);\n    my(@l) = @$l;\n    $a = shift\
    \ @l;\n    while ($a) {\n        $b = shift @l;\n        while ($b) {\n      \
    \      $c = shift @l;\n            while ($c) {\n                if ($a + $b +\
    \ $c == 0) {\n                    return 1;\n                }\n             \
    \   $c = shift @l;\n            }\n            $b = shift @l;\n        }\n   \
    \     $a = shift @l;\n    }\n    return \"\";\n}", "    my @list = sort {$a <=>\
    \ $b} @$l;\n    my $size = scalar @list;\n    return '' if $size < 3;\n    my\
    \ $i = 0;\n    my $j = 1;\n    my $k = $size - 1;\n    while ($i < $j && $j <\
    \ $k) {\n        my $sum = $list[$i] + $list[$j] + $list[$k];\n        if ($sum\
    \ == 0) {\n            return 1;\n        } elsif ($sum < 0) {\n            $j++;\n\
    \        } else {\n            $k--;\n        }\n    }\n    return '';\n}", " \
    \   my(@list) = @$l;\n    my(@sorted) = sort {$a <=> $b} @list;\n    my($n) =\
    \ $#sorted;\n    my($i);\n    for ($i = 0; $i < $n - 1; $i++) {\n\tmy($j) = $i\
    \ + 1;\n\tmy($k) = $n;\n\twhile ($j < $k) {\n\t    my($sum) = $sorted[$i] + $sorted[$j]\
    \ + $sorted[$k];\n\t    if ($sum == 0) {\n\t\treturn 1;\n\t    } elsif ($sum <\
    \ 0) {\n\t\t$j++;\n\t    } else {\n\t\t$k--;\n\t    }\n\t}\n    }\n    return\
    \ \"\";\n}", "    my @a = split(/,/, $l);\n    my %h;\n    my $l2 = \"\";\n  \
    \  foreach my $e (@a) {\n        if (exists $h{-$e}) {\n            $l2 = 1;\n\
    \            last;\n        }\n        else {\n            $h{$e} = 1;\n     \
    \   }\n    }\n    return $l2;\n}", "    return '' if ($#$l < 2);\n    my @s =\
    \ sort {$a <=> $b} @$l;\n    my $o = '';\n    my $n = $#$l;\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    while ($i < $j - 1) {\n        my $sum = $s[$i] + $s[$j];\n\
    \        if ($sum > 0) {\n            $j -= 1;\n        } elsif ($sum < 0) {\n\
    \            $i += 1;\n        } else {\n            # TODO: find a way to do\
    \ this w/o O(n) search\n            foreach my $k (0..$n) {\n                if\
    \ ($k != $i && $k != $j && $s[$k] + $sum == 0) {\n                    $o = 1;\n\
    \                    last;\n                }\n            }\n            $i +=\
    \ 1;\n            $j -= 1;\n        }\n    }\n    return $o;\n}", "    my(@numbers)\
    \ = @$l;\n    my $num_vals = 0;\n    my $sum = 0;\n    my $has = 0;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $k = 0;\n    for($i = 0; $i < $#numbers; $i++)\
    \ {\n\t$has = 0;\n\tfor($j = $i + 1; $j < $#numbers; $j++) {\n\t    for($k = $j\
    \ + 1; $k < $#numbers; $k++) {\n\t\t$num_vals++;\n\t\t$sum = $numbers[$i] + $numbers[$j]\
    \ + $numbers[$k];\n\t\tif($sum == 0) {\n\t\t    $has = 1;\n\t\t}\n\t    }\n\t\
    }\n    }\n    if($has == 1) {\n\treturn 1;\n    } else {\n\treturn \"\";\n   \
    \ }\n}", "    my @list = sort {$a <=> $b} @$l;\n    my $i = 0;\n    my $j = $#list\
    \ - 1;\n    while ($i < $j - 1) {\n        my $sum = $list[$i] + $list[$j];\n\
    \        if ($sum < 0) {\n            $i++;\n        } elsif ($sum > 0) {\n  \
    \          $j--;\n        } else {\n            my $k = $i + 1;\n            while\
    \ ($k < $j && $list[$k] == $list[$i]) {\n                $k++;\n            }\n\
    \            if ($k < $j) {\n                return 1;\n            } else {\n\
    \                $i++;\n            }\n        }\n    }\n    return \"\";\n}",
  "    foreach my $i (0..length($l)-3) {\n        my $a = substr($l, $i, 1);\n   \
    \     foreach my $j ($i+1..length($l)-2) {\n            my $b = substr($l, $j,\
    \ 1);\n            foreach my $k ($j+1..length($l)-1) {\n                my $c\
    \ = substr($l, $k, 1);\n                if ($a + $b + $c == 0) {\n           \
    \         return 1;\n                }\n            }\n        }\n    }\n    return\
    \ '';\n}", "    my $i;\n    my $j;\n    my $k;\n    my $res = \"\";\n    my $this;\n\
    \    my $seen = {};\n    for ($i = 0; $i < scalar(@$l); $i++) {\n        for ($j\
    \ = $i + 1; $j < scalar(@$l); $j++) {\n            for ($k = $j + 1; $k < scalar(@$l);\
    \ $k++) {\n                $this = $l->[$i] + $l->[$j] + $l->[$k];\n         \
    \       if (!exists($seen->{$this})) {\n                    $seen->{$this} = 1;\n\
    \                    if ($this == 0) {\n                        $res = 1;\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return $res;\n}", "    my @list = @$l;\n    my $len = @list;\n    if ($len >=\
    \ 3) {\n        my $i = 0;\n        while ($i < $len - 2) {\n            my $j\
    \ = $i + 1;\n            while ($j < $len - 1) {\n                my $k = $j +\
    \ 1;\n                while ($k < $len) {\n                    if ($list[$i] +\
    \ $list[$j] + $list[$k] == 0) {\n                        return 1;\n         \
    \           }\n                    $k++;\n                }\n                $j++;\n\
    \            }\n            $i++;\n        }\n    }\n    return \"\";\n}", " \
    \   my $len = scalar(@$l);\n    my @s = sort {$a <=> $b} @$l;\n    my @triples;\n\
    \    for (my $i = 0; $i < $len - 2; $i++) {\n        my $j = $i + 1;\n       \
    \ my $k = $len - 1;\n        while ($j < $k) {\n            my $sum = $s[$i] +\
    \ $s[$j] + $s[$k];\n            if ($sum == 0) {\n                return 1;\n\
    \            } elsif ($sum < 0) {\n                $j++;\n            } else {\n\
    \                $k--;\n            }\n        }\n    }\n    return \"\";\n}",
  "    my @list = @$l;\n    my %sums;\n    for my $i (0..$#list){\n        for my\
    \ $j ($i+1..$#list){\n            my $sum = $list[$i] + $list[$j];\n         \
    \   $sums{$sum} = [] unless exists $sums{$sum};\n            push @{$sums{$sum}},\
    \ [$i, $j];\n        }\n    }\n    for my $i (0..$#list){\n        my $neg = -$list[$i];\n\
    \        if (exists $sums{$neg}){\n            for my $indices (@{$sums{$neg}}){\n\
    \                if ($indices->[0] != $i && $indices->[1] != $i){\n          \
    \          return 1;\n                }\n            }\n        }\n    }\n   \
    \ return '';\n}", "    # your code here\n    my %tempHash;\n    foreach my $i\
    \ (@$l) {\n\tif (exists $tempHash{$i}) {\n\t    $tempHash{$i}++;\n\t} else {\n\
    \t    $tempHash{$i} = 1;\n\t}\n    }\n    foreach my $j (@$l) {\n\tif (exists\
    \ $tempHash{-$j}) {\n\t    if ($j == 0) {\n\t\tif ($tempHash{-$j} >= 3) {\n\t\t\
    \    return 1;\n\t\t}\n\t    } else {\n\t\tif ($tempHash{-$j} >= 2) {\n\t\t  \
    \  return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return \"\";\n}", "    my(@triple);\n\
    \    my(@array) = @$l;\n    if(@array < 3) {\n\treturn \"\";\n    }\n    for($i\
    \ = 0; $i < @array - 2; $i++) {\n\tfor($j = $i + 1; $j < @array - 1; $j++) {\n\
    \t    for($k = $j + 1; $k < @array; $k++) {\n\t\tif($array[$i] + $array[$j] +\
    \ $array[$k] == 0) {\n\t\t    @triple = ($array[$i], $array[$j], $array[$k]);\n\
    \t\t    return \\@triple;\n\t\t}\n\t    }\n\t}\n    }\n    return \"\";\n}", " \
    \   my(@a) = split(' ', $l);\n    my $length = @a;\n    if ($length >= 3) {\n\t\
    for (my $i = 0; $i < $length; $i++) {\n\t    for (my $j = $i + 1; $j < $length;\
    \ $j++) {\n\t\tfor (my $k = $j + 1; $k < $length; $k++) {\n\t\t    if ($a[$i]\
    \ + $a[$j] + $a[$k] == 0) {\n\t\t\treturn 1;\n\t\t    }\n\t\t}\n\t    }\n\t}\n\
    \    }\n    return \"\";\n}", "    my($i, $j, $k);\n    for ($i = 0; $i < @$l;\
    \ $i++) {\n        for ($j = $i + 1; $j < @$l; $j++) {\n            for ($k =\
    \ $j + 1; $k < @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "    my $n = @$l;\n    return '' if $n\
    \ < 3;\n    my %hash;\n    for my $i (0..$n-1) {\n        for my $j ($i+1..$n-1)\
    \ {\n            for my $k ($j+1..$n-1) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return '';\n}", "    my $len = scalar(@$l);\n\
    \    my $n = 1;\n    while ($n <= $len - 2) {\n        my $m = $n + 1;\n     \
    \   while ($m <= $len - 1) {\n            my $p = $m + 1;\n            while ($p\
    \ <= $len) {\n                if ($l->[$n-1] + $l->[$m-1] + $l->[$p-1] == 0) {\n\
    \                    return 1;\n                }\n                $p++;\n   \
    \         }\n            $m++;\n        }\n        $n++;\n    }\n    return \"\
    \";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
