name: HumanEval_40_triples_sum_to_zero
language: pl
prompt: "# triples_sum_to_zero takes an array of integers as an input.\n# it returns\
  \ 1 if there are three distinct elements in the array that\n# sum to zero, and \
  \ otherwise.\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n# 1\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> triples_sum_to_zero([2,\
  \ 4, -5, 3, 9, 7])\n# 1\n# >>> triples_sum_to_zero([1])\n# \"\"\nsub triples_sum_to_zero\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5,\
  \ -1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 5, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @array = sort {$a <=> $b} @$l;\n    my %hash = ();\n    my $i\
    \ = 0;\n    while ($i < @array) {\n        my $c = -$array[$i];\n        my $j\
    \ = $i + 1;\n        my $k = $#array;\n        while ($j < $k) {\n           \
    \ my $sum = $array[$j] + $array[$k];\n            if ($sum == $c) {\n        \
    \        return 1;\n            } elsif ($sum < $c) {\n                $j++;\n\
    \            } else {\n                $k--;\n            }\n        }\n     \
    \   $i++;\n    }\n    return '';\n}", "    my @a = @$l;\n    my %sums;\n    for\
    \ my $i (0..$#a) {\n        for my $j ($i+1..$#a) {\n            $sums{$a[$i]\
    \ + $a[$j]}++;\n        }\n    }\n    for my $i (0..$#a) {\n        if ($sums{-$a[$i]})\
    \ {\n            return 1;\n        }\n    }\n    return '';\n}", '    return
    "" if @$l < 3;', "    if (@$l >= 3) {\n        my $h = {};\n        for my $x\
    \ (@$l) {\n            $h->{$x} = 1;\n        }\n        my @keys = keys %$h;\n\
    \        for my $a (@keys) {\n            for my $b (@keys) {\n              \
    \  my $c = -($a + $b);\n                if ($h->{$c}) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my $ret = \"\";\n    my @sorted = sort {$a <=> $b} @$l;\n    for (my $i = 0;\
    \ $i < scalar(@sorted) - 2; $i++){\n        my $j = $i + 1;\n        my $k = scalar(@sorted)\
    \ - 1;\n        while ($j < $k){\n            my $sum = $sorted[$i] + $sorted[$j]\
    \ + $sorted[$k];\n            if ($sum > 0){\n                $k--;\n        \
    \    }\n            elsif ($sum < 0){\n                $j++;\n            }\n\
    \            else{\n                $ret = 1;\n                last;\n       \
    \     }\n        }\n    }\n    return $ret;\n}", "    my $i;\n    my $j;\n   \
    \ my $k;\n    for($i = 0; $i < @$l - 2; $i++){\n        for($j = $i + 1; $j <\
    \ @$l - 1; $j++){\n            for($k = $j + 1; $k < @$l; $k++){\n           \
    \     if(@$l[$i] + @$l[$j] + @$l[$k] == 0){\n                    return 1;\n \
    \               }\n            }\n        }\n    }\n    return \"\";\n}", "  \
    \  my $flag = 0;\n    for (my $i = 0; $i < scalar(@$l); $i++) {\n        for (my\
    \ $j = $i + 1; $j < scalar(@$l); $j++) {\n            for (my $k = $j + 1; $k\
    \ < scalar(@$l); $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n                    $flag = 1;\n                }\n            }\n   \
    \     }\n    }\n    return $flag;\n}", "    if (@$l < 3) {\n        return \"\"\
    ;\n    }\n    for(my $i = 0; $i < @$l; $i++) {\n        for(my $j = $i + 1; $j\
    \ < @$l; $j++) {\n            for(my $k = $j + 1; $k < @$l; $k++) {\n        \
    \        if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return \"\";\n}",
  "    my $i;\n    my $j;\n    my $k;\n    for($i = 0; $i < scalar(@$l) - 2; $i++)\
    \ {\n        for($j = $i + 1; $j < scalar(@$l) - 1; $j++) {\n            for($k\
    \ = $j + 1; $k < scalar(@$l); $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return \"\";\n}", "    my @list = @$l;\n    my\
    \ $n = @list;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i +\
    \ 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n   \
    \             if ($list[$i] + $list[$j] + $list[$k] == 0) {\n                \
    \    return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    if(scalar(@$l) < 3) {\n        return \"\";\n    }\n    # YOUR\
    \ CODE HERE\n}", "    my @a = @$l;\n    my $n = scalar(@a);\n    my $i = 0;\n\
    \    my $j = 1;\n    my $k = 2;\n    while ($i < $n) {\n        while ($j < $n)\
    \ {\n            while ($k < $n) {\n                if ($a[$i] + $a[$j] + $a[$k]\
    \ == 0) {\n                    return 1;\n                }\n                $k++;\n\
    \            }\n            $j++;\n            $k = $j + 1;\n        }\n     \
    \   $i++;\n        $j = $i + 1;\n        $k = $j + 1;\n    }\n    return \"\"\
    ;\n}", "    my(@list) = @$l;\n    my($found) = 0;\n    my($i, $j, $k);\n    for($i\
    \ = 0; $i < @list; $i++) {\n        for($j = $i + 1; $j < @list; $j++) {\n   \
    \         for($k = $j + 1; $k < @list; $k++) {\n                if($list[$i] +\
    \ $list[$j] + $list[$k] == 0) {\n                    $found = 1;\n           \
    \         last;\n                }\n            }\n        }\n    }\n    return\
    \ $found;\n}", "    for my $i (0..$#$l - 2) {\n        for my $j ($i + 1..$#$l\
    \ - 1) {\n            for my $k ($j + 1..$#$l) {\n                if($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return \"\";\n}", "    my @l = @$l;\n\
    \    if ($#l < 2) {\n        return \"\";\n    }\n    my $n = $#l;\n    for my\
    \ $i (0..$n-2) {\n        for my $j ($i+1..$n-1) {\n            for my $k ($j+1..$n)\
    \ {\n                if (($l[$i] + $l[$j] + $l[$k]) == 0) {\n                \
    \    return 1;\n                }\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "    for my $i (0..@$l-1) {\n        for my $j ($i+1..@$l-1) {\n\
    \            for my $k ($j+1..@$l-1) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return \"\";\n}", "    my($i, $j, $k);\n    for($i\
    \ = 0; $i < scalar(@$l); $i++) {\n        for($j = $i + 1; $j < scalar(@$l); $j++)\
    \ {\n            for($k = $j + 1; $k < scalar(@$l); $k++) {\n                return\
    \ 1 if ($l->[$i] + $l->[$j] + $l->[$k] == 0);\n            }\n        }\n    }\n\
    \    return \"\";\n}", "    my(@list) = sort {$a <=> $b} @$l;\n    my($i, $j,\
    \ $k);\n    my($n) = @list;\n    my($result) = \"\";\n    for ($i = 0; $i < $n-2;\
    \ $i++) {\n        $j = $i+1;\n        $k = $n-1;\n        while ($j < $k) {\n\
    \            if ($list[$i] + $list[$j] + $list[$k] == 0) {\n                $result\
    \ = 1;\n                last;\n            }\n            if ($list[$i] + $list[$j]\
    \ + $list[$k] < 0) {\n                $j++;\n            } else {\n          \
    \      $k--;\n            }\n        }\n    }\n    return $result;\n}", "    return\
    \ \"\" if scalar(@$l) < 3;\n    for (my $i = 0; $i < scalar(@$l); $i++) {\n  \
    \      for (my $j = $i + 1; $j < scalar(@$l); $j++) {\n            for (my $k\
    \ = $j + 1; $k < scalar(@$l); $k++) {\n                return 1 if ($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0);\n            }\n        }\n    }\n    return \"\"\
    ;\n}", "    my @sorted = sort {$a <=> $b} @$l;\n    my @sorted_len = length(@sorted);\n\
    \    if (@sorted_len < 3) {\n        return \"\";\n    }\n    else {\n       \
    \ my @s =  $sorted[0];\n        if (($s[0] + $s[1] + $s[2]) == 0) {\n        \
    \    return 1;\n        }\n        else {\n            return \"\";\n        }\n\
    \    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
