name: HumanEval_26_remove_duplicates
language: pl
prompt: "# From an array of integers, remove all elements that occur more than once.\n\
  # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2,\
  \ 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my %hash = ();\n    for (@$numbers) {\n        $hash{$_}++;\n \
    \   }\n    my @uniq = grep { $hash{$_} == 1 } @$numbers;\n    return \\@uniq;\n\
    }", "    # assume for the sake of example the array is ordered\n    my @out =\
    \ ();\n    my $last_number = undef;\n    foreach my $number (@$numbers) {\n  \
    \      if (!defined($last_number) || $number != $last_number) {\n            push\
    \ @out, $number;\n        }\n        $last_number = $number;\n    }\n    return\
    \ \\@out;\n}", "    my %seen;\n    return grep { !$seen{$_}++ } @$numbers;\n}",
  "    return [] unless defined $numbers;\n    my %unique = ();\n    my @unique =\
    \ ();\n    foreach my $num (@$numbers) {\n        unless (exists $unique{$num})\
    \ {\n            $unique{$num} = 1;\n            push @unique, $num;\n       \
    \ }\n    }\n    return \\@unique;\n}", "    my %seen;\n    for my $number (@$numbers)\
    \ {\n        $seen{$number}++;\n    }\n    my @unique;\n    for my $number (@$numbers)\
    \ {\n        if ($seen{$number} == 1) {\n            push @unique, $number;\n\
    \        }\n    }\n    return \\@unique;\n}", "    my @ret;\n    my %seen;\n \
    \   foreach my $num (@$numbers) {\n        push @ret, $num unless $seen{$num}++;\n\
    \    }\n    return \\@ret;\n}", "    my %seen;\n    return grep { !$seen{$_}++\
    \ } @$numbers;\n}", "    my %hash = ();\n    for (@$numbers) {\n        next if\
    \ $hash{$_};\n        $hash{$_} = 1;\n    }\n    return [ keys %hash ];\n}", " \
    \   my %unique = ();\n    my @unique_list = ();\n    foreach my $n (@$numbers)\
    \ {\n        unless ($unique{$n}) {\n            push @unique_list, $n;\n    \
    \        $unique{$n} = 1;\n        }\n    }\n    return \\@unique_list;\n}", " \
    \   my %hash = ();\n    foreach my $number (@$numbers) {\n        $hash{$number}++;\n\
    \    }\n    my @new_array = ();\n    foreach my $number (@$numbers) {\n      \
    \  if ($hash{$number} == 1) {\n            push @new_array, $number;\n       \
    \ }\n    }\n    return \\@new_array;\n}", "    my %counts;\n    my @result;\n\
    \    for my $number (@$numbers) {\n        $counts{$number}++;\n    }\n    for\
    \ my $number (@$numbers) {\n        push @result, $number if $counts{$number}\
    \ == 1;\n    }\n    return \\@result;\n}", "    my %counts;\n    for my $number\
    \ (@$numbers) {\n        $counts{$number}++;\n    }\n    my @result;\n    for\
    \ my $number (@$numbers) {\n        if ($counts{$number} == 1) {\n           \
    \ push @result, $number;\n        }\n    }\n    return \\@result;\n}", "    my\
    \ %count;\n    $count{$_}++ for @$numbers;\n    my @filtered = grep { $count{$_}\
    \ == 1 } @$numbers;\n    return \\@filtered;\n}", "    my %uniq;\n    my @uniq;\n\
    \    foreach my $number (@$numbers) {\n        if (not exists $uniq{$number})\
    \ {\n            $uniq{$number} = 1;\n            push @uniq, $number;\n     \
    \   }\n    }\n    return \\@uniq;\n}", "    my %hash = ();\n    my @out_arr =\
    \ ();\n    for (@$numbers) {\n        if(! exists $hash{$_}) {\n            $hash{$_}\
    \ = 1;\n            push @out_arr, $_;\n        }\n    }\n    return @out_arr;\n\
    }", "    my %seen;\n    my @result;\n    foreach my $number (@$numbers) {\n  \
    \      if (!$seen{$number}) {\n            push @result, $number;\n          \
    \  $seen{$number} = 1;\n        }\n    }\n    return \\@result;\n}", "    my %all;\n\
    \    my @results;\n    foreach my $num (@$numbers) {\n        if(! exists $all{$num})\
    \ {\n            $all{$num} = 1;\n            push @results, $num;\n        }\n\
    \    }\n    return \\@results;\n}", '    return undef unless $numbers;', "   \
    \ my %seen;\n    return grep { !$seen{$_}++ } @$numbers;\n}", "    my %occurrences;\n\
    \    my @uniques;\n    foreach my $number (@$numbers) {\n        if( $occurrences{$number}\
    \ ) {\n            $occurrences{$number} += 1;\n        } else {\n           \
    \ $occurrences{$number} = 1;\n            push @uniques, $number;\n        }\n\
    \    }\n    return \\@uniques;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
