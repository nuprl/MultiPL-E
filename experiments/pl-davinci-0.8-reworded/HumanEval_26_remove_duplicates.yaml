name: HumanEval_26_remove_duplicates
language: pl
prompt: "# From an array of integers, remove all elements that occur more than once.\n\
  # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2,\
  \ 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my %hash = ();\n    for (@$numbers) {\n        $hash{$_}++;\n \
    \   }\n    my @uniq = grep { $hash{$_} == 1 } @$numbers;\n    return \\@uniq;\n\
    }", "    # assume for the sake of example the array is ordered\n    my @out =\
    \ ();\n    my $last_number = undef;\n    foreach my $number (@$numbers) {\n  \
    \      if (!defined($last_number) || $number != $last_number) {\n            push\
    \ @out, $number;\n        }\n        $last_number = $number;\n    }\n    return\
    \ \\@out;\n}", "    my %seen;\n    return grep { !$seen{$_}++ } @$numbers;\n}",
  "    return [] unless defined $numbers;\n    my %unique = ();\n    my @unique =\
    \ ();\n    foreach my $num (@$numbers) {\n        unless (exists $unique{$num})\
    \ {\n            $unique{$num} = 1;\n            push @unique, $num;\n       \
    \ }\n    }\n    return \\@unique;\n}", "    my %seen;\n    for my $number (@$numbers)\
    \ {\n        $seen{$number}++;\n    }\n    my @unique;\n    for my $number (@$numbers)\
    \ {\n        if ($seen{$number} == 1) {\n            push @unique, $number;\n\
    \        }\n    }\n    return \\@unique;\n}", "    my @ret;\n    my %seen;\n \
    \   foreach my $num (@$numbers) {\n        push @ret, $num unless $seen{$num}++;\n\
    \    }\n    return \\@ret;\n}", "    my %seen;\n    return grep { !$seen{$_}++\
    \ } @$numbers;\n}", "    my %hash = ();\n    for (@$numbers) {\n        next if\
    \ $hash{$_};\n        $hash{$_} = 1;\n    }\n    return [ keys %hash ];\n}", " \
    \   my %unique = ();\n    my @unique_list = ();\n    foreach my $n (@$numbers)\
    \ {\n        unless ($unique{$n}) {\n            push @unique_list, $n;\n    \
    \        $unique{$n} = 1;\n        }\n    }\n    return \\@unique_list;\n}", " \
    \   my %hash = ();\n    foreach my $number (@$numbers) {\n        $hash{$number}++;\n\
    \    }\n    my @new_array = ();\n    foreach my $number (@$numbers) {\n      \
    \  if ($hash{$number} == 1) {\n            push @new_array, $number;\n       \
    \ }\n    }\n    return \\@new_array;\n}", "    my %counts;\n    my @result;\n\
    \    for my $number (@$numbers) {\n        $counts{$number}++;\n    }\n    for\
    \ my $number (@$numbers) {\n        push @result, $number if $counts{$number}\
    \ == 1;\n    }\n    return \\@result;\n}", "    my %counts;\n    for my $number\
    \ (@$numbers) {\n        $counts{$number}++;\n    }\n    my @result;\n    for\
    \ my $number (@$numbers) {\n        if ($counts{$number} == 1) {\n           \
    \ push @result, $number;\n        }\n    }\n    return \\@result;\n}", "    my\
    \ %count;\n    $count{$_}++ for @$numbers;\n    my @filtered = grep { $count{$_}\
    \ == 1 } @$numbers;\n    return \\@filtered;\n}", "    my %uniq;\n    my @uniq;\n\
    \    foreach my $number (@$numbers) {\n        if (not exists $uniq{$number})\
    \ {\n            $uniq{$number} = 1;\n            push @uniq, $number;\n     \
    \   }\n    }\n    return \\@uniq;\n}", "    my %hash = ();\n    my @out_arr =\
    \ ();\n    for (@$numbers) {\n        if(! exists $hash{$_}) {\n            $hash{$_}\
    \ = 1;\n            push @out_arr, $_;\n        }\n    }\n    return @out_arr;\n\
    }", "    my %seen;\n    my @result;\n    foreach my $number (@$numbers) {\n  \
    \      if (!$seen{$number}) {\n            push @result, $number;\n          \
    \  $seen{$number} = 1;\n        }\n    }\n    return \\@result;\n}", "    my %all;\n\
    \    my @results;\n    foreach my $num (@$numbers) {\n        if(! exists $all{$num})\
    \ {\n            $all{$num} = 1;\n            push @results, $num;\n        }\n\
    \    }\n    return \\@results;\n}", '    return undef unless $numbers;', "   \
    \ my %seen;\n    return grep { !$seen{$_}++ } @$numbers;\n}", "    my %occurrences;\n\
    \    my @uniques;\n    foreach my $number (@$numbers) {\n        if( $occurrences{$number}\
    \ ) {\n            $occurrences{$number} += 1;\n        } else {\n           \
    \ $occurrences{$number} = 1;\n            push @uniques, $number;\n        }\n\
    \    }\n    return \\@uniques;\n}", "    my %h;\n    my @r;\n    foreach my $number\
    \ (@$numbers) {\n        push @r, $number unless $h{$number}++;\n    }\n    return\
    \ \\@r;\n}", "    my $unique = uniq @$numbers;\n    return [ sort { $a <=> $b\
    \ } @$unique ];\n}", "    my $n = @$numbers;\n    my %h;\n    @h{@$numbers} =\
    \ @$numbers;\n    return [values %h];\n}", "    my %counts;\n    my @uniques;\n\
    \    foreach my $number (@$numbers) {\n        if ($counts{$number} > 0) {\n \
    \           $counts{$number}++;\n        } else {\n            $counts{$number}\
    \ = 1;\n            push @uniques, $number;\n        }\n    }\n    return \\@uniques;\n\
    }", "    my %seen;\n    my @out;\n    foreach my $number (@$numbers) {\n     \
    \   if (!$seen{$number}) {\n            push @out, $number;\n            $seen{$number}\
    \ = 1;\n        }\n    }\n    return \\@out;\n}", "    my %count;\n    my @result;\n\
    \    foreach my $number (@$numbers) {\n        if (!$count{$number}) {\n     \
    \       push @result, $number;\n        }\n        $count{$number}++;\n    }\n\
    \    return \\@result;\n}", "    my $list = {};\n    my @new_list;\n    foreach\
    \ my $number (@$numbers) {\n        push @new_list, $number if (!$list->{$number});\n\
    \        $list->{$number} = 1;\n    }\n    return \\@new_list;\n}", "    my %count;\n\
    \    my @res;\n    for my $number (@$numbers) {\n        if (++$count{$number}\
    \ == 1) {\n            push @res, $number;\n        }\n    }\n    return \\@res;\n\
    }", "    my %seen;\n    my @results;\n    foreach my $number (@$numbers) {\n \
    \       if (not $seen{$number}) {\n            push @results, $number;\n     \
    \       $seen{$number} = 1;\n        }\n    }\n    return \\@results;\n}", " \
    \   my %count;\n    foreach my $number (@$numbers) {\n        $count{$number}++;\n\
    \    }\n    return [grep { $count{$_} < 2 } @$numbers];\n}", "    my %num_count;\n\
    \    foreach my $num (@$numbers) {\n        $num_count{$num}++;\n    }\n    my\
    \ @unique_numbers;\n    foreach my $num (@$numbers) {\n        if ($num_count{$num}\
    \ == 1) {\n            push @unique_numbers, $num;\n        }\n    }\n    return\
    \ \\@unique_numbers;\n}", "    my $seen = Set::Object->new();\n    my $seen_twice\
    \ = Set::Object->new();\n    for my $num (@$numbers) {\n        if ($seen->includes($num))\
    \ {\n            $seen_twice->insert($num);\n        } else {\n            $seen->insert($num);\n\
    \        }\n    }\n    my @uniq = grep { !$seen_twice->includes($_) } @$numbers;\n\
    \    return \\@uniq;\n}", "    my %occurences;\n    return grep {\n        $occurences{$_}++;\n\
    \        $occurences{$_} == 1;\n    } @$numbers;\n}", "    my %unique = ();\n\
    \    foreach my $n (@$numbers) {\n        $unique{$n}++;\n    }\n    my @result\
    \ = grep { $unique{$_} == 1 } keys %unique;\n    return \\@result;\n}", "    my\
    \ %occurences;\n    my @result;\n    foreach my $n (@$numbers) {\n        if (defined\
    \ $occurences{$n}) {\n            $occurences{$n}++;\n        } else {\n     \
    \       $occurences{$n} = 1;\n        }\n    }\n    foreach my $n (@$numbers)\
    \ {\n        if ($occurences{$n} == 1) {\n            push @result, $n;\n    \
    \    }\n    }\n    return @result;\n}", "    my %seen;\n    return grep { not\
    \ $seen{$_}++ } @$numbers;\n}", "    my $number;\n    my %count;\n    my @result;\n\
    \    foreach $number (@$numbers) {\n        if (defined $count{$number}) {\n \
    \           $count{$number} += 1;\n        } else {\n            $count{$number}\
    \ = 1;\n        }\n    }\n    foreach $number (@$numbers) {\n        if ($count{$number}\
    \ == 1) {\n            push @result, $number;\n        }\n    }\n    return @result;\n\
    }", "    my %counts;\n    foreach my $n (@$numbers) {\n        $counts{$n}++;\n\
    \    }\n    my @result;\n    foreach my $n (@$numbers) {\n        if ($counts{$n}\
    \ == 1) {\n            push @result, $n;\n        }\n    }\n    return \\@result;\n\
    }", "    my %seen;\n    return grep !$seen{$_}++, @$numbers;\n}", "    my %uniq_numbers;\n\
    \    $uniq_numbers{$_}++ for @$numbers;\n    my @uniq_numbers = keys %uniq_numbers;\n\
    \    my %seen;\n    my @filtered_uniq_numbers = grep {!$seen{$_}++} @uniq_numbers;\n\
    \    return \\@filtered_uniq_numbers;\n}", "    my @unique;\n    my %seen;\n \
    \   foreach my $number (@$numbers) {\n        unless ($seen{$number}) {\n    \
    \        push @unique, $number;\n            $seen{$number} = 1;\n        }\n\
    \    }\n    return \\@unique;\n}", "    my @uniques = ();\n    my %counts = ();\n\
    \    foreach my $n (@$numbers) {\n        if (exists $counts{$n}) {\n        \
    \    $counts{$n} += 1;\n        } else {\n            $counts{$n} = 1;\n     \
    \   }\n    }\n    foreach my $n (@$numbers) {\n        if ($counts{$n} == 1) {\n\
    \            push @uniques, $n;\n        }\n    }\n    return \\@uniques;\n}",
  "    # TODO\n}", "    my %seen;\n    my @unique;\n    for my $n (@$numbers) {\n\
    \        if (!exists $seen{$n}) {\n            push @unique, $n;\n           \
    \ $seen{$n} = 1;\n        }\n    }\n    return \\@unique;\n}", "    my %count;\n\
    \    ++$count{$_} for @$numbers;\n    grep { $count{$_} == 1 } @$numbers;\n}",
  "    my %seen;\n    my @result;\n    foreach my $number (@$numbers) {\n        unless\
    \ ($seen{$number}) {\n            push @result, $number;\n            $seen{$number}\
    \ = 1;\n        }\n    }\n    return \\@result;\n}", "    my %seen;\n    return\
    \ grep { not $seen{$_}++ } @$numbers;\n}", "    my %counts;\n    $counts{$_}++\
    \ for @$numbers;\n    return [grep { $counts{$_} == 1 } @$numbers];\n}", "   \
    \ my $hash = {};\n    my @output;\n    foreach my $num (@$numbers) {\n       \
    \ if(!exists $hash->{$num}) {\n            $hash->{$num} = 1;\n            push\
    \ @output, $num;\n        }\n    }\n    return \\@output;\n}", "    my %hash;\n\
    \    return grep { not $hash{$_}++ } @$numbers;\n}", "    my %occurences;\n  \
    \  for my $n (@$numbers) {\n        $occurences{$n}++;\n    }\n    my @unique;\n\
    \    for my $n (@$numbers) {\n        if ($occurences{$n} == 1) {\n          \
    \  push @unique, $n;\n        }\n    }\n    return \\@unique;\n}", "    my %seen;\n\
    \    my @unique;\n    foreach my $num (@$numbers) {\n        if (!$seen{$num})\
    \ {\n            push @unique, $num;\n            $seen{$num} = 1;\n        }\n\
    \    }\n    return \\@unique;\n}", "    my $result = [];\n    my %numbers_seen;\n\
    \    for my $num (@$numbers) {\n        if (!$numbers_seen{$num}) {\n        \
    \    push @$result, $num;\n            $numbers_seen{$num} = 1;\n        }\n \
    \   }\n    return $result;\n}", "    my %seen;\n    @$numbers = grep { !$seen{$_}++\
    \ } @$numbers;\n    return $numbers;\n}", "    my @unique = ();\n    for my $number\
    \ (@$numbers) {\n        push @unique, $number unless grep $number == $_, @unique;\n\
    \    }\n    return @unique;\n}", "    my %seen;\n    for my $number (@$numbers)\
    \ {\n        if ($seen{$number}) {\n            $seen{$number}++;\n        } else\
    \ {\n            $seen{$number} = 1;\n        }\n    }\n    my @new_numbers;\n\
    \    for my $number (@$numbers) {\n        if ($seen{$number} == 1) {\n      \
    \      push @new_numbers, $number;\n        }\n    }\n    return \\@new_numbers;\n\
    }", "    my %seen;\n    return grep { !$seen{$_}++ } @$numbers;\n}", "    my %seen;\n\
    \    return grep { !$seen{$_}++ } @$numbers;\n}", "    my %occurrences;\n    foreach\
    \ my $n (@$numbers) {\n        $occurrences{$n}++;\n    }\n    my @result;\n \
    \   foreach my $n (@$numbers) {\n        push @result, $n if $occurrences{$n}\
    \ == 1;\n    }\n    return \\@result;\n}", "    my @filtered = grep { not $numbers->{$_}++\
    \ } @$numbers;\n    return \\@filtered;\n}", "    my @numbers_unique = ();\n \
    \   my %hash = ();\n    foreach my $n (@$numbers) {\n        $hash{$n}++;\n  \
    \  }\n    foreach my $n (@$numbers) {\n        if ($hash{$n} == 1) {\n       \
    \     push @numbers_unique, $n;\n        }\n    }\n    return \\@numbers_unique;\n\
    }", "    my %map = ();\n    my @filtered = ();\n    foreach my $n (@$numbers)\
    \ {\n        if (!exists $map{$n}) {\n            $map{$n} = 1;\n            push\
    \ @filtered, $n;\n        }\n    }\n    return \\@filtered;\n}", "    my $i;\n\
    \    my %temp;\n    my @ret;\n    foreach $i (@$numbers) {\n        $temp{$i}\
    \ += 1;\n    }\n    foreach $i (@$numbers) {\n        if ($temp{$i} == 1) {\n\
    \            push @ret, $i;\n        }\n    }\n    return @ret;\n}", "    my %hash;\n\
    \    return grep { !$hash{$_}++ } @$numbers;\n}", "    my $count = {};\n    for\
    \ (@$numbers) {\n        $count->{$_}++;\n    }\n    return [ grep { $count->{$_}\
    \ == 1 } @$numbers ];\n}", "    my %numbers_hash = map { $_ => 1 } @$numbers;\n\
    \    return [keys %numbers_hash];\n}", "    my %seen;\n    return grep { !$seen{$_}++\
    \ } @$numbers;\n}", "    # print \"remove_duplicates() numbers: $numbers\\n\"\
    ;\n    my %seen = ();\n    my @uniques = ();\n    foreach my $num (@$numbers)\
    \ {\n        if(defined $seen{$num}) {\n            # skip\n        } else {\n\
    \            $seen{$num} = 1;\n            push @uniques, $num;\n        }\n \
    \   }\n    return \\@uniques;\n}", "    my %seen;\n    for my $number (@$numbers)\
    \ {\n        $seen{$number}++;\n    }\n    return [\n        grep { $seen{$_}\
    \ == 1 } @$numbers\n    ];\n}", "    my %seen;\n    my @ans;\n    foreach my $n\
    \ (@$numbers) {\n        if (! $seen{$n}) {\n            push @ans, $n;\n    \
    \        $seen{$n} = 1;\n        }\n    }\n    return \\@ans;\n}", "    my %frequency;\n\
    \    my @no_duplicates;\n    foreach my $number (@$numbers) {\n        $frequency{$number}++;\n\
    \    }\n    foreach my $number (@$numbers) {\n        if ($frequency{$number}\
    \ == 1) {\n            push @no_duplicates, $number;\n        }\n    }\n    return\
    \ \\@no_duplicates;\n}", "    my %no_duplicates;\n    @no_duplicates{@$numbers}\
    \ = ();\n    return [keys %no_duplicates];\n}", "    my %occurrences;\n    return\
    \ grep {\n        ++$occurrences{$_} == 1;\n    } @$numbers;\n}", "    my %counts;\n\
    \    my @solution;\n    for my $num (@$numbers) {\n        if (!$counts{$num})\
    \ {\n            push @solution, $num;\n        }\n        $counts{$num} += 1;\n\
    \    }\n    return \\@solution;\n}", "    my %seen;\n    return grep {\n     \
    \   not exists $seen{$_} and $seen{$_}++ == 0;\n    } @$numbers;\n}", "    my\
    \ $i;\n    my %number_count;\n    for($i = 0; $i < scalar(@$numbers); $i++) {\n\
    \        if(defined($number_count{$numbers->[$i]})) {\n            $number_count{$numbers->[$i]}++;\n\
    \        } else {\n            $number_count{$numbers->[$i]} = 1;\n        }\n\
    \    }\n    my @output = ();\n    for($i = 0; $i < scalar(@$numbers); $i++) {\n\
    \        if($number_count{$numbers->[$i]} == 1) {\n            push(@output, $numbers->[$i]);\n\
    \        }\n    }\n    return @output;\n}", "    my %counts;\n    @counts{@$numbers}\
    \ = ();\n    return [keys %counts];\n}", "    my %seen;\n    my @out;\n    foreach\
    \ my $n (@$numbers) {\n        push @out, $n unless $seen{$n}++;\n    }\n    return\
    \ \\@out;\n}", "    my $count;\n    foreach (@$numbers) {\n        $count->{$_}++;\n\
    \    }\n    my @unique = grep { $count->{$_} == 1 } @$numbers;\n    return \\\
    @unique;\n}", "    my %hash = ();\n    my @uniques = ();\n    foreach my $number\
    \ (@$numbers) {\n        if (!exists $hash{$number}) {\n            $hash{$number}\
    \ = 1;\n            push @uniques, $number;\n        }\n    }\n    return \\@uniques;\n\
    }", "    my $unique = {};\n    my @unique_numbers = ();\n    foreach my $num (@$numbers)\
    \ {\n        if (!exists $unique->{$num}) {\n            push @unique_numbers,\
    \ $num;\n            $unique->{$num} = 1;\n        }\n    }\n    return \\@unique_numbers;\n\
    }", "    my @result;\n    my %seen;\n    foreach my $number (@$numbers) {\n  \
    \      if (!$seen{$number}) {\n            push @result, $number;\n          \
    \  $seen{$number} = 1;\n        }\n    }\n    return \\@result;\n}", "    my @result;\n\
    \    foreach my $num (@$numbers) {\n        if(!exists $result{$num}) {\n    \
    \        push @result, $num;\n            $result{$num} = 1;\n        }\n    }\n\
    \    return @result;\n}", "    my %hash = ();\n    for my $number (@$numbers)\
    \ {\n        $hash{$number}++;\n    }\n    my @unique = grep { $hash{$_} == 1\
    \ } @$numbers;\n    return @unique;\n}", "    my %unique = ();\n    my @unique_numbers\
    \ = ();\n    foreach my $number (@$numbers) {\n        if (exists $unique{$number})\
    \ {\n            $unique{$number} += 1;\n        } else {\n            $unique{$number}\
    \ = 1;\n        }\n    }\n    foreach my $number (@$numbers) {\n        if ($unique{$number}\
    \ == 1) {\n            push @unique_numbers, $number;\n        }\n    }\n    return\
    \ \\@unique_numbers;\n}", "    my $seen = {};\n    my @unique = grep { not $seen->{$_}++\
    \ } @$numbers;\n    return \\@unique;\n}", "    my %seen;\n    my @result;\n \
    \   foreach my $number (@$numbers) {\n        push @result, $number if !$seen{$number}++;\n\
    \    }\n    return \\@result;\n}", "    my %counts;\n    my @uniques;\n    foreach\
    \ my $number (@$numbers) {\n        $counts{$number}++;\n        push @uniques,\
    \ $number if $counts{$number} == 1;\n    }\n    return \\@uniques;\n}", "    my\
    \ %seen;\n    my @result;\n    foreach my $number (@$numbers) {\n        if (!$seen{$number})\
    \ {\n            push @result, $number;\n            $seen{$number} = 1;\n   \
    \     }\n    }\n    return \\@result;\n}", "    my %hash = ();\n    my @unique\
    \ = ();\n    foreach (@$numbers) {\n        push(@unique, $_) unless $hash{$_}++;\n\
    \    }\n    return \\@unique;\n}", "    my %seen;\n    return grep { not $seen{$_}++\
    \ } @$numbers;\n}", "    my %removed;\n    my @ret;\n    foreach my $number (@$numbers)\
    \ {\n        if (!exists $removed{$number}) {\n            push @ret, $number;\n\
    \            $removed{$number} = 1;\n        }\n    }\n    return \\@ret;\n}",
  "    my %hash = ();\n    foreach my $num (@$numbers) {\n        if (!$hash{$num})\
    \ {\n            $hash{$num} = 1;\n        } else {\n            $hash{$num}++;\n\
    \        }\n    }\n    my @result = ();\n    foreach my $num (@$numbers) {\n \
    \       if ($hash{$num} == 1) {\n            push @result, $num;\n        }\n\
    \    }\n    return @result;\n}", "    my $number_hash = {};\n    foreach my $number\
    \ (@$numbers) {\n        $number_hash->{$number}++;\n    }\n    my @result = ();\n\
    \    foreach my $number (@$numbers) {\n        if ($number_hash->{$number} ==\
    \ 1) {\n            push @result, $number;\n        }\n    }\n    return \\@result;\n\
    }", "    my %seen;\n    grep { !$seen{$_}++ } @$numbers;\n}", "    my %seen;\n\
    \    return [grep { !$seen{$_}++ } @$numbers];\n}", "    my %dups;\n    my @ret;\n\
    \    foreach my $n (@$numbers) {\n        push @ret, $n unless $dups{$n}++;\n\
    \    }\n    return \\@ret;\n}", "    my %counts;\n    for my $number (@$numbers)\
    \ {\n        $counts{$number}++;\n    }\n    return [grep { $counts{$_} == 1 }\
    \ @$numbers];\n}", "    my %counts;\n    foreach my $n (@$numbers) {\n       \
    \ $counts{$n} += 1;\n    }\n    my @result;\n    foreach my $n (@$numbers) {\n\
    \        if ($counts{$n} == 1) {\n            push @result, $n;\n        }\n \
    \   }\n    return \\@result;\n}", "    my %seen;\n    return grep { !$seen{$_}++\
    \ } @$numbers;\n}", "    my %dups;\n    my @clean;\n    foreach my $num (@$numbers)\
    \ {\n        if (exists $dups{$num}) {\n            $dups{$num}++;\n        }\
    \ else {\n            $dups{$num} = 1;\n        }\n    }\n    foreach my $num\
    \ (@$numbers) {\n        if ($dups{$num} == 1) {\n            push @clean, $num;\n\
    \        }\n    }\n    return @clean;\n}", "    my %hash;\n    for my $num (@$numbers)\
    \ {\n        $hash{$num}++;\n    }\n    my @numbers;\n    for my $key (keys %hash)\
    \ {\n        push @numbers, $key if $hash{$key} == 1;\n    }\n    return \\@numbers;\n\
    }", "    my $output;\n    my %count;\n    $count{$_}++ for @$numbers;\n    for\
    \ my $n (@$numbers) {\n        push @$output, $n if $count{$n} == 1;\n    }\n\
    \    return $output;\n}", "    my %counts;\n    foreach my $number (@$numbers)\
    \ {\n        $counts{$number}++;\n    }\n    my @result;\n    foreach my $number\
    \ (@$numbers) {\n        if($counts{$number} == 1) {\n            push @result,\
    \ $number;\n        }\n    }\n    return \\@result;\n}", "    my @result;\n  \
    \  my %dups;\n    for my $num (@$numbers) {\n        push @result, $num if ++$dups{$num}\
    \ == 1;\n    }\n    return \\@result;\n}", "    my %seen;\n    return [grep {\
    \ not $seen{$_}++ } @$numbers];\n}", "    my %cache;\n    my @result;\n    for\
    \ my $num (@$numbers) {\n        unless (exists $cache{$num}) {\n            push\
    \ @result, $num;\n            $cache{$num} = 1;\n        }\n    }\n    return\
    \ \\@result;\n}", "    # make a hash of (number => 1) for the seen ones\n    my\
    \ %seen;\n    for (@$numbers) {\n        $seen{$_} = 1;\n    }\n    # undef delete\
    \ removes from hashes, but not arrays\n    # return the values of the seen hash\n\
    \    return [ grep { defined } map { delete $seen{$_} } @$numbers ];\n}", "  \
    \  my $n = @$numbers;\n    my %appeared;\n    for my $i (0..$n-1) {\n        my\
    \ $number = $numbers->[$i];\n        if (defined $appeared{$number}) {\n     \
    \       splice @$numbers, $i, 1;\n            $i--;\n            $n--;\n     \
    \   } else {\n            $appeared{$number} = 1;\n        }\n    }\n    return\
    \ $numbers;\n}", "    my %seen;\n    return grep { !$seen{$_}++ } @$numbers;\n\
    }", "    return [] unless @$numbers;\n    my @result = $numbers->[0];\n    my\
    \ %seen = ($numbers->[0] => 1);\n    for my $number (@$numbers) {\n        if\
    \ (!exists $seen{$number}) {\n            push @result, $number;\n           \
    \ $seen{$number} = 1;\n        }\n    }\n    return \\@result;\n}", "    my %occur;\n\
    \    my @unique;\n    foreach my $number (@$numbers) {\n        if (not $occur{$number})\
    \ {\n            push @unique, $number;\n            $occur{$number} = 1;\n  \
    \      }\n    }\n    return \\@unique;\n}", "    my @result;\n    my %counts;\n\
    \    for my $number (@$numbers) {\n        if (++$counts{$number} == 1) {\n  \
    \          push @result, $number;\n        }\n    }\n    return \\@result;\n}",
  "    my $hash = {};\n    foreach my $number (@$numbers) {\n        $hash->{$number}\
    \ = $hash->{$number} + 1;\n    }\n    my @result = ();\n    foreach my $number\
    \ (@$numbers) {\n        if ($hash->{$number} == 1) {\n            push @result,\
    \ $number;\n        }\n    }\n    return \\@result;\n}", "    my %seen;\n    my\
    \ @res;\n    for (@$numbers) {\n        push @res, $_ unless $seen{$_}++;\n  \
    \  }\n    return \\@res;\n}", "    my %seen;\n    my @unique = grep { !$seen{$_}++\
    \ } @$numbers;\n    return \\@unique;\n}", "    my %counts;\n    foreach my $number\
    \ (@$numbers) {\n        if (!defined $counts{$number}) {\n            $counts{$number}\
    \ = 0;\n        }\n        $counts{$number}++;\n    }\n    my @uniques;\n    foreach\
    \ my $number (@$numbers) {\n        if ($counts{$number} == 1) {\n           \
    \ push @uniques, $number;\n        }\n    }\n    return \\@uniques;\n}", "   \
    \ my %seen;\n    my @uniq;\n    foreach my $number (@$numbers) {\n        if(!exists\
    \ $seen{$number}) {\n            push @uniq, $number;\n            $seen{$number}\
    \ = 1;\n        }\n    }\n    return \\@uniq;\n}", "    my %count;\n    my @unique;\n\
    \    for my $number (@$numbers) {\n        push @unique, $number unless exists\
    \ $count{$number};\n        $count{$number}++;\n    }\n    return \\@unique;\n\
    }", "    # YOUR CODE HERE\n}", "    my %hash = ();\n    foreach my $elem (@$numbers)\
    \ {\n        $hash{$elem}++;\n    }\n    return [grep { $hash{$_} == 1 } keys\
    \ %hash];\n}", "    my %seen;\n    my @result;\n    foreach my $num (@$numbers)\
    \ {\n        if (!$seen{$num}) {\n            push @result, $num;\n          \
    \  $seen{$num} = 1;\n        }\n    }\n    return \\@result;\n}", "    my %seen;\n\
    \    my @nodups;\n    foreach my $num (@$numbers) {\n        unless($seen{$num})\
    \ {\n            push @nodups, $num;\n            $seen{$num} = 1;\n        }\n\
    \    }\n    return \\@nodups;\n}", "    my @output;\n    my %dups;\n    foreach\
    \ my $number (@$numbers) {\n        if (!$dups{$number}) {\n            push @output,\
    \ $number;\n            $dups{$number} = 1;\n        }\n    }\n    return \\@output;\n\
    }", "    my %count;\n    my @filtered;\n    foreach my $n (@$numbers) {\n    \
    \    if (!exists $count{$n}) {\n            $count{$n} = 1;\n            push\
    \ @filtered, $n;\n        } else {\n            $count{$n}++;\n        }\n   \
    \ }\n    return \\@filtered;\n}", "    my %uniq;\n    grep { not $uniq{$_}++ }\
    \ @$numbers;\n}", "    return grep { not $seen{$_}++ } @$numbers;\n}", "    my\
    \ %uniq;\n    return grep {\n        if ($uniq{$_}) {\n            0;\n      \
    \  } else {\n            $uniq{$_} = 1;\n            1;\n        }\n    } @$numbers;\n\
    }", "    my $counts = { map { $_ => 0 } @$numbers };\n    for my $n (@$numbers)\
    \ {\n        $counts->{$n}++;\n    }\n    return [ grep { $counts->{$_} == 1 }\
    \ @$numbers ];\n}", "    #\n    # Your code goes here.\n    #\n    my %cnt;\n\
    \    foreach my $num (@$numbers) {\n        $cnt{$num} += 1;\n    }\n    my @result;\n\
    \    foreach my $num (@$numbers) {\n        if ($cnt{$num} == 1) {\n         \
    \   push @result, $num;\n        }\n    }\n    return \\@result;\n}", "    my\
    \ %h;\n    @h{@$numbers} = ();\n    return [keys %h];\n}", "    my $size = scalar\
    \ @$numbers;\n    my %seen;\n    my @uniq;\n    for my $i (0..$size - 1) {\n \
    \       if(!$seen{$numbers->[$i]}) {\n            push @uniq, $numbers->[$i];\n\
    \            $seen{$numbers->[$i]} = 1;\n        }\n    }\n    return \\@uniq;\n\
    }", "    my %seen;\n    return grep { !$seen{$_}++ } @$numbers;\n}", "    my $seen\
    \ = {};\n    my @out;\n    foreach my $num (@$numbers) {\n        if (!$seen->{$num})\
    \ {\n            push @out, $num;\n            $seen->{$num} = 1;\n        }\n\
    \    }\n    return \\@out;\n}", "    my %counts;\n    for my $number (@$numbers)\
    \ {\n        $counts{$number}++;\n    }\n    return [grep { $counts{$_} == 1 }\
    \ @$numbers];\n}", "    my $uniq = {};\n    my @uniq_values;\n    foreach my $number\
    \ (@$numbers) {\n        push @uniq_values, $number unless exists $uniq->{$number};\n\
    \        $uniq->{$number} = 1;\n    }\n    return \\@uniq_values;\n}", "    my\
    \ %seen;\n    return grep {!$seen{$_}++} @$numbers;\n}", "    my %seen;\n    return\
    \ grep { $seen{$_}++ == 0 } @$numbers;\n}", "    my %seen;\n    return (grep {\
    \ !$seen{$_}++ } @$numbers);\n}", "    my %found = ();\n    return grep {!$found{$_}++}\
    \ @$numbers;\n}", "    my %count;\n    ++$count{$_} for @$numbers;\n    return\
    \ [grep { $count{$_} == 1 } @$numbers];\n}", "    my %seen;\n    my @unique;\n\
    \    foreach my $i (@$numbers) {\n        if (! $seen{$i}) {\n            push\
    \ @unique, $i;\n            $seen{$i} = 1;\n        }\n    }\n    return \\@unique;\n\
    }", "    my %counts;\n    foreach my $number (@$numbers) {\n        $counts{$number}++;\n\
    \    }\n    my @numbers_out;\n    foreach my $number (@$numbers) {\n        if\
    \ ($counts{$number} == 1) {\n            push @numbers_out, $number;\n       \
    \ }\n    }\n    return \\@numbers_out;\n}", "    my %occurrences;\n    foreach\
    \ my $number (@$numbers) {\n        if(exists $occurrences{$number}) {\n     \
    \       delete $occurrences{$number};\n        } else {\n            $occurrences{$number}\
    \ = 1;\n        }\n    }\n    return sort keys %occurrences;\n}", "    my %count;\n\
    \    foreach my $num (@$numbers) {\n        $count{$num}++;\n    }\n    return\
    \ [grep { $count{$_} == 1 } @$numbers];\n}", "    my %hash;\n    my @result;\n\
    \    my $n;\n    foreach $n (@$numbers) {\n        push @result, $n if (++$hash{$n}\
    \ == 1);\n    }\n    return @result;\n}", "    my %seen;\n    return grep { !$seen{$_}++\
    \ } @$numbers;\n}", "    my %count;\n    @count{@$numbers} = ();\n    return [keys\
    \ %count];\n}", "    my %uniq = ();\n    my @uniq = ();\n    for my $number (@$numbers)\
    \ {\n        unless (exists $uniq{$number}) {\n            $uniq{$number} = 1;\n\
    \            push @uniq, $number;\n        }\n    }\n    return \\@uniq;\n}",
  "    my @result;\n    my %seen;\n    foreach (@$numbers) {\n        if (!exists\
    \ $seen{$_}) {\n            push @result, $_;\n            $seen{$_} = 1;\n  \
    \      }\n    }\n    return \\@result;\n}", "    my %count;\n    return grep {\
    \ !$count{$_}++ } @$numbers;\n}", "    my @result;\n    my %seen;\n    foreach\
    \ (@$numbers) {\n        push @result, $_ unless $seen{$_}++;\n    }\n    return\
    \ \\@result;\n}", "    my %count = ();\n    my @res = ();\n    foreach my $num\
    \ (@$numbers) {\n        unless (defined $count{$num}) {\n            $count{$num}\
    \ = 1;\n            push @res, $num;\n        } else {\n            $count{$num}++;\n\
    \        }\n    }\n    return \\@res;\n}", "    my @numbers = @$numbers;\n   \
    \ my @result;\n    my %count;\n    for my $n (@numbers) {\n        $count{$n}++;\n\
    \    }\n    for my $n (@numbers) {\n        push @result, $n if $count{$n} ==\
    \ 1;\n    }\n    return @result;\n}", "    my %uniq = ();\n    my @result = ();\n\
    \    for my $number (@$numbers) {\n        if (!$uniq{$number}) {\n          \
    \  push @result, $number;\n            $uniq{$number} = 1;\n        }\n    }\n\
    \    return \\@result;\n}", "    my $dup_counts = {};\n    my $result = [];\n\
    \    foreach my $number (@$numbers) {\n        $dup_counts->{$number}++;\n   \
    \ }\n    foreach my $number (@$numbers) {\n        if ($dup_counts->{$number}\
    \ == 1) {\n            push @$result, $number;\n        }\n    }\n    return $result;\n\
    }", "    my %duplicates;\n    my @return_array;\n    foreach my $number (@$numbers)\
    \ {\n        if(exists $duplicates{$number}) {\n            $duplicates{$number}++;\n\
    \        } else {\n            $duplicates{$number} = 1;\n        }\n    }\n \
    \   foreach my $number (@$numbers) {\n        if($duplicates{$number} == 1) {\n\
    \            push @return_array, $number;\n        }\n    }\n    return @return_array;\n\
    }", "    my %uniq = ();\n    foreach my $e (@$numbers) {\n        if ( !exists\
    \ $uniq{$e} ) {\n            $uniq{$e} = 1;\n        } else {\n            $uniq{$e}++;\n\
    \        }\n    }\n    my @return = ();\n    foreach my $e (@$numbers) {\n   \
    \     if ( $uniq{$e} == 1 ) {\n            push @return, $e;\n        }\n    }\n\
    \    return @return;\n}", "    #$numbers = [ 1, 2, 3, 2, 4 ]\n    my %has_seen;\n\
    \    #%has_seen = (\n    #'1' => 1,\n    #'2' => 1,\n    #'3' => 1,\n    #'4'\
    \ => 1,\n    #);\n    my @unique;\n    #@unique = (\n    #'1',\n    #'3',\n  \
    \  #'4',\n    #);\n    foreach my $number (@$numbers) {\n        if (!$has_seen{$number})\
    \ {\n            push @unique, $number;\n            $has_seen{$number} = 1;\n\
    \        }\n    }\n    return \\@unique;\n}", "    my $number = 0;\n    my @result\
    \ = ();\n    foreach my $number (@$numbers) {\n        push @result, $number if\
    \ ($numbers->[$number++] != $number);\n    }\n    return @result;\n}", "    my\
    \ %uniq;\n    $uniq{$_}++ for @$numbers;\n    return [sort grep { $uniq{$_} ==\
    \ 1 } keys %uniq];\n}", "    my %seen;\n    return grep {!$seen{$_}++} @$numbers;\n\
    }", "    my @numbers = @$numbers;\n    my %dups;\n    foreach my $num (@numbers)\
    \ {\n        if ($dups{$num}) {\n            $dups{$num} = -1;\n        } else\
    \ {\n            $dups{$num} = 1;\n        }\n    }\n    my @uniqs = grep { $dups{$_}\
    \ > 0 } keys %dups;\n    return \\@uniqs;\n}", "    my @uniques = ();\n    foreach\
    \ my $n (@$numbers) {\n        push @uniques, $n if (first { $_ == $n } @uniques)\
    \ == undef;\n    }\n    return \\@uniques;\n}", "    my %counter;\n    $counter{$_}++\
    \ for @$numbers;\n    my @result;\n    push @result, $_ for grep { $counter{$_}\
    \ == 1 } @$numbers;\n    return \\@result;\n}", "    my $hash = {};\n    my @result\
    \ = ();\n    foreach my $number (@$numbers) {\n        if (!defined $hash->{$number})\
    \ {\n            $hash->{$number} = 1;\n            push @result, $number;\n \
    \       }\n    }\n    return \\@result;\n}", "    my @result;\n    foreach my\
    \ $number (@$numbers) {\n        if (not grep { $number == $_ } @result) {\n \
    \           push @result, $number;\n        }\n    }\n    return \\@result;\n}",
  "    my $result = [];\n    my %seen;\n    for my $i (@$numbers) {\n        push\
    \ @$result, $i unless $seen{$i}++;\n    }\n    return $result;\n}", "    my %count;\n\
    \    foreach my $num (@$numbers) {\n        $count{$num}++;\n    }\n    my @result;\n\
    \    foreach my $num (@$numbers) {\n        push @result, $num if $count{$num}\
    \ == 1;\n    }\n    return \\@result;\n}", "    return [sort grep(not $count{$_}++,\
    \ @$numbers)];\n}", "    my %uniq;\n    $uniq{$_}++ for @$numbers;\n    return\
    \ [grep {$uniq{$_} == 1} @$numbers];\n}", "    return [unique(@$numbers)];\n}",
  "    my @result;\n    my %seen;\n    for my $i (@$numbers) {\n        push @result,\
    \ $i unless exists $seen{$i};\n        $seen{$i} = 1;\n    }\n    return \\@result;\n\
    }", "    my %counter;\n    for my $number (@$numbers) {\n        $counter{$number}++;\n\
    \    }\n    my @new_numbers;\n    for my $number (@$numbers) {\n        push @new_numbers,\
    \ $number unless $counter{$number} > 1;\n    }\n    return \\@new_numbers;\n}",
  "    my $seen = {};\n    return [ grep { !$seen->{$_}++ } @$numbers ];\n}", "  \
    \  my %count;\n    my @unique;\n    foreach my $n (@$numbers) {\n        if (!$count{$n})\
    \ {\n            push @unique, $n;\n        }\n        $count{$n}++;\n    }\n\
    \    return \\@unique;\n}", "    my @unique;\n    my %seen;\n    for my $number\
    \ (@$numbers) {\n        push @unique, $number unless $seen{$number}++;\n    }\n\
    \    return \\@unique;\n}", "    my $index = 0;\n    my %count;\n    foreach my\
    \ $num (@$numbers) {\n        if (not exists $count{$num}) {\n            $count{$num}\
    \ = 1;\n        } else {\n            $count{$num} += 1;\n        }\n    }\n \
    \   my @result;\n    foreach my $num (@$numbers) {\n        if ($count{$num} ==\
    \ 1) {\n            push @result, $num;\n        }\n    }\n    return \\@result;\n\
    }", "    my %counts;\n    foreach my $number (@$numbers) {\n        $counts{$number}++;\n\
    \    }\n    my @unique;\n    foreach my $number (@$numbers) {\n        if ($counts{$number}\
    \ == 1) {\n            push @unique, $number;\n        }\n    }\n    return \\\
    @unique;\n}", "    my %seen;\n    return grep { !$seen{$_}++ } @$numbers;\n}",
  "    my @numbers = @$numbers;\n    my %count = map {$_ => 0} @numbers;\n    $count{$_}++\
    \ for @numbers;\n    return grep {$count{$_} == 1} @numbers;\n}", "    my %seen;\n\
    \    my @result;\n    for my $number (@$numbers) {\n        if(not $seen{$number})\
    \ {\n            push @result, $number;\n            $seen{$number} = 1;\n   \
    \     }\n    }\n    return \\@result;\n}", "    my %counts;\n    my @output;\n\
    \    foreach my $number (@$numbers) {\n        if ($counts{$number} == 0) {\n\
    \            push @output, $number;\n        }\n        $counts{$number}++;\n\
    \    }\n    return \\@output;\n}", "    my @uniques = map { $_->[0] }\n      \
    \  sort { $a->[1] <=> $b->[1] }\n        map { [ $_, 1 ] }\n        @$numbers;\n\
    \    return \\@uniques;\n}", "    my %is_unique = ();\n    my @unique_numbers\
    \ = ();\n    foreach my $number (@$numbers) {\n        if(!$is_unique{$number})\
    \ {\n            push @unique_numbers, $number;\n            $is_unique{$number}\
    \ = 1;\n        }\n    }\n    return \\@unique_numbers;\n}", "    my %count;\n\
    \    @count{@$numbers} = ();\n    return [keys %count];\n}", "    my $last = -1;\n\
    \    my %unique;\n    grep {\n        $last = $_ if $_ != $last;\n        $unique{$_}\
    \ ? 0 : 1;\n    } @$numbers;\n}", "    my %seen;\n    return grep { $seen{$_}++\
    \ == 0 } @$numbers;\n}", "    my @numbers = @$numbers;\n    my @res = ();\n  \
    \  my %count = ();\n    for my $n (@numbers) {\n        if (!defined $count{$n})\
    \ {\n            $count{$n} = 1;\n            push @res, $n;\n        }\n    }\n\
    \    return @res;\n}", "    my %counts;\n    $counts{$_}++ for @$numbers;\n  \
    \  my @result;\n    push @result, $_ for grep { $counts{$_} == 1 } @$numbers;\n\
    \    return \\@result;\n}", "    my @copy = sort @$numbers;\n    my @new_numbers;\n\
    \    push @new_numbers, shift @copy;\n    foreach my $number (@copy) {\n     \
    \   if ($number != $new_numbers[-1]) {\n            push @new_numbers, $number;\n\
    \        }\n    }\n    return \\@new_numbers;\n}", "    my @unique = ();\n   \
    \ my %seen = ();\n    foreach my $number (@$numbers) {\n        push(@unique,\
    \ $number) unless $seen{$number}++;\n    }\n    return \\@unique;\n}", "    my\
    \ %seen;\n    return grep {!$seen{$_}++} @$numbers;\n}", "    my %seen;\n    my\
    \ @unique;\n    foreach my $number (@$numbers) {\n        if (exists $seen{$number})\
    \ {\n            next;\n        }\n        $seen{$number} = 1;\n        push @unique,\
    \ $number;\n    }\n    return \\@unique;\n}", "    my %occurrences;\n    for my\
    \ $number (@$numbers) {\n        if (exists $occurrences{$number}) {\n       \
    \     $occurrences{$number}++;\n        } else {\n            $occurrences{$number}\
    \ = 1;\n        }\n    }\n    my @uniques = grep { $occurrences{$_} == 1 } keys\
    \ %occurrences;\n    return @uniques;\n}", "    my %count;\n    my @new_numbers;\n\
    \    foreach my $num (@$numbers) {\n        push @new_numbers, $num unless $count{$num}++;\n\
    \    }\n    return \\@new_numbers;\n}", "    my %number_counts;\n    my @unique_numbers;\n\
    \    foreach my $number (@$numbers) {\n        $number_counts{$number}++;\n  \
    \      if($number_counts{$number} == 1) {\n            push @unique_numbers, $number;\n\
    \        }\n    }\n    return \\@unique_numbers;\n}", "    my %seen;\n    return\
    \ grep { !$seen{$_}++ } @$numbers;\n}", "    my %counts;\n    for (@$numbers)\
    \ {\n        $counts{$_}++;\n    }\n    my @result;\n    for (@$numbers) {\n \
    \       push @result, $_ if $counts{$_} == 1;\n    }\n    return \\@result;\n}",
  "    my %seen;\n    return grep { !$seen{$_}++ } @$numbers;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
