name: HumanEval_151_double_the_difference
language: pl
prompt: "# Given an array of numbers, return the sum of squares of the numbers\n#\
  \ in the array that are odd. Ignore numbers that are negative or not integers.\n\
  # >>> double_the_difference([1, 3, 2, 0])\n# 10\n# >>> double_the_difference([-1,\
  \ -2, 0])\n# 0\n# >>> double_the_difference([9, -2])\n# 81\n# >>> double_the_difference([0])\n\
  # 0\n# If the input array is empty, return 0.\nsub double_the_difference {\n   \
  \ my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
  \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
  \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
  \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0, -7.0,\
  \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $a = 0;\n    my $b = 0;\n    foreach my $x (@$lst) {\n     \
    \   if (int($x) != $x) {\n            next;\n        }\n        if ($x < 0) {\n\
    \            next;\n        }\n        if ($x % 2 == 0) {\n            $a += $x\
    \ * $x;\n        } else {\n            $b += $x * $x;\n        }\n    }\n    return\
    \ 2 * ($b - $a);\n}", '    return 0 unless @$lst;', "    my $sum = 0;\n    foreach\
    \ my $i (@$lst) {\n        if (($i%2==1) and ($i=~/^\\d+$/)) {\n            $sum\
    \ = $sum + $i*$i;\n        }\n    }\n    return $sum*2;\n}", "    my $sum = 0;\n\
    \    for my $x (@$lst) {\n        next if $x =~ /\\D/; # ignore non integers\n\
    \        next if $x < 0; # ignore negative numbers\n        $sum += ($x % 2 ==\
    \ 1) ? $x * $x : 0;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach\
    \ my $x (@$lst) {\n        if (defined($x) && $x =~ /^\\d+$/ && $x % 2 == 1) {\n\
    \            $sum += $x * $x;\n        }\n    }\n    return $sum * 2;\n}", " \
    \   # Your code goes here!\n}", "    my $value = 0;\n    foreach my $i (@$lst)\
    \ {\n        if ($i > 0 && $i % 2 == 1) {\n            $value += $i ** 2;\n  \
    \      }\n    }\n    return $value * 2;\n}", "    my $sum = 0;\n    foreach my\
    \ $item (@$lst) {\n        if ($item % 2) {\n            $sum += $item * $item;\n\
    \        }\n    }\n    return $sum;\n}", "    # put your code here\n    my $sum\
    \ = 0;\n    foreach my $num (@$lst) {\n        if ($num % 2 == 1) {\n        \
    \    $sum += $num ** 2;\n        }\n    }\n    return $sum;\n}", "    my $result\
    \ = 0;\n    foreach $num (@$lst) {\n        if ($num >= 0 && int($num) == $num\
    \ && $num % 2 == 1) {\n            $result += $num**2;\n        }\n    }\n   \
    \ return $result * 2;\n}", "    my $sum = 0;\n    foreach my $item (@$lst) {\n\
    \tif (($item % 2) == 1 && $item =~ /^\\d+$/) {\n\t    $sum += $item * $item;\n\
    \t}\n    }\n    return $sum;\n}", "    my $result = 0;\n    for my $num (@$lst)\
    \ {\n        if ($num < 0 || $num != int($num)) {\n            next;\n       \
    \ } elsif ($num % 2) {\n            $result += $num * $num;\n        }\n    }\n\
    \    return $result;\n}", "    my $sum = 0;\n    foreach my $x (@$lst) {\n   \
    \     if ($x =~ /^\\d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n   \
    \     }\n    }\n    return $sum;\n}", "    my $ret = 0;\n    foreach my $num (@$lst)\
    \ {\n        if ($num =~ /^\\d+$/ && $num > 0 && $num % 2 == 1) {\n          \
    \  $ret += $num ** 2;\n        }\n    }\n    return $ret;\n}", "    my @lst =\
    \ @$lst;\n    my $total = 0;\n    foreach my $num (@lst) {\n        if ($num >\
    \ 0 && $num % 2 == 1) {\n            $total += $num**2;\n        }\n    }\n  \
    \  return $total * 2;\n}", '    return 0 unless @$lst;', "    $sum = 0;\n    foreach\
    \ $ele (@$lst) {\n        if($ele =~ /^[0-9]+$/ and $ele >= 0) {\n           \
    \ if($ele % 2 != 0) {\n                $sum += $ele ** 2;\n            }\n   \
    \     }\n    }\n    return $sum;\n}", "    $lst = [] unless defined $lst;\n  \
    \  return 0 unless @$lst;\n    # YOUR CODE HERE\n    # Replace this with the proper\
    \ return value\n    return double_the_difference_from_empty($lst);\n}", "    my\
    \ $sum = 0;\n    foreach my $i (@$lst) {\n        next if (!is_int($i) || $i <\
    \ 0);\n        if ($i % 2 == 1) {\n            $sum += $i ** 2;\n        }\n \
    \   }\n    return $sum * 2;\n}", "    my $sum = 0;\n    foreach my $i (@$lst)\
    \ {\n        if($i > 0 && $i % 2 == 1) {\n            $sum += $i**2;\n       \
    \ }\n    }\n    return $sum;\n}", "    my $odd_squares = sum( map { ($_ % 2) ?\
    \ $_ * $_ : 0 } grep { $_ > 0 && $_ == int($_) } @$lst );\n    return $odd_squares\
    \ * 2;\n}", "    return 0 if $#$lst < 0;\n    my $sum = 0;\n    foreach(@$lst)\
    \ {\n        $sum += $_ * $_ if ($_ > 0 and $_ == int($_) and $_ % 2 == 1);\n\
    \    }\n    return $sum * 2;\n}", "    my $total;\n    foreach my $value (@$lst)\
    \ {\n\tif ($value % 2 == 1 && $value > 0) {\n\t    $total += $value ** 2;\n\t\
    }\n    }\n    return $total;\n}", "    my $total = 0;\n    foreach my $val (@$lst)\
    \ {\n        if (is_int($val) && $val >= 0 && $val % 2 == 1) {\n            $total\
    \ += $val * $val;\n        }\n    }\n    return $total;\n}", "    my $sum = 0;\n\
    \    foreach my $number (@$lst) {\n        if ($number =~ /^\\d+$/ and $number\
    \ % 2 == 1) {\n            $sum += $number * $number;\n        }\n    }\n    return\
    \ $sum;\n}", "    ...;\n}", "    my $result = 0;\n    foreach my $i (@$lst) {\n\
    \        next if $i <= 0;\n        $result += $i * $i if $i % 2;\n    }\n    return\
    \ $result;\n}", "    return 0 if @$lst == 0;\n    my @odds = grep {$_ % 2 != 0}\
    \ @$lst;\n    return sum_of_squares(@odds);\n}", "    my $diff = 0;\n    foreach\
    \ my $num (@$lst) {\n        if ($num =~ /^\\d+$/ && $num % 2 != 0) {\n      \
    \      $diff += $num ** 2;\n        }\n    }\n    return $diff * 2;\n}", "   \
    \ my $sum = 0;\n    for (@$lst) {\n        if ($_ % 2 == 1 && $_ > 0) {\n    \
    \        $sum += $_ ** 2;\n        }\n    }\n    return $sum * 2;\n}", "    my\
    \ $result = 0;\n    foreach my $n (@$lst) {\n        if (int($n) == $n && $n >=\
    \ 0 && $n % 2 == 1) {\n            $result += $n ** 2;\n        }\n    }\n   \
    \ return $result;\n}", "    my $result = 0;\n    for my $i (@$lst) {\n       \
    \ if (int($i) eq $i and $i > 0) {\n            if ($i % 2 == 1) {\n          \
    \      $result += $i**2;\n            }\n        }\n    }\n    return $result;\n\
    }", "    my $total = 0;\n    foreach my $num (@$lst) {\n        if($num % 2 !=\
    \ 0 && $num > 0 && $num == int($num)) {\n            $total += $num * $num;\n\
    \        }\n    }\n    return $total;\n}", "    my $sum = 0;\n    for my $num\
    \ (@$lst) {\n        if ($num > 0 && $num % 2 == 1) {\n            $sum += $num\
    \ * $num;\n        }\n    }\n    return $sum * 2;\n}", "    # your code here\n\
    \    my $sum = 0;\n    foreach (@$lst) {\n        if ($_ % 2 == 1) {\n       \
    \     $sum += $_ ** 2;\n        }\n    }\n    return $sum;\n}", "    # Your code\
    \ goes here\n    my $total = 0;\n    for my $i (@$lst) {\n        if ($i > 0 and\
    \ int($i) == $i and $i % 2 != 0) {\n            $total += $i ** 2;\n        }\n\
    \    }\n    return $total;\n}", "    my $sum = 0;\n    foreach my $x (@$lst) {\n\
    \        if (int($x) eq $x and $x > 0) {\n            $sum += $x * $x;\n     \
    \   }\n    }\n    return $sum * 2;\n}", "    # implement double_the_difference\n\
    }", "    my $sum = 0;\n    for my $i (@$lst) {\n        $sum += $i * $i if $i\
    \ % 2;\n    }\n    return $sum;\n}", "    ...;\n}", "    return 0 if !@$lst;\n\
    \    my $difference = 0;\n    for (@$lst) {\n        next if $_ < 0 || int($_)\
    \ != $_;\n        $difference += 2 * $_ if $_ % 2;\n    }\n    return $difference;\n\
    }", "    my $sum;\n    foreach my $x (@$lst) {\n        if ($x > 0 && $x == int($x)\
    \ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum * 2;\n}", "    if (ref($lst) ne 'ARRAY') {\n        die(\"Please pass in\
    \ an array\");\n    }\n    my $x = 0;\n    foreach (@$lst) {\n        if (!($_\
    \ =~ /^\\d+$/)) {\n            next;\n        }\n        if ($_ < 0) {\n     \
    \       next;\n        }\n        if ($_ % 2 == 1) {\n            $x += $_ **\
    \ 2;\n        }\n    }\n    return $x;\n}", "    # your solution goes here\n \
    \   my $sum;\n    foreach my $num (@$lst) {\n        if (($num%2 == 1) && ($num\
    \ =~ /^\\d+$/)) {\n            $sum += $num**2;\n        }\n    }\n    return\
    \ $sum;\n}", "    return 0 if not @$lst;\n    return sum([map { $_ * $_ } grep\
    \ { not $_ % 2 } @$lst])\n}", "    my $sum = 0;\n    foreach (@$lst) {\n     \
    \   if ($_ > 0 && int($_) == $_ && $_ % 2 == 1) {\n            $sum += $_**2;\n\
    \        }\n    }\n    return $sum * 2;\n}", "    my $sum = 0;\n    for my $n\
    \ (@$lst) {\n        $sum += ($n * $n) if is_odd($n);\n    }\n    return $sum;\n\
    }", "    # your code here\n    my $n = 0;\n    foreach my $num (@$lst) {\n   \
    \     if ($num =~ /^[+-]?\\d+$/ and $num % 2 != 0) {\n            $n += $num **\
    \ 2;\n        }\n    }\n    return $n;\n}", "    my $sum = 0;\n    foreach (@$lst)\
    \ {\n        if ($_%2 == 1) {\n            $sum += $_*$_;\n        }\n    }\n\
    \    return $sum;\n}", "    my $sum = 0;\n    for my $item (@$lst) {\n       \
    \ if($item =~ /^\\d*$/ && $item % 2 == 1) {\n            $sum += $item ** 2;\n\
    \        }\n    }\n    return $sum * 2;\n}", "    my $result = 0;\n    foreach\
    \ (@$lst) {\n        if ($_ % 2 == 1) {\n            $result += $_ ** 2;\n   \
    \     }\n    }\n    return $result;\n}", "    return reduce { $a + (2 * ($b **\
    \ 2)) } 0, grep { is_odd($_) } grep { is_int($_) } grep { is_positive($_) } @$lst;\n\
    }", "    my $ret = 0;\n    foreach my $i (@$lst) {\n        next if $i < 0 ||\
    \ !($i == int($i));\n        $ret += $i**2 if $i%2;\n    }\n    return $ret;\n\
    }", "    my $total = 0;\n    for my $number (@$lst) {\n        if ($number % 2\
    \ == 1) {\n            $total += $number * $number;\n        }\n    }\n    return\
    \ $total;\n}", "    my $sum = 0;\n    foreach my $x (@$lst) {\n        $sum +=\
    \ $x * $x if ($x % 2 == 1 && $x >= 0 && int($x) == $x);\n    }\n    return $sum;\n\
    }", "    my $ret = 0;\n    for my $num (@$lst) {\n        if ($num =~ /^\\d+$/\
    \ and $num >= 0 and $num % 2 == 1) {\n            $ret += $num ** 2;\n       \
    \ }\n    }\n    return $ret;\n}", "    my $sum = 0;\n    for my $num (@$lst) {\n\
    \        if (int($num) == $num && $num >= 0 && $num % 2 != 0) {\n            $sum\
    \ += $num * $num;\n        }\n    }\n    return $sum;\n}", "    if (@$lst == 0)\
    \ {\n        return 0;\n    }\n    my $largest = $lst->[0];\n    my $smallest\
    \ = $lst->[0];\n    foreach my $num (@$lst) {\n        if ($num > $largest) {\n\
    \            $largest = $num;\n        }\n        if ($num < $smallest) {\n  \
    \          $smallest = $num;\n        }\n    }\n    return 2 * ($largest - $smallest);\n\
    }", "    my $total = 0;\n    my $x;\n    foreach $x (@$lst) {\n        if ($x\
    \ % 2 == 1) {\n            $total += $x * $x;\n        }\n    }\n    return $total;\n\
    }", "    my $res = 0;\n    foreach (@$lst) {\n        if ($_ =~ /^\\d+$/ && $_\
    \ % 2 != 0) {\n            $res += $_ ** 2;\n        }\n    }\n    return $res;\n\
    }", "    return 0 if (! @$lst);\n    return @$lst ? 0 : 0;\n}", "    # put your\
    \ code here\n}", "    my $sum = 0;\n    foreach (@$lst) {\n        if (ref($_)\
    \ eq \"ARRAY\") {\n            $sum += double_the_difference($_);\n        } elsif\
    \ (($_ > 0) && ($_ == int($_))) {\n            if ($_ % 2 == 1) {\n          \
    \      $sum += $_**2;\n            }\n        }\n    }\n    return $sum * 2;\n\
    }", "    my $total = 0;\n    for my $number (@$lst) {\n        $total += $number\
    \ if ($number > 0 && $number % 2 == 1);\n    }\n    return $total;\n}", "    my\
    \ $result = 0;\n    for my $elem (@$lst) {\n        if ($elem =~ /^\\d+$/ and\
    \ $elem % 2 == 1) {\n            $result += $elem ** 2;\n        }\n    }\n  \
    \  return $result;\n}", "    my $sum = 0;\n    for my $i (@$lst) {\n        if\
    \ ($i > 0 and $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n\
    \    return $sum * 2;\n}", "    my $sum = 0;\n    foreach my $n (@$lst) {\n  \
    \      if ($n =~ /^\\d+$/ && $n > 0 && $n % 2 == 1) {\n            $sum += $n\
    \ * $n;\n        }\n    }\n    return $sum * 2;\n}", "    return 0 unless @$lst;\n\
    \    return 2 * sum_of_odd_squares($lst);\n}", "    # Your code goes here.\n}",
  "    my $sum_of_squares = 0;\n    foreach (@$lst) {\n        if ($_ =~ /^\\d+$/\
    \ && $_ % 2 == 1) {\n            $sum_of_squares += $_ * $_;\n        }\n    }\n\
    \    return $sum_of_squares * 2;\n}", "    # return 0 if($lst == []);\n    # return\
    \ 2 * sum(squares_of_odds(filter_positives($lst)));\n    return 2 * sum(squares_of_odds(filter_positives(filter_integers($lst))));\n\
    }", "    return 0 if(scalar(@$lst) == 0);\n    my $sum = 0;\n    foreach my $num\
    \ (@$lst) {\n        if($num =~ /^\\d+$/ && $num % 2 == 1) {\n            $sum\
    \ += $num ** 2;\n        }\n    }\n    return $sum * 2;\n}", "    my $diff = 0;\n\
    \    foreach my $elem (@$lst) {\n        if ($elem % 2 != 0) {\n            $diff\
    \ += $elem ** 2;\n        }\n    }\n    return $diff * 2;\n}", "    my $ret_val\
    \ = 0;\n    my $odd_val = 0;\n    my $even_val = 0;\n    # YOUR CODE HERE\n  \
    \  foreach $num (@$lst) {\n        if ($num % 2 != 0) {\n            $odd_val\
    \ += $num * $num;\n        }\n        else {\n            $even_val += $num *\
    \ $num;\n        }\n    }\n    $ret_val = $odd_val - $even_val;\n    return $ret_val;\n\
    }", "    my $res = 0;\n    for my $i (@$lst) {\n        if ($i > 0 && $i % 2 ==\
    \ 1) {\n            $res += $i * $i;\n        }\n    }\n    return $res;\n}",
  "    # your code here\n}", "    if (!defined($lst)) {\n        return 0;\n    }\n\
    \    return (\n        # map { ($_ ** 2) } # map list by squaring each element\n\
    \        map {\n            # is_number($_) and ($_ >= 0) and (($_ % 2) == 1)\
    \ # is_number($_) and is_positive($_) and is_odd($_)\n            if (is_number($_)\
    \ and ($_ >= 0) and (($_ % 2) == 1)) {\n                $_ ** 2;\n           \
    \ }\n            else {\n                0;\n            }\n        }\n      \
    \  @$lst\n    );\n}", "    # your code here\n}", "    return 0 if @$lst == 0;\n\
    \    my $total = 0;\n    foreach my $item (@$lst) {\n        if ($item =~ /^-?\\\
    d+$/ and $item % 2 == 1) {\n            $total += $item * $item;\n        }\n\
    \    }\n    return $total * 2;\n}", "    my $sum = 0;\n    # REPLACE with your\
    \ code\n    foreach my $num (@$lst) {\n        if($num % 2 == 1) {\n         \
    \   $sum += $num * $num;\n        }\n    }\n    return $sum;\n}", "    my $res\
    \ = 0;\n    foreach my $n (@$lst) {\n        $res += $n ** 2 if $n =~ /^\\d+$/\
    \ and $n % 2 == 1;\n    }\n    return $res;\n}", "    my $sum = 0;\n    for my\
    \ $i (@$lst) {\n        if (($i =~ /\\d+/) && ($i % 2 != 0)) {\n            $sum\
    \ += $i ** 2;\n        }\n    }\n    return $sum;\n}", "    my $result = 0;\n\
    \    for my $i (@$lst) {\n        if($i % 2 == 1 && $i > 0) {\n            $result\
    \ += $i ** 2;\n        }\n    }\n    return $result;\n}", "    # YOUR CODE HERE\n\
    \    my $sum=0;\n    for my $i(@$lst){\n      if($i>0 && int($i)==$i && $i%2!=0){\n\
    \        $sum+=$i*$i;\n      }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach (@$lst) {\n        next if $_ =~ /\\D/ || $_<0;\n        $sum +=\
    \ $_ ** 2 if $_ % 2;\n    }\n    return $sum;\n}", "    $sum = 0;\n    foreach\
    \ $x (@$lst) {\n        if ($x % 2 == 1) {\n            $sum += $x * $x;\n   \
    \     }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $number\
    \ (@$lst) {\n        if ($number =~ /\\d+/ && $number%2 == 1) {\n            $sum\
    \ += $number**2;\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $item (@$lst) {\n        if ($item % 2 != 0 && $item >= 0 && int($item)\
    \ == $item) {\n            $sum += $item**2;\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    foreach my $x (@$lst) {\n        if (ref($x) eq 'ARRAY')\
    \ {\n            $sum += double_the_difference($x);\n        } elsif (ref($x)\
    \ eq '') {\n            if ($x =~ /^[0-9]+$/ && $x % 2 == 1) {\n             \
    \   $sum += $x ** 2;\n            }\n        }\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    foreach my $elem (@$lst) {\n        if ($elem =~ /^\\d+$/\
    \ && $elem % 2 != 0) {\n            $sum += $elem * $elem;\n        }\n    }\n\
    \    return $sum;\n}", "    ####\n    my $result = 0;\n    for my $elt (@$lst)\
    \ {\n        if ($elt < 0) {\n            next;\n        }\n        if ($elt !=\
    \ int($elt)) {\n            next;\n        }\n        if ($elt % 2 == 0) {\n \
    \           next;\n        }\n        $result += $elt * $elt;\n    }\n    return\
    \ $result;\n}", "    my $squares = 0;\n    foreach my $number (@$lst) {\n    \
    \    if ($number =~ /\\d+/ && $number % 2 == 1) {\n            $squares += $number\
    \ ** 2;\n        }\n    }\n    return $squares * 2;\n}", "    die \"double_the_difference(LIST)\
    \ where LIST is a list of numbers\"\n        unless ref($lst) eq 'ARRAY';\n  \
    \  my $doubled_difference = 0;\n    my @odd_squares;\n    my @even_squares;\n\
    \    for my $number (@$lst) {\n        if (int($number) == $number && $number\
    \ > 0) {\n            if ($number % 2) {\n                push @odd_squares, $number**2;\n\
    \            } else {\n                push @even_squares, $number**2;\n     \
    \       }\n        }\n    }\n    my $odd_sum = sum(@odd_squares);\n    my $even_sum\
    \ = sum(@even_squares);\n    $doubled_difference = ($odd_sum - $even_sum) * 2;\n\
    \    return $doubled_difference;\n}", "    my $res = 0;\n    foreach my $x (@$lst)\
    \ {\n        if ($x < 0) {\n            next;\n        }\n        if ($x == int($x))\
    \ {\n            next;\n        }\n        $res += $x*$x;\n    }\n    return $res;\n\
    }", "    my $total = 0;\n    for my $num (@$lst) {\n        if ($num =~ /^\\d+$/\
    \ and $num >= 0 and $num % 2 == 1) {\n            $total += $num * $num;\n   \
    \     }\n    }\n    return $total;\n}", "    my $total = 0;\n    foreach (@$lst)\
    \ {\n        if ($_ % 2 == 1) {\n            $total += $_ ** 2;\n        }\n \
    \   }\n    return $total;\n}", "    my @lst = @$lst;\n    my $sum = 0;\n    for\
    \ my $i (@lst) {\n        $sum += $i if ($i % 2 != 0);\n    }\n    $sum = $sum\
    \ ** 2;\n    return $sum;\n}", "    # This is your job. :-)\n    my $ret = 0;\n\
    \    foreach my $i (@$lst) {\n        next if $i < 0;\n        next if $i != int($i);\n\
    \        if ($i % 2 == 1) {\n            $ret += $i * $i;\n        }\n    }\n\
    \    return $ret;\n}", "    # Initialize sum to 0, so that we always return something.\n\
    \    my $sum = 0;\n    # Loop through $lst and update $sum for each element of\
    \ $lst.\n    foreach my $num (@$lst) {\n        # Only add the element if it is\
    \ odd.\n        if ($num % 2 == 1) {\n            # Add the square of the element\
    \ to the sum.\n            $sum += $num ** 2;\n        }\n    }\n    # The sum\
    \ is doubled as per the problem statement.\n    return 2 * $sum;\n}", "    # Fill\
    \ in the code for this function\n    my $sum = 0;\n    my $sum1 = 0;\n    for(my\
    \ $i = 0; $i <= scalar(@$lst)-1; $i = $i + 1){\n        if((@$lst[$i] =~ /^[0-9]+$/)\
    \ && (@$lst[$i] % 2 != 0)){\n            $sum = $sum + (@$lst[$i] * @$lst[$i]);\n\
    \        }\n        elsif((@$lst[$i] =~ /^[0-9]+$/) && (@$lst[$i] % 2 == 0)){\n\
    \            $sum1 = $sum1 + (@$lst[$i] * @$lst[$i]);\n        }\n    }\n    return\
    \ ($sum * 2) - $sum1;\n}", "    my $sum;\n    foreach my $i (@$lst) {\n      \
    \  if ($i =~ /^\\d+$/ and $i % 2 != 0) {\n            $sum += $i ** 2;\n     \
    \   }\n    }\n    return $sum * 2;\n}", "    my $result = 0;\n    foreach my $item\
    \ (@$lst) {\n        if ($item % 2 == 1 && $item =~ /^\\d+$/) {\n            $result\
    \ += $item ** 2;\n        }\n    }\n    return $result;\n}", "    my $sum = 0;\n\
    \    foreach my $item (@$lst) {\n        if ($item % 2 == 1) {\n            $sum\
    \ += $item**2;\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n  \
    \  for my $i (@$lst) {\n\tif ($i % 2 != 0 && $i > 0) {\n\t    $sum += $i * $i;\n\
    \t}\n    }\n    return $sum;\n}", "    return ( sum map { $_ % 2 == 1 ? $_ * $_\
    \ : 0 } @$lst );\n}", "    my @square = ();\n    my $sum = 0;\n    for(my $i =\
    \ 0; $i < scalar @$lst; $i++){\n        my $val = @$lst[$i];\n        $val = int($val);\n\
    \        if($val < 0 || $val != (@$lst[$i])){\n            next;\n        }\n\
    \        my $rem = $val % 2;\n        if($rem != 0){\n            push(@square,\
    \ $val * $val);\n        }\n    }\n    for(my $i = 0; $i < scalar @square; $i++){\n\
    \        $sum += @square[$i];\n    }\n    return $sum;\n}", "    my $result =\
    \ 0;\n    foreach my $elem (@$lst) {\n        if ($elem % 2 == 1) {\n        \
    \    $result += $elem * $elem;\n        }\n    }\n    return $result;\n}", " \
    \   return 0 unless @$lst;\n    return 0 unless $lst->[0];\n    return ( $lst->[0]\
    \ * $lst->[0] ) + double_the_difference( $lst->[1..$#$lst] );\n}", "    #your\
    \ code here\n    my $sum = 0;\n    foreach my $number (@$lst) {\n        if($number\
    \ % 2 == 1 && int($number) == $number) {\n            $sum += $number**2;\n  \
    \      }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $elem\
    \ (@$lst) {\n        next if ($elem < 0 || int($elem) != $elem);\n        if ($elem\
    \ % 2) {\n            $sum += $elem * $elem;\n        }\n    }\n    return $sum\
    \ * 2;\n}", "    my $sum = 0;\n    foreach my $elem (@$lst) {\n        if ((int($elem)\
    \ == $elem) && ($elem > 0)) {\n            if ($elem % 2 == 1) {\n           \
    \     $sum += $elem ** 2;\n            }\n        }\n    }\n    return $sum *\
    \ 2;\n}", "    my $sum = 0;\n    for my $i (@$lst) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $i * $i;\n        }\n    }\n    return $sum;\n}", " \
    \   my $i;\n    my $sum = 0;\n    my $temp;\n    for($i = 0; $i < scalar(@$lst);\
    \ $i++) {\n        $temp = $$lst[$i];\n        if($temp%2 != 0) {\n          \
    \  $sum += $temp * $temp;\n        }\n    }\n    return $sum;\n}", "    return\
    \ 0 unless defined $lst;\n    my @new_list = grep {$_ % 2 == 1} @$lst;\n    if\
    \ (@new_list == 0) {\n        return 0;\n    } else {\n        return (sum @new_list)\
    \ ** 2;\n    }\n}", "    my $d = 0;\n    foreach my $e (@$lst) {\n        if (not\
    \ $e) {\n            next;\n        }\n        if ($e < 0) {\n            next;\n\
    \        }\n        if ($e % 2 == 0) {\n            next;\n        }\n       \
    \ $d += $e * $e;\n    }\n    return $d;\n}", "    my $sum = 0;\n    foreach my\
    \ $n (@$lst) {\n        if (int($n) == $n && $n > 0) {\n            $sum += $n\
    \ * $n;\n        }\n    }\n    return $sum * 2;\n}", "    my $sum = 0;\n    for\
    \ my $num (@$lst) {\n        $sum += $num if $num > 0 && $num % 2;\n    }\n  \
    \  $sum ** 2;\n}", "    my $sum = 0;\n    my $count = 0;\n    my $element;\n \
    \   foreach $element (@$lst) {\n        $count++;\n        if ($element % 2 ==\
    \ 1) {\n            $sum += $element ** 2;\n        }\n    }\n    $sum * 2;\n}",
  "    # your code here\n}", "    my $sum = 0;\n    my $double_sum = 0;\n    my $double_num\
    \ = 0;\n    foreach my $number (@$lst) {\n        if ($number >= 0 && int($number)\
    \ == $number) {\n            if ($number % 2 != 0) {\n                $sum +=\
    \ $number**2;\n            }\n        }\n    }\n    foreach my $num (@$lst) {\n\
    \        if ($num >= 0 && int($num) == $num) {\n            $double_num += $num;\n\
    \        }\n    }\n    $double_sum = 2 * $double_num;\n    $sum = $double_sum\
    \ - $sum;\n    return $sum;\n}", "    return 0 if (!@$lst);\n    my $sum = 0;\n\
    \    foreach my $x (@$lst) {\n        next if ($x < 0 || $x != int($x));\n   \
    \     $sum += $x * $x if $x % 2 == 1;\n    }\n    return $sum * 2;\n}", "    my\
    \ @lst = @$lst;\n    my $product = 1;\n    my $sumsq = 0;\n    for my $i (@lst)\
    \ {\n        if ($i % 2 == 1) {\n            $sumsq += $i * $i;\n        }\n \
    \   }\n    return $sumsq;\n}", "    my $total = 0;\n    foreach my $el (@$lst)\
    \ {\n\tif ($el =~ /\\d+/ && $el % 2 == 1) {\n\t    $total += $el ** 2;\n\t}\n\
    \    }\n    return $total;\n}", "    my $result = 0;\n    foreach my $num (@$lst)\
    \ {\n        $result += $num ** 2 if ($num > 0 and $num % 2);\n    }\n    return\
    \ $result;\n}", "    return 0 unless @$lst;\n    my $cnt = 0;\n    for (@$lst)\
    \ {\n        $cnt += $_ * $_ if $_ > 0 && $_ == int($_) && $_ % 2;\n    }\n  \
    \  return $cnt * 2;\n}", "    my $sum = 0;\n    foreach my $x (@$lst) {\n    \
    \    if ($x < 0 || $x != int($x)) {\n            next;\n        } elsif ($x %\
    \ 2) {\n            $sum += $x * $x;\n        }\n    }\n    return $sum * 2;\n\
    }", "    #\n    # You'll probably want to use grep and map here.\n    # Use \"\
    map\" to square the odd numbers.\n    # Use \"grep\" to filter out any numbers\
    \ that are negative or not integers.\n    #\n    #\n    my @newList = grep { ($_\
    \ % 2 == 1) && ($_ =~ /^\\d+$/) } @$lst;\n    @newList = map {$_ ** 2} @newList;\n\
    \    my $sum = 0;\n    $sum += $_ for @newList;\n    return $sum;\n}", "    return\
    \ 0 if (!defined($lst) || !@$lst);\n    my $neg = first { $_ < 0 } @$lst;\n  \
    \  my $int = first { int($_) != $_ } @$lst;\n    return 0 if (defined($neg) ||\
    \ defined($int));\n    my $total = 0;\n    foreach my $n (@$lst) {\n        $total\
    \ += $n * $n if ($n % 2);\n    }\n    return $total * 2;\n}", "    # Replace the\
    \ following line with your answer.\n}", "    my $double_sum = 0;\n    my $sum\
    \ = 0;\n    my $neg_sum = 0;\n    for my $item (@$lst) {\n        if ($item %\
    \ 2 != 0) {\n            $sum += $item ** 2;\n        }\n        if ($item < 0)\
    \ {\n            $neg_sum += $item;\n        }\n    }\n    $double_sum = $sum\
    \ * 2;\n    return $double_sum + $neg_sum;\n}", "    my @nums = map { $_ ** 2\
    \ } grep { $_ > 0 && int($_) == $_ && $_ % 2 } @$lst;\n    return @nums ? 2 *\
    \ (max(@nums) - min(@nums)) : 0;\n}", "    my $sum = 0;\n    for my $element (@$lst)\
    \ {\n        if (is_even($element)) {\n            $sum += $element * $element;\n\
    \        }\n    }\n    return $sum;\n}", "    # your code here\n    return 0 if\
    \ scalar @$lst == 0;\n    my $i = 0;\n    my $sum = 0;\n    foreach my $num (@$lst)\
    \ {\n        if ($num > 0 && $num == int($num)) {\n            if ($num % 2 ==\
    \ 1) {\n                $sum += $num**2;\n            }\n        }\n    }\n  \
    \  return $sum * 2;\n}", "    my $sum = 0;\n    for my $n (@$lst) {\n        if\
    \ ($n > 0 and $n % 2 == 1) {\n            $sum += $n ** 2;\n        }\n    }\n\
    \    return $sum * 2;\n}", "    my $sum = 0;\n    foreach my $x (@$lst) {\n  \
    \      if ($x >= 0 && $x =~ /^\\d+$/ && $x % 2 == 1) {\n            $sum += $x\
    \ * $x;\n        }\n    }\n    return $sum * 2;\n}", "    my $sum = 0;\n    foreach\
    \ my $i (@$lst) {\n        next if $i < 0;\n        next if int($i) != $i;\n \
    \       if ($i % 2 == 1) {\n            $sum += $i ** 2;\n        }\n    }\n \
    \   return $sum * 2;\n}", "    my $ret = 0;\n    my $i = 0;\n    while ($i < scalar(@$lst))\
    \ {\n        my $el = $lst->[$i];\n        if (\n            $el =~ /^\\d+$/ and\n\
    \            $el >= 0 and\n            $el % 2 == 1\n        ) {\n           \
    \ $ret += $el * $el;\n        }\n        $i++;\n    }\n    return $ret;\n}", " \
    \   if (@$lst == 0) {\n        return 0;\n    } else {\n        my $diff = 0;\n\
    \        foreach (@$lst) {\n            next if $_ < 0;\n            $diff +=\
    \ $_ if $_ % 2;\n        }\n        return $diff * 2;\n    }\n}", "    # YOUR\
    \ CODE HERE\n    my $total = 0;\n    foreach my $item (@$lst) {\n        if ($item\
    \ < 0) {\n            next;\n        } elsif ($item =~ /\\D/) {\n            next;\n\
    \        } elsif ($item % 2 == 0) {\n            next;\n        } else {\n   \
    \         $total += $item**2;\n        }\n    }\n    return $total;\n}", "   \
    \ return 0 unless @$lst;\n    return 2 * (sum_squares(grep { ($_ % 2 == 1) and\
    \ ($_ == int($_)) } @$lst));\n}", "    # Your code goes here\n}", "    my $diff\
    \ = 0;\n    foreach my $i (@$lst) {\n        if ($i % 2 != 0) {\n            $diff\
    \ += $i ** 2;\n        }\n    }\n    return $diff * 2;\n}", "    my $sum = 0;\n\
    \    for my $i (@$lst) {\n        if ( $i >= 0 and $i == int($i) and $i % 2 !=\
    \ 0 ) {\n            $sum += $i**2;\n        }\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    my $number;\n    # your code here\n    if(@$lst == 0){\n\
    \    \treturn 0;\n    }\n    else{\n    \tforeach $number (@$lst){\n    \t\tif($number\
    \ > 0 && int($number) == $number){\n    \t\t\tif($number % 2 == 1){\n    \t\t\t\
    \t$sum += $number**2;\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    return $sum*2;\n\
    }", "    return 0 if scalar(@$lst) == 0;\n    my $sum = 0;\n    for my $i (@$lst)\
    \ {\n        next if $i < 0;\n        next if $i != int($i);\n        $sum +=\
    \ $i ** 2 if $i % 2 == 1;\n    }\n    return $sum * 2;\n}", "    # your code here\n\
    \    return 0;\n}", "    my $result = 0;\n    foreach $x (@$lst) {\n        if\
    \ ($x == int($x) && $x > 0 && $x % 2 == 1) {\n            $result += $x * $x;\n\
    \        }\n    }\n    return $result;\n}", "    my $sum = 0;\n    my $even_sum\
    \ = 0;\n    foreach my $num (@$lst) {\n        if($num % 2 == 0 && $num =~ /^\\\
    d+$/) {\n            $even_sum += $num ** 2;\n        }\n        elsif($num %\
    \ 2 == 1 && $num =~ /^\\d+$/) {\n            $sum += $num ** 2;\n        }\n \
    \   }\n    return $sum * 2 - $even_sum;\n}", "    my $total = 0;\n    # Given\
    \ an array reference and a number, add the square of that number\n    # to the\
    \ total.\n    my $add_to_total = sub {\n        my($total, $x) = @_;\n       \
    \ if ($x =~ /^[0-9]+$/) {\n            $$total += $x**2;\n        }\n    };\n\
    \    foreach my $x (@$lst) {\n        &$add_to_total($total, $x);\n    }\n   \
    \ return $total * 2;\n}", "    ...\n}", "    my $sum = 0;\n    foreach my $x (@$lst)\
    \ {\n        next if $x !~ /^\\d+$/;\n        $sum += $x * $x if $x % 2 == 1;\n\
    \    }\n    return $sum * 2;\n}", "    my @list = @$lst;\n    my $sum = 0;\n \
    \   if (scalar @list == 0) {\n        return 0;\n    }\n    else {\n        foreach\
    \ my $num (@list) {\n            if ($num % 2 == 1 && $num > 0) {\n          \
    \      $sum += $num**2;\n            }\n        }\n        return $sum;\n    }\n\
    }", "    # your code here\n}", "    my $sum;\n    foreach my $i (@$lst) {\n  \
    \      if ($i =~ /^-?\\d+$/ and $i % 2 == 1) {\n            $sum += $i**2;\n \
    \       }\n    }\n    return $sum * 2;\n}", "    my $sum;\n    foreach my $i (@$lst)\
    \ {\n        $sum += ($i**2) if ($i % 2 == 1 && $i =~ /^\\d+$/);\n    }\n    return\
    \ 2 * $sum;\n}", "    my $result = 0;\n    foreach my $item (@$lst) {\n\tif ($item\
    \ =~ /^\\d+$/ && $item % 2 != 0) {\n\t    $result += $item ** 2;\n\t}\n    }\n\
    \    return $result;\n}", "    #your code here\n    return 0;\n}", "    my $sum\
    \ = 0;\n    foreach my $elem (@$lst) {\n        if (($elem % 2) && ($elem =~ /^[0-9]+$/))\
    \ {\n            $sum += $elem ** 2;\n        }\n    }\n    return $sum * 2;\n\
    }", "    my $sum = 0;\n    foreach (@$lst) {\n        if ($_ % 2 != 0 && $_ >=\
    \ 0 && $_ == int($_)) {\n            $sum += $_ ** 2;\n        }\n    }\n    return\
    \ $sum;\n}", "    my $result = 0;\n    foreach my $num (@$lst) {\n        if (ref($num)\
    \ eq 'ARRAY') {\n            $result += double_the_difference($num);\n       \
    \ } elsif ($num >= 0 && int($num) == $num && $num % 2 == 1) {\n            $result\
    \ += $num ** 2;\n        }\n    }\n    return $result;\n}", "    my $i;\n    my\
    \ $result = 0;\n    for ($i = 0; $i < scalar(@$lst); $i++) {\n        if ($lst->[$i]\
    \ =~ /^\\d+$/ && $lst->[$i] % 2 == 1) {\n            $result += $lst->[$i] * $lst->[$i];\n\
    \        }\n    }\n    return $result;\n}", "    my @new = ();\n    for my $i\
    \ (@$lst) {\n        if ($i >= 0 && int($i) == $i) {\n            if ($i % 2 ==\
    \ 1) {\n                push @new, ($i ** 2);\n            }\n        }\n    }\n\
    \    my $sum = 0;\n    for my $i (@new) {\n        $sum += $i;\n    }\n    $sum\
    \ *= 2;\n    return $sum;\n}", "    my @odds = ();\n    my $sum  = 0;\n    foreach\
    \ my $i (@$lst) {\n        if (int($i) == $i && $i > 0) {\n            push @odds,\
    \ $i;\n        }\n    }\n    foreach my $o (@odds) {\n        $sum += ($o**2);\n\
    \    }\n    return $sum * 2;\n}", "    my @lst = @$lst;\n    my $total = 0;\n\
    \    foreach my $i (@lst) {\n        if ($i % 2 == 1) {\n            $total +=\
    \ $i * $i;\n        }\n    }\n    return $total;\n}", "    my $total = 0;\n  \
    \  foreach my $x (@$lst) {\n        if ($x >= 0 && $x == int($x) && $x % 2 ==\
    \ 1) {\n            $total += $x * $x;\n        }\n    }\n    return $total;\n\
    }", "    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i >= 0 and $i\
    \ % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    foreach (@$lst) {\n        if ($_ =~ /^\\d+$/ && $_\
    \ % 2 == 1) {\n            $sum += $_ ** 2;\n        }\n    }\n    return $sum\
    \ * 2;\n}", "    my $diff = get_average($lst) - get_median($lst);\n    return\
    \ $diff*2;\n}", "    my $result = 0;\n    foreach (@$lst) {\n        $result +=\
    \ $_**2 if ($_ > 0 && $_ == int($_) && $_ % 2 != 0);\n    }\n    return $result;\n\
    }", "    my $ans = 0;\n    if ($lst) {\n        foreach my $num (@$lst) {\n  \
    \          next if ($num =~ /\\D/);\n            next if ($num < 0);\n       \
    \     $ans += $num * $num if ($num % 2);\n        }\n    }\n    return 2 * $ans;\n\
    }", "    my $sum = 0;\n    foreach (@$lst) {\n        $sum += $_**2 if $_ % 2\
    \ != 0;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $x (@$lst)\
    \ {\n        if ($x % 2 && $x > 0 && $x == int($x)) {\n            $sum += $x\
    \ * $x;\n        }\n    }\n    return $sum;\n}", "    my $ret = 0;\n    foreach\
    \ my $l (@$lst) {\n        if (($l > 0) && ($l == int($l)) && ($l % 2 == 1)) {\n\
    \            $ret += $l ** 2;\n        }\n    }\n    return $ret;\n}", "    my\
    \ $n = 0;\n    foreach $x (@$lst) {\n        if (int($x) == $x and $x > 0) {\n\
    \            $n += $x ** 2;\n        }\n    }\n    return $n * 2;\n}", "    return\
    \ 0 if ! @$lst;\n    my $sum = 0;\n    for my $num (@$lst) {\n        next if\
    \ $num < 0 || $num != int($num);\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num * $num;\n        }\n    }\n    return $sum * 2;\n}", "    # your code\
    \ here\n}", "    my $result = 0;\n    for my $num (@$lst) {\n        if ($num\
    \ % 2 == 1 && $num == int($num)) {\n            $result += $num ** 2;\n      \
    \  }\n    }\n    return $result;\n}", "    my $index;\n    my $result = 0;\n \
    \   for $index (@$lst) {\n        if (((int($index) == $index) && ($index > 0))\
    \ && ($index % 2 != 0)) {\n            $result += $index ** 2;\n        }\n  \
    \  }\n    return $result;\n}", "    my $result = 0;\n    foreach my $elem (@$lst)\
    \ {\n        if ($elem =~ /^-?\\d+$/ && $elem % 2 == 1) {\n            $result\
    \ += $elem ** 2;\n        }\n    }\n    return $result;\n}", "    my $sum = 0;\n\
    \    foreach my $num (@$lst) {\n        $sum += $num ** 2 if $num > 0 && $num\
    \ == int($num) && $num % 2 == 1;\n    }\n    return $sum;\n}", "    return 0 unless\
    \ @$lst;\n    return sum(map { $_ ** 2 } filter_odd(filter_int(filter_non_neg($lst))));\n\
    }", "    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x > 0 && $x %\
    \ 2 == 1) {\n            $sum += $x*$x;\n        }\n    }\n    return $sum * 2;\n\
    }", "    my $total = 0;\n    # YOUR CODE HERE\n    # Use a for loop\n    foreach\
    \ $element (@$lst) {\n        if ($element > 0 && $element % 2 != 0) {\n     \
    \       $total += $element ** 2;\n        }\n    }\n    return $total;\n}", " \
    \   my $result = 0;\n    if(scalar(@$lst) > 0){\n        foreach my $value (@$lst){\n\
    \            if($value % 2 == 1){\n                $result += ($value * $value);\n\
    \            }\n        }\n    }\n    return $result;\n}", "    my $sum = 0;\n\
    \    foreach my $i (@$lst) {\n        if ($i > 0 && int($i) == $i && $i % 2 ==\
    \ 1) {\n            $sum += $i * $i;\n        }\n    }\n    return $sum * 2;\n\
    }", "    my $sum = 0;\n    foreach $i (@$lst) {\n        if ($i % 2 == 1) {\n\
    \            $sum += $i ** 2;\n        }\n    }\n    return $sum;\n}", "    my\
    \ $num_pos = 0;\n    my $num_neg = 0;\n    foreach my $n (@$lst) {\n        if\
    \ ($n > 0) {\n            $num_pos += 1;\n        } elsif ($n < 0) {\n       \
    \     $num_neg += 1;\n        }\n    }\n    return $num_pos * $num_neg;\n}", " \
    \   return 0 unless @$lst;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n\t\
    next unless $i % 2 and int($i) == $i;\n\t$sum += $i * $i;\n    }\n    return $sum\
    \ * 2;\n}", "    my $answer = 0;\n    foreach (@$lst) {\n        if (($_ > 0)\
    \ && ($_ == int($_))) {\n            if (($_ % 2) == 1) {\n                $answer\
    \ += $_ * $_;\n            }\n        }\n    }\n    return $answer;\n}", "   \
    \ return 0 if @$lst == 0;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n \
    \       if (looks_like_number($num) && $num > 0 && int($num) == $num) {\n    \
    \        $sum += $num if $num % 2 == 1;\n        }\n    }\n    return $sum **\
    \ 2;\n}", "    my $sum = 0;\n    foreach (@$lst) {\n\tnext if (!/^[0-9]+$/ ||\
    \ $_ < 0);\n\t$sum += ($_%2 == 0) ? $_*$_ : -$_*$_;\n    }\n    return $sum;\n\
    }", "    # Fill in code here.\n    return 0;\n}", "    return 0 unless @$lst;\n\
    \    return sum(map { $_ * $_ } grep { $_ > 0 && $_ % 2 } @$lst);\n}", "    return\
    \ 0 unless @$lst;\n    my @positive_ints = grep { $_ >= 0 and $_ == int($_) }\
    \ @$lst;\n    my @odd_ints = grep { $_ % 2 } @positive_ints;\n    return 2 * sum(map\
    \ { $_ ** 2 } @odd_ints);\n}", "    my $sum = 0;\n    foreach my $num (@$lst)\
    \ {\n        next if ($num <= 0 || int($num) != $num);\n        $sum += $num **\
    \ 2 if ($num % 2 == 1);\n    }\n    return $sum * 2;\n}", "    my $result = 0;\n\
    \    foreach my $i (@$lst) {\n        if ($i > 0 and $i % 2 == 1) {\n        \
    \    $result += $i ** 2;\n        }\n    }\n    return $result;\n}", "    my $sum\
    \ = 0;\n    my $sum2 = 0;\n    foreach my $n (@$lst) {\n      if($n % 2 == 1){\n\
    \        $sum += $n**2;\n      }\n      else{\n        $sum2 += $n**2;\n     \
    \ }\n    }\n    my $diff = $sum - $sum2;\n    return 2*$diff;\n}", "    my $sum\
    \ = 0;\n    for my $val (@$lst) {\n        if ($val =~ /^\\d+$/ and $val % 2 ==\
    \ 1) {\n            $sum += $val ** 2;\n        }\n    }\n    return $sum * 2;\n\
    }", "    my $result = 0;\n    # Put your code here\n    return $result;\n}", " \
    \   my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\d+$/ && $n\
    \ > 0 && $n % 2 == 1) {\n            $sum += $n**2;\n        }\n    }\n    return\
    \ $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
