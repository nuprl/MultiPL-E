name: HumanEval_151_double_the_difference
language: pl
prompt: "# Given an array of numbers, return the sum of squares of the numbers\n#\
  \ in the array that are odd. Ignore numbers that are negative or not integers.\n\
  # >>> double_the_difference([1, 3, 2, 0])\n# 10\n# >>> double_the_difference([-1,\
  \ -2, 0])\n# 0\n# >>> double_the_difference([9, -2])\n# 81\n# >>> double_the_difference([0])\n\
  # 0\n# If the input array is empty, return 0.\nsub double_the_difference {\n   \
  \ my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
  \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
  \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
  \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0, -7.0,\
  \ -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $a = 0;\n    my $b = 0;\n    foreach my $x (@$lst) {\n     \
    \   if (int($x) != $x) {\n            next;\n        }\n        if ($x < 0) {\n\
    \            next;\n        }\n        if ($x % 2 == 0) {\n            $a += $x\
    \ * $x;\n        } else {\n            $b += $x * $x;\n        }\n    }\n    return\
    \ 2 * ($b - $a);\n}", '    return 0 unless @$lst;', "    my $sum = 0;\n    foreach\
    \ my $i (@$lst) {\n        if (($i%2==1) and ($i=~/^\\d+$/)) {\n            $sum\
    \ = $sum + $i*$i;\n        }\n    }\n    return $sum*2;\n}", "    my $sum = 0;\n\
    \    for my $x (@$lst) {\n        next if $x =~ /\\D/; # ignore non integers\n\
    \        next if $x < 0; # ignore negative numbers\n        $sum += ($x % 2 ==\
    \ 1) ? $x * $x : 0;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach\
    \ my $x (@$lst) {\n        if (defined($x) && $x =~ /^\\d+$/ && $x % 2 == 1) {\n\
    \            $sum += $x * $x;\n        }\n    }\n    return $sum * 2;\n}", " \
    \   # Your code goes here!\n}", "    my $value = 0;\n    foreach my $i (@$lst)\
    \ {\n        if ($i > 0 && $i % 2 == 1) {\n            $value += $i ** 2;\n  \
    \      }\n    }\n    return $value * 2;\n}", "    my $sum = 0;\n    foreach my\
    \ $item (@$lst) {\n        if ($item % 2) {\n            $sum += $item * $item;\n\
    \        }\n    }\n    return $sum;\n}", "    # put your code here\n    my $sum\
    \ = 0;\n    foreach my $num (@$lst) {\n        if ($num % 2 == 1) {\n        \
    \    $sum += $num ** 2;\n        }\n    }\n    return $sum;\n}", "    my $result\
    \ = 0;\n    foreach $num (@$lst) {\n        if ($num >= 0 && int($num) == $num\
    \ && $num % 2 == 1) {\n            $result += $num**2;\n        }\n    }\n   \
    \ return $result * 2;\n}", "    my $sum = 0;\n    foreach my $item (@$lst) {\n\
    \tif (($item % 2) == 1 && $item =~ /^\\d+$/) {\n\t    $sum += $item * $item;\n\
    \t}\n    }\n    return $sum;\n}", "    my $result = 0;\n    for my $num (@$lst)\
    \ {\n        if ($num < 0 || $num != int($num)) {\n            next;\n       \
    \ } elsif ($num % 2) {\n            $result += $num * $num;\n        }\n    }\n\
    \    return $result;\n}", "    my $sum = 0;\n    foreach my $x (@$lst) {\n   \
    \     if ($x =~ /^\\d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n   \
    \     }\n    }\n    return $sum;\n}", "    my $ret = 0;\n    foreach my $num (@$lst)\
    \ {\n        if ($num =~ /^\\d+$/ && $num > 0 && $num % 2 == 1) {\n          \
    \  $ret += $num ** 2;\n        }\n    }\n    return $ret;\n}", "    my @lst =\
    \ @$lst;\n    my $total = 0;\n    foreach my $num (@lst) {\n        if ($num >\
    \ 0 && $num % 2 == 1) {\n            $total += $num**2;\n        }\n    }\n  \
    \  return $total * 2;\n}", '    return 0 unless @$lst;', "    $sum = 0;\n    foreach\
    \ $ele (@$lst) {\n        if($ele =~ /^[0-9]+$/ and $ele >= 0) {\n           \
    \ if($ele % 2 != 0) {\n                $sum += $ele ** 2;\n            }\n   \
    \     }\n    }\n    return $sum;\n}", "    $lst = [] unless defined $lst;\n  \
    \  return 0 unless @$lst;\n    # YOUR CODE HERE\n    # Replace this with the proper\
    \ return value\n    return double_the_difference_from_empty($lst);\n}", "    my\
    \ $sum = 0;\n    foreach my $i (@$lst) {\n        next if (!is_int($i) || $i <\
    \ 0);\n        if ($i % 2 == 1) {\n            $sum += $i ** 2;\n        }\n \
    \   }\n    return $sum * 2;\n}", "    my $sum = 0;\n    foreach my $i (@$lst)\
    \ {\n        if($i > 0 && $i % 2 == 1) {\n            $sum += $i**2;\n       \
    \ }\n    }\n    return $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
