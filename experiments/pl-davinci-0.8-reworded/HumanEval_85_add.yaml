name: HumanEval_85_add
language: pl
prompt: "# Given a non-empty array of integers lst. add the even elements that are\
  \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n    my($lst)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n  \
  \      if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @list = @$lst;\n    my $sum = 0;\n    for(my $i = 0; $i < scalar\
    \ @list; $i += 2) {\n        if($list[$i] % 2 == 0) {\n            $sum += $list[$i];\n\
    \        }\n    }\n    return $sum;\n}", "    my $count = 0;\n    for(my $i =\
    \ 0; $i < scalar(@$lst); $i++){\n        if(($i % 2) == 1){\n            if(($lst->[$i]\
    \ % 2) == 0){\n                $count += $lst->[$i];\n            }\n        }\n\
    \    }\n    return $count;\n}", "    my $res = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i+=2) {\n        $res += @$lst[$i] if (@$lst[$i] % 2 == 0);\n    }\n    return\
    \ $res;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i +=\
    \ 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    return 0 if ref($lst) ne 'ARRAY';\n    my $sum = 0;\n    for\
    \ my $i (0..$#$lst) {\n        if (($i & 1) && !($lst->[$i] & 1)) {\n        \
    \    $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    foreach my $i (0..$#{$lst}) {\n        if($i % 2 != 0 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n  \
    \      $sum += @$lst[$i] if @$lst[$i] % 2 == 0;\n    }\n    return $sum;\n}",
  "    my $result = 0;\n    my $i = 0;\n    while ($i < scalar(@$lst)) {\n       \
    \ if (($i % 2) == 1 && ($lst->[$i] % 2) == 0) {\n            $result += $lst->[$i];\n\
    \        }\n        $i += 1;\n    }\n    return $result;\n}", "    my @even =\
    \ grep {$_ % 2 == 0} @$lst;\n    my @odd = grep {$_ % 2 == 1} @$lst;\n    return\
    \ sum(@even) + sum(@odd);\n}", "    my $result = 0;\n    for (my $i = 1; $i <\
    \ scalar(@$lst); $i += 2) {\n        $result += $lst->[$i] if $lst->[$i] % 2 ==\
    \ 0;\n    }\n    return $result;\n}", "    my $sum = 0;\n    for (my $i = 1; $i\
    \ < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 ==\
    \ 0;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <\
    \ scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if ($lst->[$i] % 2 ==\
    \ 0);\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $i (0..@$lst-1)\
    \ {\n        $sum += $lst->[$i] if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n    }\n\
    \    return $sum;\n}", "    my $i = 0;\n    my $answer = 0;\n    while ($i < @$lst)\
    \ {\n        if ($i % 2 == 1) {\n            $answer += $lst->[$i];\n        }\n\
    \        $i++;\n    }\n    return $answer;\n}", "    my $sum = 0;\n    for (my\
    \ $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i]\
    \ % 2 == 0;\n    }\n    return $sum;\n}", '    return 0 unless @$lst;', "    my\
    \ $sum;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n\
    \            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "  \
    \  my $total = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n      \
    \  if ($lst->[$i] % 2 == 0) {\n            $total += $lst->[$i];\n        }\n\
    \    }\n    return $total;\n}", "    my $sum = 0;\n    my $i = 0;\n    while ($i\
    \ < @$lst) {\n        $sum += $lst->[$i] if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n\
    \        $i++;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach (my\
    \ $i = 1; $i < scalar @$lst; $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i]\
    \ % 2 == 0;\n    }\n    return $sum;\n}", "    # your code here\n    my $sum =\
    \ 0;\n    foreach my $i (1..$#{$lst}){\n        if($i % 2 == 1 and $lst->[$i]\
    \ % 2 == 0){\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    die \"not a list\" unless 'ARRAY' eq ref $lst;\n    die \"empty list\"\
    \ unless @$lst;\n    my $sum = 0;\n    my $i = 1;\n    for (@$lst) {\n       \
    \ if (!($i++ % 2) && !($_ % 2)) {\n            $sum += $_;\n        }\n    }\n\
    \    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    foreach my $idx (0..@$lst-1) {\n        if(($idx\
    \ % 2 == 1) && ($lst->[$idx] % 2 == 0)) {\n            $sum += $lst->[$idx];\n\
    \        }\n    }\n    return $sum;\n}", "    my $result = 0;\n    for my $i (0\
    \ .. scalar(@$lst) - 1) {\n        $result += $$lst[$i] if $$lst[$i] % 2 == 0\
    \ && $i % 2 == 1;\n    }\n    return $result;\n}", "    return 0 if @$lst == 0;\n\
    \    return $lst->[0] if @$lst == 1;\n    my $result = $lst->[1];\n    for (my\
    \ $i = 2; $i < @$lst; $i += 2) {\n        $result += $lst->[$i];\n    }\n    return\
    \ $result;\n}", "    my $sum = 0;\n    foreach my $idx (0..@$lst-1) {\n      \
    \  $sum += $lst->[$idx] if $idx % 2 and $lst->[$idx] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    die unless ref($lst) eq 'ARRAY';\n    my $sum = 0;\n    for\
    \ my $i (0..$#$lst) {\n        if ($i % 2 == 1) {\n            if ($lst->[$i]\
    \ % 2 == 0) {\n                $sum += $lst->[$i];\n            }\n        }\n\
    \    }\n    return $sum;\n}", "    my $ans = 0;\n    for(my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $ans += $lst->[$i];\n\
    \        }\n    }\n    return $ans;\n}", "    my $n = 0;\n    for (my $i = 1;\
    \ $i < @$lst; $i += 2) {\n        $n += $lst->[$i] if $lst->[$i] % 2 == 0;\n \
    \   }\n    return $n;\n}", "    my $ans = 0;\n    my $index = 0;\n    foreach\
    \ my $num (@$lst) {\n        if ($index % 2 == 1 && $num % 2 == 0) {\n       \
    \     $ans += $num;\n        }\n        $index++;\n    }\n    return $ans;\n}",
  "    my $i = 0;\n    my $sum = 0;\n    for my $val (@$lst) {\n        if ($i % 2\
    \ == 1) {\n            $sum += $val if $val % 2 == 0;\n        }\n        $i++;\n\
    \    }\n    return $sum;\n}", "    my $sum;\n    for my $ind (1..$#$lst) {\n \
    \       if ($ind % 2 == 1) {\n            $sum += $lst->[$ind] if $lst->[$ind]\
    \ % 2 == 0;\n        }\n    }\n    return $sum;\n}\nsay \"add([4, 2, 6, 7]) =\
    \ \", add([4, 2, 6, 7]);", "    my $count = 0;\n    for (my $i = 0; $i < scalar\
    \ @$lst; $i++) {\n        if ($i % 2 == 1) {\n            if ($lst->[$i] % 2 ==\
    \ 0) {\n                $count += $lst->[$i];\n            }\n        }\n    }\n\
    \    return $count;\n}", "    # Your code here\n    my $i=0;\n    my $sum=0;\n\
    \    while($i<=$#{$lst}){\n        if($lst->[$i]%2==0){\n            $sum=$sum+$lst->[$i];\n\
    \        }\n        $i=$i+2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $i (0..$#{$lst}) {\n        if($i % 2 != 0) {\n            $sum\
    \ += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $i;\n    my\
    \ $sum = 0;\n    for($i = 0; $i < @$lst; $i++){\n        if(($i % 2 == 1) && ($lst->[$i]\
    \ % 2 == 0)){\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $result = 0;\n    # Your code here\n    return $result;\n}", "   \
    \ my @lst = @$lst;\n    my $sum = 0;\n    for(my $i = 0; $i < @lst; $i+=2) {\n\
    \        $sum += $lst[$i];\n    }\n    return $sum;\n}", "    my $sum = 0;\n \
    \   for my $i (0..$#$lst) {\n        if ($i % 2 == 1 && $lst->[$i] % 2 == 0) {\n\
    \            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "  \
    \  my $sum = 0;\n    foreach my $index (0 .. $#{$lst}) {\n        $sum += $lst->[$index]\
    \ if !($index % 2) && !($lst->[$index] % 2);\n    }\n    return $sum;\n}", " \
    \   $lst->[1] + $lst->[3];\n}", "    return sum(grep { $_ % 2 == 0 } grep { $count++\
    \ % 2 == 1 } @$lst);\n}", "    $sum = 0;\n    for(my $x = 0; $x < @$lst; $x++)\
    \ {\n        if($x % 2 == 1 && $lst->[$x] % 2 == 0) {\n            $sum += $lst->[$x];\n\
    \        }\n    }\n    return $sum;\n}", "    my $total = 0;\n    my $i = 0;\n\
    \    for my $n (@$lst) {\n        if ($i % 2 == 1 && $n % 2 == 0) {\n        \
    \    $total += $n;\n        }\n        $i++;\n    }\n    return $total;\n}", " \
    \   my $result = 0;\n    for my $index (0 .. $#$lst) {\n        if ($index % 2\
    \ == 1) {\n            if ($lst->[$index] % 2 == 0) {\n                $result\
    \ += $lst->[$index];\n            }\n        }\n    }\n    return $result;\n}",
  "    my $result = 0;\n    my $i = 0;\n    while($i < @$lst) {\n        if($i % 2\
    \ == 1 && $lst->[$i] % 2 == 0) {\n            $result += $lst->[$i];\n       \
    \ }\n        $i++;\n    }\n    return $result;\n}", "    my $sum = 0;\n    my\
    \ $i = 0;\n    my $a = 0;\n    my $c = scalar @$lst;\n    while ($a < $c) {\n\
    \        if ($i % 2 != 0) {\n            $sum += $lst->[$a];\n        }\n    \
    \    $i++;\n        $a++;\n    }\n    return $sum;\n}", "    return sumgrep(\n\
    \        sub { $_[0] % 2 == 0 },\n        sub { $_[0] % 2 == 1 },\n        @$lst\n\
    \    );\n}", "    my $result = 0;\n    foreach(my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $result += $lst->[$i] if($lst->[$i] % 2 == 0);\n    }\n\
    \    return $result;\n}", "    my $ret = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $ret += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $ret;\n}", "    my $i = 0;\n    my $sum = 0;\n    while ($i < @$lst) {\n   \
    \     $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n        $i += 2;\n    }\n  \
    \  return $sum;\n}", "    # TODO: add the even elements that are at odd indices\n\
    \    my $i = 0;\n    my $sum = 0;\n    while($i<=$#{$lst}){\n        if($i%2 ==\
    \ 0 && $lst->[$i]%2 != 0){\n            $sum += $lst->[$i];\n        }\n     \
    \   $i++;\n    }\n    return $sum;\n}", "    my $output = 0;\n    foreach my $index\
    \ (0 .. $#{$lst}) {\n        $output += $lst->[$index] if $index % 2 == 1 && $lst->[$index]\
    \ % 2 == 0;\n    }\n    return $output;\n}", "    my $result = 0;\n    my $i =\
    \ 0;\n    foreach my $x (@$lst) {\n        if(($i % 2 == 1) && ($x % 2 == 0))\
    \ {\n            $result += $x;\n        }\n        $i++;\n    }\n    return $result;\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n  \
    \      if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n\
    \    }\n    return $sum;\n}", "    my @e = grep { $_ % 2 == 0 } @$lst;\n    my\
    \ @i = grep { $_ % 2 == 1 } 0..$#$lst;\n    return sum(@e[@i]);\n}", "    my $result\
    \ = 0;\n    for my $i (0 .. $#$lst) {\n        if ($i % 2 == 1 && $lst->[$i] %\
    \ 2 == 0) {\n            $result += $lst->[$i];\n        }\n    }\n    return\
    \ $result;\n}", "    my $s = 0;\n    for(my $i = 1; $i < scalar(@$lst); $i +=\
    \ 2) {\n        $s += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $s;\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n  \
    \      if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}", "    # TODO: Fill in the implementation.\n\
    \    return $lst;\n}", "    my $res = 0;\n    my $i = 0;\n    while($i < scalar(@$lst))\
    \ {\n        $res += @$lst[$i] if ($i % 2 == 1 && @$lst[$i] % 2 == 0);\n     \
    \   $i++;\n    }\n    return $res;\n}", "    my $sum = 0;\n    for (my $i = 1;\
    \ $i < scalar(@$lst); $i += 2) {\n        if ($lst->[$i] % 2 == 0) {\n       \
    \     $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        if ($lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $r;\n    my $odd = 1;\n    for my $v (@$lst) {\n        if ($odd and\
    \ $v % 2 == 0) {\n            $r += $v;\n        }\n        $odd = !$odd;\n  \
    \  }\n    return $r;\n}", "    my $res = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $res += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $res;\n}", "    my $index = 1;\n    my $sum = 0;\n    while ($index < scalar(@$lst))\
    \ {\n        if ($lst->[$index] % 2 == 0) {\n            $sum += $lst->[$index];\n\
    \        }\n        $index += 2;\n    }\n    return $sum;\n}", "    my $sum =\
    \ 0;\n    foreach my $n (0..scalar(@$lst)-1) {\n        $sum += $lst->[$n] if\
    \ $n % 2 == 1 && $lst->[$n] % 2 == 0;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    for my $i (0..$#$lst) {\n        if ($i % 2 == 1 && $lst->[$i] % 2\
    \ == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $result = 0;\n    for my $index (0 .. $#$lst) {\n        $result +=\
    \ $lst->[$index] if $index % 2 == 1 && $lst->[$index] % 2 == 0;\n    }\n    return\
    \ $result;\n}", "    die \"not list\" unless ref($lst) eq 'ARRAY';\n    my $sum\
    \ = 0;\n    for my $i (1..$#$lst) {\n        $sum += $lst->[$i] if $i % 2 && $lst->[$i]\
    \ % 2 == 0;\n    }\n    return $sum;\n}", "    # TODO: Implement your solution\
    \ here\n    my $sum = 0;\n    my $k = 0;\n    for my $i (0..$#{$lst}) {\n    \
    \    if ($i % 2 == 1) {\n            $sum += $lst->[$i];\n        }\n    }\n \
    \   return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    return sum(grep { is_even($_) }\n               grep { is_odd($_)\
    \ }\n               @$lst);\n}", "    my $ret;\n    my $index = 0;\n    foreach\
    \ my $elem (@$lst) {\n        $ret += $elem if ($elem % 2 == 0) && ($index % 2\
    \ == 1);\n        $index++;\n    }\n    return $ret;\n}", "    my @numbers = @$lst;\n\
    \    my $count = 0;\n    for (my $i = 0; $i < @numbers; $i++){\n        if ($i\
    \ % 2 != 0){\n            $count += $numbers[$i];\n        }\n    }\n    return\
    \ $count;\n}", "    my $sum = 0;\n    foreach my $i (0..$#{$lst}) {\n        if(\
    \ $i % 2 == 1 && $lst->[$i] % 2 == 0 ) {\n            $sum += $lst->[$i];\n  \
    \      }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $i (0..$#$lst)\
    \ {\n        if($i % 2 == 1 && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}", "    my $i = 0;\n    my $sum = 0;\n \
    \   for my $i (0 .. $#$lst) {\n        if ($i % 2 == 1) {\n            $sum +=\
    \ $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    # TODO your code here\n\
    \    $sum = 0;\n    for($i = 0; $i < @$lst; $i += 2){\n        if($$lst[$i] %\
    \ 2 == 0){\n            $sum += $$lst[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    my $i = 0;\n    while ($i < scalar(@$lst)) {\n    \
    \    if ($i % 2 == 1) {\n            $sum += $lst->[$i];\n        }\n        $i++;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $sum += $lst->[$i] if ($lst->[$i] % 2 == 0);\n    }\n  \
    \  return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    my $total = 0;\n    for my $i (0 .. scalar(@$lst) - 1) {\n \
    \       if ($i % 2 == 1) {\n            $total += $lst->[$i];\n        }\n   \
    \ }\n    return $total;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}", "    my $total = 0;\n    for my $i (1..$#$lst)\
    \ {\n        $total += $lst->[$i] if $i % 2 and $lst->[$i] % 2 == 0;\n    }\n\
    \    return $total;\n}", "    reduce {\n        if ($a % 2 == 0) {\n         \
    \   return $a + $b;\n        }\n        return $b;\n    } @$lst;\n}", "    my\
    \ $sum = 0;\n    my $i = 0;\n    while ($i < scalar(@$lst)) {\n        if ($i\
    \ % 2 == 1) {\n            $sum += $lst->[$i];\n        }\n        $i += 1;\n\
    \    }\n    return $sum;\n}", "    # your code here\n}", "    my $sum = 0;\n \
    \   for my $i (0..@$lst - 1) {\n        if ($i % 2 != 0 && $lst->[$i] % 2 == 0)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}",
  "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $index = 0;\n    my $sum = 0;\n    foreach my $item (@$lst) {\n        $sum\
    \ += $item if ($index % 2 == 1 and $item % 2 == 0);\n        $index++;\n    }\n\
    \    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    my $total = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i +=\
    \ 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $total += $lst->[$i];\n\
    \        }\n    }\n    return $total;\n}", "    my $total = 0;\n    my $idx =\
    \ 0;\n    for my $num (@$lst) {\n        if($idx % 2) {\n            $total +=\
    \ $num if not $num % 2;\n        }\n        $idx++;\n    }\n    return $total;\n\
    }", "    my $sum = 0;\n    my $length = @$lst;\n    for(my $i = 0; $i < $length;\
    \ $i++) {\n        if($i % 2 != 0) {\n            $sum += $lst->[$i];\n      \
    \  }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <\
    \ scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n\
    \    }\n    return $sum;\n}", "    my @lst = @$lst;\n    my $sum = 0;\n    for\
    \ (my $i = 0; $i < scalar @lst; $i++) {\n        if ($i % 2 == 1 && $lst[$i] %\
    \ 2 == 0) {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n\
    }", "    return reduce { $a + $b }\n        grep { $b % 2 == 0 }\n        map\
    \ { $a }\n        map { $_ }\n        @$lst;\n}", "    my $even = 0;\n    for\
    \ (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        if ($lst->[$i] % 2 == 0)\
    \ {\n            $even += $lst->[$i];\n        }\n    }\n    return $even;\n}",
  "    my $res = 0;\n    foreach my $i (0..$#$lst) {\n        $res += $lst->[$i] if\
    \ $i % 2 and $lst->[$i] % 2 == 0;\n    }\n    return $res;\n}", "    return unless\
    \ (defined $lst);\n    my $result = 0;\n    my $idx = 1;\n    foreach my $item\
    \ (@$lst) {\n        $result += $item if ($idx % 2);\n        $idx++;\n    }\n\
    \    return $result;\n}", "    my @lst = @$lst;\n    my $res = 0;\n    for (my\
    \ $i = 1; $i < @lst; $i += 2) {\n        $res += $lst[$i] if $lst[$i] % 2 == 0;\n\
    \    }\n    return $res;\n}", "    my @lst = @$lst;\n    my $x = 0;\n    for my\
    \ $i (1..$#lst) {\n        if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n         \
    \   $x += $lst[$i];\n        }\n    }\n    return $x;\n}", "    my $sum = 0;\n\
    \    my $i = 0;\n    while ($i < scalar(@$lst)) {\n        if ($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n       \
    \ $i++;\n    }\n    return $sum;\n}", "    # your code here\n    my $sum = 0;\n\
    \    my $count = 0;\n    foreach my $num (@$lst) {\n        if ($count % 2 ==\
    \ 1 && $num % 2 == 0) {\n            $sum += $num;\n        }\n        $count++;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}", "    my $sum;\n    for my $index (0 ..\
    \ $#$lst) {\n        if ($index % 2 && $lst->[$index] % 2 == 0) {\n          \
    \  $sum += $lst->[$index];\n        }\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i]\
    \ if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my $sum = 0;\n  \
    \  foreach my $i (0..scalar(@$lst)-1) {\n        $sum += $lst->[$i] if $i % 2\
    \ and $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my @even_at_odd_index;\n\
    \    push @even_at_odd_index, $_ for (grep {$_ % 2 == 0} @$lst[grep {$_ % 2 !=\
    \ 0} 0..$#$lst]);\n    return eval join '+', @even_at_odd_index;\n}", "    my\
    \ $sum = 0;\n    foreach (my $i = 1; $i < scalar @$lst; $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    foreach my $i (0..scalar(@$lst) - 1) {\n        if($i % 2 ==\
    \ 1) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}",
  "    # Your code here\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1;\
    \ $i < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2\
    \ == 0;\n    }\n    return $sum;\n}", "    my $ans = 0;\n    my $ind = 1;\n  \
    \  while ($ind < @$lst) {\n        $ans += $lst->[$ind] if $lst->[$ind] % 2 ==\
    \ 0;\n        $ind += 2;\n    }\n    return $ans;\n}", "    my $sum = 0;\n   \
    \ for my $i (0..$#$lst) {\n        if ($i % 2 != 0 && $lst->[$i] % 2 == 0) {\n\
    \            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "  \
    \  my $sum = 0;\n    for my $i (1..$#$lst) {\n        if($i % 2 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    my $counter = 0;\n    foreach my $item (@$lst) {\n\
    \        if($counter % 2 == 1) {\n            if($item % 2 == 0) {\n         \
    \       $sum += $item;\n            }\n        }\n        $counter++;\n    }\n\
    \    return $sum;\n}", "    my $sum = 0;\n    foreach my $i (1..$#$lst) {\n  \
    \      $sum += $lst->[$i] if $i % 2 and $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    my $res = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i+=2)\
    \ {\n        $res += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $res;\n\
    }", "    return foldl(sub { $_[0] + $_[1] }, 0, filter(sub { $_[0] % 2 == 0 },\
    \ filter(sub { $_[1] % 2 == 1 }, @$lst)));\n}", "    my $sum = 0;\n    my $i =\
    \ 0;\n    while($i < scalar(@$lst)) {\n        if($i % 2 == 1) {\n           \
    \ if($lst->[$i] % 2 == 0) {\n                $sum += $lst->[$i];\n           \
    \ }\n        }\n        $i++;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $i (0..$#{$lst}) {\n        if ($i % 2 != 0) {\n            $sum\
    \ += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i]\
    \ if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    # placeholder for\
    \ solution\n    my $result = 0;\n    $result = sum(filter_list(is_even, keep_odd_indices($lst)));\n\
    \    return $result;\n}", "    my $sum = 0;\n    foreach my $i (0..scalar(@$lst)-1)\
    \ {\n        $sum += $$lst[$i] if $$lst[$i] % 2 == 0 && $i % 2 == 1;\n    }\n\
    \    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $idx (1..$#$lst)\
    \ {\n        $sum += $lst->[$idx] if $idx % 2 == 1 and $lst->[$idx] % 2 == 0;\n\
    \    }\n    return $sum;\n}", "    # your code here\n    my $sum = 0;\n    for(my\
    \ $i = 0; $i < scalar @$lst; $i++){\n        if($i % 2 != 0){\n            $sum\
    \ += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    my $i = 0;\n    foreach my $n (@$lst) {\n        if ($i % 2 == 1 && $n %\
    \ 2 == 0) {\n            $sum += $n;\n        }\n        $i++;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    foreach my $i (0..$#{$lst}) {\n        $sum\
    \ += $lst->[$i] if ($i % 2 == 1 && $lst->[$i] % 2 == 0);\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n  \
    \      $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}",
  "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i+=2) {\n        $sum +=\
    \ $lst->[$i] if ($lst->[$i] % 2 == 0);\n    }\n    return $sum;\n}", "    $sum=0;\n\
    \    for($i=1;$i<scalar(@$lst);$i+=2){\n        if($lst->[$i]%2==0){\n       \
    \     $sum+=$lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $even_sum\
    \ = 0;\n    for (my $i = 0; $i < @$lst; $i += 2) {\n        if ($lst->[$i] % 2\
    \ == 0) {\n            $even_sum += $lst->[$i];\n        }\n    }\n    return\
    \ $even_sum;\n}", "    my @add = ();\n    foreach my $i (0..$#{$lst}) {\n    \
    \    if($i % 2 == 1 && $lst->[$i] % 2 == 0) {\n            push @add, $lst->[$i];\n\
    \        }\n    }\n    return sum(\\@add);\n}", "    return sum(\n        grep\
    \ { $_ % 2 == 0 }\n        map { $lst->[$_] }\n        grep { $_ % 2 == 1 }\n\
    \        0..$#$lst);\n}", "    return sum @{$lst}[grep { $lst->[$_] % 2 == 0 }\
    \ (1..$#$lst)];\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $sum += @$lst[$i] if @$lst[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    my $ret = 0;\n    foreach my $i (1..$#$lst) {\n        if ($i\
    \ % 2 == 1) {\n            $ret += $lst->[$i] if $lst->[$i] % 2 == 0;\n      \
    \  }\n    }\n    return $ret;\n}", "    my $i = 0;\n    my $sum = 0;\n    foreach\
    \ (@$lst) {\n        $sum += $_ if ($i % 2 == 1) && ($_ % 2 == 0);\n        $i++;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    for my $i (0..scalar(@$lst)-1) {\n       \
    \ $sum += $lst->[$i] if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    my $result = 0;\n    for my $i (0 .. $#$lst) {\n        next\
    \ if $i % 2 == 0;\n        $result += $lst->[$i] if $lst->[$i] % 2 == 0;\n   \
    \ }\n    return $result;\n}", "    my $sum;\n    for (my $i = 0; $i < scalar @$lst;\
    \ $i++) {\n        if ($i % 2) { # if odd\n            $sum += $lst->[$i];\n \
    \       }\n    }\n    return $sum;\n}", "    return undef unless ($lst and @$lst);\n\
    \    my @odds = grep {$_ % 2 == 1} 0..$#$lst;\n    my $sum = 0;\n    $sum += $lst->[$_]\
    \ for @odds;\n    return $sum;\n}", "    my $result = 0;\n    for (my $i = 1;\
    \ $i < scalar(@$lst); $i += 2) {\n        $result += @$lst[$i] if (@$lst[$i] %\
    \ 2 == 0);\n    }\n    return $result;\n}", "    my $result = 0;\n    foreach\
    \ my $index (1 .. scalar(@$lst) - 1) {\n        if ($index % 2 == 1) {\n     \
    \       if ($lst->[$index] % 2 == 0) {\n                $result += $lst->[$index];\n\
    \            }\n        }\n    }\n    return $result;\n}", "    return sum(grep($_\
    \ % 2 == 0, @$lst[grep($_ % 2 == 1, 0..$#$lst)]))\n}", "    my $total = 0;\n \
    \   for my $i (0 .. @$lst-1) {\n        next if $i % 2 == 0;\n        next if\
    \ $lst->[$i] % 2 == 0;\n        $total += $lst->[$i];\n    }\n    return $total;\n\
    }", "    my $sum = 0;\n    # Add the even number in lst at odd indices\n    #\
    \ $i starts at 0\n    for my $i (0 .. $#$lst) {\n        if ($i % 2 == 1) {\n\
    \            if ($lst->[$i] % 2 == 0) {\n                $sum += $lst->[$i];\n\
    \            }\n        }\n    }\n    return $sum;\n}", "    my @even_odd_indices\
    \ = grep { $lst->[$_] % 2 == 0 } (1, 3);\n    return sum(@$lst[@even_odd_indices]);\n\
    }", "    my $total = 0;\n    for my $i (0 .. scalar(@$lst)-1) {\n        if($i\
    \ % 2 == 1) {\n            $total += $lst->[$i];\n        }\n    }\n    return\
    \ $total;\n}", "    my $ans = 0;\n    for(my $i = 1; $i < scalar(@$lst); $i +=\
    \ 2) {\n        if($lst->[$i] % 2 == 0) {\n            $ans += $lst->[$i];\n \
    \       }\n    }\n    return $ans;\n}", "    return sum(filter {is_even($_)} filter\
    \ {is_odd($_)} @$lst);\n}", "    my @lst = @$lst;\n    my $idx = 0;\n    my $sum\
    \ = 0;\n    foreach my $num (@lst) {\n        if ($idx % 2 == 1) {\n         \
    \   if ($num % 2 == 0) {\n                $sum += $num;\n            }\n     \
    \   }\n        $idx++;\n    }\n    return $sum;\n}", "    return reduce {$a +\
    \ $b} grep {$a % 2} @$lst;\n}", "    my $i = 0;\n    my $res = 0;\n    while ($i\
    \ < scalar(@$lst)) {\n        if ($i % 2 != 0 && $lst->[$i] % 2 == 0) {\n    \
    \        $res += $lst->[$i];\n        }\n        $i++;\n    }\n    return $res;\n\
    }", "    my $x = 0;\n    for(my $i = 0; $i < @$lst; $i++) {\n        $x += $$lst[$i]\
    \ if $i % 2 != 0 && $$lst[$i] % 2 == 0;\n    }\n    return $x;\n}", "    my $res\
    \ = 0;\n    for my $i (0..$#$lst) {\n        if ($i % 2) {\n            $res +=\
    \ $lst->[$i] if $lst->[$i] % 2 == 0;\n        }\n    }\n    return $res;\n}",
  "    my $sum = 0;\n    for my $i (0..$#$lst) {\n        next if $i % 2 == 0;\n \
    \       next if $lst->[$i] % 2 == 0;\n        $sum += $lst->[$i];\n    }\n   \
    \ return $sum;\n}", "    my $i = 0;\n    my $j = 1;\n    while ($i < @$lst) {\n\
    \        if ($lst->[$i] % 2 != 0 && $i % 2 != 0) {\n            splice(@$lst,\
    \ $i, 1);\n        } else {\n            $i++;\n        }\n    }\n    return $lst;\n\
    }", "    my $sum = 0;\n    my $i = 0;\n    foreach (@$lst) {\n        $sum +=\
    \ $_ if ($i % 2 == 1 && $_ % 2 == 0);\n        $i++;\n    }\n    return $sum;\n\
    }", "    my $ret = 0;\n    # TODO: replace with a valid solution\n    for (my\
    \ $i = 0; $i < @$lst; $i += 2) {\n        $ret += $lst->[$i];\n    }\n    return\
    \ $ret;\n}", "    my $sum = 0;\n    foreach my $i (0..$#{$lst}) {\n        $sum\
    \ += $lst->[$i] if $i % 2 == 1 and $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    my $i = 0;\n    foreach my $i (@$lst) {\n        $sum\
    \ += $i if $i % 2 == 0 && $i % 2 == 0;\n    }\n    return $sum;\n}", "    my $answer\
    \ = 0;\n    my $i = 0;\n    foreach my $item (@$lst) {\n        if ($i % 2 !=\
    \ 0 && $item % 2 == 0) {\n            $answer += $item;\n        }\n        $i++;\n\
    \    }\n    return $answer;\n}", "    my $i = 0;\n    my $sum = 0;\n    for my\
    \ $x (@$lst) {\n        if ($i % 2 == 1) {\n            $sum += $x if $x % 2 ==\
    \ 0;\n        }\n        $i++;\n    }\n    return $sum;\n}", "    my @lst = @$lst;\n\
    \    my $n = 0;\n    foreach my $i (0..$#lst) {\n        next if($i % 2 == 0);\n\
    \        $n += $lst[$i];\n    }\n    return $n;\n}", "    my $sum = 0;\n    for\
    \ (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i]\
    \ % 2 == 0;\n    }\n    return $sum;\n}", "    my $result = 0;\n    for (my $i\
    \ = 1; $i < scalar(@$lst); $i += 2) {\n        $result += $lst->[$i] if $lst->[$i]\
    \ % 2 == 0;\n    }\n    return $result;\n}", "    my $sum = 0;\n    for (my $i\
    \ = 1; $i < scalar(@$lst); $i += 2) {\n        if ($lst->[$i] % 2 == 0) {\n  \
    \          $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    my $idx = 0;\n    foreach(@$lst) {\n        if ($idx % 2 == 1\
    \ && $_ % 2 == 0) {\n            $sum += $_;\n        }\n        $idx += 1;\n\
    \    }\n    return $sum;\n}", "    my $result = 0;\n    for my $index (0 .. $#$lst)\
    \ {\n        if (defined $lst->[$index] && $lst->[$index] % 2 == 0 && $index %\
    \ 2 == 1) {\n            $result += $lst->[$index];\n        }\n    }\n    return\
    \ $result;\n}", "    my $res = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i\
    \ += 2) {\n        $res += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $res;\n}", "    my $sum = 0;\n    for my $i (0..$#$lst) {\n        if ($i %\
    \ 2) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}",
  "    my $i = 0;\n    my $sum = 0;\n    foreach my $elem (@$lst) {\n        $sum\
    \ += $elem if($i++ % 2 == 1 && $elem % 2 == 0);\n    }\n    return $sum;\n}",
  "    # TODO\n}", "    my $i = 0;\n    my $s = 0;\n    for my $e (@$lst) {\n    \
    \    if ($i % 2) {\n            $s += $e;\n        }\n        $i++;\n    }\n \
    \   return $s;\n}", "    my $sum = 0;\n    # Look at element at index 2, 4, 6,\
    \ ...\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        # add up only\
    \ the even elements\n        $sum += $lst->[$i] if ($lst->[$i] % 2 == 0);\n  \
    \  }\n    return $sum;\n}", "    # Good luck!\n    my $total = 0;\n    foreach\
    \ my $index (0..$#{$lst}) {\n        $total += $lst->[$index] if $index % 2 !=\
    \ 0 and $lst->[$index] % 2 == 0;\n    }\n    return $total;\n}", "    my $result\
    \ = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $result +=\
    \ $lst->[$i] if ($lst->[$i] % 2 == 0);\n    }\n    return $result;\n}", "    my\
    \ $sum = 0;\n    for my $i (0..$#$lst) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    my $index = 0;\n    my $length = @$lst;\n    while\
    \ ($index < $length) {\n        if ($index % 2 == 1) {\n            $sum += $lst->[$index];\n\
    \        }\n        $index += 1;\n    }\n    return $sum;\n}", "    my $i = 1;\n\
    \    my $s = 0;\n    while($i < scalar(@$lst)) {\n        if($lst->[$i] % 2 ==\
    \ 0) {\n            $s += $lst->[$i];\n        }\n        $i += 2;\n    }\n  \
    \  return $s;\n}", "    #your code here\n    my $sum = 0;\n    my $i = 0;\n  \
    \  foreach my $elem (@$lst) {\n      if($i % 2 == 1 && $elem % 2 == 0) {\n   \
    \     $sum += $elem;\n      }\n      $i++;\n    }\n    return $sum;\n}", "   \
    \ my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum\
    \ += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}", "    my\
    \ $i = 0;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($i % 2 ==\
    \ 1 && $x % 2 == 0) {\n            $sum += $x;\n        }\n        $i++;\n   \
    \ }\n    return $sum;\n}", "    my $sum = 0;\n    for my $i (0..$#$lst) {\n  \
    \      if ($i % 2 == 1) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}", "    return reduce { $a + ($b % 2 == 0 ? $b : 0) } 0, @$lst;\n\
    }", "    if(! @$lst) {\n        return 0;\n    }\n    my $el = shift @$lst;\n\
    \    if(@$lst) {\n        $el += add(shift @$lst);\n    }\n    return $el;\n}",
  "    my $sum = 0;\n    foreach my $i (0..scalar(@$lst)-1) {\n        if (($i % 2\
    \ == 1) && ($lst->[$i] % 2 == 0)) {\n            $sum += $lst->[$i];\n       \
    \ }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <\
    \ scalar(@$lst); $i += 2) {\n        if ($lst->[$i] % 2 == 0) {\n            $sum\
    \ += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    for (my $i = 1; $i < scalar(@$lst); $i+=2) {\n        if ($lst->[$i] % 2\
    \ == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
