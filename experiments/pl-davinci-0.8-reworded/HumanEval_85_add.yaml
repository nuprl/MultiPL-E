name: HumanEval_85_add
language: pl
prompt: "# Given a non-empty array of integers lst. add the even elements that are\
  \ at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n    my($lst)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n  \
  \      if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @list = @$lst;\n    my $sum = 0;\n    for(my $i = 0; $i < scalar\
    \ @list; $i += 2) {\n        if($list[$i] % 2 == 0) {\n            $sum += $list[$i];\n\
    \        }\n    }\n    return $sum;\n}", "    my $count = 0;\n    for(my $i =\
    \ 0; $i < scalar(@$lst); $i++){\n        if(($i % 2) == 1){\n            if(($lst->[$i]\
    \ % 2) == 0){\n                $count += $lst->[$i];\n            }\n        }\n\
    \    }\n    return $count;\n}", "    my $res = 0;\n    for (my $i = 1; $i < scalar(@$lst);\
    \ $i+=2) {\n        $res += @$lst[$i] if (@$lst[$i] % 2 == 0);\n    }\n    return\
    \ $res;\n}", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i +=\
    \ 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return\
    \ $sum;\n}", "    return 0 if ref($lst) ne 'ARRAY';\n    my $sum = 0;\n    for\
    \ my $i (0..$#$lst) {\n        if (($i & 1) && !($lst->[$i] & 1)) {\n        \
    \    $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    foreach my $i (0..$#{$lst}) {\n        if($i % 2 != 0 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n  \
    \      $sum += @$lst[$i] if @$lst[$i] % 2 == 0;\n    }\n    return $sum;\n}",
  "    my $result = 0;\n    my $i = 0;\n    while ($i < scalar(@$lst)) {\n       \
    \ if (($i % 2) == 1 && ($lst->[$i] % 2) == 0) {\n            $result += $lst->[$i];\n\
    \        }\n        $i += 1;\n    }\n    return $result;\n}", "    my @even =\
    \ grep {$_ % 2 == 0} @$lst;\n    my @odd = grep {$_ % 2 == 1} @$lst;\n    return\
    \ sum(@even) + sum(@odd);\n}", "    my $result = 0;\n    for (my $i = 1; $i <\
    \ scalar(@$lst); $i += 2) {\n        $result += $lst->[$i] if $lst->[$i] % 2 ==\
    \ 0;\n    }\n    return $result;\n}", "    my $sum = 0;\n    for (my $i = 1; $i\
    \ < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i] % 2 ==\
    \ 0;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for (my $i = 1; $i <\
    \ scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if ($lst->[$i] % 2 ==\
    \ 0);\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $i (0..@$lst-1)\
    \ {\n        $sum += $lst->[$i] if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n    }\n\
    \    return $sum;\n}", "    my $i = 0;\n    my $answer = 0;\n    while ($i < @$lst)\
    \ {\n        if ($i % 2 == 1) {\n            $answer += $lst->[$i];\n        }\n\
    \        $i++;\n    }\n    return $answer;\n}", "    my $sum = 0;\n    for (my\
    \ $i = 1; $i < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i]\
    \ % 2 == 0;\n    }\n    return $sum;\n}", '    return 0 unless @$lst;', "    my\
    \ $sum;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n\
    \            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}", "  \
    \  my $total = 0;\n    for (my $i = 1; $i < scalar(@$lst); $i += 2) {\n      \
    \  if ($lst->[$i] % 2 == 0) {\n            $total += $lst->[$i];\n        }\n\
    \    }\n    return $total;\n}", "    my $sum = 0;\n    my $i = 0;\n    while ($i\
    \ < @$lst) {\n        $sum += $lst->[$i] if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n\
    \        $i++;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach (my\
    \ $i = 1; $i < scalar @$lst; $i += 2) {\n        $sum += $lst->[$i] if $lst->[$i]\
    \ % 2 == 0;\n    }\n    return $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
