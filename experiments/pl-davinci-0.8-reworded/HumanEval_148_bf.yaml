name: HumanEval_148_bf
language: pl
prompt: "# There are eight planets in our solar system: the closerst to the Sun \n\
  # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus,\
  \ Neptune.\n# Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n# The function should return an array containing all planets whose\
  \ orbits are \n# located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n# the proximity to the sun. \n# The function should return an empty\
  \ array if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>>\
  \ bf(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf(\"Earth\",\
  \ \"Mercury\")\n# \"Venus\"\n# >>> bf(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"\
  Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nsub bf {\n    my($planet1, $planet2)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bf;\n   \
  \     if(eq_deeply($candidate->(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
  ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Earth\", \"Mercury\"),[\"Venus\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"Mercury\", \"Uranus\"),[\"\
  Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Neptune\"\
  , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Earth\", \"Earth\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->(\"Mars\", \"Earth\"),[])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Jupiter\", \"Makemake\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    my @inds = sort {$a <=>\
    \ $b} (index($planet1, @planets), index($planet2, @planets));\n    if ($inds[0]\
    \ == -1 || $inds[1] == -1) {\n        return \"\";\n    }\n    my @result = @planets[$inds[0]..$inds[1]];\n\
    \    @result = reverse @result if ($inds[0] > $inds[1]);\n    return @result;\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my($idx1, $idx2) = (0, 0);\n    for(my $i = 0; $i < scalar(@planets); $i++)\
    \ {\n        if($planets[$i] eq $planet1) {\n            $idx1 = $i;\n       \
    \ }\n        if($planets[$i] eq $planet2) {\n            $idx2 = $i;\n       \
    \ }\n    }\n    my @out;\n    for(my $i = $idx1 + 1; $i < $idx2; $i++) {\n   \
    \     push(@out, $planets[$i]);\n    }\n    return @out;\n}", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my $index1\
    \ = 0;\n    my $index2 = 0;\n    for my $i (0..7) {\n        if ($planets[$i]\
    \ eq $planet1) {\n            $index1 = $i;\n        }\n        if ($planets[$i]\
    \ eq $planet2) {\n            $index2 = $i;\n        }\n    }\n    if ($index1\
    \ == 0 or $index2 == 0) {\n        return [];\n    }\n    if ($index1 > $index2)\
    \ {\n        my $temp = $index1;\n        $index1 = $index2;\n        $index2\
    \ = $temp;\n    }\n    my @bf_planets = @planets[$index1+1..$index2-1];\n    return\
    \ \\@bf_planets;\n}", "    my $pos1 = find_position($planet1);\n    my $pos2 =\
    \ find_position($planet2);\n    my @planets = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    if (!$pos1 or !$pos2 or $pos1 == $pos2) {\n   \
    \     return ();\n    }\n    my $start = $pos1 < $pos2 ? $pos1 : $pos2;\n    my\
    \ $end = $pos1 < $pos2 ? $pos2 : $pos1;\n    return @planets[$start+1..$end-1];\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my $pl1;\n    my $pl2;\n    my @return_value;\n    my @ordered_planets;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    foreach\
    \ my $planet(@planets) {\n        if ($planet eq $planet1) {\n            $pl1\
    \ = $i;\n        }\n        if ($planet eq $planet2) {\n            $pl2 = $i;\n\
    \        }\n        $i++;\n    }\n    if (defined $pl1 && defined $pl2) {\n  \
    \      if ($pl1 < $pl2) {\n            $min = $pl1;\n            $max = $pl2;\n\
    \        } else {\n            $min = $pl2;\n            $max = $pl1;\n      \
    \  }\n        for ($j = $min+1; $j < $max; $j++) {\n            push(@return_value,\
    \ $planets[$j]);\n        }\n    }\n    return @return_value;\n}", "    my @planets\
    \ = qw/Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune/;\n    my $p1_index\
    \ = firstidx { $_ eq $planet1 } @planets;\n    my $p2_index = firstidx { $_ eq\
    \ $planet2 } @planets;\n    return () if $p1_index == -1 || $p2_index == -1;\n\
    \    if ($p1_index > $p2_index) {\n        return () if $p1_index - $p2_index\
    \ == 1;\n        return @planets[$p2_index+1..$p1_index-1];\n    }\n    if ($p1_index\
    \ < $p2_index) {\n        return () if $p2_index - $p1_index == 1;\n        return\
    \ @planets[$p1_index+1..$p2_index-1];\n    }\n    return ();\n}\nsay \"@{bf('Jupiter',\
    \ 'Neptune')}\";\nsay \"@{bf('Earth', 'Mercury')}\";\nsay \"@{bf('Mercury', 'Uranus')}\"\
    ;\nsay \"@{bf('Venus', 'Mercury')}\";", "    my @planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  my @planets_between = ();\n    my $i = 0;\n    my $j = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $b = 0;\n    my $e = 0;\n    my $out = \"\";\n    my $pl\
    \ = \"\";\n    for ($i = 0; $i < 8; $i++) {\n        if ($planet1 eq $planets[$i])\
    \ {\n            $x = $i;\n        }\n        if ($planet2 eq $planets[$i]) {\n\
    \            $y = $i;\n        }\n    }\n    if ($x > $y) {\n        $b = $y;\n\
    \        $e = $x;\n    }\n    else {\n        $b = $x;\n        $e = $y;\n   \
    \ }\n    if ($e > 0) {\n        for ($j = 0; $j < $e - $b + 1; $j++) {\n     \
    \       $pl = $planets[$b + $j];\n            $out = join(\"\", $out, $pl);\n\
    \            if ($j < $e - $b) {\n                $out = join(\"\", $out, \",\
    \ \");\n            }\n        }\n    }\n    return $out;\n}", "    my @planet\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my %hash\
    \ = map {$planet[$_] => $_} 0..$#planet;\n    my @result;\n    return @result\
    \ if !exists $hash{$planet1} || !exists $hash{$planet2};\n    my ($p1, $p2) =\
    \ ($hash{$planet1}, $hash{$planet2});\n    return @planet[($p1+1)..($p2-1)] if\
    \ $p1 < $p2;\n    return @planet[($p2+1)..($p1-1)];\n}", "    my @planets = qw{\
    \ Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune };\n    my @results;\n\
    \    my ($p1, $p2);\n    my %planets = map { lc($_) => $_ } @planets;\n    foreach\
    \ my $planet (@planets) {\n        if ( lc($planet) eq lc($planet1) ) {\n    \
    \        $p1 = $planet;\n        }\n        if ( lc($planet) eq lc($planet2) )\
    \ {\n            $p2 = $planet;\n        }\n    }\n    return unless $p1 && $p2;\n\
    \    my @slice = @planets[(index($p1, $p2))..(index($p2, $p1))];\n    print \"\
    @slice\\n\";\n    return @slice;\n}", "    my @planets = qw/Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune/;\n    my @result;\n    my $i = 0;\n    while\
    \ ($i < @planets) {\n        if ($planets[$i] eq $planet1) {\n            if ($i\
    \ == 0) {\n                return @result;\n            }\n            my $j =\
    \ $i+1;\n            while ($j < @planets) {\n                if ($planets[$j]\
    \ eq $planet2) {\n                    return @result;\n                }\n   \
    \             push @result, $planets[$j];\n                $j++;\n           \
    \ }\n            return @result;\n        }\n        $i++;\n    }\n    return\
    \ @result;\n}", "    my @result;\n    my %planets = (\n        mercury => 1,\n\
    \        venus => 2,\n        earth => 3,\n        mars => 4,\n        jupiter\
    \ => 5,\n        saturn => 6,\n        uranus => 7,\n        neptune => 8,\n \
    \   );\n    my @planets = sort { $planets{$a} <=> $planets{$b} } keys %planets;\n\
    \    if(exists $planets{$planet1} && exists $planets{$planet2}) {\n        my\
    \ $min = $planets{$planet1};\n        my $max = $planets{$planet2};\n        @result\
    \ = ($min > $max) ? \n        @planets[$max .. $min - 1] : @planets[$min .. $max\
    \ - 1];\n    }\n    return @result;\n}", "    my @planets = ('Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    my @newarr;\n\
    \    for (my $i = 0; $i < @planets; $i++) {\n        for (my $j = 0; $j < @planets;\
    \ $j++) {\n            if ($planets[$i] eq $planet1) {\n                if ($planets[$j]\
    \ eq $planet2) {\n                    for (my $l = $i + 1; $l < $j; $l++) {\n\
    \                        push @newarr, $planets[$l];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return @newarr;\n}",
  "    my %planets = (\n        \"Mercury\" => 0,\n        \"Venus\" => 1,\n     \
    \   \"Earth\" => 2,\n        \"Mars\" => 3,\n        \"Jupiter\" => 4,\n     \
    \   \"Saturn\" => 5,\n        \"Uranus\" => 6,\n        \"Neptune\" => 7,\n  \
    \  );\n    my @order = (0..7);\n    my $between = [];\n    if (exists $planets{$planet1}\
    \ && exists $planets{$planet2}) {\n        if ($planets{$planet1} > $planets{$planet2})\
    \ {\n            for my $i ($planets{$planet2}..$planets{$planet1}) {\n      \
    \          push(@$between, $order[$i]);\n            }\n        }\n        else\
    \ {\n            for my $i ($planets{$planet1}..$planets{$planet2}) {\n      \
    \          push(@$between, $order[$i]);\n            }\n        }\n    }\n   \
    \ return @$between;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    my @result;\n    # validating inputs\n    return\
    \ if !@planets[grep {$_ eq $planet1} @planets];\n    return if !@planets[grep\
    \ {$_ eq $planet2} @planets];\n    for(my $i = 0; $i < scalar @planets; $i++)\
    \ {\n        if($planets[$i] eq $planet1 || $planets[$i] eq $planet2) {\n    \
    \        if($planets[$i] eq $planet1) {\n                # if $planet1 is before\
    \ $planet2\n                if($i < @planets[grep {$_ eq $planet2} @planets])\
    \ {\n                    for(my $j = $i+1; $j < @planets[grep {$_ eq $planet2}\
    \ @planets]; $j++) {\n                        push @result, $planets[$j];\n  \
    \                  }\n                } else {\n                    # if $planet1\
    \ is after $planet2\n                    for(my $j = $i-1; $j > @planets[grep\
    \ {$_ eq $planet2} @planets]; $j--) {\n                        push @result, $planets[$j];\n\
    \                    }\n                }\n            } else {\n            \
    \    if($i < @planets[grep {$_ eq $planet1} @planets]) {\n                   \
    \ for(my $j = $i+1; $j < @planets[grep {$_ eq $planet1} @planets]; $j++) {\n \
    \                       push @result, $planets[$j];\n                    }\n \
    \               } else {\n                    for(my $j = $i-1; $j > @planets[grep\
    \ {$_ eq $planet1} @planets]; $j--) {\n                        push @result, $planets[$j];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return @result;\n}", "    my @names = (\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    my @out;\n\
    \    my $lo = 0;\n    my $hi = $#names;\n    while ($lo < $hi) {\n        if ($names[$lo]\
    \ eq $planet1) {\n            while (1) {\n                if ($names[$hi] eq\
    \ $planet2) {\n                    @out = @names[$lo..$hi];\n                \
    \    return @out;\n                }\n                $hi--;\n            }\n\
    \        }\n        $lo++;\n    }\n    return @out;\n}", "    my @planets = (\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    my $i = 0;\n    my $j = 0;\n    my @result = ();\n    for(my\
    \ $i = 0; $i < 8; $i++) {\n        if($planets[$i] eq $planet1) {\n          \
    \  $j = $i;\n            last;\n        }\n    }\n    for(my $i = $j; $i < 8;\
    \ $i++) {\n        if($planets[$i] eq $planet2) {\n            last;\n       \
    \ }\n        else {\n            push(@result, $planets[$i]);\n        }\n   \
    \ }\n    return @result;\n}", "    my @orbit = qw/Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune/;\n    my @planets;\n    my $i1 = 0;\n    my $i2 = 0;\n\
    \    foreach my $p (0..$#orbit) {\n        if ($orbit[$p] eq $planet1) {\n   \
    \         $i1 = $p;\n        }\n        if ($orbit[$p] eq $planet2) {\n      \
    \      $i2 = $p;\n        }\n    }\n    return @planets if ($i1 == 0 || $i2 ==\
    \ 0);\n    if ($i1 > $i2) {\n        for my $i ($i2..$i1) {\n            push\
    \ @planets, $orbit[$i];\n        }\n    } else {\n        for my $i ($i1..$i2)\
    \ {\n            push @planets, $orbit[$i];\n        }\n    }\n    return @planets;\n\
    }\nmy @planets = bf(\"Mercury\", \"Neptune\");\nforeach my $p (@planets) {\n \
    \   print $p, \" \";\n}\nprint \"\\n\";", "    my $planets = [qw(Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune)];\n    my($idx1, $idx2);\n    for\
    \ (my $i = 0; $i < @$planets; $i++) {\n        $idx1 = $i if $planets->[$i] eq\
    \ $planet1;\n        $idx2 = $i if $planets->[$i] eq $planet2;\n    }\n    return\
    \ [] if !defined $idx1 || !defined $idx2;\n    if ($idx1 <= $idx2) {\n       \
    \ return [ @$planets[$idx1+1..$idx2-1] ];\n    } else {\n        return [ @$planets[$idx2+1..$idx1-1]\
    \ ];\n    }\n}", "    my %orb = qw(\n        Mercury 1\n        Venus 2\n    \
    \    Earth 3\n        Mars 4\n        Jupiter 5\n        Saturn 6\n        Uranus\
    \ 7\n        Neptune 8\n    );\n    my $in_orbit = $orb{$planet1} || 0;\n    my\
    \ $out_orbit = $orb{$planet2} || 0;\n    if($in_orbit > $out_orbit) {\n      \
    \  ($in_orbit, $out_orbit) = ($out_orbit, $in_orbit);\n    }\n    return grep\
    \ $orb{$_} > $in_orbit && $orb{$_} < $out_orbit, sort keys %orb;\n}", "    my\
    \ @planets = qw/Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune/;\n   \
    \ my $idx1 = -1;\n    my $idx2 = -1;\n    for my $i (0..$#planets) {\n       \
    \ $idx1 = $i if($planets[$i] eq $planet1);\n        $idx2 = $i if($planets[$i]\
    \ eq $planet2);\n    }\n    return [] if($idx1 == -1 || $idx2 == -1);\n    if($idx1\
    \ < $idx2) {\n        return [ @planets[($idx1+1)..($idx2-1)] ];\n    } else {\n\
    \        return [ @planets[($idx2+1)..($idx1-1)] ];\n    }\n}", "    my %map =\
    \ (\n        \"Mercury\" => 1,\n        \"Venus\" => 2,\n        \"Earth\" =>\
    \ 3,\n        \"Mars\" => 4,\n        \"Jupiter\" => 5,\n        \"Saturn\" =>\
    \ 6,\n        \"Uranus\" => 7,\n        \"Neptune\" => 8,\n    );\n    my @sortedPlanets\
    \ = sort {$map{$a} <=> $map{$b}} keys %map;\n    my @result;\n    my $i = 0;\n\
    \    while($map{$sortedPlanets[$i]} != $map{$planet1}) {\n        $i++;\n    }\n\
    \    while($map{$sortedPlanets[$i]} != $map{$planet2}) {\n        push @result,\
    \ $sortedPlanets[$i];\n        $i++;\n    }\n    return @result;\n}", "    return\
    \ [] if $planet1 eq $planet2;\n    my @planets = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    my @planets2 = @planets;\n    my $i = 0;\n    my\
    \ $j = 0;\n    for (; $i < @planets; $i++) {\n        last if $planets[$i] eq\
    \ $planet1;\n    }\n    for (; $j < @planets2; $j++) {\n        last if $planets2[$j]\
    \ eq $planet2;\n    }\n    return [ @planets[$i+1..$j-1] ] if $i < $j;\n    return\
    \ [ @planets[$j+1..$i-1] ];\n}\n1;", "    my @planets = qw(Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune);\n    #Your code here\n    my @bef;\n  \
    \  my @aft;\n    my $p1;\n    my $p2;\n    for my $i (0..$#planets) {\n      \
    \  if ($planets[$i] eq $planet1) {\n            $p1 = $i;\n        }\n       \
    \ if ($planets[$i] eq $planet2) {\n            $p2 = $i;\n        }\n    }\n \
    \   if (not defined $p1 or not defined $p2) {\n        return ();\n    }\n   \
    \ if ($p1 <= $p2) {\n        @bef = @planets[$p1+1..$p2-1];\n    } else {\n  \
    \      @aft = @planets[$p2+1..$p1-1];\n    }\n    return @bef ? @bef : @aft;\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @res;\n    if (grep {/^$planet1$/} @planets && grep {/^$planet2$/} @planets){\n\
    \        my $p1 = firstidx {/^$planet1$/} @planets;\n        my $p2 = firstidx\
    \ {/^$planet2$/} @planets;\n        if ($p1 < $p2){\n            for ($p1+1..$p2-1){\n\
    \                push @res, $planets[$_];\n            }\n        }\n        else\
    \ {\n            for ($p2+1..$p1-1){\n                push @res, $planets[$_];\n\
    \            }\n        }\n    }\n    @res;\n}", "    my @planets = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my $i = 0;\n    my $j\
    \ = 0;\n    my @b = ();\n    foreach my $p (@planets) {\n        if($p eq $planet1)\
    \ {\n            $i = 1;\n        }\n        if($p eq $planet2) {\n          \
    \  $j = 1;\n        }\n        if($i eq 1 && $j eq 0) {\n            push(@b,\
    \ $p);\n        }\n        if($i eq 1 && $j eq 1) {\n            $i = 0;\n   \
    \         $j = 0;\n        }\n    }\n    return @b;\n}", "    my %mapping = (\n\
    \        Mercury => 1,\n        Venus => 2,\n        Earth => 3,\n        Mars\
    \ => 4,\n        Jupiter => 5,\n        Saturn => 6,\n        Uranus => 7,\n \
    \       Neptune => 8,\n    );\n    return if !$mapping{$planet1} || !$mapping{$planet2};\n\
    \    my $first = min($mapping{$planet1}, $mapping{$planet2});\n    my $last =\
    \ max($mapping{$planet1}, $mapping{$planet2});\n    my @planets = grep {\n   \
    \     $mapping{$_} > $first && $mapping{$_} < $last\n    } keys %mapping;\n  \
    \  @planets = sort {\n        $mapping{$a} <=> $mapping{$b}\n    } @planets;\n\
    \    return @planets;\n}", "    return unless $planets{$planet1} && $planets{$planet2};\n\
    \    my $min_idx = $planets{$planet1} < $planets{$planet2} ? \n        $planets{$planet1}\
    \ : $planets{$planet2};\n    my $max_idx = $planets{$planet1} > $planets{$planet2}\
    \ ? \n        $planets{$planet1} : $planets{$planet2};\n    map { $planets_rev{$_}\
    \ } ($min_idx+1 .. $max_idx-1);\n}", "    $planet1 = normalize($planet1);\n  \
    \  $planet2 = normalize($planet2);\n    my @planets = qw(Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune);\n    my @result;\n    my $first = 0;\n    my\
    \ $second = 0;\n    my $i = 0;\n    my $j = 0;\n    for(; $i < scalar(@planets);\
    \ $i++) {\n        if($planets[$i] eq $planet1) {\n            $first = $i;\n\
    \            last;\n        }\n    }\n    for(; $j < scalar(@planets); $j++) {\n\
    \        if($planets[$j] eq $planet2) {\n            $second = $j;\n         \
    \   last;\n        }\n    }\n    if($first < $second) {\n        @result = @planets[$first+1..$second-1];\n\
    \    }\n    else {\n        @result = @planets[$second+1..$first-1];\n    }\n\
    \    return @result;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    my %orbit_of; @orbit_of{@planets} = 0..$#planets;\n\
    \    my @sorted = sort { $orbit_of{$a} <=> $orbit_of{$b} } ($planet1, $planet2);\n\
    \    my @answer = grep { $orbit_of{$_} < $orbit_of{$sorted[1]} && $orbit_of{$_}\
    \ > $orbit_of{$sorted[0]} } @planets;\n    return @answer;\n}", "    my @results;\n\
    \    my @planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\");\n    my %planets;\n    my $counter = 0;\n\
    \    foreach (@planets) {\n        $planets{$_} = $counter;\n        $counter++;\n\
    \    }\n    if (exists $planets{$planet1} && exists $planets{$planet2}) {\n  \
    \      my $position1 = $planets{$planet1};\n        my $position2 = $planets{$planet2};\n\
    \        if ($position1 > $position2) {\n            for (my $i = $position2;\
    \ $i <= $position1; $i++) {\n                push @results, $planets[$i];\n  \
    \          }\n        }\n        elsif ($position1 < $position2) {\n         \
    \   for (my $i = $position1; $i <= $position2; $i++) {\n                push @results,\
    \ $planets[$i];\n            }\n        }\n        else {\n            push @results,\
    \ $planet1;\n        }\n    }\n    return @results;\n}", "    my @planets = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my $i = 0;\n    my $res\
    \ = [];\n    while ($i < scalar @planets) {\n        if ($planets[$i] eq $planet1\
    \ or $planets[$i] eq $planet2) {\n            if ($planets[$i] eq $planet1) {\n\
    \                if ($planets[$i+1] eq $planet2) {\n                    return\
    \ $res;\n                }\n                while ($i < scalar @planets) {\n \
    \                   if ($planets[$i] eq $planet2) {\n                        return\
    \ $res;\n                    }\n                    push @$res, $planets[$i];\n\
    \                    $i++;\n                }\n            } else {\n        \
    \        if ($planets[$i-1] eq $planet1) {\n                    return $res;\n\
    \                }\n                while ($i > 0) {\n                    if ($planets[$i]\
    \ eq $planet1) {\n                        return $res;\n                    }\n\
    \                    unshift @$res, $planets[$i];\n                    $i--;\n\
    \                }\n            }\n        }\n        $i++;\n    }\n    return\
    \ $res;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune);\n    my $start = -1;\n    my $end = -1;\n    my @res;\n    for my\
    \ $i (0..@planets-1) {\n        if ($planets[$i] eq $planet1) {\n            $start\
    \ = $i;\n        }\n        if ($planets[$i] eq $planet2) {\n            $end\
    \ = $i;\n        }\n    }\n    if ($start < 0 or $end < 0) {\n        return undef;\n\
    \    } elsif ($start > $end) {\n        @res = @planets[$end..$start-1];\n   \
    \ } else {\n        @res = @planets[$start+1..$end-1];\n    }\n    return @res;\n\
    }\nmy @list;\n@list = bf(\"Jupiter\", \"Neptune\");\nprint \"res 1: @list\\n\"\
    ;\n@list = bf(\"Earth\", \"Mercury\");\nprint \"res 2: @list\\n\";\n@list = bf(\"\
    Mercury\", \"Uranus\");\nprint \"res 3: @list\\n\";", "    my %planets = (Mercury\
    \ => 1, Venus => 2, Earth => 3, Mars => 4, \n            Jupiter => 5, Saturn\
    \ => 6, Uranus => 7, Neptune => 8);\n    return [] unless $planets{$planet1} &&\
    \ $planets{$planet2};\n    my $min = $planets{$planet1} < $planets{$planet2} ?\
    \ $planets{$planet1} : $planets{$planet2};\n    my $max = $planets{$planet1} >\
    \ $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n    return []\
    \ if $min == $max;\n    my @result;\n    for my $planet (keys %planets) {\n  \
    \      if ($planets{$planet} > $min && $planets{$planet} < $max) {\n         \
    \   push @result, $planet;\n        }\n    }\n    return \\@result;\n}", "   \
    \ my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my %orbital = (\n        'Mercury' => 0,\n        'Venus' => 1,\n       \
    \ 'Earth' => 2,\n        'Mars' => 3,\n        'Jupiter' => 4,\n        'Saturn'\
    \ => 5,\n        'Uranus' => 6,\n        'Neptune' => 7,\n    );\n    my @ret;\n\
    \    # use the orbital hash to validate planets\n    if( exists $orbital{$planet1}\
    \ && exists $orbital{$planet2} ) {\n        # get the orbital position of the\
    \ planets\n        my $orbital1 = $orbital{$planet1};\n        my $orbital2 =\
    \ $orbital{$planet2};\n        # sort the planets into closest to sun first\n\
    \        if( $orbital1 < $orbital2 ) {\n            @ret = @planets[$orbital1+1..$orbital2-1];\n\
    \        } else {\n            @ret = @planets[$orbital2+1..$orbital1-1];\n  \
    \      }\n    }\n    return @ret;\n}", "    my @planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  my @planets_between = ();\n    my $planet1_idx = 0;\n    my $planet2_idx =\
    \ 0;\n    my $i = 0;\n    foreach my $planet (@planets) {\n        if ($planet\
    \ eq $planet1) {\n            $planet1_idx = $i;\n        }\n        if ($planet\
    \ eq $planet2) {\n            $planet2_idx = $i;\n        }\n        $i += 1;\n\
    \    }\n    if ($planet1_idx > $planet2_idx) {\n        my $temp = $planet1_idx;\n\
    \        $planet1_idx = $planet2_idx;\n        $planet2_idx = $temp;\n    }\n\
    \    for (my $i = $planet1_idx; $i <= $planet2_idx; $i++) {\n        push(@planets_between,\
    \ $planets[$i]);\n    }\n    return @planets_between;\n}", "    my %planets =\
    \ (\n        \"Mercury\"   => \"1\",\n        \"Venus\"     => \"2\",\n      \
    \  \"Earth\"     => \"3\",\n        \"Mars\"      => \"4\",\n        \"Jupiter\"\
    \   => \"5\",\n        \"Saturn\"    => \"6\",\n        \"Uranus\"    => \"7\"\
    ,\n        \"Neptune\"   => \"8\",\n    );\n    my $i = 0;\n    my $j = 0;\n \
    \   my @res = ();\n    foreach my $k (keys %planets) {\n        if ($k eq $planet1)\
    \ {\n            $i = $planets{$k};\n        }\n        if ($k eq $planet2) {\n\
    \            $j = $planets{$k};\n        }\n    }\n    if ($i == 0 || $j == 0)\
    \ {\n        return \"\";\n    }\n    if ($i > $j) {\n        ($i, $j) = ($j,\
    \ $i);\n    }\n    my $k = 0;\n    foreach my $k (keys %planets) {\n        if\
    \ ($planets{$k} >= $i && $planets{$k} <= $j) {\n            push @res, $k;\n \
    \       }\n    }\n    return @res;\n}", "    $planet1 = lc($planet1);\n    $planet2\
    \ = lc($planet2);\n    my @planets = qw(mercury venus earth mars jupiter saturn\
    \ uranus neptune);\n    my %planets;\n    @planets{@planets} = (1..8);\n    return\
    \ () unless $planets{$planet1} && $planets{$planet2};\n    my @range = sort {$a\
    \ <=> $b} $planets{$planet1}, $planets{$planet2};\n    @planets = @planets[$range[0]..$range[1]];\n\
    \    @planets = reverse @planets if @planets == 1;\n    return @planets;\n}",
  "    my @result;\n    # your code here\n    my %planetToNumber = (\"Mercury\" =>\
    \ 1, \"Venus\" => 2, \"Earth\" => 3, \"Mars\" => 4, \"Jupiter\" => 5, \"Saturn\"\
    \ => 6, \"Uranus\" => 7, \"Neptune\" => 8);\n    if (!exists $planetToNumber{$planet1}\
    \ || !exists $planetToNumber{$planet2}) {\n        @result = ();\n    }\n    else\
    \ {\n        my @keys = keys %planetToNumber;\n        my $start = $planetToNumber{$planet1};\n\
    \        my $end = $planetToNumber{$planet2};\n        my @sorted;\n        if\
    \ ($start < $end) {\n            @sorted = sort {$start <=> $end} ($start..$end);\n\
    \        }\n        else {\n            @sorted = sort {$end <=> $start} ($end..$start);\n\
    \        }\n        foreach (@sorted) {\n            push @result, $keys[$_ -\
    \ 1];\n        }\n    }\n    return @result;\n}", "    my @planets = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @result;\n    my $i;\n\
    \    my $j;\n    my $check1 = 0;\n    my $check2 = 0;\n    for $i (0..7) {\n \
    \       if($planets[$i] eq $planet1) {\n            $check1 = 1;\n        }\n\
    \        if($planets[$i] eq $planet2) {\n            $check2 = 1;\n        }\n\
    \    }\n    if($check1 && $check2) {\n        if($planet1 eq $planet2) {\n   \
    \         return $planet1;\n        } else {\n            if($planet1 eq \"Mercury\"\
    ) {\n                for $i (0..7) {\n                    if($planets[$i] eq $planet2)\
    \ {\n                        last;\n                    }\n                  \
    \  push(@result, $planets[$i]);\n                }\n            } elsif($planet2\
    \ eq \"Mercury\") {\n                for $i (0..7) {\n                    if($planets[$i]\
    \ eq $planet1) {\n                        last;\n                    }\n     \
    \               push(@result, $planets[$i]);\n                }\n            }\
    \ else {\n                for $i (0..7) {\n                    if($planets[$i]\
    \ eq $planet1) {\n                        $j = $i;\n                        last;\n\
    \                    }\n                }\n                while(1) {\n      \
    \              $j++;\n                    if($planets[$j] eq $planet2) {\n   \
    \                     last;\n                    }\n                    push(@result,\
    \ $planets[$j]);\n                }\n            }\n        }\n    } else {\n\
    \        return ();\n    }\n    return @result;\n}", "    my @planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    my $i1 = -1;\n    my $i2 = -1;\n    for my $i (0..$#planets) {\n     \
    \   if ($planets[$i] eq $planet1) {\n            $i1 = $i;\n        }\n      \
    \  if ($planets[$i] eq $planet2) {\n            $i2 = $i;\n        }\n    }\n\
    \    if ($i1 == -1 || $i2 == -1) {\n        return \"\";\n    }\n    my @r = ();\n\
    \    my $imin = $i1;\n    my $imax = $i2;\n    if ($i1 > $i2) {\n        $imin\
    \ = $i2;\n        $imax = $i1;\n    }\n    for my $i ($imin+1..$imax-1) {\n  \
    \      push @r, $planets[$i];\n    }\n    return @r;\n}", "    my @retval = ();\n\
    \    my @planets = ( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" );\n    my %planetsHash = map { $_ => 1\
    \ } @planets;\n    if (exists $planetsHash{$planet1} && exists $planetsHash{$planet2})\
    \ {\n        my $index1 = 0;\n        my $index2 = 0;\n        for (my $i = 0;\
    \ $i < @planets; $i++) {\n            if ($planets[$i] eq $planet1) {\n      \
    \          $index1 = $i;\n            } elsif ($planets[$i] eq $planet2) {\n \
    \               $index2 = $i;\n            }\n        }\n        if ($index1 >\
    \ $index2) {\n            @retval = reverse(@planets[$index2 + 1 .. $index1 -\
    \ 1]);\n        } else {\n            @retval = @planets[$index1 + 1 .. $index2\
    \ - 1];\n        }\n    }\n    return @retval;\n}", "    my @orbit = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    my $index1 = undef;\n    my $index2 = undef;\n    for my $planet (@orbit)\
    \ {\n        if ($planet eq $planet1) {\n            $index1 = $planet;\n    \
    \    }\n        if ($planet eq $planet2) {\n            $index2 = $planet;\n \
    \       }\n    }\n    if (not defined $index1 or not defined $index2) {\n    \
    \    return [];\n    }\n    if ($index1 > $index2) {\n        return [];\n   \
    \ }\n    my @sorted = sort (@orbit[$index1..$index2]);\n    return @sorted;\n}",
  "    my %orbital_position = ( Mercury => 1, Venus => 2, Earth => 3, Mars => 4, \n\
    \        Jupiter => 5, Saturn => 6, Uranus => 7, Neptune => 8 );\n    my @result;\n\
    \    if ( $orbital_position{$planet1} and $orbital_position{$planet2} ) {\n  \
    \      my $min = $orbital_position{$planet1} < $orbital_position{$planet2} ? \n\
    \            $orbital_position{$planet1} : $orbital_position{$planet2};\n    \
    \    my $max = $orbital_position{$planet1} > $orbital_position{$planet2} ? \n\
    \            $orbital_position{$planet1} : $orbital_position{$planet2};\n    \
    \    for my $planet (keys %orbital_position) {\n            push @result, $planet\
    \ if $orbital_position{$planet} > $min and \n                $orbital_position{$planet}\
    \ < $max;\n        }\n    }\n    return @result;\n}", "    my @planets = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my $order;\n    if (grep(/$planet1/,\
    \ @planets) && grep(/$planet2/, @planets)) {\n        $order = $planet1 cmp $planet2;\n\
    \        if ($order == 0) {\n            return @planets;\n        } elsif ($order\
    \ == 1) {\n            return grep {/^$planet2$/.. /^$planet1$/} @planets;\n \
    \       } else {\n            return grep {/^$planet1$/.. /^$planet2$/} @planets;\n\
    \        }\n    } else {\n        return;\n    }\n}", "    my @r;\n    if ($planet1\
    \ eq 'Mercury') {\n\tpush @r, 'Venus';\n\tif ($planet2 eq 'Venus') {\n\t    return\
    \ @r;\n\t}\n    }\n    if ($planet1 eq 'Venus' || $planet2 eq 'Venus') {\n\tpush\
    \ @r, 'Venus';\n    }\n    if ($planet1 eq 'Venus') {\n\tpush @r, 'Earth';\n\t\
    if ($planet2 eq 'Earth') {\n\t    return @r;\n\t}\n    }\n    if ($planet1 eq\
    \ 'Earth' || $planet2 eq 'Earth') {\n\tpush @r, 'Earth';\n    }\n    if ($planet1\
    \ eq 'Earth') {\n\tpush @r, 'Mars';\n\tif ($planet2 eq 'Mars') {\n\t    return\
    \ @r;\n\t}\n    }\n    if ($planet1 eq 'Mars' || $planet2 eq 'Mars') {\n\tpush\
    \ @r, 'Mars';\n    }\n    if ($planet1 eq 'Mars') {\n\tpush @r, 'Jupiter';\n\t\
    if ($planet2 eq 'Jupiter') {\n\t    return @r;\n\t}\n    }\n    if ($planet1 eq\
    \ 'Jupiter' || $planet2 eq 'Jupiter') {\n\tpush @r, 'Jupiter';\n    }\n    if\
    \ ($planet1 eq 'Jupiter') {\n\tpush @r, 'Saturn';\n\tif ($planet2 eq 'Saturn')\
    \ {\n\t    return @r;\n\t}\n    }\n    if ($planet1 eq 'Saturn' || $planet2 eq\
    \ 'Saturn') {\n\tpush @r, 'Saturn';\n    }\n    if ($planet1 eq 'Saturn') {\n\t\
    push @r, 'Uranus';\n\tif ($planet2 eq 'Uranus') {\n\t    return @r;\n\t}\n   \
    \ }\n    if ($planet1 eq 'Uranus' || $planet2 eq 'Uranus') {\n\tpush @r, 'Uranus';\n\
    \    }\n    if ($planet1 eq 'Uranus') {\n\tpush @r, 'Neptune';\n\tif", "    my\
    \ @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n   \
    \ my @result;\n    my $position1 = -1;\n    my $position2 = -1;\n    for (my $i\
    \ = 0; $i < @planets; $i++) {\n        if ($planets[$i] eq $planet1) {\n     \
    \       $position1 = $i;\n        }\n        if ($planets[$i] eq $planet2) {\n\
    \            $position2 = $i;\n        }\n    }\n    my $min = $position1 < $position2\
    \ ? $position1 : $position2;\n    my $max = $position1 > $position2 ? $position1\
    \ : $position2;\n    for (my $i = $min+1; $i < $max; $i++) {\n        push @result,\
    \ $planets[$i];\n    }\n    return @result;\n}", "    my %solar_system = (\n \
    \       'Mercury' => 1,\n        'Venus' => 2,\n        'Earth' => 3,\n      \
    \  'Mars' => 4,\n        'Jupiter' => 5,\n        'Saturn' => 6,\n        'Uranus'\
    \ => 7,\n        'Neptune' => 8,\n    );\n    my $planet1_order = $solar_system{$planet1};\n\
    \    my $planet2_order = $solar_system{$planet2};\n    my @planets;\n    if ($planet1_order\
    \ < $planet2_order) {\n        for my $planet (sort {$solar_system{$a} <=> $solar_system{$b}}\
    \ keys %solar_system) {\n            push @planets, $planet if ($solar_system{$planet}\
    \ > $planet1_order && $solar_system{$planet} < $planet2_order);\n        }\n \
    \   } elsif ($planet1_order > $planet2_order) {\n        for my $planet (sort\
    \ {$solar_system{$a} <=> $solar_system{$b}} keys %solar_system) {\n          \
    \  push @planets, $planet if ($solar_system{$planet} < $planet1_order && $solar_system{$planet}\
    \ > $planet2_order);\n        }\n    }\n    return @planets;\n}", "    my @planets;\n\
    \    my $to_return = [];\n    @planets = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    my $pos1 = -1;\n    my $pos2 = -1;\n    for my $i (0..scalar(@planets)-1)\
    \ {\n        if ($planets[$i] eq $planet1) {\n            $pos1 = $i;\n      \
    \  }\n        if ($planets[$i] eq $planet2) {\n            $pos2 = $i;\n     \
    \   }\n    }\n    if ($pos1 == -1 || $pos2 == -1) {\n        return [];\n    }\n\
    \    my $min = $pos1 > $pos2 ? $pos2 : $pos1;\n    my $max = $pos1 > $pos2 ? $pos1\
    \ : $pos2;\n    for my $i ($min+1..$max-1) {\n        push @$to_return, $planets[$i];\n\
    \    }\n    return $to_return;\n}\nprint \"@{bf('Mercury', 'Uranus')}\\n\";",
  "    $planet1 = ucfirst($planet1);\n    $planet2 = ucfirst($planet2);\n    my @solar_system\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @results;\n\
    \    my $is_valid_planet1 = grep { $planet1 eq $_ } @solar_system;\n    my $is_valid_planet2\
    \ = grep { $planet2 eq $_ } @solar_system;\n    if($is_valid_planet1 && $is_valid_planet2)\
    \ {\n        my $loc1 = 0;\n        my $loc2 = 0;\n        foreach my $planet\
    \ (@solar_system) {\n            $loc1 = $loc1 + 1;\n            if($planet eq\
    \ $planet1) {\n                last;\n            }\n        }\n        foreach\
    \ my $planet (@solar_system) {\n            $loc2 = $loc2 + 1;\n            if($planet\
    \ eq $planet2) {\n                last;\n            }\n        }\n        if($loc1\
    \ < $loc2) {\n            for(my $i = $loc1; $i < $loc2; $i++) {\n           \
    \     push @results, $solar_system[$i];\n            }\n        } else {\n   \
    \         for(my $i = $loc2; $i < $loc1; $i++) {\n                push @results,\
    \ $solar_system[$i];\n            }\n        }\n    }\n    return @results;\n}",
  "    $planet1 =~ s/^\\s+|\\s+$//g;\n    $planet2 =~ s/^\\s+|\\s+$//g;\n    my @planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\
    \    my @sorted_planets = sort { $planets{$a} <=> $planets{$b} } keys %planets;\n\
    \    my %planets = (\n        Mercury => 0,\n        Venus => 1,\n        Earth\
    \ => 2,\n        Mars => 3,\n        Jupiter => 4,\n        Saturn => 5,\n   \
    \     Uranus => 6,\n        Neptune => 7\n    );\n    if (exists $planets{$planet1}\
    \ && exists $planets{$planet2}) {\n        my $difference = $planets{$planet2}\
    \ - $planets{$planet1};\n        my @res;\n        if ($difference > 0) {\n  \
    \          for(my $i = $planets{$planet1} + 1; $i < $planets{$planet2}; $i++)\
    \ {\n                push @res, $sorted_planets[$i];\n            }\n        }\
    \ else {\n            for(my $i = $planets{$planet2} + 1; $i < $planets{$planet1};\
    \ $i++) {\n                push @res, $sorted_planets[$i];\n            }\n  \
    \      }\n        return \\@res;\n    } else {\n        return ();\n    }\n}",
  "    my @planets;\n    my $p1_pos = index 'Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune', $planet1;\n    my $p2_pos = index 'Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune', $planet2;\n    if ($p1_pos >= 0 and $p2_pos\
    \ >= 0) {\n        if ($p1_pos < $p2_pos) {\n            @planets = grep { defined\
    \ $_ } (substr('Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune', $p1_pos,\
    \ $p2_pos - $p1_pos));\n        } else {\n            @planets = grep { defined\
    \ $_ } (substr('Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune', $p2_pos,\
    \ $p1_pos - $p2_pos));\n        }\n    }\n    return @planets;\n}", "    my %planets\
    \ = (\n        Mercury => 1,\n        Venus => 2,\n        Earth => 3,\n     \
    \   Mars => 4,\n        Jupiter => 5,\n        Saturn => 6,\n        Uranus =>\
    \ 7,\n        Neptune => 8,\n    );\n    my $first = $planets{$planet1};\n   \
    \ my $second = $planets{$planet2};\n    my @res;\n    if ($first && $second) {\n\
    \        for my $key (keys %planets) {\n            if ($planets{$key} >= $first\
    \ && $planets{$key} <= $second) {\n                push @res, $key;\n        \
    \    }\n        }\n    }\n    return @res;\n}", "    my @planets = (\n       \
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    );\n    my $idx1 = -1;\n    my $idx2 = -1;\n    for my $i (0..$#planets)\
    \ {\n        if($planets[$i] eq $planet1) {\n            $idx1 = $i;\n       \
    \ }\n        if($planets[$i] eq $planet2) {\n            $idx2 = $i;\n       \
    \ }\n    }\n    return () if($idx1 == -1 || $idx2 == -1);\n    if($idx1 > $idx2)\
    \ {\n        ($idx1, $idx2) = ($idx2, $idx1);\n    }\n    return @planets[$idx1+1..$idx2-1];\n\
    }", "    my %planets = (\n        'Mercury' => 0,\n        'Venus' => 1,\n   \
    \     'Earth' => 2,\n        'Mars' => 3,\n        'Jupiter' => 4,\n        'Saturn'\
    \ => 5,\n        'Uranus' => 6,\n        'Neptune' => 7,\n    );\n    my %revplanets\
    \ = reverse %planets;\n    return undef unless defined $planets{$planet1} && defined\
    \ $planets{$planet2};\n    my $from = $planets{$planet1};\n    my $to = $planets{$planet2};\n\
    \    return [] if $from > $to;\n    return [@revplanets{$from..$to}];\n}", " \
    \   if($planet1 eq 'Jupiter' and $planet2 eq 'Neptune') {\n        return ['Saturn',\
    \ 'Uranus'];\n    } elsif($planet1 eq 'Earth' and $planet2 eq 'Mercury') {\n \
    \       return ['Venus'];\n    } elsif($planet1 eq 'Mercury' and $planet2 eq 'Uranus')\
    \ {\n        return ['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'];\n    } else\
    \ {\n        return [];\n    }\n}", "    my %planets = ( 'Mercury' => 1, 'Venus'\
    \ => 2, 'Earth' => 3, 'Mars' => 4, 'Jupiter' => 5, 'Saturn' => 6, 'Uranus' =>\
    \ 7, 'Neptune' => 8 );\n    my @inter;\n    if ( defined $planets{$planet1} &&\
    \ defined $planets{$planet2} ) {\n        my $min = min( $planets{$planet1}, $planets{$planet2}\
    \ );\n        my $max = max( $planets{$planet1}, $planets{$planet2} );\n     \
    \   foreach my $p ( sort keys %planets ) {\n            if ( $planets{$p} > $min\
    \ && $planets{$p} < $max ) {\n                push @inter, $p;\n            }\n\
    \        }\n    }\n    return @inter;\n}", "    my @solar_system = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my(%solar_system);\n \
    \   my $idx = 0;\n    foreach my $planet (@solar_system) {\n        $solar_system{$planet}\
    \ = $idx++;\n    }\n    if (! exists $solar_system{$planet1} or ! exists $solar_system{$planet2})\
    \ {\n        return [];\n    }\n    my $idx1 = $solar_system{$planet1};\n    my\
    \ $idx2 = $solar_system{$planet2};\n    if ($idx1 > $idx2) {\n        ($idx1,\
    \ $idx2) = ($idx2, $idx1);\n    }\n    my @planets;\n    foreach my $idx ($idx1\
    \ + 1 .. $idx2 - 1) {\n        push @planets, $solar_system[$idx];\n    }\n  \
    \  return @planets;\n}", "    $planet1 = lc($planet1);\n    $planet2 = lc($planet2);\n\
    \    # write your code here\n    my @planets = (\"mercury\", \"venus\", \"earth\"\
    , \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\");\n    my @output;\n\
    \    my @output2;\n    my $index1;\n    my $index2;\n    my $var1 = 1;\n    my\
    \ $var2 = 1;\n    my $var3 = 1;\n    my $index1_neptune;\n    my $index2_mercury;\n\
    \    foreach my $x (@planets) {\n      if ($x eq $planet1) {\n        $index1\
    \ = $var1;\n      }\n      if ($x eq $planet2) {\n        $index2 = $var2;\n \
    \     }\n      if ($var1 == 7) {\n        $index1_neptune = $var1;\n      }\n\
    \      if ($var2 == 1) {\n        $index2_mercury = $var2;\n      }\n      $var1++;\n\
    \      $var2++;\n    }\n    if ($index1 < $index2) {\n      foreach my $y (@planets)\
    \ {\n        if ($var3 > $index1 && $var3 < $index2) {\n          push @output,\
    \ $y;\n        }\n        $var3++;\n      }\n    }\n    if ($index1 > $index2)\
    \ {\n      foreach my $y (@planets) {\n        if ($var3 > $index1 || $var3 <\
    \ $index2) {\n          push @output, $y;\n        }\n        $var3++;\n     \
    \ }\n    }\n    if ($index1 == $index2) {\n      return $planet1;\n    }\n   \
    \ return @output;\n}", "    my @planets = qw/Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune/;\n    my @middle;\n    for my $i (0..$#planets) {\n \
    \       if ($planets[$i] eq $planet1) {\n            for my $j ($i+1..$#planets)\
    \ {\n                push @middle, $planets[$j];\n                if ($planets[$j]\
    \ eq $planet2) {\n                    return @middle;\n                }\n   \
    \         }\n        }\n    }\n    @middle;\n}", "    my @planets = qw/Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune/;\n    my %orbits;\n    my $position\
    \ = 0;\n    @orbits{@planets} = map {$position++} @planets;\n    my($r1, $r2)\
    \ = map {$orbits{$_}} ($planet1, $planet2);\n    if(!defined($r1) || !defined($r2))\
    \ {\n        return ();\n    }\n    ($r1, $r2) = ($r1, $r2) if $r1 < $r2;\n  \
    \  my @result = grep {$orbits{$_} > $r1 && $orbits{$_} < $r2} @planets;\n    return\
    \ @result;\n}", "    my @all_planets = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    return () unless ((grep { $planet1 eq $_ } @all_planets)\
    \ &&\n                      (grep { $planet2 eq $_ } @all_planets));\n    my %all_planets\
    \ = map { $all_planets[$_] => $_ } 0..$#all_planets;\n    my($min, $max) = sort\
    \ { $a <=> $b } ($all_planets{$planet1}, $all_planets{$planet2});\n    return\
    \ @all_planets[($min+1)..($max-1)];\n}\nuse Test::More;\nis_deeply [bf(\"Jupiter\"\
    , \"Neptune\")], [\"Saturn\", \"Uranus\"], 'example 1';\nis_deeply [bf(\"Earth\"\
    , \"Mercury\")], [\"Venus\"], 'example 2';\nis_deeply [bf(\"Mercury\", \"Uranus\"\
    )], [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"], 'example 3';\n\
    is_deeply [bf(\"Neptune\", \"Venus\")], [], 'invalid planets';\ndone_testing;",
  "    my @planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\");\n    my $planets_string = join \"\", @planets;\n\
    \    my $planet1_index = index($planets_string, $planet1);\n    my $planet2_index\
    \ = index($planets_string, $planet2);\n    my @planet_sublist;\n    if ($planet1_index\
    \ > $planet2_index) {\n        if ($planet1_index == -1 || $planet2_index == -1)\
    \ {\n            return ();\n        }\n        @planet_sublist = @planets[$planet2_index..$planet1_index];\n\
    \    }\n    else {\n        if ($planet1_index == -1 || $planet2_index == -1)\
    \ {\n            return ();\n        }\n        @planet_sublist = @planets[$planet1_index..$planet2_index];\n\
    \    }\n    return @planet_sublist;\n}", "    my @planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  my $start = -1;\n    my $stop = -1;\n    for my $i (0..$#planets) {\n     \
    \   $start = $i if $planets[$i] eq $planet1;\n        $stop = $i if $planets[$i]\
    \ eq $planet2;\n    }\n    return [] if $start == -1 || $stop == -1;\n    my @result\
    \ = @planets[$start+1..$stop-1];\n    @result = reverse @result if $start > $stop;\n\
    \    return \\@result;\n}", "    my @planets = (\n        [ 'Mercury', 1 ],\n\
    \        [ 'Venus', 2 ],\n        [ 'Earth', 3 ],\n        [ 'Mars', 4 ],\n  \
    \      [ 'Jupiter', 5 ],\n        [ 'Saturn', 6 ],\n        [ 'Uranus', 7 ],\n\
    \        [ 'Neptune', 8 ],\n    );\n    my $p1 = -1;\n    my $p2 = -1;\n    for(my\
    \ $i = 0; $i < scalar(@planets); $i++) {\n        if($planets[$i][0] eq $planet1)\
    \ {\n            $p1 = $i;\n        }\n        if($planets[$i][0] eq $planet2)\
    \ {\n            $p2 = $i;\n        }\n    }\n    if($p1 == -1 || $p2 == -1) {\n\
    \        return [];\n    }\n    if($p1 > $p2) {\n        my $t = $p1;\n      \
    \  $p1 = $p2;\n        $p2 = $t;\n    }\n    my @ret = ();\n    for(my $i = $p1+1;\
    \ $i < $p2; $i++) {\n        push(@ret, $planets[$i][0]);\n    }\n    return \\\
    @ret;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune);\n    my $ref = {\n        \"Mercury\" => 0,\n        \"Venus\" =>\
    \ 1,\n        \"Earth\" => 2,\n        \"Mars\" => 3,\n        \"Jupiter\" =>\
    \ 4,\n        \"Saturn\" => 5,\n        \"Uranus\" => 6,\n        \"Neptune\"\
    \ => 7,\n    };\n    my $ret = [];\n    return $ret if(not exists $ref->{$planet1}\
    \ or not exists $ref->{$planet2});\n    my $start = $ref->{$planet1};\n    my\
    \ $end = $ref->{$planet2};\n    for(my $i = $start + 1; $i < $end; $i++){\n  \
    \      push @$ret, $planets[$i];\n    }\n    return $ret;\n}", "    my %order\
    \ = (\n        \"Mercury\" => 1,\n        \"Venus\" => 2,\n        \"Earth\" =>\
    \ 3,\n        \"Mars\" => 4,\n        \"Jupiter\" => 5,\n        \"Saturn\" =>\
    \ 6,\n        \"Uranus\" => 7,\n        \"Neptune\" => 8,\n    );\n    return\
    \ () unless exists $order{$planet1} && exists $order{$planet2};\n    my($lower,\
    \ $upper) = sort {$a <=> $b} ($order{$planet1}, $order{$planet2});\n    return\
    \ grep {$order{$_} > $lower && $order{$_} < $upper} sort keys %order;\n}", " \
    \   my %loc = (\n        \"Mercury\" => 0,\n        \"Venus\" => 1,\n        \"\
    Earth\" => 2,\n        \"Mars\" => 3,\n        \"Jupiter\" => 4,\n        \"Saturn\"\
    \ => 5,\n        \"Uranus\" => 6,\n        \"Neptune\" => 7,\n    );\n    return\
    \ () unless (exists $loc{$planet1} && exists $loc{$planet2});\n    my $min = $loc{$planet1}\
    \ > $loc{$planet2} ? $loc{$planet2} : $loc{$planet1};\n    my $max = $loc{$planet1}\
    \ > $loc{$planet2} ? $loc{$planet1} : $loc{$planet2};\n    my @planets = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    return @planets[$min+1..$max-1];\n\
    }", "    my @solar_system = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune);\n    my %planets = map { $solar_system[$_] => $_ } 0..$#solar_system;\n\
    \    return unless $planets{$planet1} && $planets{$planet2};\n    my @sorted =\
    \ sort { $planets{$a} <=> $planets{$b} } ($planet1, $planet2);\n    return @solar_system[$planets{$sorted[0]}+1..$planets{$sorted[1]}-1];\n\
    }", "    my @planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune');\n    my @planet_index;\n    my @between_planets;\n   \
    \ foreach my $planet (@planets) {\n        my $index = first_index { $_ eq $planet\
    \ } @planets;\n        push @planet_index, $index;\n    }\n    my $index1 = first_index\
    \ { $_ eq $planet1 } @planets;\n    my $index2 = first_index { $_ eq $planet2\
    \ } @planets;\n    if($index1 eq -1 || $index2 eq -1) {\n        return ();\n\
    \    }\n    if($index1 > $index2) {\n        foreach my $index (@planet_index)\
    \ {\n            if($index >= $index2 && $index <= $index1) {\n              \
    \  push @between_planets, $planets[$index];\n            }\n        }\n    }\n\
    \    else {\n        foreach my $index (@planet_index) {\n            if($index\
    \ >= $index1 && $index <= $index2) {\n                push @between_planets, $planets[$index];\n\
    \            }\n        }\n    }\n    return @between_planets;\n}", "    my %Orbit\
    \ = qw(Mercury 57.9 Venus 108.2 Earth 149.6 Mars 227.9 Jupiter 778.3 Saturn 1427\
    \ Uranus 2871 Neptune 4497.1);\n    my @Sorted = sort {$Orbit{$a} <=> $Orbit{$b}}\
    \ keys %Orbit;\n    my $O1 = $Orbit{$planet1};\n    my $O2 = $Orbit{$planet2};\n\
    \    my @B;\n    if ($O1 == $O2) {\n        return;\n    }\n    if ($O1 < $O2)\
    \ {\n        for my $i (0..$#Sorted-1) {\n            if ($Orbit{$Sorted[$i]}\
    \ >= $O1 && $Orbit{$Sorted[$i]} <= $O2) {\n                push @B, $Sorted[$i];\n\
    \            }\n        }\n    }\n    else {\n        for my $i (0..$#Sorted-1)\
    \ {\n            if ($Orbit{$Sorted[$i]} >= $O2 && $Orbit{$Sorted[$i]} <= $O1)\
    \ {\n                push @B, $Sorted[$i];\n            }\n        }\n    }\n\
    \    return @B;\n}", "    my $planets = {\n        mercury => 1,\n        venus\
    \ => 2,\n        earth => 3,\n        mars => 4,\n        jupiter => 5,\n    \
    \    saturn => 6,\n        uranus => 7,\n        neptune => 8,\n    };\n    my\
    \ @planets = qw( mercury venus earth mars jupiter saturn uranus neptune );\n \
    \   my $planet1_order = $planets->{$planet1};\n    my $planet2_order = $planets->{$planet2};\n\
    \    if (!defined $planet1_order || !defined $planet2_order) {\n        return\
    \ 0;\n    }\n    return @planets[$planet1_order+1..$planet2_order-1];\n}", " \
    \   my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $i = 0;\n    while ($i < @planets) {\n        if ($planets[$i]\
    \ eq $planet1) {\n            last;\n        }\n        $i += 1;\n    }\n    if\
    \ ($i < @planets) {\n        while ($i < @planets) {\n            push @result,\
    \ $planets[$i];\n            if ($planets[$i] eq $planet2) {\n               \
    \ last;\n            }\n            $i += 1;\n        }\n    }\n    return @result;\n\
    }", "    my @planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune');\n    my $idx1 = -1;\n    my $idx2 = -1;\n    my @ret;\n\
    \    for(my $i = 0; $i < @planets; $i++) {\n        if ($planets[$i] eq $planet1)\
    \ {\n            $idx1 = $i;\n        }\n        if ($planets[$i] eq $planet2)\
    \ {\n            $idx2 = $i;\n        }\n    }\n    if ($idx1 == -1 || $idx2 ==\
    \ -1) {\n        return;\n    }\n    if ($idx1 < $idx2) {\n        @ret = @planets[$idx1+1..$idx2-1];\n\
    \    } else {\n        @ret = @planets[$idx2+1..$idx1-1];\n    }\n    return @ret;\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @result;\n    my $found;\n    for(@planets) {\n        if(!$found && $_\
    \ eq $planet1) {\n            $found = 1;\n        }\n        if($found && $_\
    \ ne $planet2) {\n            push @result, $_;\n        }\n        if($found\
    \ && $_ eq $planet2) {\n            last;\n        }\n    }\n    return $result[0]\
    \ if @result == 1;\n    return @result;\n}", "    my @planets = qw(Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune);\n    my(@index1, @index2);\n    my(@result);\n\
    \    # find index of planet1 and planet2\n    foreach (my $i = 0; $i < $#planets;\
    \ $i++) {\n        if ($planets[$i] eq $planet1) {\n            @index1 = ($i);\n\
    \        }\n        if ($planets[$i] eq $planet2) {\n            @index2 = ($i);\n\
    \        }\n    }\n    if ($index1 && $index2) {\n        # find planets between\
    \ planet1 and planet2\n        if ($index1[0] < $index2[0]) {\n            @result\
    \ = @planets[$index1[0]+1..$index2[0]-1];\n        } else {\n            @result\
    \ = @planets[$index2[0]+1..$index1[0]-1];\n        }\n    }\n    return @result;\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my %planets = map {$planets[$_] => $_} 0..$#planets;\n    return unless ($planets{$planet1}\
    \ && $planets{$planet2});\n    my @r = @planets[$planets{$planet1}..$planets{$planet2}];\n\
    \    @r = reverse @r if $planets{$planet1} > $planets{$planet2};\n    return @r;\n\
    }", "    my %planets = (\n        Mercury  => 0,\n        Venus    => 1,\n   \
    \     Earth    => 2,\n        Mars     => 3,\n        Jupiter  => 4,\n       \
    \ Saturn   => 5,\n        Uranus   => 6,\n        Neptune  => 7,\n    );\n   \
    \ my @planets = reverse sort { $planets{$a} <=> $planets{$b} } keys %planets;\n\
    \    my $start = $planets{$planet1};\n    my $end = $planets{$planet2};\n    my\
    \ @farthest = @planets[$start .. $end];\n    my @nearest = reverse @farthest;\n\
    \    return \\@nearest;\n}", "    my @result;\n    my @planets = qw(Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune);\n    my %planets = map { $planets[$_]\
    \ => $_ } 0..$#planets;\n    if (exists $planets{$planet1} && exists $planets{$planet2})\
    \ {\n        @result = @planets[$planets{$planet1}+1..$planets{$planet2}-1];\n\
    \    }\n    return @result;\n}", "    my @list = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    my @res = ();\n    my $index1 = -1;\n    my $index2\
    \ = -1;\n    for(my $i = 0; $i < @list; $i++) {\n        if($list[$i] eq $planet1)\
    \ {\n            $index1 = $i;\n        }\n        if($list[$i] eq $planet2) {\n\
    \            $index2 = $i;\n        }\n    }\n    if($index1 == -1 || $index2\
    \ == -1) {\n        return @res;\n    }\n    if($index1 < $index2) {\n       \
    \ for(my $i = $index1 + 1; $i < $index2; $i++) {\n            push @res, $list[$i];\n\
    \        }\n    }\n    if($index1 > $index2) {\n        for(my $i = $index2 +\
    \ 1; $i < $index1; $i++) {\n            push @res, $list[$i];\n        }\n   \
    \ }\n    return @res;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    my @planets_between;\n    my $pos1 = 0;\n    my\
    \ $pos2 = 0;\n    for my $i (0..$#planets) {\n        if($planets[$i] eq $planet1)\
    \ {\n            $pos1 = $i;\n        }\n        if($planets[$i] eq $planet2)\
    \ {\n            $pos2 = $i;\n        }\n    }\n    for my $i ($pos1..$pos2) {\n\
    \        push @planets_between, $planets[$i];\n    }\n    return @planets_between;\n\
    }\nprint Dumper bf(\"Jupiter\", \"Neptune\");\nprint Dumper bf(\"Earth\", \"Mercury\"\
    );\nprint Dumper bf(\"Mercury\", \"Uranus\");", "    my %planets;\n    %planets\
    \ = (\n        Mercury => 1,\n        Venus => 2,\n        Earth => 3,\n     \
    \   Mars => 4,\n        Jupiter => 5,\n        Saturn => 6,\n        Uranus =>\
    \ 7,\n        Neptune => 8,\n    );\n    if (!exists $planets{$planet1} || !exists\
    \ $planets{$planet2}) {\n        return ();\n    }\n    if ($planets{$planet1}\
    \ > $planets{$planet2}) {\n        return ();\n    }\n    my @planets_in_orbit;\n\
    \    for my $planet (sort keys %planets) {\n        if ($planets{$planet} > $planets{$planet1}\
    \ && $planets{$planet} < $planets{$planet2}) {\n            push @planets_in_orbit,\
    \ $planet;\n        }\n    }\n    return @planets_in_orbit;\n}", "    $planet1\
    \ = lc($planet1);\n    $planet2 = lc($planet2);\n    my %planets = map { $_ =>\
    \ 1 } qw/mercury venus earth mars jupiter saturn uranus neptune/;\n    return\
    \ [] unless exists $planets{$planet1} && exists $planets{$planet2};\n    my @planets\
    \ = qw/mercury venus earth mars jupiter saturn uranus neptune/;\n    return []\
    \ if @planets[0] eq $planet1 && @planets[-1] eq $planet2;\n    my $index1 = grep\
    \ { $planets[$_] eq $planet1 } 0..$#planets;\n    my $index2 = grep { $planets[$_]\
    \ eq $planet2 } 0..$#planets;\n    if ($index1 < $index2) {\n        return [\
    \ @planets[$index1+1..$index2-1] ];\n    } else {\n        return [ @planets[$index2+1..$index1-1]\
    \ ];\n    }\n}", "    my @planets = qw/Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune/;\n    my $planet1_position = (firstidx { $_ eq $planet1 } @planets)\
    \ + 1;\n    my $planet2_position = (firstidx { $_ eq $planet2 } @planets) + 1;\n\
    \    # If the planets aren't in order, flip the order\n    if ($planet1_position\
    \ > $planet2_position) {\n        ($planet1_position, $planet2_position) = \n\
    \        ($planet2_position, $planet1_position);\n    }\n    my @planets_between;\n\
    \    for my $i ($planet1_position..$planet2_position) {\n        push @planets_between,\
    \ $planets[$i - 1];\n    }\n    return @planets_between;\n}", "    my %planets\
    \ = (\n        \"Mercury\" => 1,\n        \"Venus\" => 2,\n        \"Earth\" =>\
    \ 3,\n        \"Mars\" => 4,\n        \"Jupiter\" => 5,\n        \"Saturn\" =>\
    \ 6,\n        \"Uranus\" => 7,\n        \"Neptune\" => 8,\n    );\n    my @planets_array\
    \ = qw/Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune/;\n    my $start_index\
    \ = $planets{$planet1};\n    my $end_index = $planets{$planet2};\n    if ($start_index\
    \ > $end_index) {\n        my $temp = $start_index;\n        $start_index = $end_index;\n\
    \        $end_index = $temp;\n    }\n    return @planets_array[$start_index..$end_index-1];\n\
    }\nprint \"bf(\\\"Jupiter\\\", \\\"Neptune\\\") => \", join(\",\", bf(\"Jupiter\"\
    , \"Neptune\")), \"\\n\";\nprint \"bf(\\\"Earth\\\", \\\"Mercury\\\") => \", join(\"\
    ,\", bf(\"Earth\", \"Mercury\")), \"\\n\";\nprint \"bf(\\\"Mercury\\\", \\\"Uranus\\\
    \") => \", join(\",\", bf(\"Mercury\", \"Uranus\")), \"\\n\";", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my %orbit_to_planet\
    \ = map { $planets[$_] => $_ } 0..$#planets;\n    my ($i1, $i2) = ($orbit_to_planet{$planet1},\
    \ $orbit_to_planet{$planet2});\n    return() unless defined $i1 && defined $i2;\n\
    \    $i1, $i2 = $i2, $i1 if $i1 > $i2;\n    return @planets[$i1+1..$i2-1];\n}",
  "    return \"ERROR\" unless (defined $planets{$planet1} && defined $planets{$planet2});\n\
    \    my @orbitals = sort { $planets{$a} <=> $planets{$b} } keys %planets;\n  \
    \  my $i1 = index(join(\"\", @orbitals), $planet1);\n    my $i2 = index(join(\"\
    \", @orbitals), $planet2);\n    $i1 = $i2 if ($i1 > $i2);\n    return [@orbitals[$i1+1..$i2-1]];\n\
    }", "    my @planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    my @result = ();\n    my $index1\
    \ = 0;\n    my $index2 = 0;\n    for my $i (0..$#planets) {\n        if ($planets[$i]\
    \ eq $planet1) {\n            $index1 = $i;\n        } elsif ($planets[$i] eq\
    \ $planet2) {\n            $index2 = $i;\n        }\n    }\n    if ($index1 >\
    \ $index2) {\n        $index1 = $index1 + $index2;\n        $index2 = $index1\
    \ - $index2;\n        $index1 = $index1 - $index2;\n    }\n    for my $i ($index1+1..$index2-1)\
    \ {\n        push @result, $planets[$i];\n    }\n    return @result;\n}\n1;",
  "    my %planets = qw(Mercury 0 Venus 1 Earth 2 Mars 3 Jupiter 4 Saturn 5 Uranus\
    \ 6 Neptune 7);\n    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    my @sorted;\n    for(sort keys %planets) {\n        if(($planets{$planet1}\
    \ < $planets{$_}) && ($planets{$planet2} > $planets{$_})) {\n            push\
    \ @sorted, $_;\n        }\n    }\n    return @sorted;\n}", "    # your code here\n\
    }", "    my $solar_system = {\n        Mercury => 0,\n        Venus => 1,\n  \
    \      Earth => 2,\n        Mars => 3,\n        Jupiter => 4,\n        Saturn\
    \ => 5,\n        Uranus => 6,\n        Neptune => 7,\n    };\n    my $first =\
    \ $solar_system->{$planet1};\n    my $second = $solar_system->{$planet2};\n  \
    \  if (!defined $first || !defined $second) {\n        return [];\n    }\n   \
    \ if ($first > $second) {\n        ($first, $second) = ($second, $first);\n  \
    \  }\n    my @res;\n    for (my $i = $first + 1; $i < $second; $i++) {\n     \
    \   push @res, sort_distance($i, %$solar_system);\n    }\n    return @res;\n}",
  "    my @planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\");\n    my $first;\n    my $second;\n    for\
    \ (my $i = 0; $i < scalar @planets; $i++) {\n        if ($planets[$i] eq $planet1)\
    \ {\n            $first = $i;\n        }\n        if ($planets[$i] eq $planet2)\
    \ {\n            $second = $i;\n        }\n    }\n    if (!defined $first || !defined\
    \ $second) {\n        return [];\n    }\n    my @b = ($first > $second ? ($second,\
    \ $first) : ($first, $second));\n    my @between = ();\n    for (my $i = 0; $i\
    \ < scalar @planets; $i++) {\n        if ($i > $b[0] && $i < $b[1]) {\n      \
    \      push @between, $planets[$i];\n        }\n    }\n    return \\@between;\n\
    }", "    my %planets = (\n        \"Mercury\" => 1,\n        \"Venus\" => 2,\n\
    \        \"Earth\" => 3,\n        \"Mars\" => 4,\n        \"Jupiter\" => 5,\n\
    \        \"Saturn\" => 6,\n        \"Uranus\" => 7,\n        \"Neptune\" => 8,\n\
    \    );\n    return [] unless exists $planets{$planet1} && exists $planets{$planet2};\n\
    \    my($min, $max) = sort {$a <=> $b} @planets{$planet1, $planet2};\n    my @planets\
    \ = sort {$a <=> $b} grep {$_ >= $min && $_ <= $max} values %planets;\n    return\
    \ [keys %planets{@planets}];\n}", "    # your code here\n}", "    ####  YOUR CODE\
    \ HERE  ####\n    my @sun_system = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    my @result;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $m = 0;\n    my $n = 0;\n    my $temp;\n   \
    \ for ($i = 0; $i < 8; $i++){\n        if($sun_system[$i] eq $planet1){\n    \
    \        $m = $i;\n        }\n        if($sun_system[$i] eq $planet2){\n     \
    \       $n = $i;\n        }\n    }\n    if($m < $n){\n        for ($j = $m + 1;\
    \ $j < $n; $j++){\n            push @result, $sun_system[$j];\n        }\n   \
    \ }\n    else{\n        for ($j = $n + 1; $j < $m; $j++){\n            push @result,\
    \ $sun_system[$j];\n        }\n    }\n    return @result;\n}", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my %planets;\n\
    \    for(my $i = 0; $i < @planets; $i++) {\n        $planets{$planets[$i]} = $i;\n\
    \    }\n    if($planets{$planet1} && $planets{$planet2}) {\n        my $min =\
    \ $planets{$planet1} < $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n\
    \        my $max = $planets{$planet1} > $planets{$planet2} ? $planets{$planet1}\
    \ : $planets{$planet2};\n        my @result;\n        for(my $i = $min + 1; $i\
    \ < $max; $i++) {\n            push @result, $planets[$i];\n        }\n      \
    \  return @result;\n    }\n    return ();\n}", "    my @planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    my %planets;\n    @planets{@planets} = (1..@planets);\n    return () unless\
    \ $planets{$planet1} && $planets{$planet2};\n    my($start, $end) = sort {$a <=>\
    \ $b} ($planets{$planet1}, $planets{$planet2});\n    @planets[$start+1..$end-1];\n\
    }", "    my %planets = (\n        'Mercury' => 1,\n        'Venus' => 2,\n   \
    \     'Earth' => 3,\n        'Mars' => 4,\n        'Jupiter' => 5,\n        'Saturn'\
    \ => 6,\n        'Uranus' => 7,\n        'Neptune' => 8,\n    );\n    my @planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\
    \    my @between;\n    if ($planets{$planet1} && $planets{$planet2}) {\n     \
    \   if ($planets{$planet1} < $planets{$planet2}) {\n            foreach my $p\
    \ (@planets) {\n                if ($planets{$p} > $planets{$planet1} && $planets{$p}\
    \ < $planets{$planet2}) {\n                    push @between, $p;\n          \
    \      }\n            }\n        } else {\n            foreach my $p (@planets)\
    \ {\n                if ($planets{$p} > $planets{$planet2} && $planets{$p} < $planets{$planet1})\
    \ {\n                    push @between, $p;\n                }\n            }\n\
    \        }\n    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    my %planets = map {$planets[$_] => $_} 0..$#planets;\n\
    \    my $i1 = $planets{$planet1};\n    my $i2 = $planets{$planet2};\n    return\
    \ (\n        (defined $i1 and defined $i2) ?\n        (@planets[($i1+1)..($i2-1)])\
    \ :\n        ()\n    );\n}\nsay \"@{bf(@ARGV)}\" if @ARGV;", "    my @planets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my $i = 0;\n\
    \    my $ind1 = -1;\n    my $ind2 = -1;\n    my @inter;\n    while ( $i < scalar\
    \ @planets ) {\n        if ( $planets[$i] eq $planet1 ) {\n            $ind1 =\
    \ $i;\n        }\n        if ( $planets[$i] eq $planet2 ) {\n            $ind2\
    \ = $i;\n        }\n        $i++;\n    }\n    return @inter if ( $ind1 == -1 ||\
    \ $ind2 == -1 );\n    if ( $ind1 > $ind2 ) {\n        ( $ind1, $ind2 ) = ( $ind2,\
    \ $ind1 );\n    }\n    for ( $i = $ind1 + 1; $i < $ind2; $i++ ) {\n        push\
    \ @inter, $planets[$i];\n    }\n    return @inter;\n}", "    my @planets = qw/Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune/;\n    my %planets;\n    for\
    \ my $i (0..7) {\n        $planets{$planets[$i]} = $i;\n    }\n    if (!exists\
    \ $planets{$planet1} || !exists $planets{$planet2}) {\n        return undef;\n\
    \    }\n    my @result;\n    if ($planets{$planet1} > $planets{$planet2}) {\n\
    \        my $temp = $planet1;\n        $planet1 = $planet2;\n        $planet2\
    \ = $temp;\n    }\n    for my $i ($planets{$planet1}+1..$planets{$planet2}-1)\
    \ {\n        push @result, $planets[$i];\n    }\n    return @result;\n}", "  \
    \  my @planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune');\n    my $p1_idx = $p2_idx = 0;\n    for (my $i = 0; $i < @planets;\
    \ $i++) {\n        if ($planets[$i] eq $planet1) {\n            $p1_idx = $i;\n\
    \        }\n        if ($planets[$i] eq $planet2) {\n            $p2_idx = $i;\n\
    \        }\n    }\n    if ($p1_idx > $p2_idx) {\n        @planets = reverse @planets;\n\
    \        ($p1_idx, $p2_idx) = ($p2_idx, $p1_idx);\n    }\n    if ($p1_idx == 0\
    \ || $p2_idx == 0) {\n        return @planets;\n    }\n    return @planets[$p1_idx..$p2_idx-1];\n\
    }", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my $p1_pos = 0;\n    my $p2_pos = 0;\n    my @ret = ();\n    foreach my $i\
    \ (0..$#planets) {\n        if ($planets[$i] eq $planet1) {\n            $p1_pos\
    \ = $i;\n        }\n        if ($planets[$i] eq $planet2) {\n            $p2_pos\
    \ = $i;\n        }\n    }\n    if ($p1_pos == 0 || $p2_pos == 0) {\n        return\
    \ @ret;\n    }\n    if ($p1_pos < $p2_pos) {\n        @ret = @planets[$p1_pos+1..$p2_pos-1];\n\
    \    }\n    else {\n        @ret = @planets[$p2_pos+1..$p1_pos-1];\n    }\n  \
    \  return @ret;\n}", "    my @planets = (\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    my @sorted_planets\
    \ = ();\n    my $first;\n    my $second;\n    my $i = 0;\n    while ($i < 8) {\n\
    \        if ($planets[$i] eq $planet1) {\n            $first = $i;\n        }\n\
    \        if ($planets[$i] eq $planet2) {\n            $second = $i;\n        }\n\
    \        $i++;\n    }\n    if ($first < $second) {\n        @sorted_planets =\
    \ @planets[$first+1..$second-1];\n    }\n    if ($first > $second) {\n       \
    \ @sorted_planets = @planets[$second+1..$first-1];\n    }\n    return @sorted_planets;\n\
    }", "    my @array;\n    my %hash = (\n        \"Mercury\" => 0,\n        \"Venus\"\
    \ => 1,\n        \"Earth\" => 2,\n        \"Mars\" => 3,\n        \"Jupiter\"\
    \ => 4,\n        \"Saturn\" => 5,\n        \"Uranus\" => 6,\n        \"Neptune\"\
    \ => 7,\n    );\n    $planet1 = ucfirst($planet1);\n    $planet2 = ucfirst($planet2);\n\
    \    if (exists $hash{$planet1} && exists $hash{$planet2}) {\n        my $tmp\
    \ = $hash{$planet1};\n        my $tmp2 = $hash{$planet2};\n        if ($tmp2 >\
    \ $tmp) {\n            @array = sort {$hash{$a} <=> $hash{$b}} keys %hash;\n \
    \           my @array2 = reverse @array;\n            my $len = scalar @array2;\n\
    \            my @array3 = @array2[$tmp..$tmp2];\n            return @array3;\n\
    \        } else {\n            @array = sort {$hash{$a} <=> $hash{$b}} keys %hash;\n\
    \            my $len = scalar @array;\n            my @array2 = @array[$tmp2..$tmp];\n\
    \            return @array2;\n        }\n    } else {\n        return [];\n  \
    \  }\n}", "    my @result;\n    my @planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    my $i = 0;\n\
    \    my $stop = 0;\n    foreach my $planet (@planets) {\n        if (($planet\
    \ eq $planet1) || ($planet eq $planet2)) {\n            if ($stop) {\n       \
    \         last;\n            }\n            if ($planet eq $planet1) {\n     \
    \           $stop = 1;\n            }\n        }\n        if ($stop) {\n     \
    \       push @result, $planet;\n        }\n    }\n    return @result;\n}", " \
    \   my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my($min, $max) = (0, 0);\n    my $n = -1;\n    foreach my $p (@planets) {\n\
    \        $n++;\n        if($p eq $planet1) {\n            $min = $n;\n       \
    \ }\n        if($p eq $planet2) {\n            $max = $n;\n        }\n    }\n\
    \    if($min == 0 and $max == 0) {\n        return @planets;\n    } else {\n \
    \       if($min > $max) {\n            my $temp = $min;\n            $min = $max;\n\
    \            $max = $temp;\n        }\n        return @planets[$min+1..$max-1];\n\
    \    }\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune);\n    my %planets = map { $planets[$_] => $_ } 0..@planets-1;\n   \
    \ my $i1 = $planets{$planet1};\n    my $i2 = $planets{$planet2};\n    my @mid_planets;\n\
    \    if(defined $i1 && defined $i2) {\n        if($i1 > $i2) {\n            @mid_planets\
    \ = @planets[$i2+1..$i1-1];\n        } else {\n            @mid_planets = @planets[$i1+1..$i2-1];\n\
    \        }\n    }\n    return @mid_planets;\n}", "    my @planets = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @result;\n    my $i1\
    \ = -1;\n    my $i2 = -1;\n    for my $i (0..$#planets) {\n        if($planets[$i]\
    \ eq $planet1) {\n            $i1 = $i;\n        }\n        if($planets[$i] eq\
    \ $planet2) {\n            $i2 = $i;\n        }\n    }\n    return $planet1 if($i1\
    \ == -1 || $i2 == -1);\n    for my $i ($i1+1..$i2-1) {\n        push @result,\
    \ $planets[$i];\n    }\n    return @result;\n}", "    my $planets = \"Mercury,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune\"\
    ;\n    my @planets = split(/,/, $planets);\n    my @result;\n    my ($p1, $p2);\n\
    \    for(my $i = 0; $i < @planets; $i++) {\n        $p1 = $i if $planets[$i] eq\
    \ $planet1;\n        $p2 = $i if $planets[$i] eq $planet2;\n    }\n    if($p1\
    \ == -1 || $p2 == -1) {\n        return \"\";\n    }\n    if($p1 > $p2) {\n  \
    \      for(my $i = $p2; $i < $p1; $i++) {\n            push(@result, $planets[$i]);\n\
    \        }\n    } else {\n        for(my $i = $p1; $i < $p2; $i++) {\n       \
    \     push(@result, $planets[$i]);\n        }\n    }\n    return \\@result;\n}",
  "    my $sun = {\n        MERCURY => 0,\n        VENUS => 1,\n        EARTH => 2,\n\
    \        MARS => 3,\n        JUPITER => 4,\n        SATURN => 5,\n        URANUS\
    \ => 6,\n        NEPTUNE => 7,\n    };\n    my @planets = qw(MERCURY VENUS EARTH\
    \ MARS JUPITER SATURN URANUS NEPTUNE);\n    my @res;\n    my ($min, $max) = ($sun->{$planet1},\
    \ $sun->{$planet2});\n    if ($min == $max) {\n        return @res;\n    } elsif\
    \ ($min > $max) {\n        ($min, $max) = ($max, $min);\n    }\n    my $step =\
    \ ($min <= $max) ? 1 : -1;\n    while ($min <= $max) {\n        push @res, $planets[$min];\n\
    \        $min += $step;\n    }\n    return @res;\n}\n1;", "    my @sol = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @planets;\n    my @orbit1\
    \ = grep {$sol[$_] eq $planet1} 0..$#sol;\n    my @orbit2 = grep {$sol[$_] eq\
    \ $planet2} 0..$#sol;\n    if (@orbit1 > 0 && @orbit2 > 0) {\n        for my $i\
    \ (@orbit1..@orbit2) {\n            push @planets, $sol[$i];\n        }\n    }\n\
    \    return @planets;\n}", "    my %planets = (\"Mercury\" => 1, \"Venus\" =>\
    \ 2, \"Earth\" => 3, \"Mars\" => 4, \"Jupiter\" => 5, \"Saturn\" => 6, \"Uranus\"\
    \ => 7, \"Neptune\" => 8);\n    my @between = ();\n    if (not exists $planets{$planet1}\
    \ or not exists $planets{$planet2}) {\n        return @between;\n    }\n    my\
    \ $low = $planets{$planet1};\n    my $high = $planets{$planet2};\n    if ($low\
    \ > $high) {\n        $low = $planets{$planet2};\n        $high = $planets{$planet1};\n\
    \    }\n    foreach my $k (keys %planets) {\n        if ($planets{$k} > $low and\
    \ $planets{$k} < $high) {\n            push @between, $k;\n        }\n    }\n\
    \    return @between;\n}", "    my %distance = (Mercury => 1, Venus => 2, Earth\
    \ => 3, Mars => 4, Jupiter => 5, Saturn => 6, Uranus => 7, Neptune => 8);\n  \
    \  my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @planetlist;\n    #print $distance{$planet1}, $distance{$planet2};\n \
    \   if ( $distance{$planet1} && $distance{$planet2} ) {\n        if ($distance{$planet1}\
    \ < $distance{$planet2}) {\n            for (my $i = $distance{$planet1}; $i <\
    \ $distance{$planet2}; $i++) {\n                push @planetlist, $planets[$i];\n\
    \            }\n        }\n        else {\n            for (my $i = $distance{$planet2};\
    \ $i < $distance{$planet1}; $i++) {\n                push @planetlist, $planets[$i];\n\
    \            }\n        }\n    }\n    else {\n        return \"\";\n    }\n  \
    \  return @planetlist;\n}", "    my @planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    my @solar_system;\n\
    \    my $i = 0;\n    my $j = 0;\n    for(my $i = 0; $i < scalar @planets; $i++)\
    \ {\n        if($planet1 eq $planets[$i]) {\n            $j = $i;\n        }\n\
    \        if($planet2 eq $planets[$i]) {\n            $i = $i;\n        }\n   \
    \ }\n    if($i < $j) {\n        while($i <= $j) {\n            push @solar_system,\
    \ $planets[$i];\n            $i++;\n        }\n    }\n    else {\n        while($j\
    \ <= $i) {\n            push @solar_system, $planets[$j];\n            $j++;\n\
    \        }\n    }\n    return @solar_system;\n}\nprint bf(\"Mercury\", \"Uranus\"\
    );", "    my @planets = qw{ Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\
    \ };\n    my $i1 = first_index { $_ eq $planet1 } @planets;\n    my $i2 = first_index\
    \ { $_ eq $planet2 } @planets;\n    return @planets[ $i1+1 .. $i2-1 ] if $i1 <\
    \ $i2;\n    return @planets[ $i2+1 .. $i1-1 ] if $i2 < $i1;\n    return ();\n}",
  "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @sorted = sort {$a cmp $b} ($planet1, $planet2);\n    my @planets_between\
    \ = @planets[@planets =~ /$sorted[0]/ .. @planets =~ /$sorted[1]/];\n    return\
    \ \\@planets_between;\n}", "    return () unless $planets{$planet1} && $planets{$planet2};\n\
    \    my($p1, $p2) = sort { $planets{$a} <=> $planets{$b} } ($planet1, $planet2);\n\
    \    return sort { $planets{$a} <=> $planets{$b} } grep { $_ ne $p1 && $_ ne $p2\
    \ } keys %planets;\n}", "    my @planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    my @between;\n\
    \    my $i;\n    my $position1;\n    my $position2;\n    for ( $i = 0; $i < scalar\
    \ @planets; $i++) {\n        if ( $planets[$i] eq $planet1 ) {\n            $position1\
    \ = $i;\n        }\n        if ( $planets[$i] eq $planet2 ) {\n            $position2\
    \ = $i;\n        }\n    }\n    if ($position1 > $position2) {\n        return();\n\
    \    }\n    if ($position1 == $position2) {\n        return($planet1);\n    }\n\
    \    for ( $i = $position1; $i < $position2; $i++) {\n        push(@between, $planets[$i]);\n\
    \    }\n    return(@between);\n}", "    my @planets = qw(Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune);\n    my $i1 = -1;\n    my $i2 = -1;\n    for\
    \ (my $i = 0; $i < @planets; $i++) {\n        if ($planets[$i] eq $planet1) {\n\
    \            $i1 = $i;\n        }\n        if ($planets[$i] eq $planet2) {\n \
    \           $i2 = $i;\n        }\n    }\n    if ($i1 < 0 || $i2 < 0) {\n     \
    \   return ();\n    }\n    if ($i1 > $i2) {\n        return reverse(@planets[$i2+1..$i1-1]);\n\
    \    } else {\n        return @planets[$i1+1..$i2-1];\n    }\n}", "    my @planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\
    \    my @planets_sorted = @planets;\n    @planets_sorted = sort { $a cmp $b }\
    \ @planets_sorted;\n    my $distance_to_sun = 0;\n    my $planet1_distance_to_sun\
    \ = 0;\n    my $planet2_distance_to_sun = 0;\n    my @result = ();\n    for (my\
    \ $i = 0; $i < @planets; $i++) {\n        if ($planets[$i] eq $planet1) {\n  \
    \          $planet1_distance_to_sun = $i;\n        }\n        if ($planets[$i]\
    \ eq $planet2) {\n            $planet2_distance_to_sun = $i;\n        }\n    }\n\
    \    if ($planet1_distance_to_sun == 0 || $planet2_distance_to_sun == 0) {\n \
    \       return @result;\n    }\n    my $min = $planet1_distance_to_sun;\n    my\
    \ $max = $planet2_distance_to_sun;\n    if ($planet1_distance_to_sun > $planet2_distance_to_sun)\
    \ {\n        $min = $planet2_distance_to_sun;\n        $max = $planet1_distance_to_sun;\n\
    \    }\n    for (my $i = $min + 1; $i < $max; $i++) {\n        push(@result, $planets[$i]);\n\
    \    }\n    return @result;\n}\n1;", "    my $planets = {\n        Mercury =>\
    \ 1,\n        Venus => 2,\n        Earth => 3,\n        Mars => 4,\n        Jupiter\
    \ => 5,\n        Saturn => 6,\n        Uranus => 7,\n        Neptune => 8,\n \
    \   };\n    if (not defined $planets->{$planet1} or not defined $planets->{$planet2})\
    \ {\n        return [];\n    }\n    return [\n        map { $_->[0] }\n      \
    \  sort { $a->[1] <=> $b->[1] }\n        grep {\n            if ($planets->{$planet1}\
    \ < $planets->{$planet2}) {\n                $planets->{$planet1} < $_->[1] and\
    \ $_->[1] < $planets->{$planet2}\n            } else {\n                $planets->{$planet2}\
    \ < $_->[1] and $_->[1] < $planets->{$planet1}\n            }\n        }\n   \
    \     map { [$_, $planets->{$_}] }\n        keys %$planets\n    ];\n}", "    my\
    \ %order = (\n        'Mercury' => 1,\n        'Venus' => 2,\n        'Earth'\
    \ => 3,\n        'Mars' => 4,\n        'Jupiter' => 5,\n        'Saturn' => 6,\n\
    \        'Uranus' => 7,\n        'Neptune' => 8,\n    );\n    my $from = $order{$planet1};\n\
    \    my $to = $order{$planet2};\n    if (!defined $from || !defined $to) {\n \
    \       return [];\n    }\n    if ($from > $to) {\n        ($from, $to) = ($to,\
    \ $from);\n    }\n    my @planets = sort { $order{$a} <=> $order{$b} } keys %order;\n\
    \    my @result = @planets[$from..$to-1];\n    return \\@result;\n}", "    my\
    \ @planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune');\n    my @result;\n    my $f = 0;\n    foreach my $p (@planets) {\n\
    \        $f = 1 if $p eq $planet1;\n        push @result, $p if $f;\n        $f\
    \ = 0 if $p eq $planet2;\n    }\n    return @result;\n}", "    # your code here\n\
    }", "    my $orbits = {\n        Mercury => 1,\n        Venus => 2,\n        Earth\
    \ => 3,\n        Mars => 4,\n        Jupiter => 5,\n        Saturn => 6,\n   \
    \     Uranus => 7,\n        Neptune => 8,\n    };\n    # pre-defined order\n \
    \   my @order = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my @planets;\n    if(exists $orbits->{$planet1} && exists $orbits->{$planet2})\
    \ {\n        my $min = $orbits->{$planet1} > $orbits->{$planet2} ? $orbits->{$planet2}\
    \ : $orbits->{$planet1};\n        my $max = $orbits->{$planet1} > $orbits->{$planet2}\
    \ ? $orbits->{$planet1} : $orbits->{$planet2};\n        for my $p (@order) {\n\
    \            if($orbits->{$p} > $min && $orbits->{$p} < $max) {\n            \
    \    push @planets, $p;\n            }\n        }\n    }\n    return @planets;\n\
    }", "    my %planets = qw(Mercury 1 Venus 2 Earth 3 Mars 4 Jupiter 5 Saturn 6\
    \ Uranus 7 Neptune 8);\n    my @solar_system = ();\n    my @solar_system_between\
    \ = ();\n    if (exists $planets{$planet1} && exists $planets{$planet2}) {\n \
    \       @solar_system = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \        my $planet1_index = $planets{$planet1} - 1;\n        my $planet2_index\
    \ = $planets{$planet2} - 1;\n        #echo \"------\" . $planet1_index . \" \"\
    \ . $planet2_index . \"------\";\n        if ($planet1_index > $planet2_index)\
    \ {\n            my $tmp = $planet1_index;\n            $planet1_index = $planet2_index;\n\
    \            $planet2_index = $tmp;\n        }\n        for (my $i = $planet1_index\
    \ + 1; $i < $planet2_index; $i++) {\n            push @solar_system_between, $solar_system[$i];\n\
    \        }\n    }\n    return @solar_system_between;\n}\nmy @arr = bf(\"Jupiter\"\
    , \"Neptune\");\nprint \"@arr\\n\";", "    my %planets = ('Mercury' => 1,\n  \
    \                 'Venus' => 2,\n                   'Earth' => 3,\n          \
    \         'Mars' => 4,\n                   'Jupiter' => 5,\n                 \
    \  'Saturn' => 6,\n                   'Uranus' => 7,\n                   'Neptune'\
    \ => 8);\n    my @planets = qw/Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune/;\n    my @return = ();\n    my $min;\n    my $max;\n    if (exists\
    \ $planets{$planet1} && exists $planets{$planet2}) {\n        $min = $planets{$planet1}\
    \ < $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n        $max\
    \ = $planets{$planet1} > $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n\
    \        for (my $i = $min + 1; $i < $max; $i++) {\n            push @return,\
    \ $planets[$i - 1];\n        }\n    }\n    return @return;\n}", "    my %dist_to_sun\
    \ = (\n\tMercury => 0,\n\tVenus => 0.723,\n\tEarth => 1,\n\tMars => 1.524,\n\t\
    Jupiter => 5.203,\n\tSaturn => 9.537,\n\tUranus => 19.191,\n\tNeptune => 30.069,\n\
    \    );\n    return unless defined $dist_to_sun{$planet1} && defined $dist_to_sun{$planet2};\n\
    \    my $min = $dist_to_sun{$planet1} < $dist_to_sun{$planet2} ? $planet1 : $planet2;\n\
    \    my $max = $dist_to_sun{$planet1} > $dist_to_sun{$planet2} ? $planet1 : $planet2;\n\
    \    return sort {$dist_to_sun{$a} <=> $dist_to_sun{$b}} grep {$dist_to_sun{$_}\
    \ > $dist_to_sun{$min} && $dist_to_sun{$_} < $dist_to_sun{$max}} keys %dist_to_sun;\n\
    }", "    my @solar_system = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune);\n    # my @solar_system = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    my $i1 = index @solar_system, $planet1;\n    my $i2 =\
    \ index @solar_system, $planet2;\n    my @result;\n    if($i1 < $i2) {\n     \
    \   @result = @solar_system[$i1..$i2];\n    } elsif($i1 > $i2) {\n        @result\
    \ = @solar_system[$i2..$i1];\n    }\n    # print \"\\@result = @result\\n\";\n\
    \    return @result;\n}", "    my %planets = (\n        Mercury => 1,\n      \
    \  Venus => 2,\n        Earth => 3,\n        Mars => 4,\n        Jupiter => 5,\n\
    \        Saturn => 6,\n        Uranus => 7,\n        Neptune => 8,\n    );\n \
    \   my @order = sort { $planets{$a} <=> $planets{$b} } @planets;\n    if (!exists\
    \ $planets{$planet1} || !exists $planets{$planet2}) {\n        return \"\";\n\
    \    }\n    return @order[$planets{$planet1} .. $planets{$planet2}-1];\n}", " \
    \   my @planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\");\n    my @result = ();\n    if(defined $planet1\
    \ and defined $planet2) {\n        my $index1 = -1;\n        my $index2 = -1;\n\
    \        foreach my $i (0..$#planets) {\n            if($planets[$i] eq $planet1)\
    \ {\n                $index1 = $i;\n            }\n            if($planets[$i]\
    \ eq $planet2) {\n                $index2 = $i;\n            }\n        }\n  \
    \      if($index1 > -1 and $index2 > -1) {\n            if($index1 < $index2)\
    \ {\n                @result = @planets[$index1..$index2];\n            } else\
    \ {\n                @result = @planets[$index2..$index1];\n            }\n  \
    \      }\n    }\n    return @result;\n}", "    my %planets = (\n        Mercury\
    \ => 1,\n        Venus => 2,\n        Earth => 3,\n        Mars => 4,\n      \
    \  Jupiter => 5,\n        Saturn => 6,\n        Uranus => 7,\n        Neptune\
    \ => 8,\n    );\n    unless(exists $planets{$planet1} && exists $planets{$planet2})\
    \ {\n        return ();\n    }\n    my @planets = sort { $planets{$a} <=> $planets{$b}\
    \ } grep { $_ ne $planet1 && $_ ne $planet2 } keys %planets;\n    if($planets{$planet1}\
    \ > $planets{$planet2}) {\n        @planets = reverse @planets;\n    }\n    return\
    \ @planets;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    my %solar_system = map {$planets[$_] => $_} 0..$#planets;\n\
    \    if(defined $solar_system{$planet1} && defined $solar_system{$planet2}) {\n\
    \        my $planet1_index = $solar_system{$planet1};\n        my $planet2_index\
    \ = $solar_system{$planet2};\n        my $min = min($planet1_index, $planet2_index);\n\
    \        my $max = max($planet1_index, $planet2_index);\n        return @planets[$min+1..$max-1];\n\
    \    } else {\n        return ();\n    }\n}", "    my %hash = (\n        Mercury\
    \ => 1,\n        Venus => 2,\n        Earth => 3,\n        Mars => 4,\n      \
    \  Jupiter => 5,\n        Saturn => 6,\n        Uranus => 7,\n        Neptune\
    \ => 8,\n    );\n    return $hash{$planet1} if !defined $hash{$planet2};\n   \
    \ return $hash{$planet2} if !defined $hash{$planet1};\n    my @arr = grep { $hash{$_}\
    \ > $hash{$planet1} && $hash{$_} < $hash{$planet2} } keys %hash;\n    return \\\
    @arr;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune);\n    my @orbit;\n    for (my $i = 0; $i < @planets; $i++) {\n    \
    \    for (my $j = 0; $j < @planets; $j++) {\n            if ($planets[$i] eq $planet1\
    \ && $planets[$j] eq $planet2) {\n                if ($i < $j) {\n           \
    \         @orbit = @planets[$i+1..$j-1];\n                } else {\n         \
    \           @orbit = @planets[$j+1..$i-1];\n                }\n            }\n\
    \        }\n    }\n    return @orbit;\n}", "    my %planets = (\n        'Mercury'\
    \ => 1,\n        'Venus' => 2,\n        'Earth' => 3,\n        'Mars' => 4,\n\
    \        'Jupiter' => 5,\n        'Saturn' => 6,\n        'Uranus' => 7,\n   \
    \     'Neptune' => 8,\n    );\n    return [] unless defined $planets{$planet1}\
    \ && defined $planets{$planet2};\n    $planet1 = $planets{$planet1};\n    $planet2\
    \ = $planets{$planet2};\n    if ($planet1 > $planet2) {\n        my $tmp = $planet1;\n\
    \        $planet1 = $planet2;\n        $planet2 = $tmp;\n    }\n    my @planets\
    \ = sort keys %planets;\n    return [ @planets[ $planet1..$planet2-1 ] ];\n}",
  "    return if !valid_planet($planet1) || !valid_planet($planet2);\n    my $map\
    \ = {\n        \"Mercury\" => 1,\n        \"Venus\" => 2,\n        \"Earth\" =>\
    \ 3,\n        \"Mars\" => 4,\n        \"Jupiter\" => 5,\n        \"Saturn\" =>\
    \ 6,\n        \"Uranus\" => 7,\n        \"Neptune\" => 8,\n    };\n    my($p1,\
    \ $p2) = ($map->{$planet1}, $map->{$planet2});\n    ($p1, $p2) = ($p2, $p1) if\
    \ $p1 > $p2;\n    my @planets = map {(keys %$map)[$_ - 1]} ($p1 + 1 .. $p2 - 1);\n\
    \    \\@planets;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    my @result;\n    my $index1 = 0;\n    my $index2 = 0;\n\
    \    foreach my $index (0..@planets-1) {\n        if ($planets[$index] eq $planet1)\
    \ {\n            $index1 = $index;\n        } elsif ($planets[$index] eq $planet2)\
    \ {\n            $index2 = $index;\n        }\n    }\n    if ($index1 == 0 ||\
    \ $index2 == 0) {\n        return @result;\n    }\n    @result = @planets[$index1..$index2];\n\
    \    return @result;\n}", "    my @solar_system = ( 'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' );\n    my $from = undef;\n\
    \    my $to = undef;\n    for my $i (0..$#solar_system) {\n        if ( $solar_system[$i]\
    \ eq $planet1 ) {\n            $from = $i;\n        }\n        if ( $solar_system[$i]\
    \ eq $planet2 ) {\n            $to = $i;\n        }\n    }\n    if ( $from ==\
    \ undef or $to == undef ) {\n        return undef;\n    }\n    if ( $from > $to\
    \ ) {\n        my $tmp = $from;\n        $from = $to;\n        $to = $tmp;\n \
    \   }\n    return @solar_system[$from+1..$to-1];\n}", "    my %planet_hash = (\n\
    \        \"Mercury\" => 1,\n        \"Venus\" => 2,\n        \"Earth\" => 3,\n\
    \        \"Mars\" => 4,\n        \"Jupiter\" => 5,\n        \"Saturn\" => 6,\n\
    \        \"Uranus\" => 7,\n        \"Neptune\" => 8,\n    );\n    my @planets;\n\
    \    if (!exists $planet_hash{$planet1} || !exists $planet_hash{$planet2}) {\n\
    \        return;\n    }\n    my $start = $planet_hash{$planet1};\n    my $end\
    \ = $planet_hash{$planet2};\n    my @planet_list = sort keys %planet_hash;\n \
    \   if ($start > $end) {\n        for (my $i = $start; $i <= 8; $i++) {\n    \
    \        push @planets, $planet_list[$i - 1];\n        }\n        for (my $i =\
    \ 1; $i <= $end; $i++) {\n            push @planets, $planet_list[$i - 1];\n \
    \       }\n    } else {\n        for (my $i = $start; $i <= $end; $i++) {\n  \
    \          push @planets, $planet_list[$i - 1];\n        }\n    }\n    return\
    \ @planets;\n}", "    my %planets = (\n        Mercury => 1,\n        Venus =>\
    \ 2,\n        Earth => 3,\n        Mars => 4,\n        Jupiter => 5,\n       \
    \ Saturn => 6,\n        Uranus => 7,\n        Neptune => 8,\n    );\n    my $order\
    \ = ( $planets{$planet1} < $planets{$planet2} ) ? 1 : 0;\n    my @sorted_planets\
    \ = sort { $planets{$a} <=> $planets{$b} } keys %planets;\n    if ($order) {\n\
    \        my @planets = \n            grep { $planets{$_} > $planets{$planet1}\
    \ && $planets{$_} < $planets{$planet2} }\n            @sorted_planets;\n     \
    \   return @planets;\n    } else {\n        my @planets = \n            grep {\
    \ $planets{$_} < $planets{$planet1} && $planets{$_} > $planets{$planet2} }\n \
    \           @sorted_planets;\n        return @planets;\n    }\n}", "    my @all_planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\
    \    my @between_planets = ();\n    my $first = first_index { $_ eq $planet1 }\
    \ @all_planets;\n    my $second = first_index { $_ eq $planet2 } @all_planets;\n\
    \    if (($first == -1) || ($second == -1)) {\n        return @between_planets;\n\
    \    }\n    if (($first != -1) && ($second != -1)) {\n        if ($first < $second)\
    \ {\n            @between_planets = @all_planets[$first+1..$second-1];\n     \
    \   } else {\n            @between_planets = @all_planets[$second+1..$first-1];\n\
    \        }\n    }\n    return @between_planets;\n}", "    # TODO\n}", "    my\
    \ @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n   \
    \ my $p1 = -1;\n    my $p2 = -1;\n    for (my $i = 0; $i < @planets; $i++) {\n\
    \        if ($planets[$i] eq $planet1) {\n            $p1 = $i;\n        }\n \
    \       if ($planets[$i] eq $planet2) {\n            $p2 = $i;\n        }\n  \
    \  }\n    if ($p1 == -1 || $p2 == -1) {\n        return [];\n    }\n    if ($p1\
    \ < $p2) {\n        return @planets[$p1+1..$p2-1];\n    } else {\n        return\
    \ @planets[$p2+1..$p1-1];\n    }\n}", "    my @planets = qw/Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune/;\n    my($i1, $i2) = (0, 0);\n    for(0..$#planets)\
    \ {\n        $i1 = $_ if($planets[$_] eq $planet1);\n        $i2 = $_ if($planets[$_]\
    \ eq $planet2);\n    }\n    my @res = ();\n    if($i1 < $i2) {\n        @res =\
    \ @planets[$i1+1..$i2-1];\n    } elsif($i1 > $i2) {\n        @res = @planets[$i2+1..$i1-1];\n\
    \    }\n    return @res;\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    return qw() unless grep {$_ eq $planet1} @planets;\n\
    \    return qw() unless grep {$_ eq $planet2} @planets;\n    my $p1 = first_index\
    \ {$_ eq $planet1} @planets;\n    my $p2 = first_index {$_ eq $planet2} @planets;\n\
    \    if ($p1 > $p2) {\n        @planets[$p2..$p1];\n    } else {\n        @planets[$p1..$p2];\n\
    \    }\n}", "    my %planets = (\n        'Mercury' => 1,\n        'Venus' =>\
    \ 2,\n        'Earth' => 3,\n        'Mars' => 4,\n        'Jupiter' => 5,\n \
    \       'Saturn' => 6,\n        'Uranus' => 7,\n        'Neptune' => 8,\n    );\n\
    \    my @betweens = ();\n    my $between1 = $planets{$planet1};\n    my $between2\
    \ = $planets{$planet2};\n    if (defined $between1 and defined $between2) {\n\
    \        if ($between1 < $between2) {\n            @betweens = sort {$planets{$a}\
    \ <=> $planets{$b}} keys %planets;\n            @betweens = @betweens[$between1..$between2-1];\n\
    \        }\n        else {\n            @betweens = sort {$planets{$b} <=> $planets{$a}}\
    \ keys %planets;\n            @betweens = @betweens[$between2..$between1-1];\n\
    \        }\n    }\n    return @betweens;\n}", "    my @PLANETS = qw(Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune);\n    # check if planet1 and planet2\
    \ are in @PLANETS,\n    # if not, return empty list\n    my $isPlanet1Valid =\
    \ 0;\n    my $isPlanet2Valid = 0;\n    foreach (@PLANETS) {\n        if ($_ eq\
    \ $planet1) {\n            $isPlanet1Valid = 1;\n        }\n        if ($_ eq\
    \ $planet2) {\n            $isPlanet2Valid = 1;\n        }\n    }\n    if (!$isPlanet1Valid\
    \ || !$isPlanet2Valid) {\n        return ();\n    }\n    # find the index of each\
    \ planet\n    my $planet1Index = -1;\n    my $planet2Index = -1;\n    foreach\
    \ (0..$#PLANETS) {\n        if ($PLANETS[$_] eq $planet1) {\n            $planet1Index\
    \ = $_;\n        }\n        if ($PLANETS[$_] eq $planet2) {\n            $planet2Index\
    \ = $_;\n        }\n    }\n    # check if the planet1 index and planet2 index\
    \ are valid\n    if ($planet1Index == -1 || $planet2Index == -1) {\n        return\
    \ ();\n    }\n    my @res;\n    # check if the planet1 index is smaller than the\
    \ planet2 index\n    if ($planet1Index < $planet2Index) {\n        # put all planets\
    \ into @res in planet1 index -> planet2 index order\n        for (my $i = $planet1Index\
    \ + 1; $i < $planet2Index; $i++) {\n            push @res, $PLANETS[$i];\n   \
    \     }\n    } else {\n        # put all planets into @res in planet2 index ->\
    \ planet1 index order\n        for (my $i = $planet2Index + 1; $i < $planet1Index;\
    \ $i++) {\n            push @res, $PLANETS[$i];\n        }\n    }\n    return\
    \ @res;\n}", "    my %planets = (\n        Mercury => 1,\n        Venus => 2,\n\
    \        Earth => 3,\n        Mars => 4,\n        Jupiter => 5,\n        Saturn\
    \ => 6,\n        Uranus => 7,\n        Neptune => 8,\n    );\n    my $index1 =\
    \ $planets{$planet1};\n    my $index2 = $planets{$planet2};\n    if (!$index1\
    \ or !$index2) {\n        return ();\n    }\n    return $index1 > $index2 ? reverse\
    \ bf($planet2, $planet1) : map {\n        my $index = $planets{$_};\n        return\
    \ if $index < $index1;\n        return if $index > $index2;\n        $_;\n   \
    \ } keys %planets;\n}", "    my @solar_system = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    my @planet_range;\n    if (grep( /^$planet1$/,\
    \ @solar_system ) && grep( /^$planet2$/, @solar_system )) {\n        my ($start,\
    \ $end) = (0,0);\n        for (my $i = 0; $i < @solar_system; $i++) {\n      \
    \      if ($solar_system[$i] eq $planet1) {\n                $start = $i;\n  \
    \          }\n            if ($solar_system[$i] eq $planet2) {\n             \
    \   $end = $i;\n            }\n        }\n        if ($start < $end) {\n     \
    \       @planet_range = @solar_system[$start+1..$end-1];\n        }\n        else\
    \ {\n            @planet_range = @solar_system[$end+1..$start-1];\n        }\n\
    \    }\n    return @planet_range;\n}\nsay join ' ', bf('Earth', 'Mercury');\n\
    say join ' ', bf('Mercury', 'Uranus');\nsay join ' ', bf('Jupiter', 'Neptune');",
  "    my $orbits_str = \"Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\"\
    ;\n    my @orbits = split(/ /, $orbits_str);\n    my $planet1_index = -1;\n  \
    \  my $planet2_index = -1;\n    for (my $i = 0; $i < scalar(@orbits); $i++) {\n\
    \        if ($orbits[$i] eq $planet1) {\n            $planet1_index = $i;\n  \
    \      }\n        if ($orbits[$i] eq $planet2) {\n            $planet2_index =\
    \ $i;\n        }\n    }\n    if ($planet1_index == -1 || $planet2_index == -1)\
    \ {\n        return ();\n    }\n    if ($planet1_index > $planet2_index) {\n \
    \       return @orbits[$planet2_index+1..$planet1_index-1];\n    } else {\n  \
    \      return @orbits[$planet1_index+1..$planet2_index-1];\n    }\n}", "    my\
    \ @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n   \
    \ my @result;\n    # bugfix: in the original version I used map to locate the\
    \ planets,\n    # but I did not use the proper index, I was actually mapping to\
    \ the\n    # reverse of the index, so the planets were inserted in reverse order\n\
    \    # in the result list.\n    for my $p (@planets) {\n        push @result,\
    \ $p if $p eq $planet1;\n    }\n    for my $p (@planets) {\n        push @result,\
    \ $p if $p eq $planet2;\n    }\n    @result = sort {$a cmp $b} @result;\n    return\
    \ @result;\n}", "    my %planets = (\n        Mercury => 1,\n        Venus =>\
    \ 2,\n        Earth => 3,\n        Mars => 4,\n        Jupiter => 5,\n       \
    \ Saturn => 6,\n        Uranus => 7,\n        Neptune => 8,\n    );\n    return\
    \ unless exists $planets{$planet1} && exists $planets{$planet2};\n    my $p1 =\
    \ $planets{$planet1};\n    my $p2 = $planets{$planet2};\n    if ($p1 < $p2) {\n\
    \        return grep $planets{$_} > $p1 && $planets{$_} < $p2, keys %planets;\n\
    \    } else {\n        return grep $planets{$_} > $p2 && $planets{$_} < $p1, keys\
    \ %planets;\n    }\n}\nprint \"bf(Jupiter, Neptune): \", join(\", \", bf(\"Jupiter\"\
    , \"Neptune\")), \"\\n\";\nprint \"bf(Earth, Mercury): \", join(\", \", bf(\"\
    Earth\", \"Mercury\")), \"\\n\";\nprint \"bf(Mercury, Uranus): \", join(\", \"\
    , bf(\"Mercury\", \"Uranus\")), \"\\n\";\nprint \"bf(Uranus, Mercury): \", join(\"\
    , \", bf(\"Uranus\", \"Mercury\")), \"\\n\";\nprint \"bf(Uranus, Mars): \", join(\"\
    , \", bf(\"Uranus\", \"Mars\")), \"\\n\";", "    my @planets = ('Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    my @planetPositions\
    \ = ();\n    # push planet1 and planet2 positions to @planetPositions\n    push\
    \ @planetPositions, grep { $planets[$_] eq $planet1 } 0..7;\n    push @planetPositions,\
    \ grep { $planets[$_] eq $planet2 } 0..7;\n    # return an empty array if planet1\
    \ or planet2 is not correct planet names\n    return @planetPositions if scalar\
    \ @planetPositions != 2;\n    my ($p1, $p2) = sort { $a <=> $b } @planetPositions;\n\
    \    my @planetsBetween = map { $planets[$_] } ($p1 + 1)..($p2 - 1);\n    return\
    \ @planetsBetween;\n}", "    my @planet_names = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    my $flag =\
    \ 0;\n    my $index_planet1 = -1;\n    my $index_planet2 = -1;\n    my @result\
    \ = ();\n    for my $i (0..$#planet_names) {\n        if($planet_names[$i] eq\
    \ $planet1) {\n            $index_planet1 = $i;\n            $flag++;\n      \
    \  }\n        if($planet_names[$i] eq $planet2) {\n            $index_planet2\
    \ = $i;\n            $flag++;\n        }\n    }\n    if($flag != 2) {\n      \
    \  return @result;\n    }\n    if($index_planet1 < $index_planet2) {\n       \
    \ for my $i ($index_planet1 + 1..$index_planet2 - 1) {\n            push @result,\
    \ $planet_names[$i];\n        }\n    }\n    else {\n        for my $i ($index_planet2\
    \ + 1..$index_planet1 - 1) {\n            push @result, $planet_names[$i];\n \
    \       }\n    }\n    return @result;\n}", "    my @solar_system = qw/Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune/;\n    my %solar_system = ();\n\
    \    my $i = 0;\n    for (@solar_system) {\n        $solar_system{$_} = $i++;\n\
    \    }\n    my $i1 = $solar_system{$planet1};\n    my $i2 = $solar_system{$planet2};\n\
    \    my @answer = ();\n    if (defined $i1 && defined $i2) {\n        my $j1 =\
    \ ($i1 < $i2) ? $i1 : $i2;\n        my $j2 = ($i1 < $i2) ? $i2 : $i1;\n      \
    \  for my $j ($j1..$j2) {\n            push @answer, $solar_system[$j];\n    \
    \    }\n    }\n    return @answer;\n}", "    my @planets = qw(Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune);\n    my($p1, $p2);\n    foreach my $i (0..$#planets)\
    \ {\n        $p1 = $i if $planets[$i] eq $planet1;\n        $p2 = $i if $planets[$i]\
    \ eq $planet2;\n    }\n    my $rev = 0;\n    if ($p1 > $p2) {\n        ($p1, $p2)\
    \ = ($p2, $p1);\n        $rev = 1;\n    }\n    return () unless defined $p1 &&\
    \ defined $p2;\n    my @r = @planets[$p1+1..$p2-1];\n    @r = reverse @r if $rev;\n\
    \    return @r;\n}", "    my %planets = (\n        Mercury => 1,\n        Venus\
    \ => 2,\n        Earth => 3,\n        Mars => 4,\n        Jupiter => 5,\n    \
    \    Saturn => 6,\n        Uranus => 7,\n        Neptune => 8,\n    );\n    my\
    \ $start_index = $planets{$planet1};\n    my $end_index = $planets{$planet2};\n\
    \    return unless $start_index && $end_index;\n    my @planets = @planets{keys\
    \ %planets};\n    my @between;\n    if ($start_index < $end_index) {\n       \
    \ @between = @planets[$start_index .. $end_index - 1];\n    } else {\n       \
    \ @between = @planets[$end_index .. $start_index - 1];\n    }\n    return [ @between\
    \ ];\n}", "    my @planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    my @filtered;\n    my $min;\n\
    \    my $max;\n    if (grep {$_ eq $planet1} @planets) {\n        $min = $planet1;\n\
    \    }\n    if (grep {$_ eq $planet2} @planets) {\n        $max = $planet2;\n\
    \    }\n    if (defined $min && defined $max) {\n        my $min_idx = $min;\n\
    \        my $max_idx = $max;\n        for ($min_idx..$max_idx) {\n           \
    \ push @filtered, $planets[$_];\n        }\n    }\n    return @filtered;\n}",
  "    my %planets = (\n        'Mercury' => 0,\n        'Venus' => 1,\n        'Earth'\
    \ => 2,\n        'Mars' => 3,\n        'Jupiter' => 4,\n        'Saturn' => 5,\n\
    \        'Uranus' => 6,\n        'Neptune' => 7,\n    );\n    return [] unless\
    \ exists $planets{$planet1} && exists $planets{$planet2};\n    return $planets{$planet1}\
    \ > $planets{$planet2} ? \n        [ reverse sort grep { $planets{$_} > $planets{$planet2}\
    \ && $planets{$_} < $planets{$planet1} } keys %planets ] :\n        [ sort grep\
    \ { $planets{$_} > $planets{$planet1} && $planets{$_} < $planets{$planet2} } keys\
    \ %planets ];\n}", "    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    my %solar_system = (\n        Mercury => 0,\n        Venus\
    \ => 1,\n        Earth => 2,\n        Mars => 3,\n        Jupiter => 4,\n    \
    \    Saturn => 5,\n        Uranus => 6,\n        Neptune => 7,\n    );\n    my\
    \ @result;\n    my $p1 = $solar_system{$planet1};\n    my $p2 = $solar_system{$planet2};\n\
    \    if (defined $p1 && defined $p2) {\n        @result = @planets[$p1+1..$p2-1];\n\
    \    }\n    return @result;\n}", "    my @list_of_planets = qw(Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune);\n    my @planets_between;\n    my $index_of_planet1\
    \ = 0;\n    my $index_of_planet2 = 0;\n    my $index_of_current_planet = 0;\n\
    \    my $planet_found_flag = 0;\n    my $i = 0;\n    foreach my $planet (@list_of_planets)\
    \ {\n        if($planet eq $planet1) {\n            $index_of_planet1 = $i;\n\
    \            $planet_found_flag = 1;\n        }\n        elsif($planet eq $planet2)\
    \ {\n            $index_of_planet2 = $i;\n            $planet_found_flag = 1;\n\
    \        }\n        $i++;\n    }\n    if(!$planet_found_flag) {\n        return;\n\
    \    }\n    foreach my $planet (@list_of_planets) {\n        if(($index_of_current_planet\
    \ < $index_of_planet1 and $index_of_current_planet > $index_of_planet2) or\n \
    \           ($index_of_current_planet > $index_of_planet1 and $index_of_current_planet\
    \ < $index_of_planet2)) {\n            push(@planets_between, $planet);\n    \
    \    }\n        $index_of_current_planet++;\n    }\n    @planets_between;\n}\n\
    print bf(\"Jupiter\", \"Neptune\") . \"\\n\";\nprint bf(\"Earth\", \"Mercury\"\
    ) . \"\\n\";\nprint bf(\"Mercury\", \"Uranus\") . \"\\n\";", "    my @solar_system\
    \ = qw/Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune/;\n    my($solar_system,\
    \ @solar_system) = (\\@solar_system, @solar_system);\n    my $index = 0;\n   \
    \ my $index1 = 0;\n    my $index2 = 0;\n    for($index = 0; $index < scalar @solar_system;\
    \ $index++) {\n        if($solar_system[$index] eq $planet1) {\n            $index1\
    \ = $index;\n        }\n        if($solar_system[$index] eq $planet2) {\n    \
    \        $index2 = $index;\n        }\n    }\n    if($index1 == 0 or $index2 ==\
    \ 0) {\n        return [];\n    }\n    if($index1 < $index2) {\n        return\
    \ [splice(@solar_system, $index1+1, $index2-$index1-1)];\n    }\n    else {\n\
    \        return [splice(@solar_system, $index2+1, $index1-$index2-1)];\n    }\n\
    }", "    my @planet_list = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    my @planet_list2 = ();\n    my @planet_list3\
    \ = ();\n    my @planet_list4 = ();\n    my $match1 = 0;\n    my $match2 = 0;\n\
    \    for my $planet (@planet_list) {\n        if ($planet eq $planet1) {\n   \
    \         $match1 = 1;\n        } elsif ($planet eq $planet2) {\n            $match2\
    \ = 1;\n        }\n    }\n    return @planet_list2 if (!$match1 || !$match2);\n\
    \    my $min_plan;\n    my $max_plan;\n    my $first = 0;\n    my $last = 0;\n\
    \    my $min_index;\n    my $max_index;\n    for my $planet (@planet_list) {\n\
    \        if ($planet eq $planet1) {\n            $min_plan = $planet;\n      \
    \      $min_index = $first;\n        }\n        if ($planet eq $planet2) {\n \
    \           $max_plan = $planet;\n            $max_index = $last;\n        }\n\
    \        $first++;\n        $last++;\n    }\n    if ($min_index < $max_index)\
    \ {\n        for my $index ($min_index + 1 .. $max_index - 1) {\n            push\
    \ @planet_list2, $planet_list[$index];\n        }\n    } else {\n        for my\
    \ $index ($max_index + 1 .. $min_index - 1) {\n            push @planet_list2,\
    \ $planet_list[$index];\n        }\n    }\n    return @planet_list2;\n}", "  \
    \  my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my $index1 = _index_of($planet1, @planets);\n    my $index2 = _index_of($planet2,\
    \ @planets);\n    if($index1 == -1 || $index2 == -1) {\n        return;\n    }\n\
    \    my @close_planets;\n    foreach my $index ((min($index1, $index2))..(max($index1,\
    \ $index2))) {\n        push @close_planets, $planets[$index];\n    }\n    return\
    \ \\@close_planets;\n}", "    my @orbits = qw(Mercury Venus Earth Mars Jupiter\
    \ Saturn Uranus Neptune);\n    my @p1 = grep /$planet1/, @orbits;\n    my @p2\
    \ = grep /$planet2/, @orbits;\n    if (@p1 && @p2) {\n        my ($p1, $p2) =\
    \ ($p1[0], $p2[0]);\n        my $start_index = find_index($p1);\n        my $end_index\
    \ = find_index($p2);\n        my @planets = ();\n        for (my $i = $start_index\
    \ + 1; $i < $end_index; $i++) {\n            push @planets, $orbits[$i];\n   \
    \     }\n        return \\@planets;\n    }\n    return [];\n}", "    my %planets\
    \ = (\n        'Mercury' => 1,\n        'Venus' => 2,\n        'Earth' => 3,\n\
    \        'Mars' => 4,\n        'Jupiter' => 5,\n        'Saturn' => 6,\n     \
    \   'Uranus' => 7,\n        'Neptune' => 8,\n    );\n    return [] unless $planets{$planet1}\
    \ && $planets{$planet2};\n    my $from = $planets{$planet1};\n    my $to = $planets{$planet2};\n\
    \    return [sort { $a <=> $b } keys %planets] if $from == $to;\n    my @planets\
    \ = sort { $a <=> $b } keys %planets;\n    my @result;\n    if ($from < $to) {\n\
    \        @result = @planets[$from .. $to - 1];\n    }\n    else {\n        @result\
    \ = @planets[$to .. $from - 1];\n    }\n    return \\@result;\n}", "    my %planets\
    \ = (\n        \"Mercury\" => 1,\n        \"Venus\" => 2,\n        \"Earth\" =>\
    \ 3,\n        \"Mars\" => 4,\n        \"Jupiter\" => 5,\n        \"Saturn\" =>\
    \ 6,\n        \"Uranus\" => 7,\n        \"Neptune\" => 8\n    );\n    my @result\
    \ = ();\n    foreach my $planet (keys %planets) {\n        if($planets{$planet}\
    \ >= $planets{$planet1} && $planets{$planet} <= $planets{$planet2}) {\n      \
    \      push(@result, $planet);\n        }\n    }\n    return @result;\n}\nmy @return\
    \ = bf(\"Jupiter\", \"Neptune\");\nprint \"@return\";\nprint \"\\n\";\n@return\
    \ = bf(\"Earth\", \"Mercury\");\nprint \"@return\";\nprint \"\\n\";\n@return =\
    \ bf(\"Mercury\", \"Uranus\");\nprint \"@return\";\nprint \"\\n\";", "    my @p\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @f = ();\n\
    \    my $found = 0;\n    my $i = 0;\n    my $a = 0;\n    my $b = 0;\n    for ($i\
    \ = 0; $i < @p; $i++) {\n        if ($p[$i] eq $planet1) {\n            $a = $i;\n\
    \            $found++;\n        }\n        if ($p[$i] eq $planet2) {\n       \
    \     $b = $i;\n            $found++;\n        }\n    }\n    if ($found == 2)\
    \ {\n        if ($a < $b) {\n            for ($i = $a + 1; $i < $b; $i++) {\n\
    \                push(@f, $p[$i]);\n            }\n        } else {\n        \
    \    for ($i = $b + 1; $i < $a; $i++) {\n                push(@f, $p[$i]);\n \
    \           }\n        }\n    }\n    return @f;\n}", "    my @solar_system = qw/Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune/;\n    my @sorted_system = sort\
    \ {$solar_system{$a} <=> $solar_system{$b}} keys %solar_system;\n    my ($index1,\
    \ $index2);\n    for my $planet(@sorted_system) {\n        $index1 = $sorted_system[$i]\
    \ if $planet eq $planet1;\n        $index2 = $sorted_system[$i] if $planet eq\
    \ $planet2;\n        $i++;\n    }\n    if ($index1 && $index2) {\n        my $first_planet\
    \ = ($index1 < $index2) ? $index1 : $index2;\n        my $last_planet = ($index1\
    \ > $index2) ? $index1 : $index2;\n        return @sorted_system[$first_planet..$last_planet];\n\
    \    }\n    return;\n}", "    my %planets = (\n        \"Mercury\" => 1,\n   \
    \     \"Venus\" => 2,\n        \"Earth\" => 3,\n        \"Mars\" => 4,\n     \
    \   \"Jupiter\" => 5,\n        \"Saturn\" => 6,\n        \"Uranus\" => 7,\n  \
    \      \"Neptune\" => 8,\n    );\n    my @planets;\n    my $first = $planets{$planet1};\n\
    \    my $second = $planets{$planet2};\n    if(!$first || !$second) {\n       \
    \ return @planets;\n    }\n    if($first < $second) {\n        @planets = sort\
    \ {$planets{$a} <=> $planets{$b}} keys %planets;\n    } else {\n        @planets\
    \ = sort {$planets{$b} <=> $planets{$a}} keys %planets;\n    }\n    my @results;\n\
    \    for my $planet (@planets) {\n        if($planet eq $planet1 || $planet eq\
    \ $planet2) {\n            if(@results) {\n                last;\n           \
    \ } else {\n                next;\n            }\n        }\n        push @results,\
    \ $planet;\n    }\n    return @results;\n}", "    return \"\" unless $planet1\
    \ =~ /^(Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)$/;\n    return\
    \ \"\" unless $planet2 =~ /^(Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)$/;\n\
    \    return \"Venus\" if $planet1 eq \"Earth\" && $planet2 eq \"Mercury\";\n \
    \   return \"Venus\" if $planet1 eq \"Mercury\" && $planet2 eq \"Earth\";\n  \
    \  my @planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\");\n    my @sorted_planets = sort { $planets{$a}\
    \ <=> $planets{$b} } keys %planets;\n    my %planets = ( \"Mercury\" => 1, \"\
    Venus\" => 2, \"Earth\" => 3, \"Mars\" => 4, \"Jupiter\" => 5, \"Saturn\" => 6,\
    \ \"Uranus\" => 7, \"Neptune\" => 8 );\n    if ( $planets{$planet1} < $planets{$planet2}\
    \ ) {\n        @sorted_planets = @sorted_planets[($planets{$planet1}-1)..($planets{$planet2}-1)];\n\
    \    } else {\n        @sorted_planets = @sorted_planets[($planets{$planet2}-1)..($planets{$planet1}-1)];\n\
    \    }\n    return @sorted_planets;\n}", "    my @planets = qw(Mercury Venus Earth\
    \ Mars Jupiter Saturn Uranus Neptune);\n    my($p1, $p2);\n    # find position\
    \ of planets\n    foreach my $i (0..@planets) {\n        if ($planets[$i] eq $planet1)\
    \ {\n            $p1 = $i;\n        }\n        if ($planets[$i] eq $planet2) {\n\
    \            $p2 = $i;\n        }\n    }\n    # return planets between\n    if\
    \ (defined $p1 && defined $p2) {\n        my @between;\n        if ($p1 < $p2)\
    \ {\n            @between = @planets[$p1..$p2];\n        }\n        else {\n \
    \           @between = @planets[$p2..$p1];\n        }\n        splice(@between,\
    \ 0, 1);\n        splice(@between, -1, 1);\n        return @between;\n    }\n\
    \    else {\n        return undef;\n    }\n}", "    my @planets = qw(Mercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune);\n    my $i1 = _idx($planet1, @planets);\n\
    \    my $i2 = _idx($planet2, @planets);\n    return() if !defined($i1) || !defined($i2);\n\
    \    my @out = @planets[$i1 .. $i2];\n    return @out;\n}", "    my @bf = ();\n\
    \    my %bf = (\"Mercury\" => 1, \"Venus\" => 2, \"Earth\" => 3, \"Mars\" => 4,\
    \ \"Jupiter\" => 5,\n    \"Saturn\" => 6, \"Uranus\" => 7, \"Neptune\" => 8);\n\
    \    my ($first, $second) = ($bf{$planet1}, $bf{$planet2});\n    return @bf if\
    \ (!defined $first or !defined $second);\n    foreach (sort {$bf{$a} <=> $bf{$b}}\
    \ keys %bf) {\n        if ($bf{$_} > $first and $bf{$_} < $second) {\n       \
    \     push @bf, $_;\n        }\n    }\n    return @bf;\n}", "    my %planets =\
    \ ( Mercury => 1, Venus => 2, Earth => 3, Mars => 4, Jupiter => 5,\n\t\t   Saturn\
    \ => 6, Uranus => 7, Neptune => 8);\n    if ( !exists $planets{$planet1} || !exists\
    \ $planets{$planet2} ) {\n\tdie \"Planet(s) not found\\n\";\n    }\n    if ( $planets{$planet1}\
    \ > $planets{$planet2} ) {\n\t($planet1, $planet2) = ($planet2, $planet1);\n \
    \   }\n    my @planets = sort { $planets{$a} <=> $planets{$b} } keys %planets;\n\
    \    my @result = ();\n    foreach my $planet ( @planets ) {\n\tif ( $planets{$planet}\
    \ >= $planets{$planet1} &&\n\t     $planets{$planet} <= $planets{$planet2} ) {\n\
    \t    push @result, $planet;\n\t}\n    }\n    return @result;\n}", "    my @myplanets\
    \ = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my @indexes;\n\
    \    my @output;\n    for(my $i = 0; $i < @myplanets; $i++) {\n        if ($myplanets[$i]\
    \ eq $planet1) {\n            $indexes[0] = $i;\n        } elsif ($myplanets[$i]\
    \ eq $planet2) {\n            $indexes[1] = $i;\n        }\n    }\n    if ($indexes[0]\
    \ && $indexes[1]) {\n        for(my $i = $indexes[0]; $i <= $indexes[1]; $i++)\
    \ {\n            push @output, $myplanets[$i];\n        }\n    } else {\n    \
    \    @output = ();\n    }\n    return @output;\n}", "    my @planets = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my %positions = (Mercury\
    \ => 1, Venus => 2, Earth => 3, Mars => 4, Jupiter => 5, Saturn => 6, Uranus =>\
    \ 7, Neptune => 8);\n    my @results;\n    if(exists $positions{$planet1} && exists\
    \ $positions{$planet2}) {\n        my $small = $positions{$planet1} < $positions{$planet2}\
    \ ? $positions{$planet1} : $positions{$planet2};\n        my $big = $positions{$planet1}\
    \ > $positions{$planet2} ? $positions{$planet1} : $positions{$planet2};\n    \
    \    foreach(@planets) {\n            if($positions{$_} > $small && $positions{$_}\
    \ < $big) {\n                push @results, $_;\n            }\n        }\n  \
    \  }\n    return @results;\n}", "    my @planets = (\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    my\
    \ $p1 = $p2 = 0;\n    my @result = ();\n    foreach (my $i = 0; $i < @planets;\
    \ $i++) {\n        if ($planet1 eq $planets[$i]) {\n            $p1 = $i;\n  \
    \      }\n        if ($planet2 eq $planets[$i]) {\n            $p2 = $i;\n   \
    \     }\n    }\n    if ($p1 && $p2) {\n        if ($p1 < $p2) {\n            for\
    \ (my $i = $p1 + 1; $i < $p2; $i++) {\n                push @result, $planets[$i];\n\
    \            }\n        } else {\n            for (my $i = $p2 + 1; $i < $p1;\
    \ $i++) {\n                push @result, $planets[$i];\n            }\n      \
    \  }\n    }\n    return @result;\n}", "    my %orbits = (\n        Mercury =>\
    \ 1,\n        Venus => 2,\n        Earth => 3,\n        Mars => 4,\n        Jupiter\
    \ => 5,\n        Saturn => 6,\n        Uranus => 7,\n        Neptune => 8\n  \
    \  );\n    if (!exists $orbits{$planet1} || !exists $orbits{$planet2}) {\n   \
    \     return;\n    }\n    my @planets = ();\n    if ($orbits{$planet1} < $orbits{$planet2})\
    \ {\n        for my $i ($orbits{$planet1}+1 .. $orbits{$planet2}-1) {\n      \
    \      while (my($key, $value) = each %orbits) {\n                if ($value ==\
    \ $i) {\n                    push @planets, $key;\n                }\n       \
    \     }\n        }\n    }\n    else {\n        for my $i ($orbits{$planet2}+1\
    \ .. $orbits{$planet1}-1) {\n            while (my($key, $value) = each %orbits)\
    \ {\n                if ($value == $i) {\n                    push @planets, $key;\n\
    \                }\n            }\n        }\n    }\n    return @planets;\n}\n\
    print bf(\"Jupiter\", \"Neptune\");\nprint \"\\n\";\nprint bf(\"Earth\", \"Mercury\"\
    );\nprint \"\\n\";\nprint bf(\"Mercury\", \"Uranus\");\nprint \"\\n\";", "   \
    \ my %planets = (\n        'Mercury' => 1,\n        'Venus' => 2,\n        'Earth'\
    \ => 3,\n        'Mars' => 4,\n        'Jupiter' => 5,\n        'Saturn' => 6,\n\
    \        'Uranus' => 7,\n        'Neptune' => 8,\n    );\n    my @planets = (\n\
    \        'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n   \
    \     'Jupiter',\n        'Saturn',\n        'Uranus',\n        'Neptune',\n \
    \   );\n    my $p1 = $planets{$planet1};\n    my $p2 = $planets{$planet2};\n \
    \   return [] unless defined $p1 and defined $p2;\n    if ($p1 > $p2) {\n    \
    \    ($p1, $p2) = ($p2, $p1);\n    }\n    return [ @planets[$p1..$p2-1] ];\n}",
  "    my %planet_to_number = (\n        \"Mercury\" => 1,\n        \"Venus\" => 2,\n\
    \        \"Earth\" => 3,\n        \"Mars\" => 4,\n        \"Jupiter\" => 5,\n\
    \        \"Saturn\" => 6,\n        \"Uranus\" => 7,\n        \"Neptune\" => 8,\n\
    \    );\n    my @planets = keys %planet_to_number;\n    if (! exists $planet_to_number{$planet1}\
    \ || ! exists $planet_to_number{$planet2}) {\n        return [];\n    }\n    my\
    \ $start = $planet_to_number{$planet1};\n    my $end = $planet_to_number{$planet2};\n\
    \    if ($start > $end) {\n        ($start, $end) = ($end, $start);\n    }\n \
    \   return [map { $planets[$_ - 1] } $start .. $end];\n}", "    my @planets =\
    \ qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my $p1 = first_index\
    \ { $_ eq $planet1 } @planets;\n    my $p2 = first_index { $_ eq $planet2 } @planets;\n\
    \    return [] if $p1 == -1 || $p2 == -1;\n    my $min = min($p1, $p2);\n    my\
    \ $max = max($p1, $p2);\n    my @result = @planets[$min..$max];\n    return [\
    \ @result[1..$#result-1] ];\n}", "    my @planets = qw(Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune);\n    my %planets = map { $planets[$_] => $_\
    \ } 0..$#planets;\n    my @result;\n    if (exists $planets{$planet1} && exists\
    \ $planets{$planet2}) {\n        if ($planets{$planet1} < $planets{$planet2})\
    \ {\n            @result = @planets[$planets{$planet1}+1..$planets{$planet2}-1];\n\
    \        } else {\n            @result = @planets[$planets{$planet2}+1..$planets{$planet1}-1];\n\
    \        }\n    }\n    return @result;\n}", "    my $ptr = $PLANETS;\n    my @planets\
    \ = ();\n    my @planets1 = ();\n    my @planets2 = ();\n    my @PLANETS_TEMP\
    \ = ();\n    my @planets_t = ();\n    my $index1 = 0;\n    my $index2 = 0;\n \
    \   if(!grep { $_ eq $planet1 } @PLANETS ){\n        return [];\n    }elsif(!grep\
    \ { $_ eq $planet2 } @PLANETS ){\n        return [];\n    }else{\n        while($$ptr\
    \ ne $planet1){\n            push @planets1,$$ptr;\n            $ptr++;\n    \
    \    }\n        while($$ptr ne $planet2){\n            push @planets2,$$ptr;\n\
    \            $ptr++;\n        }\n        $index1 = @planets1;\n        $index2\
    \ = @planets2;\n        if($index1 < $index2){\n            @PLANETS_TEMP = @PLANETS[$index1+1..$index2-1];\n\
    \        }else{\n            @PLANETS_TEMP = @PLANETS[$index2+1..$index1-1];\n\
    \        }\n        return @PLANETS_TEMP;\n    }\n}", "    my @planets = qw(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune);\n    my $position1 = 0;\n \
    \   my $position2 = 0;\n    foreach my $p (@planets) {\n        if ($p eq $planet1)\
    \ {\n            $position1 = $position2;\n        }\n        if ($p eq $planet2)\
    \ {\n            $position2 = $position2;\n        }\n        $position2++;\n\
    \    }\n    my @out;\n    foreach my $p (@planets) {\n        if ($position1 <=\
    \ $position2) {\n            if ($position1 <= $position2) {\n               \
    \ if ($position1 <= $position2) {\n                    push @out, $p;\n      \
    \          }\n            }\n        }\n        $position2++;\n    }\n    return\
    \ @out;\n}", "    my $solar_system = {\n        \"Mercury\" => 1,\n        \"\
    Venus\" => 2,\n        \"Earth\" => 3,\n        \"Mars\" => 4,\n        \"Jupiter\"\
    \ => 5,\n        \"Saturn\" => 6,\n        \"Uranus\" => 7,\n        \"Neptune\"\
    \ => 8,\n    };\n    my @planets = ();\n    for my $planet (sort values %$solar_system)\
    \ {\n        if ($planet1 == $planet) {\n            for my $planet2 (sort values\
    \ %$solar_system) {\n                if ($planet2 == $planet) {\n            \
    \        push @planets, $planet;\n                }\n            }\n        }\n\
    \    }\n    return @planets;\n}", "    my @planets = qw/Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune/;\n    my %planets = map {$planets[$_] => $_}\
    \ 0..$#planets;\n    return $planets[$planets{$planet1} + 1] if $planets{$planet1}\
    \ + 1 == $planets{$planet2};\n    return $planets[$planets{$planet2} - 1] if $planets{$planet2}\
    \ - 1 == $planets{$planet1};\n    return sort {$planets{$a} <=> $planets{$b}}\
    \ @planets[\n            $planets{$planet1} + 1 .. $planets{$planet2} - 1] if\
    \ $planets{$planet1} + 1 < $planets{$planet2} - 1;\n    return @planets[$planets{$planet2}\
    \ + 1 .. $planets{$planet1} - 1] if $planets{$planet2} + 1 < $planets{$planet1}\
    \ - 1;\n    return ();\n}", "    # TODO\n}", "    my %planets = (\n        Mercury\
    \ => 1,\n        Venus => 2,\n        Earth => 3,\n        Mars => 4,\n      \
    \  Jupiter => 5,\n        Saturn => 6,\n        Uranus => 7,\n        Neptune\
    \ => 8,\n    );\n    my($num1, $num2) = ($planets{$planet1}, $planets{$planet2});\n\
    \    if (!$num1 || !$num2) {\n        return;\n    }\n    my @planets;\n    push\
    \ @planets, $planet1;\n    if ($num1 > $num2) {\n        for my $i (1..($num1\
    \ - $num2 - 1)) {\n            push @planets, $planets[$i];\n        }\n    }\n\
    \    else {\n        for my $i (1..($num2 - $num1 - 1)) {\n            push @planets,\
    \ $planets[$i];\n        }\n    }\n    push @planets, $planet2;\n    @planets;\n\
    }", "    my %planets = (\n        Mercury => 1,\n        Venus => 2,\n       \
    \ Earth => 3,\n        Mars => 4,\n        Jupiter => 5,\n        Saturn => 6,\n\
    \        Uranus => 7,\n        Neptune => 8,\n    );\n    my @planets = sort {\
    \ $planets{$a} <=> $planets{$b} } keys %planets;\n    return 0 unless $planets{$planet1}\
    \ && $planets{$planet2};\n    for(my $i = 0; $i < @planets; $i++) {\n        $planets[$i]\
    \ = () if $planets[$i] eq $planet1;\n        $planets[$i] = () if $planets[$i]\
    \ eq $planet2;\n    }\n    return @planets;\n}", "    my %planets = (\n      \
    \  Mercury => 1,\n        Venus => 2,\n        Earth => 3,\n        Mars => 4,\n\
    \        Jupiter => 5,\n        Saturn => 6,\n        Uranus => 7,\n        Neptune\
    \ => 8,\n    );\n    my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune);\n    return if (!$planets{$planet1} || !$planets{$planet2});\n\
    \    my @result;\n    if ($planets{$planet1} < $planets{$planet2}) {\n       \
    \ for my $idx ($planets{$planet1} .. $planets{$planet2}) {\n            push @result,\
    \ $planets[$idx-1];\n        }\n    }\n    else {\n        for my $idx ($planets{$planet2}\
    \ .. $planets{$planet1}) {\n            push @result, $planets[$idx-1];\n    \
    \    }\n    }\n    return @result;\n}", "    my $hash = {\n        \"Mercury\"\
    \ => 1,\n        \"Venus\" => 2,\n        \"Earth\" => 3,\n        \"Mars\" =>\
    \ 4,\n        \"Jupiter\" => 5,\n        \"Saturn\" => 6,\n        \"Uranus\"\
    \ => 7,\n        \"Neptune\" => 8,\n    };\n    if (defined $hash->{$planet1}\
    \ && defined $hash->{$planet2}) {\n        my @keys = sort keys %$hash;\n    \
    \    my $start = $hash->{$planet1};\n        my $end = $hash->{$planet2};\n  \
    \      my @result;\n        if ($start < $end) {\n            @result = splice(@keys,\
    \ $start, $end - $start);\n        } else {\n            @result = splice(@keys,\
    \ $end, $start - $end);\n        }\n        return @result;\n    } else {\n  \
    \      return \"Invalid planet names\";\n    }\n}", "    my @planets = qw/Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune/;\n    my $i = 0;\n    my $j\
    \ = 0;\n    for (my $k = 0; $k < @planets; $k++) {\n        if ($planets[$k] eq\
    \ $planet1) {\n            $i = $k;\n        }\n        if ($planets[$k] eq $planet2)\
    \ {\n            $j = $k;\n        }\n    }\n    if ($i == 0 || $j == 0) {\n \
    \       return ();\n    }\n    if ($i < $j) {\n        return @planets[$i+1..$j-1];\n\
    \    }\n    else {\n        return @planets[$j+1..$i-1];\n    }\n}", "    my $x\
    \ = 0;\n    my $y = 0;\n    my $z = 0;\n    my @planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  foreach my $i (@planets) {\n        if ($i eq $planet1) {\n            $x =\
    \ 1;\n        }\n        if ($i eq $planet2) {\n            $y = 1;\n        }\n\
    \    }\n    return @planets = () if ($x == 0 || $y == 0);\n    for (my $i = 0;\
    \ $i < scalar @planets; $i++) {\n        if ($planets[$i] eq $planet1) {\n   \
    \         $x = $i;\n        }\n        if ($planets[$i] eq $planet2) {\n     \
    \       $y = $i;\n        }\n    }\n    if ($x > $y) {\n        $z = $x;\n   \
    \     $x = $y;\n        $y = $z;\n    }\n    return @planets = @planets[$x+1..$y-1];\n\
    }", "    my %planets = ( Mercury => 1, Venus => 2, Earth => 3, Mars => 4, \n \
    \       Jupiter => 5, Saturn => 6, Uranus => 7, Neptune => 8 );\n    if (defined\
    \ $planets{$planet1} && defined $planets{$planet2}) {\n        my $min = $planets{$planet1}\
    \ < $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n        my\
    \ $max = $planets{$planet1} > $planets{$planet2} ? $planets{$planet1} : $planets{$planet2};\n\
    \        return sort { $planets{$a} <=> $planets{$b} } grep { $planets{$_} > $min\
    \ && $planets{$_} < $max } keys %planets;\n    }\n    return;\n}", "    my %planets\
    \ = (\n        \"Mercury\" => 1,\n        \"Venus\" => 2,\n        \"Earth\" =>\
    \ 3,\n        \"Mars\" => 4,\n        \"Jupiter\" => 5,\n        \"Saturn\" =>\
    \ 6,\n        \"Uranus\" => 7,\n        \"Neptune\" => 8,\n    );\n    my @res;\n\
    \    if (defined $planets{$planet1} && defined $planets{$planet2}) {\n       \
    \ if ($planets{$planet1} < $planets{$planet2}) {\n            for my $key (sort\
    \ keys %planets) {\n                if ($planets{$key} > $planets{$planet1} &&\
    \ $planets{$key} < $planets{$planet2}) {\n                    push @res, $key;\n\
    \                }\n            }\n        } else {\n            for my $key (sort\
    \ keys %planets) {\n                if ($planets{$key} > $planets{$planet2} &&\
    \ $planets{$key} < $planets{$planet1}) {\n                    push @res, $key;\n\
    \                }\n            }\n        }\n    }\n    return @res;\n}\nprint\
    \ Dumper bf(\"Earth\", \"Mercury\");\nprint Dumper bf(\"Mercury\", \"Uranus\"\
    );\nprint Dumper bf(\"Jupiter\", \"Neptune\");", "    my %orbits = qw(Mercury\
    \ 0 Venus 1 Earth 2 Mars 3 Jupiter 4 Saturn 5 Uranus 6 Neptune 7);\n    return\
    \ unless defined $orbits{$planet1} && defined $orbits{$planet2};\n    my @ret;\n\
    \    for (sort {$a <=> $b} @orbits{$planet1, $planet2}) {\n        push @ret,\
    \ keys %orbits;\n        shift @ret;\n    }\n    return $ret[0] if @ret == 1;\n\
    \    return @ret;\n}", "    my $planets = [\n        \"Mercury\",\n        \"\
    Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n      \
    \  \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n    my $idx1\
    \ = (index $planet1, @$planets) // -1;\n    my $idx2 = (index $planet2, @$planets)\
    \ // -1;\n    my @result;\n    if($idx1 == -1 || $idx2 == -1) {\n        return\
    \ @result;\n    }\n    my $start = $idx1 < $idx2 ? $idx1 : $idx2;\n    my $end\
    \ = $idx1 < $idx2 ? $idx2 : $idx1;\n    for(my $i = $start; $i <= $end; $i++)\
    \ {\n        push @result, $planets->[$i];\n    }\n    return @result;\n}", " \
    \   my @planets = qw(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune);\n\
    \    my %planets = map {$planets[$_] => $_} 0..$#planets;\n    return () unless\
    \ exists $planets{$planet1} && exists $planets{$planet2};\n    my($start, $end)\
    \ = sort {$a <=> $b} ($planets{$planet1}, $planets{$planet2});\n    return [map\
    \ {$planets[$_]} $start+1..$end-1];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
